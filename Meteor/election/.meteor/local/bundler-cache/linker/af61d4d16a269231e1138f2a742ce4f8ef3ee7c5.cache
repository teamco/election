[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\nvar Accounts = Package['accounts-base'].Accounts;\nvar AccountsServer = Package['accounts-base'].AccountsServer;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\n\n/* Package-scope variables */\nvar Roles;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/alanning_roles/roles_server.js                                                                 //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\n\"use strict\"                                                                                               // 1\n                                                                                                           // 2\n                                                                                                           // 3\n/**                                                                                                        // 4\n * Roles collection documents consist only of an id and a role name.                                       // 5\n *   ex: { _id: \"123\", name: \"admin\" }                                                                     // 6\n */                                                                                                        // 7\nif (!Meteor.roles) {                                                                                       // 8\n  Meteor.roles = new Mongo.Collection(\"roles\")                                                             // 9\n                                                                                                           // 10\n  // Create default indexes for roles collection                                                           // 11\n  Meteor.roles._ensureIndex('name', {unique: 1})                                                           // 12\n}                                                                                                          // 13\n                                                                                                           // 14\n                                                                                                           // 15\n/**                                                                                                        // 16\n * Publish logged-in user's roles so client-side checks can work.                                          // 17\n *                                                                                                         // 18\n * Use a named publish function so clients can check `ready()` state.                                      // 19\n */                                                                                                        // 20\nMeteor.publish('_roles', function () {                                                                     // 21\n  var loggedInUserId = this.userId,                                                                        // 22\n      fields = {roles: 1}                                                                                  // 23\n                                                                                                           // 24\n  if (!loggedInUserId) {                                                                                   // 25\n    this.ready()                                                                                           // 26\n    return                                                                                                 // 27\n  }                                                                                                        // 28\n                                                                                                           // 29\n  return Meteor.users.find({_id: loggedInUserId},                                                          // 30\n                           {fields: fields})                                                               // 31\n})                                                                                                         // 32\n                                                                                                           // 33\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/alanning_roles/roles_common.js                                                                 //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\n;(function () {                                                                                            // 1\n                                                                                                           // 2\n/**                                                                                                        // 3\n * Provides functions related to user authorization. Compatible with built-in Meteor accounts packages.    // 4\n *                                                                                                         // 5\n * @module Roles                                                                                           // 6\n */                                                                                                        // 7\n                                                                                                           // 8\n/**                                                                                                        // 9\n * Roles collection documents consist only of an id and a role name.                                       // 10\n *   ex: { _id:<uuid>, name: \"admin\" }                                                                     // 11\n */                                                                                                        // 12\nif (!Meteor.roles) {                                                                                       // 13\n  Meteor.roles = new Mongo.Collection(\"roles\")                                                             // 14\n}                                                                                                          // 15\n                                                                                                           // 16\n/**                                                                                                        // 17\n * Authorization package compatible with built-in Meteor accounts system.                                  // 18\n *                                                                                                         // 19\n * Stores user's current roles in a 'roles' field on the user object.                                      // 20\n *                                                                                                         // 21\n * @class Roles                                                                                            // 22\n * @constructor                                                                                            // 23\n */                                                                                                        // 24\nif ('undefined' === typeof Roles) {                                                                        // 25\n  Roles = {}                                                                                               // 26\n}                                                                                                          // 27\n                                                                                                           // 28\n\"use strict\";                                                                                              // 29\n                                                                                                           // 30\nvar mixingGroupAndNonGroupErrorMsg = \"Roles error: Can't mix grouped and non-grouped roles for same user\";\n                                                                                                           // 32\n_.extend(Roles, {                                                                                          // 33\n                                                                                                           // 34\n  /**                                                                                                      // 35\n   * Constant used to reference the special 'global' group that                                            // 36\n   * can be used to apply blanket permissions across all groups.                                           // 37\n   *                                                                                                       // 38\n   * @example                                                                                              // 39\n   *     Roles.addUsersToRoles(user, 'admin', Roles.GLOBAL_GROUP)                                          // 40\n   *     Roles.userIsInRole(user, 'admin') // => true                                                      // 41\n   *                                                                                                       // 42\n   *     Roles.setUserRoles(user, 'support-staff', Roles.GLOBAL_GROUP)                                     // 43\n   *     Roles.userIsInRole(user, 'support-staff') // => true                                              // 44\n   *     Roles.userIsInRole(user, 'admin') // => false                                                     // 45\n   *                                                                                                       // 46\n   * @property GLOBAL_GROUP                                                                                // 47\n   * @type String                                                                                          // 48\n   * @static                                                                                               // 49\n   * @final                                                                                                // 50\n   */                                                                                                      // 51\n  GLOBAL_GROUP: '__global_roles__',                                                                        // 52\n                                                                                                           // 53\n                                                                                                           // 54\n  /**                                                                                                      // 55\n   * Create a new role. Whitespace will be trimmed.                                                        // 56\n   *                                                                                                       // 57\n   * @method createRole                                                                                    // 58\n   * @param {String} role Name of role                                                                     // 59\n   * @return {String} id of new role                                                                       // 60\n   */                                                                                                      // 61\n  createRole: function (role) {                                                                            // 62\n    var id,                                                                                                // 63\n        match                                                                                              // 64\n                                                                                                           // 65\n    if (!role                                                                                              // 66\n        || 'string' !== typeof role                                                                        // 67\n        || role.trim().length === 0) {                                                                     // 68\n      return                                                                                               // 69\n    }                                                                                                      // 70\n                                                                                                           // 71\n    try {                                                                                                  // 72\n      id = Meteor.roles.insert({'name': role.trim()})                                                      // 73\n      return id                                                                                            // 74\n    } catch (e) {                                                                                          // 75\n      // (from Meteor accounts-base package, insertUserDoc func)                                           // 76\n      // XXX string parsing sucks, maybe                                                                   // 77\n      // https://jira.mongodb.org/browse/SERVER-3069 will get fixed one day                                // 78\n      if (e.name !== 'MongoError') throw e                                                                 // 79\n      match = e.err.match(/^E11000 duplicate key error index: ([^ ]+)/)                                    // 80\n      if (!match) throw e                                                                                  // 81\n      if (match[1].indexOf('$name') !== -1)                                                                // 82\n        throw new Meteor.Error(403, \"Role already exists.\")                                                // 83\n      throw e                                                                                              // 84\n    }                                                                                                      // 85\n  },                                                                                                       // 86\n                                                                                                           // 87\n  /**                                                                                                      // 88\n   * Delete an existing role.  Will throw \"Role in use\" error if any users                                 // 89\n   * are currently assigned to the target role.                                                            // 90\n   *                                                                                                       // 91\n   * @method deleteRole                                                                                    // 92\n   * @param {String} role Name of role                                                                     // 93\n   */                                                                                                      // 94\n  deleteRole: function (role) {                                                                            // 95\n    if (!role) return                                                                                      // 96\n                                                                                                           // 97\n    var foundExistingUser = Meteor.users.findOne(                                                          // 98\n                              {roles: {$in: [role]}},                                                      // 99\n                              {fields: {_id: 1}})                                                          // 100\n                                                                                                           // 101\n    if (foundExistingUser) {                                                                               // 102\n      throw new Meteor.Error(403, 'Role in use')                                                           // 103\n    }                                                                                                      // 104\n                                                                                                           // 105\n    var thisRole = Meteor.roles.findOne({name: role})                                                      // 106\n    if (thisRole) {                                                                                        // 107\n      Meteor.roles.remove({_id: thisRole._id})                                                             // 108\n    }                                                                                                      // 109\n  },                                                                                                       // 110\n                                                                                                           // 111\n  /**                                                                                                      // 112\n   * Add users to roles. Will create roles as needed.                                                      // 113\n   *                                                                                                       // 114\n   * NOTE: Mixing grouped and non-grouped roles for the same user                                          // 115\n   *       is not supported and will throw an error.                                                       // 116\n   *                                                                                                       // 117\n   * Makes 2 calls to database:                                                                            // 118\n   *  1. retrieve list of all existing roles                                                               // 119\n   *  2. update users' roles                                                                               // 120\n   *                                                                                                       // 121\n   * @example                                                                                              // 122\n   *     Roles.addUsersToRoles(userId, 'admin')                                                            // 123\n   *     Roles.addUsersToRoles(userId, ['view-secrets'], 'example.com')                                    // 124\n   *     Roles.addUsersToRoles([user1, user2], ['user','editor'])                                          // 125\n   *     Roles.addUsersToRoles([user1, user2], ['glorious-admin', 'perform-action'], 'example.org')        // 126\n   *     Roles.addUsersToRoles(userId, 'admin', Roles.GLOBAL_GROUP)                                        // 127\n   *                                                                                                       // 128\n   * @method addUsersToRoles                                                                               // 129\n   * @param {Array|String} users User id(s) or object(s) with an _id field                                 // 130\n   * @param {Array|String} roles Name(s) of roles/permissions to add users to                              // 131\n   * @param {String} [group] Optional group name. If supplied, roles will be                               // 132\n   *                         specific to that group.                                                       // 133\n   *                         Group names can not start with '$' or numbers.                                // 134\n   *                         Periods in names '.' are automatically converted                              // 135\n   *                         to underscores.                                                               // 136\n   *                         The special group Roles.GLOBAL_GROUP provides                                 // 137\n   *                         a convenient way to assign blanket roles/permissions                          // 138\n   *                         across all groups.  The roles/permissions in the                              // 139\n   *                         Roles.GLOBAL_GROUP group will be automatically                                // 140\n   *                         included in checks for any group.                                             // 141\n   */                                                                                                      // 142\n  addUsersToRoles: function (users, roles, group) {                                                        // 143\n    // use Template pattern to update user roles                                                           // 144\n    Roles._updateUserRoles(users, roles, group, Roles._update_$addToSet_fn)                                // 145\n  },                                                                                                       // 146\n                                                                                                           // 147\n  /**                                                                                                      // 148\n   * Set a users roles/permissions.                                                                        // 149\n   *                                                                                                       // 150\n   * @example                                                                                              // 151\n   *     Roles.setUserRoles(userId, 'admin')                                                               // 152\n   *     Roles.setUserRoles(userId, ['view-secrets'], 'example.com')                                       // 153\n   *     Roles.setUserRoles([user1, user2], ['user','editor'])                                             // 154\n   *     Roles.setUserRoles([user1, user2], ['glorious-admin', 'perform-action'], 'example.org')           // 155\n   *     Roles.setUserRoles(userId, 'admin', Roles.GLOBAL_GROUP)                                           // 156\n   *                                                                                                       // 157\n   * @method setUserRoles                                                                                  // 158\n   * @param {Array|String} users User id(s) or object(s) with an _id field                                 // 159\n   * @param {Array|String} roles Name(s) of roles/permissions to add users to                              // 160\n   * @param {String} [group] Optional group name. If supplied, roles will be                               // 161\n   *                         specific to that group.                                                       // 162\n   *                         Group names can not start with '$'.                                           // 163\n   *                         Periods in names '.' are automatically converted                              // 164\n   *                         to underscores.                                                               // 165\n   *                         The special group Roles.GLOBAL_GROUP provides                                 // 166\n   *                         a convenient way to assign blanket roles/permissions                          // 167\n   *                         across all groups.  The roles/permissions in the                              // 168\n   *                         Roles.GLOBAL_GROUP group will be automatically                                // 169\n   *                         included in checks for any group.                                             // 170\n   */                                                                                                      // 171\n  setUserRoles: function (users, roles, group) {                                                           // 172\n    // use Template pattern to update user roles                                                           // 173\n    Roles._updateUserRoles(users, roles, group, Roles._update_$set_fn)                                     // 174\n  },                                                                                                       // 175\n                                                                                                           // 176\n  /**                                                                                                      // 177\n   * Remove users from roles                                                                               // 178\n   *                                                                                                       // 179\n   * @example                                                                                              // 180\n   *     Roles.removeUsersFromRoles(users.bob, 'admin')                                                    // 181\n   *     Roles.removeUsersFromRoles([users.bob, users.joe], ['editor'])                                    // 182\n   *     Roles.removeUsersFromRoles([users.bob, users.joe], ['editor', 'user'])                            // 183\n   *     Roles.removeUsersFromRoles(users.eve, ['user'], 'group1')                                         // 184\n   *                                                                                                       // 185\n   * @method removeUsersFromRoles                                                                          // 186\n   * @param {Array|String} users User id(s) or object(s) with an _id field                                 // 187\n   * @param {Array|String} roles Name(s) of roles to add users to                                          // 188\n   * @param {String} [group] Optional. Group name. If supplied, only that                                  // 189\n   *                         group will have roles removed.                                                // 190\n   */                                                                                                      // 191\n  removeUsersFromRoles: function (users, roles, group) {                                                   // 192\n    var update                                                                                             // 193\n                                                                                                           // 194\n    if (!users) throw new Error (\"Missing 'users' param\")                                                  // 195\n    if (!roles) throw new Error (\"Missing 'roles' param\")                                                  // 196\n    if (group) {                                                                                           // 197\n      if ('string' !== typeof group)                                                                       // 198\n        throw new Error (\"Roles error: Invalid parameter 'group'. Expected 'string' type\")                 // 199\n      if ('$' === group[0])                                                                                // 200\n        throw new Error (\"Roles error: groups can not start with '$'\")                                     // 201\n                                                                                                           // 202\n      // convert any periods to underscores                                                                // 203\n      group = group.replace(/\\./g, '_')                                                                    // 204\n    }                                                                                                      // 205\n                                                                                                           // 206\n    // ensure arrays                                                                                       // 207\n    if (!_.isArray(users)) users = [users]                                                                 // 208\n    if (!_.isArray(roles)) roles = [roles]                                                                 // 209\n                                                                                                           // 210\n    // ensure users is an array of user ids                                                                // 211\n    users = _.reduce(users, function (memo, user) {                                                        // 212\n      var _id                                                                                              // 213\n      if ('string' === typeof user) {                                                                      // 214\n        memo.push(user)                                                                                    // 215\n      } else if ('object' === typeof user) {                                                               // 216\n        _id = user._id                                                                                     // 217\n        if ('string' === typeof _id) {                                                                     // 218\n          memo.push(_id)                                                                                   // 219\n        }                                                                                                  // 220\n      }                                                                                                    // 221\n      return memo                                                                                          // 222\n    }, [])                                                                                                 // 223\n                                                                                                           // 224\n    // update all users, remove from roles set                                                             // 225\n                                                                                                           // 226\n    if (group) {                                                                                           // 227\n      update = {$pullAll: {}}                                                                              // 228\n      update.$pullAll['roles.'+group] = roles                                                              // 229\n    } else {                                                                                               // 230\n      update = {$pullAll: {roles: roles}}                                                                  // 231\n    }                                                                                                      // 232\n                                                                                                           // 233\n    try {                                                                                                  // 234\n      if (Meteor.isClient) {                                                                               // 235\n        // Iterate over each user to fulfill Meteor's 'one update per ID' policy                           // 236\n        _.each(users, function (user) {                                                                    // 237\n          Meteor.users.update({_id:user}, update)                                                          // 238\n        })                                                                                                 // 239\n      } else {                                                                                             // 240\n        // On the server we can leverage MongoDB's $in operator for performance                            // 241\n        Meteor.users.update({_id:{$in:users}}, update, {multi: true})                                      // 242\n      }                                                                                                    // 243\n    }                                                                                                      // 244\n    catch (ex) {                                                                                           // 245\n      if (ex.name === 'MongoError' && isMongoMixError(ex.err)) {                                           // 246\n        throw new Error (mixingGroupAndNonGroupErrorMsg)                                                   // 247\n      }                                                                                                    // 248\n                                                                                                           // 249\n      throw ex                                                                                             // 250\n    }                                                                                                      // 251\n  },                                                                                                       // 252\n                                                                                                           // 253\n  /**                                                                                                      // 254\n   * Check if user has specified permissions/roles                                                         // 255\n   *                                                                                                       // 256\n   * @example                                                                                              // 257\n   *     // non-group usage                                                                                // 258\n   *     Roles.userIsInRole(user, 'admin')                                                                 // 259\n   *     Roles.userIsInRole(user, ['admin','editor'])                                                      // 260\n   *     Roles.userIsInRole(userId, 'admin')                                                               // 261\n   *     Roles.userIsInRole(userId, ['admin','editor'])                                                    // 262\n   *                                                                                                       // 263\n   *     // per-group usage                                                                                // 264\n   *     Roles.userIsInRole(user,   ['admin','editor'], 'group1')                                          // 265\n   *     Roles.userIsInRole(userId, ['admin','editor'], 'group1')                                          // 266\n   *     Roles.userIsInRole(userId, ['admin','editor'], Roles.GLOBAL_GROUP)                                // 267\n   *                                                                                                       // 268\n   *     // this format can also be used as short-hand for Roles.GLOBAL_GROUP                              // 269\n   *     Roles.userIsInRole(user, 'admin')                                                                 // 270\n   *                                                                                                       // 271\n   * @method userIsInRole                                                                                  // 272\n   * @param {String|Object} user User Id or actual user object                                             // 273\n   * @param {String|Array} roles Name of role/permission or Array of                                       // 274\n   *                            roles/permissions to check against.  If array,                             // 275\n   *                            will return true if user is in _any_ role.                                 // 276\n   * @param {String} [group] Optional. Name of group.  If supplied, limits check                           // 277\n   *                         to just that group.                                                           // 278\n   *                         The user's Roles.GLOBAL_GROUP will always be checked                          // 279\n   *                         whether group is specified or not.                                            // 280\n   * @return {Boolean} true if user is in _any_ of the target roles                                        // 281\n   */                                                                                                      // 282\n  userIsInRole: function (user, roles, group) {                                                            // 283\n    var id,                                                                                                // 284\n        userRoles,                                                                                         // 285\n        query,                                                                                             // 286\n        groupQuery,                                                                                        // 287\n        found = false                                                                                      // 288\n                                                                                                           // 289\n    // ensure array to simplify code                                                                       // 290\n    if (!_.isArray(roles)) {                                                                               // 291\n      roles = [roles]                                                                                      // 292\n    }                                                                                                      // 293\n                                                                                                           // 294\n    if (!user) return false                                                                                // 295\n    if (group) {                                                                                           // 296\n      if ('string' !== typeof group) return false                                                          // 297\n      if ('$' === group[0]) return false                                                                   // 298\n                                                                                                           // 299\n      // convert any periods to underscores                                                                // 300\n      group = group.replace(/\\./g, '_')                                                                    // 301\n    }                                                                                                      // 302\n                                                                                                           // 303\n    if ('object' === typeof user) {                                                                        // 304\n      userRoles = user.roles                                                                               // 305\n      if (_.isArray(userRoles)) {                                                                          // 306\n        return _.some(roles, function (role) {                                                             // 307\n          return _.contains(userRoles, role)                                                               // 308\n        })                                                                                                 // 309\n      } else if ('object' === typeof userRoles) {                                                          // 310\n        // roles field is dictionary of groups                                                             // 311\n        found = _.isArray(userRoles[group]) && _.some(roles, function (role) {                             // 312\n          return _.contains(userRoles[group], role)                                                        // 313\n        })                                                                                                 // 314\n        if (!found) {                                                                                      // 315\n          // not found in regular group or group not specified.                                            // 316\n          // check Roles.GLOBAL_GROUP, if it exists                                                        // 317\n          found = _.isArray(userRoles[Roles.GLOBAL_GROUP]) && _.some(roles, function (role) {              // 318\n            return _.contains(userRoles[Roles.GLOBAL_GROUP], role)                                         // 319\n          })                                                                                               // 320\n        }                                                                                                  // 321\n        return found                                                                                       // 322\n      }                                                                                                    // 323\n                                                                                                           // 324\n      // missing roles field, try going direct via id                                                      // 325\n      id = user._id                                                                                        // 326\n    } else if ('string' === typeof user) {                                                                 // 327\n      id = user                                                                                            // 328\n    }                                                                                                      // 329\n                                                                                                           // 330\n    if (!id) return false                                                                                  // 331\n                                                                                                           // 332\n                                                                                                           // 333\n    query = {_id: id, $or: []}                                                                             // 334\n                                                                                                           // 335\n    // always check Roles.GLOBAL_GROUP                                                                     // 336\n    groupQuery = {}                                                                                        // 337\n    groupQuery['roles.'+Roles.GLOBAL_GROUP] = {$in: roles}                                                 // 338\n    query.$or.push(groupQuery)                                                                             // 339\n                                                                                                           // 340\n    if (group) {                                                                                           // 341\n      // structure of query, when group specified including Roles.GLOBAL_GROUP                             // 342\n      //   {_id: id,                                                                                       // 343\n      //    $or: [                                                                                         // 344\n      //      {'roles.group1':{$in: ['admin']}},                                                           // 345\n      //      {'roles.__global_roles__':{$in: ['admin']}}                                                  // 346\n      //    ]}                                                                                             // 347\n      groupQuery = {}                                                                                      // 348\n      groupQuery['roles.'+group] = {$in: roles}                                                            // 349\n      query.$or.push(groupQuery)                                                                           // 350\n    } else {                                                                                               // 351\n      // structure of query, where group not specified. includes                                           // 352\n      // Roles.GLOBAL_GROUP                                                                                // 353\n      //   {_id: id,                                                                                       // 354\n      //    $or: [                                                                                         // 355\n      //      {roles: {$in: ['admin']}},                                                                   // 356\n      //      {'roles.__global_roles__': {$in: ['admin']}}                                                 // 357\n      //    ]}                                                                                             // 358\n      query.$or.push({roles: {$in: roles}})                                                                // 359\n    }                                                                                                      // 360\n                                                                                                           // 361\n    found = Meteor.users.findOne(query, {fields: {_id: 1}})                                                // 362\n    return found ? true : false                                                                            // 363\n  },                                                                                                       // 364\n                                                                                                           // 365\n  /**                                                                                                      // 366\n   * Retrieve users roles                                                                                  // 367\n   *                                                                                                       // 368\n   * @method getRolesForUser                                                                               // 369\n   * @param {String|Object} user User Id or actual user object                                             // 370\n   * @param {String} [group] Optional name of group to restrict roles to.                                  // 371\n   *                         User's Roles.GLOBAL_GROUP will also be included.                              // 372\n   * @return {Array} Array of user's roles, unsorted.                                                      // 373\n   */                                                                                                      // 374\n  getRolesForUser: function (user, group) {                                                                // 375\n    if (!user) return []                                                                                   // 376\n    if (group) {                                                                                           // 377\n      if ('string' !== typeof group) return []                                                             // 378\n      if ('$' === group[0]) return []                                                                      // 379\n                                                                                                           // 380\n      // convert any periods to underscores                                                                // 381\n      group = group.replace(/\\./g, '_')                                                                    // 382\n    }                                                                                                      // 383\n                                                                                                           // 384\n    if ('string' === typeof user) {                                                                        // 385\n      user = Meteor.users.findOne(                                                                         // 386\n               {_id: user},                                                                                // 387\n               {fields: {roles: 1}})                                                                       // 388\n                                                                                                           // 389\n    } else if ('object' !== typeof user) {                                                                 // 390\n      // invalid user object                                                                               // 391\n      return []                                                                                            // 392\n    }                                                                                                      // 393\n                                                                                                           // 394\n    if (!user || !user.roles) return []                                                                    // 395\n                                                                                                           // 396\n    if (group) {                                                                                           // 397\n      return _.union(user.roles[group] || [], user.roles[Roles.GLOBAL_GROUP] || [])                        // 398\n    }                                                                                                      // 399\n                                                                                                           // 400\n    if (_.isArray(user.roles))                                                                             // 401\n      return user.roles                                                                                    // 402\n                                                                                                           // 403\n    // using groups but group not specified. return global group, if exists                                // 404\n    return user.roles[Roles.GLOBAL_GROUP] || []                                                            // 405\n  },                                                                                                       // 406\n                                                                                                           // 407\n  /**                                                                                                      // 408\n   * Retrieve set of all existing roles                                                                    // 409\n   *                                                                                                       // 410\n   * @method getAllRoles                                                                                   // 411\n   * @return {Cursor} cursor of existing roles                                                             // 412\n   */                                                                                                      // 413\n  getAllRoles: function () {                                                                               // 414\n    return Meteor.roles.find({}, {sort: {name: 1}})                                                        // 415\n  },                                                                                                       // 416\n                                                                                                           // 417\n  /**                                                                                                      // 418\n   * Retrieve all users who are in target role.                                                            // 419\n   *                                                                                                       // 420\n   * NOTE: This is an expensive query; it performs a full collection scan                                  // 421\n   * on the users collection since there is no index set on the 'roles' field.                             // 422\n   * This is by design as most queries will specify an _id so the _id index is                             // 423\n   * used automatically.                                                                                   // 424\n   *                                                                                                       // 425\n   * @method getUsersInRole                                                                                // 426\n   * @param {Array|String} role Name of role/permission.  If array, users                                  // 427\n   *                            returned will have at least one of the roles                               // 428\n   *                            specified but need not have _all_ roles.                                   // 429\n   * @param {String} [group] Optional name of group to restrict roles to.                                  // 430\n   *                         User's Roles.GLOBAL_GROUP will also be checked.                               // 431\n   * @param {Object} [options] Optional options which are passed directly                                  // 432\n   *                           through to `Meteor.users.find(query, options)`                              // 433\n   * @return {Cursor} cursor of users in role                                                              // 434\n   */                                                                                                      // 435\n  getUsersInRole: function (role, group, options) {                                                        // 436\n    var query,                                                                                             // 437\n        roles = role,                                                                                      // 438\n        groupQuery                                                                                         // 439\n                                                                                                           // 440\n    // ensure array to simplify query logic                                                                // 441\n    if (!_.isArray(roles)) roles = [roles]                                                                 // 442\n                                                                                                           // 443\n    if (group) {                                                                                           // 444\n      if ('string' !== typeof group)                                                                       // 445\n        throw new Error (\"Roles error: Invalid parameter 'group'. Expected 'string' type\")                 // 446\n      if ('$' === group[0])                                                                                // 447\n        throw new Error (\"Roles error: groups can not start with '$'\")                                     // 448\n                                                                                                           // 449\n      // convert any periods to underscores                                                                // 450\n      group = group.replace(/\\./g, '_')                                                                    // 451\n    }                                                                                                      // 452\n                                                                                                           // 453\n    query = {$or: []}                                                                                      // 454\n                                                                                                           // 455\n    // always check Roles.GLOBAL_GROUP                                                                     // 456\n    groupQuery = {}                                                                                        // 457\n    groupQuery['roles.'+Roles.GLOBAL_GROUP] = {$in: roles}                                                 // 458\n    query.$or.push(groupQuery)                                                                             // 459\n                                                                                                           // 460\n    if (group) {                                                                                           // 461\n      // structure of query, when group specified including Roles.GLOBAL_GROUP                             // 462\n      //   {                                                                                               // 463\n      //    $or: [                                                                                         // 464\n      //      {'roles.group1':{$in: ['admin']}},                                                           // 465\n      //      {'roles.__global_roles__':{$in: ['admin']}}                                                  // 466\n      //    ]}                                                                                             // 467\n      groupQuery = {}                                                                                      // 468\n      groupQuery['roles.'+group] = {$in: roles}                                                            // 469\n      query.$or.push(groupQuery)                                                                           // 470\n    } else {                                                                                               // 471\n      // structure of query, where group not specified. includes                                           // 472\n      // Roles.GLOBAL_GROUP                                                                                // 473\n      //   {                                                                                               // 474\n      //    $or: [                                                                                         // 475\n      //      {roles: {$in: ['admin']}},                                                                   // 476\n      //      {'roles.__global_roles__': {$in: ['admin']}}                                                 // 477\n      //    ]}                                                                                             // 478\n      query.$or.push({roles: {$in: roles}})                                                                // 479\n    }                                                                                                      // 480\n                                                                                                           // 481\n    return Meteor.users.find(query, options);                                                              // 482\n  },  // end getUsersInRole                                                                                // 483\n                                                                                                           // 484\n  /**                                                                                                      // 485\n   * Retrieve users groups, if any                                                                         // 486\n   *                                                                                                       // 487\n   * @method getGroupsForUser                                                                              // 488\n   * @param {String|Object} user User Id or actual user object                                             // 489\n   * @param {String} [role] Optional name of roles to restrict groups to.                                  // 490\n   *                                                                                                       // 491\n   * @return {Array} Array of user's groups, unsorted. Roles.GLOBAL_GROUP will be omitted                  // 492\n   */                                                                                                      // 493\n  getGroupsForUser: function (user, role) {                                                                // 494\n    var userGroups = [];                                                                                   // 495\n                                                                                                           // 496\n    if (!user) return []                                                                                   // 497\n    if (role) {                                                                                            // 498\n      if ('string' !== typeof role) return []                                                              // 499\n      if ('$' === role[0]) return []                                                                       // 500\n                                                                                                           // 501\n      // convert any periods to underscores                                                                // 502\n      role = role.replace('.', '_')                                                                        // 503\n    }                                                                                                      // 504\n                                                                                                           // 505\n    if ('string' === typeof user) {                                                                        // 506\n      user = Meteor.users.findOne(                                                                         // 507\n               {_id: user},                                                                                // 508\n               {fields: {roles: 1}})                                                                       // 509\n                                                                                                           // 510\n    }else if ('object' !== typeof user) {                                                                  // 511\n      // invalid user object                                                                               // 512\n      return []                                                                                            // 513\n    }                                                                                                      // 514\n                                                                                                           // 515\n    //User has no roles or is not using groups                                                             // 516\n    if (!user || !user.roles || _.isArray(user.roles)) return []                                           // 517\n                                                                                                           // 518\n    if (role) {                                                                                            // 519\n      _.each(user.roles, function(groupRoles, groupName) {                                                 // 520\n        if (_.contains(groupRoles, role) && groupName !== Roles.GLOBAL_GROUP) {                            // 521\n          userGroups.push(groupName);                                                                      // 522\n        }                                                                                                  // 523\n      });                                                                                                  // 524\n      return userGroups;                                                                                   // 525\n    }else {                                                                                                // 526\n      return _.without(_.keys(user.roles), Roles.GLOBAL_GROUP);                                            // 527\n    }                                                                                                      // 528\n                                                                                                           // 529\n  }, //End getGroupsForUser                                                                                // 530\n                                                                                                           // 531\n                                                                                                           // 532\n  /**                                                                                                      // 533\n   * Private function 'template' that uses $set to construct an update object                              // 534\n   * for MongoDB.  Passed to _updateUserRoles                                                              // 535\n   *                                                                                                       // 536\n   * @method _update_$set_fn                                                                               // 537\n   * @protected                                                                                            // 538\n   * @param {Array} roles                                                                                  // 539\n   * @param {String} [group]                                                                               // 540\n   * @return {Object} update object for use in MongoDB update command                                      // 541\n   */                                                                                                      // 542\n  _update_$set_fn: function  (roles, group) {                                                              // 543\n    var update = {}                                                                                        // 544\n                                                                                                           // 545\n    if (group) {                                                                                           // 546\n      // roles is a key/value dict object                                                                  // 547\n      update.$set = {}                                                                                     // 548\n      update.$set['roles.' + group] = roles                                                                // 549\n    } else {                                                                                               // 550\n      // roles is an array of strings                                                                      // 551\n      update.$set = {roles: roles}                                                                         // 552\n    }                                                                                                      // 553\n                                                                                                           // 554\n    return update                                                                                          // 555\n  },  // end _update_$set_fn                                                                               // 556\n                                                                                                           // 557\n  /**                                                                                                      // 558\n   * Private function 'template' that uses $addToSet to construct an update                                // 559\n   * object for MongoDB.  Passed to _updateUserRoles                                                       // 560\n   *                                                                                                       // 561\n   * @method _update_$addToSet_fn                                                                          // 562\n   * @protected                                                                                            // 563\n   * @param {Array} roles                                                                                  // 564\n   * @param {String} [group]                                                                               // 565\n   * @return {Object} update object for use in MongoDB update command                                      // 566\n   */                                                                                                      // 567\n  _update_$addToSet_fn: function (roles, group) {                                                          // 568\n    var update = {}                                                                                        // 569\n                                                                                                           // 570\n    if (group) {                                                                                           // 571\n      // roles is a key/value dict object                                                                  // 572\n      update.$addToSet = {}                                                                                // 573\n      update.$addToSet['roles.' + group] = {$each: roles}                                                  // 574\n    } else {                                                                                               // 575\n      // roles is an array of strings                                                                      // 576\n      update.$addToSet = {roles: {$each: roles}}                                                           // 577\n    }                                                                                                      // 578\n                                                                                                           // 579\n    return update                                                                                          // 580\n  },  // end _update_$addToSet_fn                                                                          // 581\n                                                                                                           // 582\n                                                                                                           // 583\n  /**                                                                                                      // 584\n   * Internal function that uses the Template pattern to adds or sets roles                                // 585\n   * for users.                                                                                            // 586\n   *                                                                                                       // 587\n   * @method _updateUserRoles                                                                              // 588\n   * @protected                                                                                            // 589\n   * @param {Array|String} users user id(s) or object(s) with an _id field                                 // 590\n   * @param {Array|String} roles name(s) of roles/permissions to add users to                              // 591\n   * @param {String} group Group name. If not null or undefined, roles will be                             // 592\n   *                         specific to that group.                                                       // 593\n   *                         Group names can not start with '$'.                                           // 594\n   *                         Periods in names '.' are automatically converted                              // 595\n   *                         to underscores.                                                               // 596\n   *                         The special group Roles.GLOBAL_GROUP provides                                 // 597\n   *                         a convenient way to assign blanket roles/permissions                          // 598\n   *                         across all groups.  The roles/permissions in the                              // 599\n   *                         Roles.GLOBAL_GROUP group will be automatically                                // 600\n   *                         included in checks for any group.                                             // 601\n   * @param {Function} updateFactory Func which returns an update object that                              // 602\n   *                         will be passed to Mongo.                                                      // 603\n   *   @param {Array} roles                                                                                // 604\n   *   @param {String} [group]                                                                             // 605\n   */                                                                                                      // 606\n  _updateUserRoles: function (users, roles, group, updateFactory) {                                        // 607\n    if (!users) throw new Error (\"Missing 'users' param\")                                                  // 608\n    if (!roles) throw new Error (\"Missing 'roles' param\")                                                  // 609\n    if (group) {                                                                                           // 610\n      if ('string' !== typeof group)                                                                       // 611\n        throw new Error (\"Roles error: Invalid parameter 'group'. Expected 'string' type\")                 // 612\n      if ('$' === group[0])                                                                                // 613\n        throw new Error (\"Roles error: groups can not start with '$'\")                                     // 614\n                                                                                                           // 615\n      // convert any periods to underscores                                                                // 616\n      group = group.replace(/\\./g, '_')                                                                    // 617\n    }                                                                                                      // 618\n                                                                                                           // 619\n    var existingRoles,                                                                                     // 620\n        query,                                                                                             // 621\n        update                                                                                             // 622\n                                                                                                           // 623\n    // ensure arrays to simplify code                                                                      // 624\n    if (!_.isArray(users)) users = [users]                                                                 // 625\n    if (!_.isArray(roles)) roles = [roles]                                                                 // 626\n                                                                                                           // 627\n    // remove invalid roles                                                                                // 628\n    roles = _.reduce(roles, function (memo, role) {                                                        // 629\n      if (role                                                                                             // 630\n          && 'string' === typeof role                                                                      // 631\n          && role.trim().length > 0) {                                                                     // 632\n        memo.push(role.trim())                                                                             // 633\n      }                                                                                                    // 634\n      return memo                                                                                          // 635\n    }, [])                                                                                                 // 636\n                                                                                                           // 637\n    // empty roles array is ok, since it might be a $set operation to clear roles                          // 638\n    //if (roles.length === 0) return                                                                       // 639\n                                                                                                           // 640\n    // ensure all roles exist in 'roles' collection                                                        // 641\n    existingRoles = _.reduce(Meteor.roles.find({}).fetch(), function (memo, role) {                        // 642\n      memo[role.name] = true                                                                               // 643\n      return memo                                                                                          // 644\n    }, {})                                                                                                 // 645\n    _.each(roles, function (role) {                                                                        // 646\n      if (!existingRoles[role]) {                                                                          // 647\n        Roles.createRole(role)                                                                             // 648\n      }                                                                                                    // 649\n    })                                                                                                     // 650\n                                                                                                           // 651\n    // ensure users is an array of user ids                                                                // 652\n    users = _.reduce(users, function (memo, user) {                                                        // 653\n      var _id                                                                                              // 654\n      if ('string' === typeof user) {                                                                      // 655\n        memo.push(user)                                                                                    // 656\n      } else if ('object' === typeof user) {                                                               // 657\n        _id = user._id                                                                                     // 658\n        if ('string' === typeof _id) {                                                                     // 659\n          memo.push(_id)                                                                                   // 660\n        }                                                                                                  // 661\n      }                                                                                                    // 662\n      return memo                                                                                          // 663\n    }, [])                                                                                                 // 664\n                                                                                                           // 665\n    // update all users                                                                                    // 666\n    update = updateFactory(roles, group)                                                                   // 667\n                                                                                                           // 668\n    try {                                                                                                  // 669\n      if (Meteor.isClient) {                                                                               // 670\n        // On client, iterate over each user to fulfill Meteor's                                           // 671\n        // 'one update per ID' policy                                                                      // 672\n        _.each(users, function (user) {                                                                    // 673\n          Meteor.users.update({_id: user}, update)                                                         // 674\n        })                                                                                                 // 675\n      } else {                                                                                             // 676\n        // On the server we can use MongoDB's $in operator for                                             // 677\n        // better performance                                                                              // 678\n        Meteor.users.update(                                                                               // 679\n          {_id: {$in: users}},                                                                             // 680\n          update,                                                                                          // 681\n          {multi: true})                                                                                   // 682\n      }                                                                                                    // 683\n    }                                                                                                      // 684\n    catch (ex) {                                                                                           // 685\n      if (ex.name === 'MongoError' && isMongoMixError(ex.err)) {                                           // 686\n        throw new Error (mixingGroupAndNonGroupErrorMsg)                                                   // 687\n      }                                                                                                    // 688\n                                                                                                           // 689\n      throw ex                                                                                             // 690\n    }                                                                                                      // 691\n  }  // end _updateUserRoles                                                                               // 692\n                                                                                                           // 693\n})  // end _.extend(Roles ...)                                                                             // 694\n                                                                                                           // 695\n                                                                                                           // 696\nfunction isMongoMixError (errorMsg) {                                                                      // 697\n  var expectedMessages = [                                                                                 // 698\n      'Cannot apply $addToSet modifier to non-array',                                                      // 699\n      'Cannot apply $addToSet to a non-array field',                                                       // 700\n      'Can only apply $pullAll to an array',                                                               // 701\n      'Cannot apply $pull/$pullAll modifier to non-array',                                                 // 702\n      \"can't append to array using string field name\",                                                     // 703\n      'to traverse the element'                                                                            // 704\n      ]                                                                                                    // 705\n                                                                                                           // 706\n  return _.some(expectedMessages, function (snippet) {                                                     // 707\n    return strContains(errorMsg, snippet)                                                                  // 708\n  })                                                                                                       // 709\n}                                                                                                          // 710\n                                                                                                           // 711\nfunction strContains (haystack, needle) {                                                                  // 712\n  return -1 !== haystack.indexOf(needle)                                                                   // 713\n}                                                                                                          // 714\n                                                                                                           // 715\n}());                                                                                                      // 716\n                                                                                                           // 717\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['alanning:roles'] = {\n  Roles: Roles\n};\n\n})();\n","servePath":"/packages/alanning_roles.js","sourceMap":{"version":3,"sources":["/packages/alanning_roles/roles_server.js","/packages/alanning_roles/roles_common.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gH;;;;;;;;;;;;;;;;;;AChiH","file":"/packages/alanning_roles.js","sourcesContent":["\"use strict\"\n\n\n/**\n * Roles collection documents consist only of an id and a role name.\n *   ex: { _id: \"123\", name: \"admin\" }\n */\nif (!Meteor.roles) {\n  Meteor.roles = new Mongo.Collection(\"roles\")\n\n  // Create default indexes for roles collection\n  Meteor.roles._ensureIndex('name', {unique: 1})\n}\n\n\n/**\n * Publish logged-in user's roles so client-side checks can work.\n * \n * Use a named publish function so clients can check `ready()` state.\n */\nMeteor.publish('_roles', function () {\n  var loggedInUserId = this.userId,\n      fields = {roles: 1}\n\n  if (!loggedInUserId) {\n    this.ready()\n    return\n  }\n\n  return Meteor.users.find({_id: loggedInUserId},\n                           {fields: fields})\n})\n",";(function () {\n\n/**\n * Provides functions related to user authorization. Compatible with built-in Meteor accounts packages.\n *\n * @module Roles\n */\n\n/**\n * Roles collection documents consist only of an id and a role name.\n *   ex: { _id:<uuid>, name: \"admin\" }\n */\nif (!Meteor.roles) {\n  Meteor.roles = new Mongo.Collection(\"roles\")\n}\n\n/**\n * Authorization package compatible with built-in Meteor accounts system.\n *\n * Stores user's current roles in a 'roles' field on the user object.\n *\n * @class Roles\n * @constructor\n */\nif ('undefined' === typeof Roles) {\n  Roles = {}\n}\n\n\"use strict\";\n\nvar mixingGroupAndNonGroupErrorMsg = \"Roles error: Can't mix grouped and non-grouped roles for same user\";\n\n_.extend(Roles, {\n\n  /**\n   * Constant used to reference the special 'global' group that \n   * can be used to apply blanket permissions across all groups.\n   *\n   * @example\n   *     Roles.addUsersToRoles(user, 'admin', Roles.GLOBAL_GROUP)\n   *     Roles.userIsInRole(user, 'admin') // => true\n   *\n   *     Roles.setUserRoles(user, 'support-staff', Roles.GLOBAL_GROUP)\n   *     Roles.userIsInRole(user, 'support-staff') // => true\n   *     Roles.userIsInRole(user, 'admin') // => false\n   *\n   * @property GLOBAL_GROUP\n   * @type String\n   * @static\n   * @final\n   */\n  GLOBAL_GROUP: '__global_roles__',\n\n\n  /**\n   * Create a new role. Whitespace will be trimmed.\n   *\n   * @method createRole\n   * @param {String} role Name of role\n   * @return {String} id of new role\n   */\n  createRole: function (role) {\n    var id,\n        match\n\n    if (!role\n        || 'string' !== typeof role\n        || role.trim().length === 0) {\n      return\n    }\n\n    try {\n      id = Meteor.roles.insert({'name': role.trim()})\n      return id\n    } catch (e) {\n      // (from Meteor accounts-base package, insertUserDoc func)\n      // XXX string parsing sucks, maybe\n      // https://jira.mongodb.org/browse/SERVER-3069 will get fixed one day\n      if (e.name !== 'MongoError') throw e\n      match = e.err.match(/^E11000 duplicate key error index: ([^ ]+)/)\n      if (!match) throw e\n      if (match[1].indexOf('$name') !== -1)\n        throw new Meteor.Error(403, \"Role already exists.\")\n      throw e\n    }\n  },\n\n  /**\n   * Delete an existing role.  Will throw \"Role in use\" error if any users\n   * are currently assigned to the target role.\n   *\n   * @method deleteRole\n   * @param {String} role Name of role\n   */\n  deleteRole: function (role) {\n    if (!role) return\n\n    var foundExistingUser = Meteor.users.findOne(\n                              {roles: {$in: [role]}},\n                              {fields: {_id: 1}})\n\n    if (foundExistingUser) {\n      throw new Meteor.Error(403, 'Role in use')\n    }\n\n    var thisRole = Meteor.roles.findOne({name: role})\n    if (thisRole) {\n      Meteor.roles.remove({_id: thisRole._id})\n    }\n  },\n\n  /**\n   * Add users to roles. Will create roles as needed.\n   *\n   * NOTE: Mixing grouped and non-grouped roles for the same user\n   *       is not supported and will throw an error.\n   *\n   * Makes 2 calls to database:\n   *  1. retrieve list of all existing roles\n   *  2. update users' roles\n   *\n   * @example\n   *     Roles.addUsersToRoles(userId, 'admin')\n   *     Roles.addUsersToRoles(userId, ['view-secrets'], 'example.com')\n   *     Roles.addUsersToRoles([user1, user2], ['user','editor'])\n   *     Roles.addUsersToRoles([user1, user2], ['glorious-admin', 'perform-action'], 'example.org')\n   *     Roles.addUsersToRoles(userId, 'admin', Roles.GLOBAL_GROUP)\n   *\n   * @method addUsersToRoles\n   * @param {Array|String} users User id(s) or object(s) with an _id field\n   * @param {Array|String} roles Name(s) of roles/permissions to add users to\n   * @param {String} [group] Optional group name. If supplied, roles will be\n   *                         specific to that group.  \n   *                         Group names can not start with '$' or numbers.\n   *                         Periods in names '.' are automatically converted\n   *                         to underscores.\n   *                         The special group Roles.GLOBAL_GROUP provides \n   *                         a convenient way to assign blanket roles/permissions\n   *                         across all groups.  The roles/permissions in the \n   *                         Roles.GLOBAL_GROUP group will be automatically \n   *                         included in checks for any group.\n   */\n  addUsersToRoles: function (users, roles, group) {\n    // use Template pattern to update user roles\n    Roles._updateUserRoles(users, roles, group, Roles._update_$addToSet_fn)\n  },\n\n  /**\n   * Set a users roles/permissions.\n   *\n   * @example\n   *     Roles.setUserRoles(userId, 'admin')\n   *     Roles.setUserRoles(userId, ['view-secrets'], 'example.com')\n   *     Roles.setUserRoles([user1, user2], ['user','editor'])\n   *     Roles.setUserRoles([user1, user2], ['glorious-admin', 'perform-action'], 'example.org')\n   *     Roles.setUserRoles(userId, 'admin', Roles.GLOBAL_GROUP)\n   *\n   * @method setUserRoles\n   * @param {Array|String} users User id(s) or object(s) with an _id field\n   * @param {Array|String} roles Name(s) of roles/permissions to add users to\n   * @param {String} [group] Optional group name. If supplied, roles will be\n   *                         specific to that group.  \n   *                         Group names can not start with '$'.\n   *                         Periods in names '.' are automatically converted\n   *                         to underscores.\n   *                         The special group Roles.GLOBAL_GROUP provides \n   *                         a convenient way to assign blanket roles/permissions\n   *                         across all groups.  The roles/permissions in the \n   *                         Roles.GLOBAL_GROUP group will be automatically \n   *                         included in checks for any group.\n   */\n  setUserRoles: function (users, roles, group) {\n    // use Template pattern to update user roles\n    Roles._updateUserRoles(users, roles, group, Roles._update_$set_fn)\n  },\n\n  /**\n   * Remove users from roles\n   *\n   * @example\n   *     Roles.removeUsersFromRoles(users.bob, 'admin')\n   *     Roles.removeUsersFromRoles([users.bob, users.joe], ['editor'])\n   *     Roles.removeUsersFromRoles([users.bob, users.joe], ['editor', 'user'])\n   *     Roles.removeUsersFromRoles(users.eve, ['user'], 'group1')\n   *\n   * @method removeUsersFromRoles\n   * @param {Array|String} users User id(s) or object(s) with an _id field\n   * @param {Array|String} roles Name(s) of roles to add users to\n   * @param {String} [group] Optional. Group name. If supplied, only that\n   *                         group will have roles removed.\n   */\n  removeUsersFromRoles: function (users, roles, group) {\n    var update\n\n    if (!users) throw new Error (\"Missing 'users' param\")\n    if (!roles) throw new Error (\"Missing 'roles' param\")\n    if (group) {\n      if ('string' !== typeof group)\n        throw new Error (\"Roles error: Invalid parameter 'group'. Expected 'string' type\")\n      if ('$' === group[0])\n        throw new Error (\"Roles error: groups can not start with '$'\")\n\n      // convert any periods to underscores\n      group = group.replace(/\\./g, '_')\n    }\n\n    // ensure arrays\n    if (!_.isArray(users)) users = [users]\n    if (!_.isArray(roles)) roles = [roles]\n\n    // ensure users is an array of user ids\n    users = _.reduce(users, function (memo, user) {\n      var _id\n      if ('string' === typeof user) {\n        memo.push(user)\n      } else if ('object' === typeof user) {\n        _id = user._id\n        if ('string' === typeof _id) {\n          memo.push(_id)\n        }\n      }\n      return memo\n    }, [])\n\n    // update all users, remove from roles set\n    \n    if (group) {\n      update = {$pullAll: {}}\n      update.$pullAll['roles.'+group] = roles\n    } else {\n      update = {$pullAll: {roles: roles}}\n    }\n\n    try {\n      if (Meteor.isClient) {\n        // Iterate over each user to fulfill Meteor's 'one update per ID' policy\n        _.each(users, function (user) {\n          Meteor.users.update({_id:user}, update)\n        })\n      } else {\n        // On the server we can leverage MongoDB's $in operator for performance\n        Meteor.users.update({_id:{$in:users}}, update, {multi: true})\n      }\n    }\n    catch (ex) {\n      if (ex.name === 'MongoError' && isMongoMixError(ex.err)) {\n        throw new Error (mixingGroupAndNonGroupErrorMsg)\n      }\n\n      throw ex\n    }\n  },\n\n  /**\n   * Check if user has specified permissions/roles\n   *\n   * @example\n   *     // non-group usage\n   *     Roles.userIsInRole(user, 'admin')\n   *     Roles.userIsInRole(user, ['admin','editor'])\n   *     Roles.userIsInRole(userId, 'admin')\n   *     Roles.userIsInRole(userId, ['admin','editor'])\n   *\n   *     // per-group usage\n   *     Roles.userIsInRole(user,   ['admin','editor'], 'group1')\n   *     Roles.userIsInRole(userId, ['admin','editor'], 'group1')\n   *     Roles.userIsInRole(userId, ['admin','editor'], Roles.GLOBAL_GROUP)\n   *\n   *     // this format can also be used as short-hand for Roles.GLOBAL_GROUP\n   *     Roles.userIsInRole(user, 'admin')\n   *    \n   * @method userIsInRole\n   * @param {String|Object} user User Id or actual user object\n   * @param {String|Array} roles Name of role/permission or Array of \n   *                            roles/permissions to check against.  If array, \n   *                            will return true if user is in _any_ role.\n   * @param {String} [group] Optional. Name of group.  If supplied, limits check\n   *                         to just that group.\n   *                         The user's Roles.GLOBAL_GROUP will always be checked\n   *                         whether group is specified or not.  \n   * @return {Boolean} true if user is in _any_ of the target roles\n   */\n  userIsInRole: function (user, roles, group) {\n    var id,\n        userRoles,\n        query,\n        groupQuery,\n        found = false\n\n    // ensure array to simplify code\n    if (!_.isArray(roles)) {\n      roles = [roles]\n    }\n\n    if (!user) return false\n    if (group) {\n      if ('string' !== typeof group) return false\n      if ('$' === group[0]) return false\n\n      // convert any periods to underscores\n      group = group.replace(/\\./g, '_')\n    }\n    \n    if ('object' === typeof user) {\n      userRoles = user.roles\n      if (_.isArray(userRoles)) {\n        return _.some(roles, function (role) {\n          return _.contains(userRoles, role)\n        })\n      } else if ('object' === typeof userRoles) {\n        // roles field is dictionary of groups\n        found = _.isArray(userRoles[group]) && _.some(roles, function (role) {\n          return _.contains(userRoles[group], role)\n        })\n        if (!found) {\n          // not found in regular group or group not specified.  \n          // check Roles.GLOBAL_GROUP, if it exists\n          found = _.isArray(userRoles[Roles.GLOBAL_GROUP]) && _.some(roles, function (role) {\n            return _.contains(userRoles[Roles.GLOBAL_GROUP], role)\n          })\n        }\n        return found\n      }\n\n      // missing roles field, try going direct via id\n      id = user._id\n    } else if ('string' === typeof user) {\n      id = user\n    }\n\n    if (!id) return false\n\n\n    query = {_id: id, $or: []}\n\n    // always check Roles.GLOBAL_GROUP\n    groupQuery = {}\n    groupQuery['roles.'+Roles.GLOBAL_GROUP] = {$in: roles}\n    query.$or.push(groupQuery)\n\n    if (group) {\n      // structure of query, when group specified including Roles.GLOBAL_GROUP \n      //   {_id: id, \n      //    $or: [\n      //      {'roles.group1':{$in: ['admin']}},\n      //      {'roles.__global_roles__':{$in: ['admin']}}\n      //    ]}\n      groupQuery = {}\n      groupQuery['roles.'+group] = {$in: roles}\n      query.$or.push(groupQuery)\n    } else {\n      // structure of query, where group not specified. includes \n      // Roles.GLOBAL_GROUP \n      //   {_id: id, \n      //    $or: [\n      //      {roles: {$in: ['admin']}},\n      //      {'roles.__global_roles__': {$in: ['admin']}}\n      //    ]}\n      query.$or.push({roles: {$in: roles}})\n    }\n\n    found = Meteor.users.findOne(query, {fields: {_id: 1}})\n    return found ? true : false\n  },\n\n  /**\n   * Retrieve users roles\n   *\n   * @method getRolesForUser\n   * @param {String|Object} user User Id or actual user object\n   * @param {String} [group] Optional name of group to restrict roles to.\n   *                         User's Roles.GLOBAL_GROUP will also be included.\n   * @return {Array} Array of user's roles, unsorted.\n   */\n  getRolesForUser: function (user, group) {\n    if (!user) return []\n    if (group) {\n      if ('string' !== typeof group) return []\n      if ('$' === group[0]) return []\n\n      // convert any periods to underscores\n      group = group.replace(/\\./g, '_')\n    }\n\n    if ('string' === typeof user) {\n      user = Meteor.users.findOne(\n               {_id: user},\n               {fields: {roles: 1}})\n\n    } else if ('object' !== typeof user) {\n      // invalid user object\n      return []\n    }\n\n    if (!user || !user.roles) return []\n\n    if (group) {\n      return _.union(user.roles[group] || [], user.roles[Roles.GLOBAL_GROUP] || [])\n    }\n\n    if (_.isArray(user.roles))\n      return user.roles\n\n    // using groups but group not specified. return global group, if exists\n    return user.roles[Roles.GLOBAL_GROUP] || []\n  },\n\n  /**\n   * Retrieve set of all existing roles\n   *\n   * @method getAllRoles\n   * @return {Cursor} cursor of existing roles\n   */\n  getAllRoles: function () {\n    return Meteor.roles.find({}, {sort: {name: 1}})\n  },\n\n  /**\n   * Retrieve all users who are in target role.  \n   *\n   * NOTE: This is an expensive query; it performs a full collection scan\n   * on the users collection since there is no index set on the 'roles' field.  \n   * This is by design as most queries will specify an _id so the _id index is \n   * used automatically.\n   *\n   * @method getUsersInRole\n   * @param {Array|String} role Name of role/permission.  If array, users \n   *                            returned will have at least one of the roles\n   *                            specified but need not have _all_ roles.\n   * @param {String} [group] Optional name of group to restrict roles to.\n   *                         User's Roles.GLOBAL_GROUP will also be checked.\n   * @param {Object} [options] Optional options which are passed directly\n   *                           through to `Meteor.users.find(query, options)`\n   * @return {Cursor} cursor of users in role\n   */\n  getUsersInRole: function (role, group, options) {\n    var query,\n        roles = role,\n        groupQuery\n\n    // ensure array to simplify query logic\n    if (!_.isArray(roles)) roles = [roles]\n    \n    if (group) {\n      if ('string' !== typeof group)\n        throw new Error (\"Roles error: Invalid parameter 'group'. Expected 'string' type\")\n      if ('$' === group[0])\n        throw new Error (\"Roles error: groups can not start with '$'\")\n\n      // convert any periods to underscores\n      group = group.replace(/\\./g, '_')\n    }\n\n    query = {$or: []}\n\n    // always check Roles.GLOBAL_GROUP\n    groupQuery = {}\n    groupQuery['roles.'+Roles.GLOBAL_GROUP] = {$in: roles}\n    query.$or.push(groupQuery)\n\n    if (group) {\n      // structure of query, when group specified including Roles.GLOBAL_GROUP \n      //   {\n      //    $or: [\n      //      {'roles.group1':{$in: ['admin']}},\n      //      {'roles.__global_roles__':{$in: ['admin']}}\n      //    ]}\n      groupQuery = {}\n      groupQuery['roles.'+group] = {$in: roles}\n      query.$or.push(groupQuery)\n    } else {\n      // structure of query, where group not specified. includes \n      // Roles.GLOBAL_GROUP \n      //   {\n      //    $or: [\n      //      {roles: {$in: ['admin']}},\n      //      {'roles.__global_roles__': {$in: ['admin']}}\n      //    ]}\n      query.$or.push({roles: {$in: roles}})\n    }\n\n    return Meteor.users.find(query, options);\n  },  // end getUsersInRole \n  \n  /**\n   * Retrieve users groups, if any\n   *\n   * @method getGroupsForUser\n   * @param {String|Object} user User Id or actual user object\n   * @param {String} [role] Optional name of roles to restrict groups to.\n   *\n   * @return {Array} Array of user's groups, unsorted. Roles.GLOBAL_GROUP will be omitted\n   */\n  getGroupsForUser: function (user, role) {\n    var userGroups = [];\n    \n    if (!user) return []\n    if (role) {\n      if ('string' !== typeof role) return []\n      if ('$' === role[0]) return []\n\n      // convert any periods to underscores\n      role = role.replace('.', '_')\n    }\n\n    if ('string' === typeof user) {\n      user = Meteor.users.findOne(\n               {_id: user},\n               {fields: {roles: 1}})\n    \n    }else if ('object' !== typeof user) {\n      // invalid user object\n      return []\n    }\n\n    //User has no roles or is not using groups\n    if (!user || !user.roles || _.isArray(user.roles)) return []\n\n    if (role) {\n      _.each(user.roles, function(groupRoles, groupName) {\n        if (_.contains(groupRoles, role) && groupName !== Roles.GLOBAL_GROUP) {\n          userGroups.push(groupName);\n        }\n      });\n      return userGroups;\n    }else {\n      return _.without(_.keys(user.roles), Roles.GLOBAL_GROUP);\n    }\n\n  }, //End getGroupsForUser\n\n\n  /**\n   * Private function 'template' that uses $set to construct an update object\n   * for MongoDB.  Passed to _updateUserRoles\n   *\n   * @method _update_$set_fn \n   * @protected\n   * @param {Array} roles\n   * @param {String} [group]\n   * @return {Object} update object for use in MongoDB update command\n   */\n  _update_$set_fn: function  (roles, group) {\n    var update = {}\n\n    if (group) {\n      // roles is a key/value dict object\n      update.$set = {}\n      update.$set['roles.' + group] = roles\n    } else {\n      // roles is an array of strings\n      update.$set = {roles: roles}\n    }\n\n    return update\n  },  // end _update_$set_fn \n\n  /**\n   * Private function 'template' that uses $addToSet to construct an update \n   * object for MongoDB.  Passed to _updateUserRoles\n   *\n   * @method _update_$addToSet_fn  \n   * @protected\n   * @param {Array} roles\n   * @param {String} [group]\n   * @return {Object} update object for use in MongoDB update command\n   */\n  _update_$addToSet_fn: function (roles, group) {\n    var update = {}\n\n    if (group) {\n      // roles is a key/value dict object\n      update.$addToSet = {}\n      update.$addToSet['roles.' + group] = {$each: roles}\n    } else {\n      // roles is an array of strings\n      update.$addToSet = {roles: {$each: roles}}\n    }\n\n    return update\n  },  // end _update_$addToSet_fn \n\n\n  /**\n   * Internal function that uses the Template pattern to adds or sets roles \n   * for users.\n   *\n   * @method _updateUserRoles\n   * @protected\n   * @param {Array|String} users user id(s) or object(s) with an _id field\n   * @param {Array|String} roles name(s) of roles/permissions to add users to\n   * @param {String} group Group name. If not null or undefined, roles will be\n   *                         specific to that group.  \n   *                         Group names can not start with '$'.\n   *                         Periods in names '.' are automatically converted\n   *                         to underscores.\n   *                         The special group Roles.GLOBAL_GROUP provides \n   *                         a convenient way to assign blanket roles/permissions\n   *                         across all groups.  The roles/permissions in the \n   *                         Roles.GLOBAL_GROUP group will be automatically \n   *                         included in checks for any group.\n   * @param {Function} updateFactory Func which returns an update object that\n   *                         will be passed to Mongo.\n   *   @param {Array} roles\n   *   @param {String} [group]\n   */\n  _updateUserRoles: function (users, roles, group, updateFactory) {\n    if (!users) throw new Error (\"Missing 'users' param\")\n    if (!roles) throw new Error (\"Missing 'roles' param\")\n    if (group) {\n      if ('string' !== typeof group)\n        throw new Error (\"Roles error: Invalid parameter 'group'. Expected 'string' type\")\n      if ('$' === group[0])\n        throw new Error (\"Roles error: groups can not start with '$'\")\n\n      // convert any periods to underscores\n      group = group.replace(/\\./g, '_')\n    }\n\n    var existingRoles,\n        query,\n        update\n\n    // ensure arrays to simplify code\n    if (!_.isArray(users)) users = [users]\n    if (!_.isArray(roles)) roles = [roles]\n\n    // remove invalid roles\n    roles = _.reduce(roles, function (memo, role) {\n      if (role\n          && 'string' === typeof role\n          && role.trim().length > 0) {\n        memo.push(role.trim())\n      }\n      return memo\n    }, [])\n\n    // empty roles array is ok, since it might be a $set operation to clear roles\n    //if (roles.length === 0) return\n\n    // ensure all roles exist in 'roles' collection\n    existingRoles = _.reduce(Meteor.roles.find({}).fetch(), function (memo, role) {\n      memo[role.name] = true\n      return memo\n    }, {})\n    _.each(roles, function (role) {\n      if (!existingRoles[role]) {\n        Roles.createRole(role)\n      }\n    })\n\n    // ensure users is an array of user ids\n    users = _.reduce(users, function (memo, user) {\n      var _id\n      if ('string' === typeof user) {\n        memo.push(user)\n      } else if ('object' === typeof user) {\n        _id = user._id\n        if ('string' === typeof _id) {\n          memo.push(_id)\n        }\n      }\n      return memo\n    }, [])\n    \n    // update all users\n    update = updateFactory(roles, group)\n    \n    try {\n      if (Meteor.isClient) {\n        // On client, iterate over each user to fulfill Meteor's \n        // 'one update per ID' policy\n        _.each(users, function (user) {\n          Meteor.users.update({_id: user}, update)\n        })\n      } else {\n        // On the server we can use MongoDB's $in operator for \n        // better performance\n        Meteor.users.update(\n          {_id: {$in: users}},\n          update,\n          {multi: true})\n      }\n    }\n    catch (ex) {\n      if (ex.name === 'MongoError' && isMongoMixError(ex.err)) {\n        throw new Error (mixingGroupAndNonGroupErrorMsg)\n      }\n\n      throw ex\n    }\n  }  // end _updateUserRoles\n\n})  // end _.extend(Roles ...)\n\n\nfunction isMongoMixError (errorMsg) {\n  var expectedMessages = [\n      'Cannot apply $addToSet modifier to non-array',\n      'Cannot apply $addToSet to a non-array field',\n      'Can only apply $pullAll to an array',\n      'Cannot apply $pull/$pullAll modifier to non-array',\n      \"can't append to array using string field name\",\n      'to traverse the element'\n      ]\n\n  return _.some(expectedMessages, function (snippet) {\n    return strContains(errorMsg, snippet)\n  })\n}\n\nfunction strContains (haystack, needle) {\n  return -1 !== haystack.indexOf(needle)\n}\n\n}());\n"]}}]