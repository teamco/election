{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"if (!Accounts.ui) {\n    Accounts.ui = {};\n}\n\nif (!Accounts.ui._options) {\n    Accounts.ui._options = {\n        extraSignupFields: [],\n        requestPermissions: {},\n        requestOfflineToken: {},\n        forceApprovalPrompt: {},\n        forceEmailLowercase: false,\n        forceUsernameLowercase: false,\n        forcePasswordLowercase: false\n    };\n}\n\nAccounts.ui.navigate = function (route, hash) {\n    // if router is iron-router\n    if (window.Router && _.isFunction(Router.go)) {\n        Router.go(route, hash);\n    }\n};\n\nAccounts.ui.config = function (options) {\n    // validate options keys\n    var VALID_KEYS = ['passwordSignupFields', 'extraSignupFields', 'forceEmailLowercase', 'forceUsernameLowercase', 'forcePasswordLowercase', 'requestPermissions', 'requestOfflineToken', 'forceApprovalPrompt'];\n\n    _.each(_.keys(options), function (key) {\n        if (!_.contains(VALID_KEYS, key)) {\n            throw new Error(\"Accounts.ui.config: Invalid key: \" + key);\n        }\n    });\n\n    options.extraSignupFields = options.extraSignupFields || [];\n\n    // deal with `passwordSignupFields`\n    if (options.passwordSignupFields) {\n        if (_.contains([\"USERNAME_AND_EMAIL_CONFIRM\", \"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\", \"USERNAME_ONLY\", \"EMAIL_ONLY\"], options.passwordSignupFields)) {\n            if (Accounts.ui._options.passwordSignupFields) {\n                throw new Error(\"Accounts.ui.config: Can't set `passwordSignupFields` more than once\");\n            } else {\n                Accounts.ui._options.passwordSignupFields = options.passwordSignupFields;\n            }\n        } else {\n            throw new Error(\"Accounts.ui.config: Invalid option for `passwordSignupFields`: \" + options.passwordSignupFields);\n        }\n    }\n\n    Accounts.ui._options.forceEmailLowercase = options.forceEmailLowercase;\n    Accounts.ui._options.forceUsernameLowercase = options.forceUsernameLowercase;\n    Accounts.ui._options.forcePasswordLowercase = options.forcePasswordLowercase;\n\n    // deal with `requestPermissions`\n    if (options.requestPermissions) {\n        _.each(options.requestPermissions, function (scope, service) {\n            if (Accounts.ui._options.requestPermissions[service]) {\n                throw new Error(\"Accounts.ui.config: Can't set `requestPermissions` more than once for \" + service);\n            } else if (!(scope instanceof Array)) {\n                throw new Error(\"Accounts.ui.config: Value for `requestPermissions` must be an array\");\n            } else {\n                Accounts.ui._options.requestPermissions[service] = scope;\n            }\n        });\n    }\n    if (typeof options.extraSignupFields !== 'object' || !options.extraSignupFields instanceof Array) {\n        throw new Error(\"Accounts.ui.config: `extraSignupFields` must be an array.\");\n    } else {\n        if (options.extraSignupFields) {\n            _.each(options.extraSignupFields, function (field, index) {\n                if (!field.fieldName || !field.fieldLabel) {\n                    throw new Error(\"Accounts.ui.config: `extraSignupFields` objects must have `fieldName` and `fieldLabel` attributes.\");\n                }\n                if (typeof field.visible === 'undefined') {\n                    field.visible = true;\n                }\n                Accounts.ui._options.extraSignupFields[index] = field;\n            });\n        }\n    }\n\n    // deal with `requestOfflineToken`\n    if (options.requestOfflineToken) {\n        _.each(options.requestOfflineToken, function (value, service) {\n            if (service !== 'google') {\n                throw new Error(\"Accounts.ui.config: `requestOfflineToken` only supported for Google login at the moment.\");\n            }\n            if (Accounts.ui._options.requestOfflineToken[service]) {\n                throw new Error(\"Accounts.ui.config: Can't set `requestOfflineToken` more than once for \" + service);\n            } else {\n                Accounts.ui._options.requestOfflineToken[service] = value;\n            }\n        });\n    }\n\n    // deal with `forceApprovalPrompt`\n    if (options.forceApprovalPrompt) {\n        _.each(options.forceApprovalPrompt, function (value, service) {\n            if (service !== 'google') {\n                throw new Error(\"Accounts.ui.config: `forceApprovalPrompt` only supported for Google login at the moment.\");\n            }\n            if (Accounts.ui._options.forceApprovalPrompt[service]) {\n                throw new Error(\"Accounts.ui.config: Can't set `forceApprovalPrompt` more than once for \" + service);\n            } else {\n                Accounts.ui._options.forceApprovalPrompt[service] = value;\n            }\n        });\n    }\n};\n\nAccounts.ui._passwordSignupFields = function () {\n    return Accounts.ui._options.passwordSignupFields || \"EMAIL_ONLY\";\n};","ast":null,"map":{"version":3,"sources":["/server/accounts_ui.js"],"names":[],"mappings":"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","file":"/server/accounts_ui.js.map","sourcesContent":["if (!Accounts.ui) {\n    Accounts.ui = {};\n}\n\nif (!Accounts.ui._options) {\n    Accounts.ui._options = {\n        extraSignupFields: [],\n        requestPermissions: {},\n        requestOfflineToken: {},\n        forceApprovalPrompt: {},\n        forceEmailLowercase: false,\n        forceUsernameLowercase: false,\n        forcePasswordLowercase: false\n    };\n}\n\nAccounts.ui.navigate = function (route, hash) {\n    // if router is iron-router\n    if (window.Router && _.isFunction(Router.go)) {\n        Router.go(route, hash);\n    }\n}\n\nAccounts.ui.config = function (options) {\n    // validate options keys\n    var VALID_KEYS = ['passwordSignupFields', 'extraSignupFields', 'forceEmailLowercase', 'forceUsernameLowercase', 'forcePasswordLowercase',\n        'requestPermissions', 'requestOfflineToken', 'forceApprovalPrompt'];\n\n    _.each(_.keys(options), function (key) {\n        if (!_.contains(VALID_KEYS, key)) {\n            throw new Error(\"Accounts.ui.config: Invalid key: \" + key);\n        }\n    });\n\n    options.extraSignupFields = options.extraSignupFields || [];\n\n    // deal with `passwordSignupFields`\n    if (options.passwordSignupFields) {\n        if (_.contains([\n                \"USERNAME_AND_EMAIL_CONFIRM\",\n                \"USERNAME_AND_EMAIL\",\n                \"USERNAME_AND_OPTIONAL_EMAIL\",\n                \"USERNAME_ONLY\",\n                \"EMAIL_ONLY\"\n            ], options.passwordSignupFields)) {\n            if (Accounts.ui._options.passwordSignupFields) {\n                throw new Error(\"Accounts.ui.config: Can't set `passwordSignupFields` more than once\");\n            } else {\n                Accounts.ui._options.passwordSignupFields = options.passwordSignupFields;\n            }\n        } else {\n            throw new Error(\"Accounts.ui.config: Invalid option for `passwordSignupFields`: \" + options.passwordSignupFields);\n        }\n    }\n\n    Accounts.ui._options.forceEmailLowercase = options.forceEmailLowercase;\n    Accounts.ui._options.forceUsernameLowercase = options.forceUsernameLowercase;\n    Accounts.ui._options.forcePasswordLowercase = options.forcePasswordLowercase;\n\n    // deal with `requestPermissions`\n    if (options.requestPermissions) {\n        _.each(options.requestPermissions, function (scope, service) {\n            if (Accounts.ui._options.requestPermissions[service]) {\n                throw new Error(\"Accounts.ui.config: Can't set `requestPermissions` more than once for \" + service);\n            } else if (!(scope instanceof Array)) {\n                throw new Error(\"Accounts.ui.config: Value for `requestPermissions` must be an array\");\n            } else {\n                Accounts.ui._options.requestPermissions[service] = scope;\n            }\n        });\n    }\n    if (typeof options.extraSignupFields !== 'object' || !options.extraSignupFields instanceof Array) {\n        throw new Error(\"Accounts.ui.config: `extraSignupFields` must be an array.\");\n    } else {\n        if (options.extraSignupFields) {\n            _.each(options.extraSignupFields, function (field, index) {\n                if (!field.fieldName || !field.fieldLabel) {\n                    throw new Error(\"Accounts.ui.config: `extraSignupFields` objects must have `fieldName` and `fieldLabel` attributes.\");\n                }\n                if (typeof field.visible === 'undefined') {\n                    field.visible = true;\n                }\n                Accounts.ui._options.extraSignupFields[index] = field;\n            });\n        }\n    }\n\n    // deal with `requestOfflineToken`\n    if (options.requestOfflineToken) {\n        _.each(options.requestOfflineToken, function (value, service) {\n            if (service !== 'google') {\n                throw new Error(\"Accounts.ui.config: `requestOfflineToken` only supported for Google login at the moment.\");\n            }\n            if (Accounts.ui._options.requestOfflineToken[service]) {\n                throw new Error(\"Accounts.ui.config: Can't set `requestOfflineToken` more than once for \" + service);\n            } else {\n                Accounts.ui._options.requestOfflineToken[service] = value;\n            }\n        });\n    }\n\n    // deal with `forceApprovalPrompt`\n    if (options.forceApprovalPrompt) {\n        _.each(options.forceApprovalPrompt, function (value, service) {\n            if (service !== 'google') {\n                throw new Error(\"Accounts.ui.config: `forceApprovalPrompt` only supported for Google login at the moment.\");\n            }\n            if (Accounts.ui._options.forceApprovalPrompt[service]) {\n                throw new Error(\"Accounts.ui.config: Can't set `forceApprovalPrompt` more than once for \" + service);\n            } else {\n                Accounts.ui._options.forceApprovalPrompt[service] = value;\n            }\n        });\n    }\n};\n\nAccounts.ui._passwordSignupFields = function () {\n    return Accounts.ui._options.passwordSignupFields || \"EMAIL_ONLY\";\n};\n"]},"hash":"e2633b58dcd234d36bdcd24ab2c1cc94540dfc68"}
