[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\nvar moment = Package['momentjs:moment'].moment;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/tsega_bootstrap3-datetimepicker/lib/js/bootstrap-datetimepicker.js                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*! version : 4.17.37                                                                                                  // 1\n =========================================================                                                             // 2\n bootstrap-datetimejs                                                                                                  // 3\n https://github.com/Eonasdan/bootstrap-datetimepicker                                                                  // 4\n Copyright (c) 2015 Jonathan Peterson                                                                                  // 5\n =========================================================                                                             // 6\n */                                                                                                                    // 7\n/*                                                                                                                     // 8\n The MIT License (MIT)                                                                                                 // 9\n                                                                                                                       // 10\n Copyright (c) 2015 Jonathan Peterson                                                                                  // 11\n                                                                                                                       // 12\n Permission is hereby granted, free of charge, to any person obtaining a copy                                          // 13\n of this software and associated documentation files (the \"Software\"), to deal                                         // 14\n in the Software without restriction, including without limitation the rights                                          // 15\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell                                             // 16\n copies of the Software, and to permit persons to whom the Software is                                                 // 17\n furnished to do so, subject to the following conditions:                                                              // 18\n                                                                                                                       // 19\n The above copyright notice and this permission notice shall be included in                                            // 20\n all copies or substantial portions of the Software.                                                                   // 21\n                                                                                                                       // 22\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR                                            // 23\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,                                              // 24\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE                                           // 25\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER                                                // 26\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,                                         // 27\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN                                             // 28\n THE SOFTWARE.                                                                                                         // 29\n */                                                                                                                    // 30\n/*global define:false */                                                                                               // 31\n/*global exports:false */                                                                                              // 32\n/*global require:false */                                                                                              // 33\n/*global jQuery:false */                                                                                               // 34\n/*global moment:false */                                                                                               // 35\n(function (factory) {                                                                                                  // 36\n    'use strict';                                                                                                      // 37\n    if (typeof define === 'function' && define.amd) {                                                                  // 38\n        // AMD is used - Register as an anonymous module.                                                              // 39\n        define(['jquery', 'moment'], factory);                                                                         // 40\n    } else if (typeof exports === 'object') {                                                                          // 41\n        factory(require('jquery'), require('moment'));                                                                 // 42\n    } else {                                                                                                           // 43\n        // Neither AMD nor CommonJS used. Use global variables.                                                        // 44\n        if (typeof jQuery === 'undefined') {                                                                           // 45\n            throw 'bootstrap-datetimepicker requires jQuery to be loaded first';                                       // 46\n        }                                                                                                              // 47\n        if (typeof moment === 'undefined') {                                                                           // 48\n            throw 'bootstrap-datetimepicker requires Moment.js to be loaded first';                                    // 49\n        }                                                                                                              // 50\n        factory(jQuery, moment);                                                                                       // 51\n    }                                                                                                                  // 52\n}(function ($, moment) {                                                                                               // 53\n    'use strict';                                                                                                      // 54\n    if (!moment) {                                                                                                     // 55\n        throw new Error('bootstrap-datetimepicker requires Moment.js to be loaded first');                             // 56\n    }                                                                                                                  // 57\n                                                                                                                       // 58\n    var dateTimePicker = function (element, options) {                                                                 // 59\n        var picker = {},                                                                                               // 60\n            date,                                                                                                      // 61\n            viewDate,                                                                                                  // 62\n            unset = true,                                                                                              // 63\n            input,                                                                                                     // 64\n            component = false,                                                                                         // 65\n            widget = false,                                                                                            // 66\n            use24Hours,                                                                                                // 67\n            minViewModeNumber = 0,                                                                                     // 68\n            actualFormat,                                                                                              // 69\n            parseFormats,                                                                                              // 70\n            currentViewMode,                                                                                           // 71\n            datePickerModes = [                                                                                        // 72\n                {                                                                                                      // 73\n                    clsName: 'days',                                                                                   // 74\n                    navFnc: 'M',                                                                                       // 75\n                    navStep: 1                                                                                         // 76\n                },                                                                                                     // 77\n                {                                                                                                      // 78\n                    clsName: 'months',                                                                                 // 79\n                    navFnc: 'y',                                                                                       // 80\n                    navStep: 1                                                                                         // 81\n                },                                                                                                     // 82\n                {                                                                                                      // 83\n                    clsName: 'years',                                                                                  // 84\n                    navFnc: 'y',                                                                                       // 85\n                    navStep: 10                                                                                        // 86\n                },                                                                                                     // 87\n                {                                                                                                      // 88\n                    clsName: 'decades',                                                                                // 89\n                    navFnc: 'y',                                                                                       // 90\n                    navStep: 100                                                                                       // 91\n                }                                                                                                      // 92\n            ],                                                                                                         // 93\n            viewModes = ['days', 'months', 'years', 'decades'],                                                        // 94\n            verticalModes = ['top', 'bottom', 'auto'],                                                                 // 95\n            horizontalModes = ['left', 'right', 'auto'],                                                               // 96\n            toolbarPlacements = ['default', 'top', 'bottom'],                                                          // 97\n            keyMap = {                                                                                                 // 98\n                'up': 38,                                                                                              // 99\n                38: 'up',                                                                                              // 100\n                'down': 40,                                                                                            // 101\n                40: 'down',                                                                                            // 102\n                'left': 37,                                                                                            // 103\n                37: 'left',                                                                                            // 104\n                'right': 39,                                                                                           // 105\n                39: 'right',                                                                                           // 106\n                'tab': 9,                                                                                              // 107\n                9: 'tab',                                                                                              // 108\n                'escape': 27,                                                                                          // 109\n                27: 'escape',                                                                                          // 110\n                'enter': 13,                                                                                           // 111\n                13: 'enter',                                                                                           // 112\n                'pageUp': 33,                                                                                          // 113\n                33: 'pageUp',                                                                                          // 114\n                'pageDown': 34,                                                                                        // 115\n                34: 'pageDown',                                                                                        // 116\n                'shift': 16,                                                                                           // 117\n                16: 'shift',                                                                                           // 118\n                'control': 17,                                                                                         // 119\n                17: 'control',                                                                                         // 120\n                'space': 32,                                                                                           // 121\n                32: 'space',                                                                                           // 122\n                't': 84,                                                                                               // 123\n                84: 't',                                                                                               // 124\n                'delete': 46,                                                                                          // 125\n                46: 'delete'                                                                                           // 126\n            },                                                                                                         // 127\n            keyState = {},                                                                                             // 128\n                                                                                                                       // 129\n            /********************************************************************************                          // 130\n             *                                                                                                         // 131\n             * Private functions                                                                                       // 132\n             *                                                                                                         // 133\n             ********************************************************************************/                         // 134\n            getMoment = function (d) {                                                                                 // 135\n                var tzEnabled = false,                                                                                 // 136\n                    returnMoment,                                                                                      // 137\n                    currentZoneOffset,                                                                                 // 138\n                    incomingZoneOffset,                                                                                // 139\n                    timeZoneIndicator,                                                                                 // 140\n                    dateWithTimeZoneInfo;                                                                              // 141\n                                                                                                                       // 142\n                if (moment.tz !== undefined && options.timeZone !== undefined && options.timeZone !== null && options.timeZone !== '') {\n                    tzEnabled = true;                                                                                  // 144\n                }                                                                                                      // 145\n                if (d === undefined || d === null) {                                                                   // 146\n                    if (tzEnabled) {                                                                                   // 147\n                        returnMoment = moment().tz(options.timeZone).startOf('d');                                     // 148\n                    } else {                                                                                           // 149\n                        returnMoment = moment().startOf('d');                                                          // 150\n                    }                                                                                                  // 151\n                } else {                                                                                               // 152\n                    if (tzEnabled) {                                                                                   // 153\n                        currentZoneOffset = moment().tz(options.timeZone).utcOffset();                                 // 154\n                        incomingZoneOffset = moment(d, parseFormats, options.useStrict).utcOffset();                   // 155\n                        if (incomingZoneOffset !== currentZoneOffset) {                                                // 156\n                            timeZoneIndicator = moment().tz(options.timeZone).format('Z');                             // 157\n                            dateWithTimeZoneInfo = moment(d, parseFormats, options.useStrict).format('YYYY-MM-DD[T]HH:mm:ss') + timeZoneIndicator;\n                            returnMoment = moment(dateWithTimeZoneInfo, parseFormats, options.useStrict).tz(options.timeZone);\n                        } else {                                                                                       // 160\n                            returnMoment = moment(d, parseFormats, options.useStrict).tz(options.timeZone);            // 161\n                        }                                                                                              // 162\n                    } else {                                                                                           // 163\n                        returnMoment = moment(d, parseFormats, options.useStrict);                                     // 164\n                    }                                                                                                  // 165\n                }                                                                                                      // 166\n                return returnMoment;                                                                                   // 167\n            },                                                                                                         // 168\n            isEnabled = function (granularity) {                                                                       // 169\n                if (typeof granularity !== 'string' || granularity.length > 1) {                                       // 170\n                    throw new TypeError('isEnabled expects a single character string parameter');                      // 171\n                }                                                                                                      // 172\n                switch (granularity) {                                                                                 // 173\n                    case 'y':                                                                                          // 174\n                        return actualFormat.indexOf('Y') !== -1;                                                       // 175\n                    case 'M':                                                                                          // 176\n                        return actualFormat.indexOf('M') !== -1;                                                       // 177\n                    case 'd':                                                                                          // 178\n                        return actualFormat.toLowerCase().indexOf('d') !== -1;                                         // 179\n                    case 'h':                                                                                          // 180\n                    case 'H':                                                                                          // 181\n                        return actualFormat.toLowerCase().indexOf('h') !== -1;                                         // 182\n                    case 'm':                                                                                          // 183\n                        return actualFormat.indexOf('m') !== -1;                                                       // 184\n                    case 's':                                                                                          // 185\n                        return actualFormat.indexOf('s') !== -1;                                                       // 186\n                    default:                                                                                           // 187\n                        return false;                                                                                  // 188\n                }                                                                                                      // 189\n            },                                                                                                         // 190\n            hasTime = function () {                                                                                    // 191\n                return (isEnabled('h') || isEnabled('m') || isEnabled('s'));                                           // 192\n            },                                                                                                         // 193\n                                                                                                                       // 194\n            hasDate = function () {                                                                                    // 195\n                return (isEnabled('y') || isEnabled('M') || isEnabled('d'));                                           // 196\n            },                                                                                                         // 197\n                                                                                                                       // 198\n            getDatePickerTemplate = function () {                                                                      // 199\n                var headTemplate = $('<thead>')                                                                        // 200\n                        .append($('<tr>')                                                                              // 201\n                            .append($('<th>').addClass('prev').attr('data-action', 'previous')                         // 202\n                                .append($('<span>').addClass(options.icons.previous))                                  // 203\n                                )                                                                                      // 204\n                            .append($('<th>').addClass('picker-switch').attr('data-action', 'pickerSwitch').attr('colspan', (options.calendarWeeks ? '6' : '5')))\n                            .append($('<th>').addClass('next').attr('data-action', 'next')                             // 206\n                                .append($('<span>').addClass(options.icons.next))                                      // 207\n                                )                                                                                      // 208\n                            ),                                                                                         // 209\n                    contTemplate = $('<tbody>')                                                                        // 210\n                        .append($('<tr>')                                                                              // 211\n                            .append($('<td>').attr('colspan', (options.calendarWeeks ? '8' : '7')))                    // 212\n                            );                                                                                         // 213\n                                                                                                                       // 214\n                return [                                                                                               // 215\n                    $('<div>').addClass('datepicker-days')                                                             // 216\n                        .append($('<table>').addClass('table-condensed')                                               // 217\n                            .append(headTemplate)                                                                      // 218\n                            .append($('<tbody>'))                                                                      // 219\n                            ),                                                                                         // 220\n                    $('<div>').addClass('datepicker-months')                                                           // 221\n                        .append($('<table>').addClass('table-condensed')                                               // 222\n                            .append(headTemplate.clone())                                                              // 223\n                            .append(contTemplate.clone())                                                              // 224\n                            ),                                                                                         // 225\n                    $('<div>').addClass('datepicker-years')                                                            // 226\n                        .append($('<table>').addClass('table-condensed')                                               // 227\n                            .append(headTemplate.clone())                                                              // 228\n                            .append(contTemplate.clone())                                                              // 229\n                            ),                                                                                         // 230\n                    $('<div>').addClass('datepicker-decades')                                                          // 231\n                        .append($('<table>').addClass('table-condensed')                                               // 232\n                            .append(headTemplate.clone())                                                              // 233\n                            .append(contTemplate.clone())                                                              // 234\n                            )                                                                                          // 235\n                ];                                                                                                     // 236\n            },                                                                                                         // 237\n                                                                                                                       // 238\n            getTimePickerMainTemplate = function () {                                                                  // 239\n                var topRow = $('<tr>'),                                                                                // 240\n                    middleRow = $('<tr>'),                                                                             // 241\n                    bottomRow = $('<tr>');                                                                             // 242\n                                                                                                                       // 243\n                if (isEnabled('h')) {                                                                                  // 244\n                    topRow.append($('<td>')                                                                            // 245\n                        .append($('<a>').attr({href: '#', tabindex: '-1', 'title': options.tooltips.incrementHour}).addClass('btn').attr('data-action', 'incrementHours')\n                            .append($('<span>').addClass(options.icons.up))));                                         // 247\n                    middleRow.append($('<td>')                                                                         // 248\n                        .append($('<span>').addClass('timepicker-hour').attr({'data-time-component':'hours', 'title': options.tooltips.pickHour}).attr('data-action', 'showHours')));\n                    bottomRow.append($('<td>')                                                                         // 250\n                        .append($('<a>').attr({href: '#', tabindex: '-1', 'title': options.tooltips.decrementHour}).addClass('btn').attr('data-action', 'decrementHours')\n                            .append($('<span>').addClass(options.icons.down))));                                       // 252\n                }                                                                                                      // 253\n                if (isEnabled('m')) {                                                                                  // 254\n                    if (isEnabled('h')) {                                                                              // 255\n                        topRow.append($('<td>').addClass('separator'));                                                // 256\n                        middleRow.append($('<td>').addClass('separator').html(':'));                                   // 257\n                        bottomRow.append($('<td>').addClass('separator'));                                             // 258\n                    }                                                                                                  // 259\n                    topRow.append($('<td>')                                                                            // 260\n                        .append($('<a>').attr({href: '#', tabindex: '-1', 'title': options.tooltips.incrementMinute}).addClass('btn').attr('data-action', 'incrementMinutes')\n                            .append($('<span>').addClass(options.icons.up))));                                         // 262\n                    middleRow.append($('<td>')                                                                         // 263\n                        .append($('<span>').addClass('timepicker-minute').attr({'data-time-component': 'minutes', 'title': options.tooltips.pickMinute}).attr('data-action', 'showMinutes')));\n                    bottomRow.append($('<td>')                                                                         // 265\n                        .append($('<a>').attr({href: '#', tabindex: '-1', 'title': options.tooltips.decrementMinute}).addClass('btn').attr('data-action', 'decrementMinutes')\n                            .append($('<span>').addClass(options.icons.down))));                                       // 267\n                }                                                                                                      // 268\n                if (isEnabled('s')) {                                                                                  // 269\n                    if (isEnabled('m')) {                                                                              // 270\n                        topRow.append($('<td>').addClass('separator'));                                                // 271\n                        middleRow.append($('<td>').addClass('separator').html(':'));                                   // 272\n                        bottomRow.append($('<td>').addClass('separator'));                                             // 273\n                    }                                                                                                  // 274\n                    topRow.append($('<td>')                                                                            // 275\n                        .append($('<a>').attr({href: '#', tabindex: '-1', 'title': options.tooltips.incrementSecond}).addClass('btn').attr('data-action', 'incrementSeconds')\n                            .append($('<span>').addClass(options.icons.up))));                                         // 277\n                    middleRow.append($('<td>')                                                                         // 278\n                        .append($('<span>').addClass('timepicker-second').attr({'data-time-component': 'seconds', 'title': options.tooltips.pickSecond}).attr('data-action', 'showSeconds')));\n                    bottomRow.append($('<td>')                                                                         // 280\n                        .append($('<a>').attr({href: '#', tabindex: '-1', 'title': options.tooltips.decrementSecond}).addClass('btn').attr('data-action', 'decrementSeconds')\n                            .append($('<span>').addClass(options.icons.down))));                                       // 282\n                }                                                                                                      // 283\n                                                                                                                       // 284\n                if (!use24Hours) {                                                                                     // 285\n                    topRow.append($('<td>').addClass('separator'));                                                    // 286\n                    middleRow.append($('<td>')                                                                         // 287\n                        .append($('<button>').addClass('btn btn-primary').attr({'data-action': 'togglePeriod', tabindex: '-1', 'title': options.tooltips.togglePeriod})));\n                    bottomRow.append($('<td>').addClass('separator'));                                                 // 289\n                }                                                                                                      // 290\n                                                                                                                       // 291\n                return $('<div>').addClass('timepicker-picker')                                                        // 292\n                    .append($('<table>').addClass('table-condensed')                                                   // 293\n                        .append([topRow, middleRow, bottomRow]));                                                      // 294\n            },                                                                                                         // 295\n                                                                                                                       // 296\n            getTimePickerTemplate = function () {                                                                      // 297\n                var hoursView = $('<div>').addClass('timepicker-hours')                                                // 298\n                        .append($('<table>').addClass('table-condensed')),                                             // 299\n                    minutesView = $('<div>').addClass('timepicker-minutes')                                            // 300\n                        .append($('<table>').addClass('table-condensed')),                                             // 301\n                    secondsView = $('<div>').addClass('timepicker-seconds')                                            // 302\n                        .append($('<table>').addClass('table-condensed')),                                             // 303\n                    ret = [getTimePickerMainTemplate()];                                                               // 304\n                                                                                                                       // 305\n                if (isEnabled('h')) {                                                                                  // 306\n                    ret.push(hoursView);                                                                               // 307\n                }                                                                                                      // 308\n                if (isEnabled('m')) {                                                                                  // 309\n                    ret.push(minutesView);                                                                             // 310\n                }                                                                                                      // 311\n                if (isEnabled('s')) {                                                                                  // 312\n                    ret.push(secondsView);                                                                             // 313\n                }                                                                                                      // 314\n                                                                                                                       // 315\n                return ret;                                                                                            // 316\n            },                                                                                                         // 317\n                                                                                                                       // 318\n            getToolbar = function () {                                                                                 // 319\n                var row = [];                                                                                          // 320\n                if (options.showTodayButton) {                                                                         // 321\n                    row.push($('<td>').append($('<a>').attr({'data-action':'today', 'title': options.tooltips.today}).append($('<span>').addClass(options.icons.today))));\n                }                                                                                                      // 323\n                if (!options.sideBySide && hasDate() && hasTime()) {                                                   // 324\n                    row.push($('<td>').append($('<a>').attr({'data-action':'togglePicker', 'title': options.tooltips.selectTime}).append($('<span>').addClass(options.icons.time))));\n                }                                                                                                      // 326\n                if (options.showClear) {                                                                               // 327\n                    row.push($('<td>').append($('<a>').attr({'data-action':'clear', 'title': options.tooltips.clear}).append($('<span>').addClass(options.icons.clear))));\n                }                                                                                                      // 329\n                if (options.showClose) {                                                                               // 330\n                    row.push($('<td>').append($('<a>').attr({'data-action':'close', 'title': options.tooltips.close}).append($('<span>').addClass(options.icons.close))));\n                }                                                                                                      // 332\n                return $('<table>').addClass('table-condensed').append($('<tbody>').append($('<tr>').append(row)));    // 333\n            },                                                                                                         // 334\n                                                                                                                       // 335\n            getTemplate = function () {                                                                                // 336\n                var template = $('<div>').addClass('bootstrap-datetimepicker-widget dropdown-menu'),                   // 337\n                    dateView = $('<div>').addClass('datepicker').append(getDatePickerTemplate()),                      // 338\n                    timeView = $('<div>').addClass('timepicker').append(getTimePickerTemplate()),                      // 339\n                    content = $('<ul>').addClass('list-unstyled'),                                                     // 340\n                    toolbar = $('<li>').addClass('picker-switch' + (options.collapse ? ' accordion-toggle' : '')).append(getToolbar());\n                                                                                                                       // 342\n                if (options.inline) {                                                                                  // 343\n                    template.removeClass('dropdown-menu');                                                             // 344\n                }                                                                                                      // 345\n                                                                                                                       // 346\n                if (use24Hours) {                                                                                      // 347\n                    template.addClass('usetwentyfour');                                                                // 348\n                }                                                                                                      // 349\n                if (isEnabled('s') && !use24Hours) {                                                                   // 350\n                    template.addClass('wider');                                                                        // 351\n                }                                                                                                      // 352\n                                                                                                                       // 353\n                if (options.sideBySide && hasDate() && hasTime()) {                                                    // 354\n                    template.addClass('timepicker-sbs');                                                               // 355\n                    if (options.toolbarPlacement === 'top') {                                                          // 356\n                        template.append(toolbar);                                                                      // 357\n                    }                                                                                                  // 358\n                    template.append(                                                                                   // 359\n                        $('<div>').addClass('row')                                                                     // 360\n                            .append(dateView.addClass('col-md-6'))                                                     // 361\n                            .append(timeView.addClass('col-md-6'))                                                     // 362\n                    );                                                                                                 // 363\n                    if (options.toolbarPlacement === 'bottom') {                                                       // 364\n                        template.append(toolbar);                                                                      // 365\n                    }                                                                                                  // 366\n                    return template;                                                                                   // 367\n                }                                                                                                      // 368\n                                                                                                                       // 369\n                if (options.toolbarPlacement === 'top') {                                                              // 370\n                    content.append(toolbar);                                                                           // 371\n                }                                                                                                      // 372\n                if (hasDate()) {                                                                                       // 373\n                    content.append($('<li>').addClass((options.collapse && hasTime() ? 'collapse in' : '')).append(dateView));\n                }                                                                                                      // 375\n                if (options.toolbarPlacement === 'default') {                                                          // 376\n                    content.append(toolbar);                                                                           // 377\n                }                                                                                                      // 378\n                if (hasTime()) {                                                                                       // 379\n                    content.append($('<li>').addClass((options.collapse && hasDate() ? 'collapse' : '')).append(timeView));\n                }                                                                                                      // 381\n                if (options.toolbarPlacement === 'bottom') {                                                           // 382\n                    content.append(toolbar);                                                                           // 383\n                }                                                                                                      // 384\n                return template.append(content);                                                                       // 385\n            },                                                                                                         // 386\n                                                                                                                       // 387\n            dataToOptions = function () {                                                                              // 388\n                var eData,                                                                                             // 389\n                    dataOptions = {};                                                                                  // 390\n                                                                                                                       // 391\n                if (element.is('input') || options.inline) {                                                           // 392\n                    eData = element.data();                                                                            // 393\n                } else {                                                                                               // 394\n                    eData = element.find('input').data();                                                              // 395\n                }                                                                                                      // 396\n                                                                                                                       // 397\n                if (eData.dateOptions && eData.dateOptions instanceof Object) {                                        // 398\n                    dataOptions = $.extend(true, dataOptions, eData.dateOptions);                                      // 399\n                }                                                                                                      // 400\n                                                                                                                       // 401\n                $.each(options, function (key) {                                                                       // 402\n                    var attributeName = 'date' + key.charAt(0).toUpperCase() + key.slice(1);                           // 403\n                    if (eData[attributeName] !== undefined) {                                                          // 404\n                        dataOptions[key] = eData[attributeName];                                                       // 405\n                    }                                                                                                  // 406\n                });                                                                                                    // 407\n                return dataOptions;                                                                                    // 408\n            },                                                                                                         // 409\n                                                                                                                       // 410\n            place = function () {                                                                                      // 411\n                var position = (component || element).position(),                                                      // 412\n                    offset = (component || element).offset(),                                                          // 413\n                    vertical = options.widgetPositioning.vertical,                                                     // 414\n                    horizontal = options.widgetPositioning.horizontal,                                                 // 415\n                    parent;                                                                                            // 416\n                                                                                                                       // 417\n                if (options.widgetParent) {                                                                            // 418\n                    parent = options.widgetParent.append(widget);                                                      // 419\n                } else if (element.is('input')) {                                                                      // 420\n                    parent = element.after(widget).parent();                                                           // 421\n                } else if (options.inline) {                                                                           // 422\n                    parent = element.append(widget);                                                                   // 423\n                    return;                                                                                            // 424\n                } else {                                                                                               // 425\n                    parent = element;                                                                                  // 426\n                    element.children().first().after(widget);                                                          // 427\n                }                                                                                                      // 428\n                                                                                                                       // 429\n                // Top and bottom logic                                                                                // 430\n                if (vertical === 'auto') {                                                                             // 431\n                    if (offset.top + widget.height() * 1.5 >= $(window).height() + $(window).scrollTop() &&            // 432\n                        widget.height() + element.outerHeight() < offset.top) {                                        // 433\n                        vertical = 'top';                                                                              // 434\n                    } else {                                                                                           // 435\n                        vertical = 'bottom';                                                                           // 436\n                    }                                                                                                  // 437\n                }                                                                                                      // 438\n                                                                                                                       // 439\n                // Left and right logic                                                                                // 440\n                if (horizontal === 'auto') {                                                                           // 441\n                    if (parent.width() < offset.left + widget.outerWidth() / 2 &&                                      // 442\n                        offset.left + widget.outerWidth() > $(window).width()) {                                       // 443\n                        horizontal = 'right';                                                                          // 444\n                    } else {                                                                                           // 445\n                        horizontal = 'left';                                                                           // 446\n                    }                                                                                                  // 447\n                }                                                                                                      // 448\n                                                                                                                       // 449\n                if (vertical === 'top') {                                                                              // 450\n                    widget.addClass('top').removeClass('bottom');                                                      // 451\n                } else {                                                                                               // 452\n                    widget.addClass('bottom').removeClass('top');                                                      // 453\n                }                                                                                                      // 454\n                                                                                                                       // 455\n                if (horizontal === 'right') {                                                                          // 456\n                    widget.addClass('pull-right');                                                                     // 457\n                } else {                                                                                               // 458\n                    widget.removeClass('pull-right');                                                                  // 459\n                }                                                                                                      // 460\n                                                                                                                       // 461\n                // find the first parent element that has a relative css positioning                                   // 462\n                if (parent.css('position') !== 'relative') {                                                           // 463\n                    parent = parent.parents().filter(function () {                                                     // 464\n                        return $(this).css('position') === 'relative';                                                 // 465\n                    }).first();                                                                                        // 466\n                }                                                                                                      // 467\n                                                                                                                       // 468\n                if (parent.length === 0) {                                                                             // 469\n                    throw new Error('datetimepicker component should be placed within a relative positioned container');\n                }                                                                                                      // 471\n                                                                                                                       // 472\n                widget.css({                                                                                           // 473\n                    top: vertical === 'top' ? 'auto' : position.top + element.outerHeight(),                           // 474\n                    bottom: vertical === 'top' ? position.top + element.outerHeight() : 'auto',                        // 475\n                    left: horizontal === 'left' ? (parent === element ? 0 : position.left) : 'auto',                   // 476\n                    right: horizontal === 'left' ? 'auto' : parent.outerWidth() - element.outerWidth() - (parent === element ? 0 : position.left)\n                });                                                                                                    // 478\n            },                                                                                                         // 479\n                                                                                                                       // 480\n            notifyEvent = function (e) {                                                                               // 481\n                if (e.type === 'dp.change' && ((e.date && e.date.isSame(e.oldDate)) || (!e.date && !e.oldDate))) {     // 482\n                    return;                                                                                            // 483\n                }                                                                                                      // 484\n                element.trigger(e);                                                                                    // 485\n            },                                                                                                         // 486\n                                                                                                                       // 487\n            viewUpdate = function (e) {                                                                                // 488\n                if (e === 'y') {                                                                                       // 489\n                    e = 'YYYY';                                                                                        // 490\n                }                                                                                                      // 491\n                notifyEvent({                                                                                          // 492\n                    type: 'dp.update',                                                                                 // 493\n                    change: e,                                                                                         // 494\n                    viewDate: viewDate.clone()                                                                         // 495\n                });                                                                                                    // 496\n            },                                                                                                         // 497\n                                                                                                                       // 498\n            showMode = function (dir) {                                                                                // 499\n                if (!widget) {                                                                                         // 500\n                    return;                                                                                            // 501\n                }                                                                                                      // 502\n                if (dir) {                                                                                             // 503\n                    currentViewMode = Math.max(minViewModeNumber, Math.min(3, currentViewMode + dir));                 // 504\n                }                                                                                                      // 505\n                widget.find('.datepicker > div').hide().filter('.datepicker-' + datePickerModes[currentViewMode].clsName).show();\n            },                                                                                                         // 507\n                                                                                                                       // 508\n            fillDow = function () {                                                                                    // 509\n                var row = $('<tr>'),                                                                                   // 510\n                    currentDate = viewDate.clone().startOf('w').startOf('d');                                          // 511\n                                                                                                                       // 512\n                if (options.calendarWeeks === true) {                                                                  // 513\n                    row.append($('<th>').addClass('cw').text('#'));                                                    // 514\n                }                                                                                                      // 515\n                                                                                                                       // 516\n                while (currentDate.isBefore(viewDate.clone().endOf('w'))) {                                            // 517\n                    row.append($('<th>').addClass('dow').text(currentDate.format('dd')));                              // 518\n                    currentDate.add(1, 'd');                                                                           // 519\n                }                                                                                                      // 520\n                widget.find('.datepicker-days thead').append(row);                                                     // 521\n            },                                                                                                         // 522\n                                                                                                                       // 523\n            isInDisabledDates = function (testDate) {                                                                  // 524\n                return options.disabledDates[testDate.format('YYYY-MM-DD')] === true;                                  // 525\n            },                                                                                                         // 526\n                                                                                                                       // 527\n            isInEnabledDates = function (testDate) {                                                                   // 528\n                return options.enabledDates[testDate.format('YYYY-MM-DD')] === true;                                   // 529\n            },                                                                                                         // 530\n                                                                                                                       // 531\n            isInDisabledHours = function (testDate) {                                                                  // 532\n                return options.disabledHours[testDate.format('H')] === true;                                           // 533\n            },                                                                                                         // 534\n                                                                                                                       // 535\n            isInEnabledHours = function (testDate) {                                                                   // 536\n                return options.enabledHours[testDate.format('H')] === true;                                            // 537\n            },                                                                                                         // 538\n                                                                                                                       // 539\n            isValid = function (targetMoment, granularity) {                                                           // 540\n                if (!targetMoment.isValid()) {                                                                         // 541\n                    return false;                                                                                      // 542\n                }                                                                                                      // 543\n                if (options.disabledDates && granularity === 'd' && isInDisabledDates(targetMoment)) {                 // 544\n                    return false;                                                                                      // 545\n                }                                                                                                      // 546\n                if (options.enabledDates && granularity === 'd' && !isInEnabledDates(targetMoment)) {                  // 547\n                    return false;                                                                                      // 548\n                }                                                                                                      // 549\n                if (options.minDate && targetMoment.isBefore(options.minDate, granularity)) {                          // 550\n                    return false;                                                                                      // 551\n                }                                                                                                      // 552\n                if (options.maxDate && targetMoment.isAfter(options.maxDate, granularity)) {                           // 553\n                    return false;                                                                                      // 554\n                }                                                                                                      // 555\n                if (options.daysOfWeekDisabled && granularity === 'd' && options.daysOfWeekDisabled.indexOf(targetMoment.day()) !== -1) {\n                    return false;                                                                                      // 557\n                }                                                                                                      // 558\n                if (options.disabledHours && (granularity === 'h' || granularity === 'm' || granularity === 's') && isInDisabledHours(targetMoment)) {\n                    return false;                                                                                      // 560\n                }                                                                                                      // 561\n                if (options.enabledHours && (granularity === 'h' || granularity === 'm' || granularity === 's') && !isInEnabledHours(targetMoment)) {\n                    return false;                                                                                      // 563\n                }                                                                                                      // 564\n                if (options.disabledTimeIntervals && (granularity === 'h' || granularity === 'm' || granularity === 's')) {\n                    var found = false;                                                                                 // 566\n                    $.each(options.disabledTimeIntervals, function () {                                                // 567\n                        if (targetMoment.isBetween(this[0], this[1])) {                                                // 568\n                            found = true;                                                                              // 569\n                            return false;                                                                              // 570\n                        }                                                                                              // 571\n                    });                                                                                                // 572\n                    if (found) {                                                                                       // 573\n                        return false;                                                                                  // 574\n                    }                                                                                                  // 575\n                }                                                                                                      // 576\n                return true;                                                                                           // 577\n            },                                                                                                         // 578\n                                                                                                                       // 579\n            fillMonths = function () {                                                                                 // 580\n                var spans = [],                                                                                        // 581\n                    monthsShort = viewDate.clone().startOf('y').startOf('d');                                          // 582\n                while (monthsShort.isSame(viewDate, 'y')) {                                                            // 583\n                    spans.push($('<span>').attr('data-action', 'selectMonth').addClass('month').text(monthsShort.format('MMM')));\n                    monthsShort.add(1, 'M');                                                                           // 585\n                }                                                                                                      // 586\n                widget.find('.datepicker-months td').empty().append(spans);                                            // 587\n            },                                                                                                         // 588\n                                                                                                                       // 589\n            updateMonths = function () {                                                                               // 590\n                var monthsView = widget.find('.datepicker-months'),                                                    // 591\n                    monthsViewHeader = monthsView.find('th'),                                                          // 592\n                    months = monthsView.find('tbody').find('span');                                                    // 593\n                                                                                                                       // 594\n                monthsViewHeader.eq(0).find('span').attr('title', options.tooltips.prevYear);                          // 595\n                monthsViewHeader.eq(1).attr('title', options.tooltips.selectYear);                                     // 596\n                monthsViewHeader.eq(2).find('span').attr('title', options.tooltips.nextYear);                          // 597\n                                                                                                                       // 598\n                monthsView.find('.disabled').removeClass('disabled');                                                  // 599\n                                                                                                                       // 600\n                if (!isValid(viewDate.clone().subtract(1, 'y'), 'y')) {                                                // 601\n                    monthsViewHeader.eq(0).addClass('disabled');                                                       // 602\n                }                                                                                                      // 603\n                                                                                                                       // 604\n                monthsViewHeader.eq(1).text(viewDate.year());                                                          // 605\n                                                                                                                       // 606\n                if (!isValid(viewDate.clone().add(1, 'y'), 'y')) {                                                     // 607\n                    monthsViewHeader.eq(2).addClass('disabled');                                                       // 608\n                }                                                                                                      // 609\n                                                                                                                       // 610\n                months.removeClass('active');                                                                          // 611\n                if (date.isSame(viewDate, 'y') && !unset) {                                                            // 612\n                    months.eq(date.month()).addClass('active');                                                        // 613\n                }                                                                                                      // 614\n                                                                                                                       // 615\n                months.each(function (index) {                                                                         // 616\n                    if (!isValid(viewDate.clone().month(index), 'M')) {                                                // 617\n                        $(this).addClass('disabled');                                                                  // 618\n                    }                                                                                                  // 619\n                });                                                                                                    // 620\n            },                                                                                                         // 621\n                                                                                                                       // 622\n            updateYears = function () {                                                                                // 623\n                var yearsView = widget.find('.datepicker-years'),                                                      // 624\n                    yearsViewHeader = yearsView.find('th'),                                                            // 625\n                    startYear = viewDate.clone().subtract(5, 'y'),                                                     // 626\n                    endYear = viewDate.clone().add(6, 'y'),                                                            // 627\n                    html = '';                                                                                         // 628\n                                                                                                                       // 629\n                yearsViewHeader.eq(0).find('span').attr('title', options.tooltips.prevDecade);                         // 630\n                yearsViewHeader.eq(1).attr('title', options.tooltips.selectDecade);                                    // 631\n                yearsViewHeader.eq(2).find('span').attr('title', options.tooltips.nextDecade);                         // 632\n                                                                                                                       // 633\n                yearsView.find('.disabled').removeClass('disabled');                                                   // 634\n                                                                                                                       // 635\n                if (options.minDate && options.minDate.isAfter(startYear, 'y')) {                                      // 636\n                    yearsViewHeader.eq(0).addClass('disabled');                                                        // 637\n                }                                                                                                      // 638\n                                                                                                                       // 639\n                yearsViewHeader.eq(1).text(startYear.year() + '-' + endYear.year());                                   // 640\n                                                                                                                       // 641\n                if (options.maxDate && options.maxDate.isBefore(endYear, 'y')) {                                       // 642\n                    yearsViewHeader.eq(2).addClass('disabled');                                                        // 643\n                }                                                                                                      // 644\n                                                                                                                       // 645\n                while (!startYear.isAfter(endYear, 'y')) {                                                             // 646\n                    html += '<span data-action=\"selectYear\" class=\"year' + (startYear.isSame(date, 'y') && !unset ? ' active' : '') + (!isValid(startYear, 'y') ? ' disabled' : '') + '\">' + startYear.year() + '</span>';\n                    startYear.add(1, 'y');                                                                             // 648\n                }                                                                                                      // 649\n                                                                                                                       // 650\n                yearsView.find('td').html(html);                                                                       // 651\n            },                                                                                                         // 652\n                                                                                                                       // 653\n            updateDecades = function () {                                                                              // 654\n                var decadesView = widget.find('.datepicker-decades'),                                                  // 655\n                    decadesViewHeader = decadesView.find('th'),                                                        // 656\n                    startDecade = moment({y: viewDate.year() - (viewDate.year() % 100) - 1}),                          // 657\n                    endDecade = startDecade.clone().add(100, 'y'),                                                     // 658\n                    startedAt = startDecade.clone(),                                                                   // 659\n                    html = '';                                                                                         // 660\n                                                                                                                       // 661\n                decadesViewHeader.eq(0).find('span').attr('title', options.tooltips.prevCentury);                      // 662\n                decadesViewHeader.eq(2).find('span').attr('title', options.tooltips.nextCentury);                      // 663\n                                                                                                                       // 664\n                decadesView.find('.disabled').removeClass('disabled');                                                 // 665\n                                                                                                                       // 666\n                if (startDecade.isSame(moment({y: 1900})) || (options.minDate && options.minDate.isAfter(startDecade, 'y'))) {\n                    decadesViewHeader.eq(0).addClass('disabled');                                                      // 668\n                }                                                                                                      // 669\n                                                                                                                       // 670\n                decadesViewHeader.eq(1).text(startDecade.year() + '-' + endDecade.year());                             // 671\n                                                                                                                       // 672\n                if (startDecade.isSame(moment({y: 2000})) || (options.maxDate && options.maxDate.isBefore(endDecade, 'y'))) {\n                    decadesViewHeader.eq(2).addClass('disabled');                                                      // 674\n                }                                                                                                      // 675\n                                                                                                                       // 676\n                while (!startDecade.isAfter(endDecade, 'y')) {                                                         // 677\n                    html += '<span data-action=\"selectDecade\" class=\"decade' + (startDecade.isSame(date, 'y') ? ' active' : '') +\n                        (!isValid(startDecade, 'y') ? ' disabled' : '') + '\" data-selection=\"' + (startDecade.year() + 6) + '\">' + (startDecade.year() + 1) + ' - ' + (startDecade.year() + 12) + '</span>';\n                    startDecade.add(12, 'y');                                                                          // 680\n                }                                                                                                      // 681\n                html += '<span></span><span></span><span></span>'; //push the dangling block over, at least this way it's even\n                                                                                                                       // 683\n                decadesView.find('td').html(html);                                                                     // 684\n                decadesViewHeader.eq(1).text((startedAt.year() + 1) + '-' + (startDecade.year()));                     // 685\n            },                                                                                                         // 686\n                                                                                                                       // 687\n            fillDate = function () {                                                                                   // 688\n                var daysView = widget.find('.datepicker-days'),                                                        // 689\n                    daysViewHeader = daysView.find('th'),                                                              // 690\n                    currentDate,                                                                                       // 691\n                    html = [],                                                                                         // 692\n                    row,                                                                                               // 693\n                    clsName,                                                                                           // 694\n                    i;                                                                                                 // 695\n                                                                                                                       // 696\n                if (!hasDate()) {                                                                                      // 697\n                    return;                                                                                            // 698\n                }                                                                                                      // 699\n                                                                                                                       // 700\n                daysViewHeader.eq(0).find('span').attr('title', options.tooltips.prevMonth);                           // 701\n                daysViewHeader.eq(1).attr('title', options.tooltips.selectMonth);                                      // 702\n                daysViewHeader.eq(2).find('span').attr('title', options.tooltips.nextMonth);                           // 703\n                                                                                                                       // 704\n                daysView.find('.disabled').removeClass('disabled');                                                    // 705\n                daysViewHeader.eq(1).text(viewDate.format(options.dayViewHeaderFormat));                               // 706\n                                                                                                                       // 707\n                if (!isValid(viewDate.clone().subtract(1, 'M'), 'M')) {                                                // 708\n                    daysViewHeader.eq(0).addClass('disabled');                                                         // 709\n                }                                                                                                      // 710\n                if (!isValid(viewDate.clone().add(1, 'M'), 'M')) {                                                     // 711\n                    daysViewHeader.eq(2).addClass('disabled');                                                         // 712\n                }                                                                                                      // 713\n                                                                                                                       // 714\n                currentDate = viewDate.clone().startOf('M').startOf('w').startOf('d');                                 // 715\n                                                                                                                       // 716\n                for (i = 0; i < 42; i++) { //always display 42 days (should show 6 weeks)                              // 717\n                    if (currentDate.weekday() === 0) {                                                                 // 718\n                        row = $('<tr>');                                                                               // 719\n                        if (options.calendarWeeks) {                                                                   // 720\n                            row.append('<td class=\"cw\">' + currentDate.week() + '</td>');                              // 721\n                        }                                                                                              // 722\n                        html.push(row);                                                                                // 723\n                    }                                                                                                  // 724\n                    clsName = '';                                                                                      // 725\n                    if (currentDate.isBefore(viewDate, 'M')) {                                                         // 726\n                        clsName += ' old';                                                                             // 727\n                    }                                                                                                  // 728\n                    if (currentDate.isAfter(viewDate, 'M')) {                                                          // 729\n                        clsName += ' new';                                                                             // 730\n                    }                                                                                                  // 731\n                    if (currentDate.isSame(date, 'd') && !unset) {                                                     // 732\n                        clsName += ' active';                                                                          // 733\n                    }                                                                                                  // 734\n                    if (!isValid(currentDate, 'd')) {                                                                  // 735\n                        clsName += ' disabled';                                                                        // 736\n                    }                                                                                                  // 737\n                    if (currentDate.isSame(getMoment(), 'd')) {                                                        // 738\n                        clsName += ' today';                                                                           // 739\n                    }                                                                                                  // 740\n                    if (currentDate.day() === 0 || currentDate.day() === 6) {                                          // 741\n                        clsName += ' weekend';                                                                         // 742\n                    }                                                                                                  // 743\n                    row.append('<td data-action=\"selectDay\" data-day=\"' + currentDate.format('L') + '\" class=\"day' + clsName + '\">' + currentDate.date() + '</td>');\n                    currentDate.add(1, 'd');                                                                           // 745\n                }                                                                                                      // 746\n                                                                                                                       // 747\n                daysView.find('tbody').empty().append(html);                                                           // 748\n                                                                                                                       // 749\n                updateMonths();                                                                                        // 750\n                                                                                                                       // 751\n                updateYears();                                                                                         // 752\n                                                                                                                       // 753\n                updateDecades();                                                                                       // 754\n            },                                                                                                         // 755\n                                                                                                                       // 756\n            fillHours = function () {                                                                                  // 757\n                var table = widget.find('.timepicker-hours table'),                                                    // 758\n                    currentHour = viewDate.clone().startOf('d'),                                                       // 759\n                    html = [],                                                                                         // 760\n                    row = $('<tr>');                                                                                   // 761\n                                                                                                                       // 762\n                if (viewDate.hour() > 11 && !use24Hours) {                                                             // 763\n                    currentHour.hour(12);                                                                              // 764\n                }                                                                                                      // 765\n                while (currentHour.isSame(viewDate, 'd') && (use24Hours || (viewDate.hour() < 12 && currentHour.hour() < 12) || viewDate.hour() > 11)) {\n                    if (currentHour.hour() % 4 === 0) {                                                                // 767\n                        row = $('<tr>');                                                                               // 768\n                        html.push(row);                                                                                // 769\n                    }                                                                                                  // 770\n                    row.append('<td data-action=\"selectHour\" class=\"hour' + (!isValid(currentHour, 'h') ? ' disabled' : '') + '\">' + currentHour.format(use24Hours ? 'HH' : 'hh') + '</td>');\n                    currentHour.add(1, 'h');                                                                           // 772\n                }                                                                                                      // 773\n                table.empty().append(html);                                                                            // 774\n            },                                                                                                         // 775\n                                                                                                                       // 776\n            fillMinutes = function () {                                                                                // 777\n                var table = widget.find('.timepicker-minutes table'),                                                  // 778\n                    currentMinute = viewDate.clone().startOf('h'),                                                     // 779\n                    html = [],                                                                                         // 780\n                    row = $('<tr>'),                                                                                   // 781\n                    step = options.stepping === 1 ? 5 : options.stepping;                                              // 782\n                                                                                                                       // 783\n                while (viewDate.isSame(currentMinute, 'h')) {                                                          // 784\n                    if (currentMinute.minute() % (step * 4) === 0) {                                                   // 785\n                        row = $('<tr>');                                                                               // 786\n                        html.push(row);                                                                                // 787\n                    }                                                                                                  // 788\n                    row.append('<td data-action=\"selectMinute\" class=\"minute' + (!isValid(currentMinute, 'm') ? ' disabled' : '') + '\">' + currentMinute.format('mm') + '</td>');\n                    currentMinute.add(step, 'm');                                                                      // 790\n                }                                                                                                      // 791\n                table.empty().append(html);                                                                            // 792\n            },                                                                                                         // 793\n                                                                                                                       // 794\n            fillSeconds = function () {                                                                                // 795\n                var table = widget.find('.timepicker-seconds table'),                                                  // 796\n                    currentSecond = viewDate.clone().startOf('m'),                                                     // 797\n                    html = [],                                                                                         // 798\n                    row = $('<tr>');                                                                                   // 799\n                                                                                                                       // 800\n                while (viewDate.isSame(currentSecond, 'm')) {                                                          // 801\n                    if (currentSecond.second() % 20 === 0) {                                                           // 802\n                        row = $('<tr>');                                                                               // 803\n                        html.push(row);                                                                                // 804\n                    }                                                                                                  // 805\n                    row.append('<td data-action=\"selectSecond\" class=\"second' + (!isValid(currentSecond, 's') ? ' disabled' : '') + '\">' + currentSecond.format('ss') + '</td>');\n                    currentSecond.add(5, 's');                                                                         // 807\n                }                                                                                                      // 808\n                                                                                                                       // 809\n                table.empty().append(html);                                                                            // 810\n            },                                                                                                         // 811\n                                                                                                                       // 812\n            fillTime = function () {                                                                                   // 813\n                var toggle, newDate, timeComponents = widget.find('.timepicker span[data-time-component]');            // 814\n                                                                                                                       // 815\n                if (!use24Hours) {                                                                                     // 816\n                    toggle = widget.find('.timepicker [data-action=togglePeriod]');                                    // 817\n                    newDate = date.clone().add((date.hours() >= 12) ? -12 : 12, 'h');                                  // 818\n                                                                                                                       // 819\n                    toggle.text(date.format('A'));                                                                     // 820\n                                                                                                                       // 821\n                    if (isValid(newDate, 'h')) {                                                                       // 822\n                        toggle.removeClass('disabled');                                                                // 823\n                    } else {                                                                                           // 824\n                        toggle.addClass('disabled');                                                                   // 825\n                    }                                                                                                  // 826\n                }                                                                                                      // 827\n                timeComponents.filter('[data-time-component=hours]').text(date.format(use24Hours ? 'HH' : 'hh'));      // 828\n                timeComponents.filter('[data-time-component=minutes]').text(date.format('mm'));                        // 829\n                timeComponents.filter('[data-time-component=seconds]').text(date.format('ss'));                        // 830\n                                                                                                                       // 831\n                fillHours();                                                                                           // 832\n                fillMinutes();                                                                                         // 833\n                fillSeconds();                                                                                         // 834\n            },                                                                                                         // 835\n                                                                                                                       // 836\n            update = function () {                                                                                     // 837\n                if (!widget) {                                                                                         // 838\n                    return;                                                                                            // 839\n                }                                                                                                      // 840\n                fillDate();                                                                                            // 841\n                fillTime();                                                                                            // 842\n            },                                                                                                         // 843\n                                                                                                                       // 844\n            setValue = function (targetMoment) {                                                                       // 845\n                var oldDate = unset ? null : date;                                                                     // 846\n                                                                                                                       // 847\n                // case of calling setValue(null or false)                                                             // 848\n                if (!targetMoment) {                                                                                   // 849\n                    unset = true;                                                                                      // 850\n                    input.val('');                                                                                     // 851\n                    element.data('date', '');                                                                          // 852\n                    notifyEvent({                                                                                      // 853\n                        type: 'dp.change',                                                                             // 854\n                        date: false,                                                                                   // 855\n                        oldDate: oldDate                                                                               // 856\n                    });                                                                                                // 857\n                    update();                                                                                          // 858\n                    return;                                                                                            // 859\n                }                                                                                                      // 860\n                                                                                                                       // 861\n                targetMoment = targetMoment.clone().locale(options.locale);                                            // 862\n                                                                                                                       // 863\n                if (options.stepping !== 1) {                                                                          // 864\n                    targetMoment.minutes((Math.round(targetMoment.minutes() / options.stepping) * options.stepping) % 60).seconds(0);\n                }                                                                                                      // 866\n                                                                                                                       // 867\n                if (isValid(targetMoment)) {                                                                           // 868\n                    date = targetMoment;                                                                               // 869\n                    viewDate = date.clone();                                                                           // 870\n                    input.val(date.format(actualFormat));                                                              // 871\n                    element.data('date', date.format(actualFormat));                                                   // 872\n                    unset = false;                                                                                     // 873\n                    update();                                                                                          // 874\n                    notifyEvent({                                                                                      // 875\n                        type: 'dp.change',                                                                             // 876\n                        date: date.clone(),                                                                            // 877\n                        oldDate: oldDate                                                                               // 878\n                    });                                                                                                // 879\n                } else {                                                                                               // 880\n                    if (!options.keepInvalid) {                                                                        // 881\n                        input.val(unset ? '' : date.format(actualFormat));                                             // 882\n                    }                                                                                                  // 883\n                    notifyEvent({                                                                                      // 884\n                        type: 'dp.error',                                                                              // 885\n                        date: targetMoment                                                                             // 886\n                    });                                                                                                // 887\n                }                                                                                                      // 888\n            },                                                                                                         // 889\n                                                                                                                       // 890\n            hide = function () {                                                                                       // 891\n                ///<summary>Hides the widget. Possibly will emit dp.hide</summary>                                     // 892\n                var transitioning = false;                                                                             // 893\n                if (!widget) {                                                                                         // 894\n                    return picker;                                                                                     // 895\n                }                                                                                                      // 896\n                // Ignore event if in the middle of a picker transition                                                // 897\n                widget.find('.collapse').each(function () {                                                            // 898\n                    var collapseData = $(this).data('collapse');                                                       // 899\n                    if (collapseData && collapseData.transitioning) {                                                  // 900\n                        transitioning = true;                                                                          // 901\n                        return false;                                                                                  // 902\n                    }                                                                                                  // 903\n                    return true;                                                                                       // 904\n                });                                                                                                    // 905\n                if (transitioning) {                                                                                   // 906\n                    return picker;                                                                                     // 907\n                }                                                                                                      // 908\n                if (component && component.hasClass('btn')) {                                                          // 909\n                    component.toggleClass('active');                                                                   // 910\n                }                                                                                                      // 911\n                widget.hide();                                                                                         // 912\n                                                                                                                       // 913\n                $(window).off('resize', place);                                                                        // 914\n                widget.off('click', '[data-action]');                                                                  // 915\n                widget.off('mousedown', false);                                                                        // 916\n                                                                                                                       // 917\n                widget.remove();                                                                                       // 918\n                widget = false;                                                                                        // 919\n                                                                                                                       // 920\n                notifyEvent({                                                                                          // 921\n                    type: 'dp.hide',                                                                                   // 922\n                    date: date.clone()                                                                                 // 923\n                });                                                                                                    // 924\n                                                                                                                       // 925\n                input.blur();                                                                                          // 926\n                                                                                                                       // 927\n                return picker;                                                                                         // 928\n            },                                                                                                         // 929\n                                                                                                                       // 930\n            clear = function () {                                                                                      // 931\n                setValue(null);                                                                                        // 932\n            },                                                                                                         // 933\n                                                                                                                       // 934\n            /********************************************************************************                          // 935\n             *                                                                                                         // 936\n             * Widget UI interaction functions                                                                         // 937\n             *                                                                                                         // 938\n             ********************************************************************************/                         // 939\n            actions = {                                                                                                // 940\n                next: function () {                                                                                    // 941\n                    var navFnc = datePickerModes[currentViewMode].navFnc;                                              // 942\n                    viewDate.add(datePickerModes[currentViewMode].navStep, navFnc);                                    // 943\n                    fillDate();                                                                                        // 944\n                    viewUpdate(navFnc);                                                                                // 945\n                },                                                                                                     // 946\n                                                                                                                       // 947\n                previous: function () {                                                                                // 948\n                    var navFnc = datePickerModes[currentViewMode].navFnc;                                              // 949\n                    viewDate.subtract(datePickerModes[currentViewMode].navStep, navFnc);                               // 950\n                    fillDate();                                                                                        // 951\n                    viewUpdate(navFnc);                                                                                // 952\n                },                                                                                                     // 953\n                                                                                                                       // 954\n                pickerSwitch: function () {                                                                            // 955\n                    showMode(1);                                                                                       // 956\n                },                                                                                                     // 957\n                                                                                                                       // 958\n                selectMonth: function (e) {                                                                            // 959\n                    var month = $(e.target).closest('tbody').find('span').index($(e.target));                          // 960\n                    viewDate.month(month);                                                                             // 961\n                    if (currentViewMode === minViewModeNumber) {                                                       // 962\n                        setValue(date.clone().year(viewDate.year()).month(viewDate.month()));                          // 963\n                        if (!options.inline) {                                                                         // 964\n                            hide();                                                                                    // 965\n                        }                                                                                              // 966\n                    } else {                                                                                           // 967\n                        showMode(-1);                                                                                  // 968\n                        fillDate();                                                                                    // 969\n                    }                                                                                                  // 970\n                    viewUpdate('M');                                                                                   // 971\n                },                                                                                                     // 972\n                                                                                                                       // 973\n                selectYear: function (e) {                                                                             // 974\n                    var year = parseInt($(e.target).text(), 10) || 0;                                                  // 975\n                    viewDate.year(year);                                                                               // 976\n                    if (currentViewMode === minViewModeNumber) {                                                       // 977\n                        setValue(date.clone().year(viewDate.year()));                                                  // 978\n                        if (!options.inline) {                                                                         // 979\n                            hide();                                                                                    // 980\n                        }                                                                                              // 981\n                    } else {                                                                                           // 982\n                        showMode(-1);                                                                                  // 983\n                        fillDate();                                                                                    // 984\n                    }                                                                                                  // 985\n                    viewUpdate('YYYY');                                                                                // 986\n                },                                                                                                     // 987\n                                                                                                                       // 988\n                selectDecade: function (e) {                                                                           // 989\n                    var year = parseInt($(e.target).data('selection'), 10) || 0;                                       // 990\n                    viewDate.year(year);                                                                               // 991\n                    if (currentViewMode === minViewModeNumber) {                                                       // 992\n                        setValue(date.clone().year(viewDate.year()));                                                  // 993\n                        if (!options.inline) {                                                                         // 994\n                            hide();                                                                                    // 995\n                        }                                                                                              // 996\n                    } else {                                                                                           // 997\n                        showMode(-1);                                                                                  // 998\n                        fillDate();                                                                                    // 999\n                    }                                                                                                  // 1000\n                    viewUpdate('YYYY');                                                                                // 1001\n                },                                                                                                     // 1002\n                                                                                                                       // 1003\n                selectDay: function (e) {                                                                              // 1004\n                    var day = viewDate.clone();                                                                        // 1005\n                    if ($(e.target).is('.old')) {                                                                      // 1006\n                        day.subtract(1, 'M');                                                                          // 1007\n                    }                                                                                                  // 1008\n                    if ($(e.target).is('.new')) {                                                                      // 1009\n                        day.add(1, 'M');                                                                               // 1010\n                    }                                                                                                  // 1011\n                    setValue(day.date(parseInt($(e.target).text(), 10)));                                              // 1012\n                    if (!hasTime() && !options.keepOpen && !options.inline) {                                          // 1013\n                        hide();                                                                                        // 1014\n                    }                                                                                                  // 1015\n                },                                                                                                     // 1016\n                                                                                                                       // 1017\n                incrementHours: function () {                                                                          // 1018\n                    var newDate = date.clone().add(1, 'h');                                                            // 1019\n                    if (isValid(newDate, 'h')) {                                                                       // 1020\n                        setValue(newDate);                                                                             // 1021\n                    }                                                                                                  // 1022\n                },                                                                                                     // 1023\n                                                                                                                       // 1024\n                incrementMinutes: function () {                                                                        // 1025\n                    var newDate = date.clone().add(options.stepping, 'm');                                             // 1026\n                    if (isValid(newDate, 'm')) {                                                                       // 1027\n                        setValue(newDate);                                                                             // 1028\n                    }                                                                                                  // 1029\n                },                                                                                                     // 1030\n                                                                                                                       // 1031\n                incrementSeconds: function () {                                                                        // 1032\n                    var newDate = date.clone().add(1, 's');                                                            // 1033\n                    if (isValid(newDate, 's')) {                                                                       // 1034\n                        setValue(newDate);                                                                             // 1035\n                    }                                                                                                  // 1036\n                },                                                                                                     // 1037\n                                                                                                                       // 1038\n                decrementHours: function () {                                                                          // 1039\n                    var newDate = date.clone().subtract(1, 'h');                                                       // 1040\n                    if (isValid(newDate, 'h')) {                                                                       // 1041\n                        setValue(newDate);                                                                             // 1042\n                    }                                                                                                  // 1043\n                },                                                                                                     // 1044\n                                                                                                                       // 1045\n                decrementMinutes: function () {                                                                        // 1046\n                    var newDate = date.clone().subtract(options.stepping, 'm');                                        // 1047\n                    if (isValid(newDate, 'm')) {                                                                       // 1048\n                        setValue(newDate);                                                                             // 1049\n                    }                                                                                                  // 1050\n                },                                                                                                     // 1051\n                                                                                                                       // 1052\n                decrementSeconds: function () {                                                                        // 1053\n                    var newDate = date.clone().subtract(1, 's');                                                       // 1054\n                    if (isValid(newDate, 's')) {                                                                       // 1055\n                        setValue(newDate);                                                                             // 1056\n                    }                                                                                                  // 1057\n                },                                                                                                     // 1058\n                                                                                                                       // 1059\n                togglePeriod: function () {                                                                            // 1060\n                    setValue(date.clone().add((date.hours() >= 12) ? -12 : 12, 'h'));                                  // 1061\n                },                                                                                                     // 1062\n                                                                                                                       // 1063\n                togglePicker: function (e) {                                                                           // 1064\n                    var $this = $(e.target),                                                                           // 1065\n                        $parent = $this.closest('ul'),                                                                 // 1066\n                        expanded = $parent.find('.in'),                                                                // 1067\n                        closed = $parent.find('.collapse:not(.in)'),                                                   // 1068\n                        collapseData;                                                                                  // 1069\n                                                                                                                       // 1070\n                    if (expanded && expanded.length) {                                                                 // 1071\n                        collapseData = expanded.data('collapse');                                                      // 1072\n                        if (collapseData && collapseData.transitioning) {                                              // 1073\n                            return;                                                                                    // 1074\n                        }                                                                                              // 1075\n                        if (expanded.collapse) { // if collapse plugin is available through bootstrap.js then use it   // 1076\n                            expanded.collapse('hide');                                                                 // 1077\n                            closed.collapse('show');                                                                   // 1078\n                        } else { // otherwise just toggle in class on the two views                                    // 1079\n                            expanded.removeClass('in');                                                                // 1080\n                            closed.addClass('in');                                                                     // 1081\n                        }                                                                                              // 1082\n                        if ($this.is('span')) {                                                                        // 1083\n                            $this.toggleClass(options.icons.time + ' ' + options.icons.date);                          // 1084\n                        } else {                                                                                       // 1085\n                            $this.find('span').toggleClass(options.icons.time + ' ' + options.icons.date);             // 1086\n                        }                                                                                              // 1087\n                                                                                                                       // 1088\n                        // NOTE: uncomment if toggled state will be restored in show()                                 // 1089\n                        //if (component) {                                                                             // 1090\n                        //    component.find('span').toggleClass(options.icons.time + ' ' + options.icons.date);       // 1091\n                        //}                                                                                            // 1092\n                    }                                                                                                  // 1093\n                },                                                                                                     // 1094\n                                                                                                                       // 1095\n                showPicker: function () {                                                                              // 1096\n                    widget.find('.timepicker > div:not(.timepicker-picker)').hide();                                   // 1097\n                    widget.find('.timepicker .timepicker-picker').show();                                              // 1098\n                },                                                                                                     // 1099\n                                                                                                                       // 1100\n                showHours: function () {                                                                               // 1101\n                    widget.find('.timepicker .timepicker-picker').hide();                                              // 1102\n                    widget.find('.timepicker .timepicker-hours').show();                                               // 1103\n                },                                                                                                     // 1104\n                                                                                                                       // 1105\n                showMinutes: function () {                                                                             // 1106\n                    widget.find('.timepicker .timepicker-picker').hide();                                              // 1107\n                    widget.find('.timepicker .timepicker-minutes').show();                                             // 1108\n                },                                                                                                     // 1109\n                                                                                                                       // 1110\n                showSeconds: function () {                                                                             // 1111\n                    widget.find('.timepicker .timepicker-picker').hide();                                              // 1112\n                    widget.find('.timepicker .timepicker-seconds').show();                                             // 1113\n                },                                                                                                     // 1114\n                                                                                                                       // 1115\n                selectHour: function (e) {                                                                             // 1116\n                    var hour = parseInt($(e.target).text(), 10);                                                       // 1117\n                                                                                                                       // 1118\n                    if (!use24Hours) {                                                                                 // 1119\n                        if (date.hours() >= 12) {                                                                      // 1120\n                            if (hour !== 12) {                                                                         // 1121\n                                hour += 12;                                                                            // 1122\n                            }                                                                                          // 1123\n                        } else {                                                                                       // 1124\n                            if (hour === 12) {                                                                         // 1125\n                                hour = 0;                                                                              // 1126\n                            }                                                                                          // 1127\n                        }                                                                                              // 1128\n                    }                                                                                                  // 1129\n                    setValue(date.clone().hours(hour));                                                                // 1130\n                    actions.showPicker.call(picker);                                                                   // 1131\n                },                                                                                                     // 1132\n                                                                                                                       // 1133\n                selectMinute: function (e) {                                                                           // 1134\n                    setValue(date.clone().minutes(parseInt($(e.target).text(), 10)));                                  // 1135\n                    actions.showPicker.call(picker);                                                                   // 1136\n                },                                                                                                     // 1137\n                                                                                                                       // 1138\n                selectSecond: function (e) {                                                                           // 1139\n                    setValue(date.clone().seconds(parseInt($(e.target).text(), 10)));                                  // 1140\n                    actions.showPicker.call(picker);                                                                   // 1141\n                },                                                                                                     // 1142\n                                                                                                                       // 1143\n                clear: clear,                                                                                          // 1144\n                                                                                                                       // 1145\n                today: function () {                                                                                   // 1146\n                    var todaysDate = getMoment();                                                                      // 1147\n                    if (isValid(todaysDate, 'd')) {                                                                    // 1148\n                        setValue(todaysDate);                                                                          // 1149\n                    }                                                                                                  // 1150\n                },                                                                                                     // 1151\n                                                                                                                       // 1152\n                close: hide                                                                                            // 1153\n            },                                                                                                         // 1154\n                                                                                                                       // 1155\n            doAction = function (e) {                                                                                  // 1156\n                if ($(e.currentTarget).is('.disabled')) {                                                              // 1157\n                    return false;                                                                                      // 1158\n                }                                                                                                      // 1159\n                actions[$(e.currentTarget).data('action')].apply(picker, arguments);                                   // 1160\n                return false;                                                                                          // 1161\n            },                                                                                                         // 1162\n                                                                                                                       // 1163\n            show = function () {                                                                                       // 1164\n                ///<summary>Shows the widget. Possibly will emit dp.show and dp.change</summary>                       // 1165\n                var currentMoment,                                                                                     // 1166\n                    useCurrentGranularity = {                                                                          // 1167\n                        'year': function (m) {                                                                         // 1168\n                            return m.month(0).date(1).hours(0).seconds(0).minutes(0);                                  // 1169\n                        },                                                                                             // 1170\n                        'month': function (m) {                                                                        // 1171\n                            return m.date(1).hours(0).seconds(0).minutes(0);                                           // 1172\n                        },                                                                                             // 1173\n                        'day': function (m) {                                                                          // 1174\n                            return m.hours(0).seconds(0).minutes(0);                                                   // 1175\n                        },                                                                                             // 1176\n                        'hour': function (m) {                                                                         // 1177\n                            return m.seconds(0).minutes(0);                                                            // 1178\n                        },                                                                                             // 1179\n                        'minute': function (m) {                                                                       // 1180\n                            return m.seconds(0);                                                                       // 1181\n                        }                                                                                              // 1182\n                    };                                                                                                 // 1183\n                                                                                                                       // 1184\n                if (input.prop('disabled') || (!options.ignoreReadonly && input.prop('readonly')) || widget) {         // 1185\n                    return picker;                                                                                     // 1186\n                }                                                                                                      // 1187\n                if (input.val() !== undefined && input.val().trim().length !== 0) {                                    // 1188\n                    setValue(parseInputDate(input.val().trim()));                                                      // 1189\n                } else if (options.useCurrent && unset && ((input.is('input') && input.val().trim().length === 0) || options.inline)) {\n                    currentMoment = getMoment();                                                                       // 1191\n                    if (typeof options.useCurrent === 'string') {                                                      // 1192\n                        currentMoment = useCurrentGranularity[options.useCurrent](currentMoment);                      // 1193\n                    }                                                                                                  // 1194\n                    setValue(currentMoment);                                                                           // 1195\n                }                                                                                                      // 1196\n                                                                                                                       // 1197\n                widget = getTemplate();                                                                                // 1198\n                                                                                                                       // 1199\n                fillDow();                                                                                             // 1200\n                fillMonths();                                                                                          // 1201\n                                                                                                                       // 1202\n                widget.find('.timepicker-hours').hide();                                                               // 1203\n                widget.find('.timepicker-minutes').hide();                                                             // 1204\n                widget.find('.timepicker-seconds').hide();                                                             // 1205\n                                                                                                                       // 1206\n                update();                                                                                              // 1207\n                showMode();                                                                                            // 1208\n                                                                                                                       // 1209\n                $(window).on('resize', place);                                                                         // 1210\n                widget.on('click', '[data-action]', doAction); // this handles clicks on the widget                    // 1211\n                widget.on('mousedown', false);                                                                         // 1212\n                                                                                                                       // 1213\n                if (component && component.hasClass('btn')) {                                                          // 1214\n                    component.toggleClass('active');                                                                   // 1215\n                }                                                                                                      // 1216\n                widget.show();                                                                                         // 1217\n                place();                                                                                               // 1218\n                                                                                                                       // 1219\n                if (options.focusOnShow && !input.is(':focus')) {                                                      // 1220\n                    input.focus();                                                                                     // 1221\n                }                                                                                                      // 1222\n                                                                                                                       // 1223\n                notifyEvent({                                                                                          // 1224\n                    type: 'dp.show'                                                                                    // 1225\n                });                                                                                                    // 1226\n                return picker;                                                                                         // 1227\n            },                                                                                                         // 1228\n                                                                                                                       // 1229\n            toggle = function () {                                                                                     // 1230\n                /// <summary>Shows or hides the widget</summary>                                                       // 1231\n                return (widget ? hide() : show());                                                                     // 1232\n            },                                                                                                         // 1233\n                                                                                                                       // 1234\n            parseInputDate = function (inputDate) {                                                                    // 1235\n                if (options.parseInputDate === undefined) {                                                            // 1236\n                    if (moment.isMoment(inputDate) || inputDate instanceof Date) {                                     // 1237\n                        inputDate = moment(inputDate);                                                                 // 1238\n                    } else {                                                                                           // 1239\n                        inputDate = getMoment(inputDate);                                                              // 1240\n                    }                                                                                                  // 1241\n                } else {                                                                                               // 1242\n                    inputDate = options.parseInputDate(inputDate);                                                     // 1243\n                }                                                                                                      // 1244\n                inputDate.locale(options.locale);                                                                      // 1245\n                return inputDate;                                                                                      // 1246\n            },                                                                                                         // 1247\n                                                                                                                       // 1248\n            keydown = function (e) {                                                                                   // 1249\n                var handler = null,                                                                                    // 1250\n                    index,                                                                                             // 1251\n                    index2,                                                                                            // 1252\n                    pressedKeys = [],                                                                                  // 1253\n                    pressedModifiers = {},                                                                             // 1254\n                    currentKey = e.which,                                                                              // 1255\n                    keyBindKeys,                                                                                       // 1256\n                    allModifiersPressed,                                                                               // 1257\n                    pressed = 'p';                                                                                     // 1258\n                                                                                                                       // 1259\n                keyState[currentKey] = pressed;                                                                        // 1260\n                                                                                                                       // 1261\n                for (index in keyState) {                                                                              // 1262\n                    if (keyState.hasOwnProperty(index) && keyState[index] === pressed) {                               // 1263\n                        pressedKeys.push(index);                                                                       // 1264\n                        if (parseInt(index, 10) !== currentKey) {                                                      // 1265\n                            pressedModifiers[index] = true;                                                            // 1266\n                        }                                                                                              // 1267\n                    }                                                                                                  // 1268\n                }                                                                                                      // 1269\n                                                                                                                       // 1270\n                for (index in options.keyBinds) {                                                                      // 1271\n                    if (options.keyBinds.hasOwnProperty(index) && typeof (options.keyBinds[index]) === 'function') {   // 1272\n                        keyBindKeys = index.split(' ');                                                                // 1273\n                        if (keyBindKeys.length === pressedKeys.length && keyMap[currentKey] === keyBindKeys[keyBindKeys.length - 1]) {\n                            allModifiersPressed = true;                                                                // 1275\n                            for (index2 = keyBindKeys.length - 2; index2 >= 0; index2--) {                             // 1276\n                                if (!(keyMap[keyBindKeys[index2]] in pressedModifiers)) {                              // 1277\n                                    allModifiersPressed = false;                                                       // 1278\n                                    break;                                                                             // 1279\n                                }                                                                                      // 1280\n                            }                                                                                          // 1281\n                            if (allModifiersPressed) {                                                                 // 1282\n                                handler = options.keyBinds[index];                                                     // 1283\n                                break;                                                                                 // 1284\n                            }                                                                                          // 1285\n                        }                                                                                              // 1286\n                    }                                                                                                  // 1287\n                }                                                                                                      // 1288\n                                                                                                                       // 1289\n                if (handler) {                                                                                         // 1290\n                    handler.call(picker, widget);                                                                      // 1291\n                    e.stopPropagation();                                                                               // 1292\n                    e.preventDefault();                                                                                // 1293\n                }                                                                                                      // 1294\n            },                                                                                                         // 1295\n                                                                                                                       // 1296\n            keyup = function (e) {                                                                                     // 1297\n                keyState[e.which] = 'r';                                                                               // 1298\n                e.stopPropagation();                                                                                   // 1299\n                e.preventDefault();                                                                                    // 1300\n            },                                                                                                         // 1301\n                                                                                                                       // 1302\n            change = function (e) {                                                                                    // 1303\n                var val = $(e.target).val().trim(),                                                                    // 1304\n                    parsedDate = val ? parseInputDate(val) : null;                                                     // 1305\n                setValue(parsedDate);                                                                                  // 1306\n                e.stopImmediatePropagation();                                                                          // 1307\n                return false;                                                                                          // 1308\n            },                                                                                                         // 1309\n                                                                                                                       // 1310\n            attachDatePickerElementEvents = function () {                                                              // 1311\n                input.on({                                                                                             // 1312\n                    'change': change,                                                                                  // 1313\n                    'blur': options.debug ? '' : hide,                                                                 // 1314\n                    'keydown': keydown,                                                                                // 1315\n                    'keyup': keyup,                                                                                    // 1316\n                    'focus': options.allowInputToggle ? show : ''                                                      // 1317\n                });                                                                                                    // 1318\n                                                                                                                       // 1319\n                if (element.is('input')) {                                                                             // 1320\n                    input.on({                                                                                         // 1321\n                        'focus': show                                                                                  // 1322\n                    });                                                                                                // 1323\n                } else if (component) {                                                                                // 1324\n                    component.on('click', toggle);                                                                     // 1325\n                    component.on('mousedown', false);                                                                  // 1326\n                }                                                                                                      // 1327\n            },                                                                                                         // 1328\n                                                                                                                       // 1329\n            detachDatePickerElementEvents = function () {                                                              // 1330\n                input.off({                                                                                            // 1331\n                    'change': change,                                                                                  // 1332\n                    'blur': blur,                                                                                      // 1333\n                    'keydown': keydown,                                                                                // 1334\n                    'keyup': keyup,                                                                                    // 1335\n                    'focus': options.allowInputToggle ? hide : ''                                                      // 1336\n                });                                                                                                    // 1337\n                                                                                                                       // 1338\n                if (element.is('input')) {                                                                             // 1339\n                    input.off({                                                                                        // 1340\n                        'focus': show                                                                                  // 1341\n                    });                                                                                                // 1342\n                } else if (component) {                                                                                // 1343\n                    component.off('click', toggle);                                                                    // 1344\n                    component.off('mousedown', false);                                                                 // 1345\n                }                                                                                                      // 1346\n            },                                                                                                         // 1347\n                                                                                                                       // 1348\n            indexGivenDates = function (givenDatesArray) {                                                             // 1349\n                // Store given enabledDates and disabledDates as keys.                                                 // 1350\n                // This way we can check their existence in O(1) time instead of looping through whole array.          // 1351\n                // (for example: options.enabledDates['2014-02-27'] === true)                                          // 1352\n                var givenDatesIndexed = {};                                                                            // 1353\n                $.each(givenDatesArray, function () {                                                                  // 1354\n                    var dDate = parseInputDate(this);                                                                  // 1355\n                    if (dDate.isValid()) {                                                                             // 1356\n                        givenDatesIndexed[dDate.format('YYYY-MM-DD')] = true;                                          // 1357\n                    }                                                                                                  // 1358\n                });                                                                                                    // 1359\n                return (Object.keys(givenDatesIndexed).length) ? givenDatesIndexed : false;                            // 1360\n            },                                                                                                         // 1361\n                                                                                                                       // 1362\n            indexGivenHours = function (givenHoursArray) {                                                             // 1363\n                // Store given enabledHours and disabledHours as keys.                                                 // 1364\n                // This way we can check their existence in O(1) time instead of looping through whole array.          // 1365\n                // (for example: options.enabledHours['2014-02-27'] === true)                                          // 1366\n                var givenHoursIndexed = {};                                                                            // 1367\n                $.each(givenHoursArray, function () {                                                                  // 1368\n                    givenHoursIndexed[this] = true;                                                                    // 1369\n                });                                                                                                    // 1370\n                return (Object.keys(givenHoursIndexed).length) ? givenHoursIndexed : false;                            // 1371\n            },                                                                                                         // 1372\n                                                                                                                       // 1373\n            initFormatting = function () {                                                                             // 1374\n                var format = options.format || 'L LT';                                                                 // 1375\n                                                                                                                       // 1376\n                actualFormat = format.replace(/(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g, function (formatInput) {   // 1377\n                    var newinput = date.localeData().longDateFormat(formatInput) || formatInput;                       // 1378\n                    return newinput.replace(/(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g, function (formatInput2) { //temp fix for #740\n                        return date.localeData().longDateFormat(formatInput2) || formatInput2;                         // 1380\n                    });                                                                                                // 1381\n                });                                                                                                    // 1382\n                                                                                                                       // 1383\n                                                                                                                       // 1384\n                parseFormats = options.extraFormats ? options.extraFormats.slice() : [];                               // 1385\n                if (parseFormats.indexOf(format) < 0 && parseFormats.indexOf(actualFormat) < 0) {                      // 1386\n                    parseFormats.push(actualFormat);                                                                   // 1387\n                }                                                                                                      // 1388\n                                                                                                                       // 1389\n                use24Hours = (actualFormat.toLowerCase().indexOf('a') < 1 && actualFormat.replace(/\\[.*?\\]/g, '').indexOf('h') < 1);\n                                                                                                                       // 1391\n                if (isEnabled('y')) {                                                                                  // 1392\n                    minViewModeNumber = 2;                                                                             // 1393\n                }                                                                                                      // 1394\n                if (isEnabled('M')) {                                                                                  // 1395\n                    minViewModeNumber = 1;                                                                             // 1396\n                }                                                                                                      // 1397\n                if (isEnabled('d')) {                                                                                  // 1398\n                    minViewModeNumber = 0;                                                                             // 1399\n                }                                                                                                      // 1400\n                                                                                                                       // 1401\n                currentViewMode = Math.max(minViewModeNumber, currentViewMode);                                        // 1402\n                                                                                                                       // 1403\n                if (!unset) {                                                                                          // 1404\n                    setValue(date);                                                                                    // 1405\n                }                                                                                                      // 1406\n            };                                                                                                         // 1407\n                                                                                                                       // 1408\n        /********************************************************************************                              // 1409\n         *                                                                                                             // 1410\n         * Public API functions                                                                                        // 1411\n         * =====================                                                                                       // 1412\n         *                                                                                                             // 1413\n         * Important: Do not expose direct references to private objects or the options                                // 1414\n         * object to the outer world. Always return a clone when returning values or make                              // 1415\n         * a clone when setting a private variable.                                                                    // 1416\n         *                                                                                                             // 1417\n         ********************************************************************************/                             // 1418\n        picker.destroy = function () {                                                                                 // 1419\n            ///<summary>Destroys the widget and removes all attached event listeners</summary>                         // 1420\n            hide();                                                                                                    // 1421\n            detachDatePickerElementEvents();                                                                           // 1422\n            element.removeData('DateTimePicker');                                                                      // 1423\n            element.removeData('date');                                                                                // 1424\n        };                                                                                                             // 1425\n                                                                                                                       // 1426\n        picker.toggle = toggle;                                                                                        // 1427\n                                                                                                                       // 1428\n        picker.show = show;                                                                                            // 1429\n                                                                                                                       // 1430\n        picker.hide = hide;                                                                                            // 1431\n                                                                                                                       // 1432\n        picker.disable = function () {                                                                                 // 1433\n            ///<summary>Disables the input element, the component is attached to, by adding a disabled=\"true\" attribute to it.\n            ///If the widget was visible before that call it is hidden. Possibly emits dp.hide</summary>               // 1435\n            hide();                                                                                                    // 1436\n            if (component && component.hasClass('btn')) {                                                              // 1437\n                component.addClass('disabled');                                                                        // 1438\n            }                                                                                                          // 1439\n            input.prop('disabled', true);                                                                              // 1440\n            return picker;                                                                                             // 1441\n        };                                                                                                             // 1442\n                                                                                                                       // 1443\n        picker.enable = function () {                                                                                  // 1444\n            ///<summary>Enables the input element, the component is attached to, by removing disabled attribute from it.</summary>\n            if (component && component.hasClass('btn')) {                                                              // 1446\n                component.removeClass('disabled');                                                                     // 1447\n            }                                                                                                          // 1448\n            input.prop('disabled', false);                                                                             // 1449\n            return picker;                                                                                             // 1450\n        };                                                                                                             // 1451\n                                                                                                                       // 1452\n        picker.ignoreReadonly = function (ignoreReadonly) {                                                            // 1453\n            if (arguments.length === 0) {                                                                              // 1454\n                return options.ignoreReadonly;                                                                         // 1455\n            }                                                                                                          // 1456\n            if (typeof ignoreReadonly !== 'boolean') {                                                                 // 1457\n                throw new TypeError('ignoreReadonly () expects a boolean parameter');                                  // 1458\n            }                                                                                                          // 1459\n            options.ignoreReadonly = ignoreReadonly;                                                                   // 1460\n            return picker;                                                                                             // 1461\n        };                                                                                                             // 1462\n                                                                                                                       // 1463\n        picker.options = function (newOptions) {                                                                       // 1464\n            if (arguments.length === 0) {                                                                              // 1465\n                return $.extend(true, {}, options);                                                                    // 1466\n            }                                                                                                          // 1467\n                                                                                                                       // 1468\n            if (!(newOptions instanceof Object)) {                                                                     // 1469\n                throw new TypeError('options() options parameter should be an object');                                // 1470\n            }                                                                                                          // 1471\n            $.extend(true, options, newOptions);                                                                       // 1472\n            $.each(options, function (key, value) {                                                                    // 1473\n                if (picker[key] !== undefined) {                                                                       // 1474\n                    picker[key](value);                                                                                // 1475\n                } else {                                                                                               // 1476\n                    throw new TypeError('option ' + key + ' is not recognized!');                                      // 1477\n                }                                                                                                      // 1478\n            });                                                                                                        // 1479\n            return picker;                                                                                             // 1480\n        };                                                                                                             // 1481\n                                                                                                                       // 1482\n        picker.date = function (newDate) {                                                                             // 1483\n            ///<signature helpKeyword=\"$.fn.datetimepicker.date\">                                                      // 1484\n            ///<summary>Returns the component's model current date, a moment object or null if not set.</summary>      // 1485\n            ///<returns type=\"Moment\">date.clone()</returns>                                                           // 1486\n            ///</signature>                                                                                            // 1487\n            ///<signature>                                                                                             // 1488\n            ///<summary>Sets the components model current moment to it. Passing a null value unsets the components model current moment. Parsing of the newDate parameter is made using moment library with the options.format and options.useStrict components configuration.</summary>\n            ///<param name=\"newDate\" locid=\"$.fn.datetimepicker.date_p:newDate\">Takes string, Date, moment, null parameter.</param>\n            ///</signature>                                                                                            // 1491\n            if (arguments.length === 0) {                                                                              // 1492\n                if (unset) {                                                                                           // 1493\n                    return null;                                                                                       // 1494\n                }                                                                                                      // 1495\n                return date.clone();                                                                                   // 1496\n            }                                                                                                          // 1497\n                                                                                                                       // 1498\n            if (newDate !== null && typeof newDate !== 'string' && !moment.isMoment(newDate) && !(newDate instanceof Date)) {\n                throw new TypeError('date() parameter must be one of [null, string, moment or Date]');                 // 1500\n            }                                                                                                          // 1501\n                                                                                                                       // 1502\n            setValue(newDate === null ? null : parseInputDate(newDate));                                               // 1503\n            return picker;                                                                                             // 1504\n        };                                                                                                             // 1505\n                                                                                                                       // 1506\n        picker.format = function (newFormat) {                                                                         // 1507\n            ///<summary>test su</summary>                                                                              // 1508\n            ///<param name=\"newFormat\">info about para</param>                                                         // 1509\n            ///<returns type=\"string|boolean\">returns foo</returns>                                                    // 1510\n            if (arguments.length === 0) {                                                                              // 1511\n                return options.format;                                                                                 // 1512\n            }                                                                                                          // 1513\n                                                                                                                       // 1514\n            if ((typeof newFormat !== 'string') && ((typeof newFormat !== 'boolean') || (newFormat !== false))) {      // 1515\n                throw new TypeError('format() expects a sting or boolean:false parameter ' + newFormat);               // 1516\n            }                                                                                                          // 1517\n                                                                                                                       // 1518\n            options.format = newFormat;                                                                                // 1519\n            if (actualFormat) {                                                                                        // 1520\n                initFormatting(); // reinit formatting                                                                 // 1521\n            }                                                                                                          // 1522\n            return picker;                                                                                             // 1523\n        };                                                                                                             // 1524\n                                                                                                                       // 1525\n        picker.timeZone = function (newZone) {                                                                         // 1526\n            if (arguments.length === 0) {                                                                              // 1527\n                return options.timeZone;                                                                               // 1528\n            }                                                                                                          // 1529\n                                                                                                                       // 1530\n            options.timeZone = newZone;                                                                                // 1531\n                                                                                                                       // 1532\n            return picker;                                                                                             // 1533\n        };                                                                                                             // 1534\n                                                                                                                       // 1535\n        picker.dayViewHeaderFormat = function (newFormat) {                                                            // 1536\n            if (arguments.length === 0) {                                                                              // 1537\n                return options.dayViewHeaderFormat;                                                                    // 1538\n            }                                                                                                          // 1539\n                                                                                                                       // 1540\n            if (typeof newFormat !== 'string') {                                                                       // 1541\n                throw new TypeError('dayViewHeaderFormat() expects a string parameter');                               // 1542\n            }                                                                                                          // 1543\n                                                                                                                       // 1544\n            options.dayViewHeaderFormat = newFormat;                                                                   // 1545\n            return picker;                                                                                             // 1546\n        };                                                                                                             // 1547\n                                                                                                                       // 1548\n        picker.extraFormats = function (formats) {                                                                     // 1549\n            if (arguments.length === 0) {                                                                              // 1550\n                return options.extraFormats;                                                                           // 1551\n            }                                                                                                          // 1552\n                                                                                                                       // 1553\n            if (formats !== false && !(formats instanceof Array)) {                                                    // 1554\n                throw new TypeError('extraFormats() expects an array or false parameter');                             // 1555\n            }                                                                                                          // 1556\n                                                                                                                       // 1557\n            options.extraFormats = formats;                                                                            // 1558\n            if (parseFormats) {                                                                                        // 1559\n                initFormatting(); // reinit formatting                                                                 // 1560\n            }                                                                                                          // 1561\n            return picker;                                                                                             // 1562\n        };                                                                                                             // 1563\n                                                                                                                       // 1564\n        picker.disabledDates = function (dates) {                                                                      // 1565\n            ///<signature helpKeyword=\"$.fn.datetimepicker.disabledDates\">                                             // 1566\n            ///<summary>Returns an array with the currently set disabled dates on the component.</summary>             // 1567\n            ///<returns type=\"array\">options.disabledDates</returns>                                                   // 1568\n            ///</signature>                                                                                            // 1569\n            ///<signature>                                                                                             // 1570\n            ///<summary>Setting this takes precedence over options.minDate, options.maxDate configuration. Also calling this function removes the configuration of\n            ///options.enabledDates if such exist.</summary>                                                           // 1572\n            ///<param name=\"dates\" locid=\"$.fn.datetimepicker.disabledDates_p:dates\">Takes an [ string or Date or moment ] of values and allows the user to select only from those days.</param>\n            ///</signature>                                                                                            // 1574\n            if (arguments.length === 0) {                                                                              // 1575\n                return (options.disabledDates ? $.extend({}, options.disabledDates) : options.disabledDates);          // 1576\n            }                                                                                                          // 1577\n                                                                                                                       // 1578\n            if (!dates) {                                                                                              // 1579\n                options.disabledDates = false;                                                                         // 1580\n                update();                                                                                              // 1581\n                return picker;                                                                                         // 1582\n            }                                                                                                          // 1583\n            if (!(dates instanceof Array)) {                                                                           // 1584\n                throw new TypeError('disabledDates() expects an array parameter');                                     // 1585\n            }                                                                                                          // 1586\n            options.disabledDates = indexGivenDates(dates);                                                            // 1587\n            options.enabledDates = false;                                                                              // 1588\n            update();                                                                                                  // 1589\n            return picker;                                                                                             // 1590\n        };                                                                                                             // 1591\n                                                                                                                       // 1592\n        picker.enabledDates = function (dates) {                                                                       // 1593\n            ///<signature helpKeyword=\"$.fn.datetimepicker.enabledDates\">                                              // 1594\n            ///<summary>Returns an array with the currently set enabled dates on the component.</summary>              // 1595\n            ///<returns type=\"array\">options.enabledDates</returns>                                                    // 1596\n            ///</signature>                                                                                            // 1597\n            ///<signature>                                                                                             // 1598\n            ///<summary>Setting this takes precedence over options.minDate, options.maxDate configuration. Also calling this function removes the configuration of options.disabledDates if such exist.</summary>\n            ///<param name=\"dates\" locid=\"$.fn.datetimepicker.enabledDates_p:dates\">Takes an [ string or Date or moment ] of values and allows the user to select only from those days.</param>\n            ///</signature>                                                                                            // 1601\n            if (arguments.length === 0) {                                                                              // 1602\n                return (options.enabledDates ? $.extend({}, options.enabledDates) : options.enabledDates);             // 1603\n            }                                                                                                          // 1604\n                                                                                                                       // 1605\n            if (!dates) {                                                                                              // 1606\n                options.enabledDates = false;                                                                          // 1607\n                update();                                                                                              // 1608\n                return picker;                                                                                         // 1609\n            }                                                                                                          // 1610\n            if (!(dates instanceof Array)) {                                                                           // 1611\n                throw new TypeError('enabledDates() expects an array parameter');                                      // 1612\n            }                                                                                                          // 1613\n            options.enabledDates = indexGivenDates(dates);                                                             // 1614\n            options.disabledDates = false;                                                                             // 1615\n            update();                                                                                                  // 1616\n            return picker;                                                                                             // 1617\n        };                                                                                                             // 1618\n                                                                                                                       // 1619\n        picker.daysOfWeekDisabled = function (daysOfWeekDisabled) {                                                    // 1620\n            if (arguments.length === 0) {                                                                              // 1621\n                return options.daysOfWeekDisabled.splice(0);                                                           // 1622\n            }                                                                                                          // 1623\n                                                                                                                       // 1624\n            if ((typeof daysOfWeekDisabled === 'boolean') && !daysOfWeekDisabled) {                                    // 1625\n                options.daysOfWeekDisabled = false;                                                                    // 1626\n                update();                                                                                              // 1627\n                return picker;                                                                                         // 1628\n            }                                                                                                          // 1629\n                                                                                                                       // 1630\n            if (!(daysOfWeekDisabled instanceof Array)) {                                                              // 1631\n                throw new TypeError('daysOfWeekDisabled() expects an array parameter');                                // 1632\n            }                                                                                                          // 1633\n            options.daysOfWeekDisabled = daysOfWeekDisabled.reduce(function (previousValue, currentValue) {            // 1634\n                currentValue = parseInt(currentValue, 10);                                                             // 1635\n                if (currentValue > 6 || currentValue < 0 || isNaN(currentValue)) {                                     // 1636\n                    return previousValue;                                                                              // 1637\n                }                                                                                                      // 1638\n                if (previousValue.indexOf(currentValue) === -1) {                                                      // 1639\n                    previousValue.push(currentValue);                                                                  // 1640\n                }                                                                                                      // 1641\n                return previousValue;                                                                                  // 1642\n            }, []).sort();                                                                                             // 1643\n            if (options.useCurrent && !options.keepInvalid) {                                                          // 1644\n                var tries = 0;                                                                                         // 1645\n                while (!isValid(date, 'd')) {                                                                          // 1646\n                    date.add(1, 'd');                                                                                  // 1647\n                    if (tries === 7) {                                                                                 // 1648\n                        throw 'Tried 7 times to find a valid date';                                                    // 1649\n                    }                                                                                                  // 1650\n                    tries++;                                                                                           // 1651\n                }                                                                                                      // 1652\n                setValue(date);                                                                                        // 1653\n            }                                                                                                          // 1654\n            update();                                                                                                  // 1655\n            return picker;                                                                                             // 1656\n        };                                                                                                             // 1657\n                                                                                                                       // 1658\n        picker.maxDate = function (maxDate) {                                                                          // 1659\n            if (arguments.length === 0) {                                                                              // 1660\n                return options.maxDate ? options.maxDate.clone() : options.maxDate;                                    // 1661\n            }                                                                                                          // 1662\n                                                                                                                       // 1663\n            if ((typeof maxDate === 'boolean') && maxDate === false) {                                                 // 1664\n                options.maxDate = false;                                                                               // 1665\n                update();                                                                                              // 1666\n                return picker;                                                                                         // 1667\n            }                                                                                                          // 1668\n                                                                                                                       // 1669\n            if (typeof maxDate === 'string') {                                                                         // 1670\n                if (maxDate === 'now' || maxDate === 'moment') {                                                       // 1671\n                    maxDate = getMoment();                                                                             // 1672\n                }                                                                                                      // 1673\n            }                                                                                                          // 1674\n                                                                                                                       // 1675\n            var parsedDate = parseInputDate(maxDate);                                                                  // 1676\n                                                                                                                       // 1677\n            if (!parsedDate.isValid()) {                                                                               // 1678\n                throw new TypeError('maxDate() Could not parse date parameter: ' + maxDate);                           // 1679\n            }                                                                                                          // 1680\n            if (options.minDate && parsedDate.isBefore(options.minDate)) {                                             // 1681\n                throw new TypeError('maxDate() date parameter is before options.minDate: ' + parsedDate.format(actualFormat));\n            }                                                                                                          // 1683\n            options.maxDate = parsedDate;                                                                              // 1684\n            if (options.useCurrent && !options.keepInvalid && date.isAfter(maxDate)) {                                 // 1685\n                setValue(options.maxDate);                                                                             // 1686\n            }                                                                                                          // 1687\n            if (viewDate.isAfter(parsedDate)) {                                                                        // 1688\n                viewDate = parsedDate.clone().subtract(options.stepping, 'm');                                         // 1689\n            }                                                                                                          // 1690\n            update();                                                                                                  // 1691\n            return picker;                                                                                             // 1692\n        };                                                                                                             // 1693\n                                                                                                                       // 1694\n        picker.minDate = function (minDate) {                                                                          // 1695\n            if (arguments.length === 0) {                                                                              // 1696\n                return options.minDate ? options.minDate.clone() : options.minDate;                                    // 1697\n            }                                                                                                          // 1698\n                                                                                                                       // 1699\n            if ((typeof minDate === 'boolean') && minDate === false) {                                                 // 1700\n                options.minDate = false;                                                                               // 1701\n                update();                                                                                              // 1702\n                return picker;                                                                                         // 1703\n            }                                                                                                          // 1704\n                                                                                                                       // 1705\n            if (typeof minDate === 'string') {                                                                         // 1706\n                if (minDate === 'now' || minDate === 'moment') {                                                       // 1707\n                    minDate = getMoment();                                                                             // 1708\n                }                                                                                                      // 1709\n            }                                                                                                          // 1710\n                                                                                                                       // 1711\n            var parsedDate = parseInputDate(minDate);                                                                  // 1712\n                                                                                                                       // 1713\n            if (!parsedDate.isValid()) {                                                                               // 1714\n                throw new TypeError('minDate() Could not parse date parameter: ' + minDate);                           // 1715\n            }                                                                                                          // 1716\n            if (options.maxDate && parsedDate.isAfter(options.maxDate)) {                                              // 1717\n                throw new TypeError('minDate() date parameter is after options.maxDate: ' + parsedDate.format(actualFormat));\n            }                                                                                                          // 1719\n            options.minDate = parsedDate;                                                                              // 1720\n            if (options.useCurrent && !options.keepInvalid && date.isBefore(minDate)) {                                // 1721\n                setValue(options.minDate);                                                                             // 1722\n            }                                                                                                          // 1723\n            if (viewDate.isBefore(parsedDate)) {                                                                       // 1724\n                viewDate = parsedDate.clone().add(options.stepping, 'm');                                              // 1725\n            }                                                                                                          // 1726\n            update();                                                                                                  // 1727\n            return picker;                                                                                             // 1728\n        };                                                                                                             // 1729\n                                                                                                                       // 1730\n        picker.defaultDate = function (defaultDate) {                                                                  // 1731\n            ///<signature helpKeyword=\"$.fn.datetimepicker.defaultDate\">                                               // 1732\n            ///<summary>Returns a moment with the options.defaultDate option configuration or false if not set</summary>\n            ///<returns type=\"Moment\">date.clone()</returns>                                                           // 1734\n            ///</signature>                                                                                            // 1735\n            ///<signature>                                                                                             // 1736\n            ///<summary>Will set the picker's inital date. If a boolean:false value is passed the options.defaultDate parameter is cleared.</summary>\n            ///<param name=\"defaultDate\" locid=\"$.fn.datetimepicker.defaultDate_p:defaultDate\">Takes a string, Date, moment, boolean:false</param>\n            ///</signature>                                                                                            // 1739\n            if (arguments.length === 0) {                                                                              // 1740\n                return options.defaultDate ? options.defaultDate.clone() : options.defaultDate;                        // 1741\n            }                                                                                                          // 1742\n            if (!defaultDate) {                                                                                        // 1743\n                options.defaultDate = false;                                                                           // 1744\n                return picker;                                                                                         // 1745\n            }                                                                                                          // 1746\n                                                                                                                       // 1747\n            if (typeof defaultDate === 'string') {                                                                     // 1748\n                if (defaultDate === 'now' || defaultDate === 'moment') {                                               // 1749\n                    defaultDate = getMoment();                                                                         // 1750\n                }                                                                                                      // 1751\n            }                                                                                                          // 1752\n                                                                                                                       // 1753\n            var parsedDate = parseInputDate(defaultDate);                                                              // 1754\n            if (!parsedDate.isValid()) {                                                                               // 1755\n                throw new TypeError('defaultDate() Could not parse date parameter: ' + defaultDate);                   // 1756\n            }                                                                                                          // 1757\n            if (!isValid(parsedDate)) {                                                                                // 1758\n                throw new TypeError('defaultDate() date passed is invalid according to component setup validations');  // 1759\n            }                                                                                                          // 1760\n                                                                                                                       // 1761\n            options.defaultDate = parsedDate;                                                                          // 1762\n                                                                                                                       // 1763\n            if ((options.defaultDate && options.inline) || input.val().trim() === '') {                                // 1764\n                setValue(options.defaultDate);                                                                         // 1765\n            }                                                                                                          // 1766\n            return picker;                                                                                             // 1767\n        };                                                                                                             // 1768\n                                                                                                                       // 1769\n        picker.locale = function (locale) {                                                                            // 1770\n            if (arguments.length === 0) {                                                                              // 1771\n                return options.locale;                                                                                 // 1772\n            }                                                                                                          // 1773\n                                                                                                                       // 1774\n            if (!moment.localeData(locale)) {                                                                          // 1775\n                throw new TypeError('locale() locale ' + locale + ' is not loaded from moment locales!');              // 1776\n            }                                                                                                          // 1777\n                                                                                                                       // 1778\n            options.locale = locale;                                                                                   // 1779\n            date.locale(options.locale);                                                                               // 1780\n            viewDate.locale(options.locale);                                                                           // 1781\n                                                                                                                       // 1782\n            if (actualFormat) {                                                                                        // 1783\n                initFormatting(); // reinit formatting                                                                 // 1784\n            }                                                                                                          // 1785\n            if (widget) {                                                                                              // 1786\n                hide();                                                                                                // 1787\n                show();                                                                                                // 1788\n            }                                                                                                          // 1789\n            return picker;                                                                                             // 1790\n        };                                                                                                             // 1791\n                                                                                                                       // 1792\n        picker.stepping = function (stepping) {                                                                        // 1793\n            if (arguments.length === 0) {                                                                              // 1794\n                return options.stepping;                                                                               // 1795\n            }                                                                                                          // 1796\n                                                                                                                       // 1797\n            stepping = parseInt(stepping, 10);                                                                         // 1798\n            if (isNaN(stepping) || stepping < 1) {                                                                     // 1799\n                stepping = 1;                                                                                          // 1800\n            }                                                                                                          // 1801\n            options.stepping = stepping;                                                                               // 1802\n            return picker;                                                                                             // 1803\n        };                                                                                                             // 1804\n                                                                                                                       // 1805\n        picker.useCurrent = function (useCurrent) {                                                                    // 1806\n            var useCurrentOptions = ['year', 'month', 'day', 'hour', 'minute'];                                        // 1807\n            if (arguments.length === 0) {                                                                              // 1808\n                return options.useCurrent;                                                                             // 1809\n            }                                                                                                          // 1810\n                                                                                                                       // 1811\n            if ((typeof useCurrent !== 'boolean') && (typeof useCurrent !== 'string')) {                               // 1812\n                throw new TypeError('useCurrent() expects a boolean or string parameter');                             // 1813\n            }                                                                                                          // 1814\n            if (typeof useCurrent === 'string' && useCurrentOptions.indexOf(useCurrent.toLowerCase()) === -1) {        // 1815\n                throw new TypeError('useCurrent() expects a string parameter of ' + useCurrentOptions.join(', '));     // 1816\n            }                                                                                                          // 1817\n            options.useCurrent = useCurrent;                                                                           // 1818\n            return picker;                                                                                             // 1819\n        };                                                                                                             // 1820\n                                                                                                                       // 1821\n        picker.collapse = function (collapse) {                                                                        // 1822\n            if (arguments.length === 0) {                                                                              // 1823\n                return options.collapse;                                                                               // 1824\n            }                                                                                                          // 1825\n                                                                                                                       // 1826\n            if (typeof collapse !== 'boolean') {                                                                       // 1827\n                throw new TypeError('collapse() expects a boolean parameter');                                         // 1828\n            }                                                                                                          // 1829\n            if (options.collapse === collapse) {                                                                       // 1830\n                return picker;                                                                                         // 1831\n            }                                                                                                          // 1832\n            options.collapse = collapse;                                                                               // 1833\n            if (widget) {                                                                                              // 1834\n                hide();                                                                                                // 1835\n                show();                                                                                                // 1836\n            }                                                                                                          // 1837\n            return picker;                                                                                             // 1838\n        };                                                                                                             // 1839\n                                                                                                                       // 1840\n        picker.icons = function (icons) {                                                                              // 1841\n            if (arguments.length === 0) {                                                                              // 1842\n                return $.extend({}, options.icons);                                                                    // 1843\n            }                                                                                                          // 1844\n                                                                                                                       // 1845\n            if (!(icons instanceof Object)) {                                                                          // 1846\n                throw new TypeError('icons() expects parameter to be an Object');                                      // 1847\n            }                                                                                                          // 1848\n            $.extend(options.icons, icons);                                                                            // 1849\n            if (widget) {                                                                                              // 1850\n                hide();                                                                                                // 1851\n                show();                                                                                                // 1852\n            }                                                                                                          // 1853\n            return picker;                                                                                             // 1854\n        };                                                                                                             // 1855\n                                                                                                                       // 1856\n        picker.tooltips = function (tooltips) {                                                                        // 1857\n            if (arguments.length === 0) {                                                                              // 1858\n                return $.extend({}, options.tooltips);                                                                 // 1859\n            }                                                                                                          // 1860\n                                                                                                                       // 1861\n            if (!(tooltips instanceof Object)) {                                                                       // 1862\n                throw new TypeError('tooltips() expects parameter to be an Object');                                   // 1863\n            }                                                                                                          // 1864\n            $.extend(options.tooltips, tooltips);                                                                      // 1865\n            if (widget) {                                                                                              // 1866\n                hide();                                                                                                // 1867\n                show();                                                                                                // 1868\n            }                                                                                                          // 1869\n            return picker;                                                                                             // 1870\n        };                                                                                                             // 1871\n                                                                                                                       // 1872\n        picker.useStrict = function (useStrict) {                                                                      // 1873\n            if (arguments.length === 0) {                                                                              // 1874\n                return options.useStrict;                                                                              // 1875\n            }                                                                                                          // 1876\n                                                                                                                       // 1877\n            if (typeof useStrict !== 'boolean') {                                                                      // 1878\n                throw new TypeError('useStrict() expects a boolean parameter');                                        // 1879\n            }                                                                                                          // 1880\n            options.useStrict = useStrict;                                                                             // 1881\n            return picker;                                                                                             // 1882\n        };                                                                                                             // 1883\n                                                                                                                       // 1884\n        picker.sideBySide = function (sideBySide) {                                                                    // 1885\n            if (arguments.length === 0) {                                                                              // 1886\n                return options.sideBySide;                                                                             // 1887\n            }                                                                                                          // 1888\n                                                                                                                       // 1889\n            if (typeof sideBySide !== 'boolean') {                                                                     // 1890\n                throw new TypeError('sideBySide() expects a boolean parameter');                                       // 1891\n            }                                                                                                          // 1892\n            options.sideBySide = sideBySide;                                                                           // 1893\n            if (widget) {                                                                                              // 1894\n                hide();                                                                                                // 1895\n                show();                                                                                                // 1896\n            }                                                                                                          // 1897\n            return picker;                                                                                             // 1898\n        };                                                                                                             // 1899\n                                                                                                                       // 1900\n        picker.viewMode = function (viewMode) {                                                                        // 1901\n            if (arguments.length === 0) {                                                                              // 1902\n                return options.viewMode;                                                                               // 1903\n            }                                                                                                          // 1904\n                                                                                                                       // 1905\n            if (typeof viewMode !== 'string') {                                                                        // 1906\n                throw new TypeError('viewMode() expects a string parameter');                                          // 1907\n            }                                                                                                          // 1908\n                                                                                                                       // 1909\n            if (viewModes.indexOf(viewMode) === -1) {                                                                  // 1910\n                throw new TypeError('viewMode() parameter must be one of (' + viewModes.join(', ') + ') value');       // 1911\n            }                                                                                                          // 1912\n                                                                                                                       // 1913\n            options.viewMode = viewMode;                                                                               // 1914\n            currentViewMode = Math.max(viewModes.indexOf(viewMode), minViewModeNumber);                                // 1915\n                                                                                                                       // 1916\n            showMode();                                                                                                // 1917\n            return picker;                                                                                             // 1918\n        };                                                                                                             // 1919\n                                                                                                                       // 1920\n        picker.toolbarPlacement = function (toolbarPlacement) {                                                        // 1921\n            if (arguments.length === 0) {                                                                              // 1922\n                return options.toolbarPlacement;                                                                       // 1923\n            }                                                                                                          // 1924\n                                                                                                                       // 1925\n            if (typeof toolbarPlacement !== 'string') {                                                                // 1926\n                throw new TypeError('toolbarPlacement() expects a string parameter');                                  // 1927\n            }                                                                                                          // 1928\n            if (toolbarPlacements.indexOf(toolbarPlacement) === -1) {                                                  // 1929\n                throw new TypeError('toolbarPlacement() parameter must be one of (' + toolbarPlacements.join(', ') + ') value');\n            }                                                                                                          // 1931\n            options.toolbarPlacement = toolbarPlacement;                                                               // 1932\n                                                                                                                       // 1933\n            if (widget) {                                                                                              // 1934\n                hide();                                                                                                // 1935\n                show();                                                                                                // 1936\n            }                                                                                                          // 1937\n            return picker;                                                                                             // 1938\n        };                                                                                                             // 1939\n                                                                                                                       // 1940\n        picker.widgetPositioning = function (widgetPositioning) {                                                      // 1941\n            if (arguments.length === 0) {                                                                              // 1942\n                return $.extend({}, options.widgetPositioning);                                                        // 1943\n            }                                                                                                          // 1944\n                                                                                                                       // 1945\n            if (({}).toString.call(widgetPositioning) !== '[object Object]') {                                         // 1946\n                throw new TypeError('widgetPositioning() expects an object variable');                                 // 1947\n            }                                                                                                          // 1948\n            if (widgetPositioning.horizontal) {                                                                        // 1949\n                if (typeof widgetPositioning.horizontal !== 'string') {                                                // 1950\n                    throw new TypeError('widgetPositioning() horizontal variable must be a string');                   // 1951\n                }                                                                                                      // 1952\n                widgetPositioning.horizontal = widgetPositioning.horizontal.toLowerCase();                             // 1953\n                if (horizontalModes.indexOf(widgetPositioning.horizontal) === -1) {                                    // 1954\n                    throw new TypeError('widgetPositioning() expects horizontal parameter to be one of (' + horizontalModes.join(', ') + ')');\n                }                                                                                                      // 1956\n                options.widgetPositioning.horizontal = widgetPositioning.horizontal;                                   // 1957\n            }                                                                                                          // 1958\n            if (widgetPositioning.vertical) {                                                                          // 1959\n                if (typeof widgetPositioning.vertical !== 'string') {                                                  // 1960\n                    throw new TypeError('widgetPositioning() vertical variable must be a string');                     // 1961\n                }                                                                                                      // 1962\n                widgetPositioning.vertical = widgetPositioning.vertical.toLowerCase();                                 // 1963\n                if (verticalModes.indexOf(widgetPositioning.vertical) === -1) {                                        // 1964\n                    throw new TypeError('widgetPositioning() expects vertical parameter to be one of (' + verticalModes.join(', ') + ')');\n                }                                                                                                      // 1966\n                options.widgetPositioning.vertical = widgetPositioning.vertical;                                       // 1967\n            }                                                                                                          // 1968\n            update();                                                                                                  // 1969\n            return picker;                                                                                             // 1970\n        };                                                                                                             // 1971\n                                                                                                                       // 1972\n        picker.calendarWeeks = function (calendarWeeks) {                                                              // 1973\n            if (arguments.length === 0) {                                                                              // 1974\n                return options.calendarWeeks;                                                                          // 1975\n            }                                                                                                          // 1976\n                                                                                                                       // 1977\n            if (typeof calendarWeeks !== 'boolean') {                                                                  // 1978\n                throw new TypeError('calendarWeeks() expects parameter to be a boolean value');                        // 1979\n            }                                                                                                          // 1980\n                                                                                                                       // 1981\n            options.calendarWeeks = calendarWeeks;                                                                     // 1982\n            update();                                                                                                  // 1983\n            return picker;                                                                                             // 1984\n        };                                                                                                             // 1985\n                                                                                                                       // 1986\n        picker.showTodayButton = function (showTodayButton) {                                                          // 1987\n            if (arguments.length === 0) {                                                                              // 1988\n                return options.showTodayButton;                                                                        // 1989\n            }                                                                                                          // 1990\n                                                                                                                       // 1991\n            if (typeof showTodayButton !== 'boolean') {                                                                // 1992\n                throw new TypeError('showTodayButton() expects a boolean parameter');                                  // 1993\n            }                                                                                                          // 1994\n                                                                                                                       // 1995\n            options.showTodayButton = showTodayButton;                                                                 // 1996\n            if (widget) {                                                                                              // 1997\n                hide();                                                                                                // 1998\n                show();                                                                                                // 1999\n            }                                                                                                          // 2000\n            return picker;                                                                                             // 2001\n        };                                                                                                             // 2002\n                                                                                                                       // 2003\n        picker.showClear = function (showClear) {                                                                      // 2004\n            if (arguments.length === 0) {                                                                              // 2005\n                return options.showClear;                                                                              // 2006\n            }                                                                                                          // 2007\n                                                                                                                       // 2008\n            if (typeof showClear !== 'boolean') {                                                                      // 2009\n                throw new TypeError('showClear() expects a boolean parameter');                                        // 2010\n            }                                                                                                          // 2011\n                                                                                                                       // 2012\n            options.showClear = showClear;                                                                             // 2013\n            if (widget) {                                                                                              // 2014\n                hide();                                                                                                // 2015\n                show();                                                                                                // 2016\n            }                                                                                                          // 2017\n            return picker;                                                                                             // 2018\n        };                                                                                                             // 2019\n                                                                                                                       // 2020\n        picker.widgetParent = function (widgetParent) {                                                                // 2021\n            if (arguments.length === 0) {                                                                              // 2022\n                return options.widgetParent;                                                                           // 2023\n            }                                                                                                          // 2024\n                                                                                                                       // 2025\n            if (typeof widgetParent === 'string') {                                                                    // 2026\n                widgetParent = $(widgetParent);                                                                        // 2027\n            }                                                                                                          // 2028\n                                                                                                                       // 2029\n            if (widgetParent !== null && (typeof widgetParent !== 'string' && !(widgetParent instanceof $))) {         // 2030\n                throw new TypeError('widgetParent() expects a string or a jQuery object parameter');                   // 2031\n            }                                                                                                          // 2032\n                                                                                                                       // 2033\n            options.widgetParent = widgetParent;                                                                       // 2034\n            if (widget) {                                                                                              // 2035\n                hide();                                                                                                // 2036\n                show();                                                                                                // 2037\n            }                                                                                                          // 2038\n            return picker;                                                                                             // 2039\n        };                                                                                                             // 2040\n                                                                                                                       // 2041\n        picker.keepOpen = function (keepOpen) {                                                                        // 2042\n            if (arguments.length === 0) {                                                                              // 2043\n                return options.keepOpen;                                                                               // 2044\n            }                                                                                                          // 2045\n                                                                                                                       // 2046\n            if (typeof keepOpen !== 'boolean') {                                                                       // 2047\n                throw new TypeError('keepOpen() expects a boolean parameter');                                         // 2048\n            }                                                                                                          // 2049\n                                                                                                                       // 2050\n            options.keepOpen = keepOpen;                                                                               // 2051\n            return picker;                                                                                             // 2052\n        };                                                                                                             // 2053\n                                                                                                                       // 2054\n        picker.focusOnShow = function (focusOnShow) {                                                                  // 2055\n            if (arguments.length === 0) {                                                                              // 2056\n                return options.focusOnShow;                                                                            // 2057\n            }                                                                                                          // 2058\n                                                                                                                       // 2059\n            if (typeof focusOnShow !== 'boolean') {                                                                    // 2060\n                throw new TypeError('focusOnShow() expects a boolean parameter');                                      // 2061\n            }                                                                                                          // 2062\n                                                                                                                       // 2063\n            options.focusOnShow = focusOnShow;                                                                         // 2064\n            return picker;                                                                                             // 2065\n        };                                                                                                             // 2066\n                                                                                                                       // 2067\n        picker.inline = function (inline) {                                                                            // 2068\n            if (arguments.length === 0) {                                                                              // 2069\n                return options.inline;                                                                                 // 2070\n            }                                                                                                          // 2071\n                                                                                                                       // 2072\n            if (typeof inline !== 'boolean') {                                                                         // 2073\n                throw new TypeError('inline() expects a boolean parameter');                                           // 2074\n            }                                                                                                          // 2075\n                                                                                                                       // 2076\n            options.inline = inline;                                                                                   // 2077\n            return picker;                                                                                             // 2078\n        };                                                                                                             // 2079\n                                                                                                                       // 2080\n        picker.clear = function () {                                                                                   // 2081\n            clear();                                                                                                   // 2082\n            return picker;                                                                                             // 2083\n        };                                                                                                             // 2084\n                                                                                                                       // 2085\n        picker.keyBinds = function (keyBinds) {                                                                        // 2086\n            options.keyBinds = keyBinds;                                                                               // 2087\n            return picker;                                                                                             // 2088\n        };                                                                                                             // 2089\n                                                                                                                       // 2090\n        picker.getMoment = function (d) {                                                                              // 2091\n            return getMoment(d);                                                                                       // 2092\n        };                                                                                                             // 2093\n                                                                                                                       // 2094\n        picker.debug = function (debug) {                                                                              // 2095\n            if (typeof debug !== 'boolean') {                                                                          // 2096\n                throw new TypeError('debug() expects a boolean parameter');                                            // 2097\n            }                                                                                                          // 2098\n                                                                                                                       // 2099\n            options.debug = debug;                                                                                     // 2100\n            return picker;                                                                                             // 2101\n        };                                                                                                             // 2102\n                                                                                                                       // 2103\n        picker.allowInputToggle = function (allowInputToggle) {                                                        // 2104\n            if (arguments.length === 0) {                                                                              // 2105\n                return options.allowInputToggle;                                                                       // 2106\n            }                                                                                                          // 2107\n                                                                                                                       // 2108\n            if (typeof allowInputToggle !== 'boolean') {                                                               // 2109\n                throw new TypeError('allowInputToggle() expects a boolean parameter');                                 // 2110\n            }                                                                                                          // 2111\n                                                                                                                       // 2112\n            options.allowInputToggle = allowInputToggle;                                                               // 2113\n            return picker;                                                                                             // 2114\n        };                                                                                                             // 2115\n                                                                                                                       // 2116\n        picker.showClose = function (showClose) {                                                                      // 2117\n            if (arguments.length === 0) {                                                                              // 2118\n                return options.showClose;                                                                              // 2119\n            }                                                                                                          // 2120\n                                                                                                                       // 2121\n            if (typeof showClose !== 'boolean') {                                                                      // 2122\n                throw new TypeError('showClose() expects a boolean parameter');                                        // 2123\n            }                                                                                                          // 2124\n                                                                                                                       // 2125\n            options.showClose = showClose;                                                                             // 2126\n            return picker;                                                                                             // 2127\n        };                                                                                                             // 2128\n                                                                                                                       // 2129\n        picker.keepInvalid = function (keepInvalid) {                                                                  // 2130\n            if (arguments.length === 0) {                                                                              // 2131\n                return options.keepInvalid;                                                                            // 2132\n            }                                                                                                          // 2133\n                                                                                                                       // 2134\n            if (typeof keepInvalid !== 'boolean') {                                                                    // 2135\n                throw new TypeError('keepInvalid() expects a boolean parameter');                                      // 2136\n            }                                                                                                          // 2137\n            options.keepInvalid = keepInvalid;                                                                         // 2138\n            return picker;                                                                                             // 2139\n        };                                                                                                             // 2140\n                                                                                                                       // 2141\n        picker.datepickerInput = function (datepickerInput) {                                                          // 2142\n            if (arguments.length === 0) {                                                                              // 2143\n                return options.datepickerInput;                                                                        // 2144\n            }                                                                                                          // 2145\n                                                                                                                       // 2146\n            if (typeof datepickerInput !== 'string') {                                                                 // 2147\n                throw new TypeError('datepickerInput() expects a string parameter');                                   // 2148\n            }                                                                                                          // 2149\n                                                                                                                       // 2150\n            options.datepickerInput = datepickerInput;                                                                 // 2151\n            return picker;                                                                                             // 2152\n        };                                                                                                             // 2153\n                                                                                                                       // 2154\n        picker.parseInputDate = function (parseInputDate) {                                                            // 2155\n            if (arguments.length === 0) {                                                                              // 2156\n                return options.parseInputDate;                                                                         // 2157\n            }                                                                                                          // 2158\n                                                                                                                       // 2159\n            if (typeof parseInputDate !== 'function') {                                                                // 2160\n                throw new TypeError('parseInputDate() sholud be as function');                                         // 2161\n            }                                                                                                          // 2162\n                                                                                                                       // 2163\n            options.parseInputDate = parseInputDate;                                                                   // 2164\n                                                                                                                       // 2165\n            return picker;                                                                                             // 2166\n        };                                                                                                             // 2167\n                                                                                                                       // 2168\n        picker.disabledTimeIntervals = function (disabledTimeIntervals) {                                              // 2169\n            ///<signature helpKeyword=\"$.fn.datetimepicker.disabledTimeIntervals\">                                     // 2170\n            ///<summary>Returns an array with the currently set disabled dates on the component.</summary>             // 2171\n            ///<returns type=\"array\">options.disabledTimeIntervals</returns>                                           // 2172\n            ///</signature>                                                                                            // 2173\n            ///<signature>                                                                                             // 2174\n            ///<summary>Setting this takes precedence over options.minDate, options.maxDate configuration. Also calling this function removes the configuration of\n            ///options.enabledDates if such exist.</summary>                                                           // 2176\n            ///<param name=\"dates\" locid=\"$.fn.datetimepicker.disabledTimeIntervals_p:dates\">Takes an [ string or Date or moment ] of values and allows the user to select only from those days.</param>\n            ///</signature>                                                                                            // 2178\n            if (arguments.length === 0) {                                                                              // 2179\n                return (options.disabledTimeIntervals ? $.extend({}, options.disabledTimeIntervals) : options.disabledTimeIntervals);\n            }                                                                                                          // 2181\n                                                                                                                       // 2182\n            if (!disabledTimeIntervals) {                                                                              // 2183\n                options.disabledTimeIntervals = false;                                                                 // 2184\n                update();                                                                                              // 2185\n                return picker;                                                                                         // 2186\n            }                                                                                                          // 2187\n            if (!(disabledTimeIntervals instanceof Array)) {                                                           // 2188\n                throw new TypeError('disabledTimeIntervals() expects an array parameter');                             // 2189\n            }                                                                                                          // 2190\n            options.disabledTimeIntervals = disabledTimeIntervals;                                                     // 2191\n            update();                                                                                                  // 2192\n            return picker;                                                                                             // 2193\n        };                                                                                                             // 2194\n                                                                                                                       // 2195\n        picker.disabledHours = function (hours) {                                                                      // 2196\n            ///<signature helpKeyword=\"$.fn.datetimepicker.disabledHours\">                                             // 2197\n            ///<summary>Returns an array with the currently set disabled hours on the component.</summary>             // 2198\n            ///<returns type=\"array\">options.disabledHours</returns>                                                   // 2199\n            ///</signature>                                                                                            // 2200\n            ///<signature>                                                                                             // 2201\n            ///<summary>Setting this takes precedence over options.minDate, options.maxDate configuration. Also calling this function removes the configuration of\n            ///options.enabledHours if such exist.</summary>                                                           // 2203\n            ///<param name=\"hours\" locid=\"$.fn.datetimepicker.disabledHours_p:hours\">Takes an [ int ] of values and disallows the user to select only from those hours.</param>\n            ///</signature>                                                                                            // 2205\n            if (arguments.length === 0) {                                                                              // 2206\n                return (options.disabledHours ? $.extend({}, options.disabledHours) : options.disabledHours);          // 2207\n            }                                                                                                          // 2208\n                                                                                                                       // 2209\n            if (!hours) {                                                                                              // 2210\n                options.disabledHours = false;                                                                         // 2211\n                update();                                                                                              // 2212\n                return picker;                                                                                         // 2213\n            }                                                                                                          // 2214\n            if (!(hours instanceof Array)) {                                                                           // 2215\n                throw new TypeError('disabledHours() expects an array parameter');                                     // 2216\n            }                                                                                                          // 2217\n            options.disabledHours = indexGivenHours(hours);                                                            // 2218\n            options.enabledHours = false;                                                                              // 2219\n            if (options.useCurrent && !options.keepInvalid) {                                                          // 2220\n                var tries = 0;                                                                                         // 2221\n                while (!isValid(date, 'h')) {                                                                          // 2222\n                    date.add(1, 'h');                                                                                  // 2223\n                    if (tries === 24) {                                                                                // 2224\n                        throw 'Tried 24 times to find a valid date';                                                   // 2225\n                    }                                                                                                  // 2226\n                    tries++;                                                                                           // 2227\n                }                                                                                                      // 2228\n                setValue(date);                                                                                        // 2229\n            }                                                                                                          // 2230\n            update();                                                                                                  // 2231\n            return picker;                                                                                             // 2232\n        };                                                                                                             // 2233\n                                                                                                                       // 2234\n        picker.enabledHours = function (hours) {                                                                       // 2235\n            ///<signature helpKeyword=\"$.fn.datetimepicker.enabledHours\">                                              // 2236\n            ///<summary>Returns an array with the currently set enabled hours on the component.</summary>              // 2237\n            ///<returns type=\"array\">options.enabledHours</returns>                                                    // 2238\n            ///</signature>                                                                                            // 2239\n            ///<signature>                                                                                             // 2240\n            ///<summary>Setting this takes precedence over options.minDate, options.maxDate configuration. Also calling this function removes the configuration of options.disabledHours if such exist.</summary>\n            ///<param name=\"hours\" locid=\"$.fn.datetimepicker.enabledHours_p:hours\">Takes an [ int ] of values and allows the user to select only from those hours.</param>\n            ///</signature>                                                                                            // 2243\n            if (arguments.length === 0) {                                                                              // 2244\n                return (options.enabledHours ? $.extend({}, options.enabledHours) : options.enabledHours);             // 2245\n            }                                                                                                          // 2246\n                                                                                                                       // 2247\n            if (!hours) {                                                                                              // 2248\n                options.enabledHours = false;                                                                          // 2249\n                update();                                                                                              // 2250\n                return picker;                                                                                         // 2251\n            }                                                                                                          // 2252\n            if (!(hours instanceof Array)) {                                                                           // 2253\n                throw new TypeError('enabledHours() expects an array parameter');                                      // 2254\n            }                                                                                                          // 2255\n            options.enabledHours = indexGivenHours(hours);                                                             // 2256\n            options.disabledHours = false;                                                                             // 2257\n            if (options.useCurrent && !options.keepInvalid) {                                                          // 2258\n                var tries = 0;                                                                                         // 2259\n                while (!isValid(date, 'h')) {                                                                          // 2260\n                    date.add(1, 'h');                                                                                  // 2261\n                    if (tries === 24) {                                                                                // 2262\n                        throw 'Tried 24 times to find a valid date';                                                   // 2263\n                    }                                                                                                  // 2264\n                    tries++;                                                                                           // 2265\n                }                                                                                                      // 2266\n                setValue(date);                                                                                        // 2267\n            }                                                                                                          // 2268\n            update();                                                                                                  // 2269\n            return picker;                                                                                             // 2270\n        };                                                                                                             // 2271\n                                                                                                                       // 2272\n        picker.viewDate = function (newDate) {                                                                         // 2273\n            ///<signature helpKeyword=\"$.fn.datetimepicker.viewDate\">                                                  // 2274\n            ///<summary>Returns the component's model current viewDate, a moment object or null if not set.</summary>  // 2275\n            ///<returns type=\"Moment\">viewDate.clone()</returns>                                                       // 2276\n            ///</signature>                                                                                            // 2277\n            ///<signature>                                                                                             // 2278\n            ///<summary>Sets the components model current moment to it. Passing a null value unsets the components model current moment. Parsing of the newDate parameter is made using moment library with the options.format and options.useStrict components configuration.</summary>\n            ///<param name=\"newDate\" locid=\"$.fn.datetimepicker.date_p:newDate\">Takes string, viewDate, moment, null parameter.</param>\n            ///</signature>                                                                                            // 2281\n            if (arguments.length === 0) {                                                                              // 2282\n                return viewDate.clone();                                                                               // 2283\n            }                                                                                                          // 2284\n                                                                                                                       // 2285\n            if (!newDate) {                                                                                            // 2286\n                viewDate = date.clone();                                                                               // 2287\n                return picker;                                                                                         // 2288\n            }                                                                                                          // 2289\n                                                                                                                       // 2290\n            if (typeof newDate !== 'string' && !moment.isMoment(newDate) && !(newDate instanceof Date)) {              // 2291\n                throw new TypeError('viewDate() parameter must be one of [string, moment or Date]');                   // 2292\n            }                                                                                                          // 2293\n                                                                                                                       // 2294\n            viewDate = parseInputDate(newDate);                                                                        // 2295\n            viewUpdate();                                                                                              // 2296\n            return picker;                                                                                             // 2297\n        };                                                                                                             // 2298\n                                                                                                                       // 2299\n        // initializing element and component attributes                                                               // 2300\n        if (element.is('input')) {                                                                                     // 2301\n            input = element;                                                                                           // 2302\n        } else {                                                                                                       // 2303\n            input = element.find(options.datepickerInput);                                                             // 2304\n            if (input.size() === 0) {                                                                                  // 2305\n                input = element.find('input');                                                                         // 2306\n            } else if (!input.is('input')) {                                                                           // 2307\n                throw new Error('CSS class \"' + options.datepickerInput + '\" cannot be applied to non input element');\n            }                                                                                                          // 2309\n        }                                                                                                              // 2310\n                                                                                                                       // 2311\n        if (element.hasClass('input-group')) {                                                                         // 2312\n            // in case there is more then one 'input-group-addon' Issue #48                                            // 2313\n            if (element.find('.datepickerbutton').size() === 0) {                                                      // 2314\n                component = element.find('.input-group-addon');                                                        // 2315\n            } else {                                                                                                   // 2316\n                component = element.find('.datepickerbutton');                                                         // 2317\n            }                                                                                                          // 2318\n        }                                                                                                              // 2319\n                                                                                                                       // 2320\n        if (!options.inline && !input.is('input')) {                                                                   // 2321\n            throw new Error('Could not initialize DateTimePicker without an input element');                           // 2322\n        }                                                                                                              // 2323\n                                                                                                                       // 2324\n        // Set defaults for date here now instead of in var declaration                                                // 2325\n        date = getMoment();                                                                                            // 2326\n        viewDate = date.clone();                                                                                       // 2327\n                                                                                                                       // 2328\n        $.extend(true, options, dataToOptions());                                                                      // 2329\n                                                                                                                       // 2330\n        picker.options(options);                                                                                       // 2331\n                                                                                                                       // 2332\n        initFormatting();                                                                                              // 2333\n                                                                                                                       // 2334\n        attachDatePickerElementEvents();                                                                               // 2335\n                                                                                                                       // 2336\n        if (input.prop('disabled')) {                                                                                  // 2337\n            picker.disable();                                                                                          // 2338\n        }                                                                                                              // 2339\n        if (input.is('input') && input.val().trim().length !== 0) {                                                    // 2340\n            setValue(parseInputDate(input.val().trim()));                                                              // 2341\n        }                                                                                                              // 2342\n        else if (options.defaultDate && input.attr('placeholder') === undefined) {                                     // 2343\n            setValue(options.defaultDate);                                                                             // 2344\n        }                                                                                                              // 2345\n        if (options.inline) {                                                                                          // 2346\n            show();                                                                                                    // 2347\n        }                                                                                                              // 2348\n        return picker;                                                                                                 // 2349\n    };                                                                                                                 // 2350\n                                                                                                                       // 2351\n    /********************************************************************************                                  // 2352\n     *                                                                                                                 // 2353\n     * jQuery plugin constructor and defaults object                                                                   // 2354\n     *                                                                                                                 // 2355\n     ********************************************************************************/                                 // 2356\n                                                                                                                       // 2357\n    $.fn.datetimepicker = function (options) {                                                                         // 2358\n        return this.each(function () {                                                                                 // 2359\n            var $this = $(this);                                                                                       // 2360\n            if (!$this.data('DateTimePicker')) {                                                                       // 2361\n                // create a private copy of the defaults object                                                        // 2362\n                options = $.extend(true, {}, $.fn.datetimepicker.defaults, options);                                   // 2363\n                $this.data('DateTimePicker', dateTimePicker($this, options));                                          // 2364\n            }                                                                                                          // 2365\n        });                                                                                                            // 2366\n    };                                                                                                                 // 2367\n                                                                                                                       // 2368\n    $.fn.datetimepicker.defaults = {                                                                                   // 2369\n        timeZone: 'Etc/UTC',                                                                                           // 2370\n        format: false,                                                                                                 // 2371\n        dayViewHeaderFormat: 'MMMM YYYY',                                                                              // 2372\n        extraFormats: false,                                                                                           // 2373\n        stepping: 1,                                                                                                   // 2374\n        minDate: false,                                                                                                // 2375\n        maxDate: false,                                                                                                // 2376\n        useCurrent: true,                                                                                              // 2377\n        collapse: true,                                                                                                // 2378\n        locale: moment.locale(),                                                                                       // 2379\n        defaultDate: false,                                                                                            // 2380\n        disabledDates: false,                                                                                          // 2381\n        enabledDates: false,                                                                                           // 2382\n        icons: {                                                                                                       // 2383\n            time: 'glyphicon glyphicon-time',                                                                          // 2384\n            date: 'glyphicon glyphicon-calendar',                                                                      // 2385\n            up: 'glyphicon glyphicon-chevron-up',                                                                      // 2386\n            down: 'glyphicon glyphicon-chevron-down',                                                                  // 2387\n            previous: 'glyphicon glyphicon-chevron-left',                                                              // 2388\n            next: 'glyphicon glyphicon-chevron-right',                                                                 // 2389\n            today: 'glyphicon glyphicon-screenshot',                                                                   // 2390\n            clear: 'glyphicon glyphicon-trash',                                                                        // 2391\n            close: 'glyphicon glyphicon-remove'                                                                        // 2392\n        },                                                                                                             // 2393\n        tooltips: {                                                                                                    // 2394\n            today: 'Go to today',                                                                                      // 2395\n            clear: 'Clear selection',                                                                                  // 2396\n            close: 'Close the picker',                                                                                 // 2397\n            selectMonth: 'Select Month',                                                                               // 2398\n            prevMonth: 'Previous Month',                                                                               // 2399\n            nextMonth: 'Next Month',                                                                                   // 2400\n            selectYear: 'Select Year',                                                                                 // 2401\n            prevYear: 'Previous Year',                                                                                 // 2402\n            nextYear: 'Next Year',                                                                                     // 2403\n            selectDecade: 'Select Decade',                                                                             // 2404\n            prevDecade: 'Previous Decade',                                                                             // 2405\n            nextDecade: 'Next Decade',                                                                                 // 2406\n            prevCentury: 'Previous Century',                                                                           // 2407\n            nextCentury: 'Next Century',                                                                               // 2408\n            pickHour: 'Pick Hour',                                                                                     // 2409\n            incrementHour: 'Increment Hour',                                                                           // 2410\n            decrementHour: 'Decrement Hour',                                                                           // 2411\n            pickMinute: 'Pick Minute',                                                                                 // 2412\n            incrementMinute: 'Increment Minute',                                                                       // 2413\n            decrementMinute: 'Decrement Minute',                                                                       // 2414\n            pickSecond: 'Pick Second',                                                                                 // 2415\n            incrementSecond: 'Increment Second',                                                                       // 2416\n            decrementSecond: 'Decrement Second',                                                                       // 2417\n            togglePeriod: 'Toggle Period',                                                                             // 2418\n            selectTime: 'Select Time'                                                                                  // 2419\n        },                                                                                                             // 2420\n        useStrict: false,                                                                                              // 2421\n        sideBySide: false,                                                                                             // 2422\n        daysOfWeekDisabled: false,                                                                                     // 2423\n        calendarWeeks: false,                                                                                          // 2424\n        viewMode: 'days',                                                                                              // 2425\n        toolbarPlacement: 'default',                                                                                   // 2426\n        showTodayButton: false,                                                                                        // 2427\n        showClear: false,                                                                                              // 2428\n        showClose: false,                                                                                              // 2429\n        widgetPositioning: {                                                                                           // 2430\n            horizontal: 'auto',                                                                                        // 2431\n            vertical: 'auto'                                                                                           // 2432\n        },                                                                                                             // 2433\n        widgetParent: null,                                                                                            // 2434\n        ignoreReadonly: false,                                                                                         // 2435\n        keepOpen: false,                                                                                               // 2436\n        focusOnShow: true,                                                                                             // 2437\n        inline: false,                                                                                                 // 2438\n        keepInvalid: false,                                                                                            // 2439\n        datepickerInput: '.datepickerinput',                                                                           // 2440\n        keyBinds: {                                                                                                    // 2441\n            up: function (widget) {                                                                                    // 2442\n                if (!widget) {                                                                                         // 2443\n                    return;                                                                                            // 2444\n                }                                                                                                      // 2445\n                var d = this.date() || this.getMoment();                                                               // 2446\n                if (widget.find('.datepicker').is(':visible')) {                                                       // 2447\n                    this.date(d.clone().subtract(7, 'd'));                                                             // 2448\n                } else {                                                                                               // 2449\n                    this.date(d.clone().add(this.stepping(), 'm'));                                                    // 2450\n                }                                                                                                      // 2451\n            },                                                                                                         // 2452\n            down: function (widget) {                                                                                  // 2453\n                if (!widget) {                                                                                         // 2454\n                    this.show();                                                                                       // 2455\n                    return;                                                                                            // 2456\n                }                                                                                                      // 2457\n                var d = this.date() || this.getMoment();                                                               // 2458\n                if (widget.find('.datepicker').is(':visible')) {                                                       // 2459\n                    this.date(d.clone().add(7, 'd'));                                                                  // 2460\n                } else {                                                                                               // 2461\n                    this.date(d.clone().subtract(this.stepping(), 'm'));                                               // 2462\n                }                                                                                                      // 2463\n            },                                                                                                         // 2464\n            'control up': function (widget) {                                                                          // 2465\n                if (!widget) {                                                                                         // 2466\n                    return;                                                                                            // 2467\n                }                                                                                                      // 2468\n                var d = this.date() || this.getMoment();                                                               // 2469\n                if (widget.find('.datepicker').is(':visible')) {                                                       // 2470\n                    this.date(d.clone().subtract(1, 'y'));                                                             // 2471\n                } else {                                                                                               // 2472\n                    this.date(d.clone().add(1, 'h'));                                                                  // 2473\n                }                                                                                                      // 2474\n            },                                                                                                         // 2475\n            'control down': function (widget) {                                                                        // 2476\n                if (!widget) {                                                                                         // 2477\n                    return;                                                                                            // 2478\n                }                                                                                                      // 2479\n                var d = this.date() || this.getMoment();                                                               // 2480\n                if (widget.find('.datepicker').is(':visible')) {                                                       // 2481\n                    this.date(d.clone().add(1, 'y'));                                                                  // 2482\n                } else {                                                                                               // 2483\n                    this.date(d.clone().subtract(1, 'h'));                                                             // 2484\n                }                                                                                                      // 2485\n            },                                                                                                         // 2486\n            left: function (widget) {                                                                                  // 2487\n                if (!widget) {                                                                                         // 2488\n                    return;                                                                                            // 2489\n                }                                                                                                      // 2490\n                var d = this.date() || this.getMoment();                                                               // 2491\n                if (widget.find('.datepicker').is(':visible')) {                                                       // 2492\n                    this.date(d.clone().subtract(1, 'd'));                                                             // 2493\n                }                                                                                                      // 2494\n            },                                                                                                         // 2495\n            right: function (widget) {                                                                                 // 2496\n                if (!widget) {                                                                                         // 2497\n                    return;                                                                                            // 2498\n                }                                                                                                      // 2499\n                var d = this.date() || this.getMoment();                                                               // 2500\n                if (widget.find('.datepicker').is(':visible')) {                                                       // 2501\n                    this.date(d.clone().add(1, 'd'));                                                                  // 2502\n                }                                                                                                      // 2503\n            },                                                                                                         // 2504\n            pageUp: function (widget) {                                                                                // 2505\n                if (!widget) {                                                                                         // 2506\n                    return;                                                                                            // 2507\n                }                                                                                                      // 2508\n                var d = this.date() || this.getMoment();                                                               // 2509\n                if (widget.find('.datepicker').is(':visible')) {                                                       // 2510\n                    this.date(d.clone().subtract(1, 'M'));                                                             // 2511\n                }                                                                                                      // 2512\n            },                                                                                                         // 2513\n            pageDown: function (widget) {                                                                              // 2514\n                if (!widget) {                                                                                         // 2515\n                    return;                                                                                            // 2516\n                }                                                                                                      // 2517\n                var d = this.date() || this.getMoment();                                                               // 2518\n                if (widget.find('.datepicker').is(':visible')) {                                                       // 2519\n                    this.date(d.clone().add(1, 'M'));                                                                  // 2520\n                }                                                                                                      // 2521\n            },                                                                                                         // 2522\n            enter: function () {                                                                                       // 2523\n                this.hide();                                                                                           // 2524\n            },                                                                                                         // 2525\n            escape: function () {                                                                                      // 2526\n                this.hide();                                                                                           // 2527\n            },                                                                                                         // 2528\n            //tab: function (widget) { //this break the flow of the form. disabling for now                            // 2529\n            //    var toggle = widget.find('.picker-switch a[data-action=\"togglePicker\"]');                            // 2530\n            //    if(toggle.length > 0) toggle.click();                                                                // 2531\n            //},                                                                                                       // 2532\n            'control space': function (widget) {                                                                       // 2533\n                if (widget.find('.timepicker').is(':visible')) {                                                       // 2534\n                    widget.find('.btn[data-action=\"togglePeriod\"]').click();                                           // 2535\n                }                                                                                                      // 2536\n            },                                                                                                         // 2537\n            t: function () {                                                                                           // 2538\n                this.date(this.getMoment());                                                                           // 2539\n            },                                                                                                         // 2540\n            'delete': function () {                                                                                    // 2541\n                this.clear();                                                                                          // 2542\n            }                                                                                                          // 2543\n        },                                                                                                             // 2544\n        debug: false,                                                                                                  // 2545\n        allowInputToggle: false,                                                                                       // 2546\n        disabledTimeIntervals: false,                                                                                  // 2547\n        disabledHours: false,                                                                                          // 2548\n        enabledHours: false,                                                                                           // 2549\n        viewDate: false                                                                                                // 2550\n    };                                                                                                                 // 2551\n}));                                                                                                                   // 2552\n                                                                                                                       // 2553\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['tsega:bootstrap3-datetimepicker'] = {};\n\n})();\n","servePath":"/packages/tsega_bootstrap3-datetimepicker.js","sourceMap":{"version":3,"sources":["/packages/tsega_bootstrap3-datetimepicker/lib/js/bootstrap-datetimepicker.js"],"names":[],"mappingsfile":"/packages/tsega_bootstrap3-datetimepicker.js","sourcesContent":["/*! version : 4.17.37\n =========================================================\n bootstrap-datetimejs\n https://github.com/Eonasdan/bootstrap-datetimepicker\n Copyright (c) 2015 Jonathan Peterson\n =========================================================\n */\n/*\n The MIT License (MIT)\n\n Copyright (c) 2015 Jonathan Peterson\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\n/*global define:false */\n/*global exports:false */\n/*global require:false */\n/*global jQuery:false */\n/*global moment:false */\n(function (factory) {\n    'use strict';\n    if (typeof define === 'function' && define.amd) {\n        // AMD is used - Register as an anonymous module.\n        define(['jquery', 'moment'], factory);\n    } else if (typeof exports === 'object') {\n        factory(require('jquery'), require('moment'));\n    } else {\n        // Neither AMD nor CommonJS used. Use global variables.\n        if (typeof jQuery === 'undefined') {\n            throw 'bootstrap-datetimepicker requires jQuery to be loaded first';\n        }\n        if (typeof moment === 'undefined') {\n            throw 'bootstrap-datetimepicker requires Moment.js to be loaded first';\n        }\n        factory(jQuery, moment);\n    }\n}(function ($, moment) {\n    'use strict';\n    if (!moment) {\n        throw new Error('bootstrap-datetimepicker requires Moment.js to be loaded first');\n    }\n\n    var dateTimePicker = function (element, options) {\n        var picker = {},\n            date,\n            viewDate,\n            unset = true,\n            input,\n            component = false,\n            widget = false,\n            use24Hours,\n            minViewModeNumber = 0,\n            actualFormat,\n            parseFormats,\n            currentViewMode,\n            datePickerModes = [\n                {\n                    clsName: 'days',\n                    navFnc: 'M',\n                    navStep: 1\n                },\n                {\n                    clsName: 'months',\n                    navFnc: 'y',\n                    navStep: 1\n                },\n                {\n                    clsName: 'years',\n                    navFnc: 'y',\n                    navStep: 10\n                },\n                {\n                    clsName: 'decades',\n                    navFnc: 'y',\n                    navStep: 100\n                }\n            ],\n            viewModes = ['days', 'months', 'years', 'decades'],\n            verticalModes = ['top', 'bottom', 'auto'],\n            horizontalModes = ['left', 'right', 'auto'],\n            toolbarPlacements = ['default', 'top', 'bottom'],\n            keyMap = {\n                'up': 38,\n                38: 'up',\n                'down': 40,\n                40: 'down',\n                'left': 37,\n                37: 'left',\n                'right': 39,\n                39: 'right',\n                'tab': 9,\n                9: 'tab',\n                'escape': 27,\n                27: 'escape',\n                'enter': 13,\n                13: 'enter',\n                'pageUp': 33,\n                33: 'pageUp',\n                'pageDown': 34,\n                34: 'pageDown',\n                'shift': 16,\n                16: 'shift',\n                'control': 17,\n                17: 'control',\n                'space': 32,\n                32: 'space',\n                't': 84,\n                84: 't',\n                'delete': 46,\n                46: 'delete'\n            },\n            keyState = {},\n\n            /********************************************************************************\n             *\n             * Private functions\n             *\n             ********************************************************************************/\n            getMoment = function (d) {\n                var tzEnabled = false,\n                    returnMoment,\n                    currentZoneOffset,\n                    incomingZoneOffset,\n                    timeZoneIndicator,\n                    dateWithTimeZoneInfo;\n\n                if (moment.tz !== undefined && options.timeZone !== undefined && options.timeZone !== null && options.timeZone !== '') {\n                    tzEnabled = true;\n                }\n                if (d === undefined || d === null) {\n                    if (tzEnabled) {\n                        returnMoment = moment().tz(options.timeZone).startOf('d');\n                    } else {\n                        returnMoment = moment().startOf('d');\n                    }\n                } else {\n                    if (tzEnabled) {\n                        currentZoneOffset = moment().tz(options.timeZone).utcOffset();\n                        incomingZoneOffset = moment(d, parseFormats, options.useStrict).utcOffset();\n                        if (incomingZoneOffset !== currentZoneOffset) {\n                            timeZoneIndicator = moment().tz(options.timeZone).format('Z');\n                            dateWithTimeZoneInfo = moment(d, parseFormats, options.useStrict).format('YYYY-MM-DD[T]HH:mm:ss') + timeZoneIndicator;\n                            returnMoment = moment(dateWithTimeZoneInfo, parseFormats, options.useStrict).tz(options.timeZone);\n                        } else {\n                            returnMoment = moment(d, parseFormats, options.useStrict).tz(options.timeZone);\n                        }\n                    } else {\n                        returnMoment = moment(d, parseFormats, options.useStrict);\n                    }\n                }\n                return returnMoment;\n            },\n            isEnabled = function (granularity) {\n                if (typeof granularity !== 'string' || granularity.length > 1) {\n                    throw new TypeError('isEnabled expects a single character string parameter');\n                }\n                switch (granularity) {\n                    case 'y':\n                        return actualFormat.indexOf('Y') !== -1;\n                    case 'M':\n                        return actualFormat.indexOf('M') !== -1;\n                    case 'd':\n                        return actualFormat.toLowerCase().indexOf('d') !== -1;\n                    case 'h':\n                    case 'H':\n                        return actualFormat.toLowerCase().indexOf('h') !== -1;\n                    case 'm':\n                        return actualFormat.indexOf('m') !== -1;\n                    case 's':\n                        return actualFormat.indexOf('s') !== -1;\n                    default:\n                        return false;\n                }\n            },\n            hasTime = function () {\n                return (isEnabled('h') || isEnabled('m') || isEnabled('s'));\n            },\n\n            hasDate = function () {\n                return (isEnabled('y') || isEnabled('M') || isEnabled('d'));\n            },\n\n            getDatePickerTemplate = function () {\n                var headTemplate = $('<thead>')\n                        .append($('<tr>')\n                            .append($('<th>').addClass('prev').attr('data-action', 'previous')\n                                .append($('<span>').addClass(options.icons.previous))\n                                )\n                            .append($('<th>').addClass('picker-switch').attr('data-action', 'pickerSwitch').attr('colspan', (options.calendarWeeks ? '6' : '5')))\n                            .append($('<th>').addClass('next').attr('data-action', 'next')\n                                .append($('<span>').addClass(options.icons.next))\n                                )\n                            ),\n                    contTemplate = $('<tbody>')\n                        .append($('<tr>')\n                            .append($('<td>').attr('colspan', (options.calendarWeeks ? '8' : '7')))\n                            );\n\n                return [\n                    $('<div>').addClass('datepicker-days')\n                        .append($('<table>').addClass('table-condensed')\n                            .append(headTemplate)\n                            .append($('<tbody>'))\n                            ),\n                    $('<div>').addClass('datepicker-months')\n                        .append($('<table>').addClass('table-condensed')\n                            .append(headTemplate.clone())\n                            .append(contTemplate.clone())\n                            ),\n                    $('<div>').addClass('datepicker-years')\n                        .append($('<table>').addClass('table-condensed')\n                            .append(headTemplate.clone())\n                            .append(contTemplate.clone())\n                            ),\n                    $('<div>').addClass('datepicker-decades')\n                        .append($('<table>').addClass('table-condensed')\n                            .append(headTemplate.clone())\n                            .append(contTemplate.clone())\n                            )\n                ];\n            },\n\n            getTimePickerMainTemplate = function () {\n                var topRow = $('<tr>'),\n                    middleRow = $('<tr>'),\n                    bottomRow = $('<tr>');\n\n                if (isEnabled('h')) {\n                    topRow.append($('<td>')\n                        .append($('<a>').attr({href: '#', tabindex: '-1', 'title': options.tooltips.incrementHour}).addClass('btn').attr('data-action', 'incrementHours')\n                            .append($('<span>').addClass(options.icons.up))));\n                    middleRow.append($('<td>')\n                        .append($('<span>').addClass('timepicker-hour').attr({'data-time-component':'hours', 'title': options.tooltips.pickHour}).attr('data-action', 'showHours')));\n                    bottomRow.append($('<td>')\n                        .append($('<a>').attr({href: '#', tabindex: '-1', 'title': options.tooltips.decrementHour}).addClass('btn').attr('data-action', 'decrementHours')\n                            .append($('<span>').addClass(options.icons.down))));\n                }\n                if (isEnabled('m')) {\n                    if (isEnabled('h')) {\n                        topRow.append($('<td>').addClass('separator'));\n                        middleRow.append($('<td>').addClass('separator').html(':'));\n                        bottomRow.append($('<td>').addClass('separator'));\n                    }\n                    topRow.append($('<td>')\n                        .append($('<a>').attr({href: '#', tabindex: '-1', 'title': options.tooltips.incrementMinute}).addClass('btn').attr('data-action', 'incrementMinutes')\n                            .append($('<span>').addClass(options.icons.up))));\n                    middleRow.append($('<td>')\n                        .append($('<span>').addClass('timepicker-minute').attr({'data-time-component': 'minutes', 'title': options.tooltips.pickMinute}).attr('data-action', 'showMinutes')));\n                    bottomRow.append($('<td>')\n                        .append($('<a>').attr({href: '#', tabindex: '-1', 'title': options.tooltips.decrementMinute}).addClass('btn').attr('data-action', 'decrementMinutes')\n                            .append($('<span>').addClass(options.icons.down))));\n                }\n                if (isEnabled('s')) {\n                    if (isEnabled('m')) {\n                        topRow.append($('<td>').addClass('separator'));\n                        middleRow.append($('<td>').addClass('separator').html(':'));\n                        bottomRow.append($('<td>').addClass('separator'));\n                    }\n                    topRow.append($('<td>')\n                        .append($('<a>').attr({href: '#', tabindex: '-1', 'title': options.tooltips.incrementSecond}).addClass('btn').attr('data-action', 'incrementSeconds')\n                            .append($('<span>').addClass(options.icons.up))));\n                    middleRow.append($('<td>')\n                        .append($('<span>').addClass('timepicker-second').attr({'data-time-component': 'seconds', 'title': options.tooltips.pickSecond}).attr('data-action', 'showSeconds')));\n                    bottomRow.append($('<td>')\n                        .append($('<a>').attr({href: '#', tabindex: '-1', 'title': options.tooltips.decrementSecond}).addClass('btn').attr('data-action', 'decrementSeconds')\n                            .append($('<span>').addClass(options.icons.down))));\n                }\n\n                if (!use24Hours) {\n                    topRow.append($('<td>').addClass('separator'));\n                    middleRow.append($('<td>')\n                        .append($('<button>').addClass('btn btn-primary').attr({'data-action': 'togglePeriod', tabindex: '-1', 'title': options.tooltips.togglePeriod})));\n                    bottomRow.append($('<td>').addClass('separator'));\n                }\n\n                return $('<div>').addClass('timepicker-picker')\n                    .append($('<table>').addClass('table-condensed')\n                        .append([topRow, middleRow, bottomRow]));\n            },\n\n            getTimePickerTemplate = function () {\n                var hoursView = $('<div>').addClass('timepicker-hours')\n                        .append($('<table>').addClass('table-condensed')),\n                    minutesView = $('<div>').addClass('timepicker-minutes')\n                        .append($('<table>').addClass('table-condensed')),\n                    secondsView = $('<div>').addClass('timepicker-seconds')\n                        .append($('<table>').addClass('table-condensed')),\n                    ret = [getTimePickerMainTemplate()];\n\n                if (isEnabled('h')) {\n                    ret.push(hoursView);\n                }\n                if (isEnabled('m')) {\n                    ret.push(minutesView);\n                }\n                if (isEnabled('s')) {\n                    ret.push(secondsView);\n                }\n\n                return ret;\n            },\n\n            getToolbar = function () {\n                var row = [];\n                if (options.showTodayButton) {\n                    row.push($('<td>').append($('<a>').attr({'data-action':'today', 'title': options.tooltips.today}).append($('<span>').addClass(options.icons.today))));\n                }\n                if (!options.sideBySide && hasDate() && hasTime()) {\n                    row.push($('<td>').append($('<a>').attr({'data-action':'togglePicker', 'title': options.tooltips.selectTime}).append($('<span>').addClass(options.icons.time))));\n                }\n                if (options.showClear) {\n                    row.push($('<td>').append($('<a>').attr({'data-action':'clear', 'title': options.tooltips.clear}).append($('<span>').addClass(options.icons.clear))));\n                }\n                if (options.showClose) {\n                    row.push($('<td>').append($('<a>').attr({'data-action':'close', 'title': options.tooltips.close}).append($('<span>').addClass(options.icons.close))));\n                }\n                return $('<table>').addClass('table-condensed').append($('<tbody>').append($('<tr>').append(row)));\n            },\n\n            getTemplate = function () {\n                var template = $('<div>').addClass('bootstrap-datetimepicker-widget dropdown-menu'),\n                    dateView = $('<div>').addClass('datepicker').append(getDatePickerTemplate()),\n                    timeView = $('<div>').addClass('timepicker').append(getTimePickerTemplate()),\n                    content = $('<ul>').addClass('list-unstyled'),\n                    toolbar = $('<li>').addClass('picker-switch' + (options.collapse ? ' accordion-toggle' : '')).append(getToolbar());\n\n                if (options.inline) {\n                    template.removeClass('dropdown-menu');\n                }\n\n                if (use24Hours) {\n                    template.addClass('usetwentyfour');\n                }\n                if (isEnabled('s') && !use24Hours) {\n                    template.addClass('wider');\n                }\n\n                if (options.sideBySide && hasDate() && hasTime()) {\n                    template.addClass('timepicker-sbs');\n                    if (options.toolbarPlacement === 'top') {\n                        template.append(toolbar);\n                    }\n                    template.append(\n                        $('<div>').addClass('row')\n                            .append(dateView.addClass('col-md-6'))\n                            .append(timeView.addClass('col-md-6'))\n                    );\n                    if (options.toolbarPlacement === 'bottom') {\n                        template.append(toolbar);\n                    }\n                    return template;\n                }\n\n                if (options.toolbarPlacement === 'top') {\n                    content.append(toolbar);\n                }\n                if (hasDate()) {\n                    content.append($('<li>').addClass((options.collapse && hasTime() ? 'collapse in' : '')).append(dateView));\n                }\n                if (options.toolbarPlacement === 'default') {\n                    content.append(toolbar);\n                }\n                if (hasTime()) {\n                    content.append($('<li>').addClass((options.collapse && hasDate() ? 'collapse' : '')).append(timeView));\n                }\n                if (options.toolbarPlacement === 'bottom') {\n                    content.append(toolbar);\n                }\n                return template.append(content);\n            },\n\n            dataToOptions = function () {\n                var eData,\n                    dataOptions = {};\n\n                if (element.is('input') || options.inline) {\n                    eData = element.data();\n                } else {\n                    eData = element.find('input').data();\n                }\n\n                if (eData.dateOptions && eData.dateOptions instanceof Object) {\n                    dataOptions = $.extend(true, dataOptions, eData.dateOptions);\n                }\n\n                $.each(options, function (key) {\n                    var attributeName = 'date' + key.charAt(0).toUpperCase() + key.slice(1);\n                    if (eData[attributeName] !== undefined) {\n                        dataOptions[key] = eData[attributeName];\n                    }\n                });\n                return dataOptions;\n            },\n\n            place = function () {\n                var position = (component || element).position(),\n                    offset = (component || element).offset(),\n                    vertical = options.widgetPositioning.vertical,\n                    horizontal = options.widgetPositioning.horizontal,\n                    parent;\n\n                if (options.widgetParent) {\n                    parent = options.widgetParent.append(widget);\n                } else if (element.is('input')) {\n                    parent = element.after(widget).parent();\n                } else if (options.inline) {\n                    parent = element.append(widget);\n                    return;\n                } else {\n                    parent = element;\n                    element.children().first().after(widget);\n                }\n\n                // Top and bottom logic\n                if (vertical === 'auto') {\n                    if (offset.top + widget.height() * 1.5 >= $(window).height() + $(window).scrollTop() &&\n                        widget.height() + element.outerHeight() < offset.top) {\n                        vertical = 'top';\n                    } else {\n                        vertical = 'bottom';\n                    }\n                }\n\n                // Left and right logic\n                if (horizontal === 'auto') {\n                    if (parent.width() < offset.left + widget.outerWidth() / 2 &&\n                        offset.left + widget.outerWidth() > $(window).width()) {\n                        horizontal = 'right';\n                    } else {\n                        horizontal = 'left';\n                    }\n                }\n\n                if (vertical === 'top') {\n                    widget.addClass('top').removeClass('bottom');\n                } else {\n                    widget.addClass('bottom').removeClass('top');\n                }\n\n                if (horizontal === 'right') {\n                    widget.addClass('pull-right');\n                } else {\n                    widget.removeClass('pull-right');\n                }\n\n                // find the first parent element that has a relative css positioning\n                if (parent.css('position') !== 'relative') {\n                    parent = parent.parents().filter(function () {\n                        return $(this).css('position') === 'relative';\n                    }).first();\n                }\n\n                if (parent.length === 0) {\n                    throw new Error('datetimepicker component should be placed within a relative positioned container');\n                }\n\n                widget.css({\n                    top: vertical === 'top' ? 'auto' : position.top + element.outerHeight(),\n                    bottom: vertical === 'top' ? position.top + element.outerHeight() : 'auto',\n                    left: horizontal === 'left' ? (parent === element ? 0 : position.left) : 'auto',\n                    right: horizontal === 'left' ? 'auto' : parent.outerWidth() - element.outerWidth() - (parent === element ? 0 : position.left)\n                });\n            },\n\n            notifyEvent = function (e) {\n                if (e.type === 'dp.change' && ((e.date && e.date.isSame(e.oldDate)) || (!e.date && !e.oldDate))) {\n                    return;\n                }\n                element.trigger(e);\n            },\n\n            viewUpdate = function (e) {\n                if (e === 'y') {\n                    e = 'YYYY';\n                }\n                notifyEvent({\n                    type: 'dp.update',\n                    change: e,\n                    viewDate: viewDate.clone()\n                });\n            },\n\n            showMode = function (dir) {\n                if (!widget) {\n                    return;\n                }\n                if (dir) {\n                    currentViewMode = Math.max(minViewModeNumber, Math.min(3, currentViewMode + dir));\n                }\n                widget.find('.datepicker > div').hide().filter('.datepicker-' + datePickerModes[currentViewMode].clsName).show();\n            },\n\n            fillDow = function () {\n                var row = $('<tr>'),\n                    currentDate = viewDate.clone().startOf('w').startOf('d');\n\n                if (options.calendarWeeks === true) {\n                    row.append($('<th>').addClass('cw').text('#'));\n                }\n\n                while (currentDate.isBefore(viewDate.clone().endOf('w'))) {\n                    row.append($('<th>').addClass('dow').text(currentDate.format('dd')));\n                    currentDate.add(1, 'd');\n                }\n                widget.find('.datepicker-days thead').append(row);\n            },\n\n            isInDisabledDates = function (testDate) {\n                return options.disabledDates[testDate.format('YYYY-MM-DD')] === true;\n            },\n\n            isInEnabledDates = function (testDate) {\n                return options.enabledDates[testDate.format('YYYY-MM-DD')] === true;\n            },\n\n            isInDisabledHours = function (testDate) {\n                return options.disabledHours[testDate.format('H')] === true;\n            },\n\n            isInEnabledHours = function (testDate) {\n                return options.enabledHours[testDate.format('H')] === true;\n            },\n\n            isValid = function (targetMoment, granularity) {\n                if (!targetMoment.isValid()) {\n                    return false;\n                }\n                if (options.disabledDates && granularity === 'd' && isInDisabledDates(targetMoment)) {\n                    return false;\n                }\n                if (options.enabledDates && granularity === 'd' && !isInEnabledDates(targetMoment)) {\n                    return false;\n                }\n                if (options.minDate && targetMoment.isBefore(options.minDate, granularity)) {\n                    return false;\n                }\n                if (options.maxDate && targetMoment.isAfter(options.maxDate, granularity)) {\n                    return false;\n                }\n                if (options.daysOfWeekDisabled && granularity === 'd' && options.daysOfWeekDisabled.indexOf(targetMoment.day()) !== -1) {\n                    return false;\n                }\n                if (options.disabledHours && (granularity === 'h' || granularity === 'm' || granularity === 's') && isInDisabledHours(targetMoment)) {\n                    return false;\n                }\n                if (options.enabledHours && (granularity === 'h' || granularity === 'm' || granularity === 's') && !isInEnabledHours(targetMoment)) {\n                    return false;\n                }\n                if (options.disabledTimeIntervals && (granularity === 'h' || granularity === 'm' || granularity === 's')) {\n                    var found = false;\n                    $.each(options.disabledTimeIntervals, function () {\n                        if (targetMoment.isBetween(this[0], this[1])) {\n                            found = true;\n                            return false;\n                        }\n                    });\n                    if (found) {\n                        return false;\n                    }\n                }\n                return true;\n            },\n\n            fillMonths = function () {\n                var spans = [],\n                    monthsShort = viewDate.clone().startOf('y').startOf('d');\n                while (monthsShort.isSame(viewDate, 'y')) {\n                    spans.push($('<span>').attr('data-action', 'selectMonth').addClass('month').text(monthsShort.format('MMM')));\n                    monthsShort.add(1, 'M');\n                }\n                widget.find('.datepicker-months td').empty().append(spans);\n            },\n\n            updateMonths = function () {\n                var monthsView = widget.find('.datepicker-months'),\n                    monthsViewHeader = monthsView.find('th'),\n                    months = monthsView.find('tbody').find('span');\n\n                monthsViewHeader.eq(0).find('span').attr('title', options.tooltips.prevYear);\n                monthsViewHeader.eq(1).attr('title', options.tooltips.selectYear);\n                monthsViewHeader.eq(2).find('span').attr('title', options.tooltips.nextYear);\n\n                monthsView.find('.disabled').removeClass('disabled');\n\n                if (!isValid(viewDate.clone().subtract(1, 'y'), 'y')) {\n                    monthsViewHeader.eq(0).addClass('disabled');\n                }\n\n                monthsViewHeader.eq(1).text(viewDate.year());\n\n                if (!isValid(viewDate.clone().add(1, 'y'), 'y')) {\n                    monthsViewHeader.eq(2).addClass('disabled');\n                }\n\n                months.removeClass('active');\n                if (date.isSame(viewDate, 'y') && !unset) {\n                    months.eq(date.month()).addClass('active');\n                }\n\n                months.each(function (index) {\n                    if (!isValid(viewDate.clone().month(index), 'M')) {\n                        $(this).addClass('disabled');\n                    }\n                });\n            },\n\n            updateYears = function () {\n                var yearsView = widget.find('.datepicker-years'),\n                    yearsViewHeader = yearsView.find('th'),\n                    startYear = viewDate.clone().subtract(5, 'y'),\n                    endYear = viewDate.clone().add(6, 'y'),\n                    html = '';\n\n                yearsViewHeader.eq(0).find('span').attr('title', options.tooltips.prevDecade);\n                yearsViewHeader.eq(1).attr('title', options.tooltips.selectDecade);\n                yearsViewHeader.eq(2).find('span').attr('title', options.tooltips.nextDecade);\n\n                yearsView.find('.disabled').removeClass('disabled');\n\n                if (options.minDate && options.minDate.isAfter(startYear, 'y')) {\n                    yearsViewHeader.eq(0).addClass('disabled');\n                }\n\n                yearsViewHeader.eq(1).text(startYear.year() + '-' + endYear.year());\n\n                if (options.maxDate && options.maxDate.isBefore(endYear, 'y')) {\n                    yearsViewHeader.eq(2).addClass('disabled');\n                }\n\n                while (!startYear.isAfter(endYear, 'y')) {\n                    html += '<span data-action=\"selectYear\" class=\"year' + (startYear.isSame(date, 'y') && !unset ? ' active' : '') + (!isValid(startYear, 'y') ? ' disabled' : '') + '\">' + startYear.year() + '</span>';\n                    startYear.add(1, 'y');\n                }\n\n                yearsView.find('td').html(html);\n            },\n\n            updateDecades = function () {\n                var decadesView = widget.find('.datepicker-decades'),\n                    decadesViewHeader = decadesView.find('th'),\n                    startDecade = moment({y: viewDate.year() - (viewDate.year() % 100) - 1}),\n                    endDecade = startDecade.clone().add(100, 'y'),\n                    startedAt = startDecade.clone(),\n                    html = '';\n\n                decadesViewHeader.eq(0).find('span').attr('title', options.tooltips.prevCentury);\n                decadesViewHeader.eq(2).find('span').attr('title', options.tooltips.nextCentury);\n\n                decadesView.find('.disabled').removeClass('disabled');\n\n                if (startDecade.isSame(moment({y: 1900})) || (options.minDate && options.minDate.isAfter(startDecade, 'y'))) {\n                    decadesViewHeader.eq(0).addClass('disabled');\n                }\n\n                decadesViewHeader.eq(1).text(startDecade.year() + '-' + endDecade.year());\n\n                if (startDecade.isSame(moment({y: 2000})) || (options.maxDate && options.maxDate.isBefore(endDecade, 'y'))) {\n                    decadesViewHeader.eq(2).addClass('disabled');\n                }\n\n                while (!startDecade.isAfter(endDecade, 'y')) {\n                    html += '<span data-action=\"selectDecade\" class=\"decade' + (startDecade.isSame(date, 'y') ? ' active' : '') +\n                        (!isValid(startDecade, 'y') ? ' disabled' : '') + '\" data-selection=\"' + (startDecade.year() + 6) + '\">' + (startDecade.year() + 1) + ' - ' + (startDecade.year() + 12) + '</span>';\n                    startDecade.add(12, 'y');\n                }\n                html += '<span></span><span></span><span></span>'; //push the dangling block over, at least this way it's even\n\n                decadesView.find('td').html(html);\n                decadesViewHeader.eq(1).text((startedAt.year() + 1) + '-' + (startDecade.year()));\n            },\n\n            fillDate = function () {\n                var daysView = widget.find('.datepicker-days'),\n                    daysViewHeader = daysView.find('th'),\n                    currentDate,\n                    html = [],\n                    row,\n                    clsName,\n                    i;\n\n                if (!hasDate()) {\n                    return;\n                }\n\n                daysViewHeader.eq(0).find('span').attr('title', options.tooltips.prevMonth);\n                daysViewHeader.eq(1).attr('title', options.tooltips.selectMonth);\n                daysViewHeader.eq(2).find('span').attr('title', options.tooltips.nextMonth);\n\n                daysView.find('.disabled').removeClass('disabled');\n                daysViewHeader.eq(1).text(viewDate.format(options.dayViewHeaderFormat));\n\n                if (!isValid(viewDate.clone().subtract(1, 'M'), 'M')) {\n                    daysViewHeader.eq(0).addClass('disabled');\n                }\n                if (!isValid(viewDate.clone().add(1, 'M'), 'M')) {\n                    daysViewHeader.eq(2).addClass('disabled');\n                }\n\n                currentDate = viewDate.clone().startOf('M').startOf('w').startOf('d');\n\n                for (i = 0; i < 42; i++) { //always display 42 days (should show 6 weeks)\n                    if (currentDate.weekday() === 0) {\n                        row = $('<tr>');\n                        if (options.calendarWeeks) {\n                            row.append('<td class=\"cw\">' + currentDate.week() + '</td>');\n                        }\n                        html.push(row);\n                    }\n                    clsName = '';\n                    if (currentDate.isBefore(viewDate, 'M')) {\n                        clsName += ' old';\n                    }\n                    if (currentDate.isAfter(viewDate, 'M')) {\n                        clsName += ' new';\n                    }\n                    if (currentDate.isSame(date, 'd') && !unset) {\n                        clsName += ' active';\n                    }\n                    if (!isValid(currentDate, 'd')) {\n                        clsName += ' disabled';\n                    }\n                    if (currentDate.isSame(getMoment(), 'd')) {\n                        clsName += ' today';\n                    }\n                    if (currentDate.day() === 0 || currentDate.day() === 6) {\n                        clsName += ' weekend';\n                    }\n                    row.append('<td data-action=\"selectDay\" data-day=\"' + currentDate.format('L') + '\" class=\"day' + clsName + '\">' + currentDate.date() + '</td>');\n                    currentDate.add(1, 'd');\n                }\n\n                daysView.find('tbody').empty().append(html);\n\n                updateMonths();\n\n                updateYears();\n\n                updateDecades();\n            },\n\n            fillHours = function () {\n                var table = widget.find('.timepicker-hours table'),\n                    currentHour = viewDate.clone().startOf('d'),\n                    html = [],\n                    row = $('<tr>');\n\n                if (viewDate.hour() > 11 && !use24Hours) {\n                    currentHour.hour(12);\n                }\n                while (currentHour.isSame(viewDate, 'd') && (use24Hours || (viewDate.hour() < 12 && currentHour.hour() < 12) || viewDate.hour() > 11)) {\n                    if (currentHour.hour() % 4 === 0) {\n                        row = $('<tr>');\n                        html.push(row);\n                    }\n                    row.append('<td data-action=\"selectHour\" class=\"hour' + (!isValid(currentHour, 'h') ? ' disabled' : '') + '\">' + currentHour.format(use24Hours ? 'HH' : 'hh') + '</td>');\n                    currentHour.add(1, 'h');\n                }\n                table.empty().append(html);\n            },\n\n            fillMinutes = function () {\n                var table = widget.find('.timepicker-minutes table'),\n                    currentMinute = viewDate.clone().startOf('h'),\n                    html = [],\n                    row = $('<tr>'),\n                    step = options.stepping === 1 ? 5 : options.stepping;\n\n                while (viewDate.isSame(currentMinute, 'h')) {\n                    if (currentMinute.minute() % (step * 4) === 0) {\n                        row = $('<tr>');\n                        html.push(row);\n                    }\n                    row.append('<td data-action=\"selectMinute\" class=\"minute' + (!isValid(currentMinute, 'm') ? ' disabled' : '') + '\">' + currentMinute.format('mm') + '</td>');\n                    currentMinute.add(step, 'm');\n                }\n                table.empty().append(html);\n            },\n\n            fillSeconds = function () {\n                var table = widget.find('.timepicker-seconds table'),\n                    currentSecond = viewDate.clone().startOf('m'),\n                    html = [],\n                    row = $('<tr>');\n\n                while (viewDate.isSame(currentSecond, 'm')) {\n                    if (currentSecond.second() % 20 === 0) {\n                        row = $('<tr>');\n                        html.push(row);\n                    }\n                    row.append('<td data-action=\"selectSecond\" class=\"second' + (!isValid(currentSecond, 's') ? ' disabled' : '') + '\">' + currentSecond.format('ss') + '</td>');\n                    currentSecond.add(5, 's');\n                }\n\n                table.empty().append(html);\n            },\n\n            fillTime = function () {\n                var toggle, newDate, timeComponents = widget.find('.timepicker span[data-time-component]');\n\n                if (!use24Hours) {\n                    toggle = widget.find('.timepicker [data-action=togglePeriod]');\n                    newDate = date.clone().add((date.hours() >= 12) ? -12 : 12, 'h');\n\n                    toggle.text(date.format('A'));\n\n                    if (isValid(newDate, 'h')) {\n                        toggle.removeClass('disabled');\n                    } else {\n                        toggle.addClass('disabled');\n                    }\n                }\n                timeComponents.filter('[data-time-component=hours]').text(date.format(use24Hours ? 'HH' : 'hh'));\n                timeComponents.filter('[data-time-component=minutes]').text(date.format('mm'));\n                timeComponents.filter('[data-time-component=seconds]').text(date.format('ss'));\n\n                fillHours();\n                fillMinutes();\n                fillSeconds();\n            },\n\n            update = function () {\n                if (!widget) {\n                    return;\n                }\n                fillDate();\n                fillTime();\n            },\n\n            setValue = function (targetMoment) {\n                var oldDate = unset ? null : date;\n\n                // case of calling setValue(null or false)\n                if (!targetMoment) {\n                    unset = true;\n                    input.val('');\n                    element.data('date', '');\n                    notifyEvent({\n                        type: 'dp.change',\n                        date: false,\n                        oldDate: oldDate\n                    });\n                    update();\n                    return;\n                }\n\n                targetMoment = targetMoment.clone().locale(options.locale);\n\n                if (options.stepping !== 1) {\n                    targetMoment.minutes((Math.round(targetMoment.minutes() / options.stepping) * options.stepping) % 60).seconds(0);\n                }\n\n                if (isValid(targetMoment)) {\n                    date = targetMoment;\n                    viewDate = date.clone();\n                    input.val(date.format(actualFormat));\n                    element.data('date', date.format(actualFormat));\n                    unset = false;\n                    update();\n                    notifyEvent({\n                        type: 'dp.change',\n                        date: date.clone(),\n                        oldDate: oldDate\n                    });\n                } else {\n                    if (!options.keepInvalid) {\n                        input.val(unset ? '' : date.format(actualFormat));\n                    }\n                    notifyEvent({\n                        type: 'dp.error',\n                        date: targetMoment\n                    });\n                }\n            },\n\n            hide = function () {\n                ///<summary>Hides the widget. Possibly will emit dp.hide</summary>\n                var transitioning = false;\n                if (!widget) {\n                    return picker;\n                }\n                // Ignore event if in the middle of a picker transition\n                widget.find('.collapse').each(function () {\n                    var collapseData = $(this).data('collapse');\n                    if (collapseData && collapseData.transitioning) {\n                        transitioning = true;\n                        return false;\n                    }\n                    return true;\n                });\n                if (transitioning) {\n                    return picker;\n                }\n                if (component && component.hasClass('btn')) {\n                    component.toggleClass('active');\n                }\n                widget.hide();\n\n                $(window).off('resize', place);\n                widget.off('click', '[data-action]');\n                widget.off('mousedown', false);\n\n                widget.remove();\n                widget = false;\n\n                notifyEvent({\n                    type: 'dp.hide',\n                    date: date.clone()\n                });\n\n                input.blur();\n\n                return picker;\n            },\n\n            clear = function () {\n                setValue(null);\n            },\n\n            /********************************************************************************\n             *\n             * Widget UI interaction functions\n             *\n             ********************************************************************************/\n            actions = {\n                next: function () {\n                    var navFnc = datePickerModes[currentViewMode].navFnc;\n                    viewDate.add(datePickerModes[currentViewMode].navStep, navFnc);\n                    fillDate();\n                    viewUpdate(navFnc);\n                },\n\n                previous: function () {\n                    var navFnc = datePickerModes[currentViewMode].navFnc;\n                    viewDate.subtract(datePickerModes[currentViewMode].navStep, navFnc);\n                    fillDate();\n                    viewUpdate(navFnc);\n                },\n\n                pickerSwitch: function () {\n                    showMode(1);\n                },\n\n                selectMonth: function (e) {\n                    var month = $(e.target).closest('tbody').find('span').index($(e.target));\n                    viewDate.month(month);\n                    if (currentViewMode === minViewModeNumber) {\n                        setValue(date.clone().year(viewDate.year()).month(viewDate.month()));\n                        if (!options.inline) {\n                            hide();\n                        }\n                    } else {\n                        showMode(-1);\n                        fillDate();\n                    }\n                    viewUpdate('M');\n                },\n\n                selectYear: function (e) {\n                    var year = parseInt($(e.target).text(), 10) || 0;\n                    viewDate.year(year);\n                    if (currentViewMode === minViewModeNumber) {\n                        setValue(date.clone().year(viewDate.year()));\n                        if (!options.inline) {\n                            hide();\n                        }\n                    } else {\n                        showMode(-1);\n                        fillDate();\n                    }\n                    viewUpdate('YYYY');\n                },\n\n                selectDecade: function (e) {\n                    var year = parseInt($(e.target).data('selection'), 10) || 0;\n                    viewDate.year(year);\n                    if (currentViewMode === minViewModeNumber) {\n                        setValue(date.clone().year(viewDate.year()));\n                        if (!options.inline) {\n                            hide();\n                        }\n                    } else {\n                        showMode(-1);\n                        fillDate();\n                    }\n                    viewUpdate('YYYY');\n                },\n\n                selectDay: function (e) {\n                    var day = viewDate.clone();\n                    if ($(e.target).is('.old')) {\n                        day.subtract(1, 'M');\n                    }\n                    if ($(e.target).is('.new')) {\n                        day.add(1, 'M');\n                    }\n                    setValue(day.date(parseInt($(e.target).text(), 10)));\n                    if (!hasTime() && !options.keepOpen && !options.inline) {\n                        hide();\n                    }\n                },\n\n                incrementHours: function () {\n                    var newDate = date.clone().add(1, 'h');\n                    if (isValid(newDate, 'h')) {\n                        setValue(newDate);\n                    }\n                },\n\n                incrementMinutes: function () {\n                    var newDate = date.clone().add(options.stepping, 'm');\n                    if (isValid(newDate, 'm')) {\n                        setValue(newDate);\n                    }\n                },\n\n                incrementSeconds: function () {\n                    var newDate = date.clone().add(1, 's');\n                    if (isValid(newDate, 's')) {\n                        setValue(newDate);\n                    }\n                },\n\n                decrementHours: function () {\n                    var newDate = date.clone().subtract(1, 'h');\n                    if (isValid(newDate, 'h')) {\n                        setValue(newDate);\n                    }\n                },\n\n                decrementMinutes: function () {\n                    var newDate = date.clone().subtract(options.stepping, 'm');\n                    if (isValid(newDate, 'm')) {\n                        setValue(newDate);\n                    }\n                },\n\n                decrementSeconds: function () {\n                    var newDate = date.clone().subtract(1, 's');\n                    if (isValid(newDate, 's')) {\n                        setValue(newDate);\n                    }\n                },\n\n                togglePeriod: function () {\n                    setValue(date.clone().add((date.hours() >= 12) ? -12 : 12, 'h'));\n                },\n\n                togglePicker: function (e) {\n                    var $this = $(e.target),\n                        $parent = $this.closest('ul'),\n                        expanded = $parent.find('.in'),\n                        closed = $parent.find('.collapse:not(.in)'),\n                        collapseData;\n\n                    if (expanded && expanded.length) {\n                        collapseData = expanded.data('collapse');\n                        if (collapseData && collapseData.transitioning) {\n                            return;\n                        }\n                        if (expanded.collapse) { // if collapse plugin is available through bootstrap.js then use it\n                            expanded.collapse('hide');\n                            closed.collapse('show');\n                        } else { // otherwise just toggle in class on the two views\n                            expanded.removeClass('in');\n                            closed.addClass('in');\n                        }\n                        if ($this.is('span')) {\n                            $this.toggleClass(options.icons.time + ' ' + options.icons.date);\n                        } else {\n                            $this.find('span').toggleClass(options.icons.time + ' ' + options.icons.date);\n                        }\n\n                        // NOTE: uncomment if toggled state will be restored in show()\n                        //if (component) {\n                        //    component.find('span').toggleClass(options.icons.time + ' ' + options.icons.date);\n                        //}\n                    }\n                },\n\n                showPicker: function () {\n                    widget.find('.timepicker > div:not(.timepicker-picker)').hide();\n                    widget.find('.timepicker .timepicker-picker').show();\n                },\n\n                showHours: function () {\n                    widget.find('.timepicker .timepicker-picker').hide();\n                    widget.find('.timepicker .timepicker-hours').show();\n                },\n\n                showMinutes: function () {\n                    widget.find('.timepicker .timepicker-picker').hide();\n                    widget.find('.timepicker .timepicker-minutes').show();\n                },\n\n                showSeconds: function () {\n                    widget.find('.timepicker .timepicker-picker').hide();\n                    widget.find('.timepicker .timepicker-seconds').show();\n                },\n\n                selectHour: function (e) {\n                    var hour = parseInt($(e.target).text(), 10);\n\n                    if (!use24Hours) {\n                        if (date.hours() >= 12) {\n                            if (hour !== 12) {\n                                hour += 12;\n                            }\n                        } else {\n                            if (hour === 12) {\n                                hour = 0;\n                            }\n                        }\n                    }\n                    setValue(date.clone().hours(hour));\n                    actions.showPicker.call(picker);\n                },\n\n                selectMinute: function (e) {\n                    setValue(date.clone().minutes(parseInt($(e.target).text(), 10)));\n                    actions.showPicker.call(picker);\n                },\n\n                selectSecond: function (e) {\n                    setValue(date.clone().seconds(parseInt($(e.target).text(), 10)));\n                    actions.showPicker.call(picker);\n                },\n\n                clear: clear,\n\n                today: function () {\n                    var todaysDate = getMoment();\n                    if (isValid(todaysDate, 'd')) {\n                        setValue(todaysDate);\n                    }\n                },\n\n                close: hide\n            },\n\n            doAction = function (e) {\n                if ($(e.currentTarget).is('.disabled')) {\n                    return false;\n                }\n                actions[$(e.currentTarget).data('action')].apply(picker, arguments);\n                return false;\n            },\n\n            show = function () {\n                ///<summary>Shows the widget. Possibly will emit dp.show and dp.change</summary>\n                var currentMoment,\n                    useCurrentGranularity = {\n                        'year': function (m) {\n                            return m.month(0).date(1).hours(0).seconds(0).minutes(0);\n                        },\n                        'month': function (m) {\n                            return m.date(1).hours(0).seconds(0).minutes(0);\n                        },\n                        'day': function (m) {\n                            return m.hours(0).seconds(0).minutes(0);\n                        },\n                        'hour': function (m) {\n                            return m.seconds(0).minutes(0);\n                        },\n                        'minute': function (m) {\n                            return m.seconds(0);\n                        }\n                    };\n\n                if (input.prop('disabled') || (!options.ignoreReadonly && input.prop('readonly')) || widget) {\n                    return picker;\n                }\n                if (input.val() !== undefined && input.val().trim().length !== 0) {\n                    setValue(parseInputDate(input.val().trim()));\n                } else if (options.useCurrent && unset && ((input.is('input') && input.val().trim().length === 0) || options.inline)) {\n                    currentMoment = getMoment();\n                    if (typeof options.useCurrent === 'string') {\n                        currentMoment = useCurrentGranularity[options.useCurrent](currentMoment);\n                    }\n                    setValue(currentMoment);\n                }\n\n                widget = getTemplate();\n\n                fillDow();\n                fillMonths();\n\n                widget.find('.timepicker-hours').hide();\n                widget.find('.timepicker-minutes').hide();\n                widget.find('.timepicker-seconds').hide();\n\n                update();\n                showMode();\n\n                $(window).on('resize', place);\n                widget.on('click', '[data-action]', doAction); // this handles clicks on the widget\n                widget.on('mousedown', false);\n\n                if (component && component.hasClass('btn')) {\n                    component.toggleClass('active');\n                }\n                widget.show();\n                place();\n\n                if (options.focusOnShow && !input.is(':focus')) {\n                    input.focus();\n                }\n\n                notifyEvent({\n                    type: 'dp.show'\n                });\n                return picker;\n            },\n\n            toggle = function () {\n                /// <summary>Shows or hides the widget</summary>\n                return (widget ? hide() : show());\n            },\n\n            parseInputDate = function (inputDate) {\n                if (options.parseInputDate === undefined) {\n                    if (moment.isMoment(inputDate) || inputDate instanceof Date) {\n                        inputDate = moment(inputDate);\n                    } else {\n                        inputDate = getMoment(inputDate);\n                    }\n                } else {\n                    inputDate = options.parseInputDate(inputDate);\n                }\n                inputDate.locale(options.locale);\n                return inputDate;\n            },\n\n            keydown = function (e) {\n                var handler = null,\n                    index,\n                    index2,\n                    pressedKeys = [],\n                    pressedModifiers = {},\n                    currentKey = e.which,\n                    keyBindKeys,\n                    allModifiersPressed,\n                    pressed = 'p';\n\n                keyState[currentKey] = pressed;\n\n                for (index in keyState) {\n                    if (keyState.hasOwnProperty(index) && keyState[index] === pressed) {\n                        pressedKeys.push(index);\n                        if (parseInt(index, 10) !== currentKey) {\n                            pressedModifiers[index] = true;\n                        }\n                    }\n                }\n\n                for (index in options.keyBinds) {\n                    if (options.keyBinds.hasOwnProperty(index) && typeof (options.keyBinds[index]) === 'function') {\n                        keyBindKeys = index.split(' ');\n                        if (keyBindKeys.length === pressedKeys.length && keyMap[currentKey] === keyBindKeys[keyBindKeys.length - 1]) {\n                            allModifiersPressed = true;\n                            for (index2 = keyBindKeys.length - 2; index2 >= 0; index2--) {\n                                if (!(keyMap[keyBindKeys[index2]] in pressedModifiers)) {\n                                    allModifiersPressed = false;\n                                    break;\n                                }\n                            }\n                            if (allModifiersPressed) {\n                                handler = options.keyBinds[index];\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (handler) {\n                    handler.call(picker, widget);\n                    e.stopPropagation();\n                    e.preventDefault();\n                }\n            },\n\n            keyup = function (e) {\n                keyState[e.which] = 'r';\n                e.stopPropagation();\n                e.preventDefault();\n            },\n\n            change = function (e) {\n                var val = $(e.target).val().trim(),\n                    parsedDate = val ? parseInputDate(val) : null;\n                setValue(parsedDate);\n                e.stopImmediatePropagation();\n                return false;\n            },\n\n            attachDatePickerElementEvents = function () {\n                input.on({\n                    'change': change,\n                    'blur': options.debug ? '' : hide,\n                    'keydown': keydown,\n                    'keyup': keyup,\n                    'focus': options.allowInputToggle ? show : ''\n                });\n\n                if (element.is('input')) {\n                    input.on({\n                        'focus': show\n                    });\n                } else if (component) {\n                    component.on('click', toggle);\n                    component.on('mousedown', false);\n                }\n            },\n\n            detachDatePickerElementEvents = function () {\n                input.off({\n                    'change': change,\n                    'blur': blur,\n                    'keydown': keydown,\n                    'keyup': keyup,\n                    'focus': options.allowInputToggle ? hide : ''\n                });\n\n                if (element.is('input')) {\n                    input.off({\n                        'focus': show\n                    });\n                } else if (component) {\n                    component.off('click', toggle);\n                    component.off('mousedown', false);\n                }\n            },\n\n            indexGivenDates = function (givenDatesArray) {\n                // Store given enabledDates and disabledDates as keys.\n                // This way we can check their existence in O(1) time instead of looping through whole array.\n                // (for example: options.enabledDates['2014-02-27'] === true)\n                var givenDatesIndexed = {};\n                $.each(givenDatesArray, function () {\n                    var dDate = parseInputDate(this);\n                    if (dDate.isValid()) {\n                        givenDatesIndexed[dDate.format('YYYY-MM-DD')] = true;\n                    }\n                });\n                return (Object.keys(givenDatesIndexed).length) ? givenDatesIndexed : false;\n            },\n\n            indexGivenHours = function (givenHoursArray) {\n                // Store given enabledHours and disabledHours as keys.\n                // This way we can check their existence in O(1) time instead of looping through whole array.\n                // (for example: options.enabledHours['2014-02-27'] === true)\n                var givenHoursIndexed = {};\n                $.each(givenHoursArray, function () {\n                    givenHoursIndexed[this] = true;\n                });\n                return (Object.keys(givenHoursIndexed).length) ? givenHoursIndexed : false;\n            },\n\n            initFormatting = function () {\n                var format = options.format || 'L LT';\n\n                actualFormat = format.replace(/(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g, function (formatInput) {\n                    var newinput = date.localeData().longDateFormat(formatInput) || formatInput;\n                    return newinput.replace(/(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g, function (formatInput2) { //temp fix for #740\n                        return date.localeData().longDateFormat(formatInput2) || formatInput2;\n                    });\n                });\n\n\n                parseFormats = options.extraFormats ? options.extraFormats.slice() : [];\n                if (parseFormats.indexOf(format) < 0 && parseFormats.indexOf(actualFormat) < 0) {\n                    parseFormats.push(actualFormat);\n                }\n\n                use24Hours = (actualFormat.toLowerCase().indexOf('a') < 1 && actualFormat.replace(/\\[.*?\\]/g, '').indexOf('h') < 1);\n\n                if (isEnabled('y')) {\n                    minViewModeNumber = 2;\n                }\n                if (isEnabled('M')) {\n                    minViewModeNumber = 1;\n                }\n                if (isEnabled('d')) {\n                    minViewModeNumber = 0;\n                }\n\n                currentViewMode = Math.max(minViewModeNumber, currentViewMode);\n\n                if (!unset) {\n                    setValue(date);\n                }\n            };\n\n        /********************************************************************************\n         *\n         * Public API functions\n         * =====================\n         *\n         * Important: Do not expose direct references to private objects or the options\n         * object to the outer world. Always return a clone when returning values or make\n         * a clone when setting a private variable.\n         *\n         ********************************************************************************/\n        picker.destroy = function () {\n            ///<summary>Destroys the widget and removes all attached event listeners</summary>\n            hide();\n            detachDatePickerElementEvents();\n            element.removeData('DateTimePicker');\n            element.removeData('date');\n        };\n\n        picker.toggle = toggle;\n\n        picker.show = show;\n\n        picker.hide = hide;\n\n        picker.disable = function () {\n            ///<summary>Disables the input element, the component is attached to, by adding a disabled=\"true\" attribute to it.\n            ///If the widget was visible before that call it is hidden. Possibly emits dp.hide</summary>\n            hide();\n            if (component && component.hasClass('btn')) {\n                component.addClass('disabled');\n            }\n            input.prop('disabled', true);\n            return picker;\n        };\n\n        picker.enable = function () {\n            ///<summary>Enables the input element, the component is attached to, by removing disabled attribute from it.</summary>\n            if (component && component.hasClass('btn')) {\n                component.removeClass('disabled');\n            }\n            input.prop('disabled', false);\n            return picker;\n        };\n\n        picker.ignoreReadonly = function (ignoreReadonly) {\n            if (arguments.length === 0) {\n                return options.ignoreReadonly;\n            }\n            if (typeof ignoreReadonly !== 'boolean') {\n                throw new TypeError('ignoreReadonly () expects a boolean parameter');\n            }\n            options.ignoreReadonly = ignoreReadonly;\n            return picker;\n        };\n\n        picker.options = function (newOptions) {\n            if (arguments.length === 0) {\n                return $.extend(true, {}, options);\n            }\n\n            if (!(newOptions instanceof Object)) {\n                throw new TypeError('options() options parameter should be an object');\n            }\n            $.extend(true, options, newOptions);\n            $.each(options, function (key, value) {\n                if (picker[key] !== undefined) {\n                    picker[key](value);\n                } else {\n                    throw new TypeError('option ' + key + ' is not recognized!');\n                }\n            });\n            return picker;\n        };\n\n        picker.date = function (newDate) {\n            ///<signature helpKeyword=\"$.fn.datetimepicker.date\">\n            ///<summary>Returns the component's model current date, a moment object or null if not set.</summary>\n            ///<returns type=\"Moment\">date.clone()</returns>\n            ///</signature>\n            ///<signature>\n            ///<summary>Sets the components model current moment to it. Passing a null value unsets the components model current moment. Parsing of the newDate parameter is made using moment library with the options.format and options.useStrict components configuration.</summary>\n            ///<param name=\"newDate\" locid=\"$.fn.datetimepicker.date_p:newDate\">Takes string, Date, moment, null parameter.</param>\n            ///</signature>\n            if (arguments.length === 0) {\n                if (unset) {\n                    return null;\n                }\n                return date.clone();\n            }\n\n            if (newDate !== null && typeof newDate !== 'string' && !moment.isMoment(newDate) && !(newDate instanceof Date)) {\n                throw new TypeError('date() parameter must be one of [null, string, moment or Date]');\n            }\n\n            setValue(newDate === null ? null : parseInputDate(newDate));\n            return picker;\n        };\n\n        picker.format = function (newFormat) {\n            ///<summary>test su</summary>\n            ///<param name=\"newFormat\">info about para</param>\n            ///<returns type=\"string|boolean\">returns foo</returns>\n            if (arguments.length === 0) {\n                return options.format;\n            }\n\n            if ((typeof newFormat !== 'string') && ((typeof newFormat !== 'boolean') || (newFormat !== false))) {\n                throw new TypeError('format() expects a sting or boolean:false parameter ' + newFormat);\n            }\n\n            options.format = newFormat;\n            if (actualFormat) {\n                initFormatting(); // reinit formatting\n            }\n            return picker;\n        };\n\n        picker.timeZone = function (newZone) {\n            if (arguments.length === 0) {\n                return options.timeZone;\n            }\n\n            options.timeZone = newZone;\n\n            return picker;\n        };\n\n        picker.dayViewHeaderFormat = function (newFormat) {\n            if (arguments.length === 0) {\n                return options.dayViewHeaderFormat;\n            }\n\n            if (typeof newFormat !== 'string') {\n                throw new TypeError('dayViewHeaderFormat() expects a string parameter');\n            }\n\n            options.dayViewHeaderFormat = newFormat;\n            return picker;\n        };\n\n        picker.extraFormats = function (formats) {\n            if (arguments.length === 0) {\n                return options.extraFormats;\n            }\n\n            if (formats !== false && !(formats instanceof Array)) {\n                throw new TypeError('extraFormats() expects an array or false parameter');\n            }\n\n            options.extraFormats = formats;\n            if (parseFormats) {\n                initFormatting(); // reinit formatting\n            }\n            return picker;\n        };\n\n        picker.disabledDates = function (dates) {\n            ///<signature helpKeyword=\"$.fn.datetimepicker.disabledDates\">\n            ///<summary>Returns an array with the currently set disabled dates on the component.</summary>\n            ///<returns type=\"array\">options.disabledDates</returns>\n            ///</signature>\n            ///<signature>\n            ///<summary>Setting this takes precedence over options.minDate, options.maxDate configuration. Also calling this function removes the configuration of\n            ///options.enabledDates if such exist.</summary>\n            ///<param name=\"dates\" locid=\"$.fn.datetimepicker.disabledDates_p:dates\">Takes an [ string or Date or moment ] of values and allows the user to select only from those days.</param>\n            ///</signature>\n            if (arguments.length === 0) {\n                return (options.disabledDates ? $.extend({}, options.disabledDates) : options.disabledDates);\n            }\n\n            if (!dates) {\n                options.disabledDates = false;\n                update();\n                return picker;\n            }\n            if (!(dates instanceof Array)) {\n                throw new TypeError('disabledDates() expects an array parameter');\n            }\n            options.disabledDates = indexGivenDates(dates);\n            options.enabledDates = false;\n            update();\n            return picker;\n        };\n\n        picker.enabledDates = function (dates) {\n            ///<signature helpKeyword=\"$.fn.datetimepicker.enabledDates\">\n            ///<summary>Returns an array with the currently set enabled dates on the component.</summary>\n            ///<returns type=\"array\">options.enabledDates</returns>\n            ///</signature>\n            ///<signature>\n            ///<summary>Setting this takes precedence over options.minDate, options.maxDate configuration. Also calling this function removes the configuration of options.disabledDates if such exist.</summary>\n            ///<param name=\"dates\" locid=\"$.fn.datetimepicker.enabledDates_p:dates\">Takes an [ string or Date or moment ] of values and allows the user to select only from those days.</param>\n            ///</signature>\n            if (arguments.length === 0) {\n                return (options.enabledDates ? $.extend({}, options.enabledDates) : options.enabledDates);\n            }\n\n            if (!dates) {\n                options.enabledDates = false;\n                update();\n                return picker;\n            }\n            if (!(dates instanceof Array)) {\n                throw new TypeError('enabledDates() expects an array parameter');\n            }\n            options.enabledDates = indexGivenDates(dates);\n            options.disabledDates = false;\n            update();\n            return picker;\n        };\n\n        picker.daysOfWeekDisabled = function (daysOfWeekDisabled) {\n            if (arguments.length === 0) {\n                return options.daysOfWeekDisabled.splice(0);\n            }\n\n            if ((typeof daysOfWeekDisabled === 'boolean') && !daysOfWeekDisabled) {\n                options.daysOfWeekDisabled = false;\n                update();\n                return picker;\n            }\n\n            if (!(daysOfWeekDisabled instanceof Array)) {\n                throw new TypeError('daysOfWeekDisabled() expects an array parameter');\n            }\n            options.daysOfWeekDisabled = daysOfWeekDisabled.reduce(function (previousValue, currentValue) {\n                currentValue = parseInt(currentValue, 10);\n                if (currentValue > 6 || currentValue < 0 || isNaN(currentValue)) {\n                    return previousValue;\n                }\n                if (previousValue.indexOf(currentValue) === -1) {\n                    previousValue.push(currentValue);\n                }\n                return previousValue;\n            }, []).sort();\n            if (options.useCurrent && !options.keepInvalid) {\n                var tries = 0;\n                while (!isValid(date, 'd')) {\n                    date.add(1, 'd');\n                    if (tries === 7) {\n                        throw 'Tried 7 times to find a valid date';\n                    }\n                    tries++;\n                }\n                setValue(date);\n            }\n            update();\n            return picker;\n        };\n\n        picker.maxDate = function (maxDate) {\n            if (arguments.length === 0) {\n                return options.maxDate ? options.maxDate.clone() : options.maxDate;\n            }\n\n            if ((typeof maxDate === 'boolean') && maxDate === false) {\n                options.maxDate = false;\n                update();\n                return picker;\n            }\n\n            if (typeof maxDate === 'string') {\n                if (maxDate === 'now' || maxDate === 'moment') {\n                    maxDate = getMoment();\n                }\n            }\n\n            var parsedDate = parseInputDate(maxDate);\n\n            if (!parsedDate.isValid()) {\n                throw new TypeError('maxDate() Could not parse date parameter: ' + maxDate);\n            }\n            if (options.minDate && parsedDate.isBefore(options.minDate)) {\n                throw new TypeError('maxDate() date parameter is before options.minDate: ' + parsedDate.format(actualFormat));\n            }\n            options.maxDate = parsedDate;\n            if (options.useCurrent && !options.keepInvalid && date.isAfter(maxDate)) {\n                setValue(options.maxDate);\n            }\n            if (viewDate.isAfter(parsedDate)) {\n                viewDate = parsedDate.clone().subtract(options.stepping, 'm');\n            }\n            update();\n            return picker;\n        };\n\n        picker.minDate = function (minDate) {\n            if (arguments.length === 0) {\n                return options.minDate ? options.minDate.clone() : options.minDate;\n            }\n\n            if ((typeof minDate === 'boolean') && minDate === false) {\n                options.minDate = false;\n                update();\n                return picker;\n            }\n\n            if (typeof minDate === 'string') {\n                if (minDate === 'now' || minDate === 'moment') {\n                    minDate = getMoment();\n                }\n            }\n\n            var parsedDate = parseInputDate(minDate);\n\n            if (!parsedDate.isValid()) {\n                throw new TypeError('minDate() Could not parse date parameter: ' + minDate);\n            }\n            if (options.maxDate && parsedDate.isAfter(options.maxDate)) {\n                throw new TypeError('minDate() date parameter is after options.maxDate: ' + parsedDate.format(actualFormat));\n            }\n            options.minDate = parsedDate;\n            if (options.useCurrent && !options.keepInvalid && date.isBefore(minDate)) {\n                setValue(options.minDate);\n            }\n            if (viewDate.isBefore(parsedDate)) {\n                viewDate = parsedDate.clone().add(options.stepping, 'm');\n            }\n            update();\n            return picker;\n        };\n\n        picker.defaultDate = function (defaultDate) {\n            ///<signature helpKeyword=\"$.fn.datetimepicker.defaultDate\">\n            ///<summary>Returns a moment with the options.defaultDate option configuration or false if not set</summary>\n            ///<returns type=\"Moment\">date.clone()</returns>\n            ///</signature>\n            ///<signature>\n            ///<summary>Will set the picker's inital date. If a boolean:false value is passed the options.defaultDate parameter is cleared.</summary>\n            ///<param name=\"defaultDate\" locid=\"$.fn.datetimepicker.defaultDate_p:defaultDate\">Takes a string, Date, moment, boolean:false</param>\n            ///</signature>\n            if (arguments.length === 0) {\n                return options.defaultDate ? options.defaultDate.clone() : options.defaultDate;\n            }\n            if (!defaultDate) {\n                options.defaultDate = false;\n                return picker;\n            }\n\n            if (typeof defaultDate === 'string') {\n                if (defaultDate === 'now' || defaultDate === 'moment') {\n                    defaultDate = getMoment();\n                }\n            }\n\n            var parsedDate = parseInputDate(defaultDate);\n            if (!parsedDate.isValid()) {\n                throw new TypeError('defaultDate() Could not parse date parameter: ' + defaultDate);\n            }\n            if (!isValid(parsedDate)) {\n                throw new TypeError('defaultDate() date passed is invalid according to component setup validations');\n            }\n\n            options.defaultDate = parsedDate;\n\n            if ((options.defaultDate && options.inline) || input.val().trim() === '') {\n                setValue(options.defaultDate);\n            }\n            return picker;\n        };\n\n        picker.locale = function (locale) {\n            if (arguments.length === 0) {\n                return options.locale;\n            }\n\n            if (!moment.localeData(locale)) {\n                throw new TypeError('locale() locale ' + locale + ' is not loaded from moment locales!');\n            }\n\n            options.locale = locale;\n            date.locale(options.locale);\n            viewDate.locale(options.locale);\n\n            if (actualFormat) {\n                initFormatting(); // reinit formatting\n            }\n            if (widget) {\n                hide();\n                show();\n            }\n            return picker;\n        };\n\n        picker.stepping = function (stepping) {\n            if (arguments.length === 0) {\n                return options.stepping;\n            }\n\n            stepping = parseInt(stepping, 10);\n            if (isNaN(stepping) || stepping < 1) {\n                stepping = 1;\n            }\n            options.stepping = stepping;\n            return picker;\n        };\n\n        picker.useCurrent = function (useCurrent) {\n            var useCurrentOptions = ['year', 'month', 'day', 'hour', 'minute'];\n            if (arguments.length === 0) {\n                return options.useCurrent;\n            }\n\n            if ((typeof useCurrent !== 'boolean') && (typeof useCurrent !== 'string')) {\n                throw new TypeError('useCurrent() expects a boolean or string parameter');\n            }\n            if (typeof useCurrent === 'string' && useCurrentOptions.indexOf(useCurrent.toLowerCase()) === -1) {\n                throw new TypeError('useCurrent() expects a string parameter of ' + useCurrentOptions.join(', '));\n            }\n            options.useCurrent = useCurrent;\n            return picker;\n        };\n\n        picker.collapse = function (collapse) {\n            if (arguments.length === 0) {\n                return options.collapse;\n            }\n\n            if (typeof collapse !== 'boolean') {\n                throw new TypeError('collapse() expects a boolean parameter');\n            }\n            if (options.collapse === collapse) {\n                return picker;\n            }\n            options.collapse = collapse;\n            if (widget) {\n                hide();\n                show();\n            }\n            return picker;\n        };\n\n        picker.icons = function (icons) {\n            if (arguments.length === 0) {\n                return $.extend({}, options.icons);\n            }\n\n            if (!(icons instanceof Object)) {\n                throw new TypeError('icons() expects parameter to be an Object');\n            }\n            $.extend(options.icons, icons);\n            if (widget) {\n                hide();\n                show();\n            }\n            return picker;\n        };\n\n        picker.tooltips = function (tooltips) {\n            if (arguments.length === 0) {\n                return $.extend({}, options.tooltips);\n            }\n\n            if (!(tooltips instanceof Object)) {\n                throw new TypeError('tooltips() expects parameter to be an Object');\n            }\n            $.extend(options.tooltips, tooltips);\n            if (widget) {\n                hide();\n                show();\n            }\n            return picker;\n        };\n\n        picker.useStrict = function (useStrict) {\n            if (arguments.length === 0) {\n                return options.useStrict;\n            }\n\n            if (typeof useStrict !== 'boolean') {\n                throw new TypeError('useStrict() expects a boolean parameter');\n            }\n            options.useStrict = useStrict;\n            return picker;\n        };\n\n        picker.sideBySide = function (sideBySide) {\n            if (arguments.length === 0) {\n                return options.sideBySide;\n            }\n\n            if (typeof sideBySide !== 'boolean') {\n                throw new TypeError('sideBySide() expects a boolean parameter');\n            }\n            options.sideBySide = sideBySide;\n            if (widget) {\n                hide();\n                show();\n            }\n            return picker;\n        };\n\n        picker.viewMode = function (viewMode) {\n            if (arguments.length === 0) {\n                return options.viewMode;\n            }\n\n            if (typeof viewMode !== 'string') {\n                throw new TypeError('viewMode() expects a string parameter');\n            }\n\n            if (viewModes.indexOf(viewMode) === -1) {\n                throw new TypeError('viewMode() parameter must be one of (' + viewModes.join(', ') + ') value');\n            }\n\n            options.viewMode = viewMode;\n            currentViewMode = Math.max(viewModes.indexOf(viewMode), minViewModeNumber);\n\n            showMode();\n            return picker;\n        };\n\n        picker.toolbarPlacement = function (toolbarPlacement) {\n            if (arguments.length === 0) {\n                return options.toolbarPlacement;\n            }\n\n            if (typeof toolbarPlacement !== 'string') {\n                throw new TypeError('toolbarPlacement() expects a string parameter');\n            }\n            if (toolbarPlacements.indexOf(toolbarPlacement) === -1) {\n                throw new TypeError('toolbarPlacement() parameter must be one of (' + toolbarPlacements.join(', ') + ') value');\n            }\n            options.toolbarPlacement = toolbarPlacement;\n\n            if (widget) {\n                hide();\n                show();\n            }\n            return picker;\n        };\n\n        picker.widgetPositioning = function (widgetPositioning) {\n            if (arguments.length === 0) {\n                return $.extend({}, options.widgetPositioning);\n            }\n\n            if (({}).toString.call(widgetPositioning) !== '[object Object]') {\n                throw new TypeError('widgetPositioning() expects an object variable');\n            }\n            if (widgetPositioning.horizontal) {\n                if (typeof widgetPositioning.horizontal !== 'string') {\n                    throw new TypeError('widgetPositioning() horizontal variable must be a string');\n                }\n                widgetPositioning.horizontal = widgetPositioning.horizontal.toLowerCase();\n                if (horizontalModes.indexOf(widgetPositioning.horizontal) === -1) {\n                    throw new TypeError('widgetPositioning() expects horizontal parameter to be one of (' + horizontalModes.join(', ') + ')');\n                }\n                options.widgetPositioning.horizontal = widgetPositioning.horizontal;\n            }\n            if (widgetPositioning.vertical) {\n                if (typeof widgetPositioning.vertical !== 'string') {\n                    throw new TypeError('widgetPositioning() vertical variable must be a string');\n                }\n                widgetPositioning.vertical = widgetPositioning.vertical.toLowerCase();\n                if (verticalModes.indexOf(widgetPositioning.vertical) === -1) {\n                    throw new TypeError('widgetPositioning() expects vertical parameter to be one of (' + verticalModes.join(', ') + ')');\n                }\n                options.widgetPositioning.vertical = widgetPositioning.vertical;\n            }\n            update();\n            return picker;\n        };\n\n        picker.calendarWeeks = function (calendarWeeks) {\n            if (arguments.length === 0) {\n                return options.calendarWeeks;\n            }\n\n            if (typeof calendarWeeks !== 'boolean') {\n                throw new TypeError('calendarWeeks() expects parameter to be a boolean value');\n            }\n\n            options.calendarWeeks = calendarWeeks;\n            update();\n            return picker;\n        };\n\n        picker.showTodayButton = function (showTodayButton) {\n            if (arguments.length === 0) {\n                return options.showTodayButton;\n            }\n\n            if (typeof showTodayButton !== 'boolean') {\n                throw new TypeError('showTodayButton() expects a boolean parameter');\n            }\n\n            options.showTodayButton = showTodayButton;\n            if (widget) {\n                hide();\n                show();\n            }\n            return picker;\n        };\n\n        picker.showClear = function (showClear) {\n            if (arguments.length === 0) {\n                return options.showClear;\n            }\n\n            if (typeof showClear !== 'boolean') {\n                throw new TypeError('showClear() expects a boolean parameter');\n            }\n\n            options.showClear = showClear;\n            if (widget) {\n                hide();\n                show();\n            }\n            return picker;\n        };\n\n        picker.widgetParent = function (widgetParent) {\n            if (arguments.length === 0) {\n                return options.widgetParent;\n            }\n\n            if (typeof widgetParent === 'string') {\n                widgetParent = $(widgetParent);\n            }\n\n            if (widgetParent !== null && (typeof widgetParent !== 'string' && !(widgetParent instanceof $))) {\n                throw new TypeError('widgetParent() expects a string or a jQuery object parameter');\n            }\n\n            options.widgetParent = widgetParent;\n            if (widget) {\n                hide();\n                show();\n            }\n            return picker;\n        };\n\n        picker.keepOpen = function (keepOpen) {\n            if (arguments.length === 0) {\n                return options.keepOpen;\n            }\n\n            if (typeof keepOpen !== 'boolean') {\n                throw new TypeError('keepOpen() expects a boolean parameter');\n            }\n\n            options.keepOpen = keepOpen;\n            return picker;\n        };\n\n        picker.focusOnShow = function (focusOnShow) {\n            if (arguments.length === 0) {\n                return options.focusOnShow;\n            }\n\n            if (typeof focusOnShow !== 'boolean') {\n                throw new TypeError('focusOnShow() expects a boolean parameter');\n            }\n\n            options.focusOnShow = focusOnShow;\n            return picker;\n        };\n\n        picker.inline = function (inline) {\n            if (arguments.length === 0) {\n                return options.inline;\n            }\n\n            if (typeof inline !== 'boolean') {\n                throw new TypeError('inline() expects a boolean parameter');\n            }\n\n            options.inline = inline;\n            return picker;\n        };\n\n        picker.clear = function () {\n            clear();\n            return picker;\n        };\n\n        picker.keyBinds = function (keyBinds) {\n            options.keyBinds = keyBinds;\n            return picker;\n        };\n\n        picker.getMoment = function (d) {\n            return getMoment(d);\n        };\n\n        picker.debug = function (debug) {\n            if (typeof debug !== 'boolean') {\n                throw new TypeError('debug() expects a boolean parameter');\n            }\n\n            options.debug = debug;\n            return picker;\n        };\n\n        picker.allowInputToggle = function (allowInputToggle) {\n            if (arguments.length === 0) {\n                return options.allowInputToggle;\n            }\n\n            if (typeof allowInputToggle !== 'boolean') {\n                throw new TypeError('allowInputToggle() expects a boolean parameter');\n            }\n\n            options.allowInputToggle = allowInputToggle;\n            return picker;\n        };\n\n        picker.showClose = function (showClose) {\n            if (arguments.length === 0) {\n                return options.showClose;\n            }\n\n            if (typeof showClose !== 'boolean') {\n                throw new TypeError('showClose() expects a boolean parameter');\n            }\n\n            options.showClose = showClose;\n            return picker;\n        };\n\n        picker.keepInvalid = function (keepInvalid) {\n            if (arguments.length === 0) {\n                return options.keepInvalid;\n            }\n\n            if (typeof keepInvalid !== 'boolean') {\n                throw new TypeError('keepInvalid() expects a boolean parameter');\n            }\n            options.keepInvalid = keepInvalid;\n            return picker;\n        };\n\n        picker.datepickerInput = function (datepickerInput) {\n            if (arguments.length === 0) {\n                return options.datepickerInput;\n            }\n\n            if (typeof datepickerInput !== 'string') {\n                throw new TypeError('datepickerInput() expects a string parameter');\n            }\n\n            options.datepickerInput = datepickerInput;\n            return picker;\n        };\n\n        picker.parseInputDate = function (parseInputDate) {\n            if (arguments.length === 0) {\n                return options.parseInputDate;\n            }\n\n            if (typeof parseInputDate !== 'function') {\n                throw new TypeError('parseInputDate() sholud be as function');\n            }\n\n            options.parseInputDate = parseInputDate;\n\n            return picker;\n        };\n\n        picker.disabledTimeIntervals = function (disabledTimeIntervals) {\n            ///<signature helpKeyword=\"$.fn.datetimepicker.disabledTimeIntervals\">\n            ///<summary>Returns an array with the currently set disabled dates on the component.</summary>\n            ///<returns type=\"array\">options.disabledTimeIntervals</returns>\n            ///</signature>\n            ///<signature>\n            ///<summary>Setting this takes precedence over options.minDate, options.maxDate configuration. Also calling this function removes the configuration of\n            ///options.enabledDates if such exist.</summary>\n            ///<param name=\"dates\" locid=\"$.fn.datetimepicker.disabledTimeIntervals_p:dates\">Takes an [ string or Date or moment ] of values and allows the user to select only from those days.</param>\n            ///</signature>\n            if (arguments.length === 0) {\n                return (options.disabledTimeIntervals ? $.extend({}, options.disabledTimeIntervals) : options.disabledTimeIntervals);\n            }\n\n            if (!disabledTimeIntervals) {\n                options.disabledTimeIntervals = false;\n                update();\n                return picker;\n            }\n            if (!(disabledTimeIntervals instanceof Array)) {\n                throw new TypeError('disabledTimeIntervals() expects an array parameter');\n            }\n            options.disabledTimeIntervals = disabledTimeIntervals;\n            update();\n            return picker;\n        };\n\n        picker.disabledHours = function (hours) {\n            ///<signature helpKeyword=\"$.fn.datetimepicker.disabledHours\">\n            ///<summary>Returns an array with the currently set disabled hours on the component.</summary>\n            ///<returns type=\"array\">options.disabledHours</returns>\n            ///</signature>\n            ///<signature>\n            ///<summary>Setting this takes precedence over options.minDate, options.maxDate configuration. Also calling this function removes the configuration of\n            ///options.enabledHours if such exist.</summary>\n            ///<param name=\"hours\" locid=\"$.fn.datetimepicker.disabledHours_p:hours\">Takes an [ int ] of values and disallows the user to select only from those hours.</param>\n            ///</signature>\n            if (arguments.length === 0) {\n                return (options.disabledHours ? $.extend({}, options.disabledHours) : options.disabledHours);\n            }\n\n            if (!hours) {\n                options.disabledHours = false;\n                update();\n                return picker;\n            }\n            if (!(hours instanceof Array)) {\n                throw new TypeError('disabledHours() expects an array parameter');\n            }\n            options.disabledHours = indexGivenHours(hours);\n            options.enabledHours = false;\n            if (options.useCurrent && !options.keepInvalid) {\n                var tries = 0;\n                while (!isValid(date, 'h')) {\n                    date.add(1, 'h');\n                    if (tries === 24) {\n                        throw 'Tried 24 times to find a valid date';\n                    }\n                    tries++;\n                }\n                setValue(date);\n            }\n            update();\n            return picker;\n        };\n\n        picker.enabledHours = function (hours) {\n            ///<signature helpKeyword=\"$.fn.datetimepicker.enabledHours\">\n            ///<summary>Returns an array with the currently set enabled hours on the component.</summary>\n            ///<returns type=\"array\">options.enabledHours</returns>\n            ///</signature>\n            ///<signature>\n            ///<summary>Setting this takes precedence over options.minDate, options.maxDate configuration. Also calling this function removes the configuration of options.disabledHours if such exist.</summary>\n            ///<param name=\"hours\" locid=\"$.fn.datetimepicker.enabledHours_p:hours\">Takes an [ int ] of values and allows the user to select only from those hours.</param>\n            ///</signature>\n            if (arguments.length === 0) {\n                return (options.enabledHours ? $.extend({}, options.enabledHours) : options.enabledHours);\n            }\n\n            if (!hours) {\n                options.enabledHours = false;\n                update();\n                return picker;\n            }\n            if (!(hours instanceof Array)) {\n                throw new TypeError('enabledHours() expects an array parameter');\n            }\n            options.enabledHours = indexGivenHours(hours);\n            options.disabledHours = false;\n            if (options.useCurrent && !options.keepInvalid) {\n                var tries = 0;\n                while (!isValid(date, 'h')) {\n                    date.add(1, 'h');\n                    if (tries === 24) {\n                        throw 'Tried 24 times to find a valid date';\n                    }\n                    tries++;\n                }\n                setValue(date);\n            }\n            update();\n            return picker;\n        };\n\n        picker.viewDate = function (newDate) {\n            ///<signature helpKeyword=\"$.fn.datetimepicker.viewDate\">\n            ///<summary>Returns the component's model current viewDate, a moment object or null if not set.</summary>\n            ///<returns type=\"Moment\">viewDate.clone()</returns>\n            ///</signature>\n            ///<signature>\n            ///<summary>Sets the components model current moment to it. Passing a null value unsets the components model current moment. Parsing of the newDate parameter is made using moment library with the options.format and options.useStrict components configuration.</summary>\n            ///<param name=\"newDate\" locid=\"$.fn.datetimepicker.date_p:newDate\">Takes string, viewDate, moment, null parameter.</param>\n            ///</signature>\n            if (arguments.length === 0) {\n                return viewDate.clone();\n            }\n\n            if (!newDate) {\n                viewDate = date.clone();\n                return picker;\n            }\n\n            if (typeof newDate !== 'string' && !moment.isMoment(newDate) && !(newDate instanceof Date)) {\n                throw new TypeError('viewDate() parameter must be one of [string, moment or Date]');\n            }\n\n            viewDate = parseInputDate(newDate);\n            viewUpdate();\n            return picker;\n        };\n\n        // initializing element and component attributes\n        if (element.is('input')) {\n            input = element;\n        } else {\n            input = element.find(options.datepickerInput);\n            if (input.size() === 0) {\n                input = element.find('input');\n            } else if (!input.is('input')) {\n                throw new Error('CSS class \"' + options.datepickerInput + '\" cannot be applied to non input element');\n            }\n        }\n\n        if (element.hasClass('input-group')) {\n            // in case there is more then one 'input-group-addon' Issue #48\n            if (element.find('.datepickerbutton').size() === 0) {\n                component = element.find('.input-group-addon');\n            } else {\n                component = element.find('.datepickerbutton');\n            }\n        }\n\n        if (!options.inline && !input.is('input')) {\n            throw new Error('Could not initialize DateTimePicker without an input element');\n        }\n\n        // Set defaults for date here now instead of in var declaration\n        date = getMoment();\n        viewDate = date.clone();\n\n        $.extend(true, options, dataToOptions());\n\n        picker.options(options);\n\n        initFormatting();\n\n        attachDatePickerElementEvents();\n\n        if (input.prop('disabled')) {\n            picker.disable();\n        }\n        if (input.is('input') && input.val().trim().length !== 0) {\n            setValue(parseInputDate(input.val().trim()));\n        }\n        else if (options.defaultDate && input.attr('placeholder') === undefined) {\n            setValue(options.defaultDate);\n        }\n        if (options.inline) {\n            show();\n        }\n        return picker;\n    };\n\n    /********************************************************************************\n     *\n     * jQuery plugin constructor and defaults object\n     *\n     ********************************************************************************/\n\n    $.fn.datetimepicker = function (options) {\n        return this.each(function () {\n            var $this = $(this);\n            if (!$this.data('DateTimePicker')) {\n                // create a private copy of the defaults object\n                options = $.extend(true, {}, $.fn.datetimepicker.defaults, options);\n                $this.data('DateTimePicker', dateTimePicker($this, options));\n            }\n        });\n    };\n\n    $.fn.datetimepicker.defaults = {\n        timeZone: 'Etc/UTC',\n        format: false,\n        dayViewHeaderFormat: 'MMMM YYYY',\n        extraFormats: false,\n        stepping: 1,\n        minDate: false,\n        maxDate: false,\n        useCurrent: true,\n        collapse: true,\n        locale: moment.locale(),\n        defaultDate: false,\n        disabledDates: false,\n        enabledDates: false,\n        icons: {\n            time: 'glyphicon glyphicon-time',\n            date: 'glyphicon glyphicon-calendar',\n            up: 'glyphicon glyphicon-chevron-up',\n            down: 'glyphicon glyphicon-chevron-down',\n            previous: 'glyphicon glyphicon-chevron-left',\n            next: 'glyphicon glyphicon-chevron-right',\n            today: 'glyphicon glyphicon-screenshot',\n            clear: 'glyphicon glyphicon-trash',\n            close: 'glyphicon glyphicon-remove'\n        },\n        tooltips: {\n            today: 'Go to today',\n            clear: 'Clear selection',\n            close: 'Close the picker',\n            selectMonth: 'Select Month',\n            prevMonth: 'Previous Month',\n            nextMonth: 'Next Month',\n            selectYear: 'Select Year',\n            prevYear: 'Previous Year',\n            nextYear: 'Next Year',\n            selectDecade: 'Select Decade',\n            prevDecade: 'Previous Decade',\n            nextDecade: 'Next Decade',\n            prevCentury: 'Previous Century',\n            nextCentury: 'Next Century',\n            pickHour: 'Pick Hour',\n            incrementHour: 'Increment Hour',\n            decrementHour: 'Decrement Hour',\n            pickMinute: 'Pick Minute',\n            incrementMinute: 'Increment Minute',\n            decrementMinute: 'Decrement Minute',\n            pickSecond: 'Pick Second',\n            incrementSecond: 'Increment Second',\n            decrementSecond: 'Decrement Second',\n            togglePeriod: 'Toggle Period',\n            selectTime: 'Select Time'\n        },\n        useStrict: false,\n        sideBySide: false,\n        daysOfWeekDisabled: false,\n        calendarWeeks: false,\n        viewMode: 'days',\n        toolbarPlacement: 'default',\n        showTodayButton: false,\n        showClear: false,\n        showClose: false,\n        widgetPositioning: {\n            horizontal: 'auto',\n            vertical: 'auto'\n        },\n        widgetParent: null,\n        ignoreReadonly: false,\n        keepOpen: false,\n        focusOnShow: true,\n        inline: false,\n        keepInvalid: false,\n        datepickerInput: '.datepickerinput',\n        keyBinds: {\n            up: function (widget) {\n                if (!widget) {\n                    return;\n                }\n                var d = this.date() || this.getMoment();\n                if (widget.find('.datepicker').is(':visible')) {\n                    this.date(d.clone().subtract(7, 'd'));\n                } else {\n                    this.date(d.clone().add(this.stepping(), 'm'));\n                }\n            },\n            down: function (widget) {\n                if (!widget) {\n                    this.show();\n                    return;\n                }\n                var d = this.date() || this.getMoment();\n                if (widget.find('.datepicker').is(':visible')) {\n                    this.date(d.clone().add(7, 'd'));\n                } else {\n                    this.date(d.clone().subtract(this.stepping(), 'm'));\n                }\n            },\n            'control up': function (widget) {\n                if (!widget) {\n                    return;\n                }\n                var d = this.date() || this.getMoment();\n                if (widget.find('.datepicker').is(':visible')) {\n                    this.date(d.clone().subtract(1, 'y'));\n                } else {\n                    this.date(d.clone().add(1, 'h'));\n                }\n            },\n            'control down': function (widget) {\n                if (!widget) {\n                    return;\n                }\n                var d = this.date() || this.getMoment();\n                if (widget.find('.datepicker').is(':visible')) {\n                    this.date(d.clone().add(1, 'y'));\n                } else {\n                    this.date(d.clone().subtract(1, 'h'));\n                }\n            },\n            left: function (widget) {\n                if (!widget) {\n                    return;\n                }\n                var d = this.date() || this.getMoment();\n                if (widget.find('.datepicker').is(':visible')) {\n                    this.date(d.clone().subtract(1, 'd'));\n                }\n            },\n            right: function (widget) {\n                if (!widget) {\n                    return;\n                }\n                var d = this.date() || this.getMoment();\n                if (widget.find('.datepicker').is(':visible')) {\n                    this.date(d.clone().add(1, 'd'));\n                }\n            },\n            pageUp: function (widget) {\n                if (!widget) {\n                    return;\n                }\n                var d = this.date() || this.getMoment();\n                if (widget.find('.datepicker').is(':visible')) {\n                    this.date(d.clone().subtract(1, 'M'));\n                }\n            },\n            pageDown: function (widget) {\n                if (!widget) {\n                    return;\n                }\n                var d = this.date() || this.getMoment();\n                if (widget.find('.datepicker').is(':visible')) {\n                    this.date(d.clone().add(1, 'M'));\n                }\n            },\n            enter: function () {\n                this.hide();\n            },\n            escape: function () {\n                this.hide();\n            },\n            //tab: function (widget) { //this break the flow of the form. disabling for now\n            //    var toggle = widget.find('.picker-switch a[data-action=\"togglePicker\"]');\n            //    if(toggle.length > 0) toggle.click();\n            //},\n            'control space': function (widget) {\n                if (widget.find('.timepicker').is(':visible')) {\n                    widget.find('.btn[data-action=\"togglePeriod\"]').click();\n                }\n            },\n            t: function () {\n                this.date(this.getMoment());\n            },\n            'delete': function () {\n                this.clear();\n            }\n        },\n        debug: false,\n        allowInputToggle: false,\n        disabledTimeIntervals: false,\n        disabledHours: false,\n        enabledHours: false,\n        viewDate: false\n    };\n}));\n"]}}]