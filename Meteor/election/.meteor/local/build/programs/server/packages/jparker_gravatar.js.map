{"version":3,"sources":["meteor://ğŸ’»app/packages/jparker_gravatar/packages/jparker_gravatar.js"],"names":[],"mappingsfile":"/packages/jparker_gravatar.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////\n//                                                                             //\n// packages/jparker:gravatar/gravatar.js                                       //\n//                                                                             //\n/////////////////////////////////////////////////////////////////////////////////\n                                                                               //\n/* global Gravatar, CryptoJS, _ */                                             // 1\nGravatar = {                                                                   // 2\n                                                                               // 3\n\t/**                                                                           // 4\n\t * `cleantString` remove starting and trailing whitespaces                    // 5\n\t * and lowercase the input                                                    // 6\n\t * @param  {String} string input string that may contain leading and trailing // 7\n\t * whitespaces and uppercase letters                                          // 8\n\t * @return {String}        output cleaned string                              // 9\n\t */                                                                           // 10\n\tcleanString: function(string) {                                               // 11\n\t\treturn string.trim().toLowerCase();                                          // 12\n\t},                                                                            // 13\n                                                                               // 14\n\t/**                                                                           // 15\n\t * `isHash` check if a string match the MD5 form :                            // 16\n\t * 32 chars string containing letters from `a` to `f`                         // 17\n\t * and digits from `0` to `9`                                                 // 18\n\t * @param  {String}  string that might be a hash                              // 19\n\t * @return {Boolean}                                                          // 20\n\t */                                                                           // 21\n\tisHash: function(string) {                                                    // 22\n\t\tvar self = this;                                                             // 23\n\t\treturn /^[a-f0-9]{32}$/i.test(self.cleanString(string));                     // 24\n\t},                                                                            // 25\n                                                                               // 26\n\t/**                                                                           // 27\n\t * `hash` takes an input and run it through `CryptoJS.MD5`                    // 28\n\t * @see https://atmospherejs.com/jparker/crypto-md5                           // 29\n\t * @param  {String} string input string                                       // 30\n\t * @return {String}        md5 hash of the input                              // 31\n\t */                                                                           // 32\n\thash: function(string) {                                                      // 33\n\t\tvar self = this;                                                             // 34\n\t\treturn CryptoJS.MD5(self.cleanString(string)).toString();                    // 35\n\t},                                                                            // 36\n                                                                               // 37\n\t/**                                                                           // 38\n\t * `imageUrl` will provide the url for the avatar, given an email or a hash   // 39\n\t * and a set of options to be passed to the gravatar API                      // 40\n\t * @see https://en.gravatar.com/site/implement/images/                        // 41\n\t * @param  {String} emailOrHash email or pregenerated MD5 hash to query       // 42\n\t * gravatar with.                                                             // 43\n\t * @param  {Object} options     options to be passed to gravatar in the query // 44\n\t * string. The `secure` will be used to determine which base url to use.      // 45\n\t * @return {String}             complete url to the avatar                    // 46\n\t */                                                                           // 47\n\timageUrl: function(emailOrHash, options) {                                    // 48\n\t\tvar self = this;                                                             // 49\n\t\toptions = options || {};                                                     // 50\n                                                                               // 51\n\t\t// Want HTTPS ?                                                              // 52\n\t\tvar url = options.secure ?                                                   // 53\n\t\t\t'https://secure.gravatar.com/avatar/' :                                     // 54\n\t\t\t'http://www.gravatar.com/avatar/';                                          // 55\n                                                                               // 56\n\t\t// Is it an MD5 already ?                                                    // 57\n\t\tif (self.isHash(emailOrHash)) {                                              // 58\n\t\t\turl += emailOrHash;                                                         // 59\n\t\t} else {                                                                     // 60\n\t\t\tif (_.isUndefined(options.d)) {                                             // 61\n\t\t\t\tvar normalizedEmail = Email.normalize(emailOrHash);                        // 62\n\t\t\t\tif (normalizedEmail !== emailOrHash) {                                     // 63\n\t\t\t\t\toptions.d = url + self.hash(normalizedEmail);                             // 64\n\t\t\t\t}                                                                          // 65\n\t\t\t}                                                                           // 66\n\t\t\turl += self.hash(emailOrHash);                                              // 67\n\t\t}                                                                            // 68\n                                                                               // 69\n\t\tdelete options.secure;                                                       // 70\n                                                                               // 71\n\t\t// Have any options to pass ?                                                // 72\n\t\tvar params = _.map(options, function(val, key) {                             // 73\n\t\t\treturn key + '=' + encodeURIComponent(val);                                 // 74\n\t\t}).join('&');                                                                // 75\n                                                                               // 76\n\t\tif (params.length > 0) {                                                     // 77\n\t\t\turl += '?' + params;                                                        // 78\n\t\t}                                                                            // 79\n                                                                               // 80\n\t\treturn url;                                                                  // 81\n\t}                                                                             // 82\n};                                                                             // 83\n                                                                               // 84\n/////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}