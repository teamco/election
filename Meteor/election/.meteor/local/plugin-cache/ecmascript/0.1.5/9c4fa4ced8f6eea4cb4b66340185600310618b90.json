{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"CalEvent = new Mongo.Collection('calevent');\nif (Meteor.isClient) {\n\n    Template.dialog.events({\n        \"click .closeDialog\": function (event, template) {\n            Session.set('editing_event', null);\n        },\n        'click .updateTitle': function (evt, tmpl) {\n            var title = tmpl.find('#title').value;\n            Meteor.call('updateTitle', Session.get('editing_event'), title);\n            Session.set('editing_event', null);\n        }\n    });\n\n    Template.calendar.helpers({\n        editing_event: function () {\n            return Session.get('editing_event');\n        }\n    });\n\n    Template.dialog.helpers({\n        title: function () {\n            var ce = CalEvent.findOne({ _id: Session.get('editing_event') });\n            return ce.title;\n        }\n    });\n\n    Template.dialog.rendered = function () {\n        if (Session.get('editDialog')) {\n            var calevent = CalEvent.findOne({ _id: Session.get('editing_event') });\n            if (calevent) {\n                $('#title').val(calevent.title);\n            }\n        }\n    };\n\n    Template.calendar.rendered = function () {\n\n        var calendar = $('#calendar').fullCalendar({\n            dayClick: function (date, allDay, jsEvent, view) {\n                var calendarEvent = {};\n                calendarEvent.start = date;\n                calendarEvent.end = date;\n                calendarEvent.title = 'New Event';\n                calendarEvent.owner = Meteor.userId();\n                Meteor.call('saveCalEvent', calendarEvent);\n            },\n            eventClick: function (calEvent, jsEvent, view) {\n                Session.set('editing_event', calEvent._id);\n                $('#title').val(calEvent.title);\n            },\n            eventDrop: function (reqEvent) {\n                Meteor.call('moveEvent', reqEvent);\n            },\n            events: function (start, end, callback) {\n                var calEvents = CalEvent.find({}, { reactive: false }).fetch();\n                callback(calEvents);\n            },\n            editable: true,\n            selectable: true\n        }).data().fullCalendar;\n\n        Deps.autorun(function () {\n            CalEvent.find().fetch();\n            if (calendar) {\n                calendar.refetchEvents();\n            }\n        });\n    };\n}\n\nif (Meteor.isServer) {\n    //Meteor.startup(function () {\n    Meteor.methods({\n        'saveCalEvent': function (ce) {\n            CalEvent.insert(ce);\n        },\n        'updateTitle': function (id, title) {\n            return CalEvent.update({ _id: id }, { $set: { title: title } });\n        },\n        'moveEvent': function (reqEvent) {\n            return CalEvent.update({ _id: reqEvent._id }, {\n                $set: {\n                    start: reqEvent.start,\n                    end: reqEvent.end\n                }\n            });\n        }\n    });\n    //});\n}","ast":null,"map":{"version":3,"sources":["/client/templates/calendar/calendar.js"],"names":[],"mappings":"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","file":"/client/templates/calendar/calendar.js.map","sourcesContent":["CalEvent = new Mongo.Collection('calevent');\nif (Meteor.isClient) {\n\n    Template.dialog.events({\n        \"click .closeDialog\": function (event, template) {\n            Session.set('editing_event', null);\n        },\n        'click .updateTitle': function (evt, tmpl) {\n            var title = tmpl.find('#title').value;\n            Meteor.call('updateTitle', Session.get('editing_event'), title);\n            Session.set('editing_event', null);\n        }\n    });\n\n    Template.calendar.helpers({\n        editing_event: function () {\n            return Session.get('editing_event');\n        }\n    });\n\n    Template.dialog.helpers({\n        title: function () {\n            var ce = CalEvent.findOne({_id: Session.get('editing_event')});\n            return ce.title;\n        }\n    });\n\n    Template.dialog.rendered = function () {\n        if (Session.get('editDialog')) {\n            var calevent = CalEvent.findOne({_id: Session.get('editing_event')});\n            if (calevent) {\n                $('#title').val(calevent.title);\n            }\n        }\n    };\n\n    Template.calendar.rendered = function () {\n\n        var calendar = $('#calendar').fullCalendar({\n            dayClick: function (date, allDay, jsEvent, view) {\n                var calendarEvent = {};\n                calendarEvent.start = date;\n                calendarEvent.end = date;\n                calendarEvent.title = 'New Event';\n                calendarEvent.owner = Meteor.userId();\n                Meteor.call('saveCalEvent', calendarEvent);\n            },\n            eventClick: function (calEvent, jsEvent, view) {\n                Session.set('editing_event', calEvent._id);\n                $('#title').val(calEvent.title);\n            },\n            eventDrop: function (reqEvent) {\n                Meteor.call('moveEvent', reqEvent);\n            },\n            events: function (start, end, callback) {\n                var calEvents = CalEvent.find({}, {reactive: false}).fetch();\n                callback(calEvents);\n            },\n            editable: true,\n            selectable: true\n        }).data().fullCalendar;\n\n        Deps.autorun(function () {\n            CalEvent.find().fetch();\n            if (calendar) {\n                calendar.refetchEvents();\n            }\n        })\n    }\n}\n\nif (Meteor.isServer) {\n    //Meteor.startup(function () {\n    Meteor.methods({\n        'saveCalEvent': function (ce) {\n            CalEvent.insert(ce);\n        },\n        'updateTitle': function (id, title) {\n            return CalEvent.update({_id: id}, {$set: {title: title}});\n        },\n        'moveEvent': function (reqEvent) {\n            return CalEvent.update({_id: reqEvent._id}, {\n                $set: {\n                    start: reqEvent.start,\n                    end: reqEvent.end\n                }\n            })\n        }\n    })\n    //});\n}"]},"hash":"9c4fa4ced8f6eea4cb4b66340185600310618b90"}
