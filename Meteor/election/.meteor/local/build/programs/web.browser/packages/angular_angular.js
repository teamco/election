//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;

(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/angular_angular/angular.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * @license AngularJS v1.4.7                                                                                           // 2
 * (c) 2010-2015 Google, Inc. http://angularjs.org                                                                     // 3
 * License: MIT                                                                                                        // 4
 */                                                                                                                    // 5
(function(window, document, undefined) {'use strict';                                                                  // 6
                                                                                                                       // 7
/**                                                                                                                    // 8
 * @description                                                                                                        // 9
 *                                                                                                                     // 10
 * This object provides a utility for producing rich Error messages within                                             // 11
 * Angular. It can be called as follows:                                                                               // 12
 *                                                                                                                     // 13
 * var exampleMinErr = minErr('example');                                                                              // 14
 * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);                                                            // 15
 *                                                                                                                     // 16
 * The above creates an instance of minErr in the example namespace. The                                               // 17
 * resulting error will have a namespaced error code of example.one.  The                                              // 18
 * resulting error will replace {0} with the value of foo, and {1} with the                                            // 19
 * value of bar. The object is not restricted in the number of arguments it can                                        // 20
 * take.                                                                                                               // 21
 *                                                                                                                     // 22
 * If fewer arguments are specified than necessary for interpolation, the extra                                        // 23
 * interpolation markers will be preserved in the final string.                                                        // 24
 *                                                                                                                     // 25
 * Since data will be parsed statically during a build step, some restrictions                                         // 26
 * are applied with respect to how minErr instances are created and called.                                            // 27
 * Instances should have names of the form namespaceMinErr for a minErr created                                        // 28
 * using minErr('namespace') . Error codes, namespaces and template strings                                            // 29
 * should all be static strings, not variables or general expressions.                                                 // 30
 *                                                                                                                     // 31
 * @param {string} module The namespace to use for the new minErr instance.                                            // 32
 * @param {function} ErrorConstructor Custom error constructor to be instantiated when returning                       // 33
 *   error from returned function, for cases when a particular type of error is useful.                                // 34
 * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance                           // 35
 */                                                                                                                    // 36
                                                                                                                       // 37
function minErr(module, ErrorConstructor) {                                                                            // 38
  ErrorConstructor = ErrorConstructor || Error;                                                                        // 39
  return function() {                                                                                                  // 40
    var SKIP_INDEXES = 2;                                                                                              // 41
                                                                                                                       // 42
    var templateArgs = arguments,                                                                                      // 43
      code = templateArgs[0],                                                                                          // 44
      message = '[' + (module ? module + ':' : '') + code + '] ',                                                      // 45
      template = templateArgs[1],                                                                                      // 46
      paramPrefix, i;                                                                                                  // 47
                                                                                                                       // 48
    message += template.replace(/\{\d+\}/g, function(match) {                                                          // 49
      var index = +match.slice(1, -1),                                                                                 // 50
        shiftedIndex = index + SKIP_INDEXES;                                                                           // 51
                                                                                                                       // 52
      if (shiftedIndex < templateArgs.length) {                                                                        // 53
        return toDebugString(templateArgs[shiftedIndex]);                                                              // 54
      }                                                                                                                // 55
                                                                                                                       // 56
      return match;                                                                                                    // 57
    });                                                                                                                // 58
                                                                                                                       // 59
    message += '\nhttp://errors.angularjs.org/1.4.7/' +                                                                // 60
      (module ? module + '/' : '') + code;                                                                             // 61
                                                                                                                       // 62
    for (i = SKIP_INDEXES, paramPrefix = '?'; i < templateArgs.length; i++, paramPrefix = '&') {                       // 63
      message += paramPrefix + 'p' + (i - SKIP_INDEXES) + '=' +                                                        // 64
        encodeURIComponent(toDebugString(templateArgs[i]));                                                            // 65
    }                                                                                                                  // 66
                                                                                                                       // 67
    return new ErrorConstructor(message);                                                                              // 68
  };                                                                                                                   // 69
}                                                                                                                      // 70
                                                                                                                       // 71
/* We need to tell jshint what variables are being exported */                                                         // 72
/* global angular: true,                                                                                               // 73
  msie: true,                                                                                                          // 74
  jqLite: true,                                                                                                        // 75
  jQuery: true,                                                                                                        // 76
  slice: true,                                                                                                         // 77
  splice: true,                                                                                                        // 78
  push: true,                                                                                                          // 79
  toString: true,                                                                                                      // 80
  ngMinErr: true,                                                                                                      // 81
  angularModule: true,                                                                                                 // 82
  uid: true,                                                                                                           // 83
  REGEX_STRING_REGEXP: true,                                                                                           // 84
  VALIDITY_STATE_PROPERTY: true,                                                                                       // 85
                                                                                                                       // 86
  lowercase: true,                                                                                                     // 87
  uppercase: true,                                                                                                     // 88
  manualLowercase: true,                                                                                               // 89
  manualUppercase: true,                                                                                               // 90
  nodeName_: true,                                                                                                     // 91
  isArrayLike: true,                                                                                                   // 92
  forEach: true,                                                                                                       // 93
  forEachSorted: true,                                                                                                 // 94
  reverseParams: true,                                                                                                 // 95
  nextUid: true,                                                                                                       // 96
  setHashKey: true,                                                                                                    // 97
  extend: true,                                                                                                        // 98
  toInt: true,                                                                                                         // 99
  inherit: true,                                                                                                       // 100
  merge: true,                                                                                                         // 101
  noop: true,                                                                                                          // 102
  identity: true,                                                                                                      // 103
  valueFn: true,                                                                                                       // 104
  isUndefined: true,                                                                                                   // 105
  isDefined: true,                                                                                                     // 106
  isObject: true,                                                                                                      // 107
  isBlankObject: true,                                                                                                 // 108
  isString: true,                                                                                                      // 109
  isNumber: true,                                                                                                      // 110
  isDate: true,                                                                                                        // 111
  isArray: true,                                                                                                       // 112
  isFunction: true,                                                                                                    // 113
  isRegExp: true,                                                                                                      // 114
  isWindow: true,                                                                                                      // 115
  isScope: true,                                                                                                       // 116
  isFile: true,                                                                                                        // 117
  isFormData: true,                                                                                                    // 118
  isBlob: true,                                                                                                        // 119
  isBoolean: true,                                                                                                     // 120
  isPromiseLike: true,                                                                                                 // 121
  trim: true,                                                                                                          // 122
  escapeForRegexp: true,                                                                                               // 123
  isElement: true,                                                                                                     // 124
  makeMap: true,                                                                                                       // 125
  includes: true,                                                                                                      // 126
  arrayRemove: true,                                                                                                   // 127
  copy: true,                                                                                                          // 128
  shallowCopy: true,                                                                                                   // 129
  equals: true,                                                                                                        // 130
  csp: true,                                                                                                           // 131
  jq: true,                                                                                                            // 132
  concat: true,                                                                                                        // 133
  sliceArgs: true,                                                                                                     // 134
  bind: true,                                                                                                          // 135
  toJsonReplacer: true,                                                                                                // 136
  toJson: true,                                                                                                        // 137
  fromJson: true,                                                                                                      // 138
  convertTimezoneToLocal: true,                                                                                        // 139
  timezoneToOffset: true,                                                                                              // 140
  startingTag: true,                                                                                                   // 141
  tryDecodeURIComponent: true,                                                                                         // 142
  parseKeyValue: true,                                                                                                 // 143
  toKeyValue: true,                                                                                                    // 144
  encodeUriSegment: true,                                                                                              // 145
  encodeUriQuery: true,                                                                                                // 146
  angularInit: true,                                                                                                   // 147
  bootstrap: true,                                                                                                     // 148
  getTestability: true,                                                                                                // 149
  snake_case: true,                                                                                                    // 150
  bindJQuery: true,                                                                                                    // 151
  assertArg: true,                                                                                                     // 152
  assertArgFn: true,                                                                                                   // 153
  assertNotHasOwnProperty: true,                                                                                       // 154
  getter: true,                                                                                                        // 155
  getBlockNodes: true,                                                                                                 // 156
  hasOwnProperty: true,                                                                                                // 157
  createMap: true,                                                                                                     // 158
                                                                                                                       // 159
  NODE_TYPE_ELEMENT: true,                                                                                             // 160
  NODE_TYPE_ATTRIBUTE: true,                                                                                           // 161
  NODE_TYPE_TEXT: true,                                                                                                // 162
  NODE_TYPE_COMMENT: true,                                                                                             // 163
  NODE_TYPE_DOCUMENT: true,                                                                                            // 164
  NODE_TYPE_DOCUMENT_FRAGMENT: true,                                                                                   // 165
*/                                                                                                                     // 166
                                                                                                                       // 167
////////////////////////////////////                                                                                   // 168
                                                                                                                       // 169
/**                                                                                                                    // 170
 * @ngdoc module                                                                                                       // 171
 * @name ng                                                                                                            // 172
 * @module ng                                                                                                          // 173
 * @description                                                                                                        // 174
 *                                                                                                                     // 175
 * # ng (core module)                                                                                                  // 176
 * The ng module is loaded by default when an AngularJS application is started. The module itself                      // 177
 * contains the essential components for an AngularJS application to function. The table below                         // 178
 * lists a high level breakdown of each of the services/factories, filters, directives and testing                     // 179
 * components available within this core module.                                                                       // 180
 *                                                                                                                     // 181
 * <div doc-module-components="ng"></div>                                                                              // 182
 */                                                                                                                    // 183
                                                                                                                       // 184
var REGEX_STRING_REGEXP = /^\/(.+)\/([a-z]*)$/;                                                                        // 185
                                                                                                                       // 186
// The name of a form control's ValidityState property.                                                                // 187
// This is used so that it's possible for internal tests to create mock ValidityStates.                                // 188
var VALIDITY_STATE_PROPERTY = 'validity';                                                                              // 189
                                                                                                                       // 190
/**                                                                                                                    // 191
 * @ngdoc function                                                                                                     // 192
 * @name angular.lowercase                                                                                             // 193
 * @module ng                                                                                                          // 194
 * @kind function                                                                                                      // 195
 *                                                                                                                     // 196
 * @description Converts the specified string to lowercase.                                                            // 197
 * @param {string} string String to be converted to lowercase.                                                         // 198
 * @returns {string} Lowercased string.                                                                                // 199
 */                                                                                                                    // 200
var lowercase = function(string) {return isString(string) ? string.toLowerCase() : string;};                           // 201
var hasOwnProperty = Object.prototype.hasOwnProperty;                                                                  // 202
                                                                                                                       // 203
/**                                                                                                                    // 204
 * @ngdoc function                                                                                                     // 205
 * @name angular.uppercase                                                                                             // 206
 * @module ng                                                                                                          // 207
 * @kind function                                                                                                      // 208
 *                                                                                                                     // 209
 * @description Converts the specified string to uppercase.                                                            // 210
 * @param {string} string String to be converted to uppercase.                                                         // 211
 * @returns {string} Uppercased string.                                                                                // 212
 */                                                                                                                    // 213
var uppercase = function(string) {return isString(string) ? string.toUpperCase() : string;};                           // 214
                                                                                                                       // 215
                                                                                                                       // 216
var manualLowercase = function(s) {                                                                                    // 217
  /* jshint bitwise: false */                                                                                          // 218
  return isString(s)                                                                                                   // 219
      ? s.replace(/[A-Z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) | 32);})                         // 220
      : s;                                                                                                             // 221
};                                                                                                                     // 222
var manualUppercase = function(s) {                                                                                    // 223
  /* jshint bitwise: false */                                                                                          // 224
  return isString(s)                                                                                                   // 225
      ? s.replace(/[a-z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) & ~32);})                        // 226
      : s;                                                                                                             // 227
};                                                                                                                     // 228
                                                                                                                       // 229
                                                                                                                       // 230
// String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish                    // 231
// locale, for this reason we need to detect this case and redefine lowercase/uppercase methods                        // 232
// with correct but slower alternatives.                                                                               // 233
if ('i' !== 'I'.toLowerCase()) {                                                                                       // 234
  lowercase = manualLowercase;                                                                                         // 235
  uppercase = manualUppercase;                                                                                         // 236
}                                                                                                                      // 237
                                                                                                                       // 238
                                                                                                                       // 239
var                                                                                                                    // 240
    msie,             // holds major version number for IE, or NaN if UA is not IE.                                    // 241
    jqLite,           // delay binding since jQuery could be loaded after us.                                          // 242
    jQuery,           // delay binding                                                                                 // 243
    slice             = [].slice,                                                                                      // 244
    splice            = [].splice,                                                                                     // 245
    push              = [].push,                                                                                       // 246
    toString          = Object.prototype.toString,                                                                     // 247
    getPrototypeOf    = Object.getPrototypeOf,                                                                         // 248
    ngMinErr          = minErr('ng'),                                                                                  // 249
                                                                                                                       // 250
    /** @name angular */                                                                                               // 251
    angular           = window.angular || (window.angular = {}),                                                       // 252
    angularModule,                                                                                                     // 253
    uid               = 0;                                                                                             // 254
                                                                                                                       // 255
/**                                                                                                                    // 256
 * documentMode is an IE-only property                                                                                 // 257
 * http://msdn.microsoft.com/en-us/library/ie/cc196988(v=vs.85).aspx                                                   // 258
 */                                                                                                                    // 259
msie = document.documentMode;                                                                                          // 260
                                                                                                                       // 261
                                                                                                                       // 262
/**                                                                                                                    // 263
 * @private                                                                                                            // 264
 * @param {*} obj                                                                                                      // 265
 * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,                      // 266
 *                   String ...)                                                                                       // 267
 */                                                                                                                    // 268
function isArrayLike(obj) {                                                                                            // 269
  if (obj == null || isWindow(obj)) {                                                                                  // 270
    return false;                                                                                                      // 271
  }                                                                                                                    // 272
                                                                                                                       // 273
  // Support: iOS 8.2 (not reproducible in simulator)                                                                  // 274
  // "length" in obj used to prevent JIT error (gh-11508)                                                              // 275
  var length = "length" in Object(obj) && obj.length;                                                                  // 276
                                                                                                                       // 277
  if (obj.nodeType === NODE_TYPE_ELEMENT && length) {                                                                  // 278
    return true;                                                                                                       // 279
  }                                                                                                                    // 280
                                                                                                                       // 281
  return isString(obj) || isArray(obj) || length === 0 ||                                                              // 282
         typeof length === 'number' && length > 0 && (length - 1) in obj;                                              // 283
}                                                                                                                      // 284
                                                                                                                       // 285
/**                                                                                                                    // 286
 * @ngdoc function                                                                                                     // 287
 * @name angular.forEach                                                                                               // 288
 * @module ng                                                                                                          // 289
 * @kind function                                                                                                      // 290
 *                                                                                                                     // 291
 * @description                                                                                                        // 292
 * Invokes the `iterator` function once for each item in `obj` collection, which can be either an                      // 293
 * object or an array. The `iterator` function is invoked with `iterator(value, key, obj)`, where `value`              // 294
 * is the value of an object property or an array element, `key` is the object property key or                         // 295
 * array element index and obj is the `obj` itself. Specifying a `context` for the function is optional.               // 296
 *                                                                                                                     // 297
 * It is worth noting that `.forEach` does not iterate over inherited properties because it filters                    // 298
 * using the `hasOwnProperty` method.                                                                                  // 299
 *                                                                                                                     // 300
 * Unlike ES262's                                                                                                      // 301
 * [Array.prototype.forEach](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18),                           // 302
 * Providing 'undefined' or 'null' values for `obj` will not throw a TypeError, but rather just                        // 303
 * return the value provided.                                                                                          // 304
 *                                                                                                                     // 305
   ```js                                                                                                               // 306
     var values = {name: 'misko', gender: 'male'};                                                                     // 307
     var log = [];                                                                                                     // 308
     angular.forEach(values, function(value, key) {                                                                    // 309
       this.push(key + ': ' + value);                                                                                  // 310
     }, log);                                                                                                          // 311
     expect(log).toEqual(['name: misko', 'gender: male']);                                                             // 312
   ```                                                                                                                 // 313
 *                                                                                                                     // 314
 * @param {Object|Array} obj Object to iterate over.                                                                   // 315
 * @param {Function} iterator Iterator function.                                                                       // 316
 * @param {Object=} context Object to become context (`this`) for the iterator function.                               // 317
 * @returns {Object|Array} Reference to `obj`.                                                                         // 318
 */                                                                                                                    // 319
                                                                                                                       // 320
function forEach(obj, iterator, context) {                                                                             // 321
  var key, length;                                                                                                     // 322
  if (obj) {                                                                                                           // 323
    if (isFunction(obj)) {                                                                                             // 324
      for (key in obj) {                                                                                               // 325
        // Need to check if hasOwnProperty exists,                                                                     // 326
        // as on IE8 the result of querySelectorAll is an object without a hasOwnProperty function                     // 327
        if (key != 'prototype' && key != 'length' && key != 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {
          iterator.call(context, obj[key], key, obj);                                                                  // 329
        }                                                                                                              // 330
      }                                                                                                                // 331
    } else if (isArray(obj) || isArrayLike(obj)) {                                                                     // 332
      var isPrimitive = typeof obj !== 'object';                                                                       // 333
      for (key = 0, length = obj.length; key < length; key++) {                                                        // 334
        if (isPrimitive || key in obj) {                                                                               // 335
          iterator.call(context, obj[key], key, obj);                                                                  // 336
        }                                                                                                              // 337
      }                                                                                                                // 338
    } else if (obj.forEach && obj.forEach !== forEach) {                                                               // 339
        obj.forEach(iterator, context, obj);                                                                           // 340
    } else if (isBlankObject(obj)) {                                                                                   // 341
      // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty                 // 342
      for (key in obj) {                                                                                               // 343
        iterator.call(context, obj[key], key, obj);                                                                    // 344
      }                                                                                                                // 345
    } else if (typeof obj.hasOwnProperty === 'function') {                                                             // 346
      // Slow path for objects inheriting Object.prototype, hasOwnProperty check needed                                // 347
      for (key in obj) {                                                                                               // 348
        if (obj.hasOwnProperty(key)) {                                                                                 // 349
          iterator.call(context, obj[key], key, obj);                                                                  // 350
        }                                                                                                              // 351
      }                                                                                                                // 352
    } else {                                                                                                           // 353
      // Slow path for objects which do not have a method `hasOwnProperty`                                             // 354
      for (key in obj) {                                                                                               // 355
        if (hasOwnProperty.call(obj, key)) {                                                                           // 356
          iterator.call(context, obj[key], key, obj);                                                                  // 357
        }                                                                                                              // 358
      }                                                                                                                // 359
    }                                                                                                                  // 360
  }                                                                                                                    // 361
  return obj;                                                                                                          // 362
}                                                                                                                      // 363
                                                                                                                       // 364
function forEachSorted(obj, iterator, context) {                                                                       // 365
  var keys = Object.keys(obj).sort();                                                                                  // 366
  for (var i = 0; i < keys.length; i++) {                                                                              // 367
    iterator.call(context, obj[keys[i]], keys[i]);                                                                     // 368
  }                                                                                                                    // 369
  return keys;                                                                                                         // 370
}                                                                                                                      // 371
                                                                                                                       // 372
                                                                                                                       // 373
/**                                                                                                                    // 374
 * when using forEach the params are value, key, but it is often useful to have key, value.                            // 375
 * @param {function(string, *)} iteratorFn                                                                             // 376
 * @returns {function(*, string)}                                                                                      // 377
 */                                                                                                                    // 378
function reverseParams(iteratorFn) {                                                                                   // 379
  return function(value, key) { iteratorFn(key, value); };                                                             // 380
}                                                                                                                      // 381
                                                                                                                       // 382
/**                                                                                                                    // 383
 * A consistent way of creating unique IDs in angular.                                                                 // 384
 *                                                                                                                     // 385
 * Using simple numbers allows us to generate 28.6 million unique ids per second for 10 years before                   // 386
 * we hit number precision issues in JavaScript.                                                                       // 387
 *                                                                                                                     // 388
 * Math.pow(2,53) / 60 / 60 / 24 / 365 / 10 = 28.6M                                                                    // 389
 *                                                                                                                     // 390
 * @returns {number} an unique alpha-numeric string                                                                    // 391
 */                                                                                                                    // 392
function nextUid() {                                                                                                   // 393
  return ++uid;                                                                                                        // 394
}                                                                                                                      // 395
                                                                                                                       // 396
                                                                                                                       // 397
/**                                                                                                                    // 398
 * Set or clear the hashkey for an object.                                                                             // 399
 * @param obj object                                                                                                   // 400
 * @param h the hashkey (!truthy to delete the hashkey)                                                                // 401
 */                                                                                                                    // 402
function setHashKey(obj, h) {                                                                                          // 403
  if (h) {                                                                                                             // 404
    obj.$$hashKey = h;                                                                                                 // 405
  } else {                                                                                                             // 406
    delete obj.$$hashKey;                                                                                              // 407
  }                                                                                                                    // 408
}                                                                                                                      // 409
                                                                                                                       // 410
                                                                                                                       // 411
function baseExtend(dst, objs, deep) {                                                                                 // 412
  var h = dst.$$hashKey;                                                                                               // 413
                                                                                                                       // 414
  for (var i = 0, ii = objs.length; i < ii; ++i) {                                                                     // 415
    var obj = objs[i];                                                                                                 // 416
    if (!isObject(obj) && !isFunction(obj)) continue;                                                                  // 417
    var keys = Object.keys(obj);                                                                                       // 418
    for (var j = 0, jj = keys.length; j < jj; j++) {                                                                   // 419
      var key = keys[j];                                                                                               // 420
      var src = obj[key];                                                                                              // 421
                                                                                                                       // 422
      if (deep && isObject(src)) {                                                                                     // 423
        if (isDate(src)) {                                                                                             // 424
          dst[key] = new Date(src.valueOf());                                                                          // 425
        } else if (isRegExp(src)) {                                                                                    // 426
          dst[key] = new RegExp(src);                                                                                  // 427
        } else {                                                                                                       // 428
          if (!isObject(dst[key])) dst[key] = isArray(src) ? [] : {};                                                  // 429
          baseExtend(dst[key], [src], true);                                                                           // 430
        }                                                                                                              // 431
      } else {                                                                                                         // 432
        dst[key] = src;                                                                                                // 433
      }                                                                                                                // 434
    }                                                                                                                  // 435
  }                                                                                                                    // 436
                                                                                                                       // 437
  setHashKey(dst, h);                                                                                                  // 438
  return dst;                                                                                                          // 439
}                                                                                                                      // 440
                                                                                                                       // 441
/**                                                                                                                    // 442
 * @ngdoc function                                                                                                     // 443
 * @name angular.extend                                                                                                // 444
 * @module ng                                                                                                          // 445
 * @kind function                                                                                                      // 446
 *                                                                                                                     // 447
 * @description                                                                                                        // 448
 * Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)                  // 449
 * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so           // 450
 * by passing an empty object as the target: `var object = angular.extend({}, object1, object2)`.                      // 451
 *                                                                                                                     // 452
 * **Note:** Keep in mind that `angular.extend` does not support recursive merge (deep copy). Use                      // 453
 * {@link angular.merge} for this.                                                                                     // 454
 *                                                                                                                     // 455
 * @param {Object} dst Destination object.                                                                             // 456
 * @param {...Object} src Source object(s).                                                                            // 457
 * @returns {Object} Reference to `dst`.                                                                               // 458
 */                                                                                                                    // 459
function extend(dst) {                                                                                                 // 460
  return baseExtend(dst, slice.call(arguments, 1), false);                                                             // 461
}                                                                                                                      // 462
                                                                                                                       // 463
                                                                                                                       // 464
/**                                                                                                                    // 465
* @ngdoc function                                                                                                      // 466
* @name angular.merge                                                                                                  // 467
* @module ng                                                                                                           // 468
* @kind function                                                                                                       // 469
*                                                                                                                      // 470
* @description                                                                                                         // 471
* Deeply extends the destination object `dst` by copying own enumerable properties from the `src` object(s)            // 472
* to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so            // 473
* by passing an empty object as the target: `var object = angular.merge({}, object1, object2)`.                        // 474
*                                                                                                                      // 475
* Unlike {@link angular.extend extend()}, `merge()` recursively descends into object properties of source              // 476
* objects, performing a deep copy.                                                                                     // 477
*                                                                                                                      // 478
* @param {Object} dst Destination object.                                                                              // 479
* @param {...Object} src Source object(s).                                                                             // 480
* @returns {Object} Reference to `dst`.                                                                                // 481
*/                                                                                                                     // 482
function merge(dst) {                                                                                                  // 483
  return baseExtend(dst, slice.call(arguments, 1), true);                                                              // 484
}                                                                                                                      // 485
                                                                                                                       // 486
                                                                                                                       // 487
                                                                                                                       // 488
function toInt(str) {                                                                                                  // 489
  return parseInt(str, 10);                                                                                            // 490
}                                                                                                                      // 491
                                                                                                                       // 492
                                                                                                                       // 493
function inherit(parent, extra) {                                                                                      // 494
  return extend(Object.create(parent), extra);                                                                         // 495
}                                                                                                                      // 496
                                                                                                                       // 497
/**                                                                                                                    // 498
 * @ngdoc function                                                                                                     // 499
 * @name angular.noop                                                                                                  // 500
 * @module ng                                                                                                          // 501
 * @kind function                                                                                                      // 502
 *                                                                                                                     // 503
 * @description                                                                                                        // 504
 * A function that performs no operations. This function can be useful when writing code in the                        // 505
 * functional style.                                                                                                   // 506
   ```js                                                                                                               // 507
     function foo(callback) {                                                                                          // 508
       var result = calculateResult();                                                                                 // 509
       (callback || angular.noop)(result);                                                                             // 510
     }                                                                                                                 // 511
   ```                                                                                                                 // 512
 */                                                                                                                    // 513
function noop() {}                                                                                                     // 514
noop.$inject = [];                                                                                                     // 515
                                                                                                                       // 516
                                                                                                                       // 517
/**                                                                                                                    // 518
 * @ngdoc function                                                                                                     // 519
 * @name angular.identity                                                                                              // 520
 * @module ng                                                                                                          // 521
 * @kind function                                                                                                      // 522
 *                                                                                                                     // 523
 * @description                                                                                                        // 524
 * A function that returns its first argument. This function is useful when writing code in the                        // 525
 * functional style.                                                                                                   // 526
 *                                                                                                                     // 527
   ```js                                                                                                               // 528
     function transformer(transformationFn, value) {                                                                   // 529
       return (transformationFn || angular.identity)(value);                                                           // 530
     };                                                                                                                // 531
   ```                                                                                                                 // 532
  * @param {*} value to be returned.                                                                                   // 533
  * @returns {*} the value passed in.                                                                                  // 534
 */                                                                                                                    // 535
function identity($) {return $;}                                                                                       // 536
identity.$inject = [];                                                                                                 // 537
                                                                                                                       // 538
                                                                                                                       // 539
function valueFn(value) {return function() {return value;};}                                                           // 540
                                                                                                                       // 541
function hasCustomToString(obj) {                                                                                      // 542
  return isFunction(obj.toString) && obj.toString !== Object.prototype.toString;                                       // 543
}                                                                                                                      // 544
                                                                                                                       // 545
                                                                                                                       // 546
/**                                                                                                                    // 547
 * @ngdoc function                                                                                                     // 548
 * @name angular.isUndefined                                                                                           // 549
 * @module ng                                                                                                          // 550
 * @kind function                                                                                                      // 551
 *                                                                                                                     // 552
 * @description                                                                                                        // 553
 * Determines if a reference is undefined.                                                                             // 554
 *                                                                                                                     // 555
 * @param {*} value Reference to check.                                                                                // 556
 * @returns {boolean} True if `value` is undefined.                                                                    // 557
 */                                                                                                                    // 558
function isUndefined(value) {return typeof value === 'undefined';}                                                     // 559
                                                                                                                       // 560
                                                                                                                       // 561
/**                                                                                                                    // 562
 * @ngdoc function                                                                                                     // 563
 * @name angular.isDefined                                                                                             // 564
 * @module ng                                                                                                          // 565
 * @kind function                                                                                                      // 566
 *                                                                                                                     // 567
 * @description                                                                                                        // 568
 * Determines if a reference is defined.                                                                               // 569
 *                                                                                                                     // 570
 * @param {*} value Reference to check.                                                                                // 571
 * @returns {boolean} True if `value` is defined.                                                                      // 572
 */                                                                                                                    // 573
function isDefined(value) {return typeof value !== 'undefined';}                                                       // 574
                                                                                                                       // 575
                                                                                                                       // 576
/**                                                                                                                    // 577
 * @ngdoc function                                                                                                     // 578
 * @name angular.isObject                                                                                              // 579
 * @module ng                                                                                                          // 580
 * @kind function                                                                                                      // 581
 *                                                                                                                     // 582
 * @description                                                                                                        // 583
 * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not                            // 584
 * considered to be objects. Note that JavaScript arrays are objects.                                                  // 585
 *                                                                                                                     // 586
 * @param {*} value Reference to check.                                                                                // 587
 * @returns {boolean} True if `value` is an `Object` but not `null`.                                                   // 588
 */                                                                                                                    // 589
function isObject(value) {                                                                                             // 590
  // http://jsperf.com/isobject4                                                                                       // 591
  return value !== null && typeof value === 'object';                                                                  // 592
}                                                                                                                      // 593
                                                                                                                       // 594
                                                                                                                       // 595
/**                                                                                                                    // 596
 * Determine if a value is an object with a null prototype                                                             // 597
 *                                                                                                                     // 598
 * @returns {boolean} True if `value` is an `Object` with a null prototype                                             // 599
 */                                                                                                                    // 600
function isBlankObject(value) {                                                                                        // 601
  return value !== null && typeof value === 'object' && !getPrototypeOf(value);                                        // 602
}                                                                                                                      // 603
                                                                                                                       // 604
                                                                                                                       // 605
/**                                                                                                                    // 606
 * @ngdoc function                                                                                                     // 607
 * @name angular.isString                                                                                              // 608
 * @module ng                                                                                                          // 609
 * @kind function                                                                                                      // 610
 *                                                                                                                     // 611
 * @description                                                                                                        // 612
 * Determines if a reference is a `String`.                                                                            // 613
 *                                                                                                                     // 614
 * @param {*} value Reference to check.                                                                                // 615
 * @returns {boolean} True if `value` is a `String`.                                                                   // 616
 */                                                                                                                    // 617
function isString(value) {return typeof value === 'string';}                                                           // 618
                                                                                                                       // 619
                                                                                                                       // 620
/**                                                                                                                    // 621
 * @ngdoc function                                                                                                     // 622
 * @name angular.isNumber                                                                                              // 623
 * @module ng                                                                                                          // 624
 * @kind function                                                                                                      // 625
 *                                                                                                                     // 626
 * @description                                                                                                        // 627
 * Determines if a reference is a `Number`.                                                                            // 628
 *                                                                                                                     // 629
 * This includes the "special" numbers `NaN`, `+Infinity` and `-Infinity`.                                             // 630
 *                                                                                                                     // 631
 * If you wish to exclude these then you can use the native                                                            // 632
 * [`isFinite'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite)             // 633
 * method.                                                                                                             // 634
 *                                                                                                                     // 635
 * @param {*} value Reference to check.                                                                                // 636
 * @returns {boolean} True if `value` is a `Number`.                                                                   // 637
 */                                                                                                                    // 638
function isNumber(value) {return typeof value === 'number';}                                                           // 639
                                                                                                                       // 640
                                                                                                                       // 641
/**                                                                                                                    // 642
 * @ngdoc function                                                                                                     // 643
 * @name angular.isDate                                                                                                // 644
 * @module ng                                                                                                          // 645
 * @kind function                                                                                                      // 646
 *                                                                                                                     // 647
 * @description                                                                                                        // 648
 * Determines if a value is a date.                                                                                    // 649
 *                                                                                                                     // 650
 * @param {*} value Reference to check.                                                                                // 651
 * @returns {boolean} True if `value` is a `Date`.                                                                     // 652
 */                                                                                                                    // 653
function isDate(value) {                                                                                               // 654
  return toString.call(value) === '[object Date]';                                                                     // 655
}                                                                                                                      // 656
                                                                                                                       // 657
                                                                                                                       // 658
/**                                                                                                                    // 659
 * @ngdoc function                                                                                                     // 660
 * @name angular.isArray                                                                                               // 661
 * @module ng                                                                                                          // 662
 * @kind function                                                                                                      // 663
 *                                                                                                                     // 664
 * @description                                                                                                        // 665
 * Determines if a reference is an `Array`.                                                                            // 666
 *                                                                                                                     // 667
 * @param {*} value Reference to check.                                                                                // 668
 * @returns {boolean} True if `value` is an `Array`.                                                                   // 669
 */                                                                                                                    // 670
var isArray = Array.isArray;                                                                                           // 671
                                                                                                                       // 672
/**                                                                                                                    // 673
 * @ngdoc function                                                                                                     // 674
 * @name angular.isFunction                                                                                            // 675
 * @module ng                                                                                                          // 676
 * @kind function                                                                                                      // 677
 *                                                                                                                     // 678
 * @description                                                                                                        // 679
 * Determines if a reference is a `Function`.                                                                          // 680
 *                                                                                                                     // 681
 * @param {*} value Reference to check.                                                                                // 682
 * @returns {boolean} True if `value` is a `Function`.                                                                 // 683
 */                                                                                                                    // 684
function isFunction(value) {return typeof value === 'function';}                                                       // 685
                                                                                                                       // 686
                                                                                                                       // 687
/**                                                                                                                    // 688
 * Determines if a value is a regular expression object.                                                               // 689
 *                                                                                                                     // 690
 * @private                                                                                                            // 691
 * @param {*} value Reference to check.                                                                                // 692
 * @returns {boolean} True if `value` is a `RegExp`.                                                                   // 693
 */                                                                                                                    // 694
function isRegExp(value) {                                                                                             // 695
  return toString.call(value) === '[object RegExp]';                                                                   // 696
}                                                                                                                      // 697
                                                                                                                       // 698
                                                                                                                       // 699
/**                                                                                                                    // 700
 * Checks if `obj` is a window object.                                                                                 // 701
 *                                                                                                                     // 702
 * @private                                                                                                            // 703
 * @param {*} obj Object to check                                                                                      // 704
 * @returns {boolean} True if `obj` is a window obj.                                                                   // 705
 */                                                                                                                    // 706
function isWindow(obj) {                                                                                               // 707
  return obj && obj.window === obj;                                                                                    // 708
}                                                                                                                      // 709
                                                                                                                       // 710
                                                                                                                       // 711
function isScope(obj) {                                                                                                // 712
  return obj && obj.$evalAsync && obj.$watch;                                                                          // 713
}                                                                                                                      // 714
                                                                                                                       // 715
                                                                                                                       // 716
function isFile(obj) {                                                                                                 // 717
  return toString.call(obj) === '[object File]';                                                                       // 718
}                                                                                                                      // 719
                                                                                                                       // 720
                                                                                                                       // 721
function isFormData(obj) {                                                                                             // 722
  return toString.call(obj) === '[object FormData]';                                                                   // 723
}                                                                                                                      // 724
                                                                                                                       // 725
                                                                                                                       // 726
function isBlob(obj) {                                                                                                 // 727
  return toString.call(obj) === '[object Blob]';                                                                       // 728
}                                                                                                                      // 729
                                                                                                                       // 730
                                                                                                                       // 731
function isBoolean(value) {                                                                                            // 732
  return typeof value === 'boolean';                                                                                   // 733
}                                                                                                                      // 734
                                                                                                                       // 735
                                                                                                                       // 736
function isPromiseLike(obj) {                                                                                          // 737
  return obj && isFunction(obj.then);                                                                                  // 738
}                                                                                                                      // 739
                                                                                                                       // 740
                                                                                                                       // 741
var TYPED_ARRAY_REGEXP = /^\[object (Uint8(Clamped)?)|(Uint16)|(Uint32)|(Int8)|(Int16)|(Int32)|(Float(32)|(64))Array\]$/;
function isTypedArray(value) {                                                                                         // 743
  return TYPED_ARRAY_REGEXP.test(toString.call(value));                                                                // 744
}                                                                                                                      // 745
                                                                                                                       // 746
                                                                                                                       // 747
var trim = function(value) {                                                                                           // 748
  return isString(value) ? value.trim() : value;                                                                       // 749
};                                                                                                                     // 750
                                                                                                                       // 751
// Copied from:                                                                                                        // 752
// http://docs.closure-library.googlecode.com/git/local_closure_goog_string_string.js.source.html#line1021             // 753
// Prereq: s is a string.                                                                                              // 754
var escapeForRegexp = function(s) {                                                                                    // 755
  return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').                                                           // 756
           replace(/\x08/g, '\\x08');                                                                                  // 757
};                                                                                                                     // 758
                                                                                                                       // 759
                                                                                                                       // 760
/**                                                                                                                    // 761
 * @ngdoc function                                                                                                     // 762
 * @name angular.isElement                                                                                             // 763
 * @module ng                                                                                                          // 764
 * @kind function                                                                                                      // 765
 *                                                                                                                     // 766
 * @description                                                                                                        // 767
 * Determines if a reference is a DOM element (or wrapped jQuery element).                                             // 768
 *                                                                                                                     // 769
 * @param {*} value Reference to check.                                                                                // 770
 * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).                                    // 771
 */                                                                                                                    // 772
function isElement(node) {                                                                                             // 773
  return !!(node &&                                                                                                    // 774
    (node.nodeName  // we are a direct element                                                                         // 775
    || (node.prop && node.attr && node.find)));  // we have an on and find method part of jQuery API                   // 776
}                                                                                                                      // 777
                                                                                                                       // 778
/**                                                                                                                    // 779
 * @param str 'key1,key2,...'                                                                                          // 780
 * @returns {object} in the form of {key1:true, key2:true, ...}                                                        // 781
 */                                                                                                                    // 782
function makeMap(str) {                                                                                                // 783
  var obj = {}, items = str.split(","), i;                                                                             // 784
  for (i = 0; i < items.length; i++) {                                                                                 // 785
    obj[items[i]] = true;                                                                                              // 786
  }                                                                                                                    // 787
  return obj;                                                                                                          // 788
}                                                                                                                      // 789
                                                                                                                       // 790
                                                                                                                       // 791
function nodeName_(element) {                                                                                          // 792
  return lowercase(element.nodeName || (element[0] && element[0].nodeName));                                           // 793
}                                                                                                                      // 794
                                                                                                                       // 795
function includes(array, obj) {                                                                                        // 796
  return Array.prototype.indexOf.call(array, obj) != -1;                                                               // 797
}                                                                                                                      // 798
                                                                                                                       // 799
function arrayRemove(array, value) {                                                                                   // 800
  var index = array.indexOf(value);                                                                                    // 801
  if (index >= 0) {                                                                                                    // 802
    array.splice(index, 1);                                                                                            // 803
  }                                                                                                                    // 804
  return index;                                                                                                        // 805
}                                                                                                                      // 806
                                                                                                                       // 807
/**                                                                                                                    // 808
 * @ngdoc function                                                                                                     // 809
 * @name angular.copy                                                                                                  // 810
 * @module ng                                                                                                          // 811
 * @kind function                                                                                                      // 812
 *                                                                                                                     // 813
 * @description                                                                                                        // 814
 * Creates a deep copy of `source`, which should be an object or an array.                                             // 815
 *                                                                                                                     // 816
 * * If no destination is supplied, a copy of the object or array is created.                                          // 817
 * * If a destination is provided, all of its elements (for arrays) or properties (for objects)                        // 818
 *   are deleted and then all elements/properties from the source are copied to it.                                    // 819
 * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.                        // 820
 * * If `source` is identical to 'destination' an exception will be thrown.                                            // 821
 *                                                                                                                     // 822
 * @param {*} source The source that will be used to make a copy.                                                      // 823
 *                   Can be any type, including primitives, `null`, and `undefined`.                                   // 824
 * @param {(Object|Array)=} destination Destination into which the source is copied. If                                // 825
 *     provided, must be of the same type as `source`.                                                                 // 826
 * @returns {*} The copy or updated `destination`, if `destination` was specified.                                     // 827
 *                                                                                                                     // 828
 * @example                                                                                                            // 829
 <example module="copyExample">                                                                                        // 830
 <file name="index.html">                                                                                              // 831
 <div ng-controller="ExampleController">                                                                               // 832
 <form novalidate class="simple-form">                                                                                 // 833
 Name: <input type="text" ng-model="user.name" /><br />                                                                // 834
 E-mail: <input type="email" ng-model="user.email" /><br />                                                            // 835
 Gender: <input type="radio" ng-model="user.gender" value="male" />male                                                // 836
 <input type="radio" ng-model="user.gender" value="female" />female<br />                                              // 837
 <button ng-click="reset()">RESET</button>                                                                             // 838
 <button ng-click="update(user)">SAVE</button>                                                                         // 839
 </form>                                                                                                               // 840
 <pre>form = {{user | json}}</pre>                                                                                     // 841
 <pre>master = {{master | json}}</pre>                                                                                 // 842
 </div>                                                                                                                // 843
                                                                                                                       // 844
 <script>                                                                                                              // 845
  angular.module('copyExample', [])                                                                                    // 846
    .controller('ExampleController', ['$scope', function($scope) {                                                     // 847
      $scope.master= {};                                                                                               // 848
                                                                                                                       // 849
      $scope.update = function(user) {                                                                                 // 850
        // Example with 1 argument                                                                                     // 851
        $scope.master= angular.copy(user);                                                                             // 852
      };                                                                                                               // 853
                                                                                                                       // 854
      $scope.reset = function() {                                                                                      // 855
        // Example with 2 arguments                                                                                    // 856
        angular.copy($scope.master, $scope.user);                                                                      // 857
      };                                                                                                               // 858
                                                                                                                       // 859
      $scope.reset();                                                                                                  // 860
    }]);                                                                                                               // 861
 </script>                                                                                                             // 862
 </file>                                                                                                               // 863
 </example>                                                                                                            // 864
 */                                                                                                                    // 865
function copy(source, destination, stackSource, stackDest) {                                                           // 866
  if (isWindow(source) || isScope(source)) {                                                                           // 867
    throw ngMinErr('cpws',                                                                                             // 868
      "Can't copy! Making copies of Window or Scope instances is not supported.");                                     // 869
  }                                                                                                                    // 870
  if (isTypedArray(destination)) {                                                                                     // 871
    throw ngMinErr('cpta',                                                                                             // 872
      "Can't copy! TypedArray destination cannot be mutated.");                                                        // 873
  }                                                                                                                    // 874
                                                                                                                       // 875
  if (!destination) {                                                                                                  // 876
    destination = source;                                                                                              // 877
    if (isObject(source)) {                                                                                            // 878
      var index;                                                                                                       // 879
      if (stackSource && (index = stackSource.indexOf(source)) !== -1) {                                               // 880
        return stackDest[index];                                                                                       // 881
      }                                                                                                                // 882
                                                                                                                       // 883
      // TypedArray, Date and RegExp have specific copy functionality and must be                                      // 884
      // pushed onto the stack before returning.                                                                       // 885
      // Array and other objects create the base object and recurse to copy child                                      // 886
      // objects. The array/object will be pushed onto the stack when recursed.                                        // 887
      if (isArray(source)) {                                                                                           // 888
        return copy(source, [], stackSource, stackDest);                                                               // 889
      } else if (isTypedArray(source)) {                                                                               // 890
        destination = new source.constructor(source);                                                                  // 891
      } else if (isDate(source)) {                                                                                     // 892
        destination = new Date(source.getTime());                                                                      // 893
      } else if (isRegExp(source)) {                                                                                   // 894
        destination = new RegExp(source.source, source.toString().match(/[^\/]*$/)[0]);                                // 895
        destination.lastIndex = source.lastIndex;                                                                      // 896
      } else if (isFunction(source.cloneNode)) {                                                                       // 897
          destination = source.cloneNode(true);                                                                        // 898
      } else {                                                                                                         // 899
        var emptyObject = Object.create(getPrototypeOf(source));                                                       // 900
        return copy(source, emptyObject, stackSource, stackDest);                                                      // 901
      }                                                                                                                // 902
                                                                                                                       // 903
      if (stackDest) {                                                                                                 // 904
        stackSource.push(source);                                                                                      // 905
        stackDest.push(destination);                                                                                   // 906
      }                                                                                                                // 907
    }                                                                                                                  // 908
  } else {                                                                                                             // 909
    if (source === destination) throw ngMinErr('cpi',                                                                  // 910
      "Can't copy! Source and destination are identical.");                                                            // 911
                                                                                                                       // 912
    stackSource = stackSource || [];                                                                                   // 913
    stackDest = stackDest || [];                                                                                       // 914
                                                                                                                       // 915
    if (isObject(source)) {                                                                                            // 916
      stackSource.push(source);                                                                                        // 917
      stackDest.push(destination);                                                                                     // 918
    }                                                                                                                  // 919
                                                                                                                       // 920
    var result, key;                                                                                                   // 921
    if (isArray(source)) {                                                                                             // 922
      destination.length = 0;                                                                                          // 923
      for (var i = 0; i < source.length; i++) {                                                                        // 924
        destination.push(copy(source[i], null, stackSource, stackDest));                                               // 925
      }                                                                                                                // 926
    } else {                                                                                                           // 927
      var h = destination.$$hashKey;                                                                                   // 928
      if (isArray(destination)) {                                                                                      // 929
        destination.length = 0;                                                                                        // 930
      } else {                                                                                                         // 931
        forEach(destination, function(value, key) {                                                                    // 932
          delete destination[key];                                                                                     // 933
        });                                                                                                            // 934
      }                                                                                                                // 935
      if (isBlankObject(source)) {                                                                                     // 936
        // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty               // 937
        for (key in source) {                                                                                          // 938
          destination[key] = copy(source[key], null, stackSource, stackDest);                                          // 939
        }                                                                                                              // 940
      } else if (source && typeof source.hasOwnProperty === 'function') {                                              // 941
        // Slow path, which must rely on hasOwnProperty                                                                // 942
        for (key in source) {                                                                                          // 943
          if (source.hasOwnProperty(key)) {                                                                            // 944
            destination[key] = copy(source[key], null, stackSource, stackDest);                                        // 945
          }                                                                                                            // 946
        }                                                                                                              // 947
      } else {                                                                                                         // 948
        // Slowest path --- hasOwnProperty can't be called as a method                                                 // 949
        for (key in source) {                                                                                          // 950
          if (hasOwnProperty.call(source, key)) {                                                                      // 951
            destination[key] = copy(source[key], null, stackSource, stackDest);                                        // 952
          }                                                                                                            // 953
        }                                                                                                              // 954
      }                                                                                                                // 955
      setHashKey(destination,h);                                                                                       // 956
    }                                                                                                                  // 957
  }                                                                                                                    // 958
  return destination;                                                                                                  // 959
}                                                                                                                      // 960
                                                                                                                       // 961
/**                                                                                                                    // 962
 * Creates a shallow copy of an object, an array or a primitive.                                                       // 963
 *                                                                                                                     // 964
 * Assumes that there are no proto properties for objects.                                                             // 965
 */                                                                                                                    // 966
function shallowCopy(src, dst) {                                                                                       // 967
  if (isArray(src)) {                                                                                                  // 968
    dst = dst || [];                                                                                                   // 969
                                                                                                                       // 970
    for (var i = 0, ii = src.length; i < ii; i++) {                                                                    // 971
      dst[i] = src[i];                                                                                                 // 972
    }                                                                                                                  // 973
  } else if (isObject(src)) {                                                                                          // 974
    dst = dst || {};                                                                                                   // 975
                                                                                                                       // 976
    for (var key in src) {                                                                                             // 977
      if (!(key.charAt(0) === '$' && key.charAt(1) === '$')) {                                                         // 978
        dst[key] = src[key];                                                                                           // 979
      }                                                                                                                // 980
    }                                                                                                                  // 981
  }                                                                                                                    // 982
                                                                                                                       // 983
  return dst || src;                                                                                                   // 984
}                                                                                                                      // 985
                                                                                                                       // 986
                                                                                                                       // 987
/**                                                                                                                    // 988
 * @ngdoc function                                                                                                     // 989
 * @name angular.equals                                                                                                // 990
 * @module ng                                                                                                          // 991
 * @kind function                                                                                                      // 992
 *                                                                                                                     // 993
 * @description                                                                                                        // 994
 * Determines if two objects or two values are equivalent. Supports value types, regular                               // 995
 * expressions, arrays and objects.                                                                                    // 996
 *                                                                                                                     // 997
 * Two objects or values are considered equivalent if at least one of the following is true:                           // 998
 *                                                                                                                     // 999
 * * Both objects or values pass `===` comparison.                                                                     // 1000
 * * Both objects or values are of the same type and all of their properties are equal by                              // 1001
 *   comparing them with `angular.equals`.                                                                             // 1002
 * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)                       // 1003
 * * Both values represent the same regular expression (In JavaScript,                                                 // 1004
 *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual                      // 1005
 *   representation matches).                                                                                          // 1006
 *                                                                                                                     // 1007
 * During a property comparison, properties of `function` type and properties with names                               // 1008
 * that begin with `$` are ignored.                                                                                    // 1009
 *                                                                                                                     // 1010
 * Scope and DOMWindow objects are being compared only by identify (`===`).                                            // 1011
 *                                                                                                                     // 1012
 * @param {*} o1 Object or value to compare.                                                                           // 1013
 * @param {*} o2 Object or value to compare.                                                                           // 1014
 * @returns {boolean} True if arguments are equal.                                                                     // 1015
 */                                                                                                                    // 1016
function equals(o1, o2) {                                                                                              // 1017
  if (o1 === o2) return true;                                                                                          // 1018
  if (o1 === null || o2 === null) return false;                                                                        // 1019
  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN                                                              // 1020
  var t1 = typeof o1, t2 = typeof o2, length, key, keySet;                                                             // 1021
  if (t1 == t2) {                                                                                                      // 1022
    if (t1 == 'object') {                                                                                              // 1023
      if (isArray(o1)) {                                                                                               // 1024
        if (!isArray(o2)) return false;                                                                                // 1025
        if ((length = o1.length) == o2.length) {                                                                       // 1026
          for (key = 0; key < length; key++) {                                                                         // 1027
            if (!equals(o1[key], o2[key])) return false;                                                               // 1028
          }                                                                                                            // 1029
          return true;                                                                                                 // 1030
        }                                                                                                              // 1031
      } else if (isDate(o1)) {                                                                                         // 1032
        if (!isDate(o2)) return false;                                                                                 // 1033
        return equals(o1.getTime(), o2.getTime());                                                                     // 1034
      } else if (isRegExp(o1)) {                                                                                       // 1035
        return isRegExp(o2) ? o1.toString() == o2.toString() : false;                                                  // 1036
      } else {                                                                                                         // 1037
        if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) ||                                              // 1038
          isArray(o2) || isDate(o2) || isRegExp(o2)) return false;                                                     // 1039
        keySet = createMap();                                                                                          // 1040
        for (key in o1) {                                                                                              // 1041
          if (key.charAt(0) === '$' || isFunction(o1[key])) continue;                                                  // 1042
          if (!equals(o1[key], o2[key])) return false;                                                                 // 1043
          keySet[key] = true;                                                                                          // 1044
        }                                                                                                              // 1045
        for (key in o2) {                                                                                              // 1046
          if (!(key in keySet) &&                                                                                      // 1047
              key.charAt(0) !== '$' &&                                                                                 // 1048
              isDefined(o2[key]) &&                                                                                    // 1049
              !isFunction(o2[key])) return false;                                                                      // 1050
        }                                                                                                              // 1051
        return true;                                                                                                   // 1052
      }                                                                                                                // 1053
    }                                                                                                                  // 1054
  }                                                                                                                    // 1055
  return false;                                                                                                        // 1056
}                                                                                                                      // 1057
                                                                                                                       // 1058
var csp = function() {                                                                                                 // 1059
  if (!isDefined(csp.rules)) {                                                                                         // 1060
                                                                                                                       // 1061
                                                                                                                       // 1062
    var ngCspElement = (document.querySelector('[ng-csp]') ||                                                          // 1063
                    document.querySelector('[data-ng-csp]'));                                                          // 1064
                                                                                                                       // 1065
    if (ngCspElement) {                                                                                                // 1066
      var ngCspAttribute = ngCspElement.getAttribute('ng-csp') ||                                                      // 1067
                    ngCspElement.getAttribute('data-ng-csp');                                                          // 1068
      csp.rules = {                                                                                                    // 1069
        noUnsafeEval: !ngCspAttribute || (ngCspAttribute.indexOf('no-unsafe-eval') !== -1),                            // 1070
        noInlineStyle: !ngCspAttribute || (ngCspAttribute.indexOf('no-inline-style') !== -1)                           // 1071
      };                                                                                                               // 1072
    } else {                                                                                                           // 1073
      csp.rules = {                                                                                                    // 1074
        noUnsafeEval: noUnsafeEval(),                                                                                  // 1075
        noInlineStyle: false                                                                                           // 1076
      };                                                                                                               // 1077
    }                                                                                                                  // 1078
  }                                                                                                                    // 1079
                                                                                                                       // 1080
  return csp.rules;                                                                                                    // 1081
                                                                                                                       // 1082
  function noUnsafeEval() {                                                                                            // 1083
    try {                                                                                                              // 1084
      /* jshint -W031, -W054 */                                                                                        // 1085
      new Function('');                                                                                                // 1086
      /* jshint +W031, +W054 */                                                                                        // 1087
      return false;                                                                                                    // 1088
    } catch (e) {                                                                                                      // 1089
      return true;                                                                                                     // 1090
    }                                                                                                                  // 1091
  }                                                                                                                    // 1092
};                                                                                                                     // 1093
                                                                                                                       // 1094
/**                                                                                                                    // 1095
 * @ngdoc directive                                                                                                    // 1096
 * @module ng                                                                                                          // 1097
 * @name ngJq                                                                                                          // 1098
 *                                                                                                                     // 1099
 * @element ANY                                                                                                        // 1100
 * @param {string=} ngJq the name of the library available under `window`                                              // 1101
 * to be used for angular.element                                                                                      // 1102
 * @description                                                                                                        // 1103
 * Use this directive to force the angular.element library.  This should be                                            // 1104
 * used to force either jqLite by leaving ng-jq blank or setting the name of                                           // 1105
 * the jquery variable under window (eg. jQuery).                                                                      // 1106
 *                                                                                                                     // 1107
 * Since angular looks for this directive when it is loaded (doesn't wait for the                                      // 1108
 * DOMContentLoaded event), it must be placed on an element that comes before the script                               // 1109
 * which loads angular. Also, only the first instance of `ng-jq` will be used and all                                  // 1110
 * others ignored.                                                                                                     // 1111
 *                                                                                                                     // 1112
 * @example                                                                                                            // 1113
 * This example shows how to force jqLite using the `ngJq` directive to the `html` tag.                                // 1114
 ```html                                                                                                               // 1115
 <!doctype html>                                                                                                       // 1116
 <html ng-app ng-jq>                                                                                                   // 1117
 ...                                                                                                                   // 1118
 ...                                                                                                                   // 1119
 </html>                                                                                                               // 1120
 ```                                                                                                                   // 1121
 * @example                                                                                                            // 1122
 * This example shows how to use a jQuery based library of a different name.                                           // 1123
 * The library name must be available at the top most 'window'.                                                        // 1124
 ```html                                                                                                               // 1125
 <!doctype html>                                                                                                       // 1126
 <html ng-app ng-jq="jQueryLib">                                                                                       // 1127
 ...                                                                                                                   // 1128
 ...                                                                                                                   // 1129
 </html>                                                                                                               // 1130
 ```                                                                                                                   // 1131
 */                                                                                                                    // 1132
var jq = function() {                                                                                                  // 1133
  if (isDefined(jq.name_)) return jq.name_;                                                                            // 1134
  var el;                                                                                                              // 1135
  var i, ii = ngAttrPrefixes.length, prefix, name;                                                                     // 1136
  for (i = 0; i < ii; ++i) {                                                                                           // 1137
    prefix = ngAttrPrefixes[i];                                                                                        // 1138
    if (el = document.querySelector('[' + prefix.replace(':', '\\:') + 'jq]')) {                                       // 1139
      name = el.getAttribute(prefix + 'jq');                                                                           // 1140
      break;                                                                                                           // 1141
    }                                                                                                                  // 1142
  }                                                                                                                    // 1143
                                                                                                                       // 1144
  return (jq.name_ = name);                                                                                            // 1145
};                                                                                                                     // 1146
                                                                                                                       // 1147
function concat(array1, array2, index) {                                                                               // 1148
  return array1.concat(slice.call(array2, index));                                                                     // 1149
}                                                                                                                      // 1150
                                                                                                                       // 1151
function sliceArgs(args, startIndex) {                                                                                 // 1152
  return slice.call(args, startIndex || 0);                                                                            // 1153
}                                                                                                                      // 1154
                                                                                                                       // 1155
                                                                                                                       // 1156
/* jshint -W101 */                                                                                                     // 1157
/**                                                                                                                    // 1158
 * @ngdoc function                                                                                                     // 1159
 * @name angular.bind                                                                                                  // 1160
 * @module ng                                                                                                          // 1161
 * @kind function                                                                                                      // 1162
 *                                                                                                                     // 1163
 * @description                                                                                                        // 1164
 * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for                         // 1165
 * `fn`). You can supply optional `args` that are prebound to the function. This feature is also                       // 1166
 * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as                                // 1167
 * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).
 *                                                                                                                     // 1169
 * @param {Object} self Context which `fn` should be evaluated in.                                                     // 1170
 * @param {function()} fn Function to be bound.                                                                        // 1171
 * @param {...*} args Optional arguments to be prebound to the `fn` function call.                                     // 1172
 * @returns {function()} Function that wraps the `fn` with all the specified bindings.                                 // 1173
 */                                                                                                                    // 1174
/* jshint +W101 */                                                                                                     // 1175
function bind(self, fn) {                                                                                              // 1176
  var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];                                                 // 1177
  if (isFunction(fn) && !(fn instanceof RegExp)) {                                                                     // 1178
    return curryArgs.length                                                                                            // 1179
      ? function() {                                                                                                   // 1180
          return arguments.length                                                                                      // 1181
            ? fn.apply(self, concat(curryArgs, arguments, 0))                                                          // 1182
            : fn.apply(self, curryArgs);                                                                               // 1183
        }                                                                                                              // 1184
      : function() {                                                                                                   // 1185
          return arguments.length                                                                                      // 1186
            ? fn.apply(self, arguments)                                                                                // 1187
            : fn.call(self);                                                                                           // 1188
        };                                                                                                             // 1189
  } else {                                                                                                             // 1190
    // in IE, native methods are not functions so they cannot be bound (note: they don't need to be)                   // 1191
    return fn;                                                                                                         // 1192
  }                                                                                                                    // 1193
}                                                                                                                      // 1194
                                                                                                                       // 1195
                                                                                                                       // 1196
function toJsonReplacer(key, value) {                                                                                  // 1197
  var val = value;                                                                                                     // 1198
                                                                                                                       // 1199
  if (typeof key === 'string' && key.charAt(0) === '$' && key.charAt(1) === '$') {                                     // 1200
    val = undefined;                                                                                                   // 1201
  } else if (isWindow(value)) {                                                                                        // 1202
    val = '$WINDOW';                                                                                                   // 1203
  } else if (value &&  document === value) {                                                                           // 1204
    val = '$DOCUMENT';                                                                                                 // 1205
  } else if (isScope(value)) {                                                                                         // 1206
    val = '$SCOPE';                                                                                                    // 1207
  }                                                                                                                    // 1208
                                                                                                                       // 1209
  return val;                                                                                                          // 1210
}                                                                                                                      // 1211
                                                                                                                       // 1212
                                                                                                                       // 1213
/**                                                                                                                    // 1214
 * @ngdoc function                                                                                                     // 1215
 * @name angular.toJson                                                                                                // 1216
 * @module ng                                                                                                          // 1217
 * @kind function                                                                                                      // 1218
 *                                                                                                                     // 1219
 * @description                                                                                                        // 1220
 * Serializes input into a JSON-formatted string. Properties with leading $$ characters will be                        // 1221
 * stripped since angular uses this notation internally.                                                               // 1222
 *                                                                                                                     // 1223
 * @param {Object|Array|Date|string|number} obj Input to be serialized into JSON.                                      // 1224
 * @param {boolean|number} [pretty=2] If set to true, the JSON output will contain newlines and whitespace.            // 1225
 *    If set to an integer, the JSON output will contain that many spaces per indentation.                             // 1226
 * @returns {string|undefined} JSON-ified string representing `obj`.                                                   // 1227
 */                                                                                                                    // 1228
function toJson(obj, pretty) {                                                                                         // 1229
  if (typeof obj === 'undefined') return undefined;                                                                    // 1230
  if (!isNumber(pretty)) {                                                                                             // 1231
    pretty = pretty ? 2 : null;                                                                                        // 1232
  }                                                                                                                    // 1233
  return JSON.stringify(obj, toJsonReplacer, pretty);                                                                  // 1234
}                                                                                                                      // 1235
                                                                                                                       // 1236
                                                                                                                       // 1237
/**                                                                                                                    // 1238
 * @ngdoc function                                                                                                     // 1239
 * @name angular.fromJson                                                                                              // 1240
 * @module ng                                                                                                          // 1241
 * @kind function                                                                                                      // 1242
 *                                                                                                                     // 1243
 * @description                                                                                                        // 1244
 * Deserializes a JSON string.                                                                                         // 1245
 *                                                                                                                     // 1246
 * @param {string} json JSON string to deserialize.                                                                    // 1247
 * @returns {Object|Array|string|number} Deserialized JSON string.                                                     // 1248
 */                                                                                                                    // 1249
function fromJson(json) {                                                                                              // 1250
  return isString(json)                                                                                                // 1251
      ? JSON.parse(json)                                                                                               // 1252
      : json;                                                                                                          // 1253
}                                                                                                                      // 1254
                                                                                                                       // 1255
                                                                                                                       // 1256
function timezoneToOffset(timezone, fallback) {                                                                        // 1257
  var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;                               // 1258
  return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;                                          // 1259
}                                                                                                                      // 1260
                                                                                                                       // 1261
                                                                                                                       // 1262
function addDateMinutes(date, minutes) {                                                                               // 1263
  date = new Date(date.getTime());                                                                                     // 1264
  date.setMinutes(date.getMinutes() + minutes);                                                                        // 1265
  return date;                                                                                                         // 1266
}                                                                                                                      // 1267
                                                                                                                       // 1268
                                                                                                                       // 1269
function convertTimezoneToLocal(date, timezone, reverse) {                                                             // 1270
  reverse = reverse ? -1 : 1;                                                                                          // 1271
  var timezoneOffset = timezoneToOffset(timezone, date.getTimezoneOffset());                                           // 1272
  return addDateMinutes(date, reverse * (timezoneOffset - date.getTimezoneOffset()));                                  // 1273
}                                                                                                                      // 1274
                                                                                                                       // 1275
                                                                                                                       // 1276
/**                                                                                                                    // 1277
 * @returns {string} Returns the string representation of the element.                                                 // 1278
 */                                                                                                                    // 1279
function startingTag(element) {                                                                                        // 1280
  element = jqLite(element).clone();                                                                                   // 1281
  try {                                                                                                                // 1282
    // turns out IE does not let you set .html() on elements which                                                     // 1283
    // are not allowed to have children. So we just ignore it.                                                         // 1284
    element.empty();                                                                                                   // 1285
  } catch (e) {}                                                                                                       // 1286
  var elemHtml = jqLite('<div>').append(element).html();                                                               // 1287
  try {                                                                                                                // 1288
    return element[0].nodeType === NODE_TYPE_TEXT ? lowercase(elemHtml) :                                              // 1289
        elemHtml.                                                                                                      // 1290
          match(/^(<[^>]+>)/)[1].                                                                                      // 1291
          replace(/^<([\w\-]+)/, function(match, nodeName) { return '<' + lowercase(nodeName); });                     // 1292
  } catch (e) {                                                                                                        // 1293
    return lowercase(elemHtml);                                                                                        // 1294
  }                                                                                                                    // 1295
                                                                                                                       // 1296
}                                                                                                                      // 1297
                                                                                                                       // 1298
                                                                                                                       // 1299
/////////////////////////////////////////////////                                                                      // 1300
                                                                                                                       // 1301
/**                                                                                                                    // 1302
 * Tries to decode the URI component without throwing an exception.                                                    // 1303
 *                                                                                                                     // 1304
 * @private                                                                                                            // 1305
 * @param str value potential URI component to check.                                                                  // 1306
 * @returns {boolean} True if `value` can be decoded                                                                   // 1307
 * with the decodeURIComponent function.                                                                               // 1308
 */                                                                                                                    // 1309
function tryDecodeURIComponent(value) {                                                                                // 1310
  try {                                                                                                                // 1311
    return decodeURIComponent(value);                                                                                  // 1312
  } catch (e) {                                                                                                        // 1313
    // Ignore any invalid uri component                                                                                // 1314
  }                                                                                                                    // 1315
}                                                                                                                      // 1316
                                                                                                                       // 1317
                                                                                                                       // 1318
/**                                                                                                                    // 1319
 * Parses an escaped url query string into key-value pairs.                                                            // 1320
 * @returns {Object.<string,boolean|Array>}                                                                            // 1321
 */                                                                                                                    // 1322
function parseKeyValue(/**string*/keyValue) {                                                                          // 1323
  var obj = {};                                                                                                        // 1324
  forEach((keyValue || "").split('&'), function(keyValue) {                                                            // 1325
    var splitPoint, key, val;                                                                                          // 1326
    if (keyValue) {                                                                                                    // 1327
      key = keyValue = keyValue.replace(/\+/g,'%20');                                                                  // 1328
      splitPoint = keyValue.indexOf('=');                                                                              // 1329
      if (splitPoint !== -1) {                                                                                         // 1330
        key = keyValue.substring(0, splitPoint);                                                                       // 1331
        val = keyValue.substring(splitPoint + 1);                                                                      // 1332
      }                                                                                                                // 1333
      key = tryDecodeURIComponent(key);                                                                                // 1334
      if (isDefined(key)) {                                                                                            // 1335
        val = isDefined(val) ? tryDecodeURIComponent(val) : true;                                                      // 1336
        if (!hasOwnProperty.call(obj, key)) {                                                                          // 1337
          obj[key] = val;                                                                                              // 1338
        } else if (isArray(obj[key])) {                                                                                // 1339
          obj[key].push(val);                                                                                          // 1340
        } else {                                                                                                       // 1341
          obj[key] = [obj[key],val];                                                                                   // 1342
        }                                                                                                              // 1343
      }                                                                                                                // 1344
    }                                                                                                                  // 1345
  });                                                                                                                  // 1346
  return obj;                                                                                                          // 1347
}                                                                                                                      // 1348
                                                                                                                       // 1349
function toKeyValue(obj) {                                                                                             // 1350
  var parts = [];                                                                                                      // 1351
  forEach(obj, function(value, key) {                                                                                  // 1352
    if (isArray(value)) {                                                                                              // 1353
      forEach(value, function(arrayValue) {                                                                            // 1354
        parts.push(encodeUriQuery(key, true) +                                                                         // 1355
                   (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));                               // 1356
      });                                                                                                              // 1357
    } else {                                                                                                           // 1358
    parts.push(encodeUriQuery(key, true) +                                                                             // 1359
               (value === true ? '' : '=' + encodeUriQuery(value, true)));                                             // 1360
    }                                                                                                                  // 1361
  });                                                                                                                  // 1362
  return parts.length ? parts.join('&') : '';                                                                          // 1363
}                                                                                                                      // 1364
                                                                                                                       // 1365
                                                                                                                       // 1366
/**                                                                                                                    // 1367
 * We need our custom method because encodeURIComponent is too aggressive and doesn't follow                           // 1368
 * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path                       // 1369
 * segments:                                                                                                           // 1370
 *    segment       = *pchar                                                                                           // 1371
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"                                                // 1372
 *    pct-encoded   = "%" HEXDIG HEXDIG                                                                                // 1373
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"                                                            // 1374
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"                                                                // 1375
 *                     / "*" / "+" / "," / ";" / "="                                                                   // 1376
 */                                                                                                                    // 1377
function encodeUriSegment(val) {                                                                                       // 1378
  return encodeUriQuery(val, true).                                                                                    // 1379
             replace(/%26/gi, '&').                                                                                    // 1380
             replace(/%3D/gi, '=').                                                                                    // 1381
             replace(/%2B/gi, '+');                                                                                    // 1382
}                                                                                                                      // 1383
                                                                                                                       // 1384
                                                                                                                       // 1385
/**                                                                                                                    // 1386
 * This method is intended for encoding *key* or *value* parts of query component. We need a custom                    // 1387
 * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be                       // 1388
 * encoded per http://tools.ietf.org/html/rfc3986:                                                                     // 1389
 *    query       = *( pchar / "/" / "?" )                                                                             // 1390
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"                                                // 1391
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"                                                            // 1392
 *    pct-encoded   = "%" HEXDIG HEXDIG                                                                                // 1393
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"                                                                // 1394
 *                     / "*" / "+" / "," / ";" / "="                                                                   // 1395
 */                                                                                                                    // 1396
function encodeUriQuery(val, pctEncodeSpaces) {                                                                        // 1397
  return encodeURIComponent(val).                                                                                      // 1398
             replace(/%40/gi, '@').                                                                                    // 1399
             replace(/%3A/gi, ':').                                                                                    // 1400
             replace(/%24/g, '$').                                                                                     // 1401
             replace(/%2C/gi, ',').                                                                                    // 1402
             replace(/%3B/gi, ';').                                                                                    // 1403
             replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));                                                         // 1404
}                                                                                                                      // 1405
                                                                                                                       // 1406
var ngAttrPrefixes = ['ng-', 'data-ng-', 'ng:', 'x-ng-'];                                                              // 1407
                                                                                                                       // 1408
function getNgAttribute(element, ngAttr) {                                                                             // 1409
  var attr, i, ii = ngAttrPrefixes.length;                                                                             // 1410
  for (i = 0; i < ii; ++i) {                                                                                           // 1411
    attr = ngAttrPrefixes[i] + ngAttr;                                                                                 // 1412
    if (isString(attr = element.getAttribute(attr))) {                                                                 // 1413
      return attr;                                                                                                     // 1414
    }                                                                                                                  // 1415
  }                                                                                                                    // 1416
  return null;                                                                                                         // 1417
}                                                                                                                      // 1418
                                                                                                                       // 1419
/**                                                                                                                    // 1420
 * @ngdoc directive                                                                                                    // 1421
 * @name ngApp                                                                                                         // 1422
 * @module ng                                                                                                          // 1423
 *                                                                                                                     // 1424
 * @element ANY                                                                                                        // 1425
 * @param {angular.Module} ngApp an optional application                                                               // 1426
 *   {@link angular.module module} name to load.                                                                       // 1427
 * @param {boolean=} ngStrictDi if this attribute is present on the app element, the injector will be                  // 1428
 *   created in "strict-di" mode. This means that the application will fail to invoke functions which                  // 1429
 *   do not use explicit function annotation (and are thus unsuitable for minification), as described                  // 1430
 *   in {@link guide/di the Dependency Injection guide}, and useful debugging info will assist in                      // 1431
 *   tracking down the root of these bugs.                                                                             // 1432
 *                                                                                                                     // 1433
 * @description                                                                                                        // 1434
 *                                                                                                                     // 1435
 * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive                            // 1436
 * designates the **root element** of the application and is typically placed near the root element                    // 1437
 * of the page - e.g. on the `<body>` or `<html>` tags.                                                                // 1438
 *                                                                                                                     // 1439
 * Only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`                        // 1440
 * found in the document will be used to define the root element to auto-bootstrap as an                               // 1441
 * application. To run multiple applications in an HTML document you must manually bootstrap them using                // 1442
 * {@link angular.bootstrap} instead. AngularJS applications cannot be nested within each other.                       // 1443
 *                                                                                                                     // 1444
 * You can specify an **AngularJS module** to be used as the root module for the application.  This                    // 1445
 * module will be loaded into the {@link auto.$injector} when the application is bootstrapped. It                      // 1446
 * should contain the application code needed or have dependencies on other modules that will                          // 1447
 * contain the code. See {@link angular.module} for more information.                                                  // 1448
 *                                                                                                                     // 1449
 * In the example below if the `ngApp` directive were not placed on the `html` element then the                        // 1450
 * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`                   // 1451
 * would not be resolved to `3`.                                                                                       // 1452
 *                                                                                                                     // 1453
 * `ngApp` is the easiest, and most common way to bootstrap an application.                                            // 1454
 *                                                                                                                     // 1455
 <example module="ngAppDemo">                                                                                          // 1456
   <file name="index.html">                                                                                            // 1457
   <div ng-controller="ngAppDemoController">                                                                           // 1458
     I can add: {{a}} + {{b}} =  {{ a+b }}                                                                             // 1459
   </div>                                                                                                              // 1460
   </file>                                                                                                             // 1461
   <file name="script.js">                                                                                             // 1462
   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {                                // 1463
     $scope.a = 1;                                                                                                     // 1464
     $scope.b = 2;                                                                                                     // 1465
   });                                                                                                                 // 1466
   </file>                                                                                                             // 1467
 </example>                                                                                                            // 1468
 *                                                                                                                     // 1469
 * Using `ngStrictDi`, you would see something like this:                                                              // 1470
 *                                                                                                                     // 1471
 <example ng-app-included="true">                                                                                      // 1472
   <file name="index.html">                                                                                            // 1473
   <div ng-app="ngAppStrictDemo" ng-strict-di>                                                                         // 1474
       <div ng-controller="GoodController1">                                                                           // 1475
           I can add: {{a}} + {{b}} =  {{ a+b }}                                                                       // 1476
                                                                                                                       // 1477
           <p>This renders because the controller does not fail to                                                     // 1478
              instantiate, by using explicit annotation style (see                                                     // 1479
              script.js for details)                                                                                   // 1480
           </p>                                                                                                        // 1481
       </div>                                                                                                          // 1482
                                                                                                                       // 1483
       <div ng-controller="GoodController2">                                                                           // 1484
           Name: <input ng-model="name"><br />                                                                         // 1485
           Hello, {{name}}!                                                                                            // 1486
                                                                                                                       // 1487
           <p>This renders because the controller does not fail to                                                     // 1488
              instantiate, by using explicit annotation style                                                          // 1489
              (see script.js for details)                                                                              // 1490
           </p>                                                                                                        // 1491
       </div>                                                                                                          // 1492
                                                                                                                       // 1493
       <div ng-controller="BadController">                                                                             // 1494
           I can add: {{a}} + {{b}} =  {{ a+b }}                                                                       // 1495
                                                                                                                       // 1496
           <p>The controller could not be instantiated, due to relying                                                 // 1497
              on automatic function annotations (which are disabled in                                                 // 1498
              strict mode). As such, the content of this section is not                                                // 1499
              interpolated, and there should be an error in your web console.                                          // 1500
           </p>                                                                                                        // 1501
       </div>                                                                                                          // 1502
   </div>                                                                                                              // 1503
   </file>                                                                                                             // 1504
   <file name="script.js">                                                                                             // 1505
   angular.module('ngAppStrictDemo', [])                                                                               // 1506
     // BadController will fail to instantiate, due to relying on automatic function annotation,                       // 1507
     // rather than an explicit annotation                                                                             // 1508
     .controller('BadController', function($scope) {                                                                   // 1509
       $scope.a = 1;                                                                                                   // 1510
       $scope.b = 2;                                                                                                   // 1511
     })                                                                                                                // 1512
     // Unlike BadController, GoodController1 and GoodController2 will not fail to be instantiated,                    // 1513
     // due to using explicit annotations using the array style and $inject property, respectively.                    // 1514
     .controller('GoodController1', ['$scope', function($scope) {                                                      // 1515
       $scope.a = 1;                                                                                                   // 1516
       $scope.b = 2;                                                                                                   // 1517
     }])                                                                                                               // 1518
     .controller('GoodController2', GoodController2);                                                                  // 1519
     function GoodController2($scope) {                                                                                // 1520
       $scope.name = "World";                                                                                          // 1521
     }                                                                                                                 // 1522
     GoodController2.$inject = ['$scope'];                                                                             // 1523
   </file>                                                                                                             // 1524
   <file name="style.css">                                                                                             // 1525
   div[ng-controller] {                                                                                                // 1526
       margin-bottom: 1em;                                                                                             // 1527
       -webkit-border-radius: 4px;                                                                                     // 1528
       border-radius: 4px;                                                                                             // 1529
       border: 1px solid;                                                                                              // 1530
       padding: .5em;                                                                                                  // 1531
   }                                                                                                                   // 1532
   div[ng-controller^=Good] {                                                                                          // 1533
       border-color: #d6e9c6;                                                                                          // 1534
       background-color: #dff0d8;                                                                                      // 1535
       color: #3c763d;                                                                                                 // 1536
   }                                                                                                                   // 1537
   div[ng-controller^=Bad] {                                                                                           // 1538
       border-color: #ebccd1;                                                                                          // 1539
       background-color: #f2dede;                                                                                      // 1540
       color: #a94442;                                                                                                 // 1541
       margin-bottom: 0;                                                                                               // 1542
   }                                                                                                                   // 1543
   </file>                                                                                                             // 1544
 </example>                                                                                                            // 1545
 */                                                                                                                    // 1546
function angularInit(element, bootstrap) {                                                                             // 1547
  var appElement,                                                                                                      // 1548
      module,                                                                                                          // 1549
      config = {};                                                                                                     // 1550
                                                                                                                       // 1551
  // The element `element` has priority over any other element                                                         // 1552
  forEach(ngAttrPrefixes, function(prefix) {                                                                           // 1553
    var name = prefix + 'app';                                                                                         // 1554
                                                                                                                       // 1555
    if (!appElement && element.hasAttribute && element.hasAttribute(name)) {                                           // 1556
      appElement = element;                                                                                            // 1557
      module = element.getAttribute(name);                                                                             // 1558
    }                                                                                                                  // 1559
  });                                                                                                                  // 1560
  forEach(ngAttrPrefixes, function(prefix) {                                                                           // 1561
    var name = prefix + 'app';                                                                                         // 1562
    var candidate;                                                                                                     // 1563
                                                                                                                       // 1564
    if (!appElement && (candidate = element.querySelector('[' + name.replace(':', '\\:') + ']'))) {                    // 1565
      appElement = candidate;                                                                                          // 1566
      module = candidate.getAttribute(name);                                                                           // 1567
    }                                                                                                                  // 1568
  });                                                                                                                  // 1569
  if (appElement) {                                                                                                    // 1570
    config.strictDi = getNgAttribute(appElement, "strict-di") !== null;                                                // 1571
    bootstrap(appElement, module ? [module] : [], config);                                                             // 1572
  }                                                                                                                    // 1573
}                                                                                                                      // 1574
                                                                                                                       // 1575
/**                                                                                                                    // 1576
 * @ngdoc function                                                                                                     // 1577
 * @name angular.bootstrap                                                                                             // 1578
 * @module ng                                                                                                          // 1579
 * @description                                                                                                        // 1580
 * Use this function to manually start up angular application.                                                         // 1581
 *                                                                                                                     // 1582
 * See: {@link guide/bootstrap Bootstrap}                                                                              // 1583
 *                                                                                                                     // 1584
 * Note that Protractor based end-to-end tests cannot use this function to bootstrap manually.                         // 1585
 * They must use {@link ng.directive:ngApp ngApp}.                                                                     // 1586
 *                                                                                                                     // 1587
 * Angular will detect if it has been loaded into the browser more than once and only allow the                        // 1588
 * first loaded script to be bootstrapped and will report a warning to the browser console for                         // 1589
 * each of the subsequent scripts. This prevents strange results in applications, where otherwise                      // 1590
 * multiple instances of Angular try to work on the DOM.                                                               // 1591
 *                                                                                                                     // 1592
 * ```html                                                                                                             // 1593
 * <!doctype html>                                                                                                     // 1594
 * <html>                                                                                                              // 1595
 * <body>                                                                                                              // 1596
 * <div ng-controller="WelcomeController">                                                                             // 1597
 *   {{greeting}}                                                                                                      // 1598
 * </div>                                                                                                              // 1599
 *                                                                                                                     // 1600
 * <script src="angular.js"></script>                                                                                  // 1601
 * <script>                                                                                                            // 1602
 *   var app = angular.module('demo', [])                                                                              // 1603
 *   .controller('WelcomeController', function($scope) {                                                               // 1604
 *       $scope.greeting = 'Welcome!';                                                                                 // 1605
 *   });                                                                                                               // 1606
 *   angular.bootstrap(document, ['demo']);                                                                            // 1607
 * </script>                                                                                                           // 1608
 * </body>                                                                                                             // 1609
 * </html>                                                                                                             // 1610
 * ```                                                                                                                 // 1611
 *                                                                                                                     // 1612
 * @param {DOMElement} element DOM element which is the root of angular application.                                   // 1613
 * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.                    // 1614
 *     Each item in the array should be the name of a predefined module or a (DI annotated)                            // 1615
 *     function that will be invoked by the injector as a `config` block.                                              // 1616
 *     See: {@link angular.module modules}                                                                             // 1617
 * @param {Object=} config an object for defining configuration options for the application. The                       // 1618
 *     following keys are supported:                                                                                   // 1619
 *                                                                                                                     // 1620
 * * `strictDi` - disable automatic function annotation for the application. This is meant to                          // 1621
 *   assist in finding bugs which break minified code. Defaults to `false`.                                            // 1622
 *                                                                                                                     // 1623
 * @returns {auto.$injector} Returns the newly created injector for this app.                                          // 1624
 */                                                                                                                    // 1625
function bootstrap(element, modules, config) {                                                                         // 1626
  if (!isObject(config)) config = {};                                                                                  // 1627
  var defaultConfig = {                                                                                                // 1628
    strictDi: false                                                                                                    // 1629
  };                                                                                                                   // 1630
  config = extend(defaultConfig, config);                                                                              // 1631
  var doBootstrap = function() {                                                                                       // 1632
    element = jqLite(element);                                                                                         // 1633
                                                                                                                       // 1634
    if (element.injector()) {                                                                                          // 1635
      var tag = (element[0] === document) ? 'document' : startingTag(element);                                         // 1636
      //Encode angle brackets to prevent input from being sanitized to empty string #8683                              // 1637
      throw ngMinErr(                                                                                                  // 1638
          'btstrpd',                                                                                                   // 1639
          "App Already Bootstrapped with this Element '{0}'",                                                          // 1640
          tag.replace(/</,'&lt;').replace(/>/,'&gt;'));                                                                // 1641
    }                                                                                                                  // 1642
                                                                                                                       // 1643
    modules = modules || [];                                                                                           // 1644
    modules.unshift(['$provide', function($provide) {                                                                  // 1645
      $provide.value('$rootElement', element);                                                                         // 1646
    }]);                                                                                                               // 1647
                                                                                                                       // 1648
    if (config.debugInfoEnabled) {                                                                                     // 1649
      // Pushing so that this overrides `debugInfoEnabled` setting defined in user's `modules`.                        // 1650
      modules.push(['$compileProvider', function($compileProvider) {                                                   // 1651
        $compileProvider.debugInfoEnabled(true);                                                                       // 1652
      }]);                                                                                                             // 1653
    }                                                                                                                  // 1654
                                                                                                                       // 1655
    modules.unshift('ng');                                                                                             // 1656
    var injector = createInjector(modules, config.strictDi);                                                           // 1657
    injector.invoke(['$rootScope', '$rootElement', '$compile', '$injector',                                            // 1658
       function bootstrapApply(scope, element, compile, injector) {                                                    // 1659
        scope.$apply(function() {                                                                                      // 1660
          element.data('$injector', injector);                                                                         // 1661
          compile(element)(scope);                                                                                     // 1662
        });                                                                                                            // 1663
      }]                                                                                                               // 1664
    );                                                                                                                 // 1665
    return injector;                                                                                                   // 1666
  };                                                                                                                   // 1667
                                                                                                                       // 1668
  var NG_ENABLE_DEBUG_INFO = /^NG_ENABLE_DEBUG_INFO!/;                                                                 // 1669
  var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;                                                                     // 1670
                                                                                                                       // 1671
  if (window && NG_ENABLE_DEBUG_INFO.test(window.name)) {                                                              // 1672
    config.debugInfoEnabled = true;                                                                                    // 1673
    window.name = window.name.replace(NG_ENABLE_DEBUG_INFO, '');                                                       // 1674
  }                                                                                                                    // 1675
                                                                                                                       // 1676
  if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {                                                               // 1677
    return doBootstrap();                                                                                              // 1678
  }                                                                                                                    // 1679
                                                                                                                       // 1680
  window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');                                                           // 1681
  angular.resumeBootstrap = function(extraModules) {                                                                   // 1682
    forEach(extraModules, function(module) {                                                                           // 1683
      modules.push(module);                                                                                            // 1684
    });                                                                                                                // 1685
    return doBootstrap();                                                                                              // 1686
  };                                                                                                                   // 1687
                                                                                                                       // 1688
  if (isFunction(angular.resumeDeferredBootstrap)) {                                                                   // 1689
    angular.resumeDeferredBootstrap();                                                                                 // 1690
  }                                                                                                                    // 1691
}                                                                                                                      // 1692
                                                                                                                       // 1693
/**                                                                                                                    // 1694
 * @ngdoc function                                                                                                     // 1695
 * @name angular.reloadWithDebugInfo                                                                                   // 1696
 * @module ng                                                                                                          // 1697
 * @description                                                                                                        // 1698
 * Use this function to reload the current application with debug information turned on.                               // 1699
 * This takes precedence over a call to `$compileProvider.debugInfoEnabled(false)`.                                    // 1700
 *                                                                                                                     // 1701
 * See {@link ng.$compileProvider#debugInfoEnabled} for more.                                                          // 1702
 */                                                                                                                    // 1703
function reloadWithDebugInfo() {                                                                                       // 1704
  window.name = 'NG_ENABLE_DEBUG_INFO!' + window.name;                                                                 // 1705
  window.location.reload();                                                                                            // 1706
}                                                                                                                      // 1707
                                                                                                                       // 1708
/**                                                                                                                    // 1709
 * @name angular.getTestability                                                                                        // 1710
 * @module ng                                                                                                          // 1711
 * @description                                                                                                        // 1712
 * Get the testability service for the instance of Angular on the given                                                // 1713
 * element.                                                                                                            // 1714
 * @param {DOMElement} element DOM element which is the root of angular application.                                   // 1715
 */                                                                                                                    // 1716
function getTestability(rootElement) {                                                                                 // 1717
  var injector = angular.element(rootElement).injector();                                                              // 1718
  if (!injector) {                                                                                                     // 1719
    throw ngMinErr('test',                                                                                             // 1720
      'no injector found for element argument to getTestability');                                                     // 1721
  }                                                                                                                    // 1722
  return injector.get('$$testability');                                                                                // 1723
}                                                                                                                      // 1724
                                                                                                                       // 1725
var SNAKE_CASE_REGEXP = /[A-Z]/g;                                                                                      // 1726
function snake_case(name, separator) {                                                                                 // 1727
  separator = separator || '_';                                                                                        // 1728
  return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {                                                       // 1729
    return (pos ? separator : '') + letter.toLowerCase();                                                              // 1730
  });                                                                                                                  // 1731
}                                                                                                                      // 1732
                                                                                                                       // 1733
var bindJQueryFired = false;                                                                                           // 1734
var skipDestroyOnNextJQueryCleanData;                                                                                  // 1735
function bindJQuery() {                                                                                                // 1736
  var originalCleanData;                                                                                               // 1737
                                                                                                                       // 1738
  if (bindJQueryFired) {                                                                                               // 1739
    return;                                                                                                            // 1740
  }                                                                                                                    // 1741
                                                                                                                       // 1742
  // bind to jQuery if present;                                                                                        // 1743
  var jqName = jq();                                                                                                   // 1744
  jQuery = isUndefined(jqName) ? window.jQuery :   // use jQuery (if present)                                          // 1745
           !jqName             ? undefined     :   // use jqLite                                                       // 1746
                                 window[jqName];   // use jQuery specified by `ngJq`                                   // 1747
                                                                                                                       // 1748
  // Use jQuery if it exists with proper functionality, otherwise default to us.                                       // 1749
  // Angular 1.2+ requires jQuery 1.7+ for on()/off() support.                                                         // 1750
  // Angular 1.3+ technically requires at least jQuery 2.1+ but it may work with older                                 // 1751
  // versions. It will not work for sure with jQuery <1.7, though.                                                     // 1752
  if (jQuery && jQuery.fn.on) {                                                                                        // 1753
    jqLite = jQuery;                                                                                                   // 1754
    extend(jQuery.fn, {                                                                                                // 1755
      scope: JQLitePrototype.scope,                                                                                    // 1756
      isolateScope: JQLitePrototype.isolateScope,                                                                      // 1757
      controller: JQLitePrototype.controller,                                                                          // 1758
      injector: JQLitePrototype.injector,                                                                              // 1759
      inheritedData: JQLitePrototype.inheritedData                                                                     // 1760
    });                                                                                                                // 1761
                                                                                                                       // 1762
    // All nodes removed from the DOM via various jQuery APIs like .remove()                                           // 1763
    // are passed through jQuery.cleanData. Monkey-patch this method to fire                                           // 1764
    // the $destroy event on all removed nodes.                                                                        // 1765
    originalCleanData = jQuery.cleanData;                                                                              // 1766
    jQuery.cleanData = function(elems) {                                                                               // 1767
      var events;                                                                                                      // 1768
      if (!skipDestroyOnNextJQueryCleanData) {                                                                         // 1769
        for (var i = 0, elem; (elem = elems[i]) != null; i++) {                                                        // 1770
          events = jQuery._data(elem, "events");                                                                       // 1771
          if (events && events.$destroy) {                                                                             // 1772
            jQuery(elem).triggerHandler('$destroy');                                                                   // 1773
          }                                                                                                            // 1774
        }                                                                                                              // 1775
      } else {                                                                                                         // 1776
        skipDestroyOnNextJQueryCleanData = false;                                                                      // 1777
      }                                                                                                                // 1778
      originalCleanData(elems);                                                                                        // 1779
    };                                                                                                                 // 1780
  } else {                                                                                                             // 1781
    jqLite = JQLite;                                                                                                   // 1782
  }                                                                                                                    // 1783
                                                                                                                       // 1784
  angular.element = jqLite;                                                                                            // 1785
                                                                                                                       // 1786
  // Prevent double-proxying.                                                                                          // 1787
  bindJQueryFired = true;                                                                                              // 1788
}                                                                                                                      // 1789
                                                                                                                       // 1790
/**                                                                                                                    // 1791
 * throw error if the argument is falsy.                                                                               // 1792
 */                                                                                                                    // 1793
function assertArg(arg, name, reason) {                                                                                // 1794
  if (!arg) {                                                                                                          // 1795
    throw ngMinErr('areq', "Argument '{0}' is {1}", (name || '?'), (reason || "required"));                            // 1796
  }                                                                                                                    // 1797
  return arg;                                                                                                          // 1798
}                                                                                                                      // 1799
                                                                                                                       // 1800
function assertArgFn(arg, name, acceptArrayAnnotation) {                                                               // 1801
  if (acceptArrayAnnotation && isArray(arg)) {                                                                         // 1802
      arg = arg[arg.length - 1];                                                                                       // 1803
  }                                                                                                                    // 1804
                                                                                                                       // 1805
  assertArg(isFunction(arg), name, 'not a function, got ' +                                                            // 1806
      (arg && typeof arg === 'object' ? arg.constructor.name || 'Object' : typeof arg));                               // 1807
  return arg;                                                                                                          // 1808
}                                                                                                                      // 1809
                                                                                                                       // 1810
/**                                                                                                                    // 1811
 * throw error if the name given is hasOwnProperty                                                                     // 1812
 * @param  {String} name    the name to test                                                                           // 1813
 * @param  {String} context the context in which the name is used, such as module or directive                         // 1814
 */                                                                                                                    // 1815
function assertNotHasOwnProperty(name, context) {                                                                      // 1816
  if (name === 'hasOwnProperty') {                                                                                     // 1817
    throw ngMinErr('badname', "hasOwnProperty is not a valid {0} name", context);                                      // 1818
  }                                                                                                                    // 1819
}                                                                                                                      // 1820
                                                                                                                       // 1821
/**                                                                                                                    // 1822
 * Return the value accessible from the object by path. Any undefined traversals are ignored                           // 1823
 * @param {Object} obj starting object                                                                                 // 1824
 * @param {String} path path to traverse                                                                               // 1825
 * @param {boolean} [bindFnToScope=true]                                                                               // 1826
 * @returns {Object} value as accessible by path                                                                       // 1827
 */                                                                                                                    // 1828
//TODO(misko): this function needs to be removed                                                                       // 1829
function getter(obj, path, bindFnToScope) {                                                                            // 1830
  if (!path) return obj;                                                                                               // 1831
  var keys = path.split('.');                                                                                          // 1832
  var key;                                                                                                             // 1833
  var lastInstance = obj;                                                                                              // 1834
  var len = keys.length;                                                                                               // 1835
                                                                                                                       // 1836
  for (var i = 0; i < len; i++) {                                                                                      // 1837
    key = keys[i];                                                                                                     // 1838
    if (obj) {                                                                                                         // 1839
      obj = (lastInstance = obj)[key];                                                                                 // 1840
    }                                                                                                                  // 1841
  }                                                                                                                    // 1842
  if (!bindFnToScope && isFunction(obj)) {                                                                             // 1843
    return bind(lastInstance, obj);                                                                                    // 1844
  }                                                                                                                    // 1845
  return obj;                                                                                                          // 1846
}                                                                                                                      // 1847
                                                                                                                       // 1848
/**                                                                                                                    // 1849
 * Return the DOM siblings between the first and last node in the given array.                                         // 1850
 * @param {Array} array like object                                                                                    // 1851
 * @returns {Array} the inputted object or a jqLite collection containing the nodes                                    // 1852
 */                                                                                                                    // 1853
function getBlockNodes(nodes) {                                                                                        // 1854
  // TODO(perf): update `nodes` instead of creating a new object?                                                      // 1855
  var node = nodes[0];                                                                                                 // 1856
  var endNode = nodes[nodes.length - 1];                                                                               // 1857
  var blockNodes;                                                                                                      // 1858
                                                                                                                       // 1859
  for (var i = 1; node !== endNode && (node = node.nextSibling); i++) {                                                // 1860
    if (blockNodes || nodes[i] !== node) {                                                                             // 1861
      if (!blockNodes) {                                                                                               // 1862
        blockNodes = jqLite(slice.call(nodes, 0, i));                                                                  // 1863
      }                                                                                                                // 1864
      blockNodes.push(node);                                                                                           // 1865
    }                                                                                                                  // 1866
  }                                                                                                                    // 1867
                                                                                                                       // 1868
  return blockNodes || nodes;                                                                                          // 1869
}                                                                                                                      // 1870
                                                                                                                       // 1871
                                                                                                                       // 1872
/**                                                                                                                    // 1873
 * Creates a new object without a prototype. This object is useful for lookup without having to                        // 1874
 * guard against prototypically inherited properties via hasOwnProperty.                                               // 1875
 *                                                                                                                     // 1876
 * Related micro-benchmarks:                                                                                           // 1877
 * - http://jsperf.com/object-create2                                                                                  // 1878
 * - http://jsperf.com/proto-map-lookup/2                                                                              // 1879
 * - http://jsperf.com/for-in-vs-object-keys2                                                                          // 1880
 *                                                                                                                     // 1881
 * @returns {Object}                                                                                                   // 1882
 */                                                                                                                    // 1883
function createMap() {                                                                                                 // 1884
  return Object.create(null);                                                                                          // 1885
}                                                                                                                      // 1886
                                                                                                                       // 1887
var NODE_TYPE_ELEMENT = 1;                                                                                             // 1888
var NODE_TYPE_ATTRIBUTE = 2;                                                                                           // 1889
var NODE_TYPE_TEXT = 3;                                                                                                // 1890
var NODE_TYPE_COMMENT = 8;                                                                                             // 1891
var NODE_TYPE_DOCUMENT = 9;                                                                                            // 1892
var NODE_TYPE_DOCUMENT_FRAGMENT = 11;                                                                                  // 1893
                                                                                                                       // 1894
/**                                                                                                                    // 1895
 * @ngdoc type                                                                                                         // 1896
 * @name angular.Module                                                                                                // 1897
 * @module ng                                                                                                          // 1898
 * @description                                                                                                        // 1899
 *                                                                                                                     // 1900
 * Interface for configuring angular {@link angular.module modules}.                                                   // 1901
 */                                                                                                                    // 1902
                                                                                                                       // 1903
function setupModuleLoader(window) {                                                                                   // 1904
                                                                                                                       // 1905
  var $injectorMinErr = minErr('$injector');                                                                           // 1906
  var ngMinErr = minErr('ng');                                                                                         // 1907
                                                                                                                       // 1908
  function ensure(obj, name, factory) {                                                                                // 1909
    return obj[name] || (obj[name] = factory());                                                                       // 1910
  }                                                                                                                    // 1911
                                                                                                                       // 1912
  var angular = ensure(window, 'angular', Object);                                                                     // 1913
                                                                                                                       // 1914
  // We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap           // 1915
  angular.$$minErr = angular.$$minErr || minErr;                                                                       // 1916
                                                                                                                       // 1917
  return ensure(angular, 'module', function() {                                                                        // 1918
    /** @type {Object.<string, angular.Module>} */                                                                     // 1919
    var modules = {};                                                                                                  // 1920
                                                                                                                       // 1921
    /**                                                                                                                // 1922
     * @ngdoc function                                                                                                 // 1923
     * @name angular.module                                                                                            // 1924
     * @module ng                                                                                                      // 1925
     * @description                                                                                                    // 1926
     *                                                                                                                 // 1927
     * The `angular.module` is a global place for creating, registering and retrieving Angular                         // 1928
     * modules.                                                                                                        // 1929
     * All modules (angular core or 3rd party) that should be available to an application must be                      // 1930
     * registered using this mechanism.                                                                                // 1931
     *                                                                                                                 // 1932
     * Passing one argument retrieves an existing {@link angular.Module},                                              // 1933
     * whereas passing more than one argument creates a new {@link angular.Module}                                     // 1934
     *                                                                                                                 // 1935
     *                                                                                                                 // 1936
     * # Module                                                                                                        // 1937
     *                                                                                                                 // 1938
     * A module is a collection of services, directives, controllers, filters, and configuration information.          // 1939
     * `angular.module` is used to configure the {@link auto.$injector $injector}.                                     // 1940
     *                                                                                                                 // 1941
     * ```js                                                                                                           // 1942
     * // Create a new module                                                                                          // 1943
     * var myModule = angular.module('myModule', []);                                                                  // 1944
     *                                                                                                                 // 1945
     * // register a new service                                                                                       // 1946
     * myModule.value('appName', 'MyCoolApp');                                                                         // 1947
     *                                                                                                                 // 1948
     * // configure existing services inside initialization blocks.                                                    // 1949
     * myModule.config(['$locationProvider', function($locationProvider) {                                             // 1950
     *   // Configure existing providers                                                                               // 1951
     *   $locationProvider.hashPrefix('!');                                                                            // 1952
     * }]);                                                                                                            // 1953
     * ```                                                                                                             // 1954
     *                                                                                                                 // 1955
     * Then you can create an injector and load your modules like this:                                                // 1956
     *                                                                                                                 // 1957
     * ```js                                                                                                           // 1958
     * var injector = angular.injector(['ng', 'myModule'])                                                             // 1959
     * ```                                                                                                             // 1960
     *                                                                                                                 // 1961
     * However it's more likely that you'll just use                                                                   // 1962
     * {@link ng.directive:ngApp ngApp} or                                                                             // 1963
     * {@link angular.bootstrap} to simplify this process for you.                                                     // 1964
     *                                                                                                                 // 1965
     * @param {!string} name The name of the module to create or retrieve.                                             // 1966
     * @param {!Array.<string>=} requires If specified then new module is being created. If                            // 1967
     *        unspecified then the module is being retrieved for further configuration.                                // 1968
     * @param {Function=} configFn Optional configuration function for the module. Same as                             // 1969
     *        {@link angular.Module#config Module#config()}.                                                           // 1970
     * @returns {module} new module with the {@link angular.Module} api.                                               // 1971
     */                                                                                                                // 1972
    return function module(name, requires, configFn) {                                                                 // 1973
      var assertNotHasOwnProperty = function(name, context) {                                                          // 1974
        if (name === 'hasOwnProperty') {                                                                               // 1975
          throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);                                // 1976
        }                                                                                                              // 1977
      };                                                                                                               // 1978
                                                                                                                       // 1979
      assertNotHasOwnProperty(name, 'module');                                                                         // 1980
      if (requires && modules.hasOwnProperty(name)) {                                                                  // 1981
        modules[name] = null;                                                                                          // 1982
      }                                                                                                                // 1983
      return ensure(modules, name, function() {                                                                        // 1984
        if (!requires) {                                                                                               // 1985
          throw $injectorMinErr('nomod', "Module '{0}' is not available! You either misspelled " +                     // 1986
             "the module name or forgot to load it. If registering a module ensure that you " +                        // 1987
             "specify the dependencies as the second argument.", name);                                                // 1988
        }                                                                                                              // 1989
                                                                                                                       // 1990
        /** @type {!Array.<Array.<*>>} */                                                                              // 1991
        var invokeQueue = [];                                                                                          // 1992
                                                                                                                       // 1993
        /** @type {!Array.<Function>} */                                                                               // 1994
        var configBlocks = [];                                                                                         // 1995
                                                                                                                       // 1996
        /** @type {!Array.<Function>} */                                                                               // 1997
        var runBlocks = [];                                                                                            // 1998
                                                                                                                       // 1999
        var config = invokeLater('$injector', 'invoke', 'push', configBlocks);                                         // 2000
                                                                                                                       // 2001
        /** @type {angular.Module} */                                                                                  // 2002
        var moduleInstance = {                                                                                         // 2003
          // Private state                                                                                             // 2004
          _invokeQueue: invokeQueue,                                                                                   // 2005
          _configBlocks: configBlocks,                                                                                 // 2006
          _runBlocks: runBlocks,                                                                                       // 2007
                                                                                                                       // 2008
          /**                                                                                                          // 2009
           * @ngdoc property                                                                                           // 2010
           * @name angular.Module#requires                                                                             // 2011
           * @module ng                                                                                                // 2012
           *                                                                                                           // 2013
           * @description                                                                                              // 2014
           * Holds the list of modules which the injector will load before the current module is                       // 2015
           * loaded.                                                                                                   // 2016
           */                                                                                                          // 2017
          requires: requires,                                                                                          // 2018
                                                                                                                       // 2019
          /**                                                                                                          // 2020
           * @ngdoc property                                                                                           // 2021
           * @name angular.Module#name                                                                                 // 2022
           * @module ng                                                                                                // 2023
           *                                                                                                           // 2024
           * @description                                                                                              // 2025
           * Name of the module.                                                                                       // 2026
           */                                                                                                          // 2027
          name: name,                                                                                                  // 2028
                                                                                                                       // 2029
                                                                                                                       // 2030
          /**                                                                                                          // 2031
           * @ngdoc method                                                                                             // 2032
           * @name angular.Module#provider                                                                             // 2033
           * @module ng                                                                                                // 2034
           * @param {string} name service name                                                                         // 2035
           * @param {Function} providerType Construction function for creating new instance of the                     // 2036
           *                                service.                                                                   // 2037
           * @description                                                                                              // 2038
           * See {@link auto.$provide#provider $provide.provider()}.                                                   // 2039
           */                                                                                                          // 2040
          provider: invokeLaterAndSetModuleName('$provide', 'provider'),                                               // 2041
                                                                                                                       // 2042
          /**                                                                                                          // 2043
           * @ngdoc method                                                                                             // 2044
           * @name angular.Module#factory                                                                              // 2045
           * @module ng                                                                                                // 2046
           * @param {string} name service name                                                                         // 2047
           * @param {Function} providerFunction Function for creating new instance of the service.                     // 2048
           * @description                                                                                              // 2049
           * See {@link auto.$provide#factory $provide.factory()}.                                                     // 2050
           */                                                                                                          // 2051
          factory: invokeLaterAndSetModuleName('$provide', 'factory'),                                                 // 2052
                                                                                                                       // 2053
          /**                                                                                                          // 2054
           * @ngdoc method                                                                                             // 2055
           * @name angular.Module#service                                                                              // 2056
           * @module ng                                                                                                // 2057
           * @param {string} name service name                                                                         // 2058
           * @param {Function} constructor A constructor function that will be instantiated.                           // 2059
           * @description                                                                                              // 2060
           * See {@link auto.$provide#service $provide.service()}.                                                     // 2061
           */                                                                                                          // 2062
          service: invokeLaterAndSetModuleName('$provide', 'service'),                                                 // 2063
                                                                                                                       // 2064
          /**                                                                                                          // 2065
           * @ngdoc method                                                                                             // 2066
           * @name angular.Module#value                                                                                // 2067
           * @module ng                                                                                                // 2068
           * @param {string} name service name                                                                         // 2069
           * @param {*} object Service instance object.                                                                // 2070
           * @description                                                                                              // 2071
           * See {@link auto.$provide#value $provide.value()}.                                                         // 2072
           */                                                                                                          // 2073
          value: invokeLater('$provide', 'value'),                                                                     // 2074
                                                                                                                       // 2075
          /**                                                                                                          // 2076
           * @ngdoc method                                                                                             // 2077
           * @name angular.Module#constant                                                                             // 2078
           * @module ng                                                                                                // 2079
           * @param {string} name constant name                                                                        // 2080
           * @param {*} object Constant value.                                                                         // 2081
           * @description                                                                                              // 2082
           * Because the constant are fixed, they get applied before other provide methods.                            // 2083
           * See {@link auto.$provide#constant $provide.constant()}.                                                   // 2084
           */                                                                                                          // 2085
          constant: invokeLater('$provide', 'constant', 'unshift'),                                                    // 2086
                                                                                                                       // 2087
           /**                                                                                                         // 2088
           * @ngdoc method                                                                                             // 2089
           * @name angular.Module#decorator                                                                            // 2090
           * @module ng                                                                                                // 2091
           * @param {string} The name of the service to decorate.                                                      // 2092
           * @param {Function} This function will be invoked when the service needs to be                              // 2093
           *                                    instantiated and should return the decorated service instance.         // 2094
           * @description                                                                                              // 2095
           * See {@link auto.$provide#decorator $provide.decorator()}.                                                 // 2096
           */                                                                                                          // 2097
          decorator: invokeLaterAndSetModuleName('$provide', 'decorator'),                                             // 2098
                                                                                                                       // 2099
          /**                                                                                                          // 2100
           * @ngdoc method                                                                                             // 2101
           * @name angular.Module#animation                                                                            // 2102
           * @module ng                                                                                                // 2103
           * @param {string} name animation name                                                                       // 2104
           * @param {Function} animationFactory Factory function for creating new instance of an                       // 2105
           *                                    animation.                                                             // 2106
           * @description                                                                                              // 2107
           *                                                                                                           // 2108
           * **NOTE**: animations take effect only if the **ngAnimate** module is loaded.                              // 2109
           *                                                                                                           // 2110
           *                                                                                                           // 2111
           * Defines an animation hook that can be later used with                                                     // 2112
           * {@link $animate $animate} service and directives that use this service.                                   // 2113
           *                                                                                                           // 2114
           * ```js                                                                                                     // 2115
           * module.animation('.animation-name', function($inject1, $inject2) {                                        // 2116
           *   return {                                                                                                // 2117
           *     eventName : function(element, done) {                                                                 // 2118
           *       //code to run the animation                                                                         // 2119
           *       //once complete, then run done()                                                                    // 2120
           *       return function cancellationFunction(element) {                                                     // 2121
           *         //code to cancel the animation                                                                    // 2122
           *       }                                                                                                   // 2123
           *     }                                                                                                     // 2124
           *   }                                                                                                       // 2125
           * })                                                                                                        // 2126
           * ```                                                                                                       // 2127
           *                                                                                                           // 2128
           * See {@link ng.$animateProvider#register $animateProvider.register()} and                                  // 2129
           * {@link ngAnimate ngAnimate module} for more information.                                                  // 2130
           */                                                                                                          // 2131
          animation: invokeLaterAndSetModuleName('$animateProvider', 'register'),                                      // 2132
                                                                                                                       // 2133
          /**                                                                                                          // 2134
           * @ngdoc method                                                                                             // 2135
           * @name angular.Module#filter                                                                               // 2136
           * @module ng                                                                                                // 2137
           * @param {string} name Filter name - this must be a valid angular expression identifier                     // 2138
           * @param {Function} filterFactory Factory function for creating new instance of filter.                     // 2139
           * @description                                                                                              // 2140
           * See {@link ng.$filterProvider#register $filterProvider.register()}.                                       // 2141
           *                                                                                                           // 2142
           * <div class="alert alert-warning">                                                                         // 2143
           * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
           * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace        // 2145
           * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores                   // 2146
           * (`myapp_subsection_filterx`).                                                                             // 2147
           * </div>                                                                                                    // 2148
           */                                                                                                          // 2149
          filter: invokeLaterAndSetModuleName('$filterProvider', 'register'),                                          // 2150
                                                                                                                       // 2151
          /**                                                                                                          // 2152
           * @ngdoc method                                                                                             // 2153
           * @name angular.Module#controller                                                                           // 2154
           * @module ng                                                                                                // 2155
           * @param {string|Object} name Controller name, or an object map of controllers where the                    // 2156
           *    keys are the names and the values are the constructors.                                                // 2157
           * @param {Function} constructor Controller constructor function.                                            // 2158
           * @description                                                                                              // 2159
           * See {@link ng.$controllerProvider#register $controllerProvider.register()}.                               // 2160
           */                                                                                                          // 2161
          controller: invokeLaterAndSetModuleName('$controllerProvider', 'register'),                                  // 2162
                                                                                                                       // 2163
          /**                                                                                                          // 2164
           * @ngdoc method                                                                                             // 2165
           * @name angular.Module#directive                                                                            // 2166
           * @module ng                                                                                                // 2167
           * @param {string|Object} name Directive name, or an object map of directives where the                      // 2168
           *    keys are the names and the values are the factories.                                                   // 2169
           * @param {Function} directiveFactory Factory function for creating new instance of                          // 2170
           * directives.                                                                                               // 2171
           * @description                                                                                              // 2172
           * See {@link ng.$compileProvider#directive $compileProvider.directive()}.                                   // 2173
           */                                                                                                          // 2174
          directive: invokeLaterAndSetModuleName('$compileProvider', 'directive'),                                     // 2175
                                                                                                                       // 2176
          /**                                                                                                          // 2177
           * @ngdoc method                                                                                             // 2178
           * @name angular.Module#config                                                                               // 2179
           * @module ng                                                                                                // 2180
           * @param {Function} configFn Execute this function on module load. Useful for service                       // 2181
           *    configuration.                                                                                         // 2182
           * @description                                                                                              // 2183
           * Use this method to register work which needs to be performed on module loading.                           // 2184
           * For more about how to configure services, see                                                             // 2185
           * {@link providers#provider-recipe Provider Recipe}.                                                        // 2186
           */                                                                                                          // 2187
          config: config,                                                                                              // 2188
                                                                                                                       // 2189
          /**                                                                                                          // 2190
           * @ngdoc method                                                                                             // 2191
           * @name angular.Module#run                                                                                  // 2192
           * @module ng                                                                                                // 2193
           * @param {Function} initializationFn Execute this function after injector creation.                         // 2194
           *    Useful for application initialization.                                                                 // 2195
           * @description                                                                                              // 2196
           * Use this method to register work which should be performed when the injector is done                      // 2197
           * loading all modules.                                                                                      // 2198
           */                                                                                                          // 2199
          run: function(block) {                                                                                       // 2200
            runBlocks.push(block);                                                                                     // 2201
            return this;                                                                                               // 2202
          }                                                                                                            // 2203
        };                                                                                                             // 2204
                                                                                                                       // 2205
        if (configFn) {                                                                                                // 2206
          config(configFn);                                                                                            // 2207
        }                                                                                                              // 2208
                                                                                                                       // 2209
        return moduleInstance;                                                                                         // 2210
                                                                                                                       // 2211
        /**                                                                                                            // 2212
         * @param {string} provider                                                                                    // 2213
         * @param {string} method                                                                                      // 2214
         * @param {String=} insertMethod                                                                               // 2215
         * @returns {angular.Module}                                                                                   // 2216
         */                                                                                                            // 2217
        function invokeLater(provider, method, insertMethod, queue) {                                                  // 2218
          if (!queue) queue = invokeQueue;                                                                             // 2219
          return function() {                                                                                          // 2220
            queue[insertMethod || 'push']([provider, method, arguments]);                                              // 2221
            return moduleInstance;                                                                                     // 2222
          };                                                                                                           // 2223
        }                                                                                                              // 2224
                                                                                                                       // 2225
        /**                                                                                                            // 2226
         * @param {string} provider                                                                                    // 2227
         * @param {string} method                                                                                      // 2228
         * @returns {angular.Module}                                                                                   // 2229
         */                                                                                                            // 2230
        function invokeLaterAndSetModuleName(provider, method) {                                                       // 2231
          return function(recipeName, factoryFunction) {                                                               // 2232
            if (factoryFunction && isFunction(factoryFunction)) factoryFunction.$$moduleName = name;                   // 2233
            invokeQueue.push([provider, method, arguments]);                                                           // 2234
            return moduleInstance;                                                                                     // 2235
          };                                                                                                           // 2236
        }                                                                                                              // 2237
      });                                                                                                              // 2238
    };                                                                                                                 // 2239
  });                                                                                                                  // 2240
                                                                                                                       // 2241
}                                                                                                                      // 2242
                                                                                                                       // 2243
/* global: toDebugString: true */                                                                                      // 2244
                                                                                                                       // 2245
function serializeObject(obj) {                                                                                        // 2246
  var seen = [];                                                                                                       // 2247
                                                                                                                       // 2248
  return JSON.stringify(obj, function(key, val) {                                                                      // 2249
    val = toJsonReplacer(key, val);                                                                                    // 2250
    if (isObject(val)) {                                                                                               // 2251
                                                                                                                       // 2252
      if (seen.indexOf(val) >= 0) return '...';                                                                        // 2253
                                                                                                                       // 2254
      seen.push(val);                                                                                                  // 2255
    }                                                                                                                  // 2256
    return val;                                                                                                        // 2257
  });                                                                                                                  // 2258
}                                                                                                                      // 2259
                                                                                                                       // 2260
function toDebugString(obj) {                                                                                          // 2261
  if (typeof obj === 'function') {                                                                                     // 2262
    return obj.toString().replace(/ \{[\s\S]*$/, '');                                                                  // 2263
  } else if (isUndefined(obj)) {                                                                                       // 2264
    return 'undefined';                                                                                                // 2265
  } else if (typeof obj !== 'string') {                                                                                // 2266
    return serializeObject(obj);                                                                                       // 2267
  }                                                                                                                    // 2268
  return obj;                                                                                                          // 2269
}                                                                                                                      // 2270
                                                                                                                       // 2271
/* global angularModule: true,                                                                                         // 2272
  version: true,                                                                                                       // 2273
                                                                                                                       // 2274
  $CompileProvider,                                                                                                    // 2275
                                                                                                                       // 2276
  htmlAnchorDirective,                                                                                                 // 2277
  inputDirective,                                                                                                      // 2278
  inputDirective,                                                                                                      // 2279
  formDirective,                                                                                                       // 2280
  scriptDirective,                                                                                                     // 2281
  selectDirective,                                                                                                     // 2282
  styleDirective,                                                                                                      // 2283
  optionDirective,                                                                                                     // 2284
  ngBindDirective,                                                                                                     // 2285
  ngBindHtmlDirective,                                                                                                 // 2286
  ngBindTemplateDirective,                                                                                             // 2287
  ngClassDirective,                                                                                                    // 2288
  ngClassEvenDirective,                                                                                                // 2289
  ngClassOddDirective,                                                                                                 // 2290
  ngCloakDirective,                                                                                                    // 2291
  ngControllerDirective,                                                                                               // 2292
  ngFormDirective,                                                                                                     // 2293
  ngHideDirective,                                                                                                     // 2294
  ngIfDirective,                                                                                                       // 2295
  ngIncludeDirective,                                                                                                  // 2296
  ngIncludeFillContentDirective,                                                                                       // 2297
  ngInitDirective,                                                                                                     // 2298
  ngNonBindableDirective,                                                                                              // 2299
  ngPluralizeDirective,                                                                                                // 2300
  ngRepeatDirective,                                                                                                   // 2301
  ngShowDirective,                                                                                                     // 2302
  ngStyleDirective,                                                                                                    // 2303
  ngSwitchDirective,                                                                                                   // 2304
  ngSwitchWhenDirective,                                                                                               // 2305
  ngSwitchDefaultDirective,                                                                                            // 2306
  ngOptionsDirective,                                                                                                  // 2307
  ngTranscludeDirective,                                                                                               // 2308
  ngModelDirective,                                                                                                    // 2309
  ngListDirective,                                                                                                     // 2310
  ngChangeDirective,                                                                                                   // 2311
  patternDirective,                                                                                                    // 2312
  patternDirective,                                                                                                    // 2313
  requiredDirective,                                                                                                   // 2314
  requiredDirective,                                                                                                   // 2315
  minlengthDirective,                                                                                                  // 2316
  minlengthDirective,                                                                                                  // 2317
  maxlengthDirective,                                                                                                  // 2318
  maxlengthDirective,                                                                                                  // 2319
  ngValueDirective,                                                                                                    // 2320
  ngModelOptionsDirective,                                                                                             // 2321
  ngAttributeAliasDirectives,                                                                                          // 2322
  ngEventDirectives,                                                                                                   // 2323
                                                                                                                       // 2324
  $AnchorScrollProvider,                                                                                               // 2325
  $AnimateProvider,                                                                                                    // 2326
  $CoreAnimateCssProvider,                                                                                             // 2327
  $$CoreAnimateQueueProvider,                                                                                          // 2328
  $$CoreAnimateRunnerProvider,                                                                                         // 2329
  $BrowserProvider,                                                                                                    // 2330
  $CacheFactoryProvider,                                                                                               // 2331
  $ControllerProvider,                                                                                                 // 2332
  $DocumentProvider,                                                                                                   // 2333
  $ExceptionHandlerProvider,                                                                                           // 2334
  $FilterProvider,                                                                                                     // 2335
  $$ForceReflowProvider,                                                                                               // 2336
  $InterpolateProvider,                                                                                                // 2337
  $IntervalProvider,                                                                                                   // 2338
  $$HashMapProvider,                                                                                                   // 2339
  $HttpProvider,                                                                                                       // 2340
  $HttpParamSerializerProvider,                                                                                        // 2341
  $HttpParamSerializerJQLikeProvider,                                                                                  // 2342
  $HttpBackendProvider,                                                                                                // 2343
  $xhrFactoryProvider,                                                                                                 // 2344
  $LocationProvider,                                                                                                   // 2345
  $LogProvider,                                                                                                        // 2346
  $ParseProvider,                                                                                                      // 2347
  $RootScopeProvider,                                                                                                  // 2348
  $QProvider,                                                                                                          // 2349
  $$QProvider,                                                                                                         // 2350
  $$SanitizeUriProvider,                                                                                               // 2351
  $SceProvider,                                                                                                        // 2352
  $SceDelegateProvider,                                                                                                // 2353
  $SnifferProvider,                                                                                                    // 2354
  $TemplateCacheProvider,                                                                                              // 2355
  $TemplateRequestProvider,                                                                                            // 2356
  $$TestabilityProvider,                                                                                               // 2357
  $TimeoutProvider,                                                                                                    // 2358
  $$RAFProvider,                                                                                                       // 2359
  $WindowProvider,                                                                                                     // 2360
  $$jqLiteProvider,                                                                                                    // 2361
  $$CookieReaderProvider                                                                                               // 2362
*/                                                                                                                     // 2363
                                                                                                                       // 2364
                                                                                                                       // 2365
/**                                                                                                                    // 2366
 * @ngdoc object                                                                                                       // 2367
 * @name angular.version                                                                                               // 2368
 * @module ng                                                                                                          // 2369
 * @description                                                                                                        // 2370
 * An object that contains information about the current AngularJS version.                                            // 2371
 *                                                                                                                     // 2372
 * This object has the following properties:                                                                           // 2373
 *                                                                                                                     // 2374
 * - `full` – `{string}` – Full version string, such as "0.9.18".                                                      // 2375
 * - `major` – `{number}` – Major version number, such as "0".                                                         // 2376
 * - `minor` – `{number}` – Minor version number, such as "9".                                                         // 2377
 * - `dot` – `{number}` – Dot version number, such as "18".                                                            // 2378
 * - `codeName` – `{string}` – Code name of the release, such as "jiggling-armfat".                                    // 2379
 */                                                                                                                    // 2380
var version = {                                                                                                        // 2381
  full: '1.4.7',    // all of these placeholder strings will be replaced by grunt's                                    // 2382
  major: 1,    // package task                                                                                         // 2383
  minor: 4,                                                                                                            // 2384
  dot: 7,                                                                                                              // 2385
  codeName: 'dark-luminescence'                                                                                        // 2386
};                                                                                                                     // 2387
                                                                                                                       // 2388
                                                                                                                       // 2389
function publishExternalAPI(angular) {                                                                                 // 2390
  extend(angular, {                                                                                                    // 2391
    'bootstrap': bootstrap,                                                                                            // 2392
    'copy': copy,                                                                                                      // 2393
    'extend': extend,                                                                                                  // 2394
    'merge': merge,                                                                                                    // 2395
    'equals': equals,                                                                                                  // 2396
    'element': jqLite,                                                                                                 // 2397
    'forEach': forEach,                                                                                                // 2398
    'injector': createInjector,                                                                                        // 2399
    'noop': noop,                                                                                                      // 2400
    'bind': bind,                                                                                                      // 2401
    'toJson': toJson,                                                                                                  // 2402
    'fromJson': fromJson,                                                                                              // 2403
    'identity': identity,                                                                                              // 2404
    'isUndefined': isUndefined,                                                                                        // 2405
    'isDefined': isDefined,                                                                                            // 2406
    'isString': isString,                                                                                              // 2407
    'isFunction': isFunction,                                                                                          // 2408
    'isObject': isObject,                                                                                              // 2409
    'isNumber': isNumber,                                                                                              // 2410
    'isElement': isElement,                                                                                            // 2411
    'isArray': isArray,                                                                                                // 2412
    'version': version,                                                                                                // 2413
    'isDate': isDate,                                                                                                  // 2414
    'lowercase': lowercase,                                                                                            // 2415
    'uppercase': uppercase,                                                                                            // 2416
    'callbacks': {counter: 0},                                                                                         // 2417
    'getTestability': getTestability,                                                                                  // 2418
    '$$minErr': minErr,                                                                                                // 2419
    '$$csp': csp,                                                                                                      // 2420
    'reloadWithDebugInfo': reloadWithDebugInfo                                                                         // 2421
  });                                                                                                                  // 2422
                                                                                                                       // 2423
  angularModule = setupModuleLoader(window);                                                                           // 2424
                                                                                                                       // 2425
  angularModule('ng', ['ngLocale'], ['$provide',                                                                       // 2426
    function ngModule($provide) {                                                                                      // 2427
      // $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.                                // 2428
      $provide.provider({                                                                                              // 2429
        $$sanitizeUri: $$SanitizeUriProvider                                                                           // 2430
      });                                                                                                              // 2431
      $provide.provider('$compile', $CompileProvider).                                                                 // 2432
        directive({                                                                                                    // 2433
            a: htmlAnchorDirective,                                                                                    // 2434
            input: inputDirective,                                                                                     // 2435
            textarea: inputDirective,                                                                                  // 2436
            form: formDirective,                                                                                       // 2437
            script: scriptDirective,                                                                                   // 2438
            select: selectDirective,                                                                                   // 2439
            style: styleDirective,                                                                                     // 2440
            option: optionDirective,                                                                                   // 2441
            ngBind: ngBindDirective,                                                                                   // 2442
            ngBindHtml: ngBindHtmlDirective,                                                                           // 2443
            ngBindTemplate: ngBindTemplateDirective,                                                                   // 2444
            ngClass: ngClassDirective,                                                                                 // 2445
            ngClassEven: ngClassEvenDirective,                                                                         // 2446
            ngClassOdd: ngClassOddDirective,                                                                           // 2447
            ngCloak: ngCloakDirective,                                                                                 // 2448
            ngController: ngControllerDirective,                                                                       // 2449
            ngForm: ngFormDirective,                                                                                   // 2450
            ngHide: ngHideDirective,                                                                                   // 2451
            ngIf: ngIfDirective,                                                                                       // 2452
            ngInclude: ngIncludeDirective,                                                                             // 2453
            ngInit: ngInitDirective,                                                                                   // 2454
            ngNonBindable: ngNonBindableDirective,                                                                     // 2455
            ngPluralize: ngPluralizeDirective,                                                                         // 2456
            ngRepeat: ngRepeatDirective,                                                                               // 2457
            ngShow: ngShowDirective,                                                                                   // 2458
            ngStyle: ngStyleDirective,                                                                                 // 2459
            ngSwitch: ngSwitchDirective,                                                                               // 2460
            ngSwitchWhen: ngSwitchWhenDirective,                                                                       // 2461
            ngSwitchDefault: ngSwitchDefaultDirective,                                                                 // 2462
            ngOptions: ngOptionsDirective,                                                                             // 2463
            ngTransclude: ngTranscludeDirective,                                                                       // 2464
            ngModel: ngModelDirective,                                                                                 // 2465
            ngList: ngListDirective,                                                                                   // 2466
            ngChange: ngChangeDirective,                                                                               // 2467
            pattern: patternDirective,                                                                                 // 2468
            ngPattern: patternDirective,                                                                               // 2469
            required: requiredDirective,                                                                               // 2470
            ngRequired: requiredDirective,                                                                             // 2471
            minlength: minlengthDirective,                                                                             // 2472
            ngMinlength: minlengthDirective,                                                                           // 2473
            maxlength: maxlengthDirective,                                                                             // 2474
            ngMaxlength: maxlengthDirective,                                                                           // 2475
            ngValue: ngValueDirective,                                                                                 // 2476
            ngModelOptions: ngModelOptionsDirective                                                                    // 2477
        }).                                                                                                            // 2478
        directive({                                                                                                    // 2479
          ngInclude: ngIncludeFillContentDirective                                                                     // 2480
        }).                                                                                                            // 2481
        directive(ngAttributeAliasDirectives).                                                                         // 2482
        directive(ngEventDirectives);                                                                                  // 2483
      $provide.provider({                                                                                              // 2484
        $anchorScroll: $AnchorScrollProvider,                                                                          // 2485
        $animate: $AnimateProvider,                                                                                    // 2486
        $animateCss: $CoreAnimateCssProvider,                                                                          // 2487
        $$animateQueue: $$CoreAnimateQueueProvider,                                                                    // 2488
        $$AnimateRunner: $$CoreAnimateRunnerProvider,                                                                  // 2489
        $browser: $BrowserProvider,                                                                                    // 2490
        $cacheFactory: $CacheFactoryProvider,                                                                          // 2491
        $controller: $ControllerProvider,                                                                              // 2492
        $document: $DocumentProvider,                                                                                  // 2493
        $exceptionHandler: $ExceptionHandlerProvider,                                                                  // 2494
        $filter: $FilterProvider,                                                                                      // 2495
        $$forceReflow: $$ForceReflowProvider,                                                                          // 2496
        $interpolate: $InterpolateProvider,                                                                            // 2497
        $interval: $IntervalProvider,                                                                                  // 2498
        $http: $HttpProvider,                                                                                          // 2499
        $httpParamSerializer: $HttpParamSerializerProvider,                                                            // 2500
        $httpParamSerializerJQLike: $HttpParamSerializerJQLikeProvider,                                                // 2501
        $httpBackend: $HttpBackendProvider,                                                                            // 2502
        $xhrFactory: $xhrFactoryProvider,                                                                              // 2503
        $location: $LocationProvider,                                                                                  // 2504
        $log: $LogProvider,                                                                                            // 2505
        $parse: $ParseProvider,                                                                                        // 2506
        $rootScope: $RootScopeProvider,                                                                                // 2507
        $q: $QProvider,                                                                                                // 2508
        $$q: $$QProvider,                                                                                              // 2509
        $sce: $SceProvider,                                                                                            // 2510
        $sceDelegate: $SceDelegateProvider,                                                                            // 2511
        $sniffer: $SnifferProvider,                                                                                    // 2512
        $templateCache: $TemplateCacheProvider,                                                                        // 2513
        $templateRequest: $TemplateRequestProvider,                                                                    // 2514
        $$testability: $$TestabilityProvider,                                                                          // 2515
        $timeout: $TimeoutProvider,                                                                                    // 2516
        $window: $WindowProvider,                                                                                      // 2517
        $$rAF: $$RAFProvider,                                                                                          // 2518
        $$jqLite: $$jqLiteProvider,                                                                                    // 2519
        $$HashMap: $$HashMapProvider,                                                                                  // 2520
        $$cookieReader: $$CookieReaderProvider                                                                         // 2521
      });                                                                                                              // 2522
    }                                                                                                                  // 2523
  ]);                                                                                                                  // 2524
}                                                                                                                      // 2525
                                                                                                                       // 2526
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                           // 2527
 *     Any commits to this file should be reviewed with security in mind.  *                                           // 2528
 *   Changes to this file can potentially create security vulnerabilities. *                                           // 2529
 *          An approval from 2 Core members with history of modifying      *                                           // 2530
 *                         this file is required.                          *                                           // 2531
 *                                                                         *                                           // 2532
 *  Does the change somehow allow for arbitrary javascript to be executed? *                                           // 2533
 *    Or allows for someone to change the prototype of built-in objects?   *                                           // 2534
 *     Or gives undesired access to variables likes document or window?    *                                           // 2535
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */                                          // 2536
                                                                                                                       // 2537
/* global JQLitePrototype: true,                                                                                       // 2538
  addEventListenerFn: true,                                                                                            // 2539
  removeEventListenerFn: true,                                                                                         // 2540
  BOOLEAN_ATTR: true,                                                                                                  // 2541
  ALIASED_ATTR: true,                                                                                                  // 2542
*/                                                                                                                     // 2543
                                                                                                                       // 2544
//////////////////////////////////                                                                                     // 2545
//JQLite                                                                                                               // 2546
//////////////////////////////////                                                                                     // 2547
                                                                                                                       // 2548
/**                                                                                                                    // 2549
 * @ngdoc function                                                                                                     // 2550
 * @name angular.element                                                                                               // 2551
 * @module ng                                                                                                          // 2552
 * @kind function                                                                                                      // 2553
 *                                                                                                                     // 2554
 * @description                                                                                                        // 2555
 * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.                                    // 2556
 *                                                                                                                     // 2557
 * If jQuery is available, `angular.element` is an alias for the                                                       // 2558
 * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`                     // 2559
 * delegates to Angular's built-in subset of jQuery, called "jQuery lite" or "jqLite."                                 // 2560
 *                                                                                                                     // 2561
 * <div class="alert alert-success">jqLite is a tiny, API-compatible subset of jQuery that allows                      // 2562
 * Angular to manipulate the DOM in a cross-browser compatible way. **jqLite** implements only the most                // 2563
 * commonly needed functionality with the goal of having a very small footprint.</div>                                 // 2564
 *                                                                                                                     // 2565
 * To use `jQuery`, simply ensure it is loaded before the `angular.js` file.                                           // 2566
 *                                                                                                                     // 2567
 * <div class="alert">**Note:** all element references in Angular are always wrapped with jQuery or                    // 2568
 * jqLite; they are never raw DOM references.</div>                                                                    // 2569
 *                                                                                                                     // 2570
 * ## Angular's jqLite                                                                                                 // 2571
 * jqLite provides only the following jQuery methods:                                                                  // 2572
 *                                                                                                                     // 2573
 * - [`addClass()`](http://api.jquery.com/addClass/)                                                                   // 2574
 * - [`after()`](http://api.jquery.com/after/)                                                                         // 2575
 * - [`append()`](http://api.jquery.com/append/)                                                                       // 2576
 * - [`attr()`](http://api.jquery.com/attr/) - Does not support functions as parameters                                // 2577
 * - [`bind()`](http://api.jquery.com/bind/) - Does not support namespaces, selectors or eventData                     // 2578
 * - [`children()`](http://api.jquery.com/children/) - Does not support selectors                                      // 2579
 * - [`clone()`](http://api.jquery.com/clone/)                                                                         // 2580
 * - [`contents()`](http://api.jquery.com/contents/)                                                                   // 2581
 * - [`css()`](http://api.jquery.com/css/) - Only retrieves inline-styles, does not call `getComputedStyle()`. As a setter, does not convert numbers to strings or append 'px'.
 * - [`data()`](http://api.jquery.com/data/)                                                                           // 2583
 * - [`detach()`](http://api.jquery.com/detach/)                                                                       // 2584
 * - [`empty()`](http://api.jquery.com/empty/)                                                                         // 2585
 * - [`eq()`](http://api.jquery.com/eq/)                                                                               // 2586
 * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name                                          // 2587
 * - [`hasClass()`](http://api.jquery.com/hasClass/)                                                                   // 2588
 * - [`html()`](http://api.jquery.com/html/)                                                                           // 2589
 * - [`next()`](http://api.jquery.com/next/) - Does not support selectors                                              // 2590
 * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData                         // 2591
 * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces, selectors or event object as parameter       // 2592
 * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors                                  // 2593
 * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors                                          // 2594
 * - [`prepend()`](http://api.jquery.com/prepend/)                                                                     // 2595
 * - [`prop()`](http://api.jquery.com/prop/)                                                                           // 2596
 * - [`ready()`](http://api.jquery.com/ready/)                                                                         // 2597
 * - [`remove()`](http://api.jquery.com/remove/)                                                                       // 2598
 * - [`removeAttr()`](http://api.jquery.com/removeAttr/)                                                               // 2599
 * - [`removeClass()`](http://api.jquery.com/removeClass/)                                                             // 2600
 * - [`removeData()`](http://api.jquery.com/removeData/)                                                               // 2601
 * - [`replaceWith()`](http://api.jquery.com/replaceWith/)                                                             // 2602
 * - [`text()`](http://api.jquery.com/text/)                                                                           // 2603
 * - [`toggleClass()`](http://api.jquery.com/toggleClass/)                                                             // 2604
 * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers.            // 2605
 * - [`unbind()`](http://api.jquery.com/unbind/) - Does not support namespaces or event object as parameter            // 2606
 * - [`val()`](http://api.jquery.com/val/)                                                                             // 2607
 * - [`wrap()`](http://api.jquery.com/wrap/)                                                                           // 2608
 *                                                                                                                     // 2609
 * ## jQuery/jqLite Extras                                                                                             // 2610
 * Angular also provides the following additional methods and events to both jQuery and jqLite:                        // 2611
 *                                                                                                                     // 2612
 * ### Events                                                                                                          // 2613
 * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event                   // 2614
 *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM                  // 2615
 *    element before it is removed.                                                                                    // 2616
 *                                                                                                                     // 2617
 * ### Methods                                                                                                         // 2618
 * - `controller(name)` - retrieves the controller of the current element or its parent. By default                    // 2619
 *   retrieves controller associated with the `ngController` directive. If `name` is provided as                       // 2620
 *   camelCase directive name, then the controller for this directive will be retrieved (e.g.                          // 2621
 *   `'ngModel'`).                                                                                                     // 2622
 * - `injector()` - retrieves the injector of the current element or its parent.                                       // 2623
 * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current                                        // 2624
 *   element or its parent. Requires {@link guide/production#disabling-debug-data Debug Data} to                       // 2625
 *   be enabled.                                                                                                       // 2626
 * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the      // 2627
 *   current element. This getter should be used only on elements that contain a directive which starts a new isolate  // 2628
 *   scope. Calling `scope()` on this element always returns the original non-isolate scope.                           // 2629
 *   Requires {@link guide/production#disabling-debug-data Debug Data} to be enabled.                                  // 2630
 * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top                      // 2631
 *   parent element is reached.                                                                                        // 2632
 *                                                                                                                     // 2633
 * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.                             // 2634
 * @returns {Object} jQuery object.                                                                                    // 2635
 */                                                                                                                    // 2636
                                                                                                                       // 2637
JQLite.expando = 'ng339';                                                                                              // 2638
                                                                                                                       // 2639
var jqCache = JQLite.cache = {},                                                                                       // 2640
    jqId = 1,                                                                                                          // 2641
    addEventListenerFn = function(element, type, fn) {                                                                 // 2642
      element.addEventListener(type, fn, false);                                                                       // 2643
    },                                                                                                                 // 2644
    removeEventListenerFn = function(element, type, fn) {                                                              // 2645
      element.removeEventListener(type, fn, false);                                                                    // 2646
    };                                                                                                                 // 2647
                                                                                                                       // 2648
/*                                                                                                                     // 2649
 * !!! This is an undocumented "private" function !!!                                                                  // 2650
 */                                                                                                                    // 2651
JQLite._data = function(node) {                                                                                        // 2652
  //jQuery always returns an object on cache miss                                                                      // 2653
  return this.cache[node[this.expando]] || {};                                                                         // 2654
};                                                                                                                     // 2655
                                                                                                                       // 2656
function jqNextId() { return ++jqId; }                                                                                 // 2657
                                                                                                                       // 2658
                                                                                                                       // 2659
var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;                                                                          // 2660
var MOZ_HACK_REGEXP = /^moz([A-Z])/;                                                                                   // 2661
var MOUSE_EVENT_MAP= { mouseleave: "mouseout", mouseenter: "mouseover"};                                               // 2662
var jqLiteMinErr = minErr('jqLite');                                                                                   // 2663
                                                                                                                       // 2664
/**                                                                                                                    // 2665
 * Converts snake_case to camelCase.                                                                                   // 2666
 * Also there is special case for Moz prefix starting with upper case letter.                                          // 2667
 * @param name Name to normalize                                                                                       // 2668
 */                                                                                                                    // 2669
function camelCase(name) {                                                                                             // 2670
  return name.                                                                                                         // 2671
    replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {                                             // 2672
      return offset ? letter.toUpperCase() : letter;                                                                   // 2673
    }).                                                                                                                // 2674
    replace(MOZ_HACK_REGEXP, 'Moz$1');                                                                                 // 2675
}                                                                                                                      // 2676
                                                                                                                       // 2677
var SINGLE_TAG_REGEXP = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/;                                                               // 2678
var HTML_REGEXP = /<|&#?\w+;/;                                                                                         // 2679
var TAG_NAME_REGEXP = /<([\w:-]+)/;                                                                                    // 2680
var XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi;                     // 2681
                                                                                                                       // 2682
var wrapMap = {                                                                                                        // 2683
  'option': [1, '<select multiple="multiple">', '</select>'],                                                          // 2684
                                                                                                                       // 2685
  'thead': [1, '<table>', '</table>'],                                                                                 // 2686
  'col': [2, '<table><colgroup>', '</colgroup></table>'],                                                              // 2687
  'tr': [2, '<table><tbody>', '</tbody></table>'],                                                                     // 2688
  'td': [3, '<table><tbody><tr>', '</tr></tbody></table>'],                                                            // 2689
  '_default': [0, "", ""]                                                                                              // 2690
};                                                                                                                     // 2691
                                                                                                                       // 2692
wrapMap.optgroup = wrapMap.option;                                                                                     // 2693
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;                                    // 2694
wrapMap.th = wrapMap.td;                                                                                               // 2695
                                                                                                                       // 2696
                                                                                                                       // 2697
function jqLiteIsTextNode(html) {                                                                                      // 2698
  return !HTML_REGEXP.test(html);                                                                                      // 2699
}                                                                                                                      // 2700
                                                                                                                       // 2701
function jqLiteAcceptsData(node) {                                                                                     // 2702
  // The window object can accept data but has no nodeType                                                             // 2703
  // Otherwise we are only interested in elements (1) and documents (9)                                                // 2704
  var nodeType = node.nodeType;                                                                                        // 2705
  return nodeType === NODE_TYPE_ELEMENT || !nodeType || nodeType === NODE_TYPE_DOCUMENT;                               // 2706
}                                                                                                                      // 2707
                                                                                                                       // 2708
function jqLiteHasData(node) {                                                                                         // 2709
  for (var key in jqCache[node.ng339]) {                                                                               // 2710
    return true;                                                                                                       // 2711
  }                                                                                                                    // 2712
  return false;                                                                                                        // 2713
}                                                                                                                      // 2714
                                                                                                                       // 2715
function jqLiteBuildFragment(html, context) {                                                                          // 2716
  var tmp, tag, wrap,                                                                                                  // 2717
      fragment = context.createDocumentFragment(),                                                                     // 2718
      nodes = [], i;                                                                                                   // 2719
                                                                                                                       // 2720
  if (jqLiteIsTextNode(html)) {                                                                                        // 2721
    // Convert non-html into a text node                                                                               // 2722
    nodes.push(context.createTextNode(html));                                                                          // 2723
  } else {                                                                                                             // 2724
    // Convert html into DOM nodes                                                                                     // 2725
    tmp = tmp || fragment.appendChild(context.createElement("div"));                                                   // 2726
    tag = (TAG_NAME_REGEXP.exec(html) || ["", ""])[1].toLowerCase();                                                   // 2727
    wrap = wrapMap[tag] || wrapMap._default;                                                                           // 2728
    tmp.innerHTML = wrap[1] + html.replace(XHTML_TAG_REGEXP, "<$1></$2>") + wrap[2];                                   // 2729
                                                                                                                       // 2730
    // Descend through wrappers to the right content                                                                   // 2731
    i = wrap[0];                                                                                                       // 2732
    while (i--) {                                                                                                      // 2733
      tmp = tmp.lastChild;                                                                                             // 2734
    }                                                                                                                  // 2735
                                                                                                                       // 2736
    nodes = concat(nodes, tmp.childNodes);                                                                             // 2737
                                                                                                                       // 2738
    tmp = fragment.firstChild;                                                                                         // 2739
    tmp.textContent = "";                                                                                              // 2740
  }                                                                                                                    // 2741
                                                                                                                       // 2742
  // Remove wrapper from fragment                                                                                      // 2743
  fragment.textContent = "";                                                                                           // 2744
  fragment.innerHTML = ""; // Clear inner HTML                                                                         // 2745
  forEach(nodes, function(node) {                                                                                      // 2746
    fragment.appendChild(node);                                                                                        // 2747
  });                                                                                                                  // 2748
                                                                                                                       // 2749
  return fragment;                                                                                                     // 2750
}                                                                                                                      // 2751
                                                                                                                       // 2752
function jqLiteParseHTML(html, context) {                                                                              // 2753
  context = context || document;                                                                                       // 2754
  var parsed;                                                                                                          // 2755
                                                                                                                       // 2756
  if ((parsed = SINGLE_TAG_REGEXP.exec(html))) {                                                                       // 2757
    return [context.createElement(parsed[1])];                                                                         // 2758
  }                                                                                                                    // 2759
                                                                                                                       // 2760
  if ((parsed = jqLiteBuildFragment(html, context))) {                                                                 // 2761
    return parsed.childNodes;                                                                                          // 2762
  }                                                                                                                    // 2763
                                                                                                                       // 2764
  return [];                                                                                                           // 2765
}                                                                                                                      // 2766
                                                                                                                       // 2767
/////////////////////////////////////////////                                                                          // 2768
function JQLite(element) {                                                                                             // 2769
  if (element instanceof JQLite) {                                                                                     // 2770
    return element;                                                                                                    // 2771
  }                                                                                                                    // 2772
                                                                                                                       // 2773
  var argIsString;                                                                                                     // 2774
                                                                                                                       // 2775
  if (isString(element)) {                                                                                             // 2776
    element = trim(element);                                                                                           // 2777
    argIsString = true;                                                                                                // 2778
  }                                                                                                                    // 2779
  if (!(this instanceof JQLite)) {                                                                                     // 2780
    if (argIsString && element.charAt(0) != '<') {                                                                     // 2781
      throw jqLiteMinErr('nosel', 'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');
    }                                                                                                                  // 2783
    return new JQLite(element);                                                                                        // 2784
  }                                                                                                                    // 2785
                                                                                                                       // 2786
  if (argIsString) {                                                                                                   // 2787
    jqLiteAddNodes(this, jqLiteParseHTML(element));                                                                    // 2788
  } else {                                                                                                             // 2789
    jqLiteAddNodes(this, element);                                                                                     // 2790
  }                                                                                                                    // 2791
}                                                                                                                      // 2792
                                                                                                                       // 2793
function jqLiteClone(element) {                                                                                        // 2794
  return element.cloneNode(true);                                                                                      // 2795
}                                                                                                                      // 2796
                                                                                                                       // 2797
function jqLiteDealoc(element, onlyDescendants) {                                                                      // 2798
  if (!onlyDescendants) jqLiteRemoveData(element);                                                                     // 2799
                                                                                                                       // 2800
  if (element.querySelectorAll) {                                                                                      // 2801
    var descendants = element.querySelectorAll('*');                                                                   // 2802
    for (var i = 0, l = descendants.length; i < l; i++) {                                                              // 2803
      jqLiteRemoveData(descendants[i]);                                                                                // 2804
    }                                                                                                                  // 2805
  }                                                                                                                    // 2806
}                                                                                                                      // 2807
                                                                                                                       // 2808
function jqLiteOff(element, type, fn, unsupported) {                                                                   // 2809
  if (isDefined(unsupported)) throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument');  // 2810
                                                                                                                       // 2811
  var expandoStore = jqLiteExpandoStore(element);                                                                      // 2812
  var events = expandoStore && expandoStore.events;                                                                    // 2813
  var handle = expandoStore && expandoStore.handle;                                                                    // 2814
                                                                                                                       // 2815
  if (!handle) return; //no listeners registered                                                                       // 2816
                                                                                                                       // 2817
  if (!type) {                                                                                                         // 2818
    for (type in events) {                                                                                             // 2819
      if (type !== '$destroy') {                                                                                       // 2820
        removeEventListenerFn(element, type, handle);                                                                  // 2821
      }                                                                                                                // 2822
      delete events[type];                                                                                             // 2823
    }                                                                                                                  // 2824
  } else {                                                                                                             // 2825
    forEach(type.split(' '), function(type) {                                                                          // 2826
      if (isDefined(fn)) {                                                                                             // 2827
        var listenerFns = events[type];                                                                                // 2828
        arrayRemove(listenerFns || [], fn);                                                                            // 2829
        if (listenerFns && listenerFns.length > 0) {                                                                   // 2830
          return;                                                                                                      // 2831
        }                                                                                                              // 2832
      }                                                                                                                // 2833
                                                                                                                       // 2834
      removeEventListenerFn(element, type, handle);                                                                    // 2835
      delete events[type];                                                                                             // 2836
    });                                                                                                                // 2837
  }                                                                                                                    // 2838
}                                                                                                                      // 2839
                                                                                                                       // 2840
function jqLiteRemoveData(element, name) {                                                                             // 2841
  var expandoId = element.ng339;                                                                                       // 2842
  var expandoStore = expandoId && jqCache[expandoId];                                                                  // 2843
                                                                                                                       // 2844
  if (expandoStore) {                                                                                                  // 2845
    if (name) {                                                                                                        // 2846
      delete expandoStore.data[name];                                                                                  // 2847
      return;                                                                                                          // 2848
    }                                                                                                                  // 2849
                                                                                                                       // 2850
    if (expandoStore.handle) {                                                                                         // 2851
      if (expandoStore.events.$destroy) {                                                                              // 2852
        expandoStore.handle({}, '$destroy');                                                                           // 2853
      }                                                                                                                // 2854
      jqLiteOff(element);                                                                                              // 2855
    }                                                                                                                  // 2856
    delete jqCache[expandoId];                                                                                         // 2857
    element.ng339 = undefined; // don't delete DOM expandos. IE and Chrome don't like it                               // 2858
  }                                                                                                                    // 2859
}                                                                                                                      // 2860
                                                                                                                       // 2861
                                                                                                                       // 2862
function jqLiteExpandoStore(element, createIfNecessary) {                                                              // 2863
  var expandoId = element.ng339,                                                                                       // 2864
      expandoStore = expandoId && jqCache[expandoId];                                                                  // 2865
                                                                                                                       // 2866
  if (createIfNecessary && !expandoStore) {                                                                            // 2867
    element.ng339 = expandoId = jqNextId();                                                                            // 2868
    expandoStore = jqCache[expandoId] = {events: {}, data: {}, handle: undefined};                                     // 2869
  }                                                                                                                    // 2870
                                                                                                                       // 2871
  return expandoStore;                                                                                                 // 2872
}                                                                                                                      // 2873
                                                                                                                       // 2874
                                                                                                                       // 2875
function jqLiteData(element, key, value) {                                                                             // 2876
  if (jqLiteAcceptsData(element)) {                                                                                    // 2877
                                                                                                                       // 2878
    var isSimpleSetter = isDefined(value);                                                                             // 2879
    var isSimpleGetter = !isSimpleSetter && key && !isObject(key);                                                     // 2880
    var massGetter = !key;                                                                                             // 2881
    var expandoStore = jqLiteExpandoStore(element, !isSimpleGetter);                                                   // 2882
    var data = expandoStore && expandoStore.data;                                                                      // 2883
                                                                                                                       // 2884
    if (isSimpleSetter) { // data('key', value)                                                                        // 2885
      data[key] = value;                                                                                               // 2886
    } else {                                                                                                           // 2887
      if (massGetter) {  // data()                                                                                     // 2888
        return data;                                                                                                   // 2889
      } else {                                                                                                         // 2890
        if (isSimpleGetter) { // data('key')                                                                           // 2891
          // don't force creation of expandoStore if it doesn't exist yet                                              // 2892
          return data && data[key];                                                                                    // 2893
        } else { // mass-setter: data({key1: val1, key2: val2})                                                        // 2894
          extend(data, key);                                                                                           // 2895
        }                                                                                                              // 2896
      }                                                                                                                // 2897
    }                                                                                                                  // 2898
  }                                                                                                                    // 2899
}                                                                                                                      // 2900
                                                                                                                       // 2901
function jqLiteHasClass(element, selector) {                                                                           // 2902
  if (!element.getAttribute) return false;                                                                             // 2903
  return ((" " + (element.getAttribute('class') || '') + " ").replace(/[\n\t]/g, " ").                                 // 2904
      indexOf(" " + selector + " ") > -1);                                                                             // 2905
}                                                                                                                      // 2906
                                                                                                                       // 2907
function jqLiteRemoveClass(element, cssClasses) {                                                                      // 2908
  if (cssClasses && element.setAttribute) {                                                                            // 2909
    forEach(cssClasses.split(' '), function(cssClass) {                                                                // 2910
      element.setAttribute('class', trim(                                                                              // 2911
          (" " + (element.getAttribute('class') || '') + " ")                                                          // 2912
          .replace(/[\n\t]/g, " ")                                                                                     // 2913
          .replace(" " + trim(cssClass) + " ", " "))                                                                   // 2914
      );                                                                                                               // 2915
    });                                                                                                                // 2916
  }                                                                                                                    // 2917
}                                                                                                                      // 2918
                                                                                                                       // 2919
function jqLiteAddClass(element, cssClasses) {                                                                         // 2920
  if (cssClasses && element.setAttribute) {                                                                            // 2921
    var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ')                                          // 2922
                            .replace(/[\n\t]/g, " ");                                                                  // 2923
                                                                                                                       // 2924
    forEach(cssClasses.split(' '), function(cssClass) {                                                                // 2925
      cssClass = trim(cssClass);                                                                                       // 2926
      if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {                                                      // 2927
        existingClasses += cssClass + ' ';                                                                             // 2928
      }                                                                                                                // 2929
    });                                                                                                                // 2930
                                                                                                                       // 2931
    element.setAttribute('class', trim(existingClasses));                                                              // 2932
  }                                                                                                                    // 2933
}                                                                                                                      // 2934
                                                                                                                       // 2935
                                                                                                                       // 2936
function jqLiteAddNodes(root, elements) {                                                                              // 2937
  // THIS CODE IS VERY HOT. Don't make changes without benchmarking.                                                   // 2938
                                                                                                                       // 2939
  if (elements) {                                                                                                      // 2940
                                                                                                                       // 2941
    // if a Node (the most common case)                                                                                // 2942
    if (elements.nodeType) {                                                                                           // 2943
      root[root.length++] = elements;                                                                                  // 2944
    } else {                                                                                                           // 2945
      var length = elements.length;                                                                                    // 2946
                                                                                                                       // 2947
      // if an Array or NodeList and not a Window                                                                      // 2948
      if (typeof length === 'number' && elements.window !== elements) {                                                // 2949
        if (length) {                                                                                                  // 2950
          for (var i = 0; i < length; i++) {                                                                           // 2951
            root[root.length++] = elements[i];                                                                         // 2952
          }                                                                                                            // 2953
        }                                                                                                              // 2954
      } else {                                                                                                         // 2955
        root[root.length++] = elements;                                                                                // 2956
      }                                                                                                                // 2957
    }                                                                                                                  // 2958
  }                                                                                                                    // 2959
}                                                                                                                      // 2960
                                                                                                                       // 2961
                                                                                                                       // 2962
function jqLiteController(element, name) {                                                                             // 2963
  return jqLiteInheritedData(element, '$' + (name || 'ngController') + 'Controller');                                  // 2964
}                                                                                                                      // 2965
                                                                                                                       // 2966
function jqLiteInheritedData(element, name, value) {                                                                   // 2967
  // if element is the document object work with the html element instead                                              // 2968
  // this makes $(document).scope() possible                                                                           // 2969
  if (element.nodeType == NODE_TYPE_DOCUMENT) {                                                                        // 2970
    element = element.documentElement;                                                                                 // 2971
  }                                                                                                                    // 2972
  var names = isArray(name) ? name : [name];                                                                           // 2973
                                                                                                                       // 2974
  while (element) {                                                                                                    // 2975
    for (var i = 0, ii = names.length; i < ii; i++) {                                                                  // 2976
      if (isDefined(value = jqLite.data(element, names[i]))) return value;                                             // 2977
    }                                                                                                                  // 2978
                                                                                                                       // 2979
    // If dealing with a document fragment node with a host element, and no parent, use the host                       // 2980
    // element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM                     // 2981
    // to lookup parent controllers.                                                                                   // 2982
    element = element.parentNode || (element.nodeType === NODE_TYPE_DOCUMENT_FRAGMENT && element.host);                // 2983
  }                                                                                                                    // 2984
}                                                                                                                      // 2985
                                                                                                                       // 2986
function jqLiteEmpty(element) {                                                                                        // 2987
  jqLiteDealoc(element, true);                                                                                         // 2988
  while (element.firstChild) {                                                                                         // 2989
    element.removeChild(element.firstChild);                                                                           // 2990
  }                                                                                                                    // 2991
}                                                                                                                      // 2992
                                                                                                                       // 2993
function jqLiteRemove(element, keepData) {                                                                             // 2994
  if (!keepData) jqLiteDealoc(element);                                                                                // 2995
  var parent = element.parentNode;                                                                                     // 2996
  if (parent) parent.removeChild(element);                                                                             // 2997
}                                                                                                                      // 2998
                                                                                                                       // 2999
                                                                                                                       // 3000
function jqLiteDocumentLoaded(action, win) {                                                                           // 3001
  win = win || window;                                                                                                 // 3002
  if (win.document.readyState === 'complete') {                                                                        // 3003
    // Force the action to be run async for consistent behaviour                                                       // 3004
    // from the action's point of view                                                                                 // 3005
    // i.e. it will definitely not be in a $apply                                                                      // 3006
    win.setTimeout(action);                                                                                            // 3007
  } else {                                                                                                             // 3008
    // No need to unbind this handler as load is only ever called once                                                 // 3009
    jqLite(win).on('load', action);                                                                                    // 3010
  }                                                                                                                    // 3011
}                                                                                                                      // 3012
                                                                                                                       // 3013
//////////////////////////////////////////                                                                             // 3014
// Functions which are declared directly.                                                                              // 3015
//////////////////////////////////////////                                                                             // 3016
var JQLitePrototype = JQLite.prototype = {                                                                             // 3017
  ready: function(fn) {                                                                                                // 3018
    var fired = false;                                                                                                 // 3019
                                                                                                                       // 3020
    function trigger() {                                                                                               // 3021
      if (fired) return;                                                                                               // 3022
      fired = true;                                                                                                    // 3023
      fn();                                                                                                            // 3024
    }                                                                                                                  // 3025
                                                                                                                       // 3026
    // check if document is already loaded                                                                             // 3027
    if (document.readyState === 'complete') {                                                                          // 3028
      setTimeout(trigger);                                                                                             // 3029
    } else {                                                                                                           // 3030
      this.on('DOMContentLoaded', trigger); // works for modern browsers and IE9                                       // 3031
      // we can not use jqLite since we are not done loading and jQuery could be loaded later.                         // 3032
      // jshint -W064                                                                                                  // 3033
      JQLite(window).on('load', trigger); // fallback to window.onload for others                                      // 3034
      // jshint +W064                                                                                                  // 3035
    }                                                                                                                  // 3036
  },                                                                                                                   // 3037
  toString: function() {                                                                                               // 3038
    var value = [];                                                                                                    // 3039
    forEach(this, function(e) { value.push('' + e);});                                                                 // 3040
    return '[' + value.join(', ') + ']';                                                                               // 3041
  },                                                                                                                   // 3042
                                                                                                                       // 3043
  eq: function(index) {                                                                                                // 3044
      return (index >= 0) ? jqLite(this[index]) : jqLite(this[this.length + index]);                                   // 3045
  },                                                                                                                   // 3046
                                                                                                                       // 3047
  length: 0,                                                                                                           // 3048
  push: push,                                                                                                          // 3049
  sort: [].sort,                                                                                                       // 3050
  splice: [].splice                                                                                                    // 3051
};                                                                                                                     // 3052
                                                                                                                       // 3053
//////////////////////////////////////////                                                                             // 3054
// Functions iterating getter/setters.                                                                                 // 3055
// these functions return self on setter and                                                                           // 3056
// value on get.                                                                                                       // 3057
//////////////////////////////////////////                                                                             // 3058
var BOOLEAN_ATTR = {};                                                                                                 // 3059
forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function(value) {                      // 3060
  BOOLEAN_ATTR[lowercase(value)] = value;                                                                              // 3061
});                                                                                                                    // 3062
var BOOLEAN_ELEMENTS = {};                                                                                             // 3063
forEach('input,select,option,textarea,button,form,details'.split(','), function(value) {                               // 3064
  BOOLEAN_ELEMENTS[value] = true;                                                                                      // 3065
});                                                                                                                    // 3066
var ALIASED_ATTR = {                                                                                                   // 3067
  'ngMinlength': 'minlength',                                                                                          // 3068
  'ngMaxlength': 'maxlength',                                                                                          // 3069
  'ngMin': 'min',                                                                                                      // 3070
  'ngMax': 'max',                                                                                                      // 3071
  'ngPattern': 'pattern'                                                                                               // 3072
};                                                                                                                     // 3073
                                                                                                                       // 3074
function getBooleanAttrName(element, name) {                                                                           // 3075
  // check dom last since we will most likely fail on name                                                             // 3076
  var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];                                                                  // 3077
                                                                                                                       // 3078
  // booleanAttr is here twice to minimize DOM access                                                                  // 3079
  return booleanAttr && BOOLEAN_ELEMENTS[nodeName_(element)] && booleanAttr;                                           // 3080
}                                                                                                                      // 3081
                                                                                                                       // 3082
function getAliasedAttrName(name) {                                                                                    // 3083
  return ALIASED_ATTR[name];                                                                                           // 3084
}                                                                                                                      // 3085
                                                                                                                       // 3086
forEach({                                                                                                              // 3087
  data: jqLiteData,                                                                                                    // 3088
  removeData: jqLiteRemoveData,                                                                                        // 3089
  hasData: jqLiteHasData                                                                                               // 3090
}, function(fn, name) {                                                                                                // 3091
  JQLite[name] = fn;                                                                                                   // 3092
});                                                                                                                    // 3093
                                                                                                                       // 3094
forEach({                                                                                                              // 3095
  data: jqLiteData,                                                                                                    // 3096
  inheritedData: jqLiteInheritedData,                                                                                  // 3097
                                                                                                                       // 3098
  scope: function(element) {                                                                                           // 3099
    // Can't use jqLiteData here directly so we stay compatible with jQuery!                                           // 3100
    return jqLite.data(element, '$scope') || jqLiteInheritedData(element.parentNode || element, ['$isolateScope', '$scope']);
  },                                                                                                                   // 3102
                                                                                                                       // 3103
  isolateScope: function(element) {                                                                                    // 3104
    // Can't use jqLiteData here directly so we stay compatible with jQuery!                                           // 3105
    return jqLite.data(element, '$isolateScope') || jqLite.data(element, '$isolateScopeNoTemplate');                   // 3106
  },                                                                                                                   // 3107
                                                                                                                       // 3108
  controller: jqLiteController,                                                                                        // 3109
                                                                                                                       // 3110
  injector: function(element) {                                                                                        // 3111
    return jqLiteInheritedData(element, '$injector');                                                                  // 3112
  },                                                                                                                   // 3113
                                                                                                                       // 3114
  removeAttr: function(element, name) {                                                                                // 3115
    element.removeAttribute(name);                                                                                     // 3116
  },                                                                                                                   // 3117
                                                                                                                       // 3118
  hasClass: jqLiteHasClass,                                                                                            // 3119
                                                                                                                       // 3120
  css: function(element, name, value) {                                                                                // 3121
    name = camelCase(name);                                                                                            // 3122
                                                                                                                       // 3123
    if (isDefined(value)) {                                                                                            // 3124
      element.style[name] = value;                                                                                     // 3125
    } else {                                                                                                           // 3126
      return element.style[name];                                                                                      // 3127
    }                                                                                                                  // 3128
  },                                                                                                                   // 3129
                                                                                                                       // 3130
  attr: function(element, name, value) {                                                                               // 3131
    var nodeType = element.nodeType;                                                                                   // 3132
    if (nodeType === NODE_TYPE_TEXT || nodeType === NODE_TYPE_ATTRIBUTE || nodeType === NODE_TYPE_COMMENT) {           // 3133
      return;                                                                                                          // 3134
    }                                                                                                                  // 3135
    var lowercasedName = lowercase(name);                                                                              // 3136
    if (BOOLEAN_ATTR[lowercasedName]) {                                                                                // 3137
      if (isDefined(value)) {                                                                                          // 3138
        if (!!value) {                                                                                                 // 3139
          element[name] = true;                                                                                        // 3140
          element.setAttribute(name, lowercasedName);                                                                  // 3141
        } else {                                                                                                       // 3142
          element[name] = false;                                                                                       // 3143
          element.removeAttribute(lowercasedName);                                                                     // 3144
        }                                                                                                              // 3145
      } else {                                                                                                         // 3146
        return (element[name] ||                                                                                       // 3147
                 (element.attributes.getNamedItem(name) || noop).specified)                                            // 3148
               ? lowercasedName                                                                                        // 3149
               : undefined;                                                                                            // 3150
      }                                                                                                                // 3151
    } else if (isDefined(value)) {                                                                                     // 3152
      element.setAttribute(name, value);                                                                               // 3153
    } else if (element.getAttribute) {                                                                                 // 3154
      // the extra argument "2" is to get the right thing for a.href in IE, see jQuery code                            // 3155
      // some elements (e.g. Document) don't have get attribute, so return undefined                                   // 3156
      var ret = element.getAttribute(name, 2);                                                                         // 3157
      // normalize non-existing attributes to undefined (as jQuery)                                                    // 3158
      return ret === null ? undefined : ret;                                                                           // 3159
    }                                                                                                                  // 3160
  },                                                                                                                   // 3161
                                                                                                                       // 3162
  prop: function(element, name, value) {                                                                               // 3163
    if (isDefined(value)) {                                                                                            // 3164
      element[name] = value;                                                                                           // 3165
    } else {                                                                                                           // 3166
      return element[name];                                                                                            // 3167
    }                                                                                                                  // 3168
  },                                                                                                                   // 3169
                                                                                                                       // 3170
  text: (function() {                                                                                                  // 3171
    getText.$dv = '';                                                                                                  // 3172
    return getText;                                                                                                    // 3173
                                                                                                                       // 3174
    function getText(element, value) {                                                                                 // 3175
      if (isUndefined(value)) {                                                                                        // 3176
        var nodeType = element.nodeType;                                                                               // 3177
        return (nodeType === NODE_TYPE_ELEMENT || nodeType === NODE_TYPE_TEXT) ? element.textContent : '';             // 3178
      }                                                                                                                // 3179
      element.textContent = value;                                                                                     // 3180
    }                                                                                                                  // 3181
  })(),                                                                                                                // 3182
                                                                                                                       // 3183
  val: function(element, value) {                                                                                      // 3184
    if (isUndefined(value)) {                                                                                          // 3185
      if (element.multiple && nodeName_(element) === 'select') {                                                       // 3186
        var result = [];                                                                                               // 3187
        forEach(element.options, function(option) {                                                                    // 3188
          if (option.selected) {                                                                                       // 3189
            result.push(option.value || option.text);                                                                  // 3190
          }                                                                                                            // 3191
        });                                                                                                            // 3192
        return result.length === 0 ? null : result;                                                                    // 3193
      }                                                                                                                // 3194
      return element.value;                                                                                            // 3195
    }                                                                                                                  // 3196
    element.value = value;                                                                                             // 3197
  },                                                                                                                   // 3198
                                                                                                                       // 3199
  html: function(element, value) {                                                                                     // 3200
    if (isUndefined(value)) {                                                                                          // 3201
      return element.innerHTML;                                                                                        // 3202
    }                                                                                                                  // 3203
    jqLiteDealoc(element, true);                                                                                       // 3204
    element.innerHTML = value;                                                                                         // 3205
  },                                                                                                                   // 3206
                                                                                                                       // 3207
  empty: jqLiteEmpty                                                                                                   // 3208
}, function(fn, name) {                                                                                                // 3209
  /**                                                                                                                  // 3210
   * Properties: writes return selection, reads return first value                                                     // 3211
   */                                                                                                                  // 3212
  JQLite.prototype[name] = function(arg1, arg2) {                                                                      // 3213
    var i, key;                                                                                                        // 3214
    var nodeCount = this.length;                                                                                       // 3215
                                                                                                                       // 3216
    // jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it                   // 3217
    // in a way that survives minification.                                                                            // 3218
    // jqLiteEmpty takes no arguments but is a setter.                                                                 // 3219
    if (fn !== jqLiteEmpty &&                                                                                          // 3220
        (isUndefined((fn.length == 2 && (fn !== jqLiteHasClass && fn !== jqLiteController)) ? arg1 : arg2))) {         // 3221
      if (isObject(arg1)) {                                                                                            // 3222
                                                                                                                       // 3223
        // we are a write, but the object properties are the key/values                                                // 3224
        for (i = 0; i < nodeCount; i++) {                                                                              // 3225
          if (fn === jqLiteData) {                                                                                     // 3226
            // data() takes the whole object in jQuery                                                                 // 3227
            fn(this[i], arg1);                                                                                         // 3228
          } else {                                                                                                     // 3229
            for (key in arg1) {                                                                                        // 3230
              fn(this[i], key, arg1[key]);                                                                             // 3231
            }                                                                                                          // 3232
          }                                                                                                            // 3233
        }                                                                                                              // 3234
        // return self for chaining                                                                                    // 3235
        return this;                                                                                                   // 3236
      } else {                                                                                                         // 3237
        // we are a read, so read the first child.                                                                     // 3238
        // TODO: do we still need this?                                                                                // 3239
        var value = fn.$dv;                                                                                            // 3240
        // Only if we have $dv do we iterate over all, otherwise it is just the first element.                         // 3241
        var jj = (isUndefined(value)) ? Math.min(nodeCount, 1) : nodeCount;                                            // 3242
        for (var j = 0; j < jj; j++) {                                                                                 // 3243
          var nodeValue = fn(this[j], arg1, arg2);                                                                     // 3244
          value = value ? value + nodeValue : nodeValue;                                                               // 3245
        }                                                                                                              // 3246
        return value;                                                                                                  // 3247
      }                                                                                                                // 3248
    } else {                                                                                                           // 3249
      // we are a write, so apply to all children                                                                      // 3250
      for (i = 0; i < nodeCount; i++) {                                                                                // 3251
        fn(this[i], arg1, arg2);                                                                                       // 3252
      }                                                                                                                // 3253
      // return self for chaining                                                                                      // 3254
      return this;                                                                                                     // 3255
    }                                                                                                                  // 3256
  };                                                                                                                   // 3257
});                                                                                                                    // 3258
                                                                                                                       // 3259
function createEventHandler(element, events) {                                                                         // 3260
  var eventHandler = function(event, type) {                                                                           // 3261
    // jQuery specific api                                                                                             // 3262
    event.isDefaultPrevented = function() {                                                                            // 3263
      return event.defaultPrevented;                                                                                   // 3264
    };                                                                                                                 // 3265
                                                                                                                       // 3266
    var eventFns = events[type || event.type];                                                                         // 3267
    var eventFnsLength = eventFns ? eventFns.length : 0;                                                               // 3268
                                                                                                                       // 3269
    if (!eventFnsLength) return;                                                                                       // 3270
                                                                                                                       // 3271
    if (isUndefined(event.immediatePropagationStopped)) {                                                              // 3272
      var originalStopImmediatePropagation = event.stopImmediatePropagation;                                           // 3273
      event.stopImmediatePropagation = function() {                                                                    // 3274
        event.immediatePropagationStopped = true;                                                                      // 3275
                                                                                                                       // 3276
        if (event.stopPropagation) {                                                                                   // 3277
          event.stopPropagation();                                                                                     // 3278
        }                                                                                                              // 3279
                                                                                                                       // 3280
        if (originalStopImmediatePropagation) {                                                                        // 3281
          originalStopImmediatePropagation.call(event);                                                                // 3282
        }                                                                                                              // 3283
      };                                                                                                               // 3284
    }                                                                                                                  // 3285
                                                                                                                       // 3286
    event.isImmediatePropagationStopped = function() {                                                                 // 3287
      return event.immediatePropagationStopped === true;                                                               // 3288
    };                                                                                                                 // 3289
                                                                                                                       // 3290
    // Copy event handlers in case event handlers array is modified during execution.                                  // 3291
    if ((eventFnsLength > 1)) {                                                                                        // 3292
      eventFns = shallowCopy(eventFns);                                                                                // 3293
    }                                                                                                                  // 3294
                                                                                                                       // 3295
    for (var i = 0; i < eventFnsLength; i++) {                                                                         // 3296
      if (!event.isImmediatePropagationStopped()) {                                                                    // 3297
        eventFns[i].call(element, event);                                                                              // 3298
      }                                                                                                                // 3299
    }                                                                                                                  // 3300
  };                                                                                                                   // 3301
                                                                                                                       // 3302
  // TODO: this is a hack for angularMocks/clearDataCache that makes it possible to deregister all                     // 3303
  //       events on `element`                                                                                         // 3304
  eventHandler.elem = element;                                                                                         // 3305
  return eventHandler;                                                                                                 // 3306
}                                                                                                                      // 3307
                                                                                                                       // 3308
//////////////////////////////////////////                                                                             // 3309
// Functions iterating traversal.                                                                                      // 3310
// These functions chain results into a single                                                                         // 3311
// selector.                                                                                                           // 3312
//////////////////////////////////////////                                                                             // 3313
forEach({                                                                                                              // 3314
  removeData: jqLiteRemoveData,                                                                                        // 3315
                                                                                                                       // 3316
  on: function jqLiteOn(element, type, fn, unsupported) {                                                              // 3317
    if (isDefined(unsupported)) throw jqLiteMinErr('onargs', 'jqLite#on() does not support the `selector` or `eventData` parameters');
                                                                                                                       // 3319
    // Do not add event handlers to non-elements because they will not be cleaned up.                                  // 3320
    if (!jqLiteAcceptsData(element)) {                                                                                 // 3321
      return;                                                                                                          // 3322
    }                                                                                                                  // 3323
                                                                                                                       // 3324
    var expandoStore = jqLiteExpandoStore(element, true);                                                              // 3325
    var events = expandoStore.events;                                                                                  // 3326
    var handle = expandoStore.handle;                                                                                  // 3327
                                                                                                                       // 3328
    if (!handle) {                                                                                                     // 3329
      handle = expandoStore.handle = createEventHandler(element, events);                                              // 3330
    }                                                                                                                  // 3331
                                                                                                                       // 3332
    // http://jsperf.com/string-indexof-vs-split                                                                       // 3333
    var types = type.indexOf(' ') >= 0 ? type.split(' ') : [type];                                                     // 3334
    var i = types.length;                                                                                              // 3335
                                                                                                                       // 3336
    while (i--) {                                                                                                      // 3337
      type = types[i];                                                                                                 // 3338
      var eventFns = events[type];                                                                                     // 3339
                                                                                                                       // 3340
      if (!eventFns) {                                                                                                 // 3341
        events[type] = [];                                                                                             // 3342
                                                                                                                       // 3343
        if (type === 'mouseenter' || type === 'mouseleave') {                                                          // 3344
          // Refer to jQuery's implementation of mouseenter & mouseleave                                               // 3345
          // Read about mouseenter and mouseleave:                                                                     // 3346
          // http://www.quirksmode.org/js/events_mouse.html#link8                                                      // 3347
                                                                                                                       // 3348
          jqLiteOn(element, MOUSE_EVENT_MAP[type], function(event) {                                                   // 3349
            var target = this, related = event.relatedTarget;                                                          // 3350
            // For mousenter/leave call the handler if related is outside the target.                                  // 3351
            // NB: No relatedTarget if the mouse left/entered the browser window                                       // 3352
            if (!related || (related !== target && !target.contains(related))) {                                       // 3353
              handle(event, type);                                                                                     // 3354
            }                                                                                                          // 3355
          });                                                                                                          // 3356
                                                                                                                       // 3357
        } else {                                                                                                       // 3358
          if (type !== '$destroy') {                                                                                   // 3359
            addEventListenerFn(element, type, handle);                                                                 // 3360
          }                                                                                                            // 3361
        }                                                                                                              // 3362
        eventFns = events[type];                                                                                       // 3363
      }                                                                                                                // 3364
      eventFns.push(fn);                                                                                               // 3365
    }                                                                                                                  // 3366
  },                                                                                                                   // 3367
                                                                                                                       // 3368
  off: jqLiteOff,                                                                                                      // 3369
                                                                                                                       // 3370
  one: function(element, type, fn) {                                                                                   // 3371
    element = jqLite(element);                                                                                         // 3372
                                                                                                                       // 3373
    //add the listener twice so that when it is called                                                                 // 3374
    //you can remove the original function and still be                                                                // 3375
    //able to call element.off(ev, fn) normally                                                                        // 3376
    element.on(type, function onFn() {                                                                                 // 3377
      element.off(type, fn);                                                                                           // 3378
      element.off(type, onFn);                                                                                         // 3379
    });                                                                                                                // 3380
    element.on(type, fn);                                                                                              // 3381
  },                                                                                                                   // 3382
                                                                                                                       // 3383
  replaceWith: function(element, replaceNode) {                                                                        // 3384
    var index, parent = element.parentNode;                                                                            // 3385
    jqLiteDealoc(element);                                                                                             // 3386
    forEach(new JQLite(replaceNode), function(node) {                                                                  // 3387
      if (index) {                                                                                                     // 3388
        parent.insertBefore(node, index.nextSibling);                                                                  // 3389
      } else {                                                                                                         // 3390
        parent.replaceChild(node, element);                                                                            // 3391
      }                                                                                                                // 3392
      index = node;                                                                                                    // 3393
    });                                                                                                                // 3394
  },                                                                                                                   // 3395
                                                                                                                       // 3396
  children: function(element) {                                                                                        // 3397
    var children = [];                                                                                                 // 3398
    forEach(element.childNodes, function(element) {                                                                    // 3399
      if (element.nodeType === NODE_TYPE_ELEMENT) {                                                                    // 3400
        children.push(element);                                                                                        // 3401
      }                                                                                                                // 3402
    });                                                                                                                // 3403
    return children;                                                                                                   // 3404
  },                                                                                                                   // 3405
                                                                                                                       // 3406
  contents: function(element) {                                                                                        // 3407
    return element.contentDocument || element.childNodes || [];                                                        // 3408
  },                                                                                                                   // 3409
                                                                                                                       // 3410
  append: function(element, node) {                                                                                    // 3411
    var nodeType = element.nodeType;                                                                                   // 3412
    if (nodeType !== NODE_TYPE_ELEMENT && nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT) return;                            // 3413
                                                                                                                       // 3414
    node = new JQLite(node);                                                                                           // 3415
                                                                                                                       // 3416
    for (var i = 0, ii = node.length; i < ii; i++) {                                                                   // 3417
      var child = node[i];                                                                                             // 3418
      element.appendChild(child);                                                                                      // 3419
    }                                                                                                                  // 3420
  },                                                                                                                   // 3421
                                                                                                                       // 3422
  prepend: function(element, node) {                                                                                   // 3423
    if (element.nodeType === NODE_TYPE_ELEMENT) {                                                                      // 3424
      var index = element.firstChild;                                                                                  // 3425
      forEach(new JQLite(node), function(child) {                                                                      // 3426
        element.insertBefore(child, index);                                                                            // 3427
      });                                                                                                              // 3428
    }                                                                                                                  // 3429
  },                                                                                                                   // 3430
                                                                                                                       // 3431
  wrap: function(element, wrapNode) {                                                                                  // 3432
    wrapNode = jqLite(wrapNode).eq(0).clone()[0];                                                                      // 3433
    var parent = element.parentNode;                                                                                   // 3434
    if (parent) {                                                                                                      // 3435
      parent.replaceChild(wrapNode, element);                                                                          // 3436
    }                                                                                                                  // 3437
    wrapNode.appendChild(element);                                                                                     // 3438
  },                                                                                                                   // 3439
                                                                                                                       // 3440
  remove: jqLiteRemove,                                                                                                // 3441
                                                                                                                       // 3442
  detach: function(element) {                                                                                          // 3443
    jqLiteRemove(element, true);                                                                                       // 3444
  },                                                                                                                   // 3445
                                                                                                                       // 3446
  after: function(element, newElement) {                                                                               // 3447
    var index = element, parent = element.parentNode;                                                                  // 3448
    newElement = new JQLite(newElement);                                                                               // 3449
                                                                                                                       // 3450
    for (var i = 0, ii = newElement.length; i < ii; i++) {                                                             // 3451
      var node = newElement[i];                                                                                        // 3452
      parent.insertBefore(node, index.nextSibling);                                                                    // 3453
      index = node;                                                                                                    // 3454
    }                                                                                                                  // 3455
  },                                                                                                                   // 3456
                                                                                                                       // 3457
  addClass: jqLiteAddClass,                                                                                            // 3458
  removeClass: jqLiteRemoveClass,                                                                                      // 3459
                                                                                                                       // 3460
  toggleClass: function(element, selector, condition) {                                                                // 3461
    if (selector) {                                                                                                    // 3462
      forEach(selector.split(' '), function(className) {                                                               // 3463
        var classCondition = condition;                                                                                // 3464
        if (isUndefined(classCondition)) {                                                                             // 3465
          classCondition = !jqLiteHasClass(element, className);                                                        // 3466
        }                                                                                                              // 3467
        (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);                                     // 3468
      });                                                                                                              // 3469
    }                                                                                                                  // 3470
  },                                                                                                                   // 3471
                                                                                                                       // 3472
  parent: function(element) {                                                                                          // 3473
    var parent = element.parentNode;                                                                                   // 3474
    return parent && parent.nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT ? parent : null;                                  // 3475
  },                                                                                                                   // 3476
                                                                                                                       // 3477
  next: function(element) {                                                                                            // 3478
    return element.nextElementSibling;                                                                                 // 3479
  },                                                                                                                   // 3480
                                                                                                                       // 3481
  find: function(element, selector) {                                                                                  // 3482
    if (element.getElementsByTagName) {                                                                                // 3483
      return element.getElementsByTagName(selector);                                                                   // 3484
    } else {                                                                                                           // 3485
      return [];                                                                                                       // 3486
    }                                                                                                                  // 3487
  },                                                                                                                   // 3488
                                                                                                                       // 3489
  clone: jqLiteClone,                                                                                                  // 3490
                                                                                                                       // 3491
  triggerHandler: function(element, event, extraParameters) {                                                          // 3492
                                                                                                                       // 3493
    var dummyEvent, eventFnsCopy, handlerArgs;                                                                         // 3494
    var eventName = event.type || event;                                                                               // 3495
    var expandoStore = jqLiteExpandoStore(element);                                                                    // 3496
    var events = expandoStore && expandoStore.events;                                                                  // 3497
    var eventFns = events && events[eventName];                                                                        // 3498
                                                                                                                       // 3499
    if (eventFns) {                                                                                                    // 3500
      // Create a dummy event to pass to the handlers                                                                  // 3501
      dummyEvent = {                                                                                                   // 3502
        preventDefault: function() { this.defaultPrevented = true; },                                                  // 3503
        isDefaultPrevented: function() { return this.defaultPrevented === true; },                                     // 3504
        stopImmediatePropagation: function() { this.immediatePropagationStopped = true; },                             // 3505
        isImmediatePropagationStopped: function() { return this.immediatePropagationStopped === true; },               // 3506
        stopPropagation: noop,                                                                                         // 3507
        type: eventName,                                                                                               // 3508
        target: element                                                                                                // 3509
      };                                                                                                               // 3510
                                                                                                                       // 3511
      // If a custom event was provided then extend our dummy event with it                                            // 3512
      if (event.type) {                                                                                                // 3513
        dummyEvent = extend(dummyEvent, event);                                                                        // 3514
      }                                                                                                                // 3515
                                                                                                                       // 3516
      // Copy event handlers in case event handlers array is modified during execution.                                // 3517
      eventFnsCopy = shallowCopy(eventFns);                                                                            // 3518
      handlerArgs = extraParameters ? [dummyEvent].concat(extraParameters) : [dummyEvent];                             // 3519
                                                                                                                       // 3520
      forEach(eventFnsCopy, function(fn) {                                                                             // 3521
        if (!dummyEvent.isImmediatePropagationStopped()) {                                                             // 3522
          fn.apply(element, handlerArgs);                                                                              // 3523
        }                                                                                                              // 3524
      });                                                                                                              // 3525
    }                                                                                                                  // 3526
  }                                                                                                                    // 3527
}, function(fn, name) {                                                                                                // 3528
  /**                                                                                                                  // 3529
   * chaining functions                                                                                                // 3530
   */                                                                                                                  // 3531
  JQLite.prototype[name] = function(arg1, arg2, arg3) {                                                                // 3532
    var value;                                                                                                         // 3533
                                                                                                                       // 3534
    for (var i = 0, ii = this.length; i < ii; i++) {                                                                   // 3535
      if (isUndefined(value)) {                                                                                        // 3536
        value = fn(this[i], arg1, arg2, arg3);                                                                         // 3537
        if (isDefined(value)) {                                                                                        // 3538
          // any function which returns a value needs to be wrapped                                                    // 3539
          value = jqLite(value);                                                                                       // 3540
        }                                                                                                              // 3541
      } else {                                                                                                         // 3542
        jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));                                                          // 3543
      }                                                                                                                // 3544
    }                                                                                                                  // 3545
    return isDefined(value) ? value : this;                                                                            // 3546
  };                                                                                                                   // 3547
                                                                                                                       // 3548
  // bind legacy bind/unbind to on/off                                                                                 // 3549
  JQLite.prototype.bind = JQLite.prototype.on;                                                                         // 3550
  JQLite.prototype.unbind = JQLite.prototype.off;                                                                      // 3551
});                                                                                                                    // 3552
                                                                                                                       // 3553
                                                                                                                       // 3554
// Provider for private $$jqLite service                                                                               // 3555
function $$jqLiteProvider() {                                                                                          // 3556
  this.$get = function $$jqLite() {                                                                                    // 3557
    return extend(JQLite, {                                                                                            // 3558
      hasClass: function(node, classes) {                                                                              // 3559
        if (node.attr) node = node[0];                                                                                 // 3560
        return jqLiteHasClass(node, classes);                                                                          // 3561
      },                                                                                                               // 3562
      addClass: function(node, classes) {                                                                              // 3563
        if (node.attr) node = node[0];                                                                                 // 3564
        return jqLiteAddClass(node, classes);                                                                          // 3565
      },                                                                                                               // 3566
      removeClass: function(node, classes) {                                                                           // 3567
        if (node.attr) node = node[0];                                                                                 // 3568
        return jqLiteRemoveClass(node, classes);                                                                       // 3569
      }                                                                                                                // 3570
    });                                                                                                                // 3571
  };                                                                                                                   // 3572
}                                                                                                                      // 3573
                                                                                                                       // 3574
/**                                                                                                                    // 3575
 * Computes a hash of an 'obj'.                                                                                        // 3576
 * Hash of a:                                                                                                          // 3577
 *  string is string                                                                                                   // 3578
 *  number is number as string                                                                                         // 3579
 *  object is either result of calling $$hashKey function on the object or uniquely generated id,                      // 3580
 *         that is also assigned to the $$hashKey property of the object.                                              // 3581
 *                                                                                                                     // 3582
 * @param obj                                                                                                          // 3583
 * @returns {string} hash string such that the same input will have the same hash string.                              // 3584
 *         The resulting string key is in 'type:hashKey' format.                                                       // 3585
 */                                                                                                                    // 3586
function hashKey(obj, nextUidFn) {                                                                                     // 3587
  var key = obj && obj.$$hashKey;                                                                                      // 3588
                                                                                                                       // 3589
  if (key) {                                                                                                           // 3590
    if (typeof key === 'function') {                                                                                   // 3591
      key = obj.$$hashKey();                                                                                           // 3592
    }                                                                                                                  // 3593
    return key;                                                                                                        // 3594
  }                                                                                                                    // 3595
                                                                                                                       // 3596
  var objType = typeof obj;                                                                                            // 3597
  if (objType == 'function' || (objType == 'object' && obj !== null)) {                                                // 3598
    key = obj.$$hashKey = objType + ':' + (nextUidFn || nextUid)();                                                    // 3599
  } else {                                                                                                             // 3600
    key = objType + ':' + obj;                                                                                         // 3601
  }                                                                                                                    // 3602
                                                                                                                       // 3603
  return key;                                                                                                          // 3604
}                                                                                                                      // 3605
                                                                                                                       // 3606
/**                                                                                                                    // 3607
 * HashMap which can use objects as keys                                                                               // 3608
 */                                                                                                                    // 3609
function HashMap(array, isolatedUid) {                                                                                 // 3610
  if (isolatedUid) {                                                                                                   // 3611
    var uid = 0;                                                                                                       // 3612
    this.nextUid = function() {                                                                                        // 3613
      return ++uid;                                                                                                    // 3614
    };                                                                                                                 // 3615
  }                                                                                                                    // 3616
  forEach(array, this.put, this);                                                                                      // 3617
}                                                                                                                      // 3618
HashMap.prototype = {                                                                                                  // 3619
  /**                                                                                                                  // 3620
   * Store key value pair                                                                                              // 3621
   * @param key key to store can be any type                                                                           // 3622
   * @param value value to store can be any type                                                                       // 3623
   */                                                                                                                  // 3624
  put: function(key, value) {                                                                                          // 3625
    this[hashKey(key, this.nextUid)] = value;                                                                          // 3626
  },                                                                                                                   // 3627
                                                                                                                       // 3628
  /**                                                                                                                  // 3629
   * @param key                                                                                                        // 3630
   * @returns {Object} the value for the key                                                                           // 3631
   */                                                                                                                  // 3632
  get: function(key) {                                                                                                 // 3633
    return this[hashKey(key, this.nextUid)];                                                                           // 3634
  },                                                                                                                   // 3635
                                                                                                                       // 3636
  /**                                                                                                                  // 3637
   * Remove the key/value pair                                                                                         // 3638
   * @param key                                                                                                        // 3639
   */                                                                                                                  // 3640
  remove: function(key) {                                                                                              // 3641
    var value = this[key = hashKey(key, this.nextUid)];                                                                // 3642
    delete this[key];                                                                                                  // 3643
    return value;                                                                                                      // 3644
  }                                                                                                                    // 3645
};                                                                                                                     // 3646
                                                                                                                       // 3647
var $$HashMapProvider = [function() {                                                                                  // 3648
  this.$get = [function() {                                                                                            // 3649
    return HashMap;                                                                                                    // 3650
  }];                                                                                                                  // 3651
}];                                                                                                                    // 3652
                                                                                                                       // 3653
/**                                                                                                                    // 3654
 * @ngdoc function                                                                                                     // 3655
 * @module ng                                                                                                          // 3656
 * @name angular.injector                                                                                              // 3657
 * @kind function                                                                                                      // 3658
 *                                                                                                                     // 3659
 * @description                                                                                                        // 3660
 * Creates an injector object that can be used for retrieving services as well as for                                  // 3661
 * dependency injection (see {@link guide/di dependency injection}).                                                   // 3662
 *                                                                                                                     // 3663
 * @param {Array.<string|Function>} modules A list of module functions or their aliases. See                           // 3664
 *     {@link angular.module}. The `ng` module must be explicitly added.                                               // 3665
 * @param {boolean=} [strictDi=false] Whether the injector should be in strict mode, which                             // 3666
 *     disallows argument name annotation inference.                                                                   // 3667
 * @returns {injector} Injector object. See {@link auto.$injector $injector}.                                          // 3668
 *                                                                                                                     // 3669
 * @example                                                                                                            // 3670
 * Typical usage                                                                                                       // 3671
 * ```js                                                                                                               // 3672
 *   // create an injector                                                                                             // 3673
 *   var $injector = angular.injector(['ng']);                                                                         // 3674
 *                                                                                                                     // 3675
 *   // use the injector to kick off your application                                                                  // 3676
 *   // use the type inference to auto inject arguments, or use implicit injection                                     // 3677
 *   $injector.invoke(function($rootScope, $compile, $document) {                                                      // 3678
 *     $compile($document)($rootScope);                                                                                // 3679
 *     $rootScope.$digest();                                                                                           // 3680
 *   });                                                                                                               // 3681
 * ```                                                                                                                 // 3682
 *                                                                                                                     // 3683
 * Sometimes you want to get access to the injector of a currently running Angular app                                 // 3684
 * from outside Angular. Perhaps, you want to inject and compile some markup after the                                 // 3685
 * application has been bootstrapped. You can do this using the extra `injector()` added                               // 3686
 * to JQuery/jqLite elements. See {@link angular.element}.                                                             // 3687
 *                                                                                                                     // 3688
 * *This is fairly rare but could be the case if a third party library is injecting the                                // 3689
 * markup.*                                                                                                            // 3690
 *                                                                                                                     // 3691
 * In the following example a new block of HTML containing a `ng-controller`                                           // 3692
 * directive is added to the end of the document body by JQuery. We then compile and link                              // 3693
 * it into the current AngularJS scope.                                                                                // 3694
 *                                                                                                                     // 3695
 * ```js                                                                                                               // 3696
 * var $div = $('<div ng-controller="MyCtrl">{{content.label}}</div>');                                                // 3697
 * $(document.body).append($div);                                                                                      // 3698
 *                                                                                                                     // 3699
 * angular.element(document).injector().invoke(function($compile) {                                                    // 3700
 *   var scope = angular.element($div).scope();                                                                        // 3701
 *   $compile($div)(scope);                                                                                            // 3702
 * });                                                                                                                 // 3703
 * ```                                                                                                                 // 3704
 */                                                                                                                    // 3705
                                                                                                                       // 3706
                                                                                                                       // 3707
/**                                                                                                                    // 3708
 * @ngdoc module                                                                                                       // 3709
 * @name auto                                                                                                          // 3710
 * @description                                                                                                        // 3711
 *                                                                                                                     // 3712
 * Implicit module which gets automatically added to each {@link auto.$injector $injector}.                            // 3713
 */                                                                                                                    // 3714
                                                                                                                       // 3715
var FN_ARGS = /^[^\(]*\(\s*([^\)]*)\)/m;                                                                               // 3716
var FN_ARG_SPLIT = /,/;                                                                                                // 3717
var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;                                                                                   // 3718
var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;                                                               // 3719
var $injectorMinErr = minErr('$injector');                                                                             // 3720
                                                                                                                       // 3721
function anonFn(fn) {                                                                                                  // 3722
  // For anonymous functions, showing at the very least the function signature can help in                             // 3723
  // debugging.                                                                                                        // 3724
  var fnText = fn.toString().replace(STRIP_COMMENTS, ''),                                                              // 3725
      args = fnText.match(FN_ARGS);                                                                                    // 3726
  if (args) {                                                                                                          // 3727
    return 'function(' + (args[1] || '').replace(/[\s\r\n]+/, ' ') + ')';                                              // 3728
  }                                                                                                                    // 3729
  return 'fn';                                                                                                         // 3730
}                                                                                                                      // 3731
                                                                                                                       // 3732
function annotate(fn, strictDi, name) {                                                                                // 3733
  var $inject,                                                                                                         // 3734
      fnText,                                                                                                          // 3735
      argDecl,                                                                                                         // 3736
      last;                                                                                                            // 3737
                                                                                                                       // 3738
  if (typeof fn === 'function') {                                                                                      // 3739
    if (!($inject = fn.$inject)) {                                                                                     // 3740
      $inject = [];                                                                                                    // 3741
      if (fn.length) {                                                                                                 // 3742
        if (strictDi) {                                                                                                // 3743
          if (!isString(name) || !name) {                                                                              // 3744
            name = fn.name || anonFn(fn);                                                                              // 3745
          }                                                                                                            // 3746
          throw $injectorMinErr('strictdi',                                                                            // 3747
            '{0} is not using explicit annotation and cannot be invoked in strict mode', name);                        // 3748
        }                                                                                                              // 3749
        fnText = fn.toString().replace(STRIP_COMMENTS, '');                                                            // 3750
        argDecl = fnText.match(FN_ARGS);                                                                               // 3751
        forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg) {                                                        // 3752
          arg.replace(FN_ARG, function(all, underscore, name) {                                                        // 3753
            $inject.push(name);                                                                                        // 3754
          });                                                                                                          // 3755
        });                                                                                                            // 3756
      }                                                                                                                // 3757
      fn.$inject = $inject;                                                                                            // 3758
    }                                                                                                                  // 3759
  } else if (isArray(fn)) {                                                                                            // 3760
    last = fn.length - 1;                                                                                              // 3761
    assertArgFn(fn[last], 'fn');                                                                                       // 3762
    $inject = fn.slice(0, last);                                                                                       // 3763
  } else {                                                                                                             // 3764
    assertArgFn(fn, 'fn', true);                                                                                       // 3765
  }                                                                                                                    // 3766
  return $inject;                                                                                                      // 3767
}                                                                                                                      // 3768
                                                                                                                       // 3769
///////////////////////////////////////                                                                                // 3770
                                                                                                                       // 3771
/**                                                                                                                    // 3772
 * @ngdoc service                                                                                                      // 3773
 * @name $injector                                                                                                     // 3774
 *                                                                                                                     // 3775
 * @description                                                                                                        // 3776
 *                                                                                                                     // 3777
 * `$injector` is used to retrieve object instances as defined by                                                      // 3778
 * {@link auto.$provide provider}, instantiate types, invoke methods,                                                  // 3779
 * and load modules.                                                                                                   // 3780
 *                                                                                                                     // 3781
 * The following always holds true:                                                                                    // 3782
 *                                                                                                                     // 3783
 * ```js                                                                                                               // 3784
 *   var $injector = angular.injector();                                                                               // 3785
 *   expect($injector.get('$injector')).toBe($injector);                                                               // 3786
 *   expect($injector.invoke(function($injector) {                                                                     // 3787
 *     return $injector;                                                                                               // 3788
 *   })).toBe($injector);                                                                                              // 3789
 * ```                                                                                                                 // 3790
 *                                                                                                                     // 3791
 * # Injection Function Annotation                                                                                     // 3792
 *                                                                                                                     // 3793
 * JavaScript does not have annotations, and annotations are needed for dependency injection. The                      // 3794
 * following are all valid ways of annotating function with injection arguments and are equivalent.                    // 3795
 *                                                                                                                     // 3796
 * ```js                                                                                                               // 3797
 *   // inferred (only works if code not minified/obfuscated)                                                          // 3798
 *   $injector.invoke(function(serviceA){});                                                                           // 3799
 *                                                                                                                     // 3800
 *   // annotated                                                                                                      // 3801
 *   function explicit(serviceA) {};                                                                                   // 3802
 *   explicit.$inject = ['serviceA'];                                                                                  // 3803
 *   $injector.invoke(explicit);                                                                                       // 3804
 *                                                                                                                     // 3805
 *   // inline                                                                                                         // 3806
 *   $injector.invoke(['serviceA', function(serviceA){}]);                                                             // 3807
 * ```                                                                                                                 // 3808
 *                                                                                                                     // 3809
 * ## Inference                                                                                                        // 3810
 *                                                                                                                     // 3811
 * In JavaScript calling `toString()` on a function returns the function definition. The definition                    // 3812
 * can then be parsed and the function arguments can be extracted. This method of discovering                          // 3813
 * annotations is disallowed when the injector is in strict mode.                                                      // 3814
 * *NOTE:* This does not work with minification, and obfuscation tools since these tools change the                    // 3815
 * argument names.                                                                                                     // 3816
 *                                                                                                                     // 3817
 * ## `$inject` Annotation                                                                                             // 3818
 * By adding an `$inject` property onto a function the injection parameters can be specified.                          // 3819
 *                                                                                                                     // 3820
 * ## Inline                                                                                                           // 3821
 * As an array of injection names, where the last item in the array is the function to call.                           // 3822
 */                                                                                                                    // 3823
                                                                                                                       // 3824
/**                                                                                                                    // 3825
 * @ngdoc method                                                                                                       // 3826
 * @name $injector#get                                                                                                 // 3827
 *                                                                                                                     // 3828
 * @description                                                                                                        // 3829
 * Return an instance of the service.                                                                                  // 3830
 *                                                                                                                     // 3831
 * @param {string} name The name of the instance to retrieve.                                                          // 3832
 * @param {string=} caller An optional string to provide the origin of the function call for error messages.           // 3833
 * @return {*} The instance.                                                                                           // 3834
 */                                                                                                                    // 3835
                                                                                                                       // 3836
/**                                                                                                                    // 3837
 * @ngdoc method                                                                                                       // 3838
 * @name $injector#invoke                                                                                              // 3839
 *                                                                                                                     // 3840
 * @description                                                                                                        // 3841
 * Invoke the method and supply the method arguments from the `$injector`.                                             // 3842
 *                                                                                                                     // 3843
 * @param {Function|Array.<string|Function>} fn The injectable function to invoke. Function parameters are             // 3844
 *   injected according to the {@link guide/di $inject Annotation} rules.                                              // 3845
 * @param {Object=} self The `this` for the invoked method.                                                            // 3846
 * @param {Object=} locals Optional object. If preset then any argument names are read from this                       // 3847
 *                         object first, before the `$injector` is consulted.                                          // 3848
 * @returns {*} the value returned by the invoked `fn` function.                                                       // 3849
 */                                                                                                                    // 3850
                                                                                                                       // 3851
/**                                                                                                                    // 3852
 * @ngdoc method                                                                                                       // 3853
 * @name $injector#has                                                                                                 // 3854
 *                                                                                                                     // 3855
 * @description                                                                                                        // 3856
 * Allows the user to query if the particular service exists.                                                          // 3857
 *                                                                                                                     // 3858
 * @param {string} name Name of the service to query.                                                                  // 3859
 * @returns {boolean} `true` if injector has given service.                                                            // 3860
 */                                                                                                                    // 3861
                                                                                                                       // 3862
/**                                                                                                                    // 3863
 * @ngdoc method                                                                                                       // 3864
 * @name $injector#instantiate                                                                                         // 3865
 * @description                                                                                                        // 3866
 * Create a new instance of JS type. The method takes a constructor function, invokes the new                          // 3867
 * operator, and supplies all of the arguments to the constructor function as specified by the                         // 3868
 * constructor annotation.                                                                                             // 3869
 *                                                                                                                     // 3870
 * @param {Function} Type Annotated constructor function.                                                              // 3871
 * @param {Object=} locals Optional object. If preset then any argument names are read from this                       // 3872
 * object first, before the `$injector` is consulted.                                                                  // 3873
 * @returns {Object} new instance of `Type`.                                                                           // 3874
 */                                                                                                                    // 3875
                                                                                                                       // 3876
/**                                                                                                                    // 3877
 * @ngdoc method                                                                                                       // 3878
 * @name $injector#annotate                                                                                            // 3879
 *                                                                                                                     // 3880
 * @description                                                                                                        // 3881
 * Returns an array of service names which the function is requesting for injection. This API is                       // 3882
 * used by the injector to determine which services need to be injected into the function when the                     // 3883
 * function is invoked. There are three ways in which the function can be annotated with the needed                    // 3884
 * dependencies.                                                                                                       // 3885
 *                                                                                                                     // 3886
 * # Argument names                                                                                                    // 3887
 *                                                                                                                     // 3888
 * The simplest form is to extract the dependencies from the arguments of the function. This is done                   // 3889
 * by converting the function into a string using `toString()` method and extracting the argument                      // 3890
 * names.                                                                                                              // 3891
 * ```js                                                                                                               // 3892
 *   // Given                                                                                                          // 3893
 *   function MyController($scope, $route) {                                                                           // 3894
 *     // ...                                                                                                          // 3895
 *   }                                                                                                                 // 3896
 *                                                                                                                     // 3897
 *   // Then                                                                                                           // 3898
 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);                                            // 3899
 * ```                                                                                                                 // 3900
 *                                                                                                                     // 3901
 * You can disallow this method by using strict injection mode.                                                        // 3902
 *                                                                                                                     // 3903
 * This method does not work with code minification / obfuscation. For this reason the following                       // 3904
 * annotation strategies are supported.                                                                                // 3905
 *                                                                                                                     // 3906
 * # The `$inject` property                                                                                            // 3907
 *                                                                                                                     // 3908
 * If a function has an `$inject` property and its value is an array of strings, then the strings                      // 3909
 * represent names of services to be injected into the function.                                                       // 3910
 * ```js                                                                                                               // 3911
 *   // Given                                                                                                          // 3912
 *   var MyController = function(obfuscatedScope, obfuscatedRoute) {                                                   // 3913
 *     // ...                                                                                                          // 3914
 *   }                                                                                                                 // 3915
 *   // Define function dependencies                                                                                   // 3916
 *   MyController['$inject'] = ['$scope', '$route'];                                                                   // 3917
 *                                                                                                                     // 3918
 *   // Then                                                                                                           // 3919
 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);                                            // 3920
 * ```                                                                                                                 // 3921
 *                                                                                                                     // 3922
 * # The array notation                                                                                                // 3923
 *                                                                                                                     // 3924
 * It is often desirable to inline Injected functions and that's when setting the `$inject` property                   // 3925
 * is very inconvenient. In these situations using the array notation to specify the dependencies in                   // 3926
 * a way that survives minification is a better choice:                                                                // 3927
 *                                                                                                                     // 3928
 * ```js                                                                                                               // 3929
 *   // We wish to write this (not minification / obfuscation safe)                                                    // 3930
 *   injector.invoke(function($compile, $rootScope) {                                                                  // 3931
 *     // ...                                                                                                          // 3932
 *   });                                                                                                               // 3933
 *                                                                                                                     // 3934
 *   // We are forced to write break inlining                                                                          // 3935
 *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {                                                    // 3936
 *     // ...                                                                                                          // 3937
 *   };                                                                                                                // 3938
 *   tmpFn.$inject = ['$compile', '$rootScope'];                                                                       // 3939
 *   injector.invoke(tmpFn);                                                                                           // 3940
 *                                                                                                                     // 3941
 *   // To better support inline function the inline annotation is supported                                           // 3942
 *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {                                   // 3943
 *     // ...                                                                                                          // 3944
 *   }]);                                                                                                              // 3945
 *                                                                                                                     // 3946
 *   // Therefore                                                                                                      // 3947
 *   expect(injector.annotate(                                                                                         // 3948
 *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])                                     // 3949
 *    ).toEqual(['$compile', '$rootScope']);                                                                           // 3950
 * ```                                                                                                                 // 3951
 *                                                                                                                     // 3952
 * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to                     // 3953
 * be retrieved as described above.                                                                                    // 3954
 *                                                                                                                     // 3955
 * @param {boolean=} [strictDi=false] Disallow argument name annotation inference.                                     // 3956
 *                                                                                                                     // 3957
 * @returns {Array.<string>} The names of the services which the function requires.                                    // 3958
 */                                                                                                                    // 3959
                                                                                                                       // 3960
                                                                                                                       // 3961
                                                                                                                       // 3962
                                                                                                                       // 3963
/**                                                                                                                    // 3964
 * @ngdoc service                                                                                                      // 3965
 * @name $provide                                                                                                      // 3966
 *                                                                                                                     // 3967
 * @description                                                                                                        // 3968
 *                                                                                                                     // 3969
 * The {@link auto.$provide $provide} service has a number of methods for registering components                       // 3970
 * with the {@link auto.$injector $injector}. Many of these functions are also exposed on                              // 3971
 * {@link angular.Module}.                                                                                             // 3972
 *                                                                                                                     // 3973
 * An Angular **service** is a singleton object created by a **service factory**.  These **service                     // 3974
 * factories** are functions which, in turn, are created by a **service provider**.                                    // 3975
 * The **service providers** are constructor functions. When instantiated they must contain a                          // 3976
 * property called `$get`, which holds the **service factory** function.                                               // 3977
 *                                                                                                                     // 3978
 * When you request a service, the {@link auto.$injector $injector} is responsible for finding the                     // 3979
 * correct **service provider**, instantiating it and then calling its `$get` **service factory**                      // 3980
 * function to get the instance of the **service**.                                                                    // 3981
 *                                                                                                                     // 3982
 * Often services have no configuration options and there is no need to add methods to the service                     // 3983
 * provider.  The provider will be no more than a constructor function with a `$get` property. For                     // 3984
 * these cases the {@link auto.$provide $provide} service has additional helper methods to register                    // 3985
 * services without specifying a provider.                                                                             // 3986
 *                                                                                                                     // 3987
 * * {@link auto.$provide#provider provider(provider)} - registers a **service provider** with the                     // 3988
 *     {@link auto.$injector $injector}                                                                                // 3989
 * * {@link auto.$provide#constant constant(obj)} - registers a value/object that can be accessed by                   // 3990
 *     providers and services.                                                                                         // 3991
 * * {@link auto.$provide#value value(obj)} - registers a value/object that can only be accessed by                    // 3992
 *     services, not providers.                                                                                        // 3993
 * * {@link auto.$provide#factory factory(fn)} - registers a service **factory function**, `fn`,                       // 3994
 *     that will be wrapped in a **service provider** object, whose `$get` property will contain the                   // 3995
 *     given factory function.                                                                                         // 3996
 * * {@link auto.$provide#service service(class)} - registers a **constructor function**, `class`                      // 3997
 *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate                   // 3998
 *      a new object using the given constructor function.                                                             // 3999
 *                                                                                                                     // 4000
 * See the individual methods for more information and examples.                                                       // 4001
 */                                                                                                                    // 4002
                                                                                                                       // 4003
/**                                                                                                                    // 4004
 * @ngdoc method                                                                                                       // 4005
 * @name $provide#provider                                                                                             // 4006
 * @description                                                                                                        // 4007
 *                                                                                                                     // 4008
 * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions                      // 4009
 * are constructor functions, whose instances are responsible for "providing" a factory for a                          // 4010
 * service.                                                                                                            // 4011
 *                                                                                                                     // 4012
 * Service provider names start with the name of the service they provide followed by `Provider`.                      // 4013
 * For example, the {@link ng.$log $log} service has a provider called                                                 // 4014
 * {@link ng.$logProvider $logProvider}.                                                                               // 4015
 *                                                                                                                     // 4016
 * Service provider objects can have additional methods which allow configuration of the provider                      // 4017
 * and its service. Importantly, you can configure what kind of service is created by the `$get`                       // 4018
 * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a                   // 4019
 * method {@link ng.$logProvider#debugEnabled debugEnabled}                                                            // 4020
 * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the                      // 4021
 * console or not.                                                                                                     // 4022
 *                                                                                                                     // 4023
 * @param {string} name The name of the instance. NOTE: the provider will be available under `name +                   // 4024
                        'Provider'` key.                                                                               // 4025
 * @param {(Object|function())} provider If the provider is:                                                           // 4026
 *                                                                                                                     // 4027
 *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using                          // 4028
 *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.                          // 4029
 *   - `Constructor`: a new instance of the provider will be created using                                             // 4030
 *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.                           // 4031
 *                                                                                                                     // 4032
 * @returns {Object} registered provider instance                                                                      // 4033
                                                                                                                       // 4034
 * @example                                                                                                            // 4035
 *                                                                                                                     // 4036
 * The following example shows how to create a simple event tracking service and register it using                     // 4037
 * {@link auto.$provide#provider $provide.provider()}.                                                                 // 4038
 *                                                                                                                     // 4039
 * ```js                                                                                                               // 4040
 *  // Define the eventTracker provider                                                                                // 4041
 *  function EventTrackerProvider() {                                                                                  // 4042
 *    var trackingUrl = '/track';                                                                                      // 4043
 *                                                                                                                     // 4044
 *    // A provider method for configuring where the tracked events should been saved                                  // 4045
 *    this.setTrackingUrl = function(url) {                                                                            // 4046
 *      trackingUrl = url;                                                                                             // 4047
 *    };                                                                                                               // 4048
 *                                                                                                                     // 4049
 *    // The service factory function                                                                                  // 4050
 *    this.$get = ['$http', function($http) {                                                                          // 4051
 *      var trackedEvents = {};                                                                                        // 4052
 *      return {                                                                                                       // 4053
 *        // Call this to track an event                                                                               // 4054
 *        event: function(event) {                                                                                     // 4055
 *          var count = trackedEvents[event] || 0;                                                                     // 4056
 *          count += 1;                                                                                                // 4057
 *          trackedEvents[event] = count;                                                                              // 4058
 *          return count;                                                                                              // 4059
 *        },                                                                                                           // 4060
 *        // Call this to save the tracked events to the trackingUrl                                                   // 4061
 *        save: function() {                                                                                           // 4062
 *          $http.post(trackingUrl, trackedEvents);                                                                    // 4063
 *        }                                                                                                            // 4064
 *      };                                                                                                             // 4065
 *    }];                                                                                                              // 4066
 *  }                                                                                                                  // 4067
 *                                                                                                                     // 4068
 *  describe('eventTracker', function() {                                                                              // 4069
 *    var postSpy;                                                                                                     // 4070
 *                                                                                                                     // 4071
 *    beforeEach(module(function($provide) {                                                                           // 4072
 *      // Register the eventTracker provider                                                                          // 4073
 *      $provide.provider('eventTracker', EventTrackerProvider);                                                       // 4074
 *    }));                                                                                                             // 4075
 *                                                                                                                     // 4076
 *    beforeEach(module(function(eventTrackerProvider) {                                                               // 4077
 *      // Configure eventTracker provider                                                                             // 4078
 *      eventTrackerProvider.setTrackingUrl('/custom-track');                                                          // 4079
 *    }));                                                                                                             // 4080
 *                                                                                                                     // 4081
 *    it('tracks events', inject(function(eventTracker) {                                                              // 4082
 *      expect(eventTracker.event('login')).toEqual(1);                                                                // 4083
 *      expect(eventTracker.event('login')).toEqual(2);                                                                // 4084
 *    }));                                                                                                             // 4085
 *                                                                                                                     // 4086
 *    it('saves to the tracking url', inject(function(eventTracker, $http) {                                           // 4087
 *      postSpy = spyOn($http, 'post');                                                                                // 4088
 *      eventTracker.event('login');                                                                                   // 4089
 *      eventTracker.save();                                                                                           // 4090
 *      expect(postSpy).toHaveBeenCalled();                                                                            // 4091
 *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');                                                  // 4092
 *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');                                               // 4093
 *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });                                                // 4094
 *    }));                                                                                                             // 4095
 *  });                                                                                                                // 4096
 * ```                                                                                                                 // 4097
 */                                                                                                                    // 4098
                                                                                                                       // 4099
/**                                                                                                                    // 4100
 * @ngdoc method                                                                                                       // 4101
 * @name $provide#factory                                                                                              // 4102
 * @description                                                                                                        // 4103
 *                                                                                                                     // 4104
 * Register a **service factory**, which will be called to return the service instance.                                // 4105
 * This is short for registering a service where its provider consists of only a `$get` property,                      // 4106
 * which is the given service factory function.                                                                        // 4107
 * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to                          // 4108
 * configure your service in a provider.                                                                               // 4109
 *                                                                                                                     // 4110
 * @param {string} name The name of the instance.                                                                      // 4111
 * @param {Function|Array.<string|Function>} $getFn The injectable $getFn for the instance creation.                   // 4112
 *                      Internally this is a short hand for `$provide.provider(name, {$get: $getFn})`.                 // 4113
 * @returns {Object} registered provider instance                                                                      // 4114
 *                                                                                                                     // 4115
 * @example                                                                                                            // 4116
 * Here is an example of registering a service                                                                         // 4117
 * ```js                                                                                                               // 4118
 *   $provide.factory('ping', ['$http', function($http) {                                                              // 4119
 *     return function ping() {                                                                                        // 4120
 *       return $http.send('/ping');                                                                                   // 4121
 *     };                                                                                                              // 4122
 *   }]);                                                                                                              // 4123
 * ```                                                                                                                 // 4124
 * You would then inject and use this service like this:                                                               // 4125
 * ```js                                                                                                               // 4126
 *   someModule.controller('Ctrl', ['ping', function(ping) {                                                           // 4127
 *     ping();                                                                                                         // 4128
 *   }]);                                                                                                              // 4129
 * ```                                                                                                                 // 4130
 */                                                                                                                    // 4131
                                                                                                                       // 4132
                                                                                                                       // 4133
/**                                                                                                                    // 4134
 * @ngdoc method                                                                                                       // 4135
 * @name $provide#service                                                                                              // 4136
 * @description                                                                                                        // 4137
 *                                                                                                                     // 4138
 * Register a **service constructor**, which will be invoked with `new` to create the service                          // 4139
 * instance.                                                                                                           // 4140
 * This is short for registering a service where its provider's `$get` property is the service                         // 4141
 * constructor function that will be used to instantiate the service instance.                                         // 4142
 *                                                                                                                     // 4143
 * You should use {@link auto.$provide#service $provide.service(class)} if you define your service                     // 4144
 * as a type/class.                                                                                                    // 4145
 *                                                                                                                     // 4146
 * @param {string} name The name of the instance.                                                                      // 4147
 * @param {Function|Array.<string|Function>} constructor An injectable class (constructor function)                    // 4148
 *     that will be instantiated.                                                                                      // 4149
 * @returns {Object} registered provider instance                                                                      // 4150
 *                                                                                                                     // 4151
 * @example                                                                                                            // 4152
 * Here is an example of registering a service using                                                                   // 4153
 * {@link auto.$provide#service $provide.service(class)}.                                                              // 4154
 * ```js                                                                                                               // 4155
 *   var Ping = function($http) {                                                                                      // 4156
 *     this.$http = $http;                                                                                             // 4157
 *   };                                                                                                                // 4158
 *                                                                                                                     // 4159
 *   Ping.$inject = ['$http'];                                                                                         // 4160
 *                                                                                                                     // 4161
 *   Ping.prototype.send = function() {                                                                                // 4162
 *     return this.$http.get('/ping');                                                                                 // 4163
 *   };                                                                                                                // 4164
 *   $provide.service('ping', Ping);                                                                                   // 4165
 * ```                                                                                                                 // 4166
 * You would then inject and use this service like this:                                                               // 4167
 * ```js                                                                                                               // 4168
 *   someModule.controller('Ctrl', ['ping', function(ping) {                                                           // 4169
 *     ping.send();                                                                                                    // 4170
 *   }]);                                                                                                              // 4171
 * ```                                                                                                                 // 4172
 */                                                                                                                    // 4173
                                                                                                                       // 4174
                                                                                                                       // 4175
/**                                                                                                                    // 4176
 * @ngdoc method                                                                                                       // 4177
 * @name $provide#value                                                                                                // 4178
 * @description                                                                                                        // 4179
 *                                                                                                                     // 4180
 * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a                         // 4181
 * number, an array, an object or a function.  This is short for registering a service where its                       // 4182
 * provider's `$get` property is a factory function that takes no arguments and returns the **value                    // 4183
 * service**.                                                                                                          // 4184
 *                                                                                                                     // 4185
 * Value services are similar to constant services, except that they cannot be injected into a                         // 4186
 * module configuration function (see {@link angular.Module#config}) but they can be overridden by                     // 4187
 * an Angular                                                                                                          // 4188
 * {@link auto.$provide#decorator decorator}.                                                                          // 4189
 *                                                                                                                     // 4190
 * @param {string} name The name of the instance.                                                                      // 4191
 * @param {*} value The value.                                                                                         // 4192
 * @returns {Object} registered provider instance                                                                      // 4193
 *                                                                                                                     // 4194
 * @example                                                                                                            // 4195
 * Here are some examples of creating value services.                                                                  // 4196
 * ```js                                                                                                               // 4197
 *   $provide.value('ADMIN_USER', 'admin');                                                                            // 4198
 *                                                                                                                     // 4199
 *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });                                                 // 4200
 *                                                                                                                     // 4201
 *   $provide.value('halfOf', function(value) {                                                                        // 4202
 *     return value / 2;                                                                                               // 4203
 *   });                                                                                                               // 4204
 * ```                                                                                                                 // 4205
 */                                                                                                                    // 4206
                                                                                                                       // 4207
                                                                                                                       // 4208
/**                                                                                                                    // 4209
 * @ngdoc method                                                                                                       // 4210
 * @name $provide#constant                                                                                             // 4211
 * @description                                                                                                        // 4212
 *                                                                                                                     // 4213
 * Register a **constant service**, such as a string, a number, an array, an object or a function,                     // 4214
 * with the {@link auto.$injector $injector}. Unlike {@link auto.$provide#value value} it can be                       // 4215
 * injected into a module configuration function (see {@link angular.Module#config}) and it cannot                     // 4216
 * be overridden by an Angular {@link auto.$provide#decorator decorator}.                                              // 4217
 *                                                                                                                     // 4218
 * @param {string} name The name of the constant.                                                                      // 4219
 * @param {*} value The constant value.                                                                                // 4220
 * @returns {Object} registered instance                                                                               // 4221
 *                                                                                                                     // 4222
 * @example                                                                                                            // 4223
 * Here a some examples of creating constants:                                                                         // 4224
 * ```js                                                                                                               // 4225
 *   $provide.constant('SHARD_HEIGHT', 306);                                                                           // 4226
 *                                                                                                                     // 4227
 *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);                                                         // 4228
 *                                                                                                                     // 4229
 *   $provide.constant('double', function(value) {                                                                     // 4230
 *     return value * 2;                                                                                               // 4231
 *   });                                                                                                               // 4232
 * ```                                                                                                                 // 4233
 */                                                                                                                    // 4234
                                                                                                                       // 4235
                                                                                                                       // 4236
/**                                                                                                                    // 4237
 * @ngdoc method                                                                                                       // 4238
 * @name $provide#decorator                                                                                            // 4239
 * @description                                                                                                        // 4240
 *                                                                                                                     // 4241
 * Register a **service decorator** with the {@link auto.$injector $injector}. A service decorator                     // 4242
 * intercepts the creation of a service, allowing it to override or modify the behaviour of the                        // 4243
 * service. The object returned by the decorator may be the original service, or a new service                         // 4244
 * object which replaces or wraps and delegates to the original service.                                               // 4245
 *                                                                                                                     // 4246
 * @param {string} name The name of the service to decorate.                                                           // 4247
 * @param {Function|Array.<string|Function>} decorator This function will be invoked when the service needs to be      // 4248
 *    instantiated and should return the decorated service instance. The function is called using                      // 4249
 *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.                      // 4250
 *    Local injection arguments:                                                                                       // 4251
 *                                                                                                                     // 4252
 *    * `$delegate` - The original service instance, which can be monkey patched, configured,                          // 4253
 *      decorated or delegated to.                                                                                     // 4254
 *                                                                                                                     // 4255
 * @example                                                                                                            // 4256
 * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting                     // 4257
 * calls to {@link ng.$log#error $log.warn()}.                                                                         // 4258
 * ```js                                                                                                               // 4259
 *   $provide.decorator('$log', ['$delegate', function($delegate) {                                                    // 4260
 *     $delegate.warn = $delegate.error;                                                                               // 4261
 *     return $delegate;                                                                                               // 4262
 *   }]);                                                                                                              // 4263
 * ```                                                                                                                 // 4264
 */                                                                                                                    // 4265
                                                                                                                       // 4266
                                                                                                                       // 4267
function createInjector(modulesToLoad, strictDi) {                                                                     // 4268
  strictDi = (strictDi === true);                                                                                      // 4269
  var INSTANTIATING = {},                                                                                              // 4270
      providerSuffix = 'Provider',                                                                                     // 4271
      path = [],                                                                                                       // 4272
      loadedModules = new HashMap([], true),                                                                           // 4273
      providerCache = {                                                                                                // 4274
        $provide: {                                                                                                    // 4275
            provider: supportObject(provider),                                                                         // 4276
            factory: supportObject(factory),                                                                           // 4277
            service: supportObject(service),                                                                           // 4278
            value: supportObject(value),                                                                               // 4279
            constant: supportObject(constant),                                                                         // 4280
            decorator: decorator                                                                                       // 4281
          }                                                                                                            // 4282
      },                                                                                                               // 4283
      providerInjector = (providerCache.$injector =                                                                    // 4284
          createInternalInjector(providerCache, function(serviceName, caller) {                                        // 4285
            if (angular.isString(caller)) {                                                                            // 4286
              path.push(caller);                                                                                       // 4287
            }                                                                                                          // 4288
            throw $injectorMinErr('unpr', "Unknown provider: {0}", path.join(' <- '));                                 // 4289
          })),                                                                                                         // 4290
      instanceCache = {},                                                                                              // 4291
      instanceInjector = (instanceCache.$injector =                                                                    // 4292
          createInternalInjector(instanceCache, function(serviceName, caller) {                                        // 4293
            var provider = providerInjector.get(serviceName + providerSuffix, caller);                                 // 4294
            return instanceInjector.invoke(provider.$get, provider, undefined, serviceName);                           // 4295
          }));                                                                                                         // 4296
                                                                                                                       // 4297
                                                                                                                       // 4298
  forEach(loadModules(modulesToLoad), function(fn) { if (fn) instanceInjector.invoke(fn); });                          // 4299
                                                                                                                       // 4300
  return instanceInjector;                                                                                             // 4301
                                                                                                                       // 4302
  ////////////////////////////////////                                                                                 // 4303
  // $provider                                                                                                         // 4304
  ////////////////////////////////////                                                                                 // 4305
                                                                                                                       // 4306
  function supportObject(delegate) {                                                                                   // 4307
    return function(key, value) {                                                                                      // 4308
      if (isObject(key)) {                                                                                             // 4309
        forEach(key, reverseParams(delegate));                                                                         // 4310
      } else {                                                                                                         // 4311
        return delegate(key, value);                                                                                   // 4312
      }                                                                                                                // 4313
    };                                                                                                                 // 4314
  }                                                                                                                    // 4315
                                                                                                                       // 4316
  function provider(name, provider_) {                                                                                 // 4317
    assertNotHasOwnProperty(name, 'service');                                                                          // 4318
    if (isFunction(provider_) || isArray(provider_)) {                                                                 // 4319
      provider_ = providerInjector.instantiate(provider_);                                                             // 4320
    }                                                                                                                  // 4321
    if (!provider_.$get) {                                                                                             // 4322
      throw $injectorMinErr('pget', "Provider '{0}' must define $get factory method.", name);                          // 4323
    }                                                                                                                  // 4324
    return providerCache[name + providerSuffix] = provider_;                                                           // 4325
  }                                                                                                                    // 4326
                                                                                                                       // 4327
  function enforceReturnValue(name, factory) {                                                                         // 4328
    return function enforcedReturnValue() {                                                                            // 4329
      var result = instanceInjector.invoke(factory, this);                                                             // 4330
      if (isUndefined(result)) {                                                                                       // 4331
        throw $injectorMinErr('undef', "Provider '{0}' must return a value from $get factory method.", name);          // 4332
      }                                                                                                                // 4333
      return result;                                                                                                   // 4334
    };                                                                                                                 // 4335
  }                                                                                                                    // 4336
                                                                                                                       // 4337
  function factory(name, factoryFn, enforce) {                                                                         // 4338
    return provider(name, {                                                                                            // 4339
      $get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn                                        // 4340
    });                                                                                                                // 4341
  }                                                                                                                    // 4342
                                                                                                                       // 4343
  function service(name, constructor) {                                                                                // 4344
    return factory(name, ['$injector', function($injector) {                                                           // 4345
      return $injector.instantiate(constructor);                                                                       // 4346
    }]);                                                                                                               // 4347
  }                                                                                                                    // 4348
                                                                                                                       // 4349
  function value(name, val) { return factory(name, valueFn(val), false); }                                             // 4350
                                                                                                                       // 4351
  function constant(name, value) {                                                                                     // 4352
    assertNotHasOwnProperty(name, 'constant');                                                                         // 4353
    providerCache[name] = value;                                                                                       // 4354
    instanceCache[name] = value;                                                                                       // 4355
  }                                                                                                                    // 4356
                                                                                                                       // 4357
  function decorator(serviceName, decorFn) {                                                                           // 4358
    var origProvider = providerInjector.get(serviceName + providerSuffix),                                             // 4359
        orig$get = origProvider.$get;                                                                                  // 4360
                                                                                                                       // 4361
    origProvider.$get = function() {                                                                                   // 4362
      var origInstance = instanceInjector.invoke(orig$get, origProvider);                                              // 4363
      return instanceInjector.invoke(decorFn, null, {$delegate: origInstance});                                        // 4364
    };                                                                                                                 // 4365
  }                                                                                                                    // 4366
                                                                                                                       // 4367
  ////////////////////////////////////                                                                                 // 4368
  // Module Loading                                                                                                    // 4369
  ////////////////////////////////////                                                                                 // 4370
  function loadModules(modulesToLoad) {                                                                                // 4371
    assertArg(isUndefined(modulesToLoad) || isArray(modulesToLoad), 'modulesToLoad', 'not an array');                  // 4372
    var runBlocks = [], moduleFn;                                                                                      // 4373
    forEach(modulesToLoad, function(module) {                                                                          // 4374
      if (loadedModules.get(module)) return;                                                                           // 4375
      loadedModules.put(module, true);                                                                                 // 4376
                                                                                                                       // 4377
      function runInvokeQueue(queue) {                                                                                 // 4378
        var i, ii;                                                                                                     // 4379
        for (i = 0, ii = queue.length; i < ii; i++) {                                                                  // 4380
          var invokeArgs = queue[i],                                                                                   // 4381
              provider = providerInjector.get(invokeArgs[0]);                                                          // 4382
                                                                                                                       // 4383
          provider[invokeArgs[1]].apply(provider, invokeArgs[2]);                                                      // 4384
        }                                                                                                              // 4385
      }                                                                                                                // 4386
                                                                                                                       // 4387
      try {                                                                                                            // 4388
        if (isString(module)) {                                                                                        // 4389
          moduleFn = angularModule(module);                                                                            // 4390
          runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);                    // 4391
          runInvokeQueue(moduleFn._invokeQueue);                                                                       // 4392
          runInvokeQueue(moduleFn._configBlocks);                                                                      // 4393
        } else if (isFunction(module)) {                                                                               // 4394
            runBlocks.push(providerInjector.invoke(module));                                                           // 4395
        } else if (isArray(module)) {                                                                                  // 4396
            runBlocks.push(providerInjector.invoke(module));                                                           // 4397
        } else {                                                                                                       // 4398
          assertArgFn(module, 'module');                                                                               // 4399
        }                                                                                                              // 4400
      } catch (e) {                                                                                                    // 4401
        if (isArray(module)) {                                                                                         // 4402
          module = module[module.length - 1];                                                                          // 4403
        }                                                                                                              // 4404
        if (e.message && e.stack && e.stack.indexOf(e.message) == -1) {                                                // 4405
          // Safari & FF's stack traces don't contain error.message content                                            // 4406
          // unlike those of Chrome and IE                                                                             // 4407
          // So if stack doesn't contain message, we create a new string that contains both.                           // 4408
          // Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.                          // 4409
          /* jshint -W022 */                                                                                           // 4410
          e = e.message + '\n' + e.stack;                                                                              // 4411
        }                                                                                                              // 4412
        throw $injectorMinErr('modulerr', "Failed to instantiate module {0} due to:\n{1}",                             // 4413
                  module, e.stack || e.message || e);                                                                  // 4414
      }                                                                                                                // 4415
    });                                                                                                                // 4416
    return runBlocks;                                                                                                  // 4417
  }                                                                                                                    // 4418
                                                                                                                       // 4419
  ////////////////////////////////////                                                                                 // 4420
  // internal Injector                                                                                                 // 4421
  ////////////////////////////////////                                                                                 // 4422
                                                                                                                       // 4423
  function createInternalInjector(cache, factory) {                                                                    // 4424
                                                                                                                       // 4425
    function getService(serviceName, caller) {                                                                         // 4426
      if (cache.hasOwnProperty(serviceName)) {                                                                         // 4427
        if (cache[serviceName] === INSTANTIATING) {                                                                    // 4428
          throw $injectorMinErr('cdep', 'Circular dependency found: {0}',                                              // 4429
                    serviceName + ' <- ' + path.join(' <- '));                                                         // 4430
        }                                                                                                              // 4431
        return cache[serviceName];                                                                                     // 4432
      } else {                                                                                                         // 4433
        try {                                                                                                          // 4434
          path.unshift(serviceName);                                                                                   // 4435
          cache[serviceName] = INSTANTIATING;                                                                          // 4436
          return cache[serviceName] = factory(serviceName, caller);                                                    // 4437
        } catch (err) {                                                                                                // 4438
          if (cache[serviceName] === INSTANTIATING) {                                                                  // 4439
            delete cache[serviceName];                                                                                 // 4440
          }                                                                                                            // 4441
          throw err;                                                                                                   // 4442
        } finally {                                                                                                    // 4443
          path.shift();                                                                                                // 4444
        }                                                                                                              // 4445
      }                                                                                                                // 4446
    }                                                                                                                  // 4447
                                                                                                                       // 4448
    function invoke(fn, self, locals, serviceName) {                                                                   // 4449
      if (typeof locals === 'string') {                                                                                // 4450
        serviceName = locals;                                                                                          // 4451
        locals = null;                                                                                                 // 4452
      }                                                                                                                // 4453
                                                                                                                       // 4454
      var args = [],                                                                                                   // 4455
          $inject = createInjector.$$annotate(fn, strictDi, serviceName),                                              // 4456
          length, i,                                                                                                   // 4457
          key;                                                                                                         // 4458
                                                                                                                       // 4459
      for (i = 0, length = $inject.length; i < length; i++) {                                                          // 4460
        key = $inject[i];                                                                                              // 4461
        if (typeof key !== 'string') {                                                                                 // 4462
          throw $injectorMinErr('itkn',                                                                                // 4463
                  'Incorrect injection token! Expected service name as string, got {0}', key);                         // 4464
        }                                                                                                              // 4465
        args.push(                                                                                                     // 4466
          locals && locals.hasOwnProperty(key)                                                                         // 4467
          ? locals[key]                                                                                                // 4468
          : getService(key, serviceName)                                                                               // 4469
        );                                                                                                             // 4470
      }                                                                                                                // 4471
      if (isArray(fn)) {                                                                                               // 4472
        fn = fn[length];                                                                                               // 4473
      }                                                                                                                // 4474
                                                                                                                       // 4475
      // http://jsperf.com/angularjs-invoke-apply-vs-switch                                                            // 4476
      // #5388                                                                                                         // 4477
      return fn.apply(self, args);                                                                                     // 4478
    }                                                                                                                  // 4479
                                                                                                                       // 4480
    function instantiate(Type, locals, serviceName) {                                                                  // 4481
      // Check if Type is annotated and use just the given function at n-1 as parameter                                // 4482
      // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);                                 // 4483
      // Object creation: http://jsperf.com/create-constructor/2                                                       // 4484
      var instance = Object.create((isArray(Type) ? Type[Type.length - 1] : Type).prototype || null);                  // 4485
      var returnedValue = invoke(Type, instance, locals, serviceName);                                                 // 4486
                                                                                                                       // 4487
      return isObject(returnedValue) || isFunction(returnedValue) ? returnedValue : instance;                          // 4488
    }                                                                                                                  // 4489
                                                                                                                       // 4490
    return {                                                                                                           // 4491
      invoke: invoke,                                                                                                  // 4492
      instantiate: instantiate,                                                                                        // 4493
      get: getService,                                                                                                 // 4494
      annotate: createInjector.$$annotate,                                                                             // 4495
      has: function(name) {                                                                                            // 4496
        return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);                      // 4497
      }                                                                                                                // 4498
    };                                                                                                                 // 4499
  }                                                                                                                    // 4500
}                                                                                                                      // 4501
                                                                                                                       // 4502
createInjector.$$annotate = annotate;                                                                                  // 4503
                                                                                                                       // 4504
/**                                                                                                                    // 4505
 * @ngdoc provider                                                                                                     // 4506
 * @name $anchorScrollProvider                                                                                         // 4507
 *                                                                                                                     // 4508
 * @description                                                                                                        // 4509
 * Use `$anchorScrollProvider` to disable automatic scrolling whenever                                                 // 4510
 * {@link ng.$location#hash $location.hash()} changes.                                                                 // 4511
 */                                                                                                                    // 4512
function $AnchorScrollProvider() {                                                                                     // 4513
                                                                                                                       // 4514
  var autoScrollingEnabled = true;                                                                                     // 4515
                                                                                                                       // 4516
  /**                                                                                                                  // 4517
   * @ngdoc method                                                                                                     // 4518
   * @name $anchorScrollProvider#disableAutoScrolling                                                                  // 4519
   *                                                                                                                   // 4520
   * @description                                                                                                      // 4521
   * By default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to                         // 4522
   * {@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />                 // 4523
   * Use this method to disable automatic scrolling.                                                                   // 4524
   *                                                                                                                   // 4525
   * If automatic scrolling is disabled, one must explicitly call                                                      // 4526
   * {@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the                         // 4527
   * current hash.                                                                                                     // 4528
   */                                                                                                                  // 4529
  this.disableAutoScrolling = function() {                                                                             // 4530
    autoScrollingEnabled = false;                                                                                      // 4531
  };                                                                                                                   // 4532
                                                                                                                       // 4533
  /**                                                                                                                  // 4534
   * @ngdoc service                                                                                                    // 4535
   * @name $anchorScroll                                                                                               // 4536
   * @kind function                                                                                                    // 4537
   * @requires $window                                                                                                 // 4538
   * @requires $location                                                                                               // 4539
   * @requires $rootScope                                                                                              // 4540
   *                                                                                                                   // 4541
   * @description                                                                                                      // 4542
   * When called, it scrolls to the element related to the specified `hash` or (if omitted) to the                     // 4543
   * current value of {@link ng.$location#hash $location.hash()}, according to the rules specified                     // 4544
   * in the                                                                                                            // 4545
   * [HTML5 spec](http://dev.w3.org/html5/spec/Overview.html#the-indicated-part-of-the-document).                      // 4546
   *                                                                                                                   // 4547
   * It also watches the {@link ng.$location#hash $location.hash()} and automatically scrolls to                       // 4548
   * match any anchor whenever it changes. This can be disabled by calling                                             // 4549
   * {@link ng.$anchorScrollProvider#disableAutoScrolling $anchorScrollProvider.disableAutoScrolling()}.               // 4550
   *                                                                                                                   // 4551
   * Additionally, you can use its {@link ng.$anchorScroll#yOffset yOffset} property to specify a                      // 4552
   * vertical scroll-offset (either fixed or dynamic).                                                                 // 4553
   *                                                                                                                   // 4554
   * @param {string=} hash The hash specifying the element to scroll to. If omitted, the value of                      // 4555
   *                       {@link ng.$location#hash $location.hash()} will be used.                                    // 4556
   *                                                                                                                   // 4557
   * @property {(number|function|jqLite)} yOffset                                                                      // 4558
   * If set, specifies a vertical scroll-offset. This is often useful when there are fixed                             // 4559
   * positioned elements at the top of the page, such as navbars, headers etc.                                         // 4560
   *                                                                                                                   // 4561
   * `yOffset` can be specified in various ways:                                                                       // 4562
   * - **number**: A fixed number of pixels to be used as offset.<br /><br />                                          // 4563
   * - **function**: A getter function called everytime `$anchorScroll()` is executed. Must return                     // 4564
   *   a number representing the offset (in pixels).<br /><br />                                                       // 4565
   * - **jqLite**: A jqLite/jQuery element to be used for specifying the offset. The distance from                     // 4566
   *   the top of the page to the element's bottom will be used as offset.<br />                                       // 4567
   *   **Note**: The element will be taken into account only as long as its `position` is set to                       // 4568
   *   `fixed`. This option is useful, when dealing with responsive navbars/headers that adjust                        // 4569
   *   their height and/or positioning according to the viewport's size.                                               // 4570
   *                                                                                                                   // 4571
   * <br />                                                                                                            // 4572
   * <div class="alert alert-warning">                                                                                 // 4573
   * In order for `yOffset` to work properly, scrolling should take place on the document's root and                   // 4574
   * not some child element.                                                                                           // 4575
   * </div>                                                                                                            // 4576
   *                                                                                                                   // 4577
   * @example                                                                                                          // 4578
     <example module="anchorScrollExample">                                                                            // 4579
       <file name="index.html">                                                                                        // 4580
         <div id="scrollArea" ng-controller="ScrollController">                                                        // 4581
           <a ng-click="gotoBottom()">Go to bottom</a>                                                                 // 4582
           <a id="bottom"></a> You're at the bottom!                                                                   // 4583
         </div>                                                                                                        // 4584
       </file>                                                                                                         // 4585
       <file name="script.js">                                                                                         // 4586
         angular.module('anchorScrollExample', [])                                                                     // 4587
           .controller('ScrollController', ['$scope', '$location', '$anchorScroll',                                    // 4588
             function ($scope, $location, $anchorScroll) {                                                             // 4589
               $scope.gotoBottom = function() {                                                                        // 4590
                 // set the location.hash to the id of                                                                 // 4591
                 // the element you wish to scroll to.                                                                 // 4592
                 $location.hash('bottom');                                                                             // 4593
                                                                                                                       // 4594
                 // call $anchorScroll()                                                                               // 4595
                 $anchorScroll();                                                                                      // 4596
               };                                                                                                      // 4597
             }]);                                                                                                      // 4598
       </file>                                                                                                         // 4599
       <file name="style.css">                                                                                         // 4600
         #scrollArea {                                                                                                 // 4601
           height: 280px;                                                                                              // 4602
           overflow: auto;                                                                                             // 4603
         }                                                                                                             // 4604
                                                                                                                       // 4605
         #bottom {                                                                                                     // 4606
           display: block;                                                                                             // 4607
           margin-top: 2000px;                                                                                         // 4608
         }                                                                                                             // 4609
       </file>                                                                                                         // 4610
     </example>                                                                                                        // 4611
   *                                                                                                                   // 4612
   * <hr />                                                                                                            // 4613
   * The example below illustrates the use of a vertical scroll-offset (specified as a fixed value).                   // 4614
   * See {@link ng.$anchorScroll#yOffset $anchorScroll.yOffset} for more details.                                      // 4615
   *                                                                                                                   // 4616
   * @example                                                                                                          // 4617
     <example module="anchorScrollOffsetExample">                                                                      // 4618
       <file name="index.html">                                                                                        // 4619
         <div class="fixed-header" ng-controller="headerCtrl">                                                         // 4620
           <a href="" ng-click="gotoAnchor(x)" ng-repeat="x in [1,2,3,4,5]">                                           // 4621
             Go to anchor {{x}}                                                                                        // 4622
           </a>                                                                                                        // 4623
         </div>                                                                                                        // 4624
         <div id="anchor{{x}}" class="anchor" ng-repeat="x in [1,2,3,4,5]">                                            // 4625
           Anchor {{x}} of 5                                                                                           // 4626
         </div>                                                                                                        // 4627
       </file>                                                                                                         // 4628
       <file name="script.js">                                                                                         // 4629
         angular.module('anchorScrollOffsetExample', [])                                                               // 4630
           .run(['$anchorScroll', function($anchorScroll) {                                                            // 4631
             $anchorScroll.yOffset = 50;   // always scroll by 50 extra pixels                                         // 4632
           }])                                                                                                         // 4633
           .controller('headerCtrl', ['$anchorScroll', '$location', '$scope',                                          // 4634
             function ($anchorScroll, $location, $scope) {                                                             // 4635
               $scope.gotoAnchor = function(x) {                                                                       // 4636
                 var newHash = 'anchor' + x;                                                                           // 4637
                 if ($location.hash() !== newHash) {                                                                   // 4638
                   // set the $location.hash to `newHash` and                                                          // 4639
                   // $anchorScroll will automatically scroll to it                                                    // 4640
                   $location.hash('anchor' + x);                                                                       // 4641
                 } else {                                                                                              // 4642
                   // call $anchorScroll() explicitly,                                                                 // 4643
                   // since $location.hash hasn't changed                                                              // 4644
                   $anchorScroll();                                                                                    // 4645
                 }                                                                                                     // 4646
               };                                                                                                      // 4647
             }                                                                                                         // 4648
           ]);                                                                                                         // 4649
       </file>                                                                                                         // 4650
       <file name="style.css">                                                                                         // 4651
         body {                                                                                                        // 4652
           padding-top: 50px;                                                                                          // 4653
         }                                                                                                             // 4654
                                                                                                                       // 4655
         .anchor {                                                                                                     // 4656
           border: 2px dashed DarkOrchid;                                                                              // 4657
           padding: 10px 10px 200px 10px;                                                                              // 4658
         }                                                                                                             // 4659
                                                                                                                       // 4660
         .fixed-header {                                                                                               // 4661
           background-color: rgba(0, 0, 0, 0.2);                                                                       // 4662
           height: 50px;                                                                                               // 4663
           position: fixed;                                                                                            // 4664
           top: 0; left: 0; right: 0;                                                                                  // 4665
         }                                                                                                             // 4666
                                                                                                                       // 4667
         .fixed-header > a {                                                                                           // 4668
           display: inline-block;                                                                                      // 4669
           margin: 5px 15px;                                                                                           // 4670
         }                                                                                                             // 4671
       </file>                                                                                                         // 4672
     </example>                                                                                                        // 4673
   */                                                                                                                  // 4674
  this.$get = ['$window', '$location', '$rootScope', function($window, $location, $rootScope) {                        // 4675
    var document = $window.document;                                                                                   // 4676
                                                                                                                       // 4677
    // Helper function to get first anchor from a NodeList                                                             // 4678
    // (using `Array#some()` instead of `angular#forEach()` since it's more performant                                 // 4679
    //  and working in all supported browsers.)                                                                        // 4680
    function getFirstAnchor(list) {                                                                                    // 4681
      var result = null;                                                                                               // 4682
      Array.prototype.some.call(list, function(element) {                                                              // 4683
        if (nodeName_(element) === 'a') {                                                                              // 4684
          result = element;                                                                                            // 4685
          return true;                                                                                                 // 4686
        }                                                                                                              // 4687
      });                                                                                                              // 4688
      return result;                                                                                                   // 4689
    }                                                                                                                  // 4690
                                                                                                                       // 4691
    function getYOffset() {                                                                                            // 4692
                                                                                                                       // 4693
      var offset = scroll.yOffset;                                                                                     // 4694
                                                                                                                       // 4695
      if (isFunction(offset)) {                                                                                        // 4696
        offset = offset();                                                                                             // 4697
      } else if (isElement(offset)) {                                                                                  // 4698
        var elem = offset[0];                                                                                          // 4699
        var style = $window.getComputedStyle(elem);                                                                    // 4700
        if (style.position !== 'fixed') {                                                                              // 4701
          offset = 0;                                                                                                  // 4702
        } else {                                                                                                       // 4703
          offset = elem.getBoundingClientRect().bottom;                                                                // 4704
        }                                                                                                              // 4705
      } else if (!isNumber(offset)) {                                                                                  // 4706
        offset = 0;                                                                                                    // 4707
      }                                                                                                                // 4708
                                                                                                                       // 4709
      return offset;                                                                                                   // 4710
    }                                                                                                                  // 4711
                                                                                                                       // 4712
    function scrollTo(elem) {                                                                                          // 4713
      if (elem) {                                                                                                      // 4714
        elem.scrollIntoView();                                                                                         // 4715
                                                                                                                       // 4716
        var offset = getYOffset();                                                                                     // 4717
                                                                                                                       // 4718
        if (offset) {                                                                                                  // 4719
          // `offset` is the number of pixels we should scroll UP in order to align `elem` properly.                   // 4720
          // This is true ONLY if the call to `elem.scrollIntoView()` initially aligns `elem` at the                   // 4721
          // top of the viewport.                                                                                      // 4722
          //                                                                                                           // 4723
          // IF the number of pixels from the top of `elem` to the end of the page's content is less                   // 4724
          // than the height of the viewport, then `elem.scrollIntoView()` will align the `elem` some                  // 4725
          // way down the page.                                                                                        // 4726
          //                                                                                                           // 4727
          // This is often the case for elements near the bottom of the page.                                          // 4728
          //                                                                                                           // 4729
          // In such cases we do not need to scroll the whole `offset` up, just the difference between                 // 4730
          // the top of the element and the offset, which is enough to align the top of `elem` at the                  // 4731
          // desired position.                                                                                         // 4732
          var elemTop = elem.getBoundingClientRect().top;                                                              // 4733
          $window.scrollBy(0, elemTop - offset);                                                                       // 4734
        }                                                                                                              // 4735
      } else {                                                                                                         // 4736
        $window.scrollTo(0, 0);                                                                                        // 4737
      }                                                                                                                // 4738
    }                                                                                                                  // 4739
                                                                                                                       // 4740
    function scroll(hash) {                                                                                            // 4741
      hash = isString(hash) ? hash : $location.hash();                                                                 // 4742
      var elm;                                                                                                         // 4743
                                                                                                                       // 4744
      // empty hash, scroll to the top of the page                                                                     // 4745
      if (!hash) scrollTo(null);                                                                                       // 4746
                                                                                                                       // 4747
      // element with given id                                                                                         // 4748
      else if ((elm = document.getElementById(hash))) scrollTo(elm);                                                   // 4749
                                                                                                                       // 4750
      // first anchor with given name :-D                                                                              // 4751
      else if ((elm = getFirstAnchor(document.getElementsByName(hash)))) scrollTo(elm);                                // 4752
                                                                                                                       // 4753
      // no element and hash == 'top', scroll to the top of the page                                                   // 4754
      else if (hash === 'top') scrollTo(null);                                                                         // 4755
    }                                                                                                                  // 4756
                                                                                                                       // 4757
    // does not scroll when user clicks on anchor link that is currently on                                            // 4758
    // (no url change, no $location.hash() change), browser native does scroll                                         // 4759
    if (autoScrollingEnabled) {                                                                                        // 4760
      $rootScope.$watch(function autoScrollWatch() {return $location.hash();},                                         // 4761
        function autoScrollWatchAction(newVal, oldVal) {                                                               // 4762
          // skip the initial scroll if $location.hash is empty                                                        // 4763
          if (newVal === oldVal && newVal === '') return;                                                              // 4764
                                                                                                                       // 4765
          jqLiteDocumentLoaded(function() {                                                                            // 4766
            $rootScope.$evalAsync(scroll);                                                                             // 4767
          });                                                                                                          // 4768
        });                                                                                                            // 4769
    }                                                                                                                  // 4770
                                                                                                                       // 4771
    return scroll;                                                                                                     // 4772
  }];                                                                                                                  // 4773
}                                                                                                                      // 4774
                                                                                                                       // 4775
var $animateMinErr = minErr('$animate');                                                                               // 4776
var ELEMENT_NODE = 1;                                                                                                  // 4777
var NG_ANIMATE_CLASSNAME = 'ng-animate';                                                                               // 4778
                                                                                                                       // 4779
function mergeClasses(a,b) {                                                                                           // 4780
  if (!a && !b) return '';                                                                                             // 4781
  if (!a) return b;                                                                                                    // 4782
  if (!b) return a;                                                                                                    // 4783
  if (isArray(a)) a = a.join(' ');                                                                                     // 4784
  if (isArray(b)) b = b.join(' ');                                                                                     // 4785
  return a + ' ' + b;                                                                                                  // 4786
}                                                                                                                      // 4787
                                                                                                                       // 4788
function extractElementNode(element) {                                                                                 // 4789
  for (var i = 0; i < element.length; i++) {                                                                           // 4790
    var elm = element[i];                                                                                              // 4791
    if (elm.nodeType === ELEMENT_NODE) {                                                                               // 4792
      return elm;                                                                                                      // 4793
    }                                                                                                                  // 4794
  }                                                                                                                    // 4795
}                                                                                                                      // 4796
                                                                                                                       // 4797
function splitClasses(classes) {                                                                                       // 4798
  if (isString(classes)) {                                                                                             // 4799
    classes = classes.split(' ');                                                                                      // 4800
  }                                                                                                                    // 4801
                                                                                                                       // 4802
  // Use createMap() to prevent class assumptions involving property names in                                          // 4803
  // Object.prototype                                                                                                  // 4804
  var obj = createMap();                                                                                               // 4805
  forEach(classes, function(klass) {                                                                                   // 4806
    // sometimes the split leaves empty string values                                                                  // 4807
    // incase extra spaces were applied to the options                                                                 // 4808
    if (klass.length) {                                                                                                // 4809
      obj[klass] = true;                                                                                               // 4810
    }                                                                                                                  // 4811
  });                                                                                                                  // 4812
  return obj;                                                                                                          // 4813
}                                                                                                                      // 4814
                                                                                                                       // 4815
// if any other type of options value besides an Object value is                                                       // 4816
// passed into the $animate.method() animation then this helper code                                                   // 4817
// will be run which will ignore it. While this patch is not the                                                       // 4818
// greatest solution to this, a lot of existing plugins depend on                                                      // 4819
// $animate to either call the callback (< 1.2) or return a promise                                                    // 4820
// that can be changed. This helper function ensures that the options                                                  // 4821
// are wiped clean incase a callback function is provided.                                                             // 4822
function prepareAnimateOptions(options) {                                                                              // 4823
  return isObject(options)                                                                                             // 4824
      ? options                                                                                                        // 4825
      : {};                                                                                                            // 4826
}                                                                                                                      // 4827
                                                                                                                       // 4828
var $$CoreAnimateRunnerProvider = function() {                                                                         // 4829
  this.$get = ['$q', '$$rAF', function($q, $$rAF) {                                                                    // 4830
    function AnimateRunner() {}                                                                                        // 4831
    AnimateRunner.all = noop;                                                                                          // 4832
    AnimateRunner.chain = noop;                                                                                        // 4833
    AnimateRunner.prototype = {                                                                                        // 4834
      end: noop,                                                                                                       // 4835
      cancel: noop,                                                                                                    // 4836
      resume: noop,                                                                                                    // 4837
      pause: noop,                                                                                                     // 4838
      complete: noop,                                                                                                  // 4839
      then: function(pass, fail) {                                                                                     // 4840
        return $q(function(resolve) {                                                                                  // 4841
          $$rAF(function() {                                                                                           // 4842
            resolve();                                                                                                 // 4843
          });                                                                                                          // 4844
        }).then(pass, fail);                                                                                           // 4845
      }                                                                                                                // 4846
    };                                                                                                                 // 4847
    return AnimateRunner;                                                                                              // 4848
  }];                                                                                                                  // 4849
};                                                                                                                     // 4850
                                                                                                                       // 4851
// this is prefixed with Core since it conflicts with                                                                  // 4852
// the animateQueueProvider defined in ngAnimate/animateQueue.js                                                       // 4853
var $$CoreAnimateQueueProvider = function() {                                                                          // 4854
  var postDigestQueue = new HashMap();                                                                                 // 4855
  var postDigestElements = [];                                                                                         // 4856
                                                                                                                       // 4857
  this.$get = ['$$AnimateRunner', '$rootScope',                                                                        // 4858
       function($$AnimateRunner,   $rootScope) {                                                                       // 4859
    return {                                                                                                           // 4860
      enabled: noop,                                                                                                   // 4861
      on: noop,                                                                                                        // 4862
      off: noop,                                                                                                       // 4863
      pin: noop,                                                                                                       // 4864
                                                                                                                       // 4865
      push: function(element, event, options, domOperation) {                                                          // 4866
        domOperation        && domOperation();                                                                         // 4867
                                                                                                                       // 4868
        options = options || {};                                                                                       // 4869
        options.from        && element.css(options.from);                                                              // 4870
        options.to          && element.css(options.to);                                                                // 4871
                                                                                                                       // 4872
        if (options.addClass || options.removeClass) {                                                                 // 4873
          addRemoveClassesPostDigest(element, options.addClass, options.removeClass);                                  // 4874
        }                                                                                                              // 4875
                                                                                                                       // 4876
        return new $$AnimateRunner(); // jshint ignore:line                                                            // 4877
      }                                                                                                                // 4878
    };                                                                                                                 // 4879
                                                                                                                       // 4880
                                                                                                                       // 4881
    function updateData(data, classes, value) {                                                                        // 4882
      var changed = false;                                                                                             // 4883
      if (classes) {                                                                                                   // 4884
        classes = isString(classes) ? classes.split(' ') :                                                             // 4885
                  isArray(classes) ? classes : [];                                                                     // 4886
        forEach(classes, function(className) {                                                                         // 4887
          if (className) {                                                                                             // 4888
            changed = true;                                                                                            // 4889
            data[className] = value;                                                                                   // 4890
          }                                                                                                            // 4891
        });                                                                                                            // 4892
      }                                                                                                                // 4893
      return changed;                                                                                                  // 4894
    }                                                                                                                  // 4895
                                                                                                                       // 4896
    function handleCSSClassChanges() {                                                                                 // 4897
      forEach(postDigestElements, function(element) {                                                                  // 4898
        var data = postDigestQueue.get(element);                                                                       // 4899
        if (data) {                                                                                                    // 4900
          var existing = splitClasses(element.attr('class'));                                                          // 4901
          var toAdd = '';                                                                                              // 4902
          var toRemove = '';                                                                                           // 4903
          forEach(data, function(status, className) {                                                                  // 4904
            var hasClass = !!existing[className];                                                                      // 4905
            if (status !== hasClass) {                                                                                 // 4906
              if (status) {                                                                                            // 4907
                toAdd += (toAdd.length ? ' ' : '') + className;                                                        // 4908
              } else {                                                                                                 // 4909
                toRemove += (toRemove.length ? ' ' : '') + className;                                                  // 4910
              }                                                                                                        // 4911
            }                                                                                                          // 4912
          });                                                                                                          // 4913
                                                                                                                       // 4914
          forEach(element, function(elm) {                                                                             // 4915
            toAdd    && jqLiteAddClass(elm, toAdd);                                                                    // 4916
            toRemove && jqLiteRemoveClass(elm, toRemove);                                                              // 4917
          });                                                                                                          // 4918
          postDigestQueue.remove(element);                                                                             // 4919
        }                                                                                                              // 4920
      });                                                                                                              // 4921
      postDigestElements.length = 0;                                                                                   // 4922
    }                                                                                                                  // 4923
                                                                                                                       // 4924
                                                                                                                       // 4925
    function addRemoveClassesPostDigest(element, add, remove) {                                                        // 4926
      var data = postDigestQueue.get(element) || {};                                                                   // 4927
                                                                                                                       // 4928
      var classesAdded = updateData(data, add, true);                                                                  // 4929
      var classesRemoved = updateData(data, remove, false);                                                            // 4930
                                                                                                                       // 4931
      if (classesAdded || classesRemoved) {                                                                            // 4932
                                                                                                                       // 4933
        postDigestQueue.put(element, data);                                                                            // 4934
        postDigestElements.push(element);                                                                              // 4935
                                                                                                                       // 4936
        if (postDigestElements.length === 1) {                                                                         // 4937
          $rootScope.$$postDigest(handleCSSClassChanges);                                                              // 4938
        }                                                                                                              // 4939
      }                                                                                                                // 4940
    }                                                                                                                  // 4941
  }];                                                                                                                  // 4942
};                                                                                                                     // 4943
                                                                                                                       // 4944
/**                                                                                                                    // 4945
 * @ngdoc provider                                                                                                     // 4946
 * @name $animateProvider                                                                                              // 4947
 *                                                                                                                     // 4948
 * @description                                                                                                        // 4949
 * Default implementation of $animate that doesn't perform any animations, instead just                                // 4950
 * synchronously performs DOM updates and resolves the returned runner promise.                                        // 4951
 *                                                                                                                     // 4952
 * In order to enable animations the `ngAnimate` module has to be loaded.                                              // 4953
 *                                                                                                                     // 4954
 * To see the functional implementation check out `src/ngAnimate/animate.js`.                                          // 4955
 */                                                                                                                    // 4956
var $AnimateProvider = ['$provide', function($provide) {                                                               // 4957
  var provider = this;                                                                                                 // 4958
                                                                                                                       // 4959
  this.$$registeredAnimations = Object.create(null);                                                                   // 4960
                                                                                                                       // 4961
   /**                                                                                                                 // 4962
   * @ngdoc method                                                                                                     // 4963
   * @name $animateProvider#register                                                                                   // 4964
   *                                                                                                                   // 4965
   * @description                                                                                                      // 4966
   * Registers a new injectable animation factory function. The factory function produces the                          // 4967
   * animation object which contains callback functions for each event that is expected to be                          // 4968
   * animated.                                                                                                         // 4969
   *                                                                                                                   // 4970
   *   * `eventFn`: `function(element, ... , doneFunction, options)`                                                   // 4971
   *   The element to animate, the `doneFunction` and the options fed into the animation. Depending                    // 4972
   *   on the type of animation additional arguments will be injected into the animation function. The                 // 4973
   *   list below explains the function signatures for the different animation methods:                                // 4974
   *                                                                                                                   // 4975
   *   - setClass: function(element, addedClasses, removedClasses, doneFunction, options)                              // 4976
   *   - addClass: function(element, addedClasses, doneFunction, options)                                              // 4977
   *   - removeClass: function(element, removedClasses, doneFunction, options)                                         // 4978
   *   - enter, leave, move: function(element, doneFunction, options)                                                  // 4979
   *   - animate: function(element, fromStyles, toStyles, doneFunction, options)                                       // 4980
   *                                                                                                                   // 4981
   *   Make sure to trigger the `doneFunction` once the animation is fully complete.                                   // 4982
   *                                                                                                                   // 4983
   * ```js                                                                                                             // 4984
   *   return {                                                                                                        // 4985
   *     //enter, leave, move signature                                                                                // 4986
   *     eventFn : function(element, done, options) {                                                                  // 4987
   *       //code to run the animation                                                                                 // 4988
   *       //once complete, then run done()                                                                            // 4989
   *       return function endFunction(wasCancelled) {                                                                 // 4990
   *         //code to cancel the animation                                                                            // 4991
   *       }                                                                                                           // 4992
   *     }                                                                                                             // 4993
   *   }                                                                                                               // 4994
   * ```                                                                                                               // 4995
   *                                                                                                                   // 4996
   * @param {string} name The name of the animation (this is what the class-based CSS value will be compared to).      // 4997
   * @param {Function} factory The factory function that will be executed to return the animation                      // 4998
   *                           object.                                                                                 // 4999
   */                                                                                                                  // 5000
  this.register = function(name, factory) {                                                                            // 5001
    if (name && name.charAt(0) !== '.') {                                                                              // 5002
      throw $animateMinErr('notcsel', "Expecting class selector starting with '.' got '{0}'.", name);                  // 5003
    }                                                                                                                  // 5004
                                                                                                                       // 5005
    var key = name + '-animation';                                                                                     // 5006
    provider.$$registeredAnimations[name.substr(1)] = key;                                                             // 5007
    $provide.factory(key, factory);                                                                                    // 5008
  };                                                                                                                   // 5009
                                                                                                                       // 5010
  /**                                                                                                                  // 5011
   * @ngdoc method                                                                                                     // 5012
   * @name $animateProvider#classNameFilter                                                                            // 5013
   *                                                                                                                   // 5014
   * @description                                                                                                      // 5015
   * Sets and/or returns the CSS class regular expression that is checked when performing                              // 5016
   * an animation. Upon bootstrap the classNameFilter value is not set at all and will                                 // 5017
   * therefore enable $animate to attempt to perform an animation on any element that is triggered.                    // 5018
   * When setting the `classNameFilter` value, animations will only be performed on elements                           // 5019
   * that successfully match the filter expression. This in turn can boost performance                                 // 5020
   * for low-powered devices as well as applications containing a lot of structural operations.                        // 5021
   * @param {RegExp=} expression The className expression which will be checked against all animations                 // 5022
   * @return {RegExp} The current CSS className expression value. If null then there is no expression value            // 5023
   */                                                                                                                  // 5024
  this.classNameFilter = function(expression) {                                                                        // 5025
    if (arguments.length === 1) {                                                                                      // 5026
      this.$$classNameFilter = (expression instanceof RegExp) ? expression : null;                                     // 5027
      if (this.$$classNameFilter) {                                                                                    // 5028
        var reservedRegex = new RegExp("(\\s+|\\/)" + NG_ANIMATE_CLASSNAME + "(\\s+|\\/)");                            // 5029
        if (reservedRegex.test(this.$$classNameFilter.toString())) {                                                   // 5030
          throw $animateMinErr('nongcls','$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.', NG_ANIMATE_CLASSNAME);
                                                                                                                       // 5032
        }                                                                                                              // 5033
      }                                                                                                                // 5034
    }                                                                                                                  // 5035
    return this.$$classNameFilter;                                                                                     // 5036
  };                                                                                                                   // 5037
                                                                                                                       // 5038
  this.$get = ['$$animateQueue', function($$animateQueue) {                                                            // 5039
    function domInsert(element, parentElement, afterElement) {                                                         // 5040
      // if for some reason the previous element was removed                                                           // 5041
      // from the dom sometime before this code runs then let's                                                        // 5042
      // just stick to using the parent element as the anchor                                                          // 5043
      if (afterElement) {                                                                                              // 5044
        var afterNode = extractElementNode(afterElement);                                                              // 5045
        if (afterNode && !afterNode.parentNode && !afterNode.previousElementSibling) {                                 // 5046
          afterElement = null;                                                                                         // 5047
        }                                                                                                              // 5048
      }                                                                                                                // 5049
      afterElement ? afterElement.after(element) : parentElement.prepend(element);                                     // 5050
    }                                                                                                                  // 5051
                                                                                                                       // 5052
    /**                                                                                                                // 5053
     * @ngdoc service                                                                                                  // 5054
     * @name $animate                                                                                                  // 5055
     * @description The $animate service exposes a series of DOM utility methods that provide support                  // 5056
     * for animation hooks. The default behavior is the application of DOM operations, however,                        // 5057
     * when an animation is detected (and animations are enabled), $animate will do the heavy lifting                  // 5058
     * to ensure that animation runs with the triggered DOM operation.                                                 // 5059
     *                                                                                                                 // 5060
     * By default $animate doesn't trigger an animations. This is because the `ngAnimate` module isn't                 // 5061
     * included and only when it is active then the animation hooks that `$animate` triggers will be                   // 5062
     * functional. Once active then all structural `ng-` directives will trigger animations as they perform            // 5063
     * their DOM-related operations (enter, leave and move). Other directives such as `ngClass`,                       // 5064
     * `ngShow`, `ngHide` and `ngMessages` also provide support for animations.                                        // 5065
     *                                                                                                                 // 5066
     * It is recommended that the`$animate` service is always used when executing DOM-related procedures within directives.
     *                                                                                                                 // 5068
     * To learn more about enabling animation support, click here to visit the                                         // 5069
     * {@link ngAnimate ngAnimate module page}.                                                                        // 5070
     */                                                                                                                // 5071
    return {                                                                                                           // 5072
      // we don't call it directly since non-existant arguments may                                                    // 5073
      // be interpreted as null within the sub enabled function                                                        // 5074
                                                                                                                       // 5075
      /**                                                                                                              // 5076
       *                                                                                                               // 5077
       * @ngdoc method                                                                                                 // 5078
       * @name $animate#on                                                                                             // 5079
       * @kind function                                                                                                // 5080
       * @description Sets up an event listener to fire whenever the animation event (enter, leave, move, etc...)      // 5081
       *    has fired on the given element or among any of its children. Once the listener is fired, the provided callback
       *    is fired with the following params:                                                                        // 5083
       *                                                                                                               // 5084
       * ```js                                                                                                         // 5085
       * $animate.on('enter', container,                                                                               // 5086
       *    function callback(element, phase) {                                                                        // 5087
       *      // cool we detected an enter animation within the container                                              // 5088
       *    }                                                                                                          // 5089
       * );                                                                                                            // 5090
       * ```                                                                                                           // 5091
       *                                                                                                               // 5092
       * @param {string} event the animation event that will be captured (e.g. enter, leave, move, addClass, removeClass, etc...)
       * @param {DOMElement} container the container element that will capture each of the animation events that are fired on itself
       *     as well as among its children                                                                             // 5095
       * @param {Function} callback the callback function that will be fired when the listener is triggered            // 5096
       *                                                                                                               // 5097
       * The arguments present in the callback function are:                                                           // 5098
       * * `element` - The captured DOM element that the animation was fired on.                                       // 5099
       * * `phase` - The phase of the animation. The two possible phases are **start** (when the animation starts) and **close** (when it ends).
       */                                                                                                              // 5101
      on: $$animateQueue.on,                                                                                           // 5102
                                                                                                                       // 5103
      /**                                                                                                              // 5104
       *                                                                                                               // 5105
       * @ngdoc method                                                                                                 // 5106
       * @name $animate#off                                                                                            // 5107
       * @kind function                                                                                                // 5108
       * @description Deregisters an event listener based on the event which has been associated with the provided element. This method
       * can be used in three different ways depending on the arguments:                                               // 5110
       *                                                                                                               // 5111
       * ```js                                                                                                         // 5112
       * // remove all the animation event listeners listening for `enter`                                             // 5113
       * $animate.off('enter');                                                                                        // 5114
       *                                                                                                               // 5115
       * // remove all the animation event listeners listening for `enter` on the given element and its children       // 5116
       * $animate.off('enter', container);                                                                             // 5117
       *                                                                                                               // 5118
       * // remove the event listener function provided by `listenerFn` that is set                                    // 5119
       * // to listen for `enter` on the given `element` as well as its children                                       // 5120
       * $animate.off('enter', container, callback);                                                                   // 5121
       * ```                                                                                                           // 5122
       *                                                                                                               // 5123
       * @param {string} event the animation event (e.g. enter, leave, move, addClass, removeClass, etc...)            // 5124
       * @param {DOMElement=} container the container element the event listener was placed on                         // 5125
       * @param {Function=} callback the callback function that was registered as the listener                         // 5126
       */                                                                                                              // 5127
      off: $$animateQueue.off,                                                                                         // 5128
                                                                                                                       // 5129
      /**                                                                                                              // 5130
       * @ngdoc method                                                                                                 // 5131
       * @name $animate#pin                                                                                            // 5132
       * @kind function                                                                                                // 5133
       * @description Associates the provided element with a host parent element to allow the element to be animated even if it exists
       *    outside of the DOM structure of the Angular application. By doing so, any animation triggered via `$animate` can be issued on the
       *    element despite being outside the realm of the application or within another application. Say for example if the application
       *    was bootstrapped on an element that is somewhere inside of the `<body>` tag, but we wanted to allow for an element to be situated
       *    as a direct child of `document.body`, then this can be achieved by pinning the element via `$animate.pin(element)`. Keep in mind
       *    that calling `$animate.pin(element, parentElement)` will not actually insert into the DOM anywhere; it will just create the association.
       *                                                                                                               // 5140
       *    Note that this feature is only active when the `ngAnimate` module is used.                                 // 5141
       *                                                                                                               // 5142
       * @param {DOMElement} element the external element that will be pinned                                          // 5143
       * @param {DOMElement} parentElement the host parent element that will be associated with the external element   // 5144
       */                                                                                                              // 5145
      pin: $$animateQueue.pin,                                                                                         // 5146
                                                                                                                       // 5147
      /**                                                                                                              // 5148
       *                                                                                                               // 5149
       * @ngdoc method                                                                                                 // 5150
       * @name $animate#enabled                                                                                        // 5151
       * @kind function                                                                                                // 5152
       * @description Used to get and set whether animations are enabled or not on the entire application or on an element and its children. This
       * function can be called in four ways:                                                                          // 5154
       *                                                                                                               // 5155
       * ```js                                                                                                         // 5156
       * // returns true or false                                                                                      // 5157
       * $animate.enabled();                                                                                           // 5158
       *                                                                                                               // 5159
       * // changes the enabled state for all animations                                                               // 5160
       * $animate.enabled(false);                                                                                      // 5161
       * $animate.enabled(true);                                                                                       // 5162
       *                                                                                                               // 5163
       * // returns true or false if animations are enabled for an element                                             // 5164
       * $animate.enabled(element);                                                                                    // 5165
       *                                                                                                               // 5166
       * // changes the enabled state for an element and its children                                                  // 5167
       * $animate.enabled(element, true);                                                                              // 5168
       * $animate.enabled(element, false);                                                                             // 5169
       * ```                                                                                                           // 5170
       *                                                                                                               // 5171
       * @param {DOMElement=} element the element that will be considered for checking/setting the enabled state       // 5172
       * @param {boolean=} enabled whether or not the animations will be enabled for the element                       // 5173
       *                                                                                                               // 5174
       * @return {boolean} whether or not animations are enabled                                                       // 5175
       */                                                                                                              // 5176
      enabled: $$animateQueue.enabled,                                                                                 // 5177
                                                                                                                       // 5178
      /**                                                                                                              // 5179
       * @ngdoc method                                                                                                 // 5180
       * @name $animate#cancel                                                                                         // 5181
       * @kind function                                                                                                // 5182
       * @description Cancels the provided animation.                                                                  // 5183
       *                                                                                                               // 5184
       * @param {Promise} animationPromise The animation promise that is returned when an animation is started.        // 5185
       */                                                                                                              // 5186
      cancel: function(runner) {                                                                                       // 5187
        runner.end && runner.end();                                                                                    // 5188
      },                                                                                                               // 5189
                                                                                                                       // 5190
      /**                                                                                                              // 5191
       *                                                                                                               // 5192
       * @ngdoc method                                                                                                 // 5193
       * @name $animate#enter                                                                                          // 5194
       * @kind function                                                                                                // 5195
       * @description Inserts the element into the DOM either after the `after` element (if provided) or               // 5196
       *   as the first child within the `parent` element and then triggers an animation.                              // 5197
       *   A promise is returned that will be resolved during the next digest once the animation                       // 5198
       *   has completed.                                                                                              // 5199
       *                                                                                                               // 5200
       * @param {DOMElement} element the element which will be inserted into the DOM                                   // 5201
       * @param {DOMElement} parent the parent element which will append the element as                                // 5202
       *   a child (so long as the after element is not present)                                                       // 5203
       * @param {DOMElement=} after the sibling element after which the element will be appended                       // 5204
       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5205
       *                                                                                                               // 5206
       * @return {Promise} the animation callback promise                                                              // 5207
       */                                                                                                              // 5208
      enter: function(element, parent, after, options) {                                                               // 5209
        parent = parent && jqLite(parent);                                                                             // 5210
        after = after && jqLite(after);                                                                                // 5211
        parent = parent || after.parent();                                                                             // 5212
        domInsert(element, parent, after);                                                                             // 5213
        return $$animateQueue.push(element, 'enter', prepareAnimateOptions(options));                                  // 5214
      },                                                                                                               // 5215
                                                                                                                       // 5216
      /**                                                                                                              // 5217
       *                                                                                                               // 5218
       * @ngdoc method                                                                                                 // 5219
       * @name $animate#move                                                                                           // 5220
       * @kind function                                                                                                // 5221
       * @description Inserts (moves) the element into its new position in the DOM either after                        // 5222
       *   the `after` element (if provided) or as the first child within the `parent` element                         // 5223
       *   and then triggers an animation. A promise is returned that will be resolved                                 // 5224
       *   during the next digest once the animation has completed.                                                    // 5225
       *                                                                                                               // 5226
       * @param {DOMElement} element the element which will be moved into the new DOM position                         // 5227
       * @param {DOMElement} parent the parent element which will append the element as                                // 5228
       *   a child (so long as the after element is not present)                                                       // 5229
       * @param {DOMElement=} after the sibling element after which the element will be appended                       // 5230
       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5231
       *                                                                                                               // 5232
       * @return {Promise} the animation callback promise                                                              // 5233
       */                                                                                                              // 5234
      move: function(element, parent, after, options) {                                                                // 5235
        parent = parent && jqLite(parent);                                                                             // 5236
        after = after && jqLite(after);                                                                                // 5237
        parent = parent || after.parent();                                                                             // 5238
        domInsert(element, parent, after);                                                                             // 5239
        return $$animateQueue.push(element, 'move', prepareAnimateOptions(options));                                   // 5240
      },                                                                                                               // 5241
                                                                                                                       // 5242
      /**                                                                                                              // 5243
       * @ngdoc method                                                                                                 // 5244
       * @name $animate#leave                                                                                          // 5245
       * @kind function                                                                                                // 5246
       * @description Triggers an animation and then removes the element from the DOM.                                 // 5247
       * When the function is called a promise is returned that will be resolved during the next                       // 5248
       * digest once the animation has completed.                                                                      // 5249
       *                                                                                                               // 5250
       * @param {DOMElement} element the element which will be removed from the DOM                                    // 5251
       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5252
       *                                                                                                               // 5253
       * @return {Promise} the animation callback promise                                                              // 5254
       */                                                                                                              // 5255
      leave: function(element, options) {                                                                              // 5256
        return $$animateQueue.push(element, 'leave', prepareAnimateOptions(options), function() {                      // 5257
          element.remove();                                                                                            // 5258
        });                                                                                                            // 5259
      },                                                                                                               // 5260
                                                                                                                       // 5261
      /**                                                                                                              // 5262
       * @ngdoc method                                                                                                 // 5263
       * @name $animate#addClass                                                                                       // 5264
       * @kind function                                                                                                // 5265
       *                                                                                                               // 5266
       * @description Triggers an addClass animation surrounding the addition of the provided CSS class(es). Upon      // 5267
       *   execution, the addClass operation will only be handled after the next digest and it will not trigger an     // 5268
       *   animation if element already contains the CSS class or if the class is removed at a later step.             // 5269
       *   Note that class-based animations are treated differently compared to structural animations                  // 5270
       *   (like enter, move and leave) since the CSS classes may be added/removed at different points                 // 5271
       *   depending if CSS or JavaScript animations are used.                                                         // 5272
       *                                                                                                               // 5273
       * @param {DOMElement} element the element which the CSS classes will be applied to                              // 5274
       * @param {string} className the CSS class(es) that will be added (multiple classes are separated via spaces)    // 5275
       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5276
       *                                                                                                               // 5277
       * @return {Promise} the animation callback promise                                                              // 5278
       */                                                                                                              // 5279
      addClass: function(element, className, options) {                                                                // 5280
        options = prepareAnimateOptions(options);                                                                      // 5281
        options.addClass = mergeClasses(options.addclass, className);                                                  // 5282
        return $$animateQueue.push(element, 'addClass', options);                                                      // 5283
      },                                                                                                               // 5284
                                                                                                                       // 5285
      /**                                                                                                              // 5286
       * @ngdoc method                                                                                                 // 5287
       * @name $animate#removeClass                                                                                    // 5288
       * @kind function                                                                                                // 5289
       *                                                                                                               // 5290
       * @description Triggers a removeClass animation surrounding the removal of the provided CSS class(es). Upon     // 5291
       *   execution, the removeClass operation will only be handled after the next digest and it will not trigger an  // 5292
       *   animation if element does not contain the CSS class or if the class is added at a later step.               // 5293
       *   Note that class-based animations are treated differently compared to structural animations                  // 5294
       *   (like enter, move and leave) since the CSS classes may be added/removed at different points                 // 5295
       *   depending if CSS or JavaScript animations are used.                                                         // 5296
       *                                                                                                               // 5297
       * @param {DOMElement} element the element which the CSS classes will be applied to                              // 5298
       * @param {string} className the CSS class(es) that will be removed (multiple classes are separated via spaces)  // 5299
       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5300
       *                                                                                                               // 5301
       * @return {Promise} the animation callback promise                                                              // 5302
       */                                                                                                              // 5303
      removeClass: function(element, className, options) {                                                             // 5304
        options = prepareAnimateOptions(options);                                                                      // 5305
        options.removeClass = mergeClasses(options.removeClass, className);                                            // 5306
        return $$animateQueue.push(element, 'removeClass', options);                                                   // 5307
      },                                                                                                               // 5308
                                                                                                                       // 5309
      /**                                                                                                              // 5310
       * @ngdoc method                                                                                                 // 5311
       * @name $animate#setClass                                                                                       // 5312
       * @kind function                                                                                                // 5313
       *                                                                                                               // 5314
       * @description Performs both the addition and removal of a CSS classes on an element and (during the process)   // 5315
       *    triggers an animation surrounding the class addition/removal. Much like `$animate.addClass` and            // 5316
       *    `$animate.removeClass`, `setClass` will only evaluate the classes being added/removed once a digest has    // 5317
       *    passed. Note that class-based animations are treated differently compared to structural animations         // 5318
       *    (like enter, move and leave) since the CSS classes may be added/removed at different points                // 5319
       *    depending if CSS or JavaScript animations are used.                                                        // 5320
       *                                                                                                               // 5321
       * @param {DOMElement} element the element which the CSS classes will be applied to                              // 5322
       * @param {string} add the CSS class(es) that will be added (multiple classes are separated via spaces)          // 5323
       * @param {string} remove the CSS class(es) that will be removed (multiple classes are separated via spaces)     // 5324
       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5325
       *                                                                                                               // 5326
       * @return {Promise} the animation callback promise                                                              // 5327
       */                                                                                                              // 5328
      setClass: function(element, add, remove, options) {                                                              // 5329
        options = prepareAnimateOptions(options);                                                                      // 5330
        options.addClass = mergeClasses(options.addClass, add);                                                        // 5331
        options.removeClass = mergeClasses(options.removeClass, remove);                                               // 5332
        return $$animateQueue.push(element, 'setClass', options);                                                      // 5333
      },                                                                                                               // 5334
                                                                                                                       // 5335
      /**                                                                                                              // 5336
       * @ngdoc method                                                                                                 // 5337
       * @name $animate#animate                                                                                        // 5338
       * @kind function                                                                                                // 5339
       *                                                                                                               // 5340
       * @description Performs an inline animation on the element which applies the provided to and from CSS styles to the element.
       * If any detected CSS transition, keyframe or JavaScript matches the provided className value then the animation will take
       * on the provided styles. For example, if a transition animation is set for the given className then the provided from and
       * to styles will be applied alongside the given transition. If a JavaScript animation is detected then the provided styles
       * will be given in as function paramters into the `animate` method (or as apart of the `options` parameter).    // 5345
       *                                                                                                               // 5346
       * @param {DOMElement} element the element which the CSS styles will be applied to                               // 5347
       * @param {object} from the from (starting) CSS styles that will be applied to the element and across the animation.
       * @param {object} to the to (destination) CSS styles that will be applied to the element and across the animation.
       * @param {string=} className an optional CSS class that will be applied to the element for the duration of the animation. If
       *    this value is left as empty then a CSS class of `ng-inline-animate` will be applied to the element.        // 5351
       *    (Note that if no animation is detected then this value will not be appplied to the element.)               // 5352
       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5353
       *                                                                                                               // 5354
       * @return {Promise} the animation callback promise                                                              // 5355
       */                                                                                                              // 5356
      animate: function(element, from, to, className, options) {                                                       // 5357
        options = prepareAnimateOptions(options);                                                                      // 5358
        options.from = options.from ? extend(options.from, from) : from;                                               // 5359
        options.to   = options.to   ? extend(options.to, to)     : to;                                                 // 5360
                                                                                                                       // 5361
        className = className || 'ng-inline-animate';                                                                  // 5362
        options.tempClasses = mergeClasses(options.tempClasses, className);                                            // 5363
        return $$animateQueue.push(element, 'animate', options);                                                       // 5364
      }                                                                                                                // 5365
    };                                                                                                                 // 5366
  }];                                                                                                                  // 5367
}];                                                                                                                    // 5368
                                                                                                                       // 5369
/**                                                                                                                    // 5370
 * @ngdoc service                                                                                                      // 5371
 * @name $animateCss                                                                                                   // 5372
 * @kind object                                                                                                        // 5373
 *                                                                                                                     // 5374
 * @description                                                                                                        // 5375
 * This is the core version of `$animateCss`. By default, only when the `ngAnimate` is included,                       // 5376
 * then the `$animateCss` service will actually perform animations.                                                    // 5377
 *                                                                                                                     // 5378
 * Click here {@link ngAnimate.$animateCss to read the documentation for $animateCss}.                                 // 5379
 */                                                                                                                    // 5380
var $CoreAnimateCssProvider = function() {                                                                             // 5381
  this.$get = ['$$rAF', '$q', function($$rAF, $q) {                                                                    // 5382
                                                                                                                       // 5383
    var RAFPromise = function() {};                                                                                    // 5384
    RAFPromise.prototype = {                                                                                           // 5385
      done: function(cancel) {                                                                                         // 5386
        this.defer && this.defer[cancel === true ? 'reject' : 'resolve']();                                            // 5387
      },                                                                                                               // 5388
      end: function() {                                                                                                // 5389
        this.done();                                                                                                   // 5390
      },                                                                                                               // 5391
      cancel: function() {                                                                                             // 5392
        this.done(true);                                                                                               // 5393
      },                                                                                                               // 5394
      getPromise: function() {                                                                                         // 5395
        if (!this.defer) {                                                                                             // 5396
          this.defer = $q.defer();                                                                                     // 5397
        }                                                                                                              // 5398
        return this.defer.promise;                                                                                     // 5399
      },                                                                                                               // 5400
      then: function(f1,f2) {                                                                                          // 5401
        return this.getPromise().then(f1,f2);                                                                          // 5402
      },                                                                                                               // 5403
      'catch': function(f1) {                                                                                          // 5404
        return this.getPromise()['catch'](f1);                                                                         // 5405
      },                                                                                                               // 5406
      'finally': function(f1) {                                                                                        // 5407
        return this.getPromise()['finally'](f1);                                                                       // 5408
      }                                                                                                                // 5409
    };                                                                                                                 // 5410
                                                                                                                       // 5411
    return function(element, options) {                                                                                // 5412
      // there is no point in applying the styles since                                                                // 5413
      // there is no animation that goes on at all in                                                                  // 5414
      // this version of $animateCss.                                                                                  // 5415
      if (options.cleanupStyles) {                                                                                     // 5416
        options.from = options.to = null;                                                                              // 5417
      }                                                                                                                // 5418
                                                                                                                       // 5419
      if (options.from) {                                                                                              // 5420
        element.css(options.from);                                                                                     // 5421
        options.from = null;                                                                                           // 5422
      }                                                                                                                // 5423
                                                                                                                       // 5424
      var closed, runner = new RAFPromise();                                                                           // 5425
      return {                                                                                                         // 5426
        start: run,                                                                                                    // 5427
        end: run                                                                                                       // 5428
      };                                                                                                               // 5429
                                                                                                                       // 5430
      function run() {                                                                                                 // 5431
        $$rAF(function() {                                                                                             // 5432
          close();                                                                                                     // 5433
          if (!closed) {                                                                                               // 5434
            runner.done();                                                                                             // 5435
          }                                                                                                            // 5436
          closed = true;                                                                                               // 5437
        });                                                                                                            // 5438
        return runner;                                                                                                 // 5439
      }                                                                                                                // 5440
                                                                                                                       // 5441
      function close() {                                                                                               // 5442
        if (options.addClass) {                                                                                        // 5443
          element.addClass(options.addClass);                                                                          // 5444
          options.addClass = null;                                                                                     // 5445
        }                                                                                                              // 5446
        if (options.removeClass) {                                                                                     // 5447
          element.removeClass(options.removeClass);                                                                    // 5448
          options.removeClass = null;                                                                                  // 5449
        }                                                                                                              // 5450
        if (options.to) {                                                                                              // 5451
          element.css(options.to);                                                                                     // 5452
          options.to = null;                                                                                           // 5453
        }                                                                                                              // 5454
      }                                                                                                                // 5455
    };                                                                                                                 // 5456
  }];                                                                                                                  // 5457
};                                                                                                                     // 5458
                                                                                                                       // 5459
/* global stripHash: true */                                                                                           // 5460
                                                                                                                       // 5461
/**                                                                                                                    // 5462
 * ! This is a private undocumented service !                                                                          // 5463
 *                                                                                                                     // 5464
 * @name $browser                                                                                                      // 5465
 * @requires $log                                                                                                      // 5466
 * @description                                                                                                        // 5467
 * This object has two goals:                                                                                          // 5468
 *                                                                                                                     // 5469
 * - hide all the global state in the browser caused by the window object                                              // 5470
 * - abstract away all the browser specific features and inconsistencies                                               // 5471
 *                                                                                                                     // 5472
 * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`                                  // 5473
 * service, which can be used for convenient testing of the application without the interaction with                   // 5474
 * the real browser apis.                                                                                              // 5475
 */                                                                                                                    // 5476
/**                                                                                                                    // 5477
 * @param {object} window The global window object.                                                                    // 5478
 * @param {object} document jQuery wrapped document.                                                                   // 5479
 * @param {object} $log window.console or an object with the same interface.                                           // 5480
 * @param {object} $sniffer $sniffer service                                                                           // 5481
 */                                                                                                                    // 5482
function Browser(window, document, $log, $sniffer) {                                                                   // 5483
  var self = this,                                                                                                     // 5484
      rawDocument = document[0],                                                                                       // 5485
      location = window.location,                                                                                      // 5486
      history = window.history,                                                                                        // 5487
      setTimeout = window.setTimeout,                                                                                  // 5488
      clearTimeout = window.clearTimeout,                                                                              // 5489
      pendingDeferIds = {};                                                                                            // 5490
                                                                                                                       // 5491
  self.isMock = false;                                                                                                 // 5492
                                                                                                                       // 5493
  var outstandingRequestCount = 0;                                                                                     // 5494
  var outstandingRequestCallbacks = [];                                                                                // 5495
                                                                                                                       // 5496
  // TODO(vojta): remove this temporary api                                                                            // 5497
  self.$$completeOutstandingRequest = completeOutstandingRequest;                                                      // 5498
  self.$$incOutstandingRequestCount = function() { outstandingRequestCount++; };                                       // 5499
                                                                                                                       // 5500
  /**                                                                                                                  // 5501
   * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`                    // 5502
   * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.                            // 5503
   */                                                                                                                  // 5504
  function completeOutstandingRequest(fn) {                                                                            // 5505
    try {                                                                                                              // 5506
      fn.apply(null, sliceArgs(arguments, 1));                                                                         // 5507
    } finally {                                                                                                        // 5508
      outstandingRequestCount--;                                                                                       // 5509
      if (outstandingRequestCount === 0) {                                                                             // 5510
        while (outstandingRequestCallbacks.length) {                                                                   // 5511
          try {                                                                                                        // 5512
            outstandingRequestCallbacks.pop()();                                                                       // 5513
          } catch (e) {                                                                                                // 5514
            $log.error(e);                                                                                             // 5515
          }                                                                                                            // 5516
        }                                                                                                              // 5517
      }                                                                                                                // 5518
    }                                                                                                                  // 5519
  }                                                                                                                    // 5520
                                                                                                                       // 5521
  function getHash(url) {                                                                                              // 5522
    var index = url.indexOf('#');                                                                                      // 5523
    return index === -1 ? '' : url.substr(index);                                                                      // 5524
  }                                                                                                                    // 5525
                                                                                                                       // 5526
  /**                                                                                                                  // 5527
   * @private                                                                                                          // 5528
   * Note: this method is used only by scenario runner                                                                 // 5529
   * TODO(vojta): prefix this method with $$ ?                                                                         // 5530
   * @param {function()} callback Function that will be called when no outstanding request                             // 5531
   */                                                                                                                  // 5532
  self.notifyWhenNoOutstandingRequests = function(callback) {                                                          // 5533
    if (outstandingRequestCount === 0) {                                                                               // 5534
      callback();                                                                                                      // 5535
    } else {                                                                                                           // 5536
      outstandingRequestCallbacks.push(callback);                                                                      // 5537
    }                                                                                                                  // 5538
  };                                                                                                                   // 5539
                                                                                                                       // 5540
  //////////////////////////////////////////////////////////////                                                       // 5541
  // URL API                                                                                                           // 5542
  //////////////////////////////////////////////////////////////                                                       // 5543
                                                                                                                       // 5544
  var cachedState, lastHistoryState,                                                                                   // 5545
      lastBrowserUrl = location.href,                                                                                  // 5546
      baseElement = document.find('base'),                                                                             // 5547
      pendingLocation = null;                                                                                          // 5548
                                                                                                                       // 5549
  cacheState();                                                                                                        // 5550
  lastHistoryState = cachedState;                                                                                      // 5551
                                                                                                                       // 5552
  /**                                                                                                                  // 5553
   * @name $browser#url                                                                                                // 5554
   *                                                                                                                   // 5555
   * @description                                                                                                      // 5556
   * GETTER:                                                                                                           // 5557
   * Without any argument, this method just returns current value of location.href.                                    // 5558
   *                                                                                                                   // 5559
   * SETTER:                                                                                                           // 5560
   * With at least one argument, this method sets url to new value.                                                    // 5561
   * If html5 history api supported, pushState/replaceState is used, otherwise                                         // 5562
   * location.href/location.replace is used.                                                                           // 5563
   * Returns its own instance to allow chaining                                                                        // 5564
   *                                                                                                                   // 5565
   * NOTE: this api is intended for use only by the $location service. Please use the                                  // 5566
   * {@link ng.$location $location service} to change url.                                                             // 5567
   *                                                                                                                   // 5568
   * @param {string} url New url (when used as setter)                                                                 // 5569
   * @param {boolean=} replace Should new url replace current history record?                                          // 5570
   * @param {object=} state object to use with pushState/replaceState                                                  // 5571
   */                                                                                                                  // 5572
  self.url = function(url, replace, state) {                                                                           // 5573
    // In modern browsers `history.state` is `null` by default; treating it separately                                 // 5574
    // from `undefined` would cause `$browser.url('/foo')` to change `history.state`                                   // 5575
    // to undefined via `pushState`. Instead, let's change `undefined` to `null` here.                                 // 5576
    if (isUndefined(state)) {                                                                                          // 5577
      state = null;                                                                                                    // 5578
    }                                                                                                                  // 5579
                                                                                                                       // 5580
    // Android Browser BFCache causes location, history reference to become stale.                                     // 5581
    if (location !== window.location) location = window.location;                                                      // 5582
    if (history !== window.history) history = window.history;                                                          // 5583
                                                                                                                       // 5584
    // setter                                                                                                          // 5585
    if (url) {                                                                                                         // 5586
      var sameState = lastHistoryState === state;                                                                      // 5587
                                                                                                                       // 5588
      // Don't change anything if previous and current URLs and states match. This also prevents                       // 5589
      // IE<10 from getting into redirect loop when in LocationHashbangInHtml5Url mode.                                // 5590
      // See https://github.com/angular/angular.js/commit/ffb2701                                                      // 5591
      if (lastBrowserUrl === url && (!$sniffer.history || sameState)) {                                                // 5592
        return self;                                                                                                   // 5593
      }                                                                                                                // 5594
      var sameBase = lastBrowserUrl && stripHash(lastBrowserUrl) === stripHash(url);                                   // 5595
      lastBrowserUrl = url;                                                                                            // 5596
      lastHistoryState = state;                                                                                        // 5597
      // Don't use history API if only the hash changed                                                                // 5598
      // due to a bug in IE10/IE11 which leads                                                                         // 5599
      // to not firing a `hashchange` nor `popstate` event                                                             // 5600
      // in some cases (see #9143).                                                                                    // 5601
      if ($sniffer.history && (!sameBase || !sameState)) {                                                             // 5602
        history[replace ? 'replaceState' : 'pushState'](state, '', url);                                               // 5603
        cacheState();                                                                                                  // 5604
        // Do the assignment again so that those two variables are referentially identical.                            // 5605
        lastHistoryState = cachedState;                                                                                // 5606
      } else {                                                                                                         // 5607
        if (!sameBase || pendingLocation) {                                                                            // 5608
          pendingLocation = url;                                                                                       // 5609
        }                                                                                                              // 5610
        if (replace) {                                                                                                 // 5611
          location.replace(url);                                                                                       // 5612
        } else if (!sameBase) {                                                                                        // 5613
          location.href = url;                                                                                         // 5614
        } else {                                                                                                       // 5615
          location.hash = getHash(url);                                                                                // 5616
        }                                                                                                              // 5617
        if (location.href !== url) {                                                                                   // 5618
          pendingLocation = url;                                                                                       // 5619
        }                                                                                                              // 5620
      }                                                                                                                // 5621
      return self;                                                                                                     // 5622
    // getter                                                                                                          // 5623
    } else {                                                                                                           // 5624
      // - pendingLocation is needed as browsers don't allow to read out                                               // 5625
      //   the new location.href if a reload happened or if there is a bug like in iOS 9 (see                          // 5626
      //   https://openradar.appspot.com/22186109).                                                                    // 5627
      // - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172                     // 5628
      return pendingLocation || location.href.replace(/%27/g,"'");                                                     // 5629
    }                                                                                                                  // 5630
  };                                                                                                                   // 5631
                                                                                                                       // 5632
  /**                                                                                                                  // 5633
   * @name $browser#state                                                                                              // 5634
   *                                                                                                                   // 5635
   * @description                                                                                                      // 5636
   * This method is a getter.                                                                                          // 5637
   *                                                                                                                   // 5638
   * Return history.state or null if history.state is undefined.                                                       // 5639
   *                                                                                                                   // 5640
   * @returns {object} state                                                                                           // 5641
   */                                                                                                                  // 5642
  self.state = function() {                                                                                            // 5643
    return cachedState;                                                                                                // 5644
  };                                                                                                                   // 5645
                                                                                                                       // 5646
  var urlChangeListeners = [],                                                                                         // 5647
      urlChangeInit = false;                                                                                           // 5648
                                                                                                                       // 5649
  function cacheStateAndFireUrlChange() {                                                                              // 5650
    pendingLocation = null;                                                                                            // 5651
    cacheState();                                                                                                      // 5652
    fireUrlChange();                                                                                                   // 5653
  }                                                                                                                    // 5654
                                                                                                                       // 5655
  function getCurrentState() {                                                                                         // 5656
    try {                                                                                                              // 5657
      return history.state;                                                                                            // 5658
    } catch (e) {                                                                                                      // 5659
      // MSIE can reportedly throw when there is no state (UNCONFIRMED).                                               // 5660
    }                                                                                                                  // 5661
  }                                                                                                                    // 5662
                                                                                                                       // 5663
  // This variable should be used *only* inside the cacheState function.                                               // 5664
  var lastCachedState = null;                                                                                          // 5665
  function cacheState() {                                                                                              // 5666
    // This should be the only place in $browser where `history.state` is read.                                        // 5667
    cachedState = getCurrentState();                                                                                   // 5668
    cachedState = isUndefined(cachedState) ? null : cachedState;                                                       // 5669
                                                                                                                       // 5670
    // Prevent callbacks fo fire twice if both hashchange & popstate were fired.                                       // 5671
    if (equals(cachedState, lastCachedState)) {                                                                        // 5672
      cachedState = lastCachedState;                                                                                   // 5673
    }                                                                                                                  // 5674
    lastCachedState = cachedState;                                                                                     // 5675
  }                                                                                                                    // 5676
                                                                                                                       // 5677
  function fireUrlChange() {                                                                                           // 5678
    if (lastBrowserUrl === self.url() && lastHistoryState === cachedState) {                                           // 5679
      return;                                                                                                          // 5680
    }                                                                                                                  // 5681
                                                                                                                       // 5682
    lastBrowserUrl = self.url();                                                                                       // 5683
    lastHistoryState = cachedState;                                                                                    // 5684
    forEach(urlChangeListeners, function(listener) {                                                                   // 5685
      listener(self.url(), cachedState);                                                                               // 5686
    });                                                                                                                // 5687
  }                                                                                                                    // 5688
                                                                                                                       // 5689
  /**                                                                                                                  // 5690
   * @name $browser#onUrlChange                                                                                        // 5691
   *                                                                                                                   // 5692
   * @description                                                                                                      // 5693
   * Register callback function that will be called, when url changes.                                                 // 5694
   *                                                                                                                   // 5695
   * It's only called when the url is changed from outside of angular:                                                 // 5696
   * - user types different url into address bar                                                                       // 5697
   * - user clicks on history (forward/back) button                                                                    // 5698
   * - user clicks on a link                                                                                           // 5699
   *                                                                                                                   // 5700
   * It's not called when url is changed by $browser.url() method                                                      // 5701
   *                                                                                                                   // 5702
   * The listener gets called with new url as parameter.                                                               // 5703
   *                                                                                                                   // 5704
   * NOTE: this api is intended for use only by the $location service. Please use the                                  // 5705
   * {@link ng.$location $location service} to monitor url changes in angular apps.                                    // 5706
   *                                                                                                                   // 5707
   * @param {function(string)} listener Listener function to be called when url changes.                               // 5708
   * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.                     // 5709
   */                                                                                                                  // 5710
  self.onUrlChange = function(callback) {                                                                              // 5711
    // TODO(vojta): refactor to use node's syntax for events                                                           // 5712
    if (!urlChangeInit) {                                                                                              // 5713
      // We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)                         // 5714
      // don't fire popstate when user change the address bar and don't fire hashchange when url                       // 5715
      // changed by push/replaceState                                                                                  // 5716
                                                                                                                       // 5717
      // html5 history api - popstate event                                                                            // 5718
      if ($sniffer.history) jqLite(window).on('popstate', cacheStateAndFireUrlChange);                                 // 5719
      // hashchange event                                                                                              // 5720
      jqLite(window).on('hashchange', cacheStateAndFireUrlChange);                                                     // 5721
                                                                                                                       // 5722
      urlChangeInit = true;                                                                                            // 5723
    }                                                                                                                  // 5724
                                                                                                                       // 5725
    urlChangeListeners.push(callback);                                                                                 // 5726
    return callback;                                                                                                   // 5727
  };                                                                                                                   // 5728
                                                                                                                       // 5729
  /**                                                                                                                  // 5730
   * @private                                                                                                          // 5731
   * Remove popstate and hashchange handler from window.                                                               // 5732
   *                                                                                                                   // 5733
   * NOTE: this api is intended for use only by $rootScope.                                                            // 5734
   */                                                                                                                  // 5735
  self.$$applicationDestroyed = function() {                                                                           // 5736
    jqLite(window).off('hashchange popstate', cacheStateAndFireUrlChange);                                             // 5737
  };                                                                                                                   // 5738
                                                                                                                       // 5739
  /**                                                                                                                  // 5740
   * Checks whether the url has changed outside of Angular.                                                            // 5741
   * Needs to be exported to be able to check for changes that have been done in sync,                                 // 5742
   * as hashchange/popstate events fire in async.                                                                      // 5743
   */                                                                                                                  // 5744
  self.$$checkUrlChange = fireUrlChange;                                                                               // 5745
                                                                                                                       // 5746
  //////////////////////////////////////////////////////////////                                                       // 5747
  // Misc API                                                                                                          // 5748
  //////////////////////////////////////////////////////////////                                                       // 5749
                                                                                                                       // 5750
  /**                                                                                                                  // 5751
   * @name $browser#baseHref                                                                                           // 5752
   *                                                                                                                   // 5753
   * @description                                                                                                      // 5754
   * Returns current <base href>                                                                                       // 5755
   * (always relative - without domain)                                                                                // 5756
   *                                                                                                                   // 5757
   * @returns {string} The current base href                                                                           // 5758
   */                                                                                                                  // 5759
  self.baseHref = function() {                                                                                         // 5760
    var href = baseElement.attr('href');                                                                               // 5761
    return href ? href.replace(/^(https?\:)?\/\/[^\/]*/, '') : '';                                                     // 5762
  };                                                                                                                   // 5763
                                                                                                                       // 5764
  /**                                                                                                                  // 5765
   * @name $browser#defer                                                                                              // 5766
   * @param {function()} fn A function, who's execution should be deferred.                                            // 5767
   * @param {number=} [delay=0] of milliseconds to defer the function execution.                                       // 5768
   * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.                           // 5769
   *                                                                                                                   // 5770
   * @description                                                                                                      // 5771
   * Executes a fn asynchronously via `setTimeout(fn, delay)`.                                                         // 5772
   *                                                                                                                   // 5773
   * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using                   // 5774
   * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed                      // 5775
   * via `$browser.defer.flush()`.                                                                                     // 5776
   *                                                                                                                   // 5777
   */                                                                                                                  // 5778
  self.defer = function(fn, delay) {                                                                                   // 5779
    var timeoutId;                                                                                                     // 5780
    outstandingRequestCount++;                                                                                         // 5781
    timeoutId = setTimeout(function() {                                                                                // 5782
      delete pendingDeferIds[timeoutId];                                                                               // 5783
      completeOutstandingRequest(fn);                                                                                  // 5784
    }, delay || 0);                                                                                                    // 5785
    pendingDeferIds[timeoutId] = true;                                                                                 // 5786
    return timeoutId;                                                                                                  // 5787
  };                                                                                                                   // 5788
                                                                                                                       // 5789
                                                                                                                       // 5790
  /**                                                                                                                  // 5791
   * @name $browser#defer.cancel                                                                                       // 5792
   *                                                                                                                   // 5793
   * @description                                                                                                      // 5794
   * Cancels a deferred task identified with `deferId`.                                                                // 5795
   *                                                                                                                   // 5796
   * @param {*} deferId Token returned by the `$browser.defer` function.                                               // 5797
   * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully                            // 5798
   *                    canceled.                                                                                      // 5799
   */                                                                                                                  // 5800
  self.defer.cancel = function(deferId) {                                                                              // 5801
    if (pendingDeferIds[deferId]) {                                                                                    // 5802
      delete pendingDeferIds[deferId];                                                                                 // 5803
      clearTimeout(deferId);                                                                                           // 5804
      completeOutstandingRequest(noop);                                                                                // 5805
      return true;                                                                                                     // 5806
    }                                                                                                                  // 5807
    return false;                                                                                                      // 5808
  };                                                                                                                   // 5809
                                                                                                                       // 5810
}                                                                                                                      // 5811
                                                                                                                       // 5812
function $BrowserProvider() {                                                                                          // 5813
  this.$get = ['$window', '$log', '$sniffer', '$document',                                                             // 5814
      function($window, $log, $sniffer, $document) {                                                                   // 5815
        return new Browser($window, $document, $log, $sniffer);                                                        // 5816
      }];                                                                                                              // 5817
}                                                                                                                      // 5818
                                                                                                                       // 5819
/**                                                                                                                    // 5820
 * @ngdoc service                                                                                                      // 5821
 * @name $cacheFactory                                                                                                 // 5822
 *                                                                                                                     // 5823
 * @description                                                                                                        // 5824
 * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to                               // 5825
 * them.                                                                                                               // 5826
 *                                                                                                                     // 5827
 * ```js                                                                                                               // 5828
 *                                                                                                                     // 5829
 *  var cache = $cacheFactory('cacheId');                                                                              // 5830
 *  expect($cacheFactory.get('cacheId')).toBe(cache);                                                                  // 5831
 *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();                                                      // 5832
 *                                                                                                                     // 5833
 *  cache.put("key", "value");                                                                                         // 5834
 *  cache.put("another key", "another value");                                                                         // 5835
 *                                                                                                                     // 5836
 *  // We've specified no options on creation                                                                          // 5837
 *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});                                                            // 5838
 *                                                                                                                     // 5839
 * ```                                                                                                                 // 5840
 *                                                                                                                     // 5841
 *                                                                                                                     // 5842
 * @param {string} cacheId Name or id of the newly created cache.                                                      // 5843
 * @param {object=} options Options object that specifies the cache behavior. Properties:                              // 5844
 *                                                                                                                     // 5845
 *   - `{number=}` `capacity` — turns the cache into LRU cache.                                                        // 5846
 *                                                                                                                     // 5847
 * @returns {object} Newly created cache object with the following set of methods:                                     // 5848
 *                                                                                                                     // 5849
 * - `{object}` `info()` — Returns id, size, and options of cache.                                                     // 5850
 * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns                     // 5851
 *   it.                                                                                                               // 5852
 * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.                         // 5853
 * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.                                        // 5854
 * - `{void}` `removeAll()` — Removes all cached values.                                                               // 5855
 * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.                                       // 5856
 *                                                                                                                     // 5857
 * @example                                                                                                            // 5858
   <example module="cacheExampleApp">                                                                                  // 5859
     <file name="index.html">                                                                                          // 5860
       <div ng-controller="CacheController">                                                                           // 5861
         <input ng-model="newCacheKey" placeholder="Key">                                                              // 5862
         <input ng-model="newCacheValue" placeholder="Value">                                                          // 5863
         <button ng-click="put(newCacheKey, newCacheValue)">Cache</button>                                             // 5864
                                                                                                                       // 5865
         <p ng-if="keys.length">Cached Values</p>                                                                      // 5866
         <div ng-repeat="key in keys">                                                                                 // 5867
           <span ng-bind="key"></span>                                                                                 // 5868
           <span>: </span>                                                                                             // 5869
           <b ng-bind="cache.get(key)"></b>                                                                            // 5870
         </div>                                                                                                        // 5871
                                                                                                                       // 5872
         <p>Cache Info</p>                                                                                             // 5873
         <div ng-repeat="(key, value) in cache.info()">                                                                // 5874
           <span ng-bind="key"></span>                                                                                 // 5875
           <span>: </span>                                                                                             // 5876
           <b ng-bind="value"></b>                                                                                     // 5877
         </div>                                                                                                        // 5878
       </div>                                                                                                          // 5879
     </file>                                                                                                           // 5880
     <file name="script.js">                                                                                           // 5881
       angular.module('cacheExampleApp', []).                                                                          // 5882
         controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {                   // 5883
           $scope.keys = [];                                                                                           // 5884
           $scope.cache = $cacheFactory('cacheId');                                                                    // 5885
           $scope.put = function(key, value) {                                                                         // 5886
             if (angular.isUndefined($scope.cache.get(key))) {                                                         // 5887
               $scope.keys.push(key);                                                                                  // 5888
             }                                                                                                         // 5889
             $scope.cache.put(key, angular.isUndefined(value) ? null : value);                                         // 5890
           };                                                                                                          // 5891
         }]);                                                                                                          // 5892
     </file>                                                                                                           // 5893
     <file name="style.css">                                                                                           // 5894
       p {                                                                                                             // 5895
         margin: 10px 0 3px;                                                                                           // 5896
       }                                                                                                               // 5897
     </file>                                                                                                           // 5898
   </example>                                                                                                          // 5899
 */                                                                                                                    // 5900
function $CacheFactoryProvider() {                                                                                     // 5901
                                                                                                                       // 5902
  this.$get = function() {                                                                                             // 5903
    var caches = {};                                                                                                   // 5904
                                                                                                                       // 5905
    function cacheFactory(cacheId, options) {                                                                          // 5906
      if (cacheId in caches) {                                                                                         // 5907
        throw minErr('$cacheFactory')('iid', "CacheId '{0}' is already taken!", cacheId);                              // 5908
      }                                                                                                                // 5909
                                                                                                                       // 5910
      var size = 0,                                                                                                    // 5911
          stats = extend({}, options, {id: cacheId}),                                                                  // 5912
          data = {},                                                                                                   // 5913
          capacity = (options && options.capacity) || Number.MAX_VALUE,                                                // 5914
          lruHash = {},                                                                                                // 5915
          freshEnd = null,                                                                                             // 5916
          staleEnd = null;                                                                                             // 5917
                                                                                                                       // 5918
      /**                                                                                                              // 5919
       * @ngdoc type                                                                                                   // 5920
       * @name $cacheFactory.Cache                                                                                     // 5921
       *                                                                                                               // 5922
       * @description                                                                                                  // 5923
       * A cache object used to store and retrieve data, primarily used by                                             // 5924
       * {@link $http $http} and the {@link ng.directive:script script} directive to cache                             // 5925
       * templates and other data.                                                                                     // 5926
       *                                                                                                               // 5927
       * ```js                                                                                                         // 5928
       *  angular.module('superCache')                                                                                 // 5929
       *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {                                         // 5930
       *      return $cacheFactory('super-cache');                                                                     // 5931
       *    }]);                                                                                                       // 5932
       * ```                                                                                                           // 5933
       *                                                                                                               // 5934
       * Example test:                                                                                                 // 5935
       *                                                                                                               // 5936
       * ```js                                                                                                         // 5937
       *  it('should behave like a cache', inject(function(superCache) {                                               // 5938
       *    superCache.put('key', 'value');                                                                            // 5939
       *    superCache.put('another key', 'another value');                                                            // 5940
       *                                                                                                               // 5941
       *    expect(superCache.info()).toEqual({                                                                        // 5942
       *      id: 'super-cache',                                                                                       // 5943
       *      size: 2                                                                                                  // 5944
       *    });                                                                                                        // 5945
       *                                                                                                               // 5946
       *    superCache.remove('another key');                                                                          // 5947
       *    expect(superCache.get('another key')).toBeUndefined();                                                     // 5948
       *                                                                                                               // 5949
       *    superCache.removeAll();                                                                                    // 5950
       *    expect(superCache.info()).toEqual({                                                                        // 5951
       *      id: 'super-cache',                                                                                       // 5952
       *      size: 0                                                                                                  // 5953
       *    });                                                                                                        // 5954
       *  }));                                                                                                         // 5955
       * ```                                                                                                           // 5956
       */                                                                                                              // 5957
      return caches[cacheId] = {                                                                                       // 5958
                                                                                                                       // 5959
        /**                                                                                                            // 5960
         * @ngdoc method                                                                                               // 5961
         * @name $cacheFactory.Cache#put                                                                               // 5962
         * @kind function                                                                                              // 5963
         *                                                                                                             // 5964
         * @description                                                                                                // 5965
         * Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be                               // 5966
         * retrieved later, and incrementing the size of the cache if the key was not already                          // 5967
         * present in the cache. If behaving like an LRU cache, it will also remove stale                              // 5968
         * entries from the set.                                                                                       // 5969
         *                                                                                                             // 5970
         * It will not insert undefined values into the cache.                                                         // 5971
         *                                                                                                             // 5972
         * @param {string} key the key under which the cached data is stored.                                          // 5973
         * @param {*} value the value to store alongside the key. If it is undefined, the key                          // 5974
         *    will not be stored.                                                                                      // 5975
         * @returns {*} the value stored.                                                                              // 5976
         */                                                                                                            // 5977
        put: function(key, value) {                                                                                    // 5978
          if (isUndefined(value)) return;                                                                              // 5979
          if (capacity < Number.MAX_VALUE) {                                                                           // 5980
            var lruEntry = lruHash[key] || (lruHash[key] = {key: key});                                                // 5981
                                                                                                                       // 5982
            refresh(lruEntry);                                                                                         // 5983
          }                                                                                                            // 5984
                                                                                                                       // 5985
          if (!(key in data)) size++;                                                                                  // 5986
          data[key] = value;                                                                                           // 5987
                                                                                                                       // 5988
          if (size > capacity) {                                                                                       // 5989
            this.remove(staleEnd.key);                                                                                 // 5990
          }                                                                                                            // 5991
                                                                                                                       // 5992
          return value;                                                                                                // 5993
        },                                                                                                             // 5994
                                                                                                                       // 5995
        /**                                                                                                            // 5996
         * @ngdoc method                                                                                               // 5997
         * @name $cacheFactory.Cache#get                                                                               // 5998
         * @kind function                                                                                              // 5999
         *                                                                                                             // 6000
         * @description                                                                                                // 6001
         * Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.                                // 6002
         *                                                                                                             // 6003
         * @param {string} key the key of the data to be retrieved                                                     // 6004
         * @returns {*} the value stored.                                                                              // 6005
         */                                                                                                            // 6006
        get: function(key) {                                                                                           // 6007
          if (capacity < Number.MAX_VALUE) {                                                                           // 6008
            var lruEntry = lruHash[key];                                                                               // 6009
                                                                                                                       // 6010
            if (!lruEntry) return;                                                                                     // 6011
                                                                                                                       // 6012
            refresh(lruEntry);                                                                                         // 6013
          }                                                                                                            // 6014
                                                                                                                       // 6015
          return data[key];                                                                                            // 6016
        },                                                                                                             // 6017
                                                                                                                       // 6018
                                                                                                                       // 6019
        /**                                                                                                            // 6020
         * @ngdoc method                                                                                               // 6021
         * @name $cacheFactory.Cache#remove                                                                            // 6022
         * @kind function                                                                                              // 6023
         *                                                                                                             // 6024
         * @description                                                                                                // 6025
         * Removes an entry from the {@link $cacheFactory.Cache Cache} object.                                         // 6026
         *                                                                                                             // 6027
         * @param {string} key the key of the entry to be removed                                                      // 6028
         */                                                                                                            // 6029
        remove: function(key) {                                                                                        // 6030
          if (capacity < Number.MAX_VALUE) {                                                                           // 6031
            var lruEntry = lruHash[key];                                                                               // 6032
                                                                                                                       // 6033
            if (!lruEntry) return;                                                                                     // 6034
                                                                                                                       // 6035
            if (lruEntry == freshEnd) freshEnd = lruEntry.p;                                                           // 6036
            if (lruEntry == staleEnd) staleEnd = lruEntry.n;                                                           // 6037
            link(lruEntry.n,lruEntry.p);                                                                               // 6038
                                                                                                                       // 6039
            delete lruHash[key];                                                                                       // 6040
          }                                                                                                            // 6041
                                                                                                                       // 6042
          delete data[key];                                                                                            // 6043
          size--;                                                                                                      // 6044
        },                                                                                                             // 6045
                                                                                                                       // 6046
                                                                                                                       // 6047
        /**                                                                                                            // 6048
         * @ngdoc method                                                                                               // 6049
         * @name $cacheFactory.Cache#removeAll                                                                         // 6050
         * @kind function                                                                                              // 6051
         *                                                                                                             // 6052
         * @description                                                                                                // 6053
         * Clears the cache object of any entries.                                                                     // 6054
         */                                                                                                            // 6055
        removeAll: function() {                                                                                        // 6056
          data = {};                                                                                                   // 6057
          size = 0;                                                                                                    // 6058
          lruHash = {};                                                                                                // 6059
          freshEnd = staleEnd = null;                                                                                  // 6060
        },                                                                                                             // 6061
                                                                                                                       // 6062
                                                                                                                       // 6063
        /**                                                                                                            // 6064
         * @ngdoc method                                                                                               // 6065
         * @name $cacheFactory.Cache#destroy                                                                           // 6066
         * @kind function                                                                                              // 6067
         *                                                                                                             // 6068
         * @description                                                                                                // 6069
         * Destroys the {@link $cacheFactory.Cache Cache} object entirely,                                             // 6070
         * removing it from the {@link $cacheFactory $cacheFactory} set.                                               // 6071
         */                                                                                                            // 6072
        destroy: function() {                                                                                          // 6073
          data = null;                                                                                                 // 6074
          stats = null;                                                                                                // 6075
          lruHash = null;                                                                                              // 6076
          delete caches[cacheId];                                                                                      // 6077
        },                                                                                                             // 6078
                                                                                                                       // 6079
                                                                                                                       // 6080
        /**                                                                                                            // 6081
         * @ngdoc method                                                                                               // 6082
         * @name $cacheFactory.Cache#info                                                                              // 6083
         * @kind function                                                                                              // 6084
         *                                                                                                             // 6085
         * @description                                                                                                // 6086
         * Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.                              // 6087
         *                                                                                                             // 6088
         * @returns {object} an object with the following properties:                                                  // 6089
         *   <ul>                                                                                                      // 6090
         *     <li>**id**: the id of the cache instance</li>                                                           // 6091
         *     <li>**size**: the number of entries kept in the cache instance</li>                                     // 6092
         *     <li>**...**: any additional properties from the options object when creating the                        // 6093
         *       cache.</li>                                                                                           // 6094
         *   </ul>                                                                                                     // 6095
         */                                                                                                            // 6096
        info: function() {                                                                                             // 6097
          return extend({}, stats, {size: size});                                                                      // 6098
        }                                                                                                              // 6099
      };                                                                                                               // 6100
                                                                                                                       // 6101
                                                                                                                       // 6102
      /**                                                                                                              // 6103
       * makes the `entry` the freshEnd of the LRU linked list                                                         // 6104
       */                                                                                                              // 6105
      function refresh(entry) {                                                                                        // 6106
        if (entry != freshEnd) {                                                                                       // 6107
          if (!staleEnd) {                                                                                             // 6108
            staleEnd = entry;                                                                                          // 6109
          } else if (staleEnd == entry) {                                                                              // 6110
            staleEnd = entry.n;                                                                                        // 6111
          }                                                                                                            // 6112
                                                                                                                       // 6113
          link(entry.n, entry.p);                                                                                      // 6114
          link(entry, freshEnd);                                                                                       // 6115
          freshEnd = entry;                                                                                            // 6116
          freshEnd.n = null;                                                                                           // 6117
        }                                                                                                              // 6118
      }                                                                                                                // 6119
                                                                                                                       // 6120
                                                                                                                       // 6121
      /**                                                                                                              // 6122
       * bidirectionally links two entries of the LRU linked list                                                      // 6123
       */                                                                                                              // 6124
      function link(nextEntry, prevEntry) {                                                                            // 6125
        if (nextEntry != prevEntry) {                                                                                  // 6126
          if (nextEntry) nextEntry.p = prevEntry; //p stands for previous, 'prev' didn't minify                        // 6127
          if (prevEntry) prevEntry.n = nextEntry; //n stands for next, 'next' didn't minify                            // 6128
        }                                                                                                              // 6129
      }                                                                                                                // 6130
    }                                                                                                                  // 6131
                                                                                                                       // 6132
                                                                                                                       // 6133
  /**                                                                                                                  // 6134
   * @ngdoc method                                                                                                     // 6135
   * @name $cacheFactory#info                                                                                          // 6136
   *                                                                                                                   // 6137
   * @description                                                                                                      // 6138
   * Get information about all the caches that have been created                                                       // 6139
   *                                                                                                                   // 6140
   * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`                              // 6141
   */                                                                                                                  // 6142
    cacheFactory.info = function() {                                                                                   // 6143
      var info = {};                                                                                                   // 6144
      forEach(caches, function(cache, cacheId) {                                                                       // 6145
        info[cacheId] = cache.info();                                                                                  // 6146
      });                                                                                                              // 6147
      return info;                                                                                                     // 6148
    };                                                                                                                 // 6149
                                                                                                                       // 6150
                                                                                                                       // 6151
  /**                                                                                                                  // 6152
   * @ngdoc method                                                                                                     // 6153
   * @name $cacheFactory#get                                                                                           // 6154
   *                                                                                                                   // 6155
   * @description                                                                                                      // 6156
   * Get access to a cache object by the `cacheId` used when it was created.                                           // 6157
   *                                                                                                                   // 6158
   * @param {string} cacheId Name or id of a cache to access.                                                          // 6159
   * @returns {object} Cache object identified by the cacheId or undefined if no such cache.                           // 6160
   */                                                                                                                  // 6161
    cacheFactory.get = function(cacheId) {                                                                             // 6162
      return caches[cacheId];                                                                                          // 6163
    };                                                                                                                 // 6164
                                                                                                                       // 6165
                                                                                                                       // 6166
    return cacheFactory;                                                                                               // 6167
  };                                                                                                                   // 6168
}                                                                                                                      // 6169
                                                                                                                       // 6170
/**                                                                                                                    // 6171
 * @ngdoc service                                                                                                      // 6172
 * @name $templateCache                                                                                                // 6173
 *                                                                                                                     // 6174
 * @description                                                                                                        // 6175
 * The first time a template is used, it is loaded in the template cache for quick retrieval. You                      // 6176
 * can load templates directly into the cache in a `script` tag, or by consuming the                                   // 6177
 * `$templateCache` service directly.                                                                                  // 6178
 *                                                                                                                     // 6179
 * Adding via the `script` tag:                                                                                        // 6180
 *                                                                                                                     // 6181
 * ```html                                                                                                             // 6182
 *   <script type="text/ng-template" id="templateId.html">                                                             // 6183
 *     <p>This is the content of the template</p>                                                                      // 6184
 *   </script>                                                                                                         // 6185
 * ```                                                                                                                 // 6186
 *                                                                                                                     // 6187
 * **Note:** the `script` tag containing the template does not need to be included in the `head` of                    // 6188
 * the document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (IE,                          // 6189
 * element with ng-app attribute), otherwise the template will be ignored.                                             // 6190
 *                                                                                                                     // 6191
 * Adding via the `$templateCache` service:                                                                            // 6192
 *                                                                                                                     // 6193
 * ```js                                                                                                               // 6194
 * var myApp = angular.module('myApp', []);                                                                            // 6195
 * myApp.run(function($templateCache) {                                                                                // 6196
 *   $templateCache.put('templateId.html', 'This is the content of the template');                                     // 6197
 * });                                                                                                                 // 6198
 * ```                                                                                                                 // 6199
 *                                                                                                                     // 6200
 * To retrieve the template later, simply use it in your HTML:                                                         // 6201
 * ```html                                                                                                             // 6202
 * <div ng-include=" 'templateId.html' "></div>                                                                        // 6203
 * ```                                                                                                                 // 6204
 *                                                                                                                     // 6205
 * or get it via Javascript:                                                                                           // 6206
 * ```js                                                                                                               // 6207
 * $templateCache.get('templateId.html')                                                                               // 6208
 * ```                                                                                                                 // 6209
 *                                                                                                                     // 6210
 * See {@link ng.$cacheFactory $cacheFactory}.                                                                         // 6211
 *                                                                                                                     // 6212
 */                                                                                                                    // 6213
function $TemplateCacheProvider() {                                                                                    // 6214
  this.$get = ['$cacheFactory', function($cacheFactory) {                                                              // 6215
    return $cacheFactory('templates');                                                                                 // 6216
  }];                                                                                                                  // 6217
}                                                                                                                      // 6218
                                                                                                                       // 6219
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                           // 6220
 *     Any commits to this file should be reviewed with security in mind.  *                                           // 6221
 *   Changes to this file can potentially create security vulnerabilities. *                                           // 6222
 *          An approval from 2 Core members with history of modifying      *                                           // 6223
 *                         this file is required.                          *                                           // 6224
 *                                                                         *                                           // 6225
 *  Does the change somehow allow for arbitrary javascript to be executed? *                                           // 6226
 *    Or allows for someone to change the prototype of built-in objects?   *                                           // 6227
 *     Or gives undesired access to variables likes document or window?    *                                           // 6228
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */                                          // 6229
                                                                                                                       // 6230
/* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!                                                     // 6231
 *                                                                                                                     // 6232
 * DOM-related variables:                                                                                              // 6233
 *                                                                                                                     // 6234
 * - "node" - DOM Node                                                                                                 // 6235
 * - "element" - DOM Element or Node                                                                                   // 6236
 * - "$node" or "$element" - jqLite-wrapped node or element                                                            // 6237
 *                                                                                                                     // 6238
 *                                                                                                                     // 6239
 * Compiler related stuff:                                                                                             // 6240
 *                                                                                                                     // 6241
 * - "linkFn" - linking fn of a single directive                                                                       // 6242
 * - "nodeLinkFn" - function that aggregates all linking fns for a particular node                                     // 6243
 * - "childLinkFn" -  function that aggregates all linking fns for child nodes of a particular node                    // 6244
 * - "compositeLinkFn" - function that aggregates all linking fns for a compilation root (nodeList)                    // 6245
 */                                                                                                                    // 6246
                                                                                                                       // 6247
                                                                                                                       // 6248
/**                                                                                                                    // 6249
 * @ngdoc service                                                                                                      // 6250
 * @name $compile                                                                                                      // 6251
 * @kind function                                                                                                      // 6252
 *                                                                                                                     // 6253
 * @description                                                                                                        // 6254
 * Compiles an HTML string or DOM into a template and produces a template function, which                              // 6255
 * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.                             // 6256
 *                                                                                                                     // 6257
 * The compilation is a process of walking the DOM tree and matching DOM elements to                                   // 6258
 * {@link ng.$compileProvider#directive directives}.                                                                   // 6259
 *                                                                                                                     // 6260
 * <div class="alert alert-warning">                                                                                   // 6261
 * **Note:** This document is an in-depth reference of all directive options.                                          // 6262
 * For a gentle introduction to directives with examples of common use cases,                                          // 6263
 * see the {@link guide/directive directive guide}.                                                                    // 6264
 * </div>                                                                                                              // 6265
 *                                                                                                                     // 6266
 * ## Comprehensive Directive API                                                                                      // 6267
 *                                                                                                                     // 6268
 * There are many different options for a directive.                                                                   // 6269
 *                                                                                                                     // 6270
 * The difference resides in the return value of the factory function.                                                 // 6271
 * You can either return a "Directive Definition Object" (see below) that defines the directive properties,            // 6272
 * or just the `postLink` function (all other properties will have the default values).                                // 6273
 *                                                                                                                     // 6274
 * <div class="alert alert-success">                                                                                   // 6275
 * **Best Practice:** It's recommended to use the "directive definition object" form.                                  // 6276
 * </div>                                                                                                              // 6277
 *                                                                                                                     // 6278
 * Here's an example directive declared with a Directive Definition Object:                                            // 6279
 *                                                                                                                     // 6280
 * ```js                                                                                                               // 6281
 *   var myModule = angular.module(...);                                                                               // 6282
 *                                                                                                                     // 6283
 *   myModule.directive('directiveName', function factory(injectables) {                                               // 6284
 *     var directiveDefinitionObject = {                                                                               // 6285
 *       priority: 0,                                                                                                  // 6286
 *       template: '<div></div>', // or // function(tElement, tAttrs) { ... },                                         // 6287
 *       // or                                                                                                         // 6288
 *       // templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },                                // 6289
 *       transclude: false,                                                                                            // 6290
 *       restrict: 'A',                                                                                                // 6291
 *       templateNamespace: 'html',                                                                                    // 6292
 *       scope: false,                                                                                                 // 6293
 *       controller: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },                        // 6294
 *       controllerAs: 'stringIdentifier',                                                                             // 6295
 *       bindToController: false,                                                                                      // 6296
 *       require: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],
 *       compile: function compile(tElement, tAttrs, transclude) {                                                     // 6298
 *         return {                                                                                                    // 6299
 *           pre: function preLink(scope, iElement, iAttrs, controller) { ... },                                       // 6300
 *           post: function postLink(scope, iElement, iAttrs, controller) { ... }                                      // 6301
 *         }                                                                                                           // 6302
 *         // or                                                                                                       // 6303
 *         // return function postLink( ... ) { ... }                                                                  // 6304
 *       },                                                                                                            // 6305
 *       // or                                                                                                         // 6306
 *       // link: {                                                                                                    // 6307
 *       //  pre: function preLink(scope, iElement, iAttrs, controller) { ... },                                       // 6308
 *       //  post: function postLink(scope, iElement, iAttrs, controller) { ... }                                      // 6309
 *       // }                                                                                                          // 6310
 *       // or                                                                                                         // 6311
 *       // link: function postLink( ... ) { ... }                                                                     // 6312
 *     };                                                                                                              // 6313
 *     return directiveDefinitionObject;                                                                               // 6314
 *   });                                                                                                               // 6315
 * ```                                                                                                                 // 6316
 *                                                                                                                     // 6317
 * <div class="alert alert-warning">                                                                                   // 6318
 * **Note:** Any unspecified options will use the default value. You can see the default values below.                 // 6319
 * </div>                                                                                                              // 6320
 *                                                                                                                     // 6321
 * Therefore the above can be simplified as:                                                                           // 6322
 *                                                                                                                     // 6323
 * ```js                                                                                                               // 6324
 *   var myModule = angular.module(...);                                                                               // 6325
 *                                                                                                                     // 6326
 *   myModule.directive('directiveName', function factory(injectables) {                                               // 6327
 *     var directiveDefinitionObject = {                                                                               // 6328
 *       link: function postLink(scope, iElement, iAttrs) { ... }                                                      // 6329
 *     };                                                                                                              // 6330
 *     return directiveDefinitionObject;                                                                               // 6331
 *     // or                                                                                                           // 6332
 *     // return function postLink(scope, iElement, iAttrs) { ... }                                                    // 6333
 *   });                                                                                                               // 6334
 * ```                                                                                                                 // 6335
 *                                                                                                                     // 6336
 *                                                                                                                     // 6337
 *                                                                                                                     // 6338
 * ### Directive Definition Object                                                                                     // 6339
 *                                                                                                                     // 6340
 * The directive definition object provides instructions to the {@link ng.$compile                                     // 6341
 * compiler}. The attributes are:                                                                                      // 6342
 *                                                                                                                     // 6343
 * #### `multiElement`                                                                                                 // 6344
 * When this property is set to true, the HTML compiler will collect DOM nodes between                                 // 6345
 * nodes with the attributes `directive-name-start` and `directive-name-end`, and group them                           // 6346
 * together as the directive elements. It is recommended that this feature be used on directives                       // 6347
 * which are not strictly behavioural (such as {@link ngClick}), and which                                             // 6348
 * do not manipulate or replace child nodes (such as {@link ngInclude}).                                               // 6349
 *                                                                                                                     // 6350
 * #### `priority`                                                                                                     // 6351
 * When there are multiple directives defined on a single DOM element, sometimes it                                    // 6352
 * is necessary to specify the order in which the directives are applied. The `priority` is used                       // 6353
 * to sort the directives before their `compile` functions get called. Priority is defined as a                        // 6354
 * number. Directives with greater numerical `priority` are compiled first. Pre-link functions                         // 6355
 * are also run in priority order, but post-link functions are run in reverse order. The order                         // 6356
 * of directives with the same priority is undefined. The default priority is `0`.                                     // 6357
 *                                                                                                                     // 6358
 * #### `terminal`                                                                                                     // 6359
 * If set to true then the current `priority` will be the last set of directives                                       // 6360
 * which will execute (any directives at the current priority will still execute                                       // 6361
 * as the order of execution on same `priority` is undefined). Note that expressions                                   // 6362
 * and other directives used in the directive's template will also be excluded from execution.                         // 6363
 *                                                                                                                     // 6364
 * #### `scope`                                                                                                        // 6365
 * The scope property can be `true`, an object or a falsy value:                                                       // 6366
 *                                                                                                                     // 6367
 * * **falsy:** No scope will be created for the directive. The directive will use its parent's scope.                 // 6368
 *                                                                                                                     // 6369
 * * **`true`:** A new child scope that prototypically inherits from its parent will be created for                    // 6370
 * the directive's element. If multiple directives on the same element request a new scope,                            // 6371
 * only one new scope is created. The new scope rule does not apply for the root of the template                       // 6372
 * since the root of the template always gets a new scope.                                                             // 6373
 *                                                                                                                     // 6374
 * * **`{...}` (an object hash):** A new "isolate" scope is created for the directive's element. The                   // 6375
 * 'isolate' scope differs from normal scope in that it does not prototypically inherit from its parent                // 6376
 * scope. This is useful when creating reusable components, which should not accidentally read or modify               // 6377
 * data in the parent scope.                                                                                           // 6378
 *                                                                                                                     // 6379
 * The 'isolate' scope object hash defines a set of local scope properties derived from attributes on the              // 6380
 * directive's element. These local properties are useful for aliasing values for templates. The keys in               // 6381
 * the object hash map to the name of the property on the isolate scope; the values define how the property            // 6382
 * is bound to the parent scope, via matching attributes on the directive's element:                                   // 6383
 *                                                                                                                     // 6384
 * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is                         // 6385
 *   always a string since DOM attributes are strings. If no `attr` name is specified  then the                        // 6386
 *   attribute name is assumed to be the same as the local name.                                                       // 6387
 *   Given `<widget my-attr="hello {{name}}">` and widget definition                                                   // 6388
 *   of `scope: { localName:'@myAttr' }`, then widget scope property `localName` will reflect                          // 6389
 *   the interpolated value of `hello {{name}}`. As the `name` attribute changes so will the                           // 6390
 *   `localName` property on the widget scope. The `name` is read from the parent scope (not                           // 6391
 *   component scope).                                                                                                 // 6392
 *                                                                                                                     // 6393
 * * `=` or `=attr` - set up bi-directional binding between a local scope property and the                             // 6394
 *   parent scope property of name defined via the value of the `attr` attribute. If no `attr`                         // 6395
 *   name is specified then the attribute name is assumed to be the same as the local name.                            // 6396
 *   Given `<widget my-attr="parentModel">` and widget definition of                                                   // 6397
 *   `scope: { localModel:'=myAttr' }`, then widget scope property `localModel` will reflect the                       // 6398
 *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected                        // 6399
 *   in `localModel` and any changes in `localModel` will reflect in `parentModel`. If the parent                      // 6400
 *   scope property doesn't exist, it will throw a NON_ASSIGNABLE_MODEL_EXPRESSION exception. You                      // 6401
 *   can avoid this behavior using `=?` or `=?attr` in order to flag the property as optional. If                      // 6402
 *   you want to shallow watch for changes (i.e. $watchCollection instead of $watch) you can use                       // 6403
 *   `=*` or `=*attr` (`=*?` or `=*?attr` if the property is optional).                                                // 6404
 *                                                                                                                     // 6405
 * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope.                      // 6406
 *   If no `attr` name is specified then the attribute name is assumed to be the same as the                           // 6407
 *   local name. Given `<widget my-attr="count = count + value">` and widget definition of                             // 6408
 *   `scope: { localFn:'&myAttr' }`, then isolate scope property `localFn` will point to                               // 6409
 *   a function wrapper for the `count = count + value` expression. Often it's desirable to                            // 6410
 *   pass data from the isolated scope via an expression to the parent scope, this can be                              // 6411
 *   done by passing a map of local variable names and values into the expression wrapper fn.                          // 6412
 *   For example, if the expression is `increment(amount)` then we can specify the amount value                        // 6413
 *   by calling the `localFn` as `localFn({amount: 22})`.                                                              // 6414
 *                                                                                                                     // 6415
 * In general it's possible to apply more than one directive to one element, but there might be limitations            // 6416
 * depending on the type of scope required by the directives. The following points will help explain these limitations.
 * For simplicity only two directives are taken into account, but it is also applicable for several directives:        // 6418
 *                                                                                                                     // 6419
 * * **no scope** + **no scope** => Two directives which don't require their own scope will use their parent's scope   // 6420
 * * **child scope** + **no scope** =>  Both directives will share one single child scope                              // 6421
 * * **child scope** + **child scope** =>  Both directives will share one single child scope                           // 6422
 * * **isolated scope** + **no scope** =>  The isolated directive will use it's own created isolated scope. The other directive will use
 * its parent's scope                                                                                                  // 6424
 * * **isolated scope** + **child scope** =>  **Won't work!** Only one scope can be related to one element. Therefore these directives cannot
 * be applied to the same element.                                                                                     // 6426
 * * **isolated scope** + **isolated scope**  =>  **Won't work!** Only one scope can be related to one element. Therefore these directives
 * cannot be applied to the same element.                                                                              // 6428
 *                                                                                                                     // 6429
 *                                                                                                                     // 6430
 * #### `bindToController`                                                                                             // 6431
 * When an isolate scope is used for a component (see above), and `controllerAs` is used, `bindToController: true` will
 * allow a component to have its properties bound to the controller, rather than to scope. When the controller         // 6433
 * is instantiated, the initial values of the isolate scope bindings are already available.                            // 6434
 *                                                                                                                     // 6435
 * #### `controller`                                                                                                   // 6436
 * Controller constructor function. The controller is instantiated before the                                          // 6437
 * pre-linking phase and can be accessed by other directives (see                                                      // 6438
 * `require` attribute). This allows the directives to communicate with each other and augment                         // 6439
 * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:      // 6440
 *                                                                                                                     // 6441
 * * `$scope` - Current scope associated with the element                                                              // 6442
 * * `$element` - Current element                                                                                      // 6443
 * * `$attrs` - Current attributes object for the element                                                              // 6444
 * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope:                        // 6445
 *   `function([scope], cloneLinkingFn, futureParentElement)`.                                                         // 6446
 *    * `scope`: optional argument to override the scope.                                                              // 6447
 *    * `cloneLinkingFn`: optional argument to create clones of the original transcluded content.                      // 6448
 *    * `futureParentElement`:                                                                                         // 6449
 *        * defines the parent to which the `cloneLinkingFn` will add the cloned elements.                             // 6450
 *        * default: `$element.parent()` resp. `$element` for `transclude:'element'` resp. `transclude:true`.          // 6451
 *        * only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements)              // 6452
 *          and when the `cloneLinkinFn` is passed,                                                                    // 6453
 *          as those elements need to created and cloned in a special way when they are defined outside their          // 6454
 *          usual containers (e.g. like `<svg>`).                                                                      // 6455
 *        * See also the `directive.templateNamespace` property.                                                       // 6456
 *                                                                                                                     // 6457
 *                                                                                                                     // 6458
 * #### `require`                                                                                                      // 6459
 * Require another directive and inject its controller as the fourth argument to the linking function. The             // 6460
 * `require` takes a string name (or array of strings) of the directive(s) to pass in. If an array is used, the        // 6461
 * injected argument will be an array in corresponding order. If no such directive can be                              // 6462
 * found, or if the directive does not have a controller, then an error is raised (unless no link function             // 6463
 * is specified, in which case error checking is skipped). The name can be prefixed with:                              // 6464
 *                                                                                                                     // 6465
 * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.                 // 6466
 * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.                     // 6467
 * * `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.       // 6468
 * * `^^` - Locate the required controller by searching the element's parents. Throw an error if not found.            // 6469
 * * `?^` - Attempt to locate the required controller by searching the element and its parents or pass                 // 6470
 *   `null` to the `link` fn if not found.                                                                             // 6471
 * * `?^^` - Attempt to locate the required controller by searching the element's parents, or pass                     // 6472
 *   `null` to the `link` fn if not found.                                                                             // 6473
 *                                                                                                                     // 6474
 *                                                                                                                     // 6475
 * #### `controllerAs`                                                                                                 // 6476
 * Identifier name for a reference to the controller in the directive's scope.                                         // 6477
 * This allows the controller to be referenced from the directive template. This is especially                         // 6478
 * useful when a directive is used as component, i.e. with an `isolate` scope. It's also possible                      // 6479
 * to use it in a directive without an `isolate` / `new` scope, but you need to be aware that the                      // 6480
 * `controllerAs` reference might overwrite a property that already exists on the parent scope.                        // 6481
 *                                                                                                                     // 6482
 *                                                                                                                     // 6483
 * #### `restrict`                                                                                                     // 6484
 * String of subset of `EACM` which restricts the directive to a specific directive                                    // 6485
 * declaration style. If omitted, the defaults (elements and attributes) are used.                                     // 6486
 *                                                                                                                     // 6487
 * * `E` - Element name (default): `<my-directive></my-directive>`                                                     // 6488
 * * `A` - Attribute (default): `<div my-directive="exp"></div>`                                                       // 6489
 * * `C` - Class: `<div class="my-directive: exp;"></div>`                                                             // 6490
 * * `M` - Comment: `<!-- directive: my-directive exp -->`                                                             // 6491
 *                                                                                                                     // 6492
 *                                                                                                                     // 6493
 * #### `templateNamespace`                                                                                            // 6494
 * String representing the document type used by the markup in the template.                                           // 6495
 * AngularJS needs this information as those elements need to be created and cloned                                    // 6496
 * in a special way when they are defined outside their usual containers like `<svg>` and `<math>`.                    // 6497
 *                                                                                                                     // 6498
 * * `html` - All root nodes in the template are HTML. Root nodes may also be                                          // 6499
 *   top-level elements such as `<svg>` or `<math>`.                                                                   // 6500
 * * `svg` - The root nodes in the template are SVG elements (excluding `<math>`).                                     // 6501
 * * `math` - The root nodes in the template are MathML elements (excluding `<svg>`).                                  // 6502
 *                                                                                                                     // 6503
 * If no `templateNamespace` is specified, then the namespace is considered to be `html`.                              // 6504
 *                                                                                                                     // 6505
 * #### `template`                                                                                                     // 6506
 * HTML markup that may:                                                                                               // 6507
 * * Replace the contents of the directive's element (default).                                                        // 6508
 * * Replace the directive's element itself (if `replace` is true - DEPRECATED).                                       // 6509
 * * Wrap the contents of the directive's element (if `transclude` is true).                                           // 6510
 *                                                                                                                     // 6511
 * Value may be:                                                                                                       // 6512
 *                                                                                                                     // 6513
 * * A string. For example `<div red-on-hover>{{delete_str}}</div>`.                                                   // 6514
 * * A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`                          // 6515
 *   function api below) and returns a string value.                                                                   // 6516
 *                                                                                                                     // 6517
 *                                                                                                                     // 6518
 * #### `templateUrl`                                                                                                  // 6519
 * This is similar to `template` but the template is loaded from the specified URL, asynchronously.                    // 6520
 *                                                                                                                     // 6521
 * Because template loading is asynchronous the compiler will suspend compilation of directives on that element        // 6522
 * for later when the template has been resolved.  In the meantime it will continue to compile and link                // 6523
 * sibling and parent elements as though this element had not contained any directives.                                // 6524
 *                                                                                                                     // 6525
 * The compiler does not suspend the entire compilation to wait for templates to be loaded because this                // 6526
 * would result in the whole app "stalling" until all templates are loaded asynchronously - even in the                // 6527
 * case when only one deeply nested directive has `templateUrl`.                                                       // 6528
 *                                                                                                                     // 6529
 * Template loading is asynchronous even if the template has been preloaded into the {@link $templateCache}            // 6530
 *                                                                                                                     // 6531
 * You can specify `templateUrl` as a string representing the URL or as a function which takes two                     // 6532
 * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns                       // 6533
 * a string value representing the url.  In either case, the template URL is passed through {@link                     // 6534
 * $sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.                                                             // 6535
 *                                                                                                                     // 6536
 *                                                                                                                     // 6537
 * #### `replace` ([*DEPRECATED*!], will be removed in next major release - i.e. v2.0)                                 // 6538
 * specify what the template should replace. Defaults to `false`.                                                      // 6539
 *                                                                                                                     // 6540
 * * `true` - the template will replace the directive's element.                                                       // 6541
 * * `false` - the template will replace the contents of the directive's element.                                      // 6542
 *                                                                                                                     // 6543
 * The replacement process migrates all of the attributes / classes from the old element to the new                    // 6544
 * one. See the {@link guide/directive#template-expanding-directive                                                    // 6545
 * Directives Guide} for an example.                                                                                   // 6546
 *                                                                                                                     // 6547
 * There are very few scenarios where element replacement is required for the application function,                    // 6548
 * the main one being reusable custom components that are used within SVG contexts                                     // 6549
 * (because SVG doesn't work with custom elements in the DOM tree).                                                    // 6550
 *                                                                                                                     // 6551
 * #### `transclude`                                                                                                   // 6552
 * Extract the contents of the element where the directive appears and make it available to the directive.             // 6553
 * The contents are compiled and provided to the directive as a **transclusion function**. See the                     // 6554
 * {@link $compile#transclusion Transclusion} section below.                                                           // 6555
 *                                                                                                                     // 6556
 * There are two kinds of transclusion depending upon whether you want to transclude just the contents of the          // 6557
 * directive's element or the entire element:                                                                          // 6558
 *                                                                                                                     // 6559
 * * `true` - transclude the content (i.e. the child nodes) of the directive's element.                                // 6560
 * * `'element'` - transclude the whole of the directive's element including any directives on this                    // 6561
 *   element that defined at a lower priority than this directive. When used, the `template`                           // 6562
 *   property is ignored.                                                                                              // 6563
 *                                                                                                                     // 6564
 *                                                                                                                     // 6565
 * #### `compile`                                                                                                      // 6566
 *                                                                                                                     // 6567
 * ```js                                                                                                               // 6568
 *   function compile(tElement, tAttrs, transclude) { ... }                                                            // 6569
 * ```                                                                                                                 // 6570
 *                                                                                                                     // 6571
 * The compile function deals with transforming the template DOM. Since most directives do not do                      // 6572
 * template transformation, it is not used often. The compile function takes the following arguments:                  // 6573
 *                                                                                                                     // 6574
 *   * `tElement` - template element - The element where the directive has been declared. It is                        // 6575
 *     safe to do template transformation on the element and child elements only.                                      // 6576
 *                                                                                                                     // 6577
 *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared                  // 6578
 *     between all directive compile functions.                                                                        // 6579
 *                                                                                                                     // 6580
 *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`                // 6581
 *                                                                                                                     // 6582
 * <div class="alert alert-warning">                                                                                   // 6583
 * **Note:** The template instance and the link instance may be different objects if the template has                  // 6584
 * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that                  // 6585
 * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration                  // 6586
 * should be done in a linking function rather than in a compile function.                                             // 6587
 * </div>                                                                                                              // 6588
                                                                                                                       // 6589
 * <div class="alert alert-warning">                                                                                   // 6590
 * **Note:** The compile function cannot handle directives that recursively use themselves in their                    // 6591
 * own templates or compile functions. Compiling these directives results in an infinite loop and a                    // 6592
 * stack overflow errors.                                                                                              // 6593
 *                                                                                                                     // 6594
 * This can be avoided by manually using $compile in the postLink function to imperatively compile                     // 6595
 * a directive's template instead of relying on automatic template compilation via `template` or                       // 6596
 * `templateUrl` declaration or manual compilation inside the compile function.                                        // 6597
 * </div>                                                                                                              // 6598
 *                                                                                                                     // 6599
 * <div class="alert alert-danger">                                                                                    // 6600
 * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it                     // 6601
 *   e.g. does not know about the right outer scope. Please use the transclude function that is passed                 // 6602
 *   to the link function instead.                                                                                     // 6603
 * </div>                                                                                                              // 6604
                                                                                                                       // 6605
 * A compile function can have a return value which can be either a function or an object.                             // 6606
 *                                                                                                                     // 6607
 * * returning a (post-link) function - is equivalent to registering the linking function via the                      // 6608
 *   `link` property of the config object when the compile function is empty.                                          // 6609
 *                                                                                                                     // 6610
 * * returning an object with function(s) registered via `pre` and `post` properties - allows you to                   // 6611
 *   control when a linking function should be called during the linking phase. See info about                         // 6612
 *   pre-linking and post-linking functions below.                                                                     // 6613
 *                                                                                                                     // 6614
 *                                                                                                                     // 6615
 * #### `link`                                                                                                         // 6616
 * This property is used only if the `compile` property is not defined.                                                // 6617
 *                                                                                                                     // 6618
 * ```js                                                                                                               // 6619
 *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }                                          // 6620
 * ```                                                                                                                 // 6621
 *                                                                                                                     // 6622
 * The link function is responsible for registering DOM listeners as well as updating the DOM. It is                   // 6623
 * executed after the template has been cloned. This is where most of the directive logic will be                      // 6624
 * put.                                                                                                                // 6625
 *                                                                                                                     // 6626
 *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the                                       // 6627
 *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.                                           // 6628
 *                                                                                                                     // 6629
 *   * `iElement` - instance element - The element where the directive is to be used. It is safe to                    // 6630
 *     manipulate the children of the element only in `postLink` function since the children have                      // 6631
 *     already been linked.                                                                                            // 6632
 *                                                                                                                     // 6633
 *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared                  // 6634
 *     between all directive linking functions.                                                                        // 6635
 *                                                                                                                     // 6636
 *   * `controller` - the directive's required controller instance(s) - Instances are shared                           // 6637
 *     among all directives, which allows the directives to use the controllers as a communication                     // 6638
 *     channel. The exact value depends on the directive's `require` property:                                         // 6639
 *       * no controller(s) required: the directive's own controller, or `undefined` if it doesn't have one            // 6640
 *       * `string`: the controller instance                                                                           // 6641
 *       * `array`: array of controller instances                                                                      // 6642
 *                                                                                                                     // 6643
 *     If a required controller cannot be found, and it is optional, the instance is `null`,                           // 6644
 *     otherwise the {@link error:$compile:ctreq Missing Required Controller} error is thrown.                         // 6645
 *                                                                                                                     // 6646
 *     Note that you can also require the directive's own controller - it will be made available like                  // 6647
 *     any other controller.                                                                                           // 6648
 *                                                                                                                     // 6649
 *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.                     // 6650
 *     This is the same as the `$transclude`                                                                           // 6651
 *     parameter of directive controllers, see there for details.                                                      // 6652
 *     `function([scope], cloneLinkingFn, futureParentElement)`.                                                       // 6653
 *                                                                                                                     // 6654
 * #### Pre-linking function                                                                                           // 6655
 *                                                                                                                     // 6656
 * Executed before the child elements are linked. Not safe to do DOM transformation since the                          // 6657
 * compiler linking function will fail to locate the correct elements for linking.                                     // 6658
 *                                                                                                                     // 6659
 * #### Post-linking function                                                                                          // 6660
 *                                                                                                                     // 6661
 * Executed after the child elements are linked.                                                                       // 6662
 *                                                                                                                     // 6663
 * Note that child elements that contain `templateUrl` directives will not have been compiled                          // 6664
 * and linked since they are waiting for their template to load asynchronously and their own                           // 6665
 * compilation and linking has been suspended until that occurs.                                                       // 6666
 *                                                                                                                     // 6667
 * It is safe to do DOM transformation in the post-linking function on elements that are not waiting                   // 6668
 * for their async templates to be resolved.                                                                           // 6669
 *                                                                                                                     // 6670
 *                                                                                                                     // 6671
 * ### Transclusion                                                                                                    // 6672
 *                                                                                                                     // 6673
 * Transclusion is the process of extracting a collection of DOM elements from one part of the DOM and                 // 6674
 * copying them to another part of the DOM, while maintaining their connection to the original AngularJS               // 6675
 * scope from where they were taken.                                                                                   // 6676
 *                                                                                                                     // 6677
 * Transclusion is used (often with {@link ngTransclude}) to insert the                                                // 6678
 * original contents of a directive's element into a specified place in the template of the directive.                 // 6679
 * The benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded                  // 6680
 * content has access to the properties on the scope from which it was taken, even if the directive                    // 6681
 * has isolated scope.                                                                                                 // 6682
 * See the {@link guide/directive#creating-a-directive-that-wraps-other-elements Directives Guide}.                    // 6683
 *                                                                                                                     // 6684
 * This makes it possible for the widget to have private state for its template, while the transcluded                 // 6685
 * content has access to its originating scope.                                                                        // 6686
 *                                                                                                                     // 6687
 * <div class="alert alert-warning">                                                                                   // 6688
 * **Note:** When testing an element transclude directive you must not place the directive at the root of the          // 6689
 * DOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives                  // 6690
 * Testing Transclusion Directives}.                                                                                   // 6691
 * </div>                                                                                                              // 6692
 *                                                                                                                     // 6693
 * #### Transclusion Functions                                                                                         // 6694
 *                                                                                                                     // 6695
 * When a directive requests transclusion, the compiler extracts its contents and provides a **transclusion            // 6696
 * function** to the directive's `link` function and `controller`. This transclusion function is a special             // 6697
 * **linking function** that will return the compiled contents linked to a new transclusion scope.                     // 6698
 *                                                                                                                     // 6699
 * <div class="alert alert-info">                                                                                      // 6700
 * If you are just using {@link ngTransclude} then you don't need to worry about this function, since                  // 6701
 * ngTransclude will deal with it for us.                                                                              // 6702
 * </div>                                                                                                              // 6703
 *                                                                                                                     // 6704
 * If you want to manually control the insertion and removal of the transcluded content in your directive              // 6705
 * then you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery        // 6706
 * object that contains the compiled DOM, which is linked to the correct transclusion scope.                           // 6707
 *                                                                                                                     // 6708
 * When you call a transclusion function you can pass in a **clone attach function**. This function accepts            // 6709
 * two parameters, `function(clone, scope) { ... }`, where the `clone` is a fresh compiled copy of your transcluded    // 6710
 * content and the `scope` is the newly created transclusion scope, to which the clone is bound.                       // 6711
 *                                                                                                                     // 6712
 * <div class="alert alert-info">                                                                                      // 6713
 * **Best Practice**: Always provide a `cloneFn` (clone attach function) when you call a translude function            // 6714
 * since you then get a fresh clone of the original DOM and also have access to the new transclusion scope.            // 6715
 * </div>                                                                                                              // 6716
 *                                                                                                                     // 6717
 * It is normal practice to attach your transcluded content (`clone`) to the DOM inside your **clone                   // 6718
 * attach function**:                                                                                                  // 6719
 *                                                                                                                     // 6720
 * ```js                                                                                                               // 6721
 * var transcludedContent, transclusionScope;                                                                          // 6722
 *                                                                                                                     // 6723
 * $transclude(function(clone, scope) {                                                                                // 6724
 *   element.append(clone);                                                                                            // 6725
 *   transcludedContent = clone;                                                                                       // 6726
 *   transclusionScope = scope;                                                                                        // 6727
 * });                                                                                                                 // 6728
 * ```                                                                                                                 // 6729
 *                                                                                                                     // 6730
 * Later, if you want to remove the transcluded content from your DOM then you should also destroy the                 // 6731
 * associated transclusion scope:                                                                                      // 6732
 *                                                                                                                     // 6733
 * ```js                                                                                                               // 6734
 * transcludedContent.remove();                                                                                        // 6735
 * transclusionScope.$destroy();                                                                                       // 6736
 * ```                                                                                                                 // 6737
 *                                                                                                                     // 6738
 * <div class="alert alert-info">                                                                                      // 6739
 * **Best Practice**: if you intend to add and remove transcluded content manually in your directive                   // 6740
 * (by calling the transclude function to get the DOM and calling `element.remove()` to remove it),                    // 6741
 * then you are also responsible for calling `$destroy` on the transclusion scope.                                     // 6742
 * </div>                                                                                                              // 6743
 *                                                                                                                     // 6744
 * The built-in DOM manipulation directives, such as {@link ngIf}, {@link ngSwitch} and {@link ngRepeat}               // 6745
 * automatically destroy their transluded clones as necessary so you do not need to worry about this if                // 6746
 * you are simply using {@link ngTransclude} to inject the transclusion into your directive.                           // 6747
 *                                                                                                                     // 6748
 *                                                                                                                     // 6749
 * #### Transclusion Scopes                                                                                            // 6750
 *                                                                                                                     // 6751
 * When you call a transclude function it returns a DOM fragment that is pre-bound to a **transclusion                 // 6752
 * scope**. This scope is special, in that it is a child of the directive's scope (and so gets destroyed               // 6753
 * when the directive's scope gets destroyed) but it inherits the properties of the scope from which it                // 6754
 * was taken.                                                                                                          // 6755
 *                                                                                                                     // 6756
 * For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look            // 6757
 * like this:                                                                                                          // 6758
 *                                                                                                                     // 6759
 * ```html                                                                                                             // 6760
 * <div ng-app>                                                                                                        // 6761
 *   <div isolate>                                                                                                     // 6762
 *     <div transclusion>                                                                                              // 6763
 *     </div>                                                                                                          // 6764
 *   </div>                                                                                                            // 6765
 * </div>                                                                                                              // 6766
 * ```                                                                                                                 // 6767
 *                                                                                                                     // 6768
 * The `$parent` scope hierarchy will look like this:                                                                  // 6769
 *                                                                                                                     // 6770
 * ```                                                                                                                 // 6771
 * - $rootScope                                                                                                        // 6772
 *   - isolate                                                                                                         // 6773
 *     - transclusion                                                                                                  // 6774
 * ```                                                                                                                 // 6775
 *                                                                                                                     // 6776
 * but the scopes will inherit prototypically from different scopes to their `$parent`.                                // 6777
 *                                                                                                                     // 6778
 * ```                                                                                                                 // 6779
 * - $rootScope                                                                                                        // 6780
 *   - transclusion                                                                                                    // 6781
 * - isolate                                                                                                           // 6782
 * ```                                                                                                                 // 6783
 *                                                                                                                     // 6784
 *                                                                                                                     // 6785
 * ### Attributes                                                                                                      // 6786
 *                                                                                                                     // 6787
 * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the                       // 6788
 * `link()` or `compile()` functions. It has a variety of uses.                                                        // 6789
 *                                                                                                                     // 6790
 * accessing *Normalized attribute names:*                                                                             // 6791
 * Directives like 'ngBind' can be expressed in many ways: 'ng:bind', `data-ng-bind`, or 'x-ng-bind'.                  // 6792
 * the attributes object allows for normalized access to                                                               // 6793
 *   the attributes.                                                                                                   // 6794
 *                                                                                                                     // 6795
 * * *Directive inter-communication:* All directives share the same instance of the attributes                         // 6796
 *   object which allows the directives to use the attributes object as inter directive                                // 6797
 *   communication.                                                                                                    // 6798
 *                                                                                                                     // 6799
 * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object                           // 6800
 *   allowing other directives to read the interpolated value.                                                         // 6801
 *                                                                                                                     // 6802
 * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes                    // 6803
 *   that contain interpolation (e.g. `src="{{bar}}"`). Not only is this very efficient but it's also                  // 6804
 *   the only way to easily get the actual value because during the linking phase the interpolation                    // 6805
 *   hasn't been evaluated yet and so the value is at this time set to `undefined`.                                    // 6806
 *                                                                                                                     // 6807
 * ```js                                                                                                               // 6808
 * function linkingFn(scope, elm, attrs, ctrl) {                                                                       // 6809
 *   // get the attribute value                                                                                        // 6810
 *   console.log(attrs.ngModel);                                                                                       // 6811
 *                                                                                                                     // 6812
 *   // change the attribute                                                                                           // 6813
 *   attrs.$set('ngModel', 'new value');                                                                               // 6814
 *                                                                                                                     // 6815
 *   // observe changes to interpolated attribute                                                                      // 6816
 *   attrs.$observe('ngModel', function(value) {                                                                       // 6817
 *     console.log('ngModel has changed value to ' + value);                                                           // 6818
 *   });                                                                                                               // 6819
 * }                                                                                                                   // 6820
 * ```                                                                                                                 // 6821
 *                                                                                                                     // 6822
 * ## Example                                                                                                          // 6823
 *                                                                                                                     // 6824
 * <div class="alert alert-warning">                                                                                   // 6825
 * **Note**: Typically directives are registered with `module.directive`. The example below is                         // 6826
 * to illustrate how `$compile` works.                                                                                 // 6827
 * </div>                                                                                                              // 6828
 *                                                                                                                     // 6829
 <example module="compileExample">                                                                                     // 6830
   <file name="index.html">                                                                                            // 6831
    <script>                                                                                                           // 6832
      angular.module('compileExample', [], function($compileProvider) {                                                // 6833
        // configure new 'compile' directive by passing a directive                                                    // 6834
        // factory function. The factory function injects the '$compile'                                               // 6835
        $compileProvider.directive('compile', function($compile) {                                                     // 6836
          // directive factory creates a link function                                                                 // 6837
          return function(scope, element, attrs) {                                                                     // 6838
            scope.$watch(                                                                                              // 6839
              function(scope) {                                                                                        // 6840
                 // watch the 'compile' expression for changes                                                         // 6841
                return scope.$eval(attrs.compile);                                                                     // 6842
              },                                                                                                       // 6843
              function(value) {                                                                                        // 6844
                // when the 'compile' expression changes                                                               // 6845
                // assign it into the current DOM                                                                      // 6846
                element.html(value);                                                                                   // 6847
                                                                                                                       // 6848
                // compile the new DOM and link it to the current                                                      // 6849
                // scope.                                                                                              // 6850
                // NOTE: we only compile .childNodes so that                                                           // 6851
                // we don't get into infinite loop compiling ourselves                                                 // 6852
                $compile(element.contents())(scope);                                                                   // 6853
              }                                                                                                        // 6854
            );                                                                                                         // 6855
          };                                                                                                           // 6856
        });                                                                                                            // 6857
      })                                                                                                               // 6858
      .controller('GreeterController', ['$scope', function($scope) {                                                   // 6859
        $scope.name = 'Angular';                                                                                       // 6860
        $scope.html = 'Hello {{name}}';                                                                                // 6861
      }]);                                                                                                             // 6862
    </script>                                                                                                          // 6863
    <div ng-controller="GreeterController">                                                                            // 6864
      <input ng-model="name"> <br/>                                                                                    // 6865
      <textarea ng-model="html"></textarea> <br/>                                                                      // 6866
      <div compile="html"></div>                                                                                       // 6867
    </div>                                                                                                             // 6868
   </file>                                                                                                             // 6869
   <file name="protractor.js" type="protractor">                                                                       // 6870
     it('should auto compile', function() {                                                                            // 6871
       var textarea = $('textarea');                                                                                   // 6872
       var output = $('div[compile]');                                                                                 // 6873
       // The initial state reads 'Hello Angular'.                                                                     // 6874
       expect(output.getText()).toBe('Hello Angular');                                                                 // 6875
       textarea.clear();                                                                                               // 6876
       textarea.sendKeys('{{name}}!');                                                                                 // 6877
       expect(output.getText()).toBe('Angular!');                                                                      // 6878
     });                                                                                                               // 6879
   </file>                                                                                                             // 6880
 </example>                                                                                                            // 6881
                                                                                                                       // 6882
 *                                                                                                                     // 6883
 *                                                                                                                     // 6884
 * @param {string|DOMElement} element Element or HTML string to compile into a template function.                      // 6885
 * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives - DEPRECATED.          // 6886
 *                                                                                                                     // 6887
 * <div class="alert alert-danger">                                                                                    // 6888
 * **Note:** Passing a `transclude` function to the $compile function is deprecated, as it                             // 6889
 *   e.g. will not use the right outer scope. Please pass the transclude function as a                                 // 6890
 *   `parentBoundTranscludeFn` to the link function instead.                                                           // 6891
 * </div>                                                                                                              // 6892
 *                                                                                                                     // 6893
 * @param {number} maxPriority only apply directives lower than given priority (Only effects the                       // 6894
 *                 root element(s), not their children)                                                                // 6895
 * @returns {function(scope, cloneAttachFn=, options=)} a link function which is used to bind template                 // 6896
 * (a DOM element/tree) to a scope. Where:                                                                             // 6897
 *                                                                                                                     // 6898
 *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.                                                        // 6899
 *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the                          // 6900
 *  `template` and call the `cloneAttachFn` function allowing the caller to attach the                                 // 6901
 *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is                               // 6902
 *  called as: <br/> `cloneAttachFn(clonedElement, scope)` where:                                                      // 6903
 *                                                                                                                     // 6904
 *      * `clonedElement` - is a clone of the original `element` passed into the compiler.                             // 6905
 *      * `scope` - is the current scope with which the linking function is working with.                              // 6906
 *                                                                                                                     // 6907
 *  * `options` - An optional object hash with linking options. If `options` is provided, then the following           // 6908
 *  keys may be used to control linking behavior:                                                                      // 6909
 *                                                                                                                     // 6910
 *      * `parentBoundTranscludeFn` - the transclude function made available to                                        // 6911
 *        directives; if given, it will be passed through to the link functions of                                     // 6912
 *        directives found in `element` during compilation.                                                            // 6913
 *      * `transcludeControllers` - an object hash with keys that map controller names                                 // 6914
 *        to controller instances; if given, it will make the controllers                                              // 6915
 *        available to directives.                                                                                     // 6916
 *      * `futureParentElement` - defines the parent to which the `cloneAttachFn` will add                             // 6917
 *        the cloned elements; only needed for transcludes that are allowed to contain non html                        // 6918
 *        elements (e.g. SVG elements). See also the directive.controller property.                                    // 6919
 *                                                                                                                     // 6920
 * Calling the linking function returns the element of the template. It is either the original                         // 6921
 * element passed in, or the clone of the element if the `cloneAttachFn` is provided.                                  // 6922
 *                                                                                                                     // 6923
 * After linking the view is not updated until after a call to $digest which typically is done by                      // 6924
 * Angular automatically.                                                                                              // 6925
 *                                                                                                                     // 6926
 * If you need access to the bound view, there are two ways to do it:                                                  // 6927
 *                                                                                                                     // 6928
 * - If you are not asking the linking function to clone the template, create the DOM element(s)                       // 6929
 *   before you send them to the compiler and keep this reference around.                                              // 6930
 *   ```js                                                                                                             // 6931
 *     var element = $compile('<p>{{total}}</p>')(scope);                                                              // 6932
 *   ```                                                                                                               // 6933
 *                                                                                                                     // 6934
 * - if on the other hand, you need the element to be cloned, the view reference from the original                     // 6935
 *   example would not point to the clone, but rather to the original template that was cloned. In                     // 6936
 *   this case, you can access the clone via the cloneAttachFn:                                                        // 6937
 *   ```js                                                                                                             // 6938
 *     var templateElement = angular.element('<p>{{total}}</p>'),                                                      // 6939
 *         scope = ....;                                                                                               // 6940
 *                                                                                                                     // 6941
 *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {                           // 6942
 *       //attach the clone to DOM document at the right place                                                         // 6943
 *     });                                                                                                             // 6944
 *                                                                                                                     // 6945
 *     //now we have reference to the cloned DOM via `clonedElement`                                                   // 6946
 *   ```                                                                                                               // 6947
 *                                                                                                                     // 6948
 *                                                                                                                     // 6949
 * For information on how the compiler works, see the                                                                  // 6950
 * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.                                        // 6951
 */                                                                                                                    // 6952
                                                                                                                       // 6953
var $compileMinErr = minErr('$compile');                                                                               // 6954
                                                                                                                       // 6955
/**                                                                                                                    // 6956
 * @ngdoc provider                                                                                                     // 6957
 * @name $compileProvider                                                                                              // 6958
 *                                                                                                                     // 6959
 * @description                                                                                                        // 6960
 */                                                                                                                    // 6961
$CompileProvider.$inject = ['$provide', '$$sanitizeUriProvider'];                                                      // 6962
function $CompileProvider($provide, $$sanitizeUriProvider) {                                                           // 6963
  var hasDirectives = {},                                                                                              // 6964
      Suffix = 'Directive',                                                                                            // 6965
      COMMENT_DIRECTIVE_REGEXP = /^\s*directive\:\s*([\w\-]+)\s+(.*)$/,                                                // 6966
      CLASS_DIRECTIVE_REGEXP = /(([\w\-]+)(?:\:([^;]+))?;?)/,                                                          // 6967
      ALL_OR_NOTHING_ATTRS = makeMap('ngSrc,ngSrcset,src,srcset'),                                                     // 6968
      REQUIRE_PREFIX_REGEXP = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/;                                                           // 6969
                                                                                                                       // 6970
  // Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes                                    // 6971
  // The assumption is that future DOM event attribute names will begin with                                           // 6972
  // 'on' and be composed of only English letters.                                                                     // 6973
  var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;                                                           // 6974
                                                                                                                       // 6975
  function parseIsolateBindings(scope, directiveName, isController) {                                                  // 6976
    var LOCAL_REGEXP = /^\s*([@&]|=(\*?))(\??)\s*(\w*)\s*$/;                                                           // 6977
                                                                                                                       // 6978
    var bindings = {};                                                                                                 // 6979
                                                                                                                       // 6980
    forEach(scope, function(definition, scopeName) {                                                                   // 6981
      var match = definition.match(LOCAL_REGEXP);                                                                      // 6982
                                                                                                                       // 6983
      if (!match) {                                                                                                    // 6984
        throw $compileMinErr('iscp',                                                                                   // 6985
            "Invalid {3} for directive '{0}'." +                                                                       // 6986
            " Definition: {... {1}: '{2}' ...}",                                                                       // 6987
            directiveName, scopeName, definition,                                                                      // 6988
            (isController ? "controller bindings definition" :                                                         // 6989
            "isolate scope definition"));                                                                              // 6990
      }                                                                                                                // 6991
                                                                                                                       // 6992
      bindings[scopeName] = {                                                                                          // 6993
        mode: match[1][0],                                                                                             // 6994
        collection: match[2] === '*',                                                                                  // 6995
        optional: match[3] === '?',                                                                                    // 6996
        attrName: match[4] || scopeName                                                                                // 6997
      };                                                                                                               // 6998
    });                                                                                                                // 6999
                                                                                                                       // 7000
    return bindings;                                                                                                   // 7001
  }                                                                                                                    // 7002
                                                                                                                       // 7003
  function parseDirectiveBindings(directive, directiveName) {                                                          // 7004
    var bindings = {                                                                                                   // 7005
      isolateScope: null,                                                                                              // 7006
      bindToController: null                                                                                           // 7007
    };                                                                                                                 // 7008
    if (isObject(directive.scope)) {                                                                                   // 7009
      if (directive.bindToController === true) {                                                                       // 7010
        bindings.bindToController = parseIsolateBindings(directive.scope,                                              // 7011
                                                         directiveName, true);                                         // 7012
        bindings.isolateScope = {};                                                                                    // 7013
      } else {                                                                                                         // 7014
        bindings.isolateScope = parseIsolateBindings(directive.scope,                                                  // 7015
                                                     directiveName, false);                                            // 7016
      }                                                                                                                // 7017
    }                                                                                                                  // 7018
    if (isObject(directive.bindToController)) {                                                                        // 7019
      bindings.bindToController =                                                                                      // 7020
          parseIsolateBindings(directive.bindToController, directiveName, true);                                       // 7021
    }                                                                                                                  // 7022
    if (isObject(bindings.bindToController)) {                                                                         // 7023
      var controller = directive.controller;                                                                           // 7024
      var controllerAs = directive.controllerAs;                                                                       // 7025
      if (!controller) {                                                                                               // 7026
        // There is no controller, there may or may not be a controllerAs property                                     // 7027
        throw $compileMinErr('noctrl',                                                                                 // 7028
              "Cannot bind to controller without directive '{0}'s controller.",                                        // 7029
              directiveName);                                                                                          // 7030
      } else if (!identifierForController(controller, controllerAs)) {                                                 // 7031
        // There is a controller, but no identifier or controllerAs property                                           // 7032
        throw $compileMinErr('noident',                                                                                // 7033
              "Cannot bind to controller without identifier for directive '{0}'.",                                     // 7034
              directiveName);                                                                                          // 7035
      }                                                                                                                // 7036
    }                                                                                                                  // 7037
    return bindings;                                                                                                   // 7038
  }                                                                                                                    // 7039
                                                                                                                       // 7040
  function assertValidDirectiveName(name) {                                                                            // 7041
    var letter = name.charAt(0);                                                                                       // 7042
    if (!letter || letter !== lowercase(letter)) {                                                                     // 7043
      throw $compileMinErr('baddir', "Directive name '{0}' is invalid. The first character must be a lowercase letter", name);
    }                                                                                                                  // 7045
    if (name !== name.trim()) {                                                                                        // 7046
      throw $compileMinErr('baddir',                                                                                   // 7047
            "Directive name '{0}' is invalid. The name should not contain leading or trailing whitespaces",            // 7048
            name);                                                                                                     // 7049
    }                                                                                                                  // 7050
  }                                                                                                                    // 7051
                                                                                                                       // 7052
  /**                                                                                                                  // 7053
   * @ngdoc method                                                                                                     // 7054
   * @name $compileProvider#directive                                                                                  // 7055
   * @kind function                                                                                                    // 7056
   *                                                                                                                   // 7057
   * @description                                                                                                      // 7058
   * Register a new directive with the compiler.                                                                       // 7059
   *                                                                                                                   // 7060
   * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which                   // 7061
   *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the                     // 7062
   *    names and the values are the factories.                                                                        // 7063
   * @param {Function|Array} directiveFactory An injectable directive factory function. See                            // 7064
   *    {@link guide/directive} for more info.                                                                         // 7065
   * @returns {ng.$compileProvider} Self for chaining.                                                                 // 7066
   */                                                                                                                  // 7067
   this.directive = function registerDirective(name, directiveFactory) {                                               // 7068
    assertNotHasOwnProperty(name, 'directive');                                                                        // 7069
    if (isString(name)) {                                                                                              // 7070
      assertValidDirectiveName(name);                                                                                  // 7071
      assertArg(directiveFactory, 'directiveFactory');                                                                 // 7072
      if (!hasDirectives.hasOwnProperty(name)) {                                                                       // 7073
        hasDirectives[name] = [];                                                                                      // 7074
        $provide.factory(name + Suffix, ['$injector', '$exceptionHandler',                                             // 7075
          function($injector, $exceptionHandler) {                                                                     // 7076
            var directives = [];                                                                                       // 7077
            forEach(hasDirectives[name], function(directiveFactory, index) {                                           // 7078
              try {                                                                                                    // 7079
                var directive = $injector.invoke(directiveFactory);                                                    // 7080
                if (isFunction(directive)) {                                                                           // 7081
                  directive = { compile: valueFn(directive) };                                                         // 7082
                } else if (!directive.compile && directive.link) {                                                     // 7083
                  directive.compile = valueFn(directive.link);                                                         // 7084
                }                                                                                                      // 7085
                directive.priority = directive.priority || 0;                                                          // 7086
                directive.index = index;                                                                               // 7087
                directive.name = directive.name || name;                                                               // 7088
                directive.require = directive.require || (directive.controller && directive.name);                     // 7089
                directive.restrict = directive.restrict || 'EA';                                                       // 7090
                var bindings = directive.$$bindings =                                                                  // 7091
                    parseDirectiveBindings(directive, directive.name);                                                 // 7092
                if (isObject(bindings.isolateScope)) {                                                                 // 7093
                  directive.$$isolateBindings = bindings.isolateScope;                                                 // 7094
                }                                                                                                      // 7095
                directive.$$moduleName = directiveFactory.$$moduleName;                                                // 7096
                directives.push(directive);                                                                            // 7097
              } catch (e) {                                                                                            // 7098
                $exceptionHandler(e);                                                                                  // 7099
              }                                                                                                        // 7100
            });                                                                                                        // 7101
            return directives;                                                                                         // 7102
          }]);                                                                                                         // 7103
      }                                                                                                                // 7104
      hasDirectives[name].push(directiveFactory);                                                                      // 7105
    } else {                                                                                                           // 7106
      forEach(name, reverseParams(registerDirective));                                                                 // 7107
    }                                                                                                                  // 7108
    return this;                                                                                                       // 7109
  };                                                                                                                   // 7110
                                                                                                                       // 7111
                                                                                                                       // 7112
  /**                                                                                                                  // 7113
   * @ngdoc method                                                                                                     // 7114
   * @name $compileProvider#aHrefSanitizationWhitelist                                                                 // 7115
   * @kind function                                                                                                    // 7116
   *                                                                                                                   // 7117
   * @description                                                                                                      // 7118
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe                       // 7119
   * urls during a[href] sanitization.                                                                                 // 7120
   *                                                                                                                   // 7121
   * The sanitization is a security measure aimed at preventing XSS attacks via html links.                            // 7122
   *                                                                                                                   // 7123
   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into                      // 7124
   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`                          // 7125
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,                     // 7126
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.                    // 7127
   *                                                                                                                   // 7128
   * @param {RegExp=} regexp New regexp to whitelist urls with.                                                        // 7129
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for                          // 7130
   *    chaining otherwise.                                                                                            // 7131
   */                                                                                                                  // 7132
  this.aHrefSanitizationWhitelist = function(regexp) {                                                                 // 7133
    if (isDefined(regexp)) {                                                                                           // 7134
      $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);                                                        // 7135
      return this;                                                                                                     // 7136
    } else {                                                                                                           // 7137
      return $$sanitizeUriProvider.aHrefSanitizationWhitelist();                                                       // 7138
    }                                                                                                                  // 7139
  };                                                                                                                   // 7140
                                                                                                                       // 7141
                                                                                                                       // 7142
  /**                                                                                                                  // 7143
   * @ngdoc method                                                                                                     // 7144
   * @name $compileProvider#imgSrcSanitizationWhitelist                                                                // 7145
   * @kind function                                                                                                    // 7146
   *                                                                                                                   // 7147
   * @description                                                                                                      // 7148
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe                       // 7149
   * urls during img[src] sanitization.                                                                                // 7150
   *                                                                                                                   // 7151
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.                               // 7152
   *                                                                                                                   // 7153
   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into                     // 7154
   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`                         // 7155
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,                     // 7156
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.                    // 7157
   *                                                                                                                   // 7158
   * @param {RegExp=} regexp New regexp to whitelist urls with.                                                        // 7159
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for                          // 7160
   *    chaining otherwise.                                                                                            // 7161
   */                                                                                                                  // 7162
  this.imgSrcSanitizationWhitelist = function(regexp) {                                                                // 7163
    if (isDefined(regexp)) {                                                                                           // 7164
      $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);                                                       // 7165
      return this;                                                                                                     // 7166
    } else {                                                                                                           // 7167
      return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();                                                      // 7168
    }                                                                                                                  // 7169
  };                                                                                                                   // 7170
                                                                                                                       // 7171
  /**                                                                                                                  // 7172
   * @ngdoc method                                                                                                     // 7173
   * @name  $compileProvider#debugInfoEnabled                                                                          // 7174
   *                                                                                                                   // 7175
   * @param {boolean=} enabled update the debugInfoEnabled state if provided, otherwise just return the                // 7176
   * current debugInfoEnabled state                                                                                    // 7177
   * @returns {*} current value if used as getter or itself (chaining) if used as setter                               // 7178
   *                                                                                                                   // 7179
   * @kind function                                                                                                    // 7180
   *                                                                                                                   // 7181
   * @description                                                                                                      // 7182
   * Call this method to enable/disable various debug runtime information in the compiler such as adding               // 7183
   * binding information and a reference to the current scope on to DOM elements.                                      // 7184
   * If enabled, the compiler will add the following to DOM elements that have been bound to the scope                 // 7185
   * * `ng-binding` CSS class                                                                                          // 7186
   * * `$binding` data property containing an array of the binding expressions                                         // 7187
   *                                                                                                                   // 7188
   * You may want to disable this in production for a significant performance boost. See                               // 7189
   * {@link guide/production#disabling-debug-data Disabling Debug Data} for more.                                      // 7190
   *                                                                                                                   // 7191
   * The default value is true.                                                                                        // 7192
   */                                                                                                                  // 7193
  var debugInfoEnabled = true;                                                                                         // 7194
  this.debugInfoEnabled = function(enabled) {                                                                          // 7195
    if (isDefined(enabled)) {                                                                                          // 7196
      debugInfoEnabled = enabled;                                                                                      // 7197
      return this;                                                                                                     // 7198
    }                                                                                                                  // 7199
    return debugInfoEnabled;                                                                                           // 7200
  };                                                                                                                   // 7201
                                                                                                                       // 7202
  this.$get = [                                                                                                        // 7203
            '$injector', '$interpolate', '$exceptionHandler', '$templateRequest', '$parse',                            // 7204
            '$controller', '$rootScope', '$document', '$sce', '$animate', '$$sanitizeUri',                             // 7205
    function($injector,   $interpolate,   $exceptionHandler,   $templateRequest,   $parse,                             // 7206
             $controller,   $rootScope,   $document,   $sce,   $animate,   $$sanitizeUri) {                            // 7207
                                                                                                                       // 7208
    var Attributes = function(element, attributesToCopy) {                                                             // 7209
      if (attributesToCopy) {                                                                                          // 7210
        var keys = Object.keys(attributesToCopy);                                                                      // 7211
        var i, l, key;                                                                                                 // 7212
                                                                                                                       // 7213
        for (i = 0, l = keys.length; i < l; i++) {                                                                     // 7214
          key = keys[i];                                                                                               // 7215
          this[key] = attributesToCopy[key];                                                                           // 7216
        }                                                                                                              // 7217
      } else {                                                                                                         // 7218
        this.$attr = {};                                                                                               // 7219
      }                                                                                                                // 7220
                                                                                                                       // 7221
      this.$$element = element;                                                                                        // 7222
    };                                                                                                                 // 7223
                                                                                                                       // 7224
    Attributes.prototype = {                                                                                           // 7225
      /**                                                                                                              // 7226
       * @ngdoc method                                                                                                 // 7227
       * @name $compile.directive.Attributes#$normalize                                                                // 7228
       * @kind function                                                                                                // 7229
       *                                                                                                               // 7230
       * @description                                                                                                  // 7231
       * Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with `x-` or     // 7232
       * `data-`) to its normalized, camelCase form.                                                                   // 7233
       *                                                                                                               // 7234
       * Also there is special case for Moz prefix starting with upper case letter.                                    // 7235
       *                                                                                                               // 7236
       * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
       *                                                                                                               // 7238
       * @param {string} name Name to normalize                                                                        // 7239
       */                                                                                                              // 7240
      $normalize: directiveNormalize,                                                                                  // 7241
                                                                                                                       // 7242
                                                                                                                       // 7243
      /**                                                                                                              // 7244
       * @ngdoc method                                                                                                 // 7245
       * @name $compile.directive.Attributes#$addClass                                                                 // 7246
       * @kind function                                                                                                // 7247
       *                                                                                                               // 7248
       * @description                                                                                                  // 7249
       * Adds the CSS class value specified by the classVal parameter to the element. If animations                    // 7250
       * are enabled then an animation will be triggered for the class addition.                                       // 7251
       *                                                                                                               // 7252
       * @param {string} classVal The className value that will be added to the element                                // 7253
       */                                                                                                              // 7254
      $addClass: function(classVal) {                                                                                  // 7255
        if (classVal && classVal.length > 0) {                                                                         // 7256
          $animate.addClass(this.$$element, classVal);                                                                 // 7257
        }                                                                                                              // 7258
      },                                                                                                               // 7259
                                                                                                                       // 7260
      /**                                                                                                              // 7261
       * @ngdoc method                                                                                                 // 7262
       * @name $compile.directive.Attributes#$removeClass                                                              // 7263
       * @kind function                                                                                                // 7264
       *                                                                                                               // 7265
       * @description                                                                                                  // 7266
       * Removes the CSS class value specified by the classVal parameter from the element. If                          // 7267
       * animations are enabled then an animation will be triggered for the class removal.                             // 7268
       *                                                                                                               // 7269
       * @param {string} classVal The className value that will be removed from the element                            // 7270
       */                                                                                                              // 7271
      $removeClass: function(classVal) {                                                                               // 7272
        if (classVal && classVal.length > 0) {                                                                         // 7273
          $animate.removeClass(this.$$element, classVal);                                                              // 7274
        }                                                                                                              // 7275
      },                                                                                                               // 7276
                                                                                                                       // 7277
      /**                                                                                                              // 7278
       * @ngdoc method                                                                                                 // 7279
       * @name $compile.directive.Attributes#$updateClass                                                              // 7280
       * @kind function                                                                                                // 7281
       *                                                                                                               // 7282
       * @description                                                                                                  // 7283
       * Adds and removes the appropriate CSS class values to the element based on the difference                      // 7284
       * between the new and old CSS class values (specified as newClasses and oldClasses).                            // 7285
       *                                                                                                               // 7286
       * @param {string} newClasses The current CSS className value                                                    // 7287
       * @param {string} oldClasses The former CSS className value                                                     // 7288
       */                                                                                                              // 7289
      $updateClass: function(newClasses, oldClasses) {                                                                 // 7290
        var toAdd = tokenDifference(newClasses, oldClasses);                                                           // 7291
        if (toAdd && toAdd.length) {                                                                                   // 7292
          $animate.addClass(this.$$element, toAdd);                                                                    // 7293
        }                                                                                                              // 7294
                                                                                                                       // 7295
        var toRemove = tokenDifference(oldClasses, newClasses);                                                        // 7296
        if (toRemove && toRemove.length) {                                                                             // 7297
          $animate.removeClass(this.$$element, toRemove);                                                              // 7298
        }                                                                                                              // 7299
      },                                                                                                               // 7300
                                                                                                                       // 7301
      /**                                                                                                              // 7302
       * Set a normalized attribute on the element in a way such that all directives                                   // 7303
       * can share the attribute. This function properly handles boolean attributes.                                   // 7304
       * @param {string} key Normalized key. (ie ngAttribute)                                                          // 7305
       * @param {string|boolean} value The value to set. If `null` attribute will be deleted.                          // 7306
       * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.                      // 7307
       *     Defaults to true.                                                                                         // 7308
       * @param {string=} attrName Optional none normalized name. Defaults to key.                                     // 7309
       */                                                                                                              // 7310
      $set: function(key, value, writeAttr, attrName) {                                                                // 7311
        // TODO: decide whether or not to throw an error if "class"                                                    // 7312
        //is set through this function since it may cause $updateClass to                                              // 7313
        //become unstable.                                                                                             // 7314
                                                                                                                       // 7315
        var node = this.$$element[0],                                                                                  // 7316
            booleanKey = getBooleanAttrName(node, key),                                                                // 7317
            aliasedKey = getAliasedAttrName(key),                                                                      // 7318
            observer = key,                                                                                            // 7319
            nodeName;                                                                                                  // 7320
                                                                                                                       // 7321
        if (booleanKey) {                                                                                              // 7322
          this.$$element.prop(key, value);                                                                             // 7323
          attrName = booleanKey;                                                                                       // 7324
        } else if (aliasedKey) {                                                                                       // 7325
          this[aliasedKey] = value;                                                                                    // 7326
          observer = aliasedKey;                                                                                       // 7327
        }                                                                                                              // 7328
                                                                                                                       // 7329
        this[key] = value;                                                                                             // 7330
                                                                                                                       // 7331
        // translate normalized key to actual key                                                                      // 7332
        if (attrName) {                                                                                                // 7333
          this.$attr[key] = attrName;                                                                                  // 7334
        } else {                                                                                                       // 7335
          attrName = this.$attr[key];                                                                                  // 7336
          if (!attrName) {                                                                                             // 7337
            this.$attr[key] = attrName = snake_case(key, '-');                                                         // 7338
          }                                                                                                            // 7339
        }                                                                                                              // 7340
                                                                                                                       // 7341
        nodeName = nodeName_(this.$$element);                                                                          // 7342
                                                                                                                       // 7343
        if ((nodeName === 'a' && key === 'href') ||                                                                    // 7344
            (nodeName === 'img' && key === 'src')) {                                                                   // 7345
          // sanitize a[href] and img[src] values                                                                      // 7346
          this[key] = value = $$sanitizeUri(value, key === 'src');                                                     // 7347
        } else if (nodeName === 'img' && key === 'srcset') {                                                           // 7348
          // sanitize img[srcset] values                                                                               // 7349
          var result = "";                                                                                             // 7350
                                                                                                                       // 7351
          // first check if there are spaces because it's not the same pattern                                         // 7352
          var trimmedSrcset = trim(value);                                                                             // 7353
          //                (   999x   ,|   999w   ,|   ,|,   )                                                        // 7354
          var srcPattern = /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/;                                                      // 7355
          var pattern = /\s/.test(trimmedSrcset) ? srcPattern : /(,)/;                                                 // 7356
                                                                                                                       // 7357
          // split srcset into tuple of uri and descriptor except for the last item                                    // 7358
          var rawUris = trimmedSrcset.split(pattern);                                                                  // 7359
                                                                                                                       // 7360
          // for each tuples                                                                                           // 7361
          var nbrUrisWith2parts = Math.floor(rawUris.length / 2);                                                      // 7362
          for (var i = 0; i < nbrUrisWith2parts; i++) {                                                                // 7363
            var innerIdx = i * 2;                                                                                      // 7364
            // sanitize the uri                                                                                        // 7365
            result += $$sanitizeUri(trim(rawUris[innerIdx]), true);                                                    // 7366
            // add the descriptor                                                                                      // 7367
            result += (" " + trim(rawUris[innerIdx + 1]));                                                             // 7368
          }                                                                                                            // 7369
                                                                                                                       // 7370
          // split the last item into uri and descriptor                                                               // 7371
          var lastTuple = trim(rawUris[i * 2]).split(/\s/);                                                            // 7372
                                                                                                                       // 7373
          // sanitize the last uri                                                                                     // 7374
          result += $$sanitizeUri(trim(lastTuple[0]), true);                                                           // 7375
                                                                                                                       // 7376
          // and add the last descriptor if any                                                                        // 7377
          if (lastTuple.length === 2) {                                                                                // 7378
            result += (" " + trim(lastTuple[1]));                                                                      // 7379
          }                                                                                                            // 7380
          this[key] = value = result;                                                                                  // 7381
        }                                                                                                              // 7382
                                                                                                                       // 7383
        if (writeAttr !== false) {                                                                                     // 7384
          if (value === null || isUndefined(value)) {                                                                  // 7385
            this.$$element.removeAttr(attrName);                                                                       // 7386
          } else {                                                                                                     // 7387
            this.$$element.attr(attrName, value);                                                                      // 7388
          }                                                                                                            // 7389
        }                                                                                                              // 7390
                                                                                                                       // 7391
        // fire observers                                                                                              // 7392
        var $$observers = this.$$observers;                                                                            // 7393
        $$observers && forEach($$observers[observer], function(fn) {                                                   // 7394
          try {                                                                                                        // 7395
            fn(value);                                                                                                 // 7396
          } catch (e) {                                                                                                // 7397
            $exceptionHandler(e);                                                                                      // 7398
          }                                                                                                            // 7399
        });                                                                                                            // 7400
      },                                                                                                               // 7401
                                                                                                                       // 7402
                                                                                                                       // 7403
      /**                                                                                                              // 7404
       * @ngdoc method                                                                                                 // 7405
       * @name $compile.directive.Attributes#$observe                                                                  // 7406
       * @kind function                                                                                                // 7407
       *                                                                                                               // 7408
       * @description                                                                                                  // 7409
       * Observes an interpolated attribute.                                                                           // 7410
       *                                                                                                               // 7411
       * The observer function will be invoked once during the next `$digest` following                                // 7412
       * compilation. The observer is then invoked whenever the interpolated value                                     // 7413
       * changes.                                                                                                      // 7414
       *                                                                                                               // 7415
       * @param {string} key Normalized key. (ie ngAttribute) .                                                        // 7416
       * @param {function(interpolatedValue)} fn Function that will be called whenever                                 // 7417
                the interpolated value of the attribute changes.                                                       // 7418
       *        See the {@link guide/directive#text-and-attribute-bindings Directives} guide for more info.            // 7419
       * @returns {function()} Returns a deregistration function for this observer.                                    // 7420
       */                                                                                                              // 7421
      $observe: function(key, fn) {                                                                                    // 7422
        var attrs = this,                                                                                              // 7423
            $$observers = (attrs.$$observers || (attrs.$$observers = createMap())),                                    // 7424
            listeners = ($$observers[key] || ($$observers[key] = []));                                                 // 7425
                                                                                                                       // 7426
        listeners.push(fn);                                                                                            // 7427
        $rootScope.$evalAsync(function() {                                                                             // 7428
          if (!listeners.$$inter && attrs.hasOwnProperty(key) && !isUndefined(attrs[key])) {                           // 7429
            // no one registered attribute interpolation function, so lets call it manually                            // 7430
            fn(attrs[key]);                                                                                            // 7431
          }                                                                                                            // 7432
        });                                                                                                            // 7433
                                                                                                                       // 7434
        return function() {                                                                                            // 7435
          arrayRemove(listeners, fn);                                                                                  // 7436
        };                                                                                                             // 7437
      }                                                                                                                // 7438
    };                                                                                                                 // 7439
                                                                                                                       // 7440
                                                                                                                       // 7441
    function safeAddClass($element, className) {                                                                       // 7442
      try {                                                                                                            // 7443
        $element.addClass(className);                                                                                  // 7444
      } catch (e) {                                                                                                    // 7445
        // ignore, since it means that we are trying to set class on                                                   // 7446
        // SVG element, where class name is read-only.                                                                 // 7447
      }                                                                                                                // 7448
    }                                                                                                                  // 7449
                                                                                                                       // 7450
                                                                                                                       // 7451
    var startSymbol = $interpolate.startSymbol(),                                                                      // 7452
        endSymbol = $interpolate.endSymbol(),                                                                          // 7453
        denormalizeTemplate = (startSymbol == '{{' || endSymbol  == '}}')                                              // 7454
            ? identity                                                                                                 // 7455
            : function denormalizeTemplate(template) {                                                                 // 7456
              return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);                                 // 7457
        },                                                                                                             // 7458
        NG_ATTR_BINDING = /^ngAttr[A-Z]/;                                                                              // 7459
                                                                                                                       // 7460
    compile.$$addBindingInfo = debugInfoEnabled ? function $$addBindingInfo($element, binding) {                       // 7461
      var bindings = $element.data('$binding') || [];                                                                  // 7462
                                                                                                                       // 7463
      if (isArray(binding)) {                                                                                          // 7464
        bindings = bindings.concat(binding);                                                                           // 7465
      } else {                                                                                                         // 7466
        bindings.push(binding);                                                                                        // 7467
      }                                                                                                                // 7468
                                                                                                                       // 7469
      $element.data('$binding', bindings);                                                                             // 7470
    } : noop;                                                                                                          // 7471
                                                                                                                       // 7472
    compile.$$addBindingClass = debugInfoEnabled ? function $$addBindingClass($element) {                              // 7473
      safeAddClass($element, 'ng-binding');                                                                            // 7474
    } : noop;                                                                                                          // 7475
                                                                                                                       // 7476
    compile.$$addScopeInfo = debugInfoEnabled ? function $$addScopeInfo($element, scope, isolated, noTemplate) {       // 7477
      var dataName = isolated ? (noTemplate ? '$isolateScopeNoTemplate' : '$isolateScope') : '$scope';                 // 7478
      $element.data(dataName, scope);                                                                                  // 7479
    } : noop;                                                                                                          // 7480
                                                                                                                       // 7481
    compile.$$addScopeClass = debugInfoEnabled ? function $$addScopeClass($element, isolated) {                        // 7482
      safeAddClass($element, isolated ? 'ng-isolate-scope' : 'ng-scope');                                              // 7483
    } : noop;                                                                                                          // 7484
                                                                                                                       // 7485
    return compile;                                                                                                    // 7486
                                                                                                                       // 7487
    //================================                                                                                 // 7488
                                                                                                                       // 7489
    function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective,                                        // 7490
                        previousCompileContext) {                                                                      // 7491
      if (!($compileNodes instanceof jqLite)) {                                                                        // 7492
        // jquery always rewraps, whereas we need to preserve the original selector so that we can                     // 7493
        // modify it.                                                                                                  // 7494
        $compileNodes = jqLite($compileNodes);                                                                         // 7495
      }                                                                                                                // 7496
      // We can not compile top level text elements since text nodes can be merged and we will                         // 7497
      // not be able to attach scope data to them, so we will wrap them in <span>                                      // 7498
      forEach($compileNodes, function(node, index) {                                                                   // 7499
        if (node.nodeType == NODE_TYPE_TEXT && node.nodeValue.match(/\S+/) /* non-empty */ ) {                         // 7500
          $compileNodes[index] = jqLite(node).wrap('<span></span>').parent()[0];                                       // 7501
        }                                                                                                              // 7502
      });                                                                                                              // 7503
      var compositeLinkFn =                                                                                            // 7504
              compileNodes($compileNodes, transcludeFn, $compileNodes,                                                 // 7505
                           maxPriority, ignoreDirective, previousCompileContext);                                      // 7506
      compile.$$addScopeClass($compileNodes);                                                                          // 7507
      var namespace = null;                                                                                            // 7508
      return function publicLinkFn(scope, cloneConnectFn, options) {                                                   // 7509
        assertArg(scope, 'scope');                                                                                     // 7510
                                                                                                                       // 7511
        options = options || {};                                                                                       // 7512
        var parentBoundTranscludeFn = options.parentBoundTranscludeFn,                                                 // 7513
          transcludeControllers = options.transcludeControllers,                                                       // 7514
          futureParentElement = options.futureParentElement;                                                           // 7515
                                                                                                                       // 7516
        // When `parentBoundTranscludeFn` is passed, it is a                                                           // 7517
        // `controllersBoundTransclude` function (it was previously passed                                             // 7518
        // as `transclude` to directive.link) so we must unwrap it to get                                              // 7519
        // its `boundTranscludeFn`                                                                                     // 7520
        if (parentBoundTranscludeFn && parentBoundTranscludeFn.$$boundTransclude) {                                    // 7521
          parentBoundTranscludeFn = parentBoundTranscludeFn.$$boundTransclude;                                         // 7522
        }                                                                                                              // 7523
                                                                                                                       // 7524
        if (!namespace) {                                                                                              // 7525
          namespace = detectNamespaceForChildElements(futureParentElement);                                            // 7526
        }                                                                                                              // 7527
        var $linkNode;                                                                                                 // 7528
        if (namespace !== 'html') {                                                                                    // 7529
          // When using a directive with replace:true and templateUrl the $compileNodes                                // 7530
          // (or a child element inside of them)                                                                       // 7531
          // might change, so we need to recreate the namespace adapted compileNodes                                   // 7532
          // for call to the link function.                                                                            // 7533
          // Note: This will already clone the nodes...                                                                // 7534
          $linkNode = jqLite(                                                                                          // 7535
            wrapTemplate(namespace, jqLite('<div>').append($compileNodes).html())                                      // 7536
          );                                                                                                           // 7537
        } else if (cloneConnectFn) {                                                                                   // 7538
          // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart                   // 7539
          // and sometimes changes the structure of the DOM.                                                           // 7540
          $linkNode = JQLitePrototype.clone.call($compileNodes);                                                       // 7541
        } else {                                                                                                       // 7542
          $linkNode = $compileNodes;                                                                                   // 7543
        }                                                                                                              // 7544
                                                                                                                       // 7545
        if (transcludeControllers) {                                                                                   // 7546
          for (var controllerName in transcludeControllers) {                                                          // 7547
            $linkNode.data('$' + controllerName + 'Controller', transcludeControllers[controllerName].instance);       // 7548
          }                                                                                                            // 7549
        }                                                                                                              // 7550
                                                                                                                       // 7551
        compile.$$addScopeInfo($linkNode, scope);                                                                      // 7552
                                                                                                                       // 7553
        if (cloneConnectFn) cloneConnectFn($linkNode, scope);                                                          // 7554
        if (compositeLinkFn) compositeLinkFn(scope, $linkNode, $linkNode, parentBoundTranscludeFn);                    // 7555
        return $linkNode;                                                                                              // 7556
      };                                                                                                               // 7557
    }                                                                                                                  // 7558
                                                                                                                       // 7559
    function detectNamespaceForChildElements(parentElement) {                                                          // 7560
      // TODO: Make this detect MathML as well...                                                                      // 7561
      var node = parentElement && parentElement[0];                                                                    // 7562
      if (!node) {                                                                                                     // 7563
        return 'html';                                                                                                 // 7564
      } else {                                                                                                         // 7565
        return nodeName_(node) !== 'foreignobject' && node.toString().match(/SVG/) ? 'svg' : 'html';                   // 7566
      }                                                                                                                // 7567
    }                                                                                                                  // 7568
                                                                                                                       // 7569
    /**                                                                                                                // 7570
     * Compile function matches each node in nodeList against the directives. Once all directives                      // 7571
     * for a particular node are collected their compile functions are executed. The compile                           // 7572
     * functions return values - the linking functions - are combined into a composite linking                         // 7573
     * function, which is the a linking function for the node.                                                         // 7574
     *                                                                                                                 // 7575
     * @param {NodeList} nodeList an array of nodes or NodeList to compile                                             // 7576
     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the                     // 7577
     *        scope argument is auto-generated to the new child of the transcluded parent scope.                       // 7578
     * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then                      // 7579
     *        the rootElement must be set the jqLite collection of the compile root. This is                           // 7580
     *        needed so that the jqLite collection items can be replaced with widgets.                                 // 7581
     * @param {number=} maxPriority Max directive priority.                                                            // 7582
     * @returns {Function} A composite linking function of all of the matched directives or null.                      // 7583
     */                                                                                                                // 7584
    function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective,                          // 7585
                            previousCompileContext) {                                                                  // 7586
      var linkFns = [],                                                                                                // 7587
          attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound, nodeLinkFnFound;                        // 7588
                                                                                                                       // 7589
      for (var i = 0; i < nodeList.length; i++) {                                                                      // 7590
        attrs = new Attributes();                                                                                      // 7591
                                                                                                                       // 7592
        // we must always refer to nodeList[i] since the nodes can be replaced underneath us.                          // 7593
        directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined,                      // 7594
                                        ignoreDirective);                                                              // 7595
                                                                                                                       // 7596
        nodeLinkFn = (directives.length)                                                                               // 7597
            ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement,                        // 7598
                                      null, [], [], previousCompileContext)                                            // 7599
            : null;                                                                                                    // 7600
                                                                                                                       // 7601
        if (nodeLinkFn && nodeLinkFn.scope) {                                                                          // 7602
          compile.$$addScopeClass(attrs.$$element);                                                                    // 7603
        }                                                                                                              // 7604
                                                                                                                       // 7605
        childLinkFn = (nodeLinkFn && nodeLinkFn.terminal ||                                                            // 7606
                      !(childNodes = nodeList[i].childNodes) ||                                                        // 7607
                      !childNodes.length)                                                                              // 7608
            ? null                                                                                                     // 7609
            : compileNodes(childNodes,                                                                                 // 7610
                 nodeLinkFn ? (                                                                                        // 7611
                  (nodeLinkFn.transcludeOnThisElement || !nodeLinkFn.templateOnThisElement)                            // 7612
                     && nodeLinkFn.transclude) : transcludeFn);                                                        // 7613
                                                                                                                       // 7614
        if (nodeLinkFn || childLinkFn) {                                                                               // 7615
          linkFns.push(i, nodeLinkFn, childLinkFn);                                                                    // 7616
          linkFnFound = true;                                                                                          // 7617
          nodeLinkFnFound = nodeLinkFnFound || nodeLinkFn;                                                             // 7618
        }                                                                                                              // 7619
                                                                                                                       // 7620
        //use the previous context only for the first element in the virtual group                                     // 7621
        previousCompileContext = null;                                                                                 // 7622
      }                                                                                                                // 7623
                                                                                                                       // 7624
      // return a linking function if we have found anything, null otherwise                                           // 7625
      return linkFnFound ? compositeLinkFn : null;                                                                     // 7626
                                                                                                                       // 7627
      function compositeLinkFn(scope, nodeList, $rootElement, parentBoundTranscludeFn) {                               // 7628
        var nodeLinkFn, childLinkFn, node, childScope, i, ii, idx, childBoundTranscludeFn;                             // 7629
        var stableNodeList;                                                                                            // 7630
                                                                                                                       // 7631
                                                                                                                       // 7632
        if (nodeLinkFnFound) {                                                                                         // 7633
          // copy nodeList so that if a nodeLinkFn removes or adds an element at this DOM level our                    // 7634
          // offsets don't get screwed up                                                                              // 7635
          var nodeListLength = nodeList.length;                                                                        // 7636
          stableNodeList = new Array(nodeListLength);                                                                  // 7637
                                                                                                                       // 7638
          // create a sparse array by only copying the elements which have a linkFn                                    // 7639
          for (i = 0; i < linkFns.length; i+=3) {                                                                      // 7640
            idx = linkFns[i];                                                                                          // 7641
            stableNodeList[idx] = nodeList[idx];                                                                       // 7642
          }                                                                                                            // 7643
        } else {                                                                                                       // 7644
          stableNodeList = nodeList;                                                                                   // 7645
        }                                                                                                              // 7646
                                                                                                                       // 7647
        for (i = 0, ii = linkFns.length; i < ii;) {                                                                    // 7648
          node = stableNodeList[linkFns[i++]];                                                                         // 7649
          nodeLinkFn = linkFns[i++];                                                                                   // 7650
          childLinkFn = linkFns[i++];                                                                                  // 7651
                                                                                                                       // 7652
          if (nodeLinkFn) {                                                                                            // 7653
            if (nodeLinkFn.scope) {                                                                                    // 7654
              childScope = scope.$new();                                                                               // 7655
              compile.$$addScopeInfo(jqLite(node), childScope);                                                        // 7656
              var destroyBindings = nodeLinkFn.$$destroyBindings;                                                      // 7657
              if (destroyBindings) {                                                                                   // 7658
                nodeLinkFn.$$destroyBindings = null;                                                                   // 7659
                childScope.$on('$destroyed', destroyBindings);                                                         // 7660
              }                                                                                                        // 7661
            } else {                                                                                                   // 7662
              childScope = scope;                                                                                      // 7663
            }                                                                                                          // 7664
                                                                                                                       // 7665
            if (nodeLinkFn.transcludeOnThisElement) {                                                                  // 7666
              childBoundTranscludeFn = createBoundTranscludeFn(                                                        // 7667
                  scope, nodeLinkFn.transclude, parentBoundTranscludeFn);                                              // 7668
                                                                                                                       // 7669
            } else if (!nodeLinkFn.templateOnThisElement && parentBoundTranscludeFn) {                                 // 7670
              childBoundTranscludeFn = parentBoundTranscludeFn;                                                        // 7671
                                                                                                                       // 7672
            } else if (!parentBoundTranscludeFn && transcludeFn) {                                                     // 7673
              childBoundTranscludeFn = createBoundTranscludeFn(scope, transcludeFn);                                   // 7674
                                                                                                                       // 7675
            } else {                                                                                                   // 7676
              childBoundTranscludeFn = null;                                                                           // 7677
            }                                                                                                          // 7678
                                                                                                                       // 7679
            nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn,                            // 7680
                       nodeLinkFn);                                                                                    // 7681
                                                                                                                       // 7682
          } else if (childLinkFn) {                                                                                    // 7683
            childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn);                                   // 7684
          }                                                                                                            // 7685
        }                                                                                                              // 7686
      }                                                                                                                // 7687
    }                                                                                                                  // 7688
                                                                                                                       // 7689
    function createBoundTranscludeFn(scope, transcludeFn, previousBoundTranscludeFn) {                                 // 7690
                                                                                                                       // 7691
      var boundTranscludeFn = function(transcludedScope, cloneFn, controllers, futureParentElement, containingScope) {
                                                                                                                       // 7693
        if (!transcludedScope) {                                                                                       // 7694
          transcludedScope = scope.$new(false, containingScope);                                                       // 7695
          transcludedScope.$$transcluded = true;                                                                       // 7696
        }                                                                                                              // 7697
                                                                                                                       // 7698
        return transcludeFn(transcludedScope, cloneFn, {                                                               // 7699
          parentBoundTranscludeFn: previousBoundTranscludeFn,                                                          // 7700
          transcludeControllers: controllers,                                                                          // 7701
          futureParentElement: futureParentElement                                                                     // 7702
        });                                                                                                            // 7703
      };                                                                                                               // 7704
                                                                                                                       // 7705
      return boundTranscludeFn;                                                                                        // 7706
    }                                                                                                                  // 7707
                                                                                                                       // 7708
    /**                                                                                                                // 7709
     * Looks for directives on the given node and adds them to the directive collection which is                       // 7710
     * sorted.                                                                                                         // 7711
     *                                                                                                                 // 7712
     * @param node Node to search.                                                                                     // 7713
     * @param directives An array to which the directives are added to. This array is sorted before                    // 7714
     *        the function returns.                                                                                    // 7715
     * @param attrs The shared attrs object which is used to populate the normalized attributes.                       // 7716
     * @param {number=} maxPriority Max directive priority.                                                            // 7717
     */                                                                                                                // 7718
    function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {                                // 7719
      var nodeType = node.nodeType,                                                                                    // 7720
          attrsMap = attrs.$attr,                                                                                      // 7721
          match,                                                                                                       // 7722
          className;                                                                                                   // 7723
                                                                                                                       // 7724
      switch (nodeType) {                                                                                              // 7725
        case NODE_TYPE_ELEMENT: /* Element */                                                                          // 7726
          // use the node name: <directive>                                                                            // 7727
          addDirective(directives,                                                                                     // 7728
              directiveNormalize(nodeName_(node)), 'E', maxPriority, ignoreDirective);                                 // 7729
                                                                                                                       // 7730
          // iterate over the attributes                                                                               // 7731
          for (var attr, name, nName, ngAttrName, value, isNgAttr, nAttrs = node.attributes,                           // 7732
                   j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {                                                 // 7733
            var attrStartName = false;                                                                                 // 7734
            var attrEndName = false;                                                                                   // 7735
                                                                                                                       // 7736
            attr = nAttrs[j];                                                                                          // 7737
            name = attr.name;                                                                                          // 7738
            value = trim(attr.value);                                                                                  // 7739
                                                                                                                       // 7740
            // support ngAttr attribute binding                                                                        // 7741
            ngAttrName = directiveNormalize(name);                                                                     // 7742
            if (isNgAttr = NG_ATTR_BINDING.test(ngAttrName)) {                                                         // 7743
              name = name.replace(PREFIX_REGEXP, '')                                                                   // 7744
                .substr(8).replace(/_(.)/g, function(match, letter) {                                                  // 7745
                  return letter.toUpperCase();                                                                         // 7746
                });                                                                                                    // 7747
            }                                                                                                          // 7748
                                                                                                                       // 7749
            var directiveNName = ngAttrName.replace(/(Start|End)$/, '');                                               // 7750
            if (directiveIsMultiElement(directiveNName)) {                                                             // 7751
              if (ngAttrName === directiveNName + 'Start') {                                                           // 7752
                attrStartName = name;                                                                                  // 7753
                attrEndName = name.substr(0, name.length - 5) + 'end';                                                 // 7754
                name = name.substr(0, name.length - 6);                                                                // 7755
              }                                                                                                        // 7756
            }                                                                                                          // 7757
                                                                                                                       // 7758
            nName = directiveNormalize(name.toLowerCase());                                                            // 7759
            attrsMap[nName] = name;                                                                                    // 7760
            if (isNgAttr || !attrs.hasOwnProperty(nName)) {                                                            // 7761
                attrs[nName] = value;                                                                                  // 7762
                if (getBooleanAttrName(node, nName)) {                                                                 // 7763
                  attrs[nName] = true; // presence means true                                                          // 7764
                }                                                                                                      // 7765
            }                                                                                                          // 7766
            addAttrInterpolateDirective(node, directives, value, nName, isNgAttr);                                     // 7767
            addDirective(directives, nName, 'A', maxPriority, ignoreDirective, attrStartName,                          // 7768
                          attrEndName);                                                                                // 7769
          }                                                                                                            // 7770
                                                                                                                       // 7771
          // use class as directive                                                                                    // 7772
          className = node.className;                                                                                  // 7773
          if (isObject(className)) {                                                                                   // 7774
              // Maybe SVGAnimatedString                                                                               // 7775
              className = className.animVal;                                                                           // 7776
          }                                                                                                            // 7777
          if (isString(className) && className !== '') {                                                               // 7778
            while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {                                                   // 7779
              nName = directiveNormalize(match[2]);                                                                    // 7780
              if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {                                // 7781
                attrs[nName] = trim(match[3]);                                                                         // 7782
              }                                                                                                        // 7783
              className = className.substr(match.index + match[0].length);                                             // 7784
            }                                                                                                          // 7785
          }                                                                                                            // 7786
          break;                                                                                                       // 7787
        case NODE_TYPE_TEXT: /* Text Node */                                                                           // 7788
          if (msie === 11) {                                                                                           // 7789
            // Workaround for #11781                                                                                   // 7790
            while (node.parentNode && node.nextSibling && node.nextSibling.nodeType === NODE_TYPE_TEXT) {              // 7791
              node.nodeValue = node.nodeValue + node.nextSibling.nodeValue;                                            // 7792
              node.parentNode.removeChild(node.nextSibling);                                                           // 7793
            }                                                                                                          // 7794
          }                                                                                                            // 7795
          addTextInterpolateDirective(directives, node.nodeValue);                                                     // 7796
          break;                                                                                                       // 7797
        case NODE_TYPE_COMMENT: /* Comment */                                                                          // 7798
          try {                                                                                                        // 7799
            match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);                                                     // 7800
            if (match) {                                                                                               // 7801
              nName = directiveNormalize(match[1]);                                                                    // 7802
              if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {                                // 7803
                attrs[nName] = trim(match[2]);                                                                         // 7804
              }                                                                                                        // 7805
            }                                                                                                          // 7806
          } catch (e) {                                                                                                // 7807
            // turns out that under some circumstances IE9 throws errors when one attempts to read                     // 7808
            // comment's node value.                                                                                   // 7809
            // Just ignore it and continue. (Can't seem to reproduce in test case.)                                    // 7810
          }                                                                                                            // 7811
          break;                                                                                                       // 7812
      }                                                                                                                // 7813
                                                                                                                       // 7814
      directives.sort(byPriority);                                                                                     // 7815
      return directives;                                                                                               // 7816
    }                                                                                                                  // 7817
                                                                                                                       // 7818
    /**                                                                                                                // 7819
     * Given a node with an directive-start it collects all of the siblings until it finds                             // 7820
     * directive-end.                                                                                                  // 7821
     * @param node                                                                                                     // 7822
     * @param attrStart                                                                                                // 7823
     * @param attrEnd                                                                                                  // 7824
     * @returns {*}                                                                                                    // 7825
     */                                                                                                                // 7826
    function groupScan(node, attrStart, attrEnd) {                                                                     // 7827
      var nodes = [];                                                                                                  // 7828
      var depth = 0;                                                                                                   // 7829
      if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {                                            // 7830
        do {                                                                                                           // 7831
          if (!node) {                                                                                                 // 7832
            throw $compileMinErr('uterdir',                                                                            // 7833
                      "Unterminated attribute, found '{0}' but no matching '{1}' found.",                              // 7834
                      attrStart, attrEnd);                                                                             // 7835
          }                                                                                                            // 7836
          if (node.nodeType == NODE_TYPE_ELEMENT) {                                                                    // 7837
            if (node.hasAttribute(attrStart)) depth++;                                                                 // 7838
            if (node.hasAttribute(attrEnd)) depth--;                                                                   // 7839
          }                                                                                                            // 7840
          nodes.push(node);                                                                                            // 7841
          node = node.nextSibling;                                                                                     // 7842
        } while (depth > 0);                                                                                           // 7843
      } else {                                                                                                         // 7844
        nodes.push(node);                                                                                              // 7845
      }                                                                                                                // 7846
                                                                                                                       // 7847
      return jqLite(nodes);                                                                                            // 7848
    }                                                                                                                  // 7849
                                                                                                                       // 7850
    /**                                                                                                                // 7851
     * Wrapper for linking function which converts normal linking function into a grouped                              // 7852
     * linking function.                                                                                               // 7853
     * @param linkFn                                                                                                   // 7854
     * @param attrStart                                                                                                // 7855
     * @param attrEnd                                                                                                  // 7856
     * @returns {Function}                                                                                             // 7857
     */                                                                                                                // 7858
    function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {                                                  // 7859
      return function(scope, element, attrs, controllers, transcludeFn) {                                              // 7860
        element = groupScan(element[0], attrStart, attrEnd);                                                           // 7861
        return linkFn(scope, element, attrs, controllers, transcludeFn);                                               // 7862
      };                                                                                                               // 7863
    }                                                                                                                  // 7864
                                                                                                                       // 7865
    /**                                                                                                                // 7866
     * Once the directives have been collected, their compile functions are executed. This method                      // 7867
     * is responsible for inlining directive templates as well as terminating the application                          // 7868
     * of the directives if the terminal directive has been reached.                                                   // 7869
     *                                                                                                                 // 7870
     * @param {Array} directives Array of collected directives to execute their compile function.                      // 7871
     *        this needs to be pre-sorted by priority order.                                                           // 7872
     * @param {Node} compileNode The raw DOM node to apply the compile functions to                                    // 7873
     * @param {Object} templateAttrs The shared attribute function                                                     // 7874
     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the                     // 7875
     *                                                  scope argument is auto-generated to the new                    // 7876
     *                                                  child of the transcluded parent scope.                         // 7877
     * @param {JQLite} jqCollection If we are working on the root of the compile tree then this                        // 7878
     *                              argument has the root jqLite array so that we can replace nodes                    // 7879
     *                              on it.                                                                             // 7880
     * @param {Object=} originalReplaceDirective An optional directive that will be ignored when                       // 7881
     *                                           compiling the transclusion.                                           // 7882
     * @param {Array.<Function>} preLinkFns                                                                            // 7883
     * @param {Array.<Function>} postLinkFns                                                                           // 7884
     * @param {Object} previousCompileContext Context used for previous compilation of the current                     // 7885
     *                                        node                                                                     // 7886
     * @returns {Function} linkFn                                                                                      // 7887
     */                                                                                                                // 7888
    function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn,                               // 7889
                                   jqCollection, originalReplaceDirective, preLinkFns, postLinkFns,                    // 7890
                                   previousCompileContext) {                                                           // 7891
      previousCompileContext = previousCompileContext || {};                                                           // 7892
                                                                                                                       // 7893
      var terminalPriority = -Number.MAX_VALUE,                                                                        // 7894
          newScopeDirective = previousCompileContext.newScopeDirective,                                                // 7895
          controllerDirectives = previousCompileContext.controllerDirectives,                                          // 7896
          newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective,                                  // 7897
          templateDirective = previousCompileContext.templateDirective,                                                // 7898
          nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective,                                // 7899
          hasTranscludeDirective = false,                                                                              // 7900
          hasTemplate = false,                                                                                         // 7901
          hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective,                        // 7902
          $compileNode = templateAttrs.$$element = jqLite(compileNode),                                                // 7903
          directive,                                                                                                   // 7904
          directiveName,                                                                                               // 7905
          $template,                                                                                                   // 7906
          replaceDirective = originalReplaceDirective,                                                                 // 7907
          childTranscludeFn = transcludeFn,                                                                            // 7908
          linkFn,                                                                                                      // 7909
          directiveValue;                                                                                              // 7910
                                                                                                                       // 7911
      // executes all directives on the current element                                                                // 7912
      for (var i = 0, ii = directives.length; i < ii; i++) {                                                           // 7913
        directive = directives[i];                                                                                     // 7914
        var attrStart = directive.$$start;                                                                             // 7915
        var attrEnd = directive.$$end;                                                                                 // 7916
                                                                                                                       // 7917
        // collect multiblock sections                                                                                 // 7918
        if (attrStart) {                                                                                               // 7919
          $compileNode = groupScan(compileNode, attrStart, attrEnd);                                                   // 7920
        }                                                                                                              // 7921
        $template = undefined;                                                                                         // 7922
                                                                                                                       // 7923
        if (terminalPriority > directive.priority) {                                                                   // 7924
          break; // prevent further processing of directives                                                           // 7925
        }                                                                                                              // 7926
                                                                                                                       // 7927
        if (directiveValue = directive.scope) {                                                                        // 7928
                                                                                                                       // 7929
          // skip the check for directives with async templates, we'll check the derived sync                          // 7930
          // directive when the template arrives                                                                       // 7931
          if (!directive.templateUrl) {                                                                                // 7932
            if (isObject(directiveValue)) {                                                                            // 7933
              // This directive is trying to add an isolated scope.                                                    // 7934
              // Check that there is no scope of any kind already                                                      // 7935
              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective || newScopeDirective,                   // 7936
                                directive, $compileNode);                                                              // 7937
              newIsolateScopeDirective = directive;                                                                    // 7938
            } else {                                                                                                   // 7939
              // This directive is trying to add a child scope.                                                        // 7940
              // Check that there is no isolated scope already                                                         // 7941
              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective, directive,                             // 7942
                                $compileNode);                                                                         // 7943
            }                                                                                                          // 7944
          }                                                                                                            // 7945
                                                                                                                       // 7946
          newScopeDirective = newScopeDirective || directive;                                                          // 7947
        }                                                                                                              // 7948
                                                                                                                       // 7949
        directiveName = directive.name;                                                                                // 7950
                                                                                                                       // 7951
        if (!directive.templateUrl && directive.controller) {                                                          // 7952
          directiveValue = directive.controller;                                                                       // 7953
          controllerDirectives = controllerDirectives || createMap();                                                  // 7954
          assertNoDuplicate("'" + directiveName + "' controller",                                                      // 7955
              controllerDirectives[directiveName], directive, $compileNode);                                           // 7956
          controllerDirectives[directiveName] = directive;                                                             // 7957
        }                                                                                                              // 7958
                                                                                                                       // 7959
        if (directiveValue = directive.transclude) {                                                                   // 7960
          hasTranscludeDirective = true;                                                                               // 7961
                                                                                                                       // 7962
          // Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.                    // 7963
          // This option should only be used by directives that know how to safely handle element transclusion,        // 7964
          // where the transcluded nodes are added or replaced after linking.                                          // 7965
          if (!directive.$$tlb) {                                                                                      // 7966
            assertNoDuplicate('transclusion', nonTlbTranscludeDirective, directive, $compileNode);                     // 7967
            nonTlbTranscludeDirective = directive;                                                                     // 7968
          }                                                                                                            // 7969
                                                                                                                       // 7970
          if (directiveValue == 'element') {                                                                           // 7971
            hasElementTranscludeDirective = true;                                                                      // 7972
            terminalPriority = directive.priority;                                                                     // 7973
            $template = $compileNode;                                                                                  // 7974
            $compileNode = templateAttrs.$$element =                                                                   // 7975
                jqLite(document.createComment(' ' + directiveName + ': ' +                                             // 7976
                                              templateAttrs[directiveName] + ' '));                                    // 7977
            compileNode = $compileNode[0];                                                                             // 7978
            replaceWith(jqCollection, sliceArgs($template), compileNode);                                              // 7979
                                                                                                                       // 7980
            childTranscludeFn = compile($template, transcludeFn, terminalPriority,                                     // 7981
                                        replaceDirective && replaceDirective.name, {                                   // 7982
                                          // Don't pass in:                                                            // 7983
                                          // - controllerDirectives - otherwise we'll create duplicates controllers    // 7984
                                          // - newIsolateScopeDirective or templateDirective - combining templates with
                                          //   element transclusion doesn't make sense.                                // 7986
                                          //                                                                           // 7987
                                          // We need only nonTlbTranscludeDirective so that we prevent putting transclusion
                                          // on the same element more than once.                                       // 7989
                                          nonTlbTranscludeDirective: nonTlbTranscludeDirective                         // 7990
                                        });                                                                            // 7991
          } else {                                                                                                     // 7992
            $template = jqLite(jqLiteClone(compileNode)).contents();                                                   // 7993
            $compileNode.empty(); // clear contents                                                                    // 7994
            childTranscludeFn = compile($template, transcludeFn);                                                      // 7995
          }                                                                                                            // 7996
        }                                                                                                              // 7997
                                                                                                                       // 7998
        if (directive.template) {                                                                                      // 7999
          hasTemplate = true;                                                                                          // 8000
          assertNoDuplicate('template', templateDirective, directive, $compileNode);                                   // 8001
          templateDirective = directive;                                                                               // 8002
                                                                                                                       // 8003
          directiveValue = (isFunction(directive.template))                                                            // 8004
              ? directive.template($compileNode, templateAttrs)                                                        // 8005
              : directive.template;                                                                                    // 8006
                                                                                                                       // 8007
          directiveValue = denormalizeTemplate(directiveValue);                                                        // 8008
                                                                                                                       // 8009
          if (directive.replace) {                                                                                     // 8010
            replaceDirective = directive;                                                                              // 8011
            if (jqLiteIsTextNode(directiveValue)) {                                                                    // 8012
              $template = [];                                                                                          // 8013
            } else {                                                                                                   // 8014
              $template = removeComments(wrapTemplate(directive.templateNamespace, trim(directiveValue)));             // 8015
            }                                                                                                          // 8016
            compileNode = $template[0];                                                                                // 8017
                                                                                                                       // 8018
            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {                                 // 8019
              throw $compileMinErr('tplrt',                                                                            // 8020
                  "Template for directive '{0}' must have exactly one root element. {1}",                              // 8021
                  directiveName, '');                                                                                  // 8022
            }                                                                                                          // 8023
                                                                                                                       // 8024
            replaceWith(jqCollection, $compileNode, compileNode);                                                      // 8025
                                                                                                                       // 8026
            var newTemplateAttrs = {$attr: {}};                                                                        // 8027
                                                                                                                       // 8028
            // combine directives from the original node and from the template:                                        // 8029
            // - take the array of directives for this element                                                         // 8030
            // - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)  // 8031
            // - collect directives from the template and sort them by priority                                        // 8032
            // - combine directives as: processed + template + unprocessed                                             // 8033
            var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);                             // 8034
            var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));                         // 8035
                                                                                                                       // 8036
            if (newIsolateScopeDirective) {                                                                            // 8037
              markDirectivesAsIsolate(templateDirectives);                                                             // 8038
            }                                                                                                          // 8039
            directives = directives.concat(templateDirectives).concat(unprocessedDirectives);                          // 8040
            mergeTemplateAttributes(templateAttrs, newTemplateAttrs);                                                  // 8041
                                                                                                                       // 8042
            ii = directives.length;                                                                                    // 8043
          } else {                                                                                                     // 8044
            $compileNode.html(directiveValue);                                                                         // 8045
          }                                                                                                            // 8046
        }                                                                                                              // 8047
                                                                                                                       // 8048
        if (directive.templateUrl) {                                                                                   // 8049
          hasTemplate = true;                                                                                          // 8050
          assertNoDuplicate('template', templateDirective, directive, $compileNode);                                   // 8051
          templateDirective = directive;                                                                               // 8052
                                                                                                                       // 8053
          if (directive.replace) {                                                                                     // 8054
            replaceDirective = directive;                                                                              // 8055
          }                                                                                                            // 8056
                                                                                                                       // 8057
          nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode,                   // 8058
              templateAttrs, jqCollection, hasTranscludeDirective && childTranscludeFn, preLinkFns, postLinkFns, {     // 8059
                controllerDirectives: controllerDirectives,                                                            // 8060
                newScopeDirective: (newScopeDirective !== directive) && newScopeDirective,                             // 8061
                newIsolateScopeDirective: newIsolateScopeDirective,                                                    // 8062
                templateDirective: templateDirective,                                                                  // 8063
                nonTlbTranscludeDirective: nonTlbTranscludeDirective                                                   // 8064
              });                                                                                                      // 8065
          ii = directives.length;                                                                                      // 8066
        } else if (directive.compile) {                                                                                // 8067
          try {                                                                                                        // 8068
            linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);                                // 8069
            if (isFunction(linkFn)) {                                                                                  // 8070
              addLinkFns(null, linkFn, attrStart, attrEnd);                                                            // 8071
            } else if (linkFn) {                                                                                       // 8072
              addLinkFns(linkFn.pre, linkFn.post, attrStart, attrEnd);                                                 // 8073
            }                                                                                                          // 8074
          } catch (e) {                                                                                                // 8075
            $exceptionHandler(e, startingTag($compileNode));                                                           // 8076
          }                                                                                                            // 8077
        }                                                                                                              // 8078
                                                                                                                       // 8079
        if (directive.terminal) {                                                                                      // 8080
          nodeLinkFn.terminal = true;                                                                                  // 8081
          terminalPriority = Math.max(terminalPriority, directive.priority);                                           // 8082
        }                                                                                                              // 8083
                                                                                                                       // 8084
      }                                                                                                                // 8085
                                                                                                                       // 8086
      nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;                                        // 8087
      nodeLinkFn.transcludeOnThisElement = hasTranscludeDirective;                                                     // 8088
      nodeLinkFn.templateOnThisElement = hasTemplate;                                                                  // 8089
      nodeLinkFn.transclude = childTranscludeFn;                                                                       // 8090
                                                                                                                       // 8091
      previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;                            // 8092
                                                                                                                       // 8093
      // might be normal or delayed nodeLinkFn depending on if templateUrl is present                                  // 8094
      return nodeLinkFn;                                                                                               // 8095
                                                                                                                       // 8096
      ////////////////////                                                                                             // 8097
                                                                                                                       // 8098
      function addLinkFns(pre, post, attrStart, attrEnd) {                                                             // 8099
        if (pre) {                                                                                                     // 8100
          if (attrStart) pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);                                    // 8101
          pre.require = directive.require;                                                                             // 8102
          pre.directiveName = directiveName;                                                                           // 8103
          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {                                    // 8104
            pre = cloneAndAnnotateFn(pre, {isolateScope: true});                                                       // 8105
          }                                                                                                            // 8106
          preLinkFns.push(pre);                                                                                        // 8107
        }                                                                                                              // 8108
        if (post) {                                                                                                    // 8109
          if (attrStart) post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);                                  // 8110
          post.require = directive.require;                                                                            // 8111
          post.directiveName = directiveName;                                                                          // 8112
          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {                                    // 8113
            post = cloneAndAnnotateFn(post, {isolateScope: true});                                                     // 8114
          }                                                                                                            // 8115
          postLinkFns.push(post);                                                                                      // 8116
        }                                                                                                              // 8117
      }                                                                                                                // 8118
                                                                                                                       // 8119
                                                                                                                       // 8120
      function getControllers(directiveName, require, $element, elementControllers) {                                  // 8121
        var value;                                                                                                     // 8122
                                                                                                                       // 8123
        if (isString(require)) {                                                                                       // 8124
          var match = require.match(REQUIRE_PREFIX_REGEXP);                                                            // 8125
          var name = require.substring(match[0].length);                                                               // 8126
          var inheritType = match[1] || match[3];                                                                      // 8127
          var optional = match[2] === '?';                                                                             // 8128
                                                                                                                       // 8129
          //If only parents then start at the parent element                                                           // 8130
          if (inheritType === '^^') {                                                                                  // 8131
            $element = $element.parent();                                                                              // 8132
          //Otherwise attempt getting the controller from elementControllers in case                                   // 8133
          //the element is transcluded (and has no data) and to avoid .data if possible                                // 8134
          } else {                                                                                                     // 8135
            value = elementControllers && elementControllers[name];                                                    // 8136
            value = value && value.instance;                                                                           // 8137
          }                                                                                                            // 8138
                                                                                                                       // 8139
          if (!value) {                                                                                                // 8140
            var dataName = '$' + name + 'Controller';                                                                  // 8141
            value = inheritType ? $element.inheritedData(dataName) : $element.data(dataName);                          // 8142
          }                                                                                                            // 8143
                                                                                                                       // 8144
          if (!value && !optional) {                                                                                   // 8145
            throw $compileMinErr('ctreq',                                                                              // 8146
                "Controller '{0}', required by directive '{1}', can't be found!",                                      // 8147
                name, directiveName);                                                                                  // 8148
          }                                                                                                            // 8149
        } else if (isArray(require)) {                                                                                 // 8150
          value = [];                                                                                                  // 8151
          for (var i = 0, ii = require.length; i < ii; i++) {                                                          // 8152
            value[i] = getControllers(directiveName, require[i], $element, elementControllers);                        // 8153
          }                                                                                                            // 8154
        }                                                                                                              // 8155
                                                                                                                       // 8156
        return value || null;                                                                                          // 8157
      }                                                                                                                // 8158
                                                                                                                       // 8159
      function setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope) {            // 8160
        var elementControllers = createMap();                                                                          // 8161
        for (var controllerKey in controllerDirectives) {                                                              // 8162
          var directive = controllerDirectives[controllerKey];                                                         // 8163
          var locals = {                                                                                               // 8164
            $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,         // 8165
            $element: $element,                                                                                        // 8166
            $attrs: attrs,                                                                                             // 8167
            $transclude: transcludeFn                                                                                  // 8168
          };                                                                                                           // 8169
                                                                                                                       // 8170
          var controller = directive.controller;                                                                       // 8171
          if (controller == '@') {                                                                                     // 8172
            controller = attrs[directive.name];                                                                        // 8173
          }                                                                                                            // 8174
                                                                                                                       // 8175
          var controllerInstance = $controller(controller, locals, true, directive.controllerAs);                      // 8176
                                                                                                                       // 8177
          // For directives with element transclusion the element is a comment,                                        // 8178
          // but jQuery .data doesn't support attaching data to comment nodes as it's hard to                          // 8179
          // clean up (http://bugs.jquery.com/ticket/8335).                                                            // 8180
          // Instead, we save the controllers for the element in a local hash and attach to .data                      // 8181
          // later, once we have the actual element.                                                                   // 8182
          elementControllers[directive.name] = controllerInstance;                                                     // 8183
          if (!hasElementTranscludeDirective) {                                                                        // 8184
            $element.data('$' + directive.name + 'Controller', controllerInstance.instance);                           // 8185
          }                                                                                                            // 8186
        }                                                                                                              // 8187
        return elementControllers;                                                                                     // 8188
      }                                                                                                                // 8189
                                                                                                                       // 8190
      function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn,                               // 8191
                          thisLinkFn) {                                                                                // 8192
        var i, ii, linkFn, controller, isolateScope, elementControllers, transcludeFn, $element,                       // 8193
            attrs;                                                                                                     // 8194
                                                                                                                       // 8195
        if (compileNode === linkNode) {                                                                                // 8196
          attrs = templateAttrs;                                                                                       // 8197
          $element = templateAttrs.$$element;                                                                          // 8198
        } else {                                                                                                       // 8199
          $element = jqLite(linkNode);                                                                                 // 8200
          attrs = new Attributes($element, templateAttrs);                                                             // 8201
        }                                                                                                              // 8202
                                                                                                                       // 8203
        if (newIsolateScopeDirective) {                                                                                // 8204
          isolateScope = scope.$new(true);                                                                             // 8205
        }                                                                                                              // 8206
                                                                                                                       // 8207
        if (boundTranscludeFn) {                                                                                       // 8208
          // track `boundTranscludeFn` so it can be unwrapped if `transcludeFn`                                        // 8209
          // is later passed as `parentBoundTranscludeFn` to `publicLinkFn`                                            // 8210
          transcludeFn = controllersBoundTransclude;                                                                   // 8211
          transcludeFn.$$boundTransclude = boundTranscludeFn;                                                          // 8212
        }                                                                                                              // 8213
                                                                                                                       // 8214
        if (controllerDirectives) {                                                                                    // 8215
          elementControllers = setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope);
        }                                                                                                              // 8217
                                                                                                                       // 8218
        if (newIsolateScopeDirective) {                                                                                // 8219
          // Initialize isolate scope bindings for new isolate scope directive.                                        // 8220
          compile.$$addScopeInfo($element, isolateScope, true, !(templateDirective && (templateDirective === newIsolateScopeDirective ||
              templateDirective === newIsolateScopeDirective.$$originalDirective)));                                   // 8222
          compile.$$addScopeClass($element, true);                                                                     // 8223
          isolateScope.$$isolateBindings =                                                                             // 8224
              newIsolateScopeDirective.$$isolateBindings;                                                              // 8225
          initializeDirectiveBindings(scope, attrs, isolateScope,                                                      // 8226
                                      isolateScope.$$isolateBindings,                                                  // 8227
                                      newIsolateScopeDirective, isolateScope);                                         // 8228
        }                                                                                                              // 8229
        if (elementControllers) {                                                                                      // 8230
          // Initialize bindToController bindings for new/isolate scopes                                               // 8231
          var scopeDirective = newIsolateScopeDirective || newScopeDirective;                                          // 8232
          var bindings;                                                                                                // 8233
          var controllerForBindings;                                                                                   // 8234
          if (scopeDirective && elementControllers[scopeDirective.name]) {                                             // 8235
            bindings = scopeDirective.$$bindings.bindToController;                                                     // 8236
            controller = elementControllers[scopeDirective.name];                                                      // 8237
                                                                                                                       // 8238
            if (controller && controller.identifier && bindings) {                                                     // 8239
              controllerForBindings = controller;                                                                      // 8240
              thisLinkFn.$$destroyBindings =                                                                           // 8241
                  initializeDirectiveBindings(scope, attrs, controller.instance,                                       // 8242
                                              bindings, scopeDirective);                                               // 8243
            }                                                                                                          // 8244
          }                                                                                                            // 8245
          for (i in elementControllers) {                                                                              // 8246
            controller = elementControllers[i];                                                                        // 8247
            var controllerResult = controller();                                                                       // 8248
                                                                                                                       // 8249
            if (controllerResult !== controller.instance) {                                                            // 8250
              // If the controller constructor has a return value, overwrite the instance                              // 8251
              // from setupControllers and update the element data                                                     // 8252
              controller.instance = controllerResult;                                                                  // 8253
              $element.data('$' + i + 'Controller', controllerResult);                                                 // 8254
              if (controller === controllerForBindings) {                                                              // 8255
                // Remove and re-install bindToController bindings                                                     // 8256
                thisLinkFn.$$destroyBindings();                                                                        // 8257
                thisLinkFn.$$destroyBindings =                                                                         // 8258
                  initializeDirectiveBindings(scope, attrs, controllerResult, bindings, scopeDirective);               // 8259
              }                                                                                                        // 8260
            }                                                                                                          // 8261
          }                                                                                                            // 8262
        }                                                                                                              // 8263
                                                                                                                       // 8264
        // PRELINKING                                                                                                  // 8265
        for (i = 0, ii = preLinkFns.length; i < ii; i++) {                                                             // 8266
          linkFn = preLinkFns[i];                                                                                      // 8267
          invokeLinkFn(linkFn,                                                                                         // 8268
              linkFn.isolateScope ? isolateScope : scope,                                                              // 8269
              $element,                                                                                                // 8270
              attrs,                                                                                                   // 8271
              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),    // 8272
              transcludeFn                                                                                             // 8273
          );                                                                                                           // 8274
        }                                                                                                              // 8275
                                                                                                                       // 8276
        // RECURSION                                                                                                   // 8277
        // We only pass the isolate scope, if the isolate directive has a template,                                    // 8278
        // otherwise the child elements do not belong to the isolate directive.                                        // 8279
        var scopeToChild = scope;                                                                                      // 8280
        if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {
          scopeToChild = isolateScope;                                                                                 // 8282
        }                                                                                                              // 8283
        childLinkFn && childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);                   // 8284
                                                                                                                       // 8285
        // POSTLINKING                                                                                                 // 8286
        for (i = postLinkFns.length - 1; i >= 0; i--) {                                                                // 8287
          linkFn = postLinkFns[i];                                                                                     // 8288
          invokeLinkFn(linkFn,                                                                                         // 8289
              linkFn.isolateScope ? isolateScope : scope,                                                              // 8290
              $element,                                                                                                // 8291
              attrs,                                                                                                   // 8292
              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),    // 8293
              transcludeFn                                                                                             // 8294
          );                                                                                                           // 8295
        }                                                                                                              // 8296
                                                                                                                       // 8297
        // This is the function that is injected as `$transclude`.                                                     // 8298
        // Note: all arguments are optional!                                                                           // 8299
        function controllersBoundTransclude(scope, cloneAttachFn, futureParentElement) {                               // 8300
          var transcludeControllers;                                                                                   // 8301
                                                                                                                       // 8302
          // No scope passed in:                                                                                       // 8303
          if (!isScope(scope)) {                                                                                       // 8304
            futureParentElement = cloneAttachFn;                                                                       // 8305
            cloneAttachFn = scope;                                                                                     // 8306
            scope = undefined;                                                                                         // 8307
          }                                                                                                            // 8308
                                                                                                                       // 8309
          if (hasElementTranscludeDirective) {                                                                         // 8310
            transcludeControllers = elementControllers;                                                                // 8311
          }                                                                                                            // 8312
          if (!futureParentElement) {                                                                                  // 8313
            futureParentElement = hasElementTranscludeDirective ? $element.parent() : $element;                        // 8314
          }                                                                                                            // 8315
          return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);    // 8316
        }                                                                                                              // 8317
      }                                                                                                                // 8318
    }                                                                                                                  // 8319
                                                                                                                       // 8320
    function markDirectivesAsIsolate(directives) {                                                                     // 8321
      // mark all directives as needing isolate scope.                                                                 // 8322
      for (var j = 0, jj = directives.length; j < jj; j++) {                                                           // 8323
        directives[j] = inherit(directives[j], {$$isolateScope: true});                                                // 8324
      }                                                                                                                // 8325
    }                                                                                                                  // 8326
                                                                                                                       // 8327
    /**                                                                                                                // 8328
     * looks up the directive and decorates it with exception handling and proper parameters. We                       // 8329
     * call this the boundDirective.                                                                                   // 8330
     *                                                                                                                 // 8331
     * @param {string} name name of the directive to look up.                                                          // 8332
     * @param {string} location The directive must be found in specific format.                                        // 8333
     *   String containing any of theses characters:                                                                   // 8334
     *                                                                                                                 // 8335
     *   * `E`: element name                                                                                           // 8336
     *   * `A': attribute                                                                                              // 8337
     *   * `C`: class                                                                                                  // 8338
     *   * `M`: comment                                                                                                // 8339
     * @returns {boolean} true if directive was added.                                                                 // 8340
     */                                                                                                                // 8341
    function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName,                    // 8342
                          endAttrName) {                                                                               // 8343
      if (name === ignoreDirective) return null;                                                                       // 8344
      var match = null;                                                                                                // 8345
      if (hasDirectives.hasOwnProperty(name)) {                                                                        // 8346
        for (var directive, directives = $injector.get(name + Suffix),                                                 // 8347
            i = 0, ii = directives.length; i < ii; i++) {                                                              // 8348
          try {                                                                                                        // 8349
            directive = directives[i];                                                                                 // 8350
            if ((isUndefined(maxPriority) || maxPriority > directive.priority) &&                                      // 8351
                 directive.restrict.indexOf(location) != -1) {                                                         // 8352
              if (startAttrName) {                                                                                     // 8353
                directive = inherit(directive, {$$start: startAttrName, $$end: endAttrName});                          // 8354
              }                                                                                                        // 8355
              tDirectives.push(directive);                                                                             // 8356
              match = directive;                                                                                       // 8357
            }                                                                                                          // 8358
          } catch (e) { $exceptionHandler(e); }                                                                        // 8359
        }                                                                                                              // 8360
      }                                                                                                                // 8361
      return match;                                                                                                    // 8362
    }                                                                                                                  // 8363
                                                                                                                       // 8364
                                                                                                                       // 8365
    /**                                                                                                                // 8366
     * looks up the directive and returns true if it is a multi-element directive,                                     // 8367
     * and therefore requires DOM nodes between -start and -end markers to be grouped                                  // 8368
     * together.                                                                                                       // 8369
     *                                                                                                                 // 8370
     * @param {string} name name of the directive to look up.                                                          // 8371
     * @returns true if directive was registered as multi-element.                                                     // 8372
     */                                                                                                                // 8373
    function directiveIsMultiElement(name) {                                                                           // 8374
      if (hasDirectives.hasOwnProperty(name)) {                                                                        // 8375
        for (var directive, directives = $injector.get(name + Suffix),                                                 // 8376
            i = 0, ii = directives.length; i < ii; i++) {                                                              // 8377
          directive = directives[i];                                                                                   // 8378
          if (directive.multiElement) {                                                                                // 8379
            return true;                                                                                               // 8380
          }                                                                                                            // 8381
        }                                                                                                              // 8382
      }                                                                                                                // 8383
      return false;                                                                                                    // 8384
    }                                                                                                                  // 8385
                                                                                                                       // 8386
    /**                                                                                                                // 8387
     * When the element is replaced with HTML template then the new attributes                                         // 8388
     * on the template need to be merged with the existing attributes in the DOM.                                      // 8389
     * The desired effect is to have both of the attributes present.                                                   // 8390
     *                                                                                                                 // 8391
     * @param {object} dst destination attributes (original DOM)                                                       // 8392
     * @param {object} src source attributes (from the directive template)                                             // 8393
     */                                                                                                                // 8394
    function mergeTemplateAttributes(dst, src) {                                                                       // 8395
      var srcAttr = src.$attr,                                                                                         // 8396
          dstAttr = dst.$attr,                                                                                         // 8397
          $element = dst.$$element;                                                                                    // 8398
                                                                                                                       // 8399
      // reapply the old attributes to the new element                                                                 // 8400
      forEach(dst, function(value, key) {                                                                              // 8401
        if (key.charAt(0) != '$') {                                                                                    // 8402
          if (src[key] && src[key] !== value) {                                                                        // 8403
            value += (key === 'style' ? ';' : ' ') + src[key];                                                         // 8404
          }                                                                                                            // 8405
          dst.$set(key, value, true, srcAttr[key]);                                                                    // 8406
        }                                                                                                              // 8407
      });                                                                                                              // 8408
                                                                                                                       // 8409
      // copy the new attributes on the old attrs object                                                               // 8410
      forEach(src, function(value, key) {                                                                              // 8411
        if (key == 'class') {                                                                                          // 8412
          safeAddClass($element, value);                                                                               // 8413
          dst['class'] = (dst['class'] ? dst['class'] + ' ' : '') + value;                                             // 8414
        } else if (key == 'style') {                                                                                   // 8415
          $element.attr('style', $element.attr('style') + ';' + value);                                                // 8416
          dst['style'] = (dst['style'] ? dst['style'] + ';' : '') + value;                                             // 8417
          // `dst` will never contain hasOwnProperty as DOM parser won't let it.                                       // 8418
          // You will get an "InvalidCharacterError: DOM Exception 5" error if you                                     // 8419
          // have an attribute like "has-own-property" or "data-has-own-property", etc.                                // 8420
        } else if (key.charAt(0) != '$' && !dst.hasOwnProperty(key)) {                                                 // 8421
          dst[key] = value;                                                                                            // 8422
          dstAttr[key] = srcAttr[key];                                                                                 // 8423
        }                                                                                                              // 8424
      });                                                                                                              // 8425
    }                                                                                                                  // 8426
                                                                                                                       // 8427
                                                                                                                       // 8428
    function compileTemplateUrl(directives, $compileNode, tAttrs,                                                      // 8429
        $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {                            // 8430
      var linkQueue = [],                                                                                              // 8431
          afterTemplateNodeLinkFn,                                                                                     // 8432
          afterTemplateChildLinkFn,                                                                                    // 8433
          beforeTemplateCompileNode = $compileNode[0],                                                                 // 8434
          origAsyncDirective = directives.shift(),                                                                     // 8435
          derivedSyncDirective = inherit(origAsyncDirective, {                                                         // 8436
            templateUrl: null, transclude: null, replace: null, $$originalDirective: origAsyncDirective                // 8437
          }),                                                                                                          // 8438
          templateUrl = (isFunction(origAsyncDirective.templateUrl))                                                   // 8439
              ? origAsyncDirective.templateUrl($compileNode, tAttrs)                                                   // 8440
              : origAsyncDirective.templateUrl,                                                                        // 8441
          templateNamespace = origAsyncDirective.templateNamespace;                                                    // 8442
                                                                                                                       // 8443
      $compileNode.empty();                                                                                            // 8444
                                                                                                                       // 8445
      $templateRequest(templateUrl)                                                                                    // 8446
        .then(function(content) {                                                                                      // 8447
          var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;                                       // 8448
                                                                                                                       // 8449
          content = denormalizeTemplate(content);                                                                      // 8450
                                                                                                                       // 8451
          if (origAsyncDirective.replace) {                                                                            // 8452
            if (jqLiteIsTextNode(content)) {                                                                           // 8453
              $template = [];                                                                                          // 8454
            } else {                                                                                                   // 8455
              $template = removeComments(wrapTemplate(templateNamespace, trim(content)));                              // 8456
            }                                                                                                          // 8457
            compileNode = $template[0];                                                                                // 8458
                                                                                                                       // 8459
            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {                                 // 8460
              throw $compileMinErr('tplrt',                                                                            // 8461
                  "Template for directive '{0}' must have exactly one root element. {1}",                              // 8462
                  origAsyncDirective.name, templateUrl);                                                               // 8463
            }                                                                                                          // 8464
                                                                                                                       // 8465
            tempTemplateAttrs = {$attr: {}};                                                                           // 8466
            replaceWith($rootElement, $compileNode, compileNode);                                                      // 8467
            var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);                            // 8468
                                                                                                                       // 8469
            if (isObject(origAsyncDirective.scope)) {                                                                  // 8470
              markDirectivesAsIsolate(templateDirectives);                                                             // 8471
            }                                                                                                          // 8472
            directives = templateDirectives.concat(directives);                                                        // 8473
            mergeTemplateAttributes(tAttrs, tempTemplateAttrs);                                                        // 8474
          } else {                                                                                                     // 8475
            compileNode = beforeTemplateCompileNode;                                                                   // 8476
            $compileNode.html(content);                                                                                // 8477
          }                                                                                                            // 8478
                                                                                                                       // 8479
          directives.unshift(derivedSyncDirective);                                                                    // 8480
                                                                                                                       // 8481
          afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs,                             // 8482
              childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns,                            // 8483
              previousCompileContext);                                                                                 // 8484
          forEach($rootElement, function(node, i) {                                                                    // 8485
            if (node == compileNode) {                                                                                 // 8486
              $rootElement[i] = $compileNode[0];                                                                       // 8487
            }                                                                                                          // 8488
          });                                                                                                          // 8489
          afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);                      // 8490
                                                                                                                       // 8491
          while (linkQueue.length) {                                                                                   // 8492
            var scope = linkQueue.shift(),                                                                             // 8493
                beforeTemplateLinkNode = linkQueue.shift(),                                                            // 8494
                linkRootElement = linkQueue.shift(),                                                                   // 8495
                boundTranscludeFn = linkQueue.shift(),                                                                 // 8496
                linkNode = $compileNode[0];                                                                            // 8497
                                                                                                                       // 8498
            if (scope.$$destroyed) continue;                                                                           // 8499
                                                                                                                       // 8500
            if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {                                                // 8501
              var oldClasses = beforeTemplateLinkNode.className;                                                       // 8502
                                                                                                                       // 8503
              if (!(previousCompileContext.hasElementTranscludeDirective &&                                            // 8504
                  origAsyncDirective.replace)) {                                                                       // 8505
                // it was cloned therefore we have to clone as well.                                                   // 8506
                linkNode = jqLiteClone(compileNode);                                                                   // 8507
              }                                                                                                        // 8508
              replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);                                  // 8509
                                                                                                                       // 8510
              // Copy in CSS classes from original node                                                                // 8511
              safeAddClass(jqLite(linkNode), oldClasses);                                                              // 8512
            }                                                                                                          // 8513
            if (afterTemplateNodeLinkFn.transcludeOnThisElement) {                                                     // 8514
              childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
            } else {                                                                                                   // 8516
              childBoundTranscludeFn = boundTranscludeFn;                                                              // 8517
            }                                                                                                          // 8518
            afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement,                           // 8519
              childBoundTranscludeFn, afterTemplateNodeLinkFn);                                                        // 8520
          }                                                                                                            // 8521
          linkQueue = null;                                                                                            // 8522
        });                                                                                                            // 8523
                                                                                                                       // 8524
      return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {              // 8525
        var childBoundTranscludeFn = boundTranscludeFn;                                                                // 8526
        if (scope.$$destroyed) return;                                                                                 // 8527
        if (linkQueue) {                                                                                               // 8528
          linkQueue.push(scope,                                                                                        // 8529
                         node,                                                                                         // 8530
                         rootElement,                                                                                  // 8531
                         childBoundTranscludeFn);                                                                      // 8532
        } else {                                                                                                       // 8533
          if (afterTemplateNodeLinkFn.transcludeOnThisElement) {                                                       // 8534
            childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
          }                                                                                                            // 8536
          afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, childBoundTranscludeFn,          // 8537
                                  afterTemplateNodeLinkFn);                                                            // 8538
        }                                                                                                              // 8539
      };                                                                                                               // 8540
    }                                                                                                                  // 8541
                                                                                                                       // 8542
                                                                                                                       // 8543
    /**                                                                                                                // 8544
     * Sorting function for bound directives.                                                                          // 8545
     */                                                                                                                // 8546
    function byPriority(a, b) {                                                                                        // 8547
      var diff = b.priority - a.priority;                                                                              // 8548
      if (diff !== 0) return diff;                                                                                     // 8549
      if (a.name !== b.name) return (a.name < b.name) ? -1 : 1;                                                        // 8550
      return a.index - b.index;                                                                                        // 8551
    }                                                                                                                  // 8552
                                                                                                                       // 8553
    function assertNoDuplicate(what, previousDirective, directive, element) {                                          // 8554
                                                                                                                       // 8555
      function wrapModuleNameIfDefined(moduleName) {                                                                   // 8556
        return moduleName ?                                                                                            // 8557
          (' (module: ' + moduleName + ')') :                                                                          // 8558
          '';                                                                                                          // 8559
      }                                                                                                                // 8560
                                                                                                                       // 8561
      if (previousDirective) {                                                                                         // 8562
        throw $compileMinErr('multidir', 'Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}',                // 8563
            previousDirective.name, wrapModuleNameIfDefined(previousDirective.$$moduleName),                           // 8564
            directive.name, wrapModuleNameIfDefined(directive.$$moduleName), what, startingTag(element));              // 8565
      }                                                                                                                // 8566
    }                                                                                                                  // 8567
                                                                                                                       // 8568
                                                                                                                       // 8569
    function addTextInterpolateDirective(directives, text) {                                                           // 8570
      var interpolateFn = $interpolate(text, true);                                                                    // 8571
      if (interpolateFn) {                                                                                             // 8572
        directives.push({                                                                                              // 8573
          priority: 0,                                                                                                 // 8574
          compile: function textInterpolateCompileFn(templateNode) {                                                   // 8575
            var templateNodeParent = templateNode.parent(),                                                            // 8576
                hasCompileParent = !!templateNodeParent.length;                                                        // 8577
                                                                                                                       // 8578
            // When transcluding a template that has bindings in the root                                              // 8579
            // we don't have a parent and thus need to add the class during linking fn.                                // 8580
            if (hasCompileParent) compile.$$addBindingClass(templateNodeParent);                                       // 8581
                                                                                                                       // 8582
            return function textInterpolateLinkFn(scope, node) {                                                       // 8583
              var parent = node.parent();                                                                              // 8584
              if (!hasCompileParent) compile.$$addBindingClass(parent);                                                // 8585
              compile.$$addBindingInfo(parent, interpolateFn.expressions);                                             // 8586
              scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {                                   // 8587
                node[0].nodeValue = value;                                                                             // 8588
              });                                                                                                      // 8589
            };                                                                                                         // 8590
          }                                                                                                            // 8591
        });                                                                                                            // 8592
      }                                                                                                                // 8593
    }                                                                                                                  // 8594
                                                                                                                       // 8595
                                                                                                                       // 8596
    function wrapTemplate(type, template) {                                                                            // 8597
      type = lowercase(type || 'html');                                                                                // 8598
      switch (type) {                                                                                                  // 8599
      case 'svg':                                                                                                      // 8600
      case 'math':                                                                                                     // 8601
        var wrapper = document.createElement('div');                                                                   // 8602
        wrapper.innerHTML = '<' + type + '>' + template + '</' + type + '>';                                           // 8603
        return wrapper.childNodes[0].childNodes;                                                                       // 8604
      default:                                                                                                         // 8605
        return template;                                                                                               // 8606
      }                                                                                                                // 8607
    }                                                                                                                  // 8608
                                                                                                                       // 8609
                                                                                                                       // 8610
    function getTrustedContext(node, attrNormalizedName) {                                                             // 8611
      if (attrNormalizedName == "srcdoc") {                                                                            // 8612
        return $sce.HTML;                                                                                              // 8613
      }                                                                                                                // 8614
      var tag = nodeName_(node);                                                                                       // 8615
      // maction[xlink:href] can source SVG.  It's not limited to <maction>.                                           // 8616
      if (attrNormalizedName == "xlinkHref" ||                                                                         // 8617
          (tag == "form" && attrNormalizedName == "action") ||                                                         // 8618
          (tag != "img" && (attrNormalizedName == "src" ||                                                             // 8619
                            attrNormalizedName == "ngSrc"))) {                                                         // 8620
        return $sce.RESOURCE_URL;                                                                                      // 8621
      }                                                                                                                // 8622
    }                                                                                                                  // 8623
                                                                                                                       // 8624
                                                                                                                       // 8625
    function addAttrInterpolateDirective(node, directives, value, name, allOrNothing) {                                // 8626
      var trustedContext = getTrustedContext(node, name);                                                              // 8627
      allOrNothing = ALL_OR_NOTHING_ATTRS[name] || allOrNothing;                                                       // 8628
                                                                                                                       // 8629
      var interpolateFn = $interpolate(value, true, trustedContext, allOrNothing);                                     // 8630
                                                                                                                       // 8631
      // no interpolation found -> ignore                                                                              // 8632
      if (!interpolateFn) return;                                                                                      // 8633
                                                                                                                       // 8634
                                                                                                                       // 8635
      if (name === "multiple" && nodeName_(node) === "select") {                                                       // 8636
        throw $compileMinErr("selmulti",                                                                               // 8637
            "Binding to the 'multiple' attribute is not supported. Element: {0}",                                      // 8638
            startingTag(node));                                                                                        // 8639
      }                                                                                                                // 8640
                                                                                                                       // 8641
      directives.push({                                                                                                // 8642
        priority: 100,                                                                                                 // 8643
        compile: function() {                                                                                          // 8644
            return {                                                                                                   // 8645
              pre: function attrInterpolatePreLinkFn(scope, element, attr) {                                           // 8646
                var $$observers = (attr.$$observers || (attr.$$observers = createMap()));                              // 8647
                                                                                                                       // 8648
                if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {                                                            // 8649
                  throw $compileMinErr('nodomevents',                                                                  // 8650
                      "Interpolations for HTML DOM event attributes are disallowed.  Please use the " +                // 8651
                          "ng- versions (such as ng-click instead of onclick) instead.");                              // 8652
                }                                                                                                      // 8653
                                                                                                                       // 8654
                // If the attribute has changed since last $interpolate()ed                                            // 8655
                var newValue = attr[name];                                                                             // 8656
                if (newValue !== value) {                                                                              // 8657
                  // we need to interpolate again since the attribute value has been updated                           // 8658
                  // (e.g. by another directive's compile function)                                                    // 8659
                  // ensure unset/empty values make interpolateFn falsy                                                // 8660
                  interpolateFn = newValue && $interpolate(newValue, true, trustedContext, allOrNothing);              // 8661
                  value = newValue;                                                                                    // 8662
                }                                                                                                      // 8663
                                                                                                                       // 8664
                // if attribute was updated so that there is no interpolation going on we don't want to                // 8665
                // register any observers                                                                              // 8666
                if (!interpolateFn) return;                                                                            // 8667
                                                                                                                       // 8668
                // initialize attr object so that it's ready in case we need the value for isolate                     // 8669
                // scope initialization, otherwise the value would not be available from isolate                       // 8670
                // directive's linking fn during linking phase                                                         // 8671
                attr[name] = interpolateFn(scope);                                                                     // 8672
                                                                                                                       // 8673
                ($$observers[name] || ($$observers[name] = [])).$$inter = true;                                        // 8674
                (attr.$$observers && attr.$$observers[name].$$scope || scope).                                         // 8675
                  $watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {                        // 8676
                    //special case for class attribute addition + removal                                              // 8677
                    //so that class changes can tap into the animation                                                 // 8678
                    //hooks provided by the $animate service. Be sure to                                               // 8679
                    //skip animations when the first digest occurs (when                                               // 8680
                    //both the new and the old values are the same) since                                              // 8681
                    //the CSS classes are the non-interpolated values                                                  // 8682
                    if (name === 'class' && newValue != oldValue) {                                                    // 8683
                      attr.$updateClass(newValue, oldValue);                                                           // 8684
                    } else {                                                                                           // 8685
                      attr.$set(name, newValue);                                                                       // 8686
                    }                                                                                                  // 8687
                  });                                                                                                  // 8688
              }                                                                                                        // 8689
            };                                                                                                         // 8690
          }                                                                                                            // 8691
      });                                                                                                              // 8692
    }                                                                                                                  // 8693
                                                                                                                       // 8694
                                                                                                                       // 8695
    /**                                                                                                                // 8696
     * This is a special jqLite.replaceWith, which can replace items which                                             // 8697
     * have no parents, provided that the containing jqLite collection is provided.                                    // 8698
     *                                                                                                                 // 8699
     * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes                   // 8700
     *                               in the root of the tree.                                                          // 8701
     * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep                      // 8702
     *                                  the shell, but replace its DOM node reference.                                 // 8703
     * @param {Node} newNode The new DOM node.                                                                         // 8704
     */                                                                                                                // 8705
    function replaceWith($rootElement, elementsToRemove, newNode) {                                                    // 8706
      var firstElementToRemove = elementsToRemove[0],                                                                  // 8707
          removeCount = elementsToRemove.length,                                                                       // 8708
          parent = firstElementToRemove.parentNode,                                                                    // 8709
          i, ii;                                                                                                       // 8710
                                                                                                                       // 8711
      if ($rootElement) {                                                                                              // 8712
        for (i = 0, ii = $rootElement.length; i < ii; i++) {                                                           // 8713
          if ($rootElement[i] == firstElementToRemove) {                                                               // 8714
            $rootElement[i++] = newNode;                                                                               // 8715
            for (var j = i, j2 = j + removeCount - 1,                                                                  // 8716
                     jj = $rootElement.length;                                                                         // 8717
                 j < jj; j++, j2++) {                                                                                  // 8718
              if (j2 < jj) {                                                                                           // 8719
                $rootElement[j] = $rootElement[j2];                                                                    // 8720
              } else {                                                                                                 // 8721
                delete $rootElement[j];                                                                                // 8722
              }                                                                                                        // 8723
            }                                                                                                          // 8724
            $rootElement.length -= removeCount - 1;                                                                    // 8725
                                                                                                                       // 8726
            // If the replaced element is also the jQuery .context then replace it                                     // 8727
            // .context is a deprecated jQuery api, so we should set it only when jQuery set it                        // 8728
            // http://api.jquery.com/context/                                                                          // 8729
            if ($rootElement.context === firstElementToRemove) {                                                       // 8730
              $rootElement.context = newNode;                                                                          // 8731
            }                                                                                                          // 8732
            break;                                                                                                     // 8733
          }                                                                                                            // 8734
        }                                                                                                              // 8735
      }                                                                                                                // 8736
                                                                                                                       // 8737
      if (parent) {                                                                                                    // 8738
        parent.replaceChild(newNode, firstElementToRemove);                                                            // 8739
      }                                                                                                                // 8740
                                                                                                                       // 8741
      // TODO(perf): what's this document fragment for? is it needed? can we at least reuse it?                        // 8742
      var fragment = document.createDocumentFragment();                                                                // 8743
      fragment.appendChild(firstElementToRemove);                                                                      // 8744
                                                                                                                       // 8745
      if (jqLite.hasData(firstElementToRemove)) {                                                                      // 8746
        // Copy over user data (that includes Angular's $scope etc.). Don't copy private                               // 8747
        // data here because there's no public interface in jQuery to do that and copying over                         // 8748
        // event listeners (which is the main use of private data) wouldn't work anyway.                               // 8749
        jqLite(newNode).data(jqLite(firstElementToRemove).data());                                                     // 8750
                                                                                                                       // 8751
        // Remove data of the replaced element. We cannot just call .remove()                                          // 8752
        // on the element it since that would deallocate scope that is needed                                          // 8753
        // for the new node. Instead, remove the data "manually".                                                      // 8754
        if (!jQuery) {                                                                                                 // 8755
          delete jqLite.cache[firstElementToRemove[jqLite.expando]];                                                   // 8756
        } else {                                                                                                       // 8757
          // jQuery 2.x doesn't expose the data storage. Use jQuery.cleanData to clean up after                        // 8758
          // the replaced element. The cleanData version monkey-patched by Angular would cause                         // 8759
          // the scope to be trashed and we do need the very same scope to work with the new                           // 8760
          // element. However, we cannot just cache the non-patched version and use it here as                         // 8761
          // that would break if another library patches the method after Angular does (one                            // 8762
          // example is jQuery UI). Instead, set a flag indicating scope destroying should be                          // 8763
          // skipped this one time.                                                                                    // 8764
          skipDestroyOnNextJQueryCleanData = true;                                                                     // 8765
          jQuery.cleanData([firstElementToRemove]);                                                                    // 8766
        }                                                                                                              // 8767
      }                                                                                                                // 8768
                                                                                                                       // 8769
      for (var k = 1, kk = elementsToRemove.length; k < kk; k++) {                                                     // 8770
        var element = elementsToRemove[k];                                                                             // 8771
        jqLite(element).remove(); // must do this way to clean up expando                                              // 8772
        fragment.appendChild(element);                                                                                 // 8773
        delete elementsToRemove[k];                                                                                    // 8774
      }                                                                                                                // 8775
                                                                                                                       // 8776
      elementsToRemove[0] = newNode;                                                                                   // 8777
      elementsToRemove.length = 1;                                                                                     // 8778
    }                                                                                                                  // 8779
                                                                                                                       // 8780
                                                                                                                       // 8781
    function cloneAndAnnotateFn(fn, annotation) {                                                                      // 8782
      return extend(function() { return fn.apply(null, arguments); }, fn, annotation);                                 // 8783
    }                                                                                                                  // 8784
                                                                                                                       // 8785
                                                                                                                       // 8786
    function invokeLinkFn(linkFn, scope, $element, attrs, controllers, transcludeFn) {                                 // 8787
      try {                                                                                                            // 8788
        linkFn(scope, $element, attrs, controllers, transcludeFn);                                                     // 8789
      } catch (e) {                                                                                                    // 8790
        $exceptionHandler(e, startingTag($element));                                                                   // 8791
      }                                                                                                                // 8792
    }                                                                                                                  // 8793
                                                                                                                       // 8794
                                                                                                                       // 8795
    // Set up $watches for isolate scope and controller bindings. This process                                         // 8796
    // only occurs for isolate scopes and new scopes with controllerAs.                                                // 8797
    function initializeDirectiveBindings(scope, attrs, destination, bindings,                                          // 8798
                                         directive, newScope) {                                                        // 8799
      var onNewScopeDestroyed;                                                                                         // 8800
      forEach(bindings, function(definition, scopeName) {                                                              // 8801
        var attrName = definition.attrName,                                                                            // 8802
        optional = definition.optional,                                                                                // 8803
        mode = definition.mode, // @, =, or &                                                                          // 8804
        lastValue,                                                                                                     // 8805
        parentGet, parentSet, compare;                                                                                 // 8806
                                                                                                                       // 8807
        switch (mode) {                                                                                                // 8808
                                                                                                                       // 8809
          case '@':                                                                                                    // 8810
            if (!optional && !hasOwnProperty.call(attrs, attrName)) {                                                  // 8811
              destination[scopeName] = attrs[attrName] = void 0;                                                       // 8812
            }                                                                                                          // 8813
            attrs.$observe(attrName, function(value) {                                                                 // 8814
              if (isString(value)) {                                                                                   // 8815
                destination[scopeName] = value;                                                                        // 8816
              }                                                                                                        // 8817
            });                                                                                                        // 8818
            attrs.$$observers[attrName].$$scope = scope;                                                               // 8819
            if (isString(attrs[attrName])) {                                                                           // 8820
              // If the attribute has been provided then we trigger an interpolation to ensure                         // 8821
              // the value is there for use in the link fn                                                             // 8822
              destination[scopeName] = $interpolate(attrs[attrName])(scope);                                           // 8823
            }                                                                                                          // 8824
            break;                                                                                                     // 8825
                                                                                                                       // 8826
          case '=':                                                                                                    // 8827
            if (!hasOwnProperty.call(attrs, attrName)) {                                                               // 8828
              if (optional) break;                                                                                     // 8829
              attrs[attrName] = void 0;                                                                                // 8830
            }                                                                                                          // 8831
            if (optional && !attrs[attrName]) break;                                                                   // 8832
                                                                                                                       // 8833
            parentGet = $parse(attrs[attrName]);                                                                       // 8834
            if (parentGet.literal) {                                                                                   // 8835
              compare = equals;                                                                                        // 8836
            } else {                                                                                                   // 8837
              compare = function(a, b) { return a === b || (a !== a && b !== b); };                                    // 8838
            }                                                                                                          // 8839
            parentSet = parentGet.assign || function() {                                                               // 8840
              // reset the change, or we will throw this exception on every $digest                                    // 8841
              lastValue = destination[scopeName] = parentGet(scope);                                                   // 8842
              throw $compileMinErr('nonassign',                                                                        // 8843
                  "Expression '{0}' used with directive '{1}' is non-assignable!",                                     // 8844
                  attrs[attrName], directive.name);                                                                    // 8845
            };                                                                                                         // 8846
            lastValue = destination[scopeName] = parentGet(scope);                                                     // 8847
            var parentValueWatch = function parentValueWatch(parentValue) {                                            // 8848
              if (!compare(parentValue, destination[scopeName])) {                                                     // 8849
                // we are out of sync and need to copy                                                                 // 8850
                if (!compare(parentValue, lastValue)) {                                                                // 8851
                  // parent changed and it has precedence                                                              // 8852
                  destination[scopeName] = parentValue;                                                                // 8853
                } else {                                                                                               // 8854
                  // if the parent can be assigned then do so                                                          // 8855
                  parentSet(scope, parentValue = destination[scopeName]);                                              // 8856
                }                                                                                                      // 8857
              }                                                                                                        // 8858
              return lastValue = parentValue;                                                                          // 8859
            };                                                                                                         // 8860
            parentValueWatch.$stateful = true;                                                                         // 8861
            var unwatch;                                                                                               // 8862
            if (definition.collection) {                                                                               // 8863
              unwatch = scope.$watchCollection(attrs[attrName], parentValueWatch);                                     // 8864
            } else {                                                                                                   // 8865
              unwatch = scope.$watch($parse(attrs[attrName], parentValueWatch), null, parentGet.literal);              // 8866
            }                                                                                                          // 8867
            onNewScopeDestroyed = (onNewScopeDestroyed || []);                                                         // 8868
            onNewScopeDestroyed.push(unwatch);                                                                         // 8869
            break;                                                                                                     // 8870
                                                                                                                       // 8871
          case '&':                                                                                                    // 8872
            // Don't assign Object.prototype method to scope                                                           // 8873
            parentGet = attrs.hasOwnProperty(attrName) ? $parse(attrs[attrName]) : noop;                               // 8874
                                                                                                                       // 8875
            // Don't assign noop to destination if expression is not valid                                             // 8876
            if (parentGet === noop && optional) break;                                                                 // 8877
                                                                                                                       // 8878
            destination[scopeName] = function(locals) {                                                                // 8879
              return parentGet(scope, locals);                                                                         // 8880
            };                                                                                                         // 8881
            break;                                                                                                     // 8882
        }                                                                                                              // 8883
      });                                                                                                              // 8884
      var destroyBindings = onNewScopeDestroyed ? function destroyBindings() {                                         // 8885
        for (var i = 0, ii = onNewScopeDestroyed.length; i < ii; ++i) {                                                // 8886
          onNewScopeDestroyed[i]();                                                                                    // 8887
        }                                                                                                              // 8888
      } : noop;                                                                                                        // 8889
      if (newScope && destroyBindings !== noop) {                                                                      // 8890
        newScope.$on('$destroy', destroyBindings);                                                                     // 8891
        return noop;                                                                                                   // 8892
      }                                                                                                                // 8893
      return destroyBindings;                                                                                          // 8894
    }                                                                                                                  // 8895
  }];                                                                                                                  // 8896
}                                                                                                                      // 8897
                                                                                                                       // 8898
var PREFIX_REGEXP = /^((?:x|data)[\:\-_])/i;                                                                           // 8899
/**                                                                                                                    // 8900
 * Converts all accepted directives format into proper directive name.                                                 // 8901
 * @param name Name to normalize                                                                                       // 8902
 */                                                                                                                    // 8903
function directiveNormalize(name) {                                                                                    // 8904
  return camelCase(name.replace(PREFIX_REGEXP, ''));                                                                   // 8905
}                                                                                                                      // 8906
                                                                                                                       // 8907
/**                                                                                                                    // 8908
 * @ngdoc type                                                                                                         // 8909
 * @name $compile.directive.Attributes                                                                                 // 8910
 *                                                                                                                     // 8911
 * @description                                                                                                        // 8912
 * A shared object between directive compile / linking functions which contains normalized DOM                         // 8913
 * element attributes. The values reflect current binding state `{{ }}`. The normalization is                          // 8914
 * needed since all of these are treated as equivalent in Angular:                                                     // 8915
 *                                                                                                                     // 8916
 * ```                                                                                                                 // 8917
 *    <span ng:bind="a" ng-bind="a" data-ng-bind="a" x-ng-bind="a">                                                    // 8918
 * ```                                                                                                                 // 8919
 */                                                                                                                    // 8920
                                                                                                                       // 8921
/**                                                                                                                    // 8922
 * @ngdoc property                                                                                                     // 8923
 * @name $compile.directive.Attributes#$attr                                                                           // 8924
 *                                                                                                                     // 8925
 * @description                                                                                                        // 8926
 * A map of DOM element attribute names to the normalized name. This is                                                // 8927
 * needed to do reverse lookup from normalized name back to actual name.                                               // 8928
 */                                                                                                                    // 8929
                                                                                                                       // 8930
                                                                                                                       // 8931
/**                                                                                                                    // 8932
 * @ngdoc method                                                                                                       // 8933
 * @name $compile.directive.Attributes#$set                                                                            // 8934
 * @kind function                                                                                                      // 8935
 *                                                                                                                     // 8936
 * @description                                                                                                        // 8937
 * Set DOM element attribute value.                                                                                    // 8938
 *                                                                                                                     // 8939
 *                                                                                                                     // 8940
 * @param {string} name Normalized element attribute name of the property to modify. The name is                       // 8941
 *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}                          // 8942
 *          property to the original name.                                                                             // 8943
 * @param {string} value Value to set the attribute to. The value can be an interpolated string.                       // 8944
 */                                                                                                                    // 8945
                                                                                                                       // 8946
                                                                                                                       // 8947
                                                                                                                       // 8948
/**                                                                                                                    // 8949
 * Closure compiler type information                                                                                   // 8950
 */                                                                                                                    // 8951
                                                                                                                       // 8952
function nodesetLinkingFn(                                                                                             // 8953
  /* angular.Scope */ scope,                                                                                           // 8954
  /* NodeList */ nodeList,                                                                                             // 8955
  /* Element */ rootElement,                                                                                           // 8956
  /* function(Function) */ boundTranscludeFn                                                                           // 8957
) {}                                                                                                                   // 8958
                                                                                                                       // 8959
function directiveLinkingFn(                                                                                           // 8960
  /* nodesetLinkingFn */ nodesetLinkingFn,                                                                             // 8961
  /* angular.Scope */ scope,                                                                                           // 8962
  /* Node */ node,                                                                                                     // 8963
  /* Element */ rootElement,                                                                                           // 8964
  /* function(Function) */ boundTranscludeFn                                                                           // 8965
) {}                                                                                                                   // 8966
                                                                                                                       // 8967
function tokenDifference(str1, str2) {                                                                                 // 8968
  var values = '',                                                                                                     // 8969
      tokens1 = str1.split(/\s+/),                                                                                     // 8970
      tokens2 = str2.split(/\s+/);                                                                                     // 8971
                                                                                                                       // 8972
  outer:                                                                                                               // 8973
  for (var i = 0; i < tokens1.length; i++) {                                                                           // 8974
    var token = tokens1[i];                                                                                            // 8975
    for (var j = 0; j < tokens2.length; j++) {                                                                         // 8976
      if (token == tokens2[j]) continue outer;                                                                         // 8977
    }                                                                                                                  // 8978
    values += (values.length > 0 ? ' ' : '') + token;                                                                  // 8979
  }                                                                                                                    // 8980
  return values;                                                                                                       // 8981
}                                                                                                                      // 8982
                                                                                                                       // 8983
function removeComments(jqNodes) {                                                                                     // 8984
  jqNodes = jqLite(jqNodes);                                                                                           // 8985
  var i = jqNodes.length;                                                                                              // 8986
                                                                                                                       // 8987
  if (i <= 1) {                                                                                                        // 8988
    return jqNodes;                                                                                                    // 8989
  }                                                                                                                    // 8990
                                                                                                                       // 8991
  while (i--) {                                                                                                        // 8992
    var node = jqNodes[i];                                                                                             // 8993
    if (node.nodeType === NODE_TYPE_COMMENT) {                                                                         // 8994
      splice.call(jqNodes, i, 1);                                                                                      // 8995
    }                                                                                                                  // 8996
  }                                                                                                                    // 8997
  return jqNodes;                                                                                                      // 8998
}                                                                                                                      // 8999
                                                                                                                       // 9000
var $controllerMinErr = minErr('$controller');                                                                         // 9001
                                                                                                                       // 9002
                                                                                                                       // 9003
var CNTRL_REG = /^(\S+)(\s+as\s+(\w+))?$/;                                                                             // 9004
function identifierForController(controller, ident) {                                                                  // 9005
  if (ident && isString(ident)) return ident;                                                                          // 9006
  if (isString(controller)) {                                                                                          // 9007
    var match = CNTRL_REG.exec(controller);                                                                            // 9008
    if (match) return match[3];                                                                                        // 9009
  }                                                                                                                    // 9010
}                                                                                                                      // 9011
                                                                                                                       // 9012
                                                                                                                       // 9013
/**                                                                                                                    // 9014
 * @ngdoc provider                                                                                                     // 9015
 * @name $controllerProvider                                                                                           // 9016
 * @description                                                                                                        // 9017
 * The {@link ng.$controller $controller service} is used by Angular to create new                                     // 9018
 * controllers.                                                                                                        // 9019
 *                                                                                                                     // 9020
 * This provider allows controller registration via the                                                                // 9021
 * {@link ng.$controllerProvider#register register} method.                                                            // 9022
 */                                                                                                                    // 9023
function $ControllerProvider() {                                                                                       // 9024
  var controllers = {},                                                                                                // 9025
      globals = false;                                                                                                 // 9026
                                                                                                                       // 9027
  /**                                                                                                                  // 9028
   * @ngdoc method                                                                                                     // 9029
   * @name $controllerProvider#register                                                                                // 9030
   * @param {string|Object} name Controller name, or an object map of controllers where the keys are                   // 9031
   *    the names and the values are the constructors.                                                                 // 9032
   * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI                       // 9033
   *    annotations in the array notation).                                                                            // 9034
   */                                                                                                                  // 9035
  this.register = function(name, constructor) {                                                                        // 9036
    assertNotHasOwnProperty(name, 'controller');                                                                       // 9037
    if (isObject(name)) {                                                                                              // 9038
      extend(controllers, name);                                                                                       // 9039
    } else {                                                                                                           // 9040
      controllers[name] = constructor;                                                                                 // 9041
    }                                                                                                                  // 9042
  };                                                                                                                   // 9043
                                                                                                                       // 9044
  /**                                                                                                                  // 9045
   * @ngdoc method                                                                                                     // 9046
   * @name $controllerProvider#allowGlobals                                                                            // 9047
   * @description If called, allows `$controller` to find controller constructors on `window`                          // 9048
   */                                                                                                                  // 9049
  this.allowGlobals = function() {                                                                                     // 9050
    globals = true;                                                                                                    // 9051
  };                                                                                                                   // 9052
                                                                                                                       // 9053
                                                                                                                       // 9054
  this.$get = ['$injector', '$window', function($injector, $window) {                                                  // 9055
                                                                                                                       // 9056
    /**                                                                                                                // 9057
     * @ngdoc service                                                                                                  // 9058
     * @name $controller                                                                                               // 9059
     * @requires $injector                                                                                             // 9060
     *                                                                                                                 // 9061
     * @param {Function|string} constructor If called with a function then it's considered to be the                   // 9062
     *    controller constructor function. Otherwise it's considered to be a string which is used                      // 9063
     *    to retrieve the controller constructor using the following steps:                                            // 9064
     *                                                                                                                 // 9065
     *    * check if a controller with given name is registered via `$controllerProvider`                              // 9066
     *    * check if evaluating the string on the current scope returns a constructor                                  // 9067
     *    * if $controllerProvider#allowGlobals, check `window[constructor]` on the global                             // 9068
     *      `window` object (not recommended)                                                                          // 9069
     *                                                                                                                 // 9070
     *    The string can use the `controller as property` syntax, where the controller instance is published           // 9071
     *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this          // 9072
     *    to work correctly.                                                                                           // 9073
     *                                                                                                                 // 9074
     * @param {Object} locals Injection locals for Controller.                                                         // 9075
     * @return {Object} Instance of given controller.                                                                  // 9076
     *                                                                                                                 // 9077
     * @description                                                                                                    // 9078
     * `$controller` service is responsible for instantiating controllers.                                             // 9079
     *                                                                                                                 // 9080
     * It's just a simple call to {@link auto.$injector $injector}, but extracted into                                 // 9081
     * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).            // 9082
     */                                                                                                                // 9083
    return function(expression, locals, later, ident) {                                                                // 9084
      // PRIVATE API:                                                                                                  // 9085
      //   param `later` --- indicates that the controller's constructor is invoked at a later time.                   // 9086
      //                     If true, $controller will allocate the object with the correct                            // 9087
      //                     prototype chain, but will not invoke the controller until a returned                      // 9088
      //                     callback is invoked.                                                                      // 9089
      //   param `ident` --- An optional label which overrides the label parsed from the controller                    // 9090
      //                     expression, if any.                                                                       // 9091
      var instance, match, constructor, identifier;                                                                    // 9092
      later = later === true;                                                                                          // 9093
      if (ident && isString(ident)) {                                                                                  // 9094
        identifier = ident;                                                                                            // 9095
      }                                                                                                                // 9096
                                                                                                                       // 9097
      if (isString(expression)) {                                                                                      // 9098
        match = expression.match(CNTRL_REG);                                                                           // 9099
        if (!match) {                                                                                                  // 9100
          throw $controllerMinErr('ctrlfmt',                                                                           // 9101
            "Badly formed controller string '{0}'. " +                                                                 // 9102
            "Must match `__name__ as __id__` or `__name__`.", expression);                                             // 9103
        }                                                                                                              // 9104
        constructor = match[1],                                                                                        // 9105
        identifier = identifier || match[3];                                                                           // 9106
        expression = controllers.hasOwnProperty(constructor)                                                           // 9107
            ? controllers[constructor]                                                                                 // 9108
            : getter(locals.$scope, constructor, true) ||                                                              // 9109
                (globals ? getter($window, constructor, true) : undefined);                                            // 9110
                                                                                                                       // 9111
        assertArgFn(expression, constructor, true);                                                                    // 9112
      }                                                                                                                // 9113
                                                                                                                       // 9114
      if (later) {                                                                                                     // 9115
        // Instantiate controller later:                                                                               // 9116
        // This machinery is used to create an instance of the object before calling the                               // 9117
        // controller's constructor itself.                                                                            // 9118
        //                                                                                                             // 9119
        // This allows properties to be added to the controller before the constructor is                              // 9120
        // invoked. Primarily, this is used for isolate scope bindings in $compile.                                    // 9121
        //                                                                                                             // 9122
        // This feature is not intended for use by applications, and is thus not documented                            // 9123
        // publicly.                                                                                                   // 9124
        // Object creation: http://jsperf.com/create-constructor/2                                                     // 9125
        var controllerPrototype = (isArray(expression) ?                                                               // 9126
          expression[expression.length - 1] : expression).prototype;                                                   // 9127
        instance = Object.create(controllerPrototype || null);                                                         // 9128
                                                                                                                       // 9129
        if (identifier) {                                                                                              // 9130
          addIdentifier(locals, identifier, instance, constructor || expression.name);                                 // 9131
        }                                                                                                              // 9132
                                                                                                                       // 9133
        var instantiate;                                                                                               // 9134
        return instantiate = extend(function() {                                                                       // 9135
          var result = $injector.invoke(expression, instance, locals, constructor);                                    // 9136
          if (result !== instance && (isObject(result) || isFunction(result))) {                                       // 9137
            instance = result;                                                                                         // 9138
            if (identifier) {                                                                                          // 9139
              // If result changed, re-assign controllerAs value to scope.                                             // 9140
              addIdentifier(locals, identifier, instance, constructor || expression.name);                             // 9141
            }                                                                                                          // 9142
          }                                                                                                            // 9143
          return instance;                                                                                             // 9144
        }, {                                                                                                           // 9145
          instance: instance,                                                                                          // 9146
          identifier: identifier                                                                                       // 9147
        });                                                                                                            // 9148
      }                                                                                                                // 9149
                                                                                                                       // 9150
      instance = $injector.instantiate(expression, locals, constructor);                                               // 9151
                                                                                                                       // 9152
      if (identifier) {                                                                                                // 9153
        addIdentifier(locals, identifier, instance, constructor || expression.name);                                   // 9154
      }                                                                                                                // 9155
                                                                                                                       // 9156
      return instance;                                                                                                 // 9157
    };                                                                                                                 // 9158
                                                                                                                       // 9159
    function addIdentifier(locals, identifier, instance, name) {                                                       // 9160
      if (!(locals && isObject(locals.$scope))) {                                                                      // 9161
        throw minErr('$controller')('noscp',                                                                           // 9162
          "Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",                          // 9163
          name, identifier);                                                                                           // 9164
      }                                                                                                                // 9165
                                                                                                                       // 9166
      locals.$scope[identifier] = instance;                                                                            // 9167
    }                                                                                                                  // 9168
  }];                                                                                                                  // 9169
}                                                                                                                      // 9170
                                                                                                                       // 9171
/**                                                                                                                    // 9172
 * @ngdoc service                                                                                                      // 9173
 * @name $document                                                                                                     // 9174
 * @requires $window                                                                                                   // 9175
 *                                                                                                                     // 9176
 * @description                                                                                                        // 9177
 * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.                      // 9178
 *                                                                                                                     // 9179
 * @example                                                                                                            // 9180
   <example module="documentExample">                                                                                  // 9181
     <file name="index.html">                                                                                          // 9182
       <div ng-controller="ExampleController">                                                                         // 9183
         <p>$document title: <b ng-bind="title"></b></p>                                                               // 9184
         <p>window.document title: <b ng-bind="windowTitle"></b></p>                                                   // 9185
       </div>                                                                                                          // 9186
     </file>                                                                                                           // 9187
     <file name="script.js">                                                                                           // 9188
       angular.module('documentExample', [])                                                                           // 9189
         .controller('ExampleController', ['$scope', '$document', function($scope, $document) {                        // 9190
           $scope.title = $document[0].title;                                                                          // 9191
           $scope.windowTitle = angular.element(window.document)[0].title;                                             // 9192
         }]);                                                                                                          // 9193
     </file>                                                                                                           // 9194
   </example>                                                                                                          // 9195
 */                                                                                                                    // 9196
function $DocumentProvider() {                                                                                         // 9197
  this.$get = ['$window', function(window) {                                                                           // 9198
    return jqLite(window.document);                                                                                    // 9199
  }];                                                                                                                  // 9200
}                                                                                                                      // 9201
                                                                                                                       // 9202
/**                                                                                                                    // 9203
 * @ngdoc service                                                                                                      // 9204
 * @name $exceptionHandler                                                                                             // 9205
 * @requires ng.$log                                                                                                   // 9206
 *                                                                                                                     // 9207
 * @description                                                                                                        // 9208
 * Any uncaught exception in angular expressions is delegated to this service.                                         // 9209
 * The default implementation simply delegates to `$log.error` which logs it into                                      // 9210
 * the browser console.                                                                                                // 9211
 *                                                                                                                     // 9212
 * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by                                       // 9213
 * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.                                      // 9214
 *                                                                                                                     // 9215
 * ## Example:                                                                                                         // 9216
 *                                                                                                                     // 9217
 * ```js                                                                                                               // 9218
 *   angular.module('exceptionOverride', []).factory('$exceptionHandler', function() {                                 // 9219
 *     return function(exception, cause) {                                                                             // 9220
 *       exception.message += ' (caused by "' + cause + '")';                                                          // 9221
 *       throw exception;                                                                                              // 9222
 *     };                                                                                                              // 9223
 *   });                                                                                                               // 9224
 * ```                                                                                                                 // 9225
 *                                                                                                                     // 9226
 * This example will override the normal action of `$exceptionHandler`, to make angular                                // 9227
 * exceptions fail hard when they happen, instead of just logging to the console.                                      // 9228
 *                                                                                                                     // 9229
 * <hr />                                                                                                              // 9230
 * Note, that code executed in event-listeners (even those registered using jqLite's `on`/`bind`                       // 9231
 * methods) does not delegate exceptions to the {@link ng.$exceptionHandler $exceptionHandler}                         // 9232
 * (unless executed during a digest).                                                                                  // 9233
 *                                                                                                                     // 9234
 * If you wish, you can manually delegate exceptions, e.g.                                                             // 9235
 * `try { ... } catch(e) { $exceptionHandler(e); }`                                                                    // 9236
 *                                                                                                                     // 9237
 * @param {Error} exception Exception associated with the error.                                                       // 9238
 * @param {string=} cause optional information about the context in which                                              // 9239
 *       the error was thrown.                                                                                         // 9240
 *                                                                                                                     // 9241
 */                                                                                                                    // 9242
function $ExceptionHandlerProvider() {                                                                                 // 9243
  this.$get = ['$log', function($log) {                                                                                // 9244
    return function(exception, cause) {                                                                                // 9245
      $log.error.apply($log, arguments);                                                                               // 9246
    };                                                                                                                 // 9247
  }];                                                                                                                  // 9248
}                                                                                                                      // 9249
                                                                                                                       // 9250
var $$ForceReflowProvider = function() {                                                                               // 9251
  this.$get = ['$document', function($document) {                                                                      // 9252
    return function(domNode) {                                                                                         // 9253
      //the line below will force the browser to perform a repaint so                                                  // 9254
      //that all the animated elements within the animation frame will                                                 // 9255
      //be properly updated and drawn on screen. This is required to                                                   // 9256
      //ensure that the preparation animation is properly flushed so that                                              // 9257
      //the active state picks up from there. DO NOT REMOVE THIS LINE.                                                 // 9258
      //DO NOT OPTIMIZE THIS LINE. THE MINIFIER WILL REMOVE IT OTHERWISE WHICH                                         // 9259
      //WILL RESULT IN AN UNPREDICTABLE BUG THAT IS VERY HARD TO TRACK DOWN AND                                        // 9260
      //WILL TAKE YEARS AWAY FROM YOUR LIFE.                                                                           // 9261
      if (domNode) {                                                                                                   // 9262
        if (!domNode.nodeType && domNode instanceof jqLite) {                                                          // 9263
          domNode = domNode[0];                                                                                        // 9264
        }                                                                                                              // 9265
      } else {                                                                                                         // 9266
        domNode = $document[0].body;                                                                                   // 9267
      }                                                                                                                // 9268
      return domNode.offsetWidth + 1;                                                                                  // 9269
    };                                                                                                                 // 9270
  }];                                                                                                                  // 9271
};                                                                                                                     // 9272
                                                                                                                       // 9273
var APPLICATION_JSON = 'application/json';                                                                             // 9274
var CONTENT_TYPE_APPLICATION_JSON = {'Content-Type': APPLICATION_JSON + ';charset=utf-8'};                             // 9275
var JSON_START = /^\[|^\{(?!\{)/;                                                                                      // 9276
var JSON_ENDS = {                                                                                                      // 9277
  '[': /]$/,                                                                                                           // 9278
  '{': /}$/                                                                                                            // 9279
};                                                                                                                     // 9280
var JSON_PROTECTION_PREFIX = /^\)\]\}',?\n/;                                                                           // 9281
var $httpMinErr = minErr('$http');                                                                                     // 9282
var $httpMinErrLegacyFn = function(method) {                                                                           // 9283
  return function() {                                                                                                  // 9284
    throw $httpMinErr('legacy', 'The method `{0}` on the promise returned from `$http` has been disabled.', method);   // 9285
  };                                                                                                                   // 9286
};                                                                                                                     // 9287
                                                                                                                       // 9288
function serializeValue(v) {                                                                                           // 9289
  if (isObject(v)) {                                                                                                   // 9290
    return isDate(v) ? v.toISOString() : toJson(v);                                                                    // 9291
  }                                                                                                                    // 9292
  return v;                                                                                                            // 9293
}                                                                                                                      // 9294
                                                                                                                       // 9295
                                                                                                                       // 9296
function $HttpParamSerializerProvider() {                                                                              // 9297
  /**                                                                                                                  // 9298
   * @ngdoc service                                                                                                    // 9299
   * @name $httpParamSerializer                                                                                        // 9300
   * @description                                                                                                      // 9301
   *                                                                                                                   // 9302
   * Default {@link $http `$http`} params serializer that converts objects to strings                                  // 9303
   * according to the following rules:                                                                                 // 9304
   *                                                                                                                   // 9305
   * * `{'foo': 'bar'}` results in `foo=bar`                                                                           // 9306
   * * `{'foo': Date.now()}` results in `foo=2015-04-01T09%3A50%3A49.262Z` (`toISOString()` and encoded representation of a Date object)
   * * `{'foo': ['bar', 'baz']}` results in `foo=bar&foo=baz` (repeated key for each array element)                    // 9308
   * * `{'foo': {'bar':'baz'}}` results in `foo=%7B%22bar%22%3A%22baz%22%7D"` (stringified and encoded representation of an object)
   *                                                                                                                   // 9310
   * Note that serializer will sort the request parameters alphabetically.                                             // 9311
   * */                                                                                                                // 9312
                                                                                                                       // 9313
  this.$get = function() {                                                                                             // 9314
    return function ngParamSerializer(params) {                                                                        // 9315
      if (!params) return '';                                                                                          // 9316
      var parts = [];                                                                                                  // 9317
      forEachSorted(params, function(value, key) {                                                                     // 9318
        if (value === null || isUndefined(value)) return;                                                              // 9319
        if (isArray(value)) {                                                                                          // 9320
          forEach(value, function(v, k) {                                                                              // 9321
            parts.push(encodeUriQuery(key)  + '=' + encodeUriQuery(serializeValue(v)));                                // 9322
          });                                                                                                          // 9323
        } else {                                                                                                       // 9324
          parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(serializeValue(value)));                               // 9325
        }                                                                                                              // 9326
      });                                                                                                              // 9327
                                                                                                                       // 9328
      return parts.join('&');                                                                                          // 9329
    };                                                                                                                 // 9330
  };                                                                                                                   // 9331
}                                                                                                                      // 9332
                                                                                                                       // 9333
function $HttpParamSerializerJQLikeProvider() {                                                                        // 9334
  /**                                                                                                                  // 9335
   * @ngdoc service                                                                                                    // 9336
   * @name $httpParamSerializerJQLike                                                                                  // 9337
   * @description                                                                                                      // 9338
   *                                                                                                                   // 9339
   * Alternative {@link $http `$http`} params serializer that follows                                                  // 9340
   * jQuery's [`param()`](http://api.jquery.com/jquery.param/) method logic.                                           // 9341
   * The serializer will also sort the params alphabetically.                                                          // 9342
   *                                                                                                                   // 9343
   * To use it for serializing `$http` request parameters, set it as the `paramSerializer` property:                   // 9344
   *                                                                                                                   // 9345
   * ```js                                                                                                             // 9346
   * $http({                                                                                                           // 9347
   *   url: myUrl,                                                                                                     // 9348
   *   method: 'GET',                                                                                                  // 9349
   *   params: myParams,                                                                                               // 9350
   *   paramSerializer: '$httpParamSerializerJQLike'                                                                   // 9351
   * });                                                                                                               // 9352
   * ```                                                                                                               // 9353
   *                                                                                                                   // 9354
   * It is also possible to set it as the default `paramSerializer` in the                                             // 9355
   * {@link $httpProvider#defaults `$httpProvider`}.                                                                   // 9356
   *                                                                                                                   // 9357
   * Additionally, you can inject the serializer and use it explicitly, for example to serialize                       // 9358
   * form data for submission:                                                                                         // 9359
   *                                                                                                                   // 9360
   * ```js                                                                                                             // 9361
   * .controller(function($http, $httpParamSerializerJQLike) {                                                         // 9362
   *   //...                                                                                                           // 9363
   *                                                                                                                   // 9364
   *   $http({                                                                                                         // 9365
   *     url: myUrl,                                                                                                   // 9366
   *     method: 'POST',                                                                                               // 9367
   *     data: $httpParamSerializerJQLike(myData),                                                                     // 9368
   *     headers: {                                                                                                    // 9369
   *       'Content-Type': 'application/x-www-form-urlencoded'                                                         // 9370
   *     }                                                                                                             // 9371
   *   });                                                                                                             // 9372
   *                                                                                                                   // 9373
   * });                                                                                                               // 9374
   * ```                                                                                                               // 9375
   *                                                                                                                   // 9376
   * */                                                                                                                // 9377
  this.$get = function() {                                                                                             // 9378
    return function jQueryLikeParamSerializer(params) {                                                                // 9379
      if (!params) return '';                                                                                          // 9380
      var parts = [];                                                                                                  // 9381
      serialize(params, '', true);                                                                                     // 9382
      return parts.join('&');                                                                                          // 9383
                                                                                                                       // 9384
      function serialize(toSerialize, prefix, topLevel) {                                                              // 9385
        if (toSerialize === null || isUndefined(toSerialize)) return;                                                  // 9386
        if (isArray(toSerialize)) {                                                                                    // 9387
          forEach(toSerialize, function(value, index) {                                                                // 9388
            serialize(value, prefix + '[' + (isObject(value) ? index : '') + ']');                                     // 9389
          });                                                                                                          // 9390
        } else if (isObject(toSerialize) && !isDate(toSerialize)) {                                                    // 9391
          forEachSorted(toSerialize, function(value, key) {                                                            // 9392
            serialize(value, prefix +                                                                                  // 9393
                (topLevel ? '' : '[') +                                                                                // 9394
                key +                                                                                                  // 9395
                (topLevel ? '' : ']'));                                                                                // 9396
          });                                                                                                          // 9397
        } else {                                                                                                       // 9398
          parts.push(encodeUriQuery(prefix) + '=' + encodeUriQuery(serializeValue(toSerialize)));                      // 9399
        }                                                                                                              // 9400
      }                                                                                                                // 9401
    };                                                                                                                 // 9402
  };                                                                                                                   // 9403
}                                                                                                                      // 9404
                                                                                                                       // 9405
function defaultHttpResponseTransform(data, headers) {                                                                 // 9406
  if (isString(data)) {                                                                                                // 9407
    // Strip json vulnerability protection prefix and trim whitespace                                                  // 9408
    var tempData = data.replace(JSON_PROTECTION_PREFIX, '').trim();                                                    // 9409
                                                                                                                       // 9410
    if (tempData) {                                                                                                    // 9411
      var contentType = headers('Content-Type');                                                                       // 9412
      if ((contentType && (contentType.indexOf(APPLICATION_JSON) === 0)) || isJsonLike(tempData)) {                    // 9413
        data = fromJson(tempData);                                                                                     // 9414
      }                                                                                                                // 9415
    }                                                                                                                  // 9416
  }                                                                                                                    // 9417
                                                                                                                       // 9418
  return data;                                                                                                         // 9419
}                                                                                                                      // 9420
                                                                                                                       // 9421
function isJsonLike(str) {                                                                                             // 9422
    var jsonStart = str.match(JSON_START);                                                                             // 9423
    return jsonStart && JSON_ENDS[jsonStart[0]].test(str);                                                             // 9424
}                                                                                                                      // 9425
                                                                                                                       // 9426
/**                                                                                                                    // 9427
 * Parse headers into key value object                                                                                 // 9428
 *                                                                                                                     // 9429
 * @param {string} headers Raw headers as a string                                                                     // 9430
 * @returns {Object} Parsed headers as key value object                                                                // 9431
 */                                                                                                                    // 9432
function parseHeaders(headers) {                                                                                       // 9433
  var parsed = createMap(), i;                                                                                         // 9434
                                                                                                                       // 9435
  function fillInParsed(key, val) {                                                                                    // 9436
    if (key) {                                                                                                         // 9437
      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;                                                      // 9438
    }                                                                                                                  // 9439
  }                                                                                                                    // 9440
                                                                                                                       // 9441
  if (isString(headers)) {                                                                                             // 9442
    forEach(headers.split('\n'), function(line) {                                                                      // 9443
      i = line.indexOf(':');                                                                                           // 9444
      fillInParsed(lowercase(trim(line.substr(0, i))), trim(line.substr(i + 1)));                                      // 9445
    });                                                                                                                // 9446
  } else if (isObject(headers)) {                                                                                      // 9447
    forEach(headers, function(headerVal, headerKey) {                                                                  // 9448
      fillInParsed(lowercase(headerKey), trim(headerVal));                                                             // 9449
    });                                                                                                                // 9450
  }                                                                                                                    // 9451
                                                                                                                       // 9452
  return parsed;                                                                                                       // 9453
}                                                                                                                      // 9454
                                                                                                                       // 9455
                                                                                                                       // 9456
/**                                                                                                                    // 9457
 * Returns a function that provides access to parsed headers.                                                          // 9458
 *                                                                                                                     // 9459
 * Headers are lazy parsed when first requested.                                                                       // 9460
 * @see parseHeaders                                                                                                   // 9461
 *                                                                                                                     // 9462
 * @param {(string|Object)} headers Headers to provide access to.                                                      // 9463
 * @returns {function(string=)} Returns a getter function which if called with:                                        // 9464
 *                                                                                                                     // 9465
 *   - if called with single an argument returns a single header value or null                                         // 9466
 *   - if called with no arguments returns an object containing all headers.                                           // 9467
 */                                                                                                                    // 9468
function headersGetter(headers) {                                                                                      // 9469
  var headersObj;                                                                                                      // 9470
                                                                                                                       // 9471
  return function(name) {                                                                                              // 9472
    if (!headersObj) headersObj =  parseHeaders(headers);                                                              // 9473
                                                                                                                       // 9474
    if (name) {                                                                                                        // 9475
      var value = headersObj[lowercase(name)];                                                                         // 9476
      if (value === void 0) {                                                                                          // 9477
        value = null;                                                                                                  // 9478
      }                                                                                                                // 9479
      return value;                                                                                                    // 9480
    }                                                                                                                  // 9481
                                                                                                                       // 9482
    return headersObj;                                                                                                 // 9483
  };                                                                                                                   // 9484
}                                                                                                                      // 9485
                                                                                                                       // 9486
                                                                                                                       // 9487
/**                                                                                                                    // 9488
 * Chain all given functions                                                                                           // 9489
 *                                                                                                                     // 9490
 * This function is used for both request and response transforming                                                    // 9491
 *                                                                                                                     // 9492
 * @param {*} data Data to transform.                                                                                  // 9493
 * @param {function(string=)} headers HTTP headers getter fn.                                                          // 9494
 * @param {number} status HTTP status code of the response.                                                            // 9495
 * @param {(Function|Array.<Function>)} fns Function or an array of functions.                                         // 9496
 * @returns {*} Transformed data.                                                                                      // 9497
 */                                                                                                                    // 9498
function transformData(data, headers, status, fns) {                                                                   // 9499
  if (isFunction(fns)) {                                                                                               // 9500
    return fns(data, headers, status);                                                                                 // 9501
  }                                                                                                                    // 9502
                                                                                                                       // 9503
  forEach(fns, function(fn) {                                                                                          // 9504
    data = fn(data, headers, status);                                                                                  // 9505
  });                                                                                                                  // 9506
                                                                                                                       // 9507
  return data;                                                                                                         // 9508
}                                                                                                                      // 9509
                                                                                                                       // 9510
                                                                                                                       // 9511
function isSuccess(status) {                                                                                           // 9512
  return 200 <= status && status < 300;                                                                                // 9513
}                                                                                                                      // 9514
                                                                                                                       // 9515
                                                                                                                       // 9516
/**                                                                                                                    // 9517
 * @ngdoc provider                                                                                                     // 9518
 * @name $httpProvider                                                                                                 // 9519
 * @description                                                                                                        // 9520
 * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.                           // 9521
 * */                                                                                                                  // 9522
function $HttpProvider() {                                                                                             // 9523
  /**                                                                                                                  // 9524
   * @ngdoc property                                                                                                   // 9525
   * @name $httpProvider#defaults                                                                                      // 9526
   * @description                                                                                                      // 9527
   *                                                                                                                   // 9528
   * Object containing default values for all {@link ng.$http $http} requests.                                         // 9529
   *                                                                                                                   // 9530
   * - **`defaults.cache`** - {Object} - an object built with {@link ng.$cacheFactory `$cacheFactory`}                 // 9531
   * that will provide the cache for all requests who set their `cache` property to `true`.                            // 9532
   * If you set the `defaults.cache = false` then only requests that specify their own custom                          // 9533
   * cache object will be cached. See {@link $http#caching $http Caching} for more information.                        // 9534
   *                                                                                                                   // 9535
   * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.                            // 9536
   * Defaults value is `'XSRF-TOKEN'`.                                                                                 // 9537
   *                                                                                                                   // 9538
   * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the                             // 9539
   * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.                                                                   // 9540
   *                                                                                                                   // 9541
   * - **`defaults.headers`** - {Object} - Default headers for all $http requests.                                     // 9542
   * Refer to {@link ng.$http#setting-http-headers $http} for documentation on                                         // 9543
   * setting default headers.                                                                                          // 9544
   *     - **`defaults.headers.common`**                                                                               // 9545
   *     - **`defaults.headers.post`**                                                                                 // 9546
   *     - **`defaults.headers.put`**                                                                                  // 9547
   *     - **`defaults.headers.patch`**                                                                                // 9548
   *                                                                                                                   // 9549
   *                                                                                                                   // 9550
   * - **`defaults.paramSerializer`** - `{string|function(Object<string,string>):string}` - A function                 // 9551
   *  used to the prepare string representation of request parameters (specified as an object).                        // 9552
   *  If specified as string, it is interpreted as a function registered with the {@link auto.$injector $injector}.    // 9553
   *  Defaults to {@link ng.$httpParamSerializer $httpParamSerializer}.                                                // 9554
   *                                                                                                                   // 9555
   **/                                                                                                                 // 9556
  var defaults = this.defaults = {                                                                                     // 9557
    // transform incoming response data                                                                                // 9558
    transformResponse: [defaultHttpResponseTransform],                                                                 // 9559
                                                                                                                       // 9560
    // transform outgoing request data                                                                                 // 9561
    transformRequest: [function(d) {                                                                                   // 9562
      return isObject(d) && !isFile(d) && !isBlob(d) && !isFormData(d) ? toJson(d) : d;                                // 9563
    }],                                                                                                                // 9564
                                                                                                                       // 9565
    // default headers                                                                                                 // 9566
    headers: {                                                                                                         // 9567
      common: {                                                                                                        // 9568
        'Accept': 'application/json, text/plain, */*'                                                                  // 9569
      },                                                                                                               // 9570
      post:   shallowCopy(CONTENT_TYPE_APPLICATION_JSON),                                                              // 9571
      put:    shallowCopy(CONTENT_TYPE_APPLICATION_JSON),                                                              // 9572
      patch:  shallowCopy(CONTENT_TYPE_APPLICATION_JSON)                                                               // 9573
    },                                                                                                                 // 9574
                                                                                                                       // 9575
    xsrfCookieName: 'XSRF-TOKEN',                                                                                      // 9576
    xsrfHeaderName: 'X-XSRF-TOKEN',                                                                                    // 9577
                                                                                                                       // 9578
    paramSerializer: '$httpParamSerializer'                                                                            // 9579
  };                                                                                                                   // 9580
                                                                                                                       // 9581
  var useApplyAsync = false;                                                                                           // 9582
  /**                                                                                                                  // 9583
   * @ngdoc method                                                                                                     // 9584
   * @name $httpProvider#useApplyAsync                                                                                 // 9585
   * @description                                                                                                      // 9586
   *                                                                                                                   // 9587
   * Configure $http service to combine processing of multiple http responses received at around                       // 9588
   * the same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in              // 9589
   * significant performance improvement for bigger applications that make many HTTP requests                          // 9590
   * concurrently (common during application bootstrap).                                                               // 9591
   *                                                                                                                   // 9592
   * Defaults to false. If no value is specified, returns the current configured value.                                // 9593
   *                                                                                                                   // 9594
   * @param {boolean=} value If true, when requests are loaded, they will schedule a deferred                          // 9595
   *    "apply" on the next tick, giving time for subsequent requests in a roughly ~10ms window                        // 9596
   *    to load and share the same digest cycle.                                                                       // 9597
   *                                                                                                                   // 9598
   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.                        // 9599
   *    otherwise, returns the current configured value.                                                               // 9600
   **/                                                                                                                 // 9601
  this.useApplyAsync = function(value) {                                                                               // 9602
    if (isDefined(value)) {                                                                                            // 9603
      useApplyAsync = !!value;                                                                                         // 9604
      return this;                                                                                                     // 9605
    }                                                                                                                  // 9606
    return useApplyAsync;                                                                                              // 9607
  };                                                                                                                   // 9608
                                                                                                                       // 9609
  var useLegacyPromise = true;                                                                                         // 9610
  /**                                                                                                                  // 9611
   * @ngdoc method                                                                                                     // 9612
   * @name $httpProvider#useLegacyPromiseExtensions                                                                    // 9613
   * @description                                                                                                      // 9614
   *                                                                                                                   // 9615
   * Configure `$http` service to return promises without the shorthand methods `success` and `error`.                 // 9616
   * This should be used to make sure that applications work without these methods.                                    // 9617
   *                                                                                                                   // 9618
   * Defaults to false. If no value is specified, returns the current configured value.                                // 9619
   *                                                                                                                   // 9620
   * @param {boolean=} value If true, `$http` will return a normal promise without the `success` and `error` methods.  // 9621
   *                                                                                                                   // 9622
   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.                        // 9623
   *    otherwise, returns the current configured value.                                                               // 9624
   **/                                                                                                                 // 9625
  this.useLegacyPromiseExtensions = function(value) {                                                                  // 9626
    if (isDefined(value)) {                                                                                            // 9627
      useLegacyPromise = !!value;                                                                                      // 9628
      return this;                                                                                                     // 9629
    }                                                                                                                  // 9630
    return useLegacyPromise;                                                                                           // 9631
  };                                                                                                                   // 9632
                                                                                                                       // 9633
  /**                                                                                                                  // 9634
   * @ngdoc property                                                                                                   // 9635
   * @name $httpProvider#interceptors                                                                                  // 9636
   * @description                                                                                                      // 9637
   *                                                                                                                   // 9638
   * Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}                     // 9639
   * pre-processing of request or postprocessing of responses.                                                         // 9640
   *                                                                                                                   // 9641
   * These service factories are ordered by request, i.e. they are applied in the same order as the                    // 9642
   * array, on request, but reverse order, on response.                                                                // 9643
   *                                                                                                                   // 9644
   * {@link ng.$http#interceptors Interceptors detailed info}                                                          // 9645
   **/                                                                                                                 // 9646
  var interceptorFactories = this.interceptors = [];                                                                   // 9647
                                                                                                                       // 9648
  this.$get = ['$httpBackend', '$$cookieReader', '$cacheFactory', '$rootScope', '$q', '$injector',                     // 9649
      function($httpBackend, $$cookieReader, $cacheFactory, $rootScope, $q, $injector) {                               // 9650
                                                                                                                       // 9651
    var defaultCache = $cacheFactory('$http');                                                                         // 9652
                                                                                                                       // 9653
    /**                                                                                                                // 9654
     * Make sure that default param serializer is exposed as a function                                                // 9655
     */                                                                                                                // 9656
    defaults.paramSerializer = isString(defaults.paramSerializer) ?                                                    // 9657
      $injector.get(defaults.paramSerializer) : defaults.paramSerializer;                                              // 9658
                                                                                                                       // 9659
    /**                                                                                                                // 9660
     * Interceptors stored in reverse order. Inner interceptors before outer interceptors.                             // 9661
     * The reversal is needed so that we can build up the interception chain around the                                // 9662
     * server request.                                                                                                 // 9663
     */                                                                                                                // 9664
    var reversedInterceptors = [];                                                                                     // 9665
                                                                                                                       // 9666
    forEach(interceptorFactories, function(interceptorFactory) {                                                       // 9667
      reversedInterceptors.unshift(isString(interceptorFactory)                                                        // 9668
          ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));                                 // 9669
    });                                                                                                                // 9670
                                                                                                                       // 9671
    /**                                                                                                                // 9672
     * @ngdoc service                                                                                                  // 9673
     * @kind function                                                                                                  // 9674
     * @name $http                                                                                                     // 9675
     * @requires ng.$httpBackend                                                                                       // 9676
     * @requires $cacheFactory                                                                                         // 9677
     * @requires $rootScope                                                                                            // 9678
     * @requires $q                                                                                                    // 9679
     * @requires $injector                                                                                             // 9680
     *                                                                                                                 // 9681
     * @description                                                                                                    // 9682
     * The `$http` service is a core Angular service that facilitates communication with the remote                    // 9683
     * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)                // 9684
     * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).                                                      // 9685
     *                                                                                                                 // 9686
     * For unit testing applications that use `$http` service, see                                                     // 9687
     * {@link ngMock.$httpBackend $httpBackend mock}.                                                                  // 9688
     *                                                                                                                 // 9689
     * For a higher level of abstraction, please check out the {@link ngResource.$resource                             // 9690
     * $resource} service.                                                                                             // 9691
     *                                                                                                                 // 9692
     * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by                                    // 9693
     * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage                    // 9694
     * it is important to familiarize yourself with these APIs and the guarantees they provide.                        // 9695
     *                                                                                                                 // 9696
     *                                                                                                                 // 9697
     * ## General usage                                                                                                // 9698
     * The `$http` service is a function which takes a single argument — a {@link $http#usage configuration object} —  // 9699
     * that is used to generate an HTTP request and returns  a {@link ng.$q promise}.                                  // 9700
     *                                                                                                                 // 9701
     * ```js                                                                                                           // 9702
     *   // Simple GET request example:                                                                                // 9703
     *   $http({                                                                                                       // 9704
     *     method: 'GET',                                                                                              // 9705
     *     url: '/someUrl'                                                                                             // 9706
     *   }).then(function successCallback(response) {                                                                  // 9707
     *       // this callback will be called asynchronously                                                            // 9708
     *       // when the response is available                                                                         // 9709
     *     }, function errorCallback(response) {                                                                       // 9710
     *       // called asynchronously if an error occurs                                                               // 9711
     *       // or server returns response with an error status.                                                       // 9712
     *     });                                                                                                         // 9713
     * ```                                                                                                             // 9714
     *                                                                                                                 // 9715
     * The response object has these properties:                                                                       // 9716
     *                                                                                                                 // 9717
     *   - **data** – `{string|Object}` – The response body transformed with the transform                             // 9718
     *     functions.                                                                                                  // 9719
     *   - **status** – `{number}` – HTTP status code of the response.                                                 // 9720
     *   - **headers** – `{function([headerName])}` – Header getter function.                                          // 9721
     *   - **config** – `{Object}` – The configuration object that was used to generate the request.                   // 9722
     *   - **statusText** – `{string}` – HTTP status text of the response.                                             // 9723
     *                                                                                                                 // 9724
     * A response status code between 200 and 299 is considered a success status and                                   // 9725
     * will result in the success callback being called. Note that if the response is a redirect,                      // 9726
     * XMLHttpRequest will transparently follow it, meaning that the error callback will not be                        // 9727
     * called for such responses.                                                                                      // 9728
     *                                                                                                                 // 9729
     *                                                                                                                 // 9730
     * ## Shortcut methods                                                                                             // 9731
     *                                                                                                                 // 9732
     * Shortcut methods are also available. All shortcut methods require passing in the URL, and                       // 9733
     * request data must be passed in for POST/PUT requests. An optional config can be passed as the                   // 9734
     * last argument.                                                                                                  // 9735
     *                                                                                                                 // 9736
     * ```js                                                                                                           // 9737
     *   $http.get('/someUrl', config).then(successCallback, errorCallback);                                           // 9738
     *   $http.post('/someUrl', data, config).then(successCallback, errorCallback);                                    // 9739
     * ```                                                                                                             // 9740
     *                                                                                                                 // 9741
     * Complete list of shortcut methods:                                                                              // 9742
     *                                                                                                                 // 9743
     * - {@link ng.$http#get $http.get}                                                                                // 9744
     * - {@link ng.$http#head $http.head}                                                                              // 9745
     * - {@link ng.$http#post $http.post}                                                                              // 9746
     * - {@link ng.$http#put $http.put}                                                                                // 9747
     * - {@link ng.$http#delete $http.delete}                                                                          // 9748
     * - {@link ng.$http#jsonp $http.jsonp}                                                                            // 9749
     * - {@link ng.$http#patch $http.patch}                                                                            // 9750
     *                                                                                                                 // 9751
     *                                                                                                                 // 9752
     * ## Writing Unit Tests that use $http                                                                            // 9753
     * When unit testing (using {@link ngMock ngMock}), it is necessary to call                                        // 9754
     * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending                                    // 9755
     * request using trained responses.                                                                                // 9756
     *                                                                                                                 // 9757
     * ```                                                                                                             // 9758
     * $httpBackend.expectGET(...);                                                                                    // 9759
     * $http.get(...);                                                                                                 // 9760
     * $httpBackend.flush();                                                                                           // 9761
     * ```                                                                                                             // 9762
     *                                                                                                                 // 9763
     * ## Deprecation Notice                                                                                           // 9764
     * <div class="alert alert-danger">                                                                                // 9765
     *   The `$http` legacy promise methods `success` and `error` have been deprecated.                                // 9766
     *   Use the standard `then` method instead.                                                                       // 9767
     *   If {@link $httpProvider#useLegacyPromiseExtensions `$httpProvider.useLegacyPromiseExtensions`} is set to      // 9768
     *   `false` then these methods will throw {@link $http:legacy `$http/legacy`} error.                              // 9769
     * </div>                                                                                                          // 9770
     *                                                                                                                 // 9771
     * ## Setting HTTP Headers                                                                                         // 9772
     *                                                                                                                 // 9773
     * The $http service will automatically add certain HTTP headers to all requests. These defaults                   // 9774
     * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration                         // 9775
     * object, which currently contains this default configuration:                                                    // 9776
     *                                                                                                                 // 9777
     * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):                           // 9778
     *   - `Accept: application/json, text/plain, * / *`                                                               // 9779
     * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)                                    // 9780
     *   - `Content-Type: application/json`                                                                            // 9781
     * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)                                       // 9782
     *   - `Content-Type: application/json`                                                                            // 9783
     *                                                                                                                 // 9784
     * To add or overwrite these defaults, simply add or remove a property from these configuration                    // 9785
     * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object                      // 9786
     * with the lowercased HTTP method name as the key, e.g.                                                           // 9787
     * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }`.                                               // 9788
     *                                                                                                                 // 9789
     * The defaults can also be set at runtime via the `$http.defaults` object in the same                             // 9790
     * fashion. For example:                                                                                           // 9791
     *                                                                                                                 // 9792
     * ```                                                                                                             // 9793
     * module.run(function($http) {                                                                                    // 9794
     *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w'                                            // 9795
     * });                                                                                                             // 9796
     * ```                                                                                                             // 9797
     *                                                                                                                 // 9798
     * In addition, you can supply a `headers` property in the config object passed when                               // 9799
     * calling `$http(config)`, which overrides the defaults without changing them globally.                           // 9800
     *                                                                                                                 // 9801
     * To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis,    // 9802
     * Use the `headers` property, setting the desired header to `undefined`. For example:                             // 9803
     *                                                                                                                 // 9804
     * ```js                                                                                                           // 9805
     * var req = {                                                                                                     // 9806
     *  method: 'POST',                                                                                                // 9807
     *  url: 'http://example.com',                                                                                     // 9808
     *  headers: {                                                                                                     // 9809
     *    'Content-Type': undefined                                                                                    // 9810
     *  },                                                                                                             // 9811
     *  data: { test: 'test' }                                                                                         // 9812
     * }                                                                                                               // 9813
     *                                                                                                                 // 9814
     * $http(req).then(function(){...}, function(){...});                                                              // 9815
     * ```                                                                                                             // 9816
     *                                                                                                                 // 9817
     * ## Transforming Requests and Responses                                                                          // 9818
     *                                                                                                                 // 9819
     * Both requests and responses can be transformed using transformation functions: `transformRequest`               // 9820
     * and `transformResponse`. These properties can be a single function that returns                                 // 9821
     * the transformed value (`function(data, headersGetter, status)`) or an array of such transformation functions,   // 9822
     * which allows you to `push` or `unshift` a new transformation function into the transformation chain.            // 9823
     *                                                                                                                 // 9824
     * ### Default Transformations                                                                                     // 9825
     *                                                                                                                 // 9826
     * The `$httpProvider` provider and `$http` service expose `defaults.transformRequest` and                         // 9827
     * `defaults.transformResponse` properties. If a request does not provide its own transformations                  // 9828
     * then these will be applied.                                                                                     // 9829
     *                                                                                                                 // 9830
     * You can augment or replace the default transformations by modifying these properties by adding to or            // 9831
     * replacing the array.                                                                                            // 9832
     *                                                                                                                 // 9833
     * Angular provides the following default transformations:                                                         // 9834
     *                                                                                                                 // 9835
     * Request transformations (`$httpProvider.defaults.transformRequest` and `$http.defaults.transformRequest`):      // 9836
     *                                                                                                                 // 9837
     * - If the `data` property of the request configuration object contains an object, serialize it                   // 9838
     *   into JSON format.                                                                                             // 9839
     *                                                                                                                 // 9840
     * Response transformations (`$httpProvider.defaults.transformResponse` and `$http.defaults.transformResponse`):   // 9841
     *                                                                                                                 // 9842
     *  - If XSRF prefix is detected, strip it (see Security Considerations section below).                            // 9843
     *  - If JSON response is detected, deserialize it using a JSON parser.                                            // 9844
     *                                                                                                                 // 9845
     *                                                                                                                 // 9846
     * ### Overriding the Default Transformations Per Request                                                          // 9847
     *                                                                                                                 // 9848
     * If you wish override the request/response transformations only for a single request then provide                // 9849
     * `transformRequest` and/or `transformResponse` properties on the configuration object passed                     // 9850
     * into `$http`.                                                                                                   // 9851
     *                                                                                                                 // 9852
     * Note that if you provide these properties on the config object the default transformations will be              // 9853
     * overwritten. If you wish to augment the default transformations then you must include them in your              // 9854
     * local transformation array.                                                                                     // 9855
     *                                                                                                                 // 9856
     * The following code demonstrates adding a new response transformation to be run after the default response       // 9857
     * transformations have been run.                                                                                  // 9858
     *                                                                                                                 // 9859
     * ```js                                                                                                           // 9860
     * function appendTransform(defaults, transform) {                                                                 // 9861
     *                                                                                                                 // 9862
     *   // We can't guarantee that the default transformation is an array                                             // 9863
     *   defaults = angular.isArray(defaults) ? defaults : [defaults];                                                 // 9864
     *                                                                                                                 // 9865
     *   // Append the new transformation to the defaults                                                              // 9866
     *   return defaults.concat(transform);                                                                            // 9867
     * }                                                                                                               // 9868
     *                                                                                                                 // 9869
     * $http({                                                                                                         // 9870
     *   url: '...',                                                                                                   // 9871
     *   method: 'GET',                                                                                                // 9872
     *   transformResponse: appendTransform($http.defaults.transformResponse, function(value) {                        // 9873
     *     return doTransform(value);                                                                                  // 9874
     *   })                                                                                                            // 9875
     * });                                                                                                             // 9876
     * ```                                                                                                             // 9877
     *                                                                                                                 // 9878
     *                                                                                                                 // 9879
     * ## Caching                                                                                                      // 9880
     *                                                                                                                 // 9881
     * To enable caching, set the request configuration `cache` property to `true` (to use default                     // 9882
     * cache) or to a custom cache object (built with {@link ng.$cacheFactory `$cacheFactory`}).                       // 9883
     * When the cache is enabled, `$http` stores the response from the server in the specified                         // 9884
     * cache. The next time the same request is made, the response is served from the cache without                    // 9885
     * sending a request to the server.                                                                                // 9886
     *                                                                                                                 // 9887
     * Note that even if the response is served from cache, delivery of the data is asynchronous in                    // 9888
     * the same way that real requests are.                                                                            // 9889
     *                                                                                                                 // 9890
     * If there are multiple GET requests for the same URL that should be cached using the same                        // 9891
     * cache, but the cache is not populated yet, only one request to the server will be made and                      // 9892
     * the remaining requests will be fulfilled using the response from the first request.                             // 9893
     *                                                                                                                 // 9894
     * You can change the default cache to a new object (built with                                                    // 9895
     * {@link ng.$cacheFactory `$cacheFactory`}) by updating the                                                       // 9896
     * {@link ng.$http#defaults `$http.defaults.cache`} property. All requests who set                                 // 9897
     * their `cache` property to `true` will now use this cache object.                                                // 9898
     *                                                                                                                 // 9899
     * If you set the default cache to `false` then only requests that specify their own custom                        // 9900
     * cache object will be cached.                                                                                    // 9901
     *                                                                                                                 // 9902
     * ## Interceptors                                                                                                 // 9903
     *                                                                                                                 // 9904
     * Before you start creating interceptors, be sure to understand the                                               // 9905
     * {@link ng.$q $q and deferred/promise APIs}.                                                                     // 9906
     *                                                                                                                 // 9907
     * For purposes of global error handling, authentication, or any kind of synchronous or                            // 9908
     * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be                    // 9909
     * able to intercept requests before they are handed to the server and                                             // 9910
     * responses before they are handed over to the application code that                                              // 9911
     * initiated these requests. The interceptors leverage the {@link ng.$q                                            // 9912
     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.                        // 9913
     *                                                                                                                 // 9914
     * The interceptors are service factories that are registered with the `$httpProvider` by                          // 9915
     * adding them to the `$httpProvider.interceptors` array. The factory is called and                                // 9916
     * injected with dependencies (if specified) and returns the interceptor.                                          // 9917
     *                                                                                                                 // 9918
     * There are two kinds of interceptors (and two kinds of rejection interceptors):                                  // 9919
     *                                                                                                                 // 9920
     *   * `request`: interceptors get called with a http {@link $http#usage config} object. The function is free to   // 9921
     *     modify the `config` object or create a new one. The function needs to return the `config`                   // 9922
     *     object directly, or a promise containing the `config` or a new `config` object.                             // 9923
     *   * `requestError`: interceptor gets called when a previous interceptor threw an error or                       // 9924
     *     resolved with a rejection.                                                                                  // 9925
     *   * `response`: interceptors get called with http `response` object. The function is free to                    // 9926
     *     modify the `response` object or create a new one. The function needs to return the `response`               // 9927
     *     object directly, or as a promise containing the `response` or a new `response` object.                      // 9928
     *   * `responseError`: interceptor gets called when a previous interceptor threw an error or                      // 9929
     *     resolved with a rejection.                                                                                  // 9930
     *                                                                                                                 // 9931
     *                                                                                                                 // 9932
     * ```js                                                                                                           // 9933
     *   // register the interceptor as a service                                                                      // 9934
     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {                                // 9935
     *     return {                                                                                                    // 9936
     *       // optional method                                                                                        // 9937
     *       'request': function(config) {                                                                             // 9938
     *         // do something on success                                                                              // 9939
     *         return config;                                                                                          // 9940
     *       },                                                                                                        // 9941
     *                                                                                                                 // 9942
     *       // optional method                                                                                        // 9943
     *      'requestError': function(rejection) {                                                                      // 9944
     *         // do something on error                                                                                // 9945
     *         if (canRecover(rejection)) {                                                                            // 9946
     *           return responseOrNewPromise                                                                           // 9947
     *         }                                                                                                       // 9948
     *         return $q.reject(rejection);                                                                            // 9949
     *       },                                                                                                        // 9950
     *                                                                                                                 // 9951
     *                                                                                                                 // 9952
     *                                                                                                                 // 9953
     *       // optional method                                                                                        // 9954
     *       'response': function(response) {                                                                          // 9955
     *         // do something on success                                                                              // 9956
     *         return response;                                                                                        // 9957
     *       },                                                                                                        // 9958
     *                                                                                                                 // 9959
     *       // optional method                                                                                        // 9960
     *      'responseError': function(rejection) {                                                                     // 9961
     *         // do something on error                                                                                // 9962
     *         if (canRecover(rejection)) {                                                                            // 9963
     *           return responseOrNewPromise                                                                           // 9964
     *         }                                                                                                       // 9965
     *         return $q.reject(rejection);                                                                            // 9966
     *       }                                                                                                         // 9967
     *     };                                                                                                          // 9968
     *   });                                                                                                           // 9969
     *                                                                                                                 // 9970
     *   $httpProvider.interceptors.push('myHttpInterceptor');                                                         // 9971
     *                                                                                                                 // 9972
     *                                                                                                                 // 9973
     *   // alternatively, register the interceptor via an anonymous factory                                           // 9974
     *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {                                      // 9975
     *     return {                                                                                                    // 9976
     *      'request': function(config) {                                                                              // 9977
     *          // same as above                                                                                       // 9978
     *       },                                                                                                        // 9979
     *                                                                                                                 // 9980
     *       'response': function(response) {                                                                          // 9981
     *          // same as above                                                                                       // 9982
     *       }                                                                                                         // 9983
     *     };                                                                                                          // 9984
     *   });                                                                                                           // 9985
     * ```                                                                                                             // 9986
     *                                                                                                                 // 9987
     * ## Security Considerations                                                                                      // 9988
     *                                                                                                                 // 9989
     * When designing web applications, consider security threats from:                                                // 9990
     *                                                                                                                 // 9991
     * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)       // 9992
     * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)                                               // 9993
     *                                                                                                                 // 9994
     * Both server and the client must cooperate in order to eliminate these threats. Angular comes                    // 9995
     * pre-configured with strategies that address these issues, but for this to work backend server                   // 9996
     * cooperation is required.                                                                                        // 9997
     *                                                                                                                 // 9998
     * ### JSON Vulnerability Protection                                                                               // 9999
     *                                                                                                                 // 10000
     * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)       // 10001
     * allows third party website to turn your JSON resource URL into                                                  // 10002
     * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To                                   // 10003
     * counter this your server can prefix all JSON requests with following string `")]}',\n"`.                        // 10004
     * Angular will automatically strip the prefix before processing it as JSON.                                       // 10005
     *                                                                                                                 // 10006
     * For example if your server needs to return:                                                                     // 10007
     * ```js                                                                                                           // 10008
     * ['one','two']                                                                                                   // 10009
     * ```                                                                                                             // 10010
     *                                                                                                                 // 10011
     * which is vulnerable to attack, your server can return:                                                          // 10012
     * ```js                                                                                                           // 10013
     * )]}',                                                                                                           // 10014
     * ['one','two']                                                                                                   // 10015
     * ```                                                                                                             // 10016
     *                                                                                                                 // 10017
     * Angular will strip the prefix, before processing the JSON.                                                      // 10018
     *                                                                                                                 // 10019
     *                                                                                                                 // 10020
     * ### Cross Site Request Forgery (XSRF) Protection                                                                // 10021
     *                                                                                                                 // 10022
     * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is a technique by which                         // 10023
     * an unauthorized site can gain your user's private data. Angular provides a mechanism                            // 10024
     * to counter XSRF. When performing XHR requests, the $http service reads a token from a cookie                    // 10025
     * (by default, `XSRF-TOKEN`) and sets it as an HTTP header (`X-XSRF-TOKEN`). Since only                           // 10026
     * JavaScript that runs on your domain could read the cookie, your server can be assured that                      // 10027
     * the XHR came from JavaScript running on your domain. The header will not be set for                             // 10028
     * cross-domain requests.                                                                                          // 10029
     *                                                                                                                 // 10030
     * To take advantage of this, your server needs to set a token in a JavaScript readable session                    // 10031
     * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the                        // 10032
     * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure                     // 10033
     * that only JavaScript running on your domain could have sent the request. The token must be                      // 10034
     * unique for each user and must be verifiable by the server (to prevent the JavaScript from                       // 10035
     * making up its own tokens). We recommend that the token is a digest of your site's                               // 10036
     * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)                      // 10037
     * for added security.                                                                                             // 10038
     *                                                                                                                 // 10039
     * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName                            // 10040
     * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,                         // 10041
     * or the per-request config object.                                                                               // 10042
     *                                                                                                                 // 10043
     * In order to prevent collisions in environments where multiple Angular apps share the                            // 10044
     * same domain or subdomain, we recommend that each application uses unique cookie name.                           // 10045
     *                                                                                                                 // 10046
     * @param {object} config Object describing the request to be made and how it should be                            // 10047
     *    processed. The object has following properties:                                                              // 10048
     *                                                                                                                 // 10049
     *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)                                            // 10050
     *    - **url** – `{string}` – Absolute or relative URL of the resource that is being requested.                   // 10051
     *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be serialized               // 10052
     *      with the `paramSerializer` and appended as GET parameters.                                                 // 10053
     *    - **data** – `{string|Object}` – Data to be sent as the request message data.                                // 10054
     *    - **headers** – `{Object}` – Map of strings or functions which return strings representing                   // 10055
     *      HTTP headers to send to the server. If the return value of a function is null, the                         // 10056
     *      header will not be sent. Functions accept a config object as an argument.                                  // 10057
     *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.                     // 10058
     *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.                                // 10059
     *    - **transformRequest** –                                                                                     // 10060
     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –                                  // 10061
     *      transform function or an array of such functions. The transform function takes the http                    // 10062
     *      request body and headers and returns its transformed (typically serialized) version.                       // 10063
     *      See {@link ng.$http#overriding-the-default-transformations-per-request                                     // 10064
     *      Overriding the Default Transformations}                                                                    // 10065
     *    - **transformResponse** –                                                                                    // 10066
     *      `{function(data, headersGetter, status)|Array.<function(data, headersGetter, status)>}` –                  // 10067
     *      transform function or an array of such functions. The transform function takes the http                    // 10068
     *      response body, headers and status and returns its transformed (typically deserialized) version.            // 10069
     *      See {@link ng.$http#overriding-the-default-transformations-per-request                                     // 10070
     *      Overriding the Default TransformationjqLiks}                                                               // 10071
     *    - **paramSerializer** - `{string|function(Object<string,string>):string}` - A function used to               // 10072
     *      prepare the string representation of request parameters (specified as an object).                          // 10073
     *      If specified as string, it is interpreted as function registered with the                                  // 10074
     *      {@link $injector $injector}, which means you can create your own serializer                                // 10075
     *      by registering it as a {@link auto.$provide#service service}.                                              // 10076
     *      The default serializer is the {@link $httpParamSerializer $httpParamSerializer};                           // 10077
     *      alternatively, you can use the {@link $httpParamSerializerJQLike $httpParamSerializerJQLike}               // 10078
     *    - **cache** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the                   // 10079
     *      GET request, otherwise if a cache instance built with                                                      // 10080
     *      {@link ng.$cacheFactory $cacheFactory}, this cache will be used for                                        // 10081
     *      caching.                                                                                                   // 10082
     *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}                       // 10083
     *      that should abort the request when resolved.                                                               // 10084
     *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the                       // 10085
     *      XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)
     *      for more information.                                                                                      // 10087
     *    - **responseType** - `{string}` - see                                                                        // 10088
     *      [XMLHttpRequest.responseType](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#xmlhttprequest-responsetype).
     *                                                                                                                 // 10090
     * @returns {HttpPromise} Returns a {@link ng.$q `Promise}` that will be resolved to a response object             // 10091
     *                        when the request succeeds or fails.                                                      // 10092
     *                                                                                                                 // 10093
     *                                                                                                                 // 10094
     * @property {Array.<Object>} pendingRequests Array of config objects for currently pending                        // 10095
     *   requests. This is primarily meant to be used for debugging purposes.                                          // 10096
     *                                                                                                                 // 10097
     *                                                                                                                 // 10098
     * @example                                                                                                        // 10099
<example module="httpExample">                                                                                         // 10100
<file name="index.html">                                                                                               // 10101
  <div ng-controller="FetchController">                                                                                // 10102
    <select ng-model="method" aria-label="Request method">                                                             // 10103
      <option>GET</option>                                                                                             // 10104
      <option>JSONP</option>                                                                                           // 10105
    </select>                                                                                                          // 10106
    <input type="text" ng-model="url" size="80" aria-label="URL" />                                                    // 10107
    <button id="fetchbtn" ng-click="fetch()">fetch</button><br>                                                        // 10108
    <button id="samplegetbtn" ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>                     // 10109
    <button id="samplejsonpbtn"                                                                                        // 10110
      ng-click="updateModel('JSONP',                                                                                   // 10111
                    'https://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')">                      // 10112
      Sample JSONP                                                                                                     // 10113
    </button>                                                                                                          // 10114
    <button id="invalidjsonpbtn"                                                                                       // 10115
      ng-click="updateModel('JSONP', 'https://angularjs.org/doesntexist&callback=JSON_CALLBACK')">                     // 10116
        Invalid JSONP                                                                                                  // 10117
      </button>                                                                                                        // 10118
    <pre>http status code: {{status}}</pre>                                                                            // 10119
    <pre>http response data: {{data}}</pre>                                                                            // 10120
  </div>                                                                                                               // 10121
</file>                                                                                                                // 10122
<file name="script.js">                                                                                                // 10123
  angular.module('httpExample', [])                                                                                    // 10124
    .controller('FetchController', ['$scope', '$http', '$templateCache',                                               // 10125
      function($scope, $http, $templateCache) {                                                                        // 10126
        $scope.method = 'GET';                                                                                         // 10127
        $scope.url = 'http-hello.html';                                                                                // 10128
                                                                                                                       // 10129
        $scope.fetch = function() {                                                                                    // 10130
          $scope.code = null;                                                                                          // 10131
          $scope.response = null;                                                                                      // 10132
                                                                                                                       // 10133
          $http({method: $scope.method, url: $scope.url, cache: $templateCache}).                                      // 10134
            then(function(response) {                                                                                  // 10135
              $scope.status = response.status;                                                                         // 10136
              $scope.data = response.data;                                                                             // 10137
            }, function(response) {                                                                                    // 10138
              $scope.data = response.data || "Request failed";                                                         // 10139
              $scope.status = response.status;                                                                         // 10140
          });                                                                                                          // 10141
        };                                                                                                             // 10142
                                                                                                                       // 10143
        $scope.updateModel = function(method, url) {                                                                   // 10144
          $scope.method = method;                                                                                      // 10145
          $scope.url = url;                                                                                            // 10146
        };                                                                                                             // 10147
      }]);                                                                                                             // 10148
</file>                                                                                                                // 10149
<file name="http-hello.html">                                                                                          // 10150
  Hello, $http!                                                                                                        // 10151
</file>                                                                                                                // 10152
<file name="protractor.js" type="protractor">                                                                          // 10153
  var status = element(by.binding('status'));                                                                          // 10154
  var data = element(by.binding('data'));                                                                              // 10155
  var fetchBtn = element(by.id('fetchbtn'));                                                                           // 10156
  var sampleGetBtn = element(by.id('samplegetbtn'));                                                                   // 10157
  var sampleJsonpBtn = element(by.id('samplejsonpbtn'));                                                               // 10158
  var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));                                                             // 10159
                                                                                                                       // 10160
  it('should make an xhr GET request', function() {                                                                    // 10161
    sampleGetBtn.click();                                                                                              // 10162
    fetchBtn.click();                                                                                                  // 10163
    expect(status.getText()).toMatch('200');                                                                           // 10164
    expect(data.getText()).toMatch(/Hello, \$http!/);                                                                  // 10165
  });                                                                                                                  // 10166
                                                                                                                       // 10167
// Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185                                  // 10168
// it('should make a JSONP request to angularjs.org', function() {                                                     // 10169
//   sampleJsonpBtn.click();                                                                                           // 10170
//   fetchBtn.click();                                                                                                 // 10171
//   expect(status.getText()).toMatch('200');                                                                          // 10172
//   expect(data.getText()).toMatch(/Super Hero!/);                                                                    // 10173
// });                                                                                                                 // 10174
                                                                                                                       // 10175
  it('should make JSONP request to invalid URL and invoke the error handler',                                          // 10176
      function() {                                                                                                     // 10177
    invalidJsonpBtn.click();                                                                                           // 10178
    fetchBtn.click();                                                                                                  // 10179
    expect(status.getText()).toMatch('0');                                                                             // 10180
    expect(data.getText()).toMatch('Request failed');                                                                  // 10181
  });                                                                                                                  // 10182
</file>                                                                                                                // 10183
</example>                                                                                                             // 10184
     */                                                                                                                // 10185
    function $http(requestConfig) {                                                                                    // 10186
                                                                                                                       // 10187
      if (!angular.isObject(requestConfig)) {                                                                          // 10188
        throw minErr('$http')('badreq', 'Http request configuration must be an object.  Received: {0}', requestConfig);
      }                                                                                                                // 10190
                                                                                                                       // 10191
      var config = extend({                                                                                            // 10192
        method: 'get',                                                                                                 // 10193
        transformRequest: defaults.transformRequest,                                                                   // 10194
        transformResponse: defaults.transformResponse,                                                                 // 10195
        paramSerializer: defaults.paramSerializer                                                                      // 10196
      }, requestConfig);                                                                                               // 10197
                                                                                                                       // 10198
      config.headers = mergeHeaders(requestConfig);                                                                    // 10199
      config.method = uppercase(config.method);                                                                        // 10200
      config.paramSerializer = isString(config.paramSerializer) ?                                                      // 10201
        $injector.get(config.paramSerializer) : config.paramSerializer;                                                // 10202
                                                                                                                       // 10203
      var serverRequest = function(config) {                                                                           // 10204
        var headers = config.headers;                                                                                  // 10205
        var reqData = transformData(config.data, headersGetter(headers), undefined, config.transformRequest);          // 10206
                                                                                                                       // 10207
        // strip content-type if data is undefined                                                                     // 10208
        if (isUndefined(reqData)) {                                                                                    // 10209
          forEach(headers, function(value, header) {                                                                   // 10210
            if (lowercase(header) === 'content-type') {                                                                // 10211
                delete headers[header];                                                                                // 10212
            }                                                                                                          // 10213
          });                                                                                                          // 10214
        }                                                                                                              // 10215
                                                                                                                       // 10216
        if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {                           // 10217
          config.withCredentials = defaults.withCredentials;                                                           // 10218
        }                                                                                                              // 10219
                                                                                                                       // 10220
        // send request                                                                                                // 10221
        return sendReq(config, reqData).then(transformResponse, transformResponse);                                    // 10222
      };                                                                                                               // 10223
                                                                                                                       // 10224
      var chain = [serverRequest, undefined];                                                                          // 10225
      var promise = $q.when(config);                                                                                   // 10226
                                                                                                                       // 10227
      // apply interceptors                                                                                            // 10228
      forEach(reversedInterceptors, function(interceptor) {                                                            // 10229
        if (interceptor.request || interceptor.requestError) {                                                         // 10230
          chain.unshift(interceptor.request, interceptor.requestError);                                                // 10231
        }                                                                                                              // 10232
        if (interceptor.response || interceptor.responseError) {                                                       // 10233
          chain.push(interceptor.response, interceptor.responseError);                                                 // 10234
        }                                                                                                              // 10235
      });                                                                                                              // 10236
                                                                                                                       // 10237
      while (chain.length) {                                                                                           // 10238
        var thenFn = chain.shift();                                                                                    // 10239
        var rejectFn = chain.shift();                                                                                  // 10240
                                                                                                                       // 10241
        promise = promise.then(thenFn, rejectFn);                                                                      // 10242
      }                                                                                                                // 10243
                                                                                                                       // 10244
      if (useLegacyPromise) {                                                                                          // 10245
        promise.success = function(fn) {                                                                               // 10246
          assertArgFn(fn, 'fn');                                                                                       // 10247
                                                                                                                       // 10248
          promise.then(function(response) {                                                                            // 10249
            fn(response.data, response.status, response.headers, config);                                              // 10250
          });                                                                                                          // 10251
          return promise;                                                                                              // 10252
        };                                                                                                             // 10253
                                                                                                                       // 10254
        promise.error = function(fn) {                                                                                 // 10255
          assertArgFn(fn, 'fn');                                                                                       // 10256
                                                                                                                       // 10257
          promise.then(null, function(response) {                                                                      // 10258
            fn(response.data, response.status, response.headers, config);                                              // 10259
          });                                                                                                          // 10260
          return promise;                                                                                              // 10261
        };                                                                                                             // 10262
      } else {                                                                                                         // 10263
        promise.success = $httpMinErrLegacyFn('success');                                                              // 10264
        promise.error = $httpMinErrLegacyFn('error');                                                                  // 10265
      }                                                                                                                // 10266
                                                                                                                       // 10267
      return promise;                                                                                                  // 10268
                                                                                                                       // 10269
      function transformResponse(response) {                                                                           // 10270
        // make a copy since the response must be cacheable                                                            // 10271
        var resp = extend({}, response);                                                                               // 10272
        if (!response.data) {                                                                                          // 10273
          resp.data = response.data;                                                                                   // 10274
        } else {                                                                                                       // 10275
          resp.data = transformData(response.data, response.headers, response.status, config.transformResponse);       // 10276
        }                                                                                                              // 10277
        return (isSuccess(response.status))                                                                            // 10278
          ? resp                                                                                                       // 10279
          : $q.reject(resp);                                                                                           // 10280
      }                                                                                                                // 10281
                                                                                                                       // 10282
      function executeHeaderFns(headers, config) {                                                                     // 10283
        var headerContent, processedHeaders = {};                                                                      // 10284
                                                                                                                       // 10285
        forEach(headers, function(headerFn, header) {                                                                  // 10286
          if (isFunction(headerFn)) {                                                                                  // 10287
            headerContent = headerFn(config);                                                                          // 10288
            if (headerContent != null) {                                                                               // 10289
              processedHeaders[header] = headerContent;                                                                // 10290
            }                                                                                                          // 10291
          } else {                                                                                                     // 10292
            processedHeaders[header] = headerFn;                                                                       // 10293
          }                                                                                                            // 10294
        });                                                                                                            // 10295
                                                                                                                       // 10296
        return processedHeaders;                                                                                       // 10297
      }                                                                                                                // 10298
                                                                                                                       // 10299
      function mergeHeaders(config) {                                                                                  // 10300
        var defHeaders = defaults.headers,                                                                             // 10301
            reqHeaders = extend({}, config.headers),                                                                   // 10302
            defHeaderName, lowercaseDefHeaderName, reqHeaderName;                                                      // 10303
                                                                                                                       // 10304
        defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);                              // 10305
                                                                                                                       // 10306
        // using for-in instead of forEach to avoid unecessary iteration after header has been found                   // 10307
        defaultHeadersIteration:                                                                                       // 10308
        for (defHeaderName in defHeaders) {                                                                            // 10309
          lowercaseDefHeaderName = lowercase(defHeaderName);                                                           // 10310
                                                                                                                       // 10311
          for (reqHeaderName in reqHeaders) {                                                                          // 10312
            if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {                                                 // 10313
              continue defaultHeadersIteration;                                                                        // 10314
            }                                                                                                          // 10315
          }                                                                                                            // 10316
                                                                                                                       // 10317
          reqHeaders[defHeaderName] = defHeaders[defHeaderName];                                                       // 10318
        }                                                                                                              // 10319
                                                                                                                       // 10320
        // execute if header value is a function for merged headers                                                    // 10321
        return executeHeaderFns(reqHeaders, shallowCopy(config));                                                      // 10322
      }                                                                                                                // 10323
    }                                                                                                                  // 10324
                                                                                                                       // 10325
    $http.pendingRequests = [];                                                                                        // 10326
                                                                                                                       // 10327
    /**                                                                                                                // 10328
     * @ngdoc method                                                                                                   // 10329
     * @name $http#get                                                                                                 // 10330
     *                                                                                                                 // 10331
     * @description                                                                                                    // 10332
     * Shortcut method to perform `GET` request.                                                                       // 10333
     *                                                                                                                 // 10334
     * @param {string} url Relative or absolute URL specifying the destination of the request                          // 10335
     * @param {Object=} config Optional configuration object                                                           // 10336
     * @returns {HttpPromise} Future object                                                                            // 10337
     */                                                                                                                // 10338
                                                                                                                       // 10339
    /**                                                                                                                // 10340
     * @ngdoc method                                                                                                   // 10341
     * @name $http#delete                                                                                              // 10342
     *                                                                                                                 // 10343
     * @description                                                                                                    // 10344
     * Shortcut method to perform `DELETE` request.                                                                    // 10345
     *                                                                                                                 // 10346
     * @param {string} url Relative or absolute URL specifying the destination of the request                          // 10347
     * @param {Object=} config Optional configuration object                                                           // 10348
     * @returns {HttpPromise} Future object                                                                            // 10349
     */                                                                                                                // 10350
                                                                                                                       // 10351
    /**                                                                                                                // 10352
     * @ngdoc method                                                                                                   // 10353
     * @name $http#head                                                                                                // 10354
     *                                                                                                                 // 10355
     * @description                                                                                                    // 10356
     * Shortcut method to perform `HEAD` request.                                                                      // 10357
     *                                                                                                                 // 10358
     * @param {string} url Relative or absolute URL specifying the destination of the request                          // 10359
     * @param {Object=} config Optional configuration object                                                           // 10360
     * @returns {HttpPromise} Future object                                                                            // 10361
     */                                                                                                                // 10362
                                                                                                                       // 10363
    /**                                                                                                                // 10364
     * @ngdoc method                                                                                                   // 10365
     * @name $http#jsonp                                                                                               // 10366
     *                                                                                                                 // 10367
     * @description                                                                                                    // 10368
     * Shortcut method to perform `JSONP` request.                                                                     // 10369
     *                                                                                                                 // 10370
     * @param {string} url Relative or absolute URL specifying the destination of the request.                         // 10371
     *                     The name of the callback should be the string `JSON_CALLBACK`.                              // 10372
     * @param {Object=} config Optional configuration object                                                           // 10373
     * @returns {HttpPromise} Future object                                                                            // 10374
     */                                                                                                                // 10375
    createShortMethods('get', 'delete', 'head', 'jsonp');                                                              // 10376
                                                                                                                       // 10377
    /**                                                                                                                // 10378
     * @ngdoc method                                                                                                   // 10379
     * @name $http#post                                                                                                // 10380
     *                                                                                                                 // 10381
     * @description                                                                                                    // 10382
     * Shortcut method to perform `POST` request.                                                                      // 10383
     *                                                                                                                 // 10384
     * @param {string} url Relative or absolute URL specifying the destination of the request                          // 10385
     * @param {*} data Request content                                                                                 // 10386
     * @param {Object=} config Optional configuration object                                                           // 10387
     * @returns {HttpPromise} Future object                                                                            // 10388
     */                                                                                                                // 10389
                                                                                                                       // 10390
    /**                                                                                                                // 10391
     * @ngdoc method                                                                                                   // 10392
     * @name $http#put                                                                                                 // 10393
     *                                                                                                                 // 10394
     * @description                                                                                                    // 10395
     * Shortcut method to perform `PUT` request.                                                                       // 10396
     *                                                                                                                 // 10397
     * @param {string} url Relative or absolute URL specifying the destination of the request                          // 10398
     * @param {*} data Request content                                                                                 // 10399
     * @param {Object=} config Optional configuration object                                                           // 10400
     * @returns {HttpPromise} Future object                                                                            // 10401
     */                                                                                                                // 10402
                                                                                                                       // 10403
     /**                                                                                                               // 10404
      * @ngdoc method                                                                                                  // 10405
      * @name $http#patch                                                                                              // 10406
      *                                                                                                                // 10407
      * @description                                                                                                   // 10408
      * Shortcut method to perform `PATCH` request.                                                                    // 10409
      *                                                                                                                // 10410
      * @param {string} url Relative or absolute URL specifying the destination of the request                         // 10411
      * @param {*} data Request content                                                                                // 10412
      * @param {Object=} config Optional configuration object                                                          // 10413
      * @returns {HttpPromise} Future object                                                                           // 10414
      */                                                                                                               // 10415
    createShortMethodsWithData('post', 'put', 'patch');                                                                // 10416
                                                                                                                       // 10417
        /**                                                                                                            // 10418
         * @ngdoc property                                                                                             // 10419
         * @name $http#defaults                                                                                        // 10420
         *                                                                                                             // 10421
         * @description                                                                                                // 10422
         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of                        // 10423
         * default headers, withCredentials as well as request and response transformations.                           // 10424
         *                                                                                                             // 10425
         * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.                        // 10426
         */                                                                                                            // 10427
    $http.defaults = defaults;                                                                                         // 10428
                                                                                                                       // 10429
                                                                                                                       // 10430
    return $http;                                                                                                      // 10431
                                                                                                                       // 10432
                                                                                                                       // 10433
    function createShortMethods(names) {                                                                               // 10434
      forEach(arguments, function(name) {                                                                              // 10435
        $http[name] = function(url, config) {                                                                          // 10436
          return $http(extend({}, config || {}, {                                                                      // 10437
            method: name,                                                                                              // 10438
            url: url                                                                                                   // 10439
          }));                                                                                                         // 10440
        };                                                                                                             // 10441
      });                                                                                                              // 10442
    }                                                                                                                  // 10443
                                                                                                                       // 10444
                                                                                                                       // 10445
    function createShortMethodsWithData(name) {                                                                        // 10446
      forEach(arguments, function(name) {                                                                              // 10447
        $http[name] = function(url, data, config) {                                                                    // 10448
          return $http(extend({}, config || {}, {                                                                      // 10449
            method: name,                                                                                              // 10450
            url: url,                                                                                                  // 10451
            data: data                                                                                                 // 10452
          }));                                                                                                         // 10453
        };                                                                                                             // 10454
      });                                                                                                              // 10455
    }                                                                                                                  // 10456
                                                                                                                       // 10457
                                                                                                                       // 10458
    /**                                                                                                                // 10459
     * Makes the request.                                                                                              // 10460
     *                                                                                                                 // 10461
     * !!! ACCESSES CLOSURE VARS:                                                                                      // 10462
     * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests                                   // 10463
     */                                                                                                                // 10464
    function sendReq(config, reqData) {                                                                                // 10465
      var deferred = $q.defer(),                                                                                       // 10466
          promise = deferred.promise,                                                                                  // 10467
          cache,                                                                                                       // 10468
          cachedResp,                                                                                                  // 10469
          reqHeaders = config.headers,                                                                                 // 10470
          url = buildUrl(config.url, config.paramSerializer(config.params));                                           // 10471
                                                                                                                       // 10472
      $http.pendingRequests.push(config);                                                                              // 10473
      promise.then(removePendingReq, removePendingReq);                                                                // 10474
                                                                                                                       // 10475
                                                                                                                       // 10476
      if ((config.cache || defaults.cache) && config.cache !== false &&                                                // 10477
          (config.method === 'GET' || config.method === 'JSONP')) {                                                    // 10478
        cache = isObject(config.cache) ? config.cache                                                                  // 10479
              : isObject(defaults.cache) ? defaults.cache                                                              // 10480
              : defaultCache;                                                                                          // 10481
      }                                                                                                                // 10482
                                                                                                                       // 10483
      if (cache) {                                                                                                     // 10484
        cachedResp = cache.get(url);                                                                                   // 10485
        if (isDefined(cachedResp)) {                                                                                   // 10486
          if (isPromiseLike(cachedResp)) {                                                                             // 10487
            // cached request has already been sent, but there is no response yet                                      // 10488
            cachedResp.then(resolvePromiseWithResult, resolvePromiseWithResult);                                       // 10489
          } else {                                                                                                     // 10490
            // serving from cache                                                                                      // 10491
            if (isArray(cachedResp)) {                                                                                 // 10492
              resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3]);                 // 10493
            } else {                                                                                                   // 10494
              resolvePromise(cachedResp, 200, {}, 'OK');                                                               // 10495
            }                                                                                                          // 10496
          }                                                                                                            // 10497
        } else {                                                                                                       // 10498
          // put the promise for the non-transformed response into cache as a placeholder                              // 10499
          cache.put(url, promise);                                                                                     // 10500
        }                                                                                                              // 10501
      }                                                                                                                // 10502
                                                                                                                       // 10503
                                                                                                                       // 10504
      // if we won't have the response in cache, set the xsrf headers and                                              // 10505
      // send the request to the backend                                                                               // 10506
      if (isUndefined(cachedResp)) {                                                                                   // 10507
        var xsrfValue = urlIsSameOrigin(config.url)                                                                    // 10508
            ? $$cookieReader()[config.xsrfCookieName || defaults.xsrfCookieName]                                       // 10509
            : undefined;                                                                                               // 10510
        if (xsrfValue) {                                                                                               // 10511
          reqHeaders[(config.xsrfHeaderName || defaults.xsrfHeaderName)] = xsrfValue;                                  // 10512
        }                                                                                                              // 10513
                                                                                                                       // 10514
        $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout,                                    // 10515
            config.withCredentials, config.responseType);                                                              // 10516
      }                                                                                                                // 10517
                                                                                                                       // 10518
      return promise;                                                                                                  // 10519
                                                                                                                       // 10520
                                                                                                                       // 10521
      /**                                                                                                              // 10522
       * Callback registered to $httpBackend():                                                                        // 10523
       *  - caches the response if desired                                                                             // 10524
       *  - resolves the raw $http promise                                                                             // 10525
       *  - calls $apply                                                                                               // 10526
       */                                                                                                              // 10527
      function done(status, response, headersString, statusText) {                                                     // 10528
        if (cache) {                                                                                                   // 10529
          if (isSuccess(status)) {                                                                                     // 10530
            cache.put(url, [status, response, parseHeaders(headersString), statusText]);                               // 10531
          } else {                                                                                                     // 10532
            // remove promise from the cache                                                                           // 10533
            cache.remove(url);                                                                                         // 10534
          }                                                                                                            // 10535
        }                                                                                                              // 10536
                                                                                                                       // 10537
        function resolveHttpPromise() {                                                                                // 10538
          resolvePromise(response, status, headersString, statusText);                                                 // 10539
        }                                                                                                              // 10540
                                                                                                                       // 10541
        if (useApplyAsync) {                                                                                           // 10542
          $rootScope.$applyAsync(resolveHttpPromise);                                                                  // 10543
        } else {                                                                                                       // 10544
          resolveHttpPromise();                                                                                        // 10545
          if (!$rootScope.$$phase) $rootScope.$apply();                                                                // 10546
        }                                                                                                              // 10547
      }                                                                                                                // 10548
                                                                                                                       // 10549
                                                                                                                       // 10550
      /**                                                                                                              // 10551
       * Resolves the raw $http promise.                                                                               // 10552
       */                                                                                                              // 10553
      function resolvePromise(response, status, headers, statusText) {                                                 // 10554
        //status: HTTP response status code, 0, -1 (aborted by timeout / promise)                                      // 10555
        status = status >= -1 ? status : 0;                                                                            // 10556
                                                                                                                       // 10557
        (isSuccess(status) ? deferred.resolve : deferred.reject)({                                                     // 10558
          data: response,                                                                                              // 10559
          status: status,                                                                                              // 10560
          headers: headersGetter(headers),                                                                             // 10561
          config: config,                                                                                              // 10562
          statusText: statusText                                                                                       // 10563
        });                                                                                                            // 10564
      }                                                                                                                // 10565
                                                                                                                       // 10566
      function resolvePromiseWithResult(result) {                                                                      // 10567
        resolvePromise(result.data, result.status, shallowCopy(result.headers()), result.statusText);                  // 10568
      }                                                                                                                // 10569
                                                                                                                       // 10570
      function removePendingReq() {                                                                                    // 10571
        var idx = $http.pendingRequests.indexOf(config);                                                               // 10572
        if (idx !== -1) $http.pendingRequests.splice(idx, 1);                                                          // 10573
      }                                                                                                                // 10574
    }                                                                                                                  // 10575
                                                                                                                       // 10576
                                                                                                                       // 10577
    function buildUrl(url, serializedParams) {                                                                         // 10578
      if (serializedParams.length > 0) {                                                                               // 10579
        url += ((url.indexOf('?') == -1) ? '?' : '&') + serializedParams;                                              // 10580
      }                                                                                                                // 10581
      return url;                                                                                                      // 10582
    }                                                                                                                  // 10583
  }];                                                                                                                  // 10584
}                                                                                                                      // 10585
                                                                                                                       // 10586
/**                                                                                                                    // 10587
 * @ngdoc service                                                                                                      // 10588
 * @name $xhrFactory                                                                                                   // 10589
 *                                                                                                                     // 10590
 * @description                                                                                                        // 10591
 * Factory function used to create XMLHttpRequest objects.                                                             // 10592
 *                                                                                                                     // 10593
 * Replace or decorate this service to create your own custom XMLHttpRequest objects.                                  // 10594
 *                                                                                                                     // 10595
 * ```                                                                                                                 // 10596
 * angular.module('myApp', [])                                                                                         // 10597
 * .factory('$xhrFactory', function() {                                                                                // 10598
 *   return function createXhr(method, url) {                                                                          // 10599
 *     return new window.XMLHttpRequest({mozSystem: true});                                                            // 10600
 *   };                                                                                                                // 10601
 * });                                                                                                                 // 10602
 * ```                                                                                                                 // 10603
 *                                                                                                                     // 10604
 * @param {string} method HTTP method of the request (GET, POST, PUT, ..)                                              // 10605
 * @param {string} url URL of the request.                                                                             // 10606
 */                                                                                                                    // 10607
function $xhrFactoryProvider() {                                                                                       // 10608
  this.$get = function() {                                                                                             // 10609
    return function createXhr() {                                                                                      // 10610
      return new window.XMLHttpRequest();                                                                              // 10611
    };                                                                                                                 // 10612
  };                                                                                                                   // 10613
}                                                                                                                      // 10614
                                                                                                                       // 10615
/**                                                                                                                    // 10616
 * @ngdoc service                                                                                                      // 10617
 * @name $httpBackend                                                                                                  // 10618
 * @requires $window                                                                                                   // 10619
 * @requires $document                                                                                                 // 10620
 * @requires $xhrFactory                                                                                               // 10621
 *                                                                                                                     // 10622
 * @description                                                                                                        // 10623
 * HTTP backend used by the {@link ng.$http service} that delegates to                                                 // 10624
 * XMLHttpRequest object or JSONP and deals with browser incompatibilities.                                            // 10625
 *                                                                                                                     // 10626
 * You should never need to use this service directly, instead use the higher-level abstractions:                      // 10627
 * {@link ng.$http $http} or {@link ngResource.$resource $resource}.                                                   // 10628
 *                                                                                                                     // 10629
 * During testing this implementation is swapped with {@link ngMock.$httpBackend mock                                  // 10630
 * $httpBackend} which can be trained with responses.                                                                  // 10631
 */                                                                                                                    // 10632
function $HttpBackendProvider() {                                                                                      // 10633
  this.$get = ['$browser', '$window', '$document', '$xhrFactory', function($browser, $window, $document, $xhrFactory) {
    return createHttpBackend($browser, $xhrFactory, $browser.defer, $window.angular.callbacks, $document[0]);          // 10635
  }];                                                                                                                  // 10636
}                                                                                                                      // 10637
                                                                                                                       // 10638
function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {                               // 10639
  // TODO(vojta): fix the signature                                                                                    // 10640
  return function(method, url, post, callback, headers, timeout, withCredentials, responseType) {                      // 10641
    $browser.$$incOutstandingRequestCount();                                                                           // 10642
    url = url || $browser.url();                                                                                       // 10643
                                                                                                                       // 10644
    if (lowercase(method) == 'jsonp') {                                                                                // 10645
      var callbackId = '_' + (callbacks.counter++).toString(36);                                                       // 10646
      callbacks[callbackId] = function(data) {                                                                         // 10647
        callbacks[callbackId].data = data;                                                                             // 10648
        callbacks[callbackId].called = true;                                                                           // 10649
      };                                                                                                               // 10650
                                                                                                                       // 10651
      var jsonpDone = jsonpReq(url.replace('JSON_CALLBACK', 'angular.callbacks.' + callbackId),                        // 10652
          callbackId, function(status, text) {                                                                         // 10653
        completeRequest(callback, status, callbacks[callbackId].data, "", text);                                       // 10654
        callbacks[callbackId] = noop;                                                                                  // 10655
      });                                                                                                              // 10656
    } else {                                                                                                           // 10657
                                                                                                                       // 10658
      var xhr = createXhr(method, url);                                                                                // 10659
                                                                                                                       // 10660
      xhr.open(method, url, true);                                                                                     // 10661
      forEach(headers, function(value, key) {                                                                          // 10662
        if (isDefined(value)) {                                                                                        // 10663
            xhr.setRequestHeader(key, value);                                                                          // 10664
        }                                                                                                              // 10665
      });                                                                                                              // 10666
                                                                                                                       // 10667
      xhr.onload = function requestLoaded() {                                                                          // 10668
        var statusText = xhr.statusText || '';                                                                         // 10669
                                                                                                                       // 10670
        // responseText is the old-school way of retrieving response (supported by IE9)                                // 10671
        // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)                     // 10672
        var response = ('response' in xhr) ? xhr.response : xhr.responseText;                                          // 10673
                                                                                                                       // 10674
        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)                                                      // 10675
        var status = xhr.status === 1223 ? 204 : xhr.status;                                                           // 10676
                                                                                                                       // 10677
        // fix status code when it is 0 (0 status is undocumented).                                                    // 10678
        // Occurs when accessing file resources or on Android 4.1 stock browser                                        // 10679
        // while retrieving files from application cache.                                                              // 10680
        if (status === 0) {                                                                                            // 10681
          status = response ? 200 : urlResolve(url).protocol == 'file' ? 404 : 0;                                      // 10682
        }                                                                                                              // 10683
                                                                                                                       // 10684
        completeRequest(callback,                                                                                      // 10685
            status,                                                                                                    // 10686
            response,                                                                                                  // 10687
            xhr.getAllResponseHeaders(),                                                                               // 10688
            statusText);                                                                                               // 10689
      };                                                                                                               // 10690
                                                                                                                       // 10691
      var requestError = function() {                                                                                  // 10692
        // The response is always empty                                                                                // 10693
        // See https://xhr.spec.whatwg.org/#request-error-steps and https://fetch.spec.whatwg.org/#concept-network-error
        completeRequest(callback, -1, null, null, '');                                                                 // 10695
      };                                                                                                               // 10696
                                                                                                                       // 10697
      xhr.onerror = requestError;                                                                                      // 10698
      xhr.onabort = requestError;                                                                                      // 10699
                                                                                                                       // 10700
      if (withCredentials) {                                                                                           // 10701
        xhr.withCredentials = true;                                                                                    // 10702
      }                                                                                                                // 10703
                                                                                                                       // 10704
      if (responseType) {                                                                                              // 10705
        try {                                                                                                          // 10706
          xhr.responseType = responseType;                                                                             // 10707
        } catch (e) {                                                                                                  // 10708
          // WebKit added support for the json responseType value on 09/03/2013                                        // 10709
          // https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are                          // 10710
          // known to throw when setting the value "json" as the response type. Other older                            // 10711
          // browsers implementing the responseType                                                                    // 10712
          //                                                                                                           // 10713
          // The json response type can be ignored if not supported, because JSON payloads are                         // 10714
          // parsed on the client-side regardless.                                                                     // 10715
          if (responseType !== 'json') {                                                                               // 10716
            throw e;                                                                                                   // 10717
          }                                                                                                            // 10718
        }                                                                                                              // 10719
      }                                                                                                                // 10720
                                                                                                                       // 10721
      xhr.send(isUndefined(post) ? null : post);                                                                       // 10722
    }                                                                                                                  // 10723
                                                                                                                       // 10724
    if (timeout > 0) {                                                                                                 // 10725
      var timeoutId = $browserDefer(timeoutRequest, timeout);                                                          // 10726
    } else if (isPromiseLike(timeout)) {                                                                               // 10727
      timeout.then(timeoutRequest);                                                                                    // 10728
    }                                                                                                                  // 10729
                                                                                                                       // 10730
                                                                                                                       // 10731
    function timeoutRequest() {                                                                                        // 10732
      jsonpDone && jsonpDone();                                                                                        // 10733
      xhr && xhr.abort();                                                                                              // 10734
    }                                                                                                                  // 10735
                                                                                                                       // 10736
    function completeRequest(callback, status, response, headersString, statusText) {                                  // 10737
      // cancel timeout and subsequent timeout promise resolution                                                      // 10738
      if (isDefined(timeoutId)) {                                                                                      // 10739
        $browserDefer.cancel(timeoutId);                                                                               // 10740
      }                                                                                                                // 10741
      jsonpDone = xhr = null;                                                                                          // 10742
                                                                                                                       // 10743
      callback(status, response, headersString, statusText);                                                           // 10744
      $browser.$$completeOutstandingRequest(noop);                                                                     // 10745
    }                                                                                                                  // 10746
  };                                                                                                                   // 10747
                                                                                                                       // 10748
  function jsonpReq(url, callbackId, done) {                                                                           // 10749
    // we can't use jQuery/jqLite here because jQuery does crazy stuff with script elements, e.g.:                     // 10750
    // - fetches local scripts via XHR and evals them                                                                  // 10751
    // - adds and immediately removes script elements from the document                                                // 10752
    var script = rawDocument.createElement('script'), callback = null;                                                 // 10753
    script.type = "text/javascript";                                                                                   // 10754
    script.src = url;                                                                                                  // 10755
    script.async = true;                                                                                               // 10756
                                                                                                                       // 10757
    callback = function(event) {                                                                                       // 10758
      removeEventListenerFn(script, "load", callback);                                                                 // 10759
      removeEventListenerFn(script, "error", callback);                                                                // 10760
      rawDocument.body.removeChild(script);                                                                            // 10761
      script = null;                                                                                                   // 10762
      var status = -1;                                                                                                 // 10763
      var text = "unknown";                                                                                            // 10764
                                                                                                                       // 10765
      if (event) {                                                                                                     // 10766
        if (event.type === "load" && !callbacks[callbackId].called) {                                                  // 10767
          event = { type: "error" };                                                                                   // 10768
        }                                                                                                              // 10769
        text = event.type;                                                                                             // 10770
        status = event.type === "error" ? 404 : 200;                                                                   // 10771
      }                                                                                                                // 10772
                                                                                                                       // 10773
      if (done) {                                                                                                      // 10774
        done(status, text);                                                                                            // 10775
      }                                                                                                                // 10776
    };                                                                                                                 // 10777
                                                                                                                       // 10778
    addEventListenerFn(script, "load", callback);                                                                      // 10779
    addEventListenerFn(script, "error", callback);                                                                     // 10780
    rawDocument.body.appendChild(script);                                                                              // 10781
    return callback;                                                                                                   // 10782
  }                                                                                                                    // 10783
}                                                                                                                      // 10784
                                                                                                                       // 10785
var $interpolateMinErr = angular.$interpolateMinErr = minErr('$interpolate');                                          // 10786
$interpolateMinErr.throwNoconcat = function(text) {                                                                    // 10787
  throw $interpolateMinErr('noconcat',                                                                                 // 10788
      "Error while interpolating: {0}\nStrict Contextual Escaping disallows " +                                        // 10789
      "interpolations that concatenate multiple expressions when a trusted value is " +                                // 10790
      "required.  See http://docs.angularjs.org/api/ng.$sce", text);                                                   // 10791
};                                                                                                                     // 10792
                                                                                                                       // 10793
$interpolateMinErr.interr = function(text, err) {                                                                      // 10794
  return $interpolateMinErr('interr', "Can't interpolate: {0}\n{1}", text, err.toString());                            // 10795
};                                                                                                                     // 10796
                                                                                                                       // 10797
/**                                                                                                                    // 10798
 * @ngdoc provider                                                                                                     // 10799
 * @name $interpolateProvider                                                                                          // 10800
 *                                                                                                                     // 10801
 * @description                                                                                                        // 10802
 *                                                                                                                     // 10803
 * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.                                           // 10804
 *                                                                                                                     // 10805
 * @example                                                                                                            // 10806
<example module="customInterpolationApp">                                                                              // 10807
<file name="index.html">                                                                                               // 10808
<script>                                                                                                               // 10809
  var customInterpolationApp = angular.module('customInterpolationApp', []);                                           // 10810
                                                                                                                       // 10811
  customInterpolationApp.config(function($interpolateProvider) {                                                       // 10812
    $interpolateProvider.startSymbol('//');                                                                            // 10813
    $interpolateProvider.endSymbol('//');                                                                              // 10814
  });                                                                                                                  // 10815
                                                                                                                       // 10816
                                                                                                                       // 10817
  customInterpolationApp.controller('DemoController', function() {                                                     // 10818
      this.label = "This binding is brought you by // interpolation symbols.";                                         // 10819
  });                                                                                                                  // 10820
</script>                                                                                                              // 10821
<div ng-app="App" ng-controller="DemoController as demo">                                                              // 10822
    //demo.label//                                                                                                     // 10823
</div>                                                                                                                 // 10824
</file>                                                                                                                // 10825
<file name="protractor.js" type="protractor">                                                                          // 10826
  it('should interpolate binding with custom symbols', function() {                                                    // 10827
    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');
  });                                                                                                                  // 10829
</file>                                                                                                                // 10830
</example>                                                                                                             // 10831
 */                                                                                                                    // 10832
function $InterpolateProvider() {                                                                                      // 10833
  var startSymbol = '{{';                                                                                              // 10834
  var endSymbol = '}}';                                                                                                // 10835
                                                                                                                       // 10836
  /**                                                                                                                  // 10837
   * @ngdoc method                                                                                                     // 10838
   * @name $interpolateProvider#startSymbol                                                                            // 10839
   * @description                                                                                                      // 10840
   * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.                                // 10841
   *                                                                                                                   // 10842
   * @param {string=} value new value to set the starting symbol to.                                                   // 10843
   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.                         // 10844
   */                                                                                                                  // 10845
  this.startSymbol = function(value) {                                                                                 // 10846
    if (value) {                                                                                                       // 10847
      startSymbol = value;                                                                                             // 10848
      return this;                                                                                                     // 10849
    } else {                                                                                                           // 10850
      return startSymbol;                                                                                              // 10851
    }                                                                                                                  // 10852
  };                                                                                                                   // 10853
                                                                                                                       // 10854
  /**                                                                                                                  // 10855
   * @ngdoc method                                                                                                     // 10856
   * @name $interpolateProvider#endSymbol                                                                              // 10857
   * @description                                                                                                      // 10858
   * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.                              // 10859
   *                                                                                                                   // 10860
   * @param {string=} value new value to set the ending symbol to.                                                     // 10861
   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.                         // 10862
   */                                                                                                                  // 10863
  this.endSymbol = function(value) {                                                                                   // 10864
    if (value) {                                                                                                       // 10865
      endSymbol = value;                                                                                               // 10866
      return this;                                                                                                     // 10867
    } else {                                                                                                           // 10868
      return endSymbol;                                                                                                // 10869
    }                                                                                                                  // 10870
  };                                                                                                                   // 10871
                                                                                                                       // 10872
                                                                                                                       // 10873
  this.$get = ['$parse', '$exceptionHandler', '$sce', function($parse, $exceptionHandler, $sce) {                      // 10874
    var startSymbolLength = startSymbol.length,                                                                        // 10875
        endSymbolLength = endSymbol.length,                                                                            // 10876
        escapedStartRegexp = new RegExp(startSymbol.replace(/./g, escape), 'g'),                                       // 10877
        escapedEndRegexp = new RegExp(endSymbol.replace(/./g, escape), 'g');                                           // 10878
                                                                                                                       // 10879
    function escape(ch) {                                                                                              // 10880
      return '\\\\\\' + ch;                                                                                            // 10881
    }                                                                                                                  // 10882
                                                                                                                       // 10883
    function unescapeText(text) {                                                                                      // 10884
      return text.replace(escapedStartRegexp, startSymbol).                                                            // 10885
        replace(escapedEndRegexp, endSymbol);                                                                          // 10886
    }                                                                                                                  // 10887
                                                                                                                       // 10888
    function stringify(value) {                                                                                        // 10889
      if (value == null) { // null || undefined                                                                        // 10890
        return '';                                                                                                     // 10891
      }                                                                                                                // 10892
      switch (typeof value) {                                                                                          // 10893
        case 'string':                                                                                                 // 10894
          break;                                                                                                       // 10895
        case 'number':                                                                                                 // 10896
          value = '' + value;                                                                                          // 10897
          break;                                                                                                       // 10898
        default:                                                                                                       // 10899
          value = toJson(value);                                                                                       // 10900
      }                                                                                                                // 10901
                                                                                                                       // 10902
      return value;                                                                                                    // 10903
    }                                                                                                                  // 10904
                                                                                                                       // 10905
    /**                                                                                                                // 10906
     * @ngdoc service                                                                                                  // 10907
     * @name $interpolate                                                                                              // 10908
     * @kind function                                                                                                  // 10909
     *                                                                                                                 // 10910
     * @requires $parse                                                                                                // 10911
     * @requires $sce                                                                                                  // 10912
     *                                                                                                                 // 10913
     * @description                                                                                                    // 10914
     *                                                                                                                 // 10915
     * Compiles a string with markup into an interpolation function. This service is used by the                       // 10916
     * HTML {@link ng.$compile $compile} service for data binding. See                                                 // 10917
     * {@link ng.$interpolateProvider $interpolateProvider} for configuring the                                        // 10918
     * interpolation markup.                                                                                           // 10919
     *                                                                                                                 // 10920
     *                                                                                                                 // 10921
     * ```js                                                                                                           // 10922
     *   var $interpolate = ...; // injected                                                                           // 10923
     *   var exp = $interpolate('Hello {{name | uppercase}}!');                                                        // 10924
     *   expect(exp({name:'Angular'})).toEqual('Hello ANGULAR!');                                                      // 10925
     * ```                                                                                                             // 10926
     *                                                                                                                 // 10927
     * `$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is                          // 10928
     * `true`, the interpolation function will return `undefined` unless all embedded expressions                      // 10929
     * evaluate to a value other than `undefined`.                                                                     // 10930
     *                                                                                                                 // 10931
     * ```js                                                                                                           // 10932
     *   var $interpolate = ...; // injected                                                                           // 10933
     *   var context = {greeting: 'Hello', name: undefined };                                                          // 10934
     *                                                                                                                 // 10935
     *   // default "forgiving" mode                                                                                   // 10936
     *   var exp = $interpolate('{{greeting}} {{name}}!');                                                             // 10937
     *   expect(exp(context)).toEqual('Hello !');                                                                      // 10938
     *                                                                                                                 // 10939
     *   // "allOrNothing" mode                                                                                        // 10940
     *   exp = $interpolate('{{greeting}} {{name}}!', false, null, true);                                              // 10941
     *   expect(exp(context)).toBeUndefined();                                                                         // 10942
     *   context.name = 'Angular';                                                                                     // 10943
     *   expect(exp(context)).toEqual('Hello Angular!');                                                               // 10944
     * ```                                                                                                             // 10945
     *                                                                                                                 // 10946
     * `allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.                      // 10947
     *                                                                                                                 // 10948
     * ####Escaped Interpolation                                                                                       // 10949
     * $interpolate provides a mechanism for escaping interpolation markers. Start and end markers                     // 10950
     * can be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).                 // 10951
     * It will be rendered as a regular start/end marker, and will not be interpreted as an expression                 // 10952
     * or binding.                                                                                                     // 10953
     *                                                                                                                 // 10954
     * This enables web-servers to prevent script injection attacks and defacing attacks, to some                      // 10955
     * degree, while also enabling code examples to work without relying on the                                        // 10956
     * {@link ng.directive:ngNonBindable ngNonBindable} directive.                                                     // 10957
     *                                                                                                                 // 10958
     * **For security purposes, it is strongly encouraged that web servers escape user-supplied data,                  // 10959
     * replacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all                // 10960
     * interpolation start/end markers with their escaped counterparts.**                                              // 10961
     *                                                                                                                 // 10962
     * Escaped interpolation markers are only replaced with the actual interpolation markers in rendered               // 10963
     * output when the $interpolate service processes the text. So, for HTML elements interpolated                     // 10964
     * by {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter              // 10965
     * set to `true`, the interpolated text must contain an unescaped interpolation expression. As such,               // 10966
     * this is typically useful only when user-data is used in rendering a template from the server, or                // 10967
     * when otherwise untrusted data is used by a directive.                                                           // 10968
     *                                                                                                                 // 10969
     * <example>                                                                                                       // 10970
     *  <file name="index.html">                                                                                       // 10971
     *    <div ng-init="username='A user'">                                                                            // 10972
     *      <p ng-init="apptitle='Escaping demo'">{{apptitle}}: \{\{ username = "defaced value"; \}\}                  // 10973
     *        </p>                                                                                                     // 10974
     *      <p><strong>{{username}}</strong> attempts to inject code which will deface the                             // 10975
     *        application, but fails to accomplish their task, because the server has correctly                        // 10976
     *        escaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)                      // 10977
     *        characters.</p>                                                                                          // 10978
     *      <p>Instead, the result of the attempted script injection is visible, and can be removed                    // 10979
     *        from the database by an administrator.</p>                                                               // 10980
     *    </div>                                                                                                       // 10981
     *  </file>                                                                                                        // 10982
     * </example>                                                                                                      // 10983
     *                                                                                                                 // 10984
     * @param {string} text The text with markup to interpolate.                                                       // 10985
     * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have                     // 10986
     *    embedded expression in order to return an interpolation function. Strings with no                            // 10987
     *    embedded expression will return null for the interpolation function.                                         // 10988
     * @param {string=} trustedContext when provided, the returned function passes the interpolated                    // 10989
     *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,                                 // 10990
     *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that                        // 10991
     *    provides Strict Contextual Escaping for details.                                                             // 10992
     * @param {boolean=} allOrNothing if `true`, then the returned function returns undefined                          // 10993
     *    unless all embedded expressions evaluate to a value other than `undefined`.                                  // 10994
     * @returns {function(context)} an interpolation function which is used to compute the                             // 10995
     *    interpolated string. The function has these parameters:                                                      // 10996
     *                                                                                                                 // 10997
     * - `context`: evaluation context for all expressions embedded in the interpolated text                           // 10998
     */                                                                                                                // 10999
    function $interpolate(text, mustHaveExpression, trustedContext, allOrNothing) {                                    // 11000
      allOrNothing = !!allOrNothing;                                                                                   // 11001
      var startIndex,                                                                                                  // 11002
          endIndex,                                                                                                    // 11003
          index = 0,                                                                                                   // 11004
          expressions = [],                                                                                            // 11005
          parseFns = [],                                                                                               // 11006
          textLength = text.length,                                                                                    // 11007
          exp,                                                                                                         // 11008
          concat = [],                                                                                                 // 11009
          expressionPositions = [];                                                                                    // 11010
                                                                                                                       // 11011
      while (index < textLength) {                                                                                     // 11012
        if (((startIndex = text.indexOf(startSymbol, index)) != -1) &&                                                 // 11013
             ((endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) != -1)) {                           // 11014
          if (index !== startIndex) {                                                                                  // 11015
            concat.push(unescapeText(text.substring(index, startIndex)));                                              // 11016
          }                                                                                                            // 11017
          exp = text.substring(startIndex + startSymbolLength, endIndex);                                              // 11018
          expressions.push(exp);                                                                                       // 11019
          parseFns.push($parse(exp, parseStringifyInterceptor));                                                       // 11020
          index = endIndex + endSymbolLength;                                                                          // 11021
          expressionPositions.push(concat.length);                                                                     // 11022
          concat.push('');                                                                                             // 11023
        } else {                                                                                                       // 11024
          // we did not find an interpolation, so we have to add the remainder to the separators array                 // 11025
          if (index !== textLength) {                                                                                  // 11026
            concat.push(unescapeText(text.substring(index)));                                                          // 11027
          }                                                                                                            // 11028
          break;                                                                                                       // 11029
        }                                                                                                              // 11030
      }                                                                                                                // 11031
                                                                                                                       // 11032
      // Concatenating expressions makes it hard to reason about whether some combination of                           // 11033
      // concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a                      // 11034
      // single expression be used for iframe[src], object[src], etc., we ensure that the value                        // 11035
      // that's used is assigned or constructed by some JS code somewhere that is more testable or                     // 11036
      // make it obvious that you bound the value to some user controlled value.  This helps reduce                    // 11037
      // the load when auditing for XSS issues.                                                                        // 11038
      if (trustedContext && concat.length > 1) {                                                                       // 11039
          $interpolateMinErr.throwNoconcat(text);                                                                      // 11040
      }                                                                                                                // 11041
                                                                                                                       // 11042
      if (!mustHaveExpression || expressions.length) {                                                                 // 11043
        var compute = function(values) {                                                                               // 11044
          for (var i = 0, ii = expressions.length; i < ii; i++) {                                                      // 11045
            if (allOrNothing && isUndefined(values[i])) return;                                                        // 11046
            concat[expressionPositions[i]] = values[i];                                                                // 11047
          }                                                                                                            // 11048
          return concat.join('');                                                                                      // 11049
        };                                                                                                             // 11050
                                                                                                                       // 11051
        var getValue = function(value) {                                                                               // 11052
          return trustedContext ?                                                                                      // 11053
            $sce.getTrusted(trustedContext, value) :                                                                   // 11054
            $sce.valueOf(value);                                                                                       // 11055
        };                                                                                                             // 11056
                                                                                                                       // 11057
        return extend(function interpolationFn(context) {                                                              // 11058
            var i = 0;                                                                                                 // 11059
            var ii = expressions.length;                                                                               // 11060
            var values = new Array(ii);                                                                                // 11061
                                                                                                                       // 11062
            try {                                                                                                      // 11063
              for (; i < ii; i++) {                                                                                    // 11064
                values[i] = parseFns[i](context);                                                                      // 11065
              }                                                                                                        // 11066
                                                                                                                       // 11067
              return compute(values);                                                                                  // 11068
            } catch (err) {                                                                                            // 11069
              $exceptionHandler($interpolateMinErr.interr(text, err));                                                 // 11070
            }                                                                                                          // 11071
                                                                                                                       // 11072
          }, {                                                                                                         // 11073
          // all of these properties are undocumented for now                                                          // 11074
          exp: text, //just for compatibility with regular watchers created via $watch                                 // 11075
          expressions: expressions,                                                                                    // 11076
          $$watchDelegate: function(scope, listener) {                                                                 // 11077
            var lastValue;                                                                                             // 11078
            return scope.$watchGroup(parseFns, function interpolateFnWatcher(values, oldValues) {                      // 11079
              var currValue = compute(values);                                                                         // 11080
              if (isFunction(listener)) {                                                                              // 11081
                listener.call(this, currValue, values !== oldValues ? lastValue : currValue, scope);                   // 11082
              }                                                                                                        // 11083
              lastValue = currValue;                                                                                   // 11084
            });                                                                                                        // 11085
          }                                                                                                            // 11086
        });                                                                                                            // 11087
      }                                                                                                                // 11088
                                                                                                                       // 11089
      function parseStringifyInterceptor(value) {                                                                      // 11090
        try {                                                                                                          // 11091
          value = getValue(value);                                                                                     // 11092
          return allOrNothing && !isDefined(value) ? value : stringify(value);                                         // 11093
        } catch (err) {                                                                                                // 11094
          $exceptionHandler($interpolateMinErr.interr(text, err));                                                     // 11095
        }                                                                                                              // 11096
      }                                                                                                                // 11097
    }                                                                                                                  // 11098
                                                                                                                       // 11099
                                                                                                                       // 11100
    /**                                                                                                                // 11101
     * @ngdoc method                                                                                                   // 11102
     * @name $interpolate#startSymbol                                                                                  // 11103
     * @description                                                                                                    // 11104
     * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.                          // 11105
     *                                                                                                                 // 11106
     * Use {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change                    // 11107
     * the symbol.                                                                                                     // 11108
     *                                                                                                                 // 11109
     * @returns {string} start symbol.                                                                                 // 11110
     */                                                                                                                // 11111
    $interpolate.startSymbol = function() {                                                                            // 11112
      return startSymbol;                                                                                              // 11113
    };                                                                                                                 // 11114
                                                                                                                       // 11115
                                                                                                                       // 11116
    /**                                                                                                                // 11117
     * @ngdoc method                                                                                                   // 11118
     * @name $interpolate#endSymbol                                                                                    // 11119
     * @description                                                                                                    // 11120
     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.                            // 11121
     *                                                                                                                 // 11122
     * Use {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change                        // 11123
     * the symbol.                                                                                                     // 11124
     *                                                                                                                 // 11125
     * @returns {string} end symbol.                                                                                   // 11126
     */                                                                                                                // 11127
    $interpolate.endSymbol = function() {                                                                              // 11128
      return endSymbol;                                                                                                // 11129
    };                                                                                                                 // 11130
                                                                                                                       // 11131
    return $interpolate;                                                                                               // 11132
  }];                                                                                                                  // 11133
}                                                                                                                      // 11134
                                                                                                                       // 11135
function $IntervalProvider() {                                                                                         // 11136
  this.$get = ['$rootScope', '$window', '$q', '$$q',                                                                   // 11137
       function($rootScope,   $window,   $q,   $$q) {                                                                  // 11138
    var intervals = {};                                                                                                // 11139
                                                                                                                       // 11140
                                                                                                                       // 11141
     /**                                                                                                               // 11142
      * @ngdoc service                                                                                                 // 11143
      * @name $interval                                                                                                // 11144
      *                                                                                                                // 11145
      * @description                                                                                                   // 11146
      * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`                        // 11147
      * milliseconds.                                                                                                  // 11148
      *                                                                                                                // 11149
      * The return value of registering an interval function is a promise. This promise will be                        // 11150
      * notified upon each tick of the interval, and will be resolved after `count` iterations, or                     // 11151
      * run indefinitely if `count` is not defined. The value of the notification will be the                          // 11152
      * number of iterations that have run.                                                                            // 11153
      * To cancel an interval, call `$interval.cancel(promise)`.                                                       // 11154
      *                                                                                                                // 11155
      * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to                               // 11156
      * move forward by `millis` milliseconds and trigger any functions scheduled to run in that                       // 11157
      * time.                                                                                                          // 11158
      *                                                                                                                // 11159
      * <div class="alert alert-warning">                                                                              // 11160
      * **Note**: Intervals created by this service must be explicitly destroyed when you are finished                 // 11161
      * with them.  In particular they are not automatically destroyed when a controller's scope or a                  // 11162
      * directive's element are destroyed.                                                                             // 11163
      * You should take this into consideration and make sure to always cancel the interval at the                     // 11164
      * appropriate moment.  See the example below for more details on how and when to do this.                        // 11165
      * </div>                                                                                                         // 11166
      *                                                                                                                // 11167
      * @param {function()} fn A function that should be called repeatedly.                                            // 11168
      * @param {number} delay Number of milliseconds between each function call.                                       // 11169
      * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat                            // 11170
      *   indefinitely.                                                                                                // 11171
      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise                   // 11172
      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.                                 // 11173
      * @param {...*=} Pass additional parameters to the executed function.                                            // 11174
      * @returns {promise} A promise which will be notified on each iteration.                                         // 11175
      *                                                                                                                // 11176
      * @example                                                                                                       // 11177
      * <example module="intervalExample">                                                                             // 11178
      * <file name="index.html">                                                                                       // 11179
      *   <script>                                                                                                     // 11180
      *     angular.module('intervalExample', [])                                                                      // 11181
      *       .controller('ExampleController', ['$scope', '$interval',                                                 // 11182
      *         function($scope, $interval) {                                                                          // 11183
      *           $scope.format = 'M/d/yy h:mm:ss a';                                                                  // 11184
      *           $scope.blood_1 = 100;                                                                                // 11185
      *           $scope.blood_2 = 120;                                                                                // 11186
      *                                                                                                                // 11187
      *           var stop;                                                                                            // 11188
      *           $scope.fight = function() {                                                                          // 11189
      *             // Don't start a new fight if we are already fighting                                              // 11190
      *             if ( angular.isDefined(stop) ) return;                                                             // 11191
      *                                                                                                                // 11192
      *             stop = $interval(function() {                                                                      // 11193
      *               if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {                                                  // 11194
      *                 $scope.blood_1 = $scope.blood_1 - 3;                                                           // 11195
      *                 $scope.blood_2 = $scope.blood_2 - 4;                                                           // 11196
      *               } else {                                                                                         // 11197
      *                 $scope.stopFight();                                                                            // 11198
      *               }                                                                                                // 11199
      *             }, 100);                                                                                           // 11200
      *           };                                                                                                   // 11201
      *                                                                                                                // 11202
      *           $scope.stopFight = function() {                                                                      // 11203
      *             if (angular.isDefined(stop)) {                                                                     // 11204
      *               $interval.cancel(stop);                                                                          // 11205
      *               stop = undefined;                                                                                // 11206
      *             }                                                                                                  // 11207
      *           };                                                                                                   // 11208
      *                                                                                                                // 11209
      *           $scope.resetFight = function() {                                                                     // 11210
      *             $scope.blood_1 = 100;                                                                              // 11211
      *             $scope.blood_2 = 120;                                                                              // 11212
      *           };                                                                                                   // 11213
      *                                                                                                                // 11214
      *           $scope.$on('$destroy', function() {                                                                  // 11215
      *             // Make sure that the interval is destroyed too                                                    // 11216
      *             $scope.stopFight();                                                                                // 11217
      *           });                                                                                                  // 11218
      *         }])                                                                                                    // 11219
      *       // Register the 'myCurrentTime' directive factory method.                                                // 11220
      *       // We inject $interval and dateFilter service since the factory method is DI.                            // 11221
      *       .directive('myCurrentTime', ['$interval', 'dateFilter',                                                  // 11222
      *         function($interval, dateFilter) {                                                                      // 11223
      *           // return the directive link function. (compile function not needed)                                 // 11224
      *           return function(scope, element, attrs) {                                                             // 11225
      *             var format,  // date format                                                                        // 11226
      *                 stopTime; // so that we can cancel the time updates                                            // 11227
      *                                                                                                                // 11228
      *             // used to update the UI                                                                           // 11229
      *             function updateTime() {                                                                            // 11230
      *               element.text(dateFilter(new Date(), format));                                                    // 11231
      *             }                                                                                                  // 11232
      *                                                                                                                // 11233
      *             // watch the expression, and update the UI on change.                                              // 11234
      *             scope.$watch(attrs.myCurrentTime, function(value) {                                                // 11235
      *               format = value;                                                                                  // 11236
      *               updateTime();                                                                                    // 11237
      *             });                                                                                                // 11238
      *                                                                                                                // 11239
      *             stopTime = $interval(updateTime, 1000);                                                            // 11240
      *                                                                                                                // 11241
      *             // listen on DOM destroy (removal) event, and cancel the next UI update                            // 11242
      *             // to prevent updating time after the DOM element was removed.                                     // 11243
      *             element.on('$destroy', function() {                                                                // 11244
      *               $interval.cancel(stopTime);                                                                      // 11245
      *             });                                                                                                // 11246
      *           }                                                                                                    // 11247
      *         }]);                                                                                                   // 11248
      *   </script>                                                                                                    // 11249
      *                                                                                                                // 11250
      *   <div>                                                                                                        // 11251
      *     <div ng-controller="ExampleController">                                                                    // 11252
      *       <label>Date format: <input ng-model="format"></label> <hr/>                                              // 11253
      *       Current time is: <span my-current-time="format"></span>                                                  // 11254
      *       <hr/>                                                                                                    // 11255
      *       Blood 1 : <font color='red'>{{blood_1}}</font>                                                           // 11256
      *       Blood 2 : <font color='red'>{{blood_2}}</font>                                                           // 11257
      *       <button type="button" data-ng-click="fight()">Fight</button>                                             // 11258
      *       <button type="button" data-ng-click="stopFight()">StopFight</button>                                     // 11259
      *       <button type="button" data-ng-click="resetFight()">resetFight</button>                                   // 11260
      *     </div>                                                                                                     // 11261
      *   </div>                                                                                                       // 11262
      *                                                                                                                // 11263
      * </file>                                                                                                        // 11264
      * </example>                                                                                                     // 11265
      */                                                                                                               // 11266
    function interval(fn, delay, count, invokeApply) {                                                                 // 11267
      var hasParams = arguments.length > 4,                                                                            // 11268
          args = hasParams ? sliceArgs(arguments, 4) : [],                                                             // 11269
          setInterval = $window.setInterval,                                                                           // 11270
          clearInterval = $window.clearInterval,                                                                       // 11271
          iteration = 0,                                                                                               // 11272
          skipApply = (isDefined(invokeApply) && !invokeApply),                                                        // 11273
          deferred = (skipApply ? $$q : $q).defer(),                                                                   // 11274
          promise = deferred.promise;                                                                                  // 11275
                                                                                                                       // 11276
      count = isDefined(count) ? count : 0;                                                                            // 11277
                                                                                                                       // 11278
      promise.then(null, null, (!hasParams) ? fn : function() {                                                        // 11279
        fn.apply(null, args);                                                                                          // 11280
      });                                                                                                              // 11281
                                                                                                                       // 11282
      promise.$$intervalId = setInterval(function tick() {                                                             // 11283
        deferred.notify(iteration++);                                                                                  // 11284
                                                                                                                       // 11285
        if (count > 0 && iteration >= count) {                                                                         // 11286
          deferred.resolve(iteration);                                                                                 // 11287
          clearInterval(promise.$$intervalId);                                                                         // 11288
          delete intervals[promise.$$intervalId];                                                                      // 11289
        }                                                                                                              // 11290
                                                                                                                       // 11291
        if (!skipApply) $rootScope.$apply();                                                                           // 11292
                                                                                                                       // 11293
      }, delay);                                                                                                       // 11294
                                                                                                                       // 11295
      intervals[promise.$$intervalId] = deferred;                                                                      // 11296
                                                                                                                       // 11297
      return promise;                                                                                                  // 11298
    }                                                                                                                  // 11299
                                                                                                                       // 11300
                                                                                                                       // 11301
     /**                                                                                                               // 11302
      * @ngdoc method                                                                                                  // 11303
      * @name $interval#cancel                                                                                         // 11304
      *                                                                                                                // 11305
      * @description                                                                                                   // 11306
      * Cancels a task associated with the `promise`.                                                                  // 11307
      *                                                                                                                // 11308
      * @param {Promise=} promise returned by the `$interval` function.                                                // 11309
      * @returns {boolean} Returns `true` if the task was successfully canceled.                                       // 11310
      */                                                                                                               // 11311
    interval.cancel = function(promise) {                                                                              // 11312
      if (promise && promise.$$intervalId in intervals) {                                                              // 11313
        intervals[promise.$$intervalId].reject('canceled');                                                            // 11314
        $window.clearInterval(promise.$$intervalId);                                                                   // 11315
        delete intervals[promise.$$intervalId];                                                                        // 11316
        return true;                                                                                                   // 11317
      }                                                                                                                // 11318
      return false;                                                                                                    // 11319
    };                                                                                                                 // 11320
                                                                                                                       // 11321
    return interval;                                                                                                   // 11322
  }];                                                                                                                  // 11323
}                                                                                                                      // 11324
                                                                                                                       // 11325
/**                                                                                                                    // 11326
 * @ngdoc service                                                                                                      // 11327
 * @name $locale                                                                                                       // 11328
 *                                                                                                                     // 11329
 * @description                                                                                                        // 11330
 * $locale service provides localization rules for various Angular components. As of right now the                     // 11331
 * only public api is:                                                                                                 // 11332
 *                                                                                                                     // 11333
 * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)                                  // 11334
 */                                                                                                                    // 11335
                                                                                                                       // 11336
var PATH_MATCH = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/,                                                                    // 11337
    DEFAULT_PORTS = {'http': 80, 'https': 443, 'ftp': 21};                                                             // 11338
var $locationMinErr = minErr('$location');                                                                             // 11339
                                                                                                                       // 11340
                                                                                                                       // 11341
/**                                                                                                                    // 11342
 * Encode path using encodeUriSegment, ignoring forward slashes                                                        // 11343
 *                                                                                                                     // 11344
 * @param {string} path Path to encode                                                                                 // 11345
 * @returns {string}                                                                                                   // 11346
 */                                                                                                                    // 11347
function encodePath(path) {                                                                                            // 11348
  var segments = path.split('/'),                                                                                      // 11349
      i = segments.length;                                                                                             // 11350
                                                                                                                       // 11351
  while (i--) {                                                                                                        // 11352
    segments[i] = encodeUriSegment(segments[i]);                                                                       // 11353
  }                                                                                                                    // 11354
                                                                                                                       // 11355
  return segments.join('/');                                                                                           // 11356
}                                                                                                                      // 11357
                                                                                                                       // 11358
function parseAbsoluteUrl(absoluteUrl, locationObj) {                                                                  // 11359
  var parsedUrl = urlResolve(absoluteUrl);                                                                             // 11360
                                                                                                                       // 11361
  locationObj.$$protocol = parsedUrl.protocol;                                                                         // 11362
  locationObj.$$host = parsedUrl.hostname;                                                                             // 11363
  locationObj.$$port = toInt(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;                             // 11364
}                                                                                                                      // 11365
                                                                                                                       // 11366
                                                                                                                       // 11367
function parseAppUrl(relativeUrl, locationObj) {                                                                       // 11368
  var prefixed = (relativeUrl.charAt(0) !== '/');                                                                      // 11369
  if (prefixed) {                                                                                                      // 11370
    relativeUrl = '/' + relativeUrl;                                                                                   // 11371
  }                                                                                                                    // 11372
  var match = urlResolve(relativeUrl);                                                                                 // 11373
  locationObj.$$path = decodeURIComponent(prefixed && match.pathname.charAt(0) === '/' ?                               // 11374
      match.pathname.substring(1) : match.pathname);                                                                   // 11375
  locationObj.$$search = parseKeyValue(match.search);                                                                  // 11376
  locationObj.$$hash = decodeURIComponent(match.hash);                                                                 // 11377
                                                                                                                       // 11378
  // make sure path starts with '/';                                                                                   // 11379
  if (locationObj.$$path && locationObj.$$path.charAt(0) != '/') {                                                     // 11380
    locationObj.$$path = '/' + locationObj.$$path;                                                                     // 11381
  }                                                                                                                    // 11382
}                                                                                                                      // 11383
                                                                                                                       // 11384
                                                                                                                       // 11385
/**                                                                                                                    // 11386
 *                                                                                                                     // 11387
 * @param {string} begin                                                                                               // 11388
 * @param {string} whole                                                                                               // 11389
 * @returns {string} returns text from whole after begin or undefined if it does not begin with                        // 11390
 *                   expected string.                                                                                  // 11391
 */                                                                                                                    // 11392
function beginsWith(begin, whole) {                                                                                    // 11393
  if (whole.indexOf(begin) === 0) {                                                                                    // 11394
    return whole.substr(begin.length);                                                                                 // 11395
  }                                                                                                                    // 11396
}                                                                                                                      // 11397
                                                                                                                       // 11398
                                                                                                                       // 11399
function stripHash(url) {                                                                                              // 11400
  var index = url.indexOf('#');                                                                                        // 11401
  return index == -1 ? url : url.substr(0, index);                                                                     // 11402
}                                                                                                                      // 11403
                                                                                                                       // 11404
function trimEmptyHash(url) {                                                                                          // 11405
  return url.replace(/(#.+)|#$/, '$1');                                                                                // 11406
}                                                                                                                      // 11407
                                                                                                                       // 11408
                                                                                                                       // 11409
function stripFile(url) {                                                                                              // 11410
  return url.substr(0, stripHash(url).lastIndexOf('/') + 1);                                                           // 11411
}                                                                                                                      // 11412
                                                                                                                       // 11413
/* return the server only (scheme://host:port) */                                                                      // 11414
function serverBase(url) {                                                                                             // 11415
  return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));                                                    // 11416
}                                                                                                                      // 11417
                                                                                                                       // 11418
                                                                                                                       // 11419
/**                                                                                                                    // 11420
 * LocationHtml5Url represents an url                                                                                  // 11421
 * This object is exposed as $location service when HTML5 mode is enabled and supported                                // 11422
 *                                                                                                                     // 11423
 * @constructor                                                                                                        // 11424
 * @param {string} appBase application base URL                                                                        // 11425
 * @param {string} appBaseNoFile application base URL stripped of any filename                                         // 11426
 * @param {string} basePrefix url path prefix                                                                          // 11427
 */                                                                                                                    // 11428
function LocationHtml5Url(appBase, appBaseNoFile, basePrefix) {                                                        // 11429
  this.$$html5 = true;                                                                                                 // 11430
  basePrefix = basePrefix || '';                                                                                       // 11431
  parseAbsoluteUrl(appBase, this);                                                                                     // 11432
                                                                                                                       // 11433
                                                                                                                       // 11434
  /**                                                                                                                  // 11435
   * Parse given html5 (regular) url string into properties                                                            // 11436
   * @param {string} url HTML5 url                                                                                     // 11437
   * @private                                                                                                          // 11438
   */                                                                                                                  // 11439
  this.$$parse = function(url) {                                                                                       // 11440
    var pathUrl = beginsWith(appBaseNoFile, url);                                                                      // 11441
    if (!isString(pathUrl)) {                                                                                          // 11442
      throw $locationMinErr('ipthprfx', 'Invalid url "{0}", missing path prefix "{1}".', url,                          // 11443
          appBaseNoFile);                                                                                              // 11444
    }                                                                                                                  // 11445
                                                                                                                       // 11446
    parseAppUrl(pathUrl, this);                                                                                        // 11447
                                                                                                                       // 11448
    if (!this.$$path) {                                                                                                // 11449
      this.$$path = '/';                                                                                               // 11450
    }                                                                                                                  // 11451
                                                                                                                       // 11452
    this.$$compose();                                                                                                  // 11453
  };                                                                                                                   // 11454
                                                                                                                       // 11455
  /**                                                                                                                  // 11456
   * Compose url and update `absUrl` property                                                                          // 11457
   * @private                                                                                                          // 11458
   */                                                                                                                  // 11459
  this.$$compose = function() {                                                                                        // 11460
    var search = toKeyValue(this.$$search),                                                                            // 11461
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';                                                 // 11462
                                                                                                                       // 11463
    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;                                        // 11464
    this.$$absUrl = appBaseNoFile + this.$$url.substr(1); // first char is always '/'                                  // 11465
  };                                                                                                                   // 11466
                                                                                                                       // 11467
  this.$$parseLinkUrl = function(url, relHref) {                                                                       // 11468
    if (relHref && relHref[0] === '#') {                                                                               // 11469
      // special case for links to hash fragments:                                                                     // 11470
      // keep the old url and only replace the hash fragment                                                           // 11471
      this.hash(relHref.slice(1));                                                                                     // 11472
      return true;                                                                                                     // 11473
    }                                                                                                                  // 11474
    var appUrl, prevAppUrl;                                                                                            // 11475
    var rewrittenUrl;                                                                                                  // 11476
                                                                                                                       // 11477
    if (isDefined(appUrl = beginsWith(appBase, url))) {                                                                // 11478
      prevAppUrl = appUrl;                                                                                             // 11479
      if (isDefined(appUrl = beginsWith(basePrefix, appUrl))) {                                                        // 11480
        rewrittenUrl = appBaseNoFile + (beginsWith('/', appUrl) || appUrl);                                            // 11481
      } else {                                                                                                         // 11482
        rewrittenUrl = appBase + prevAppUrl;                                                                           // 11483
      }                                                                                                                // 11484
    } else if (isDefined(appUrl = beginsWith(appBaseNoFile, url))) {                                                   // 11485
      rewrittenUrl = appBaseNoFile + appUrl;                                                                           // 11486
    } else if (appBaseNoFile == url + '/') {                                                                           // 11487
      rewrittenUrl = appBaseNoFile;                                                                                    // 11488
    }                                                                                                                  // 11489
    if (rewrittenUrl) {                                                                                                // 11490
      this.$$parse(rewrittenUrl);                                                                                      // 11491
    }                                                                                                                  // 11492
    return !!rewrittenUrl;                                                                                             // 11493
  };                                                                                                                   // 11494
}                                                                                                                      // 11495
                                                                                                                       // 11496
                                                                                                                       // 11497
/**                                                                                                                    // 11498
 * LocationHashbangUrl represents url                                                                                  // 11499
 * This object is exposed as $location service when developer doesn't opt into html5 mode.                             // 11500
 * It also serves as the base class for html5 mode fallback on legacy browsers.                                        // 11501
 *                                                                                                                     // 11502
 * @constructor                                                                                                        // 11503
 * @param {string} appBase application base URL                                                                        // 11504
 * @param {string} appBaseNoFile application base URL stripped of any filename                                         // 11505
 * @param {string} hashPrefix hashbang prefix                                                                          // 11506
 */                                                                                                                    // 11507
function LocationHashbangUrl(appBase, appBaseNoFile, hashPrefix) {                                                     // 11508
                                                                                                                       // 11509
  parseAbsoluteUrl(appBase, this);                                                                                     // 11510
                                                                                                                       // 11511
                                                                                                                       // 11512
  /**                                                                                                                  // 11513
   * Parse given hashbang url into properties                                                                          // 11514
   * @param {string} url Hashbang url                                                                                  // 11515
   * @private                                                                                                          // 11516
   */                                                                                                                  // 11517
  this.$$parse = function(url) {                                                                                       // 11518
    var withoutBaseUrl = beginsWith(appBase, url) || beginsWith(appBaseNoFile, url);                                   // 11519
    var withoutHashUrl;                                                                                                // 11520
                                                                                                                       // 11521
    if (!isUndefined(withoutBaseUrl) && withoutBaseUrl.charAt(0) === '#') {                                            // 11522
                                                                                                                       // 11523
      // The rest of the url starts with a hash so we have                                                             // 11524
      // got either a hashbang path or a plain hash fragment                                                           // 11525
      withoutHashUrl = beginsWith(hashPrefix, withoutBaseUrl);                                                         // 11526
      if (isUndefined(withoutHashUrl)) {                                                                               // 11527
        // There was no hashbang prefix so we just have a hash fragment                                                // 11528
        withoutHashUrl = withoutBaseUrl;                                                                               // 11529
      }                                                                                                                // 11530
                                                                                                                       // 11531
    } else {                                                                                                           // 11532
      // There was no hashbang path nor hash fragment:                                                                 // 11533
      // If we are in HTML5 mode we use what is left as the path;                                                      // 11534
      // Otherwise we ignore what is left                                                                              // 11535
      if (this.$$html5) {                                                                                              // 11536
        withoutHashUrl = withoutBaseUrl;                                                                               // 11537
      } else {                                                                                                         // 11538
        withoutHashUrl = '';                                                                                           // 11539
        if (isUndefined(withoutBaseUrl)) {                                                                             // 11540
          appBase = url;                                                                                               // 11541
          this.replace();                                                                                              // 11542
        }                                                                                                              // 11543
      }                                                                                                                // 11544
    }                                                                                                                  // 11545
                                                                                                                       // 11546
    parseAppUrl(withoutHashUrl, this);                                                                                 // 11547
                                                                                                                       // 11548
    this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);                                        // 11549
                                                                                                                       // 11550
    this.$$compose();                                                                                                  // 11551
                                                                                                                       // 11552
    /*                                                                                                                 // 11553
     * In Windows, on an anchor node on documents loaded from                                                          // 11554
     * the filesystem, the browser will return a pathname                                                              // 11555
     * prefixed with the drive name ('/C:/path') when a                                                                // 11556
     * pathname without a drive is set:                                                                                // 11557
     *  * a.setAttribute('href', '/foo')                                                                               // 11558
     *   * a.pathname === '/C:/foo' //true                                                                             // 11559
     *                                                                                                                 // 11560
     * Inside of Angular, we're always using pathnames that                                                            // 11561
     * do not include drive names for routing.                                                                         // 11562
     */                                                                                                                // 11563
    function removeWindowsDriveName(path, url, base) {                                                                 // 11564
      /*                                                                                                               // 11565
      Matches paths for file protocol on windows,                                                                      // 11566
      such as /C:/foo/bar, and captures only /foo/bar.                                                                 // 11567
      */                                                                                                               // 11568
      var windowsFilePathExp = /^\/[A-Z]:(\/.*)/;                                                                      // 11569
                                                                                                                       // 11570
      var firstPathSegmentMatch;                                                                                       // 11571
                                                                                                                       // 11572
      //Get the relative path from the input URL.                                                                      // 11573
      if (url.indexOf(base) === 0) {                                                                                   // 11574
        url = url.replace(base, '');                                                                                   // 11575
      }                                                                                                                // 11576
                                                                                                                       // 11577
      // The input URL intentionally contains a first path segment that ends with a colon.                             // 11578
      if (windowsFilePathExp.exec(url)) {                                                                              // 11579
        return path;                                                                                                   // 11580
      }                                                                                                                // 11581
                                                                                                                       // 11582
      firstPathSegmentMatch = windowsFilePathExp.exec(path);                                                           // 11583
      return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;                                                  // 11584
    }                                                                                                                  // 11585
  };                                                                                                                   // 11586
                                                                                                                       // 11587
  /**                                                                                                                  // 11588
   * Compose hashbang url and update `absUrl` property                                                                 // 11589
   * @private                                                                                                          // 11590
   */                                                                                                                  // 11591
  this.$$compose = function() {                                                                                        // 11592
    var search = toKeyValue(this.$$search),                                                                            // 11593
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';                                                 // 11594
                                                                                                                       // 11595
    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;                                        // 11596
    this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');                                             // 11597
  };                                                                                                                   // 11598
                                                                                                                       // 11599
  this.$$parseLinkUrl = function(url, relHref) {                                                                       // 11600
    if (stripHash(appBase) == stripHash(url)) {                                                                        // 11601
      this.$$parse(url);                                                                                               // 11602
      return true;                                                                                                     // 11603
    }                                                                                                                  // 11604
    return false;                                                                                                      // 11605
  };                                                                                                                   // 11606
}                                                                                                                      // 11607
                                                                                                                       // 11608
                                                                                                                       // 11609
/**                                                                                                                    // 11610
 * LocationHashbangUrl represents url                                                                                  // 11611
 * This object is exposed as $location service when html5 history api is enabled but the browser                       // 11612
 * does not support it.                                                                                                // 11613
 *                                                                                                                     // 11614
 * @constructor                                                                                                        // 11615
 * @param {string} appBase application base URL                                                                        // 11616
 * @param {string} appBaseNoFile application base URL stripped of any filename                                         // 11617
 * @param {string} hashPrefix hashbang prefix                                                                          // 11618
 */                                                                                                                    // 11619
function LocationHashbangInHtml5Url(appBase, appBaseNoFile, hashPrefix) {                                              // 11620
  this.$$html5 = true;                                                                                                 // 11621
  LocationHashbangUrl.apply(this, arguments);                                                                          // 11622
                                                                                                                       // 11623
  this.$$parseLinkUrl = function(url, relHref) {                                                                       // 11624
    if (relHref && relHref[0] === '#') {                                                                               // 11625
      // special case for links to hash fragments:                                                                     // 11626
      // keep the old url and only replace the hash fragment                                                           // 11627
      this.hash(relHref.slice(1));                                                                                     // 11628
      return true;                                                                                                     // 11629
    }                                                                                                                  // 11630
                                                                                                                       // 11631
    var rewrittenUrl;                                                                                                  // 11632
    var appUrl;                                                                                                        // 11633
                                                                                                                       // 11634
    if (appBase == stripHash(url)) {                                                                                   // 11635
      rewrittenUrl = url;                                                                                              // 11636
    } else if ((appUrl = beginsWith(appBaseNoFile, url))) {                                                            // 11637
      rewrittenUrl = appBase + hashPrefix + appUrl;                                                                    // 11638
    } else if (appBaseNoFile === url + '/') {                                                                          // 11639
      rewrittenUrl = appBaseNoFile;                                                                                    // 11640
    }                                                                                                                  // 11641
    if (rewrittenUrl) {                                                                                                // 11642
      this.$$parse(rewrittenUrl);                                                                                      // 11643
    }                                                                                                                  // 11644
    return !!rewrittenUrl;                                                                                             // 11645
  };                                                                                                                   // 11646
                                                                                                                       // 11647
  this.$$compose = function() {                                                                                        // 11648
    var search = toKeyValue(this.$$search),                                                                            // 11649
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';                                                 // 11650
                                                                                                                       // 11651
    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;                                        // 11652
    // include hashPrefix in $$absUrl when $$url is empty so IE9 does not reload page because of removal of '#'        // 11653
    this.$$absUrl = appBase + hashPrefix + this.$$url;                                                                 // 11654
  };                                                                                                                   // 11655
                                                                                                                       // 11656
}                                                                                                                      // 11657
                                                                                                                       // 11658
                                                                                                                       // 11659
var locationPrototype = {                                                                                              // 11660
                                                                                                                       // 11661
  /**                                                                                                                  // 11662
   * Are we in html5 mode?                                                                                             // 11663
   * @private                                                                                                          // 11664
   */                                                                                                                  // 11665
  $$html5: false,                                                                                                      // 11666
                                                                                                                       // 11667
  /**                                                                                                                  // 11668
   * Has any change been replacing?                                                                                    // 11669
   * @private                                                                                                          // 11670
   */                                                                                                                  // 11671
  $$replace: false,                                                                                                    // 11672
                                                                                                                       // 11673
  /**                                                                                                                  // 11674
   * @ngdoc method                                                                                                     // 11675
   * @name $location#absUrl                                                                                            // 11676
   *                                                                                                                   // 11677
   * @description                                                                                                      // 11678
   * This method is getter only.                                                                                       // 11679
   *                                                                                                                   // 11680
   * Return full url representation with all segments encoded according to rules specified in                          // 11681
   * [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).                                                                  // 11682
   *                                                                                                                   // 11683
   *                                                                                                                   // 11684
   * ```js                                                                                                             // 11685
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11686
   * var absUrl = $location.absUrl();                                                                                  // 11687
   * // => "http://example.com/#/some/path?foo=bar&baz=xoxo"                                                           // 11688
   * ```                                                                                                               // 11689
   *                                                                                                                   // 11690
   * @return {string} full url                                                                                         // 11691
   */                                                                                                                  // 11692
  absUrl: locationGetter('$$absUrl'),                                                                                  // 11693
                                                                                                                       // 11694
  /**                                                                                                                  // 11695
   * @ngdoc method                                                                                                     // 11696
   * @name $location#url                                                                                               // 11697
   *                                                                                                                   // 11698
   * @description                                                                                                      // 11699
   * This method is getter / setter.                                                                                   // 11700
   *                                                                                                                   // 11701
   * Return url (e.g. `/path?a=b#hash`) when called without any parameter.                                             // 11702
   *                                                                                                                   // 11703
   * Change path, search and hash, when called with parameter and return `$location`.                                  // 11704
   *                                                                                                                   // 11705
   *                                                                                                                   // 11706
   * ```js                                                                                                             // 11707
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11708
   * var url = $location.url();                                                                                        // 11709
   * // => "/some/path?foo=bar&baz=xoxo"                                                                               // 11710
   * ```                                                                                                               // 11711
   *                                                                                                                   // 11712
   * @param {string=} url New url without base prefix (e.g. `/path?a=b#hash`)                                          // 11713
   * @return {string} url                                                                                              // 11714
   */                                                                                                                  // 11715
  url: function(url) {                                                                                                 // 11716
    if (isUndefined(url)) {                                                                                            // 11717
      return this.$$url;                                                                                               // 11718
    }                                                                                                                  // 11719
                                                                                                                       // 11720
    var match = PATH_MATCH.exec(url);                                                                                  // 11721
    if (match[1] || url === '') this.path(decodeURIComponent(match[1]));                                               // 11722
    if (match[2] || match[1] || url === '') this.search(match[3] || '');                                               // 11723
    this.hash(match[5] || '');                                                                                         // 11724
                                                                                                                       // 11725
    return this;                                                                                                       // 11726
  },                                                                                                                   // 11727
                                                                                                                       // 11728
  /**                                                                                                                  // 11729
   * @ngdoc method                                                                                                     // 11730
   * @name $location#protocol                                                                                          // 11731
   *                                                                                                                   // 11732
   * @description                                                                                                      // 11733
   * This method is getter only.                                                                                       // 11734
   *                                                                                                                   // 11735
   * Return protocol of current url.                                                                                   // 11736
   *                                                                                                                   // 11737
   *                                                                                                                   // 11738
   * ```js                                                                                                             // 11739
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11740
   * var protocol = $location.protocol();                                                                              // 11741
   * // => "http"                                                                                                      // 11742
   * ```                                                                                                               // 11743
   *                                                                                                                   // 11744
   * @return {string} protocol of current url                                                                          // 11745
   */                                                                                                                  // 11746
  protocol: locationGetter('$$protocol'),                                                                              // 11747
                                                                                                                       // 11748
  /**                                                                                                                  // 11749
   * @ngdoc method                                                                                                     // 11750
   * @name $location#host                                                                                              // 11751
   *                                                                                                                   // 11752
   * @description                                                                                                      // 11753
   * This method is getter only.                                                                                       // 11754
   *                                                                                                                   // 11755
   * Return host of current url.                                                                                       // 11756
   *                                                                                                                   // 11757
   * Note: compared to the non-angular version `location.host` which returns `hostname:port`, this returns the `hostname` portion only.
   *                                                                                                                   // 11759
   *                                                                                                                   // 11760
   * ```js                                                                                                             // 11761
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11762
   * var host = $location.host();                                                                                      // 11763
   * // => "example.com"                                                                                               // 11764
   *                                                                                                                   // 11765
   * // given url http://user:password@example.com:8080/#/some/path?foo=bar&baz=xoxo                                   // 11766
   * host = $location.host();                                                                                          // 11767
   * // => "example.com"                                                                                               // 11768
   * host = location.host;                                                                                             // 11769
   * // => "example.com:8080"                                                                                          // 11770
   * ```                                                                                                               // 11771
   *                                                                                                                   // 11772
   * @return {string} host of current url.                                                                             // 11773
   */                                                                                                                  // 11774
  host: locationGetter('$$host'),                                                                                      // 11775
                                                                                                                       // 11776
  /**                                                                                                                  // 11777
   * @ngdoc method                                                                                                     // 11778
   * @name $location#port                                                                                              // 11779
   *                                                                                                                   // 11780
   * @description                                                                                                      // 11781
   * This method is getter only.                                                                                       // 11782
   *                                                                                                                   // 11783
   * Return port of current url.                                                                                       // 11784
   *                                                                                                                   // 11785
   *                                                                                                                   // 11786
   * ```js                                                                                                             // 11787
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11788
   * var port = $location.port();                                                                                      // 11789
   * // => 80                                                                                                          // 11790
   * ```                                                                                                               // 11791
   *                                                                                                                   // 11792
   * @return {Number} port                                                                                             // 11793
   */                                                                                                                  // 11794
  port: locationGetter('$$port'),                                                                                      // 11795
                                                                                                                       // 11796
  /**                                                                                                                  // 11797
   * @ngdoc method                                                                                                     // 11798
   * @name $location#path                                                                                              // 11799
   *                                                                                                                   // 11800
   * @description                                                                                                      // 11801
   * This method is getter / setter.                                                                                   // 11802
   *                                                                                                                   // 11803
   * Return path of current url when called without any parameter.                                                     // 11804
   *                                                                                                                   // 11805
   * Change path when called with parameter and return `$location`.                                                    // 11806
   *                                                                                                                   // 11807
   * Note: Path should always begin with forward slash (/), this method will add the forward slash                     // 11808
   * if it is missing.                                                                                                 // 11809
   *                                                                                                                   // 11810
   *                                                                                                                   // 11811
   * ```js                                                                                                             // 11812
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11813
   * var path = $location.path();                                                                                      // 11814
   * // => "/some/path"                                                                                                // 11815
   * ```                                                                                                               // 11816
   *                                                                                                                   // 11817
   * @param {(string|number)=} path New path                                                                           // 11818
   * @return {string} path                                                                                             // 11819
   */                                                                                                                  // 11820
  path: locationGetterSetter('$$path', function(path) {                                                                // 11821
    path = path !== null ? path.toString() : '';                                                                       // 11822
    return path.charAt(0) == '/' ? path : '/' + path;                                                                  // 11823
  }),                                                                                                                  // 11824
                                                                                                                       // 11825
  /**                                                                                                                  // 11826
   * @ngdoc method                                                                                                     // 11827
   * @name $location#search                                                                                            // 11828
   *                                                                                                                   // 11829
   * @description                                                                                                      // 11830
   * This method is getter / setter.                                                                                   // 11831
   *                                                                                                                   // 11832
   * Return search part (as object) of current url when called without any parameter.                                  // 11833
   *                                                                                                                   // 11834
   * Change search part when called with parameter and return `$location`.                                             // 11835
   *                                                                                                                   // 11836
   *                                                                                                                   // 11837
   * ```js                                                                                                             // 11838
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11839
   * var searchObject = $location.search();                                                                            // 11840
   * // => {foo: 'bar', baz: 'xoxo'}                                                                                   // 11841
   *                                                                                                                   // 11842
   * // set foo to 'yipee'                                                                                             // 11843
   * $location.search('foo', 'yipee');                                                                                 // 11844
   * // $location.search() => {foo: 'yipee', baz: 'xoxo'}                                                              // 11845
   * ```                                                                                                               // 11846
   *                                                                                                                   // 11847
   * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or                      // 11848
   * hash object.                                                                                                      // 11849
   *                                                                                                                   // 11850
   * When called with a single argument the method acts as a setter, setting the `search` component                    // 11851
   * of `$location` to the specified value.                                                                            // 11852
   *                                                                                                                   // 11853
   * If the argument is a hash object containing an array of values, these values will be encoded                      // 11854
   * as duplicate search parameters in the url.                                                                        // 11855
   *                                                                                                                   // 11856
   * @param {(string|Number|Array<string>|boolean)=} paramValue If `search` is a string or number, then `paramValue`   // 11857
   * will override only a single search property.                                                                      // 11858
   *                                                                                                                   // 11859
   * If `paramValue` is an array, it will override the property of the `search` component of                           // 11860
   * `$location` specified via the first argument.                                                                     // 11861
   *                                                                                                                   // 11862
   * If `paramValue` is `null`, the property specified via the first argument will be deleted.                         // 11863
   *                                                                                                                   // 11864
   * If `paramValue` is `true`, the property specified via the first argument will be added with no                    // 11865
   * value nor trailing equal sign.                                                                                    // 11866
   *                                                                                                                   // 11867
   * @return {Object} If called with no arguments returns the parsed `search` object. If called with                   // 11868
   * one or more arguments returns `$location` object itself.                                                          // 11869
   */                                                                                                                  // 11870
  search: function(search, paramValue) {                                                                               // 11871
    switch (arguments.length) {                                                                                        // 11872
      case 0:                                                                                                          // 11873
        return this.$$search;                                                                                          // 11874
      case 1:                                                                                                          // 11875
        if (isString(search) || isNumber(search)) {                                                                    // 11876
          search = search.toString();                                                                                  // 11877
          this.$$search = parseKeyValue(search);                                                                       // 11878
        } else if (isObject(search)) {                                                                                 // 11879
          search = copy(search, {});                                                                                   // 11880
          // remove object undefined or null properties                                                                // 11881
          forEach(search, function(value, key) {                                                                       // 11882
            if (value == null) delete search[key];                                                                     // 11883
          });                                                                                                          // 11884
                                                                                                                       // 11885
          this.$$search = search;                                                                                      // 11886
        } else {                                                                                                       // 11887
          throw $locationMinErr('isrcharg',                                                                            // 11888
              'The first argument of the `$location#search()` call must be a string or an object.');                   // 11889
        }                                                                                                              // 11890
        break;                                                                                                         // 11891
      default:                                                                                                         // 11892
        if (isUndefined(paramValue) || paramValue === null) {                                                          // 11893
          delete this.$$search[search];                                                                                // 11894
        } else {                                                                                                       // 11895
          this.$$search[search] = paramValue;                                                                          // 11896
        }                                                                                                              // 11897
    }                                                                                                                  // 11898
                                                                                                                       // 11899
    this.$$compose();                                                                                                  // 11900
    return this;                                                                                                       // 11901
  },                                                                                                                   // 11902
                                                                                                                       // 11903
  /**                                                                                                                  // 11904
   * @ngdoc method                                                                                                     // 11905
   * @name $location#hash                                                                                              // 11906
   *                                                                                                                   // 11907
   * @description                                                                                                      // 11908
   * This method is getter / setter.                                                                                   // 11909
   *                                                                                                                   // 11910
   * Return hash fragment when called without any parameter.                                                           // 11911
   *                                                                                                                   // 11912
   * Change hash fragment when called with parameter and return `$location`.                                           // 11913
   *                                                                                                                   // 11914
   *                                                                                                                   // 11915
   * ```js                                                                                                             // 11916
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo#hashValue                                            // 11917
   * var hash = $location.hash();                                                                                      // 11918
   * // => "hashValue"                                                                                                 // 11919
   * ```                                                                                                               // 11920
   *                                                                                                                   // 11921
   * @param {(string|number)=} hash New hash fragment                                                                  // 11922
   * @return {string} hash                                                                                             // 11923
   */                                                                                                                  // 11924
  hash: locationGetterSetter('$$hash', function(hash) {                                                                // 11925
    return hash !== null ? hash.toString() : '';                                                                       // 11926
  }),                                                                                                                  // 11927
                                                                                                                       // 11928
  /**                                                                                                                  // 11929
   * @ngdoc method                                                                                                     // 11930
   * @name $location#replace                                                                                           // 11931
   *                                                                                                                   // 11932
   * @description                                                                                                      // 11933
   * If called, all changes to $location during current `$digest` will be replacing current history                    // 11934
   * record, instead of adding new one.                                                                                // 11935
   */                                                                                                                  // 11936
  replace: function() {                                                                                                // 11937
    this.$$replace = true;                                                                                             // 11938
    return this;                                                                                                       // 11939
  }                                                                                                                    // 11940
};                                                                                                                     // 11941
                                                                                                                       // 11942
forEach([LocationHashbangInHtml5Url, LocationHashbangUrl, LocationHtml5Url], function(Location) {                      // 11943
  Location.prototype = Object.create(locationPrototype);                                                               // 11944
                                                                                                                       // 11945
  /**                                                                                                                  // 11946
   * @ngdoc method                                                                                                     // 11947
   * @name $location#state                                                                                             // 11948
   *                                                                                                                   // 11949
   * @description                                                                                                      // 11950
   * This method is getter / setter.                                                                                   // 11951
   *                                                                                                                   // 11952
   * Return the history state object when called without any parameter.                                                // 11953
   *                                                                                                                   // 11954
   * Change the history state object when called with one parameter and return `$location`.                            // 11955
   * The state object is later passed to `pushState` or `replaceState`.                                                // 11956
   *                                                                                                                   // 11957
   * NOTE: This method is supported only in HTML5 mode and only in browsers supporting                                 // 11958
   * the HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support                       // 11959
   * older browsers (like IE9 or Android < 4.0), don't use this method.                                                // 11960
   *                                                                                                                   // 11961
   * @param {object=} state State object for pushState or replaceState                                                 // 11962
   * @return {object} state                                                                                            // 11963
   */                                                                                                                  // 11964
  Location.prototype.state = function(state) {                                                                         // 11965
    if (!arguments.length) {                                                                                           // 11966
      return this.$$state;                                                                                             // 11967
    }                                                                                                                  // 11968
                                                                                                                       // 11969
    if (Location !== LocationHtml5Url || !this.$$html5) {                                                              // 11970
      throw $locationMinErr('nostate', 'History API state support is available only ' +                                // 11971
        'in HTML5 mode and only in browsers supporting HTML5 History API');                                            // 11972
    }                                                                                                                  // 11973
    // The user might modify `stateObject` after invoking `$location.state(stateObject)`                               // 11974
    // but we're changing the $$state reference to $browser.state() during the $digest                                 // 11975
    // so the modification window is narrow.                                                                           // 11976
    this.$$state = isUndefined(state) ? null : state;                                                                  // 11977
                                                                                                                       // 11978
    return this;                                                                                                       // 11979
  };                                                                                                                   // 11980
});                                                                                                                    // 11981
                                                                                                                       // 11982
                                                                                                                       // 11983
function locationGetter(property) {                                                                                    // 11984
  return function() {                                                                                                  // 11985
    return this[property];                                                                                             // 11986
  };                                                                                                                   // 11987
}                                                                                                                      // 11988
                                                                                                                       // 11989
                                                                                                                       // 11990
function locationGetterSetter(property, preprocess) {                                                                  // 11991
  return function(value) {                                                                                             // 11992
    if (isUndefined(value)) {                                                                                          // 11993
      return this[property];                                                                                           // 11994
    }                                                                                                                  // 11995
                                                                                                                       // 11996
    this[property] = preprocess(value);                                                                                // 11997
    this.$$compose();                                                                                                  // 11998
                                                                                                                       // 11999
    return this;                                                                                                       // 12000
  };                                                                                                                   // 12001
}                                                                                                                      // 12002
                                                                                                                       // 12003
                                                                                                                       // 12004
/**                                                                                                                    // 12005
 * @ngdoc service                                                                                                      // 12006
 * @name $location                                                                                                     // 12007
 *                                                                                                                     // 12008
 * @requires $rootElement                                                                                              // 12009
 *                                                                                                                     // 12010
 * @description                                                                                                        // 12011
 * The $location service parses the URL in the browser address bar (based on the                                       // 12012
 * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL                              // 12013
 * available to your application. Changes to the URL in the address bar are reflected into                             // 12014
 * $location service and changes to $location are reflected into the browser address bar.                              // 12015
 *                                                                                                                     // 12016
 * **The $location service:**                                                                                          // 12017
 *                                                                                                                     // 12018
 * - Exposes the current URL in the browser address bar, so you can                                                    // 12019
 *   - Watch and observe the URL.                                                                                      // 12020
 *   - Change the URL.                                                                                                 // 12021
 * - Synchronizes the URL with the browser when the user                                                               // 12022
 *   - Changes the address bar.                                                                                        // 12023
 *   - Clicks the back or forward button (or clicks a History link).                                                   // 12024
 *   - Clicks on a link.                                                                                               // 12025
 * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).                         // 12026
 *                                                                                                                     // 12027
 * For more information see {@link guide/$location Developer Guide: Using $location}                                   // 12028
 */                                                                                                                    // 12029
                                                                                                                       // 12030
/**                                                                                                                    // 12031
 * @ngdoc provider                                                                                                     // 12032
 * @name $locationProvider                                                                                             // 12033
 * @description                                                                                                        // 12034
 * Use the `$locationProvider` to configure how the application deep linking paths are stored.                         // 12035
 */                                                                                                                    // 12036
function $LocationProvider() {                                                                                         // 12037
  var hashPrefix = '',                                                                                                 // 12038
      html5Mode = {                                                                                                    // 12039
        enabled: false,                                                                                                // 12040
        requireBase: true,                                                                                             // 12041
        rewriteLinks: true                                                                                             // 12042
      };                                                                                                               // 12043
                                                                                                                       // 12044
  /**                                                                                                                  // 12045
   * @ngdoc method                                                                                                     // 12046
   * @name $locationProvider#hashPrefix                                                                                // 12047
   * @description                                                                                                      // 12048
   * @param {string=} prefix Prefix for hash part (containing path and search)                                         // 12049
   * @returns {*} current value if used as getter or itself (chaining) if used as setter                               // 12050
   */                                                                                                                  // 12051
  this.hashPrefix = function(prefix) {                                                                                 // 12052
    if (isDefined(prefix)) {                                                                                           // 12053
      hashPrefix = prefix;                                                                                             // 12054
      return this;                                                                                                     // 12055
    } else {                                                                                                           // 12056
      return hashPrefix;                                                                                               // 12057
    }                                                                                                                  // 12058
  };                                                                                                                   // 12059
                                                                                                                       // 12060
  /**                                                                                                                  // 12061
   * @ngdoc method                                                                                                     // 12062
   * @name $locationProvider#html5Mode                                                                                 // 12063
   * @description                                                                                                      // 12064
   * @param {(boolean|Object)=} mode If boolean, sets `html5Mode.enabled` to value.                                    // 12065
   *   If object, sets `enabled`, `requireBase` and `rewriteLinks` to respective values. Supported                     // 12066
   *   properties:                                                                                                     // 12067
   *   - **enabled** – `{boolean}` – (default: false) If true, will rely on `history.pushState` to                     // 12068
   *     change urls where supported. Will fall back to hash-prefixed paths in browsers that do not                    // 12069
   *     support `pushState`.                                                                                          // 12070
   *   - **requireBase** - `{boolean}` - (default: `true`) When html5Mode is enabled, specifies                        // 12071
   *     whether or not a <base> tag is required to be present. If `enabled` and `requireBase` are                     // 12072
   *     true, and a base tag is not present, an error will be thrown when `$location` is injected.                    // 12073
   *     See the {@link guide/$location $location guide for more information}                                          // 12074
   *   - **rewriteLinks** - `{boolean}` - (default: `true`) When html5Mode is enabled,                                 // 12075
   *     enables/disables url rewriting for relative links.                                                            // 12076
   *                                                                                                                   // 12077
   * @returns {Object} html5Mode object if used as getter or itself (chaining) if used as setter                       // 12078
   */                                                                                                                  // 12079
  this.html5Mode = function(mode) {                                                                                    // 12080
    if (isBoolean(mode)) {                                                                                             // 12081
      html5Mode.enabled = mode;                                                                                        // 12082
      return this;                                                                                                     // 12083
    } else if (isObject(mode)) {                                                                                       // 12084
                                                                                                                       // 12085
      if (isBoolean(mode.enabled)) {                                                                                   // 12086
        html5Mode.enabled = mode.enabled;                                                                              // 12087
      }                                                                                                                // 12088
                                                                                                                       // 12089
      if (isBoolean(mode.requireBase)) {                                                                               // 12090
        html5Mode.requireBase = mode.requireBase;                                                                      // 12091
      }                                                                                                                // 12092
                                                                                                                       // 12093
      if (isBoolean(mode.rewriteLinks)) {                                                                              // 12094
        html5Mode.rewriteLinks = mode.rewriteLinks;                                                                    // 12095
      }                                                                                                                // 12096
                                                                                                                       // 12097
      return this;                                                                                                     // 12098
    } else {                                                                                                           // 12099
      return html5Mode;                                                                                                // 12100
    }                                                                                                                  // 12101
  };                                                                                                                   // 12102
                                                                                                                       // 12103
  /**                                                                                                                  // 12104
   * @ngdoc event                                                                                                      // 12105
   * @name $location#$locationChangeStart                                                                              // 12106
   * @eventType broadcast on root scope                                                                                // 12107
   * @description                                                                                                      // 12108
   * Broadcasted before a URL will change.                                                                             // 12109
   *                                                                                                                   // 12110
   * This change can be prevented by calling                                                                           // 12111
   * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more                                // 12112
   * details about event object. Upon successful change                                                                // 12113
   * {@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.                                      // 12114
   *                                                                                                                   // 12115
   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when                               // 12116
   * the browser supports the HTML5 History API.                                                                       // 12117
   *                                                                                                                   // 12118
   * @param {Object} angularEvent Synthetic event object.                                                              // 12119
   * @param {string} newUrl New URL                                                                                    // 12120
   * @param {string=} oldUrl URL that was before it was changed.                                                       // 12121
   * @param {string=} newState New history state object                                                                // 12122
   * @param {string=} oldState History state object that was before it was changed.                                    // 12123
   */                                                                                                                  // 12124
                                                                                                                       // 12125
  /**                                                                                                                  // 12126
   * @ngdoc event                                                                                                      // 12127
   * @name $location#$locationChangeSuccess                                                                            // 12128
   * @eventType broadcast on root scope                                                                                // 12129
   * @description                                                                                                      // 12130
   * Broadcasted after a URL was changed.                                                                              // 12131
   *                                                                                                                   // 12132
   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when                               // 12133
   * the browser supports the HTML5 History API.                                                                       // 12134
   *                                                                                                                   // 12135
   * @param {Object} angularEvent Synthetic event object.                                                              // 12136
   * @param {string} newUrl New URL                                                                                    // 12137
   * @param {string=} oldUrl URL that was before it was changed.                                                       // 12138
   * @param {string=} newState New history state object                                                                // 12139
   * @param {string=} oldState History state object that was before it was changed.                                    // 12140
   */                                                                                                                  // 12141
                                                                                                                       // 12142
  this.$get = ['$rootScope', '$browser', '$sniffer', '$rootElement', '$window',                                        // 12143
      function($rootScope, $browser, $sniffer, $rootElement, $window) {                                                // 12144
    var $location,                                                                                                     // 12145
        LocationMode,                                                                                                  // 12146
        baseHref = $browser.baseHref(), // if base[href] is undefined, it defaults to ''                               // 12147
        initialUrl = $browser.url(),                                                                                   // 12148
        appBase;                                                                                                       // 12149
                                                                                                                       // 12150
    if (html5Mode.enabled) {                                                                                           // 12151
      if (!baseHref && html5Mode.requireBase) {                                                                        // 12152
        throw $locationMinErr('nobase',                                                                                // 12153
          "$location in HTML5 mode requires a <base> tag to be present!");                                             // 12154
      }                                                                                                                // 12155
      appBase = serverBase(initialUrl) + (baseHref || '/');                                                            // 12156
      LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;                                 // 12157
    } else {                                                                                                           // 12158
      appBase = stripHash(initialUrl);                                                                                 // 12159
      LocationMode = LocationHashbangUrl;                                                                              // 12160
    }                                                                                                                  // 12161
    var appBaseNoFile = stripFile(appBase);                                                                            // 12162
                                                                                                                       // 12163
    $location = new LocationMode(appBase, appBaseNoFile, '#' + hashPrefix);                                            // 12164
    $location.$$parseLinkUrl(initialUrl, initialUrl);                                                                  // 12165
                                                                                                                       // 12166
    $location.$$state = $browser.state();                                                                              // 12167
                                                                                                                       // 12168
    var IGNORE_URI_REGEXP = /^\s*(javascript|mailto):/i;                                                               // 12169
                                                                                                                       // 12170
    function setBrowserUrlWithFallback(url, replace, state) {                                                          // 12171
      var oldUrl = $location.url();                                                                                    // 12172
      var oldState = $location.$$state;                                                                                // 12173
      try {                                                                                                            // 12174
        $browser.url(url, replace, state);                                                                             // 12175
                                                                                                                       // 12176
        // Make sure $location.state() returns referentially identical (not just deeply equal)                         // 12177
        // state object; this makes possible quick checking if the state changed in the digest                         // 12178
        // loop. Checking deep equality would be too expensive.                                                        // 12179
        $location.$$state = $browser.state();                                                                          // 12180
      } catch (e) {                                                                                                    // 12181
        // Restore old values if pushState fails                                                                       // 12182
        $location.url(oldUrl);                                                                                         // 12183
        $location.$$state = oldState;                                                                                  // 12184
                                                                                                                       // 12185
        throw e;                                                                                                       // 12186
      }                                                                                                                // 12187
    }                                                                                                                  // 12188
                                                                                                                       // 12189
    $rootElement.on('click', function(event) {                                                                         // 12190
      // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)                                  // 12191
      // currently we open nice url link and redirect then                                                             // 12192
                                                                                                                       // 12193
      if (!html5Mode.rewriteLinks || event.ctrlKey || event.metaKey || event.shiftKey || event.which == 2 || event.button == 2) return;
                                                                                                                       // 12195
      var elm = jqLite(event.target);                                                                                  // 12196
                                                                                                                       // 12197
      // traverse the DOM up to find first A tag                                                                       // 12198
      while (nodeName_(elm[0]) !== 'a') {                                                                              // 12199
        // ignore rewriting if no A tag (reached root element, or no parent - removed from document)                   // 12200
        if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;                                            // 12201
      }                                                                                                                // 12202
                                                                                                                       // 12203
      var absHref = elm.prop('href');                                                                                  // 12204
      // get the actual href attribute - see                                                                           // 12205
      // http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx                                             // 12206
      var relHref = elm.attr('href') || elm.attr('xlink:href');                                                        // 12207
                                                                                                                       // 12208
      if (isObject(absHref) && absHref.toString() === '[object SVGAnimatedString]') {                                  // 12209
        // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during                   // 12210
        // an animation.                                                                                               // 12211
        absHref = urlResolve(absHref.animVal).href;                                                                    // 12212
      }                                                                                                                // 12213
                                                                                                                       // 12214
      // Ignore when url is started with javascript: or mailto:                                                        // 12215
      if (IGNORE_URI_REGEXP.test(absHref)) return;                                                                     // 12216
                                                                                                                       // 12217
      if (absHref && !elm.attr('target') && !event.isDefaultPrevented()) {                                             // 12218
        if ($location.$$parseLinkUrl(absHref, relHref)) {                                                              // 12219
          // We do a preventDefault for all urls that are part of the angular application,                             // 12220
          // in html5mode and also without, so that we are able to abort navigation without                            // 12221
          // getting double entries in the location history.                                                           // 12222
          event.preventDefault();                                                                                      // 12223
          // update location manually                                                                                  // 12224
          if ($location.absUrl() != $browser.url()) {                                                                  // 12225
            $rootScope.$apply();                                                                                       // 12226
            // hack to work around FF6 bug 684208 when scenario runner clicks on links                                 // 12227
            $window.angular['ff-684208-preventDefault'] = true;                                                        // 12228
          }                                                                                                            // 12229
        }                                                                                                              // 12230
      }                                                                                                                // 12231
    });                                                                                                                // 12232
                                                                                                                       // 12233
                                                                                                                       // 12234
    // rewrite hashbang url <> html5 url                                                                               // 12235
    if (trimEmptyHash($location.absUrl()) != trimEmptyHash(initialUrl)) {                                              // 12236
      $browser.url($location.absUrl(), true);                                                                          // 12237
    }                                                                                                                  // 12238
                                                                                                                       // 12239
    var initializing = true;                                                                                           // 12240
                                                                                                                       // 12241
    // update $location when $browser url changes                                                                      // 12242
    $browser.onUrlChange(function(newUrl, newState) {                                                                  // 12243
                                                                                                                       // 12244
      if (isUndefined(beginsWith(appBaseNoFile, newUrl))) {                                                            // 12245
        // If we are navigating outside of the app then force a reload                                                 // 12246
        $window.location.href = newUrl;                                                                                // 12247
        return;                                                                                                        // 12248
      }                                                                                                                // 12249
                                                                                                                       // 12250
      $rootScope.$evalAsync(function() {                                                                               // 12251
        var oldUrl = $location.absUrl();                                                                               // 12252
        var oldState = $location.$$state;                                                                              // 12253
        var defaultPrevented;                                                                                          // 12254
                                                                                                                       // 12255
        $location.$$parse(newUrl);                                                                                     // 12256
        $location.$$state = newState;                                                                                  // 12257
                                                                                                                       // 12258
        defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,                               // 12259
            newState, oldState).defaultPrevented;                                                                      // 12260
                                                                                                                       // 12261
        // if the location was changed by a `$locationChangeStart` handler then stop                                   // 12262
        // processing this location change                                                                             // 12263
        if ($location.absUrl() !== newUrl) return;                                                                     // 12264
                                                                                                                       // 12265
        if (defaultPrevented) {                                                                                        // 12266
          $location.$$parse(oldUrl);                                                                                   // 12267
          $location.$$state = oldState;                                                                                // 12268
          setBrowserUrlWithFallback(oldUrl, false, oldState);                                                          // 12269
        } else {                                                                                                       // 12270
          initializing = false;                                                                                        // 12271
          afterLocationChange(oldUrl, oldState);                                                                       // 12272
        }                                                                                                              // 12273
      });                                                                                                              // 12274
      if (!$rootScope.$$phase) $rootScope.$digest();                                                                   // 12275
    });                                                                                                                // 12276
                                                                                                                       // 12277
    // update browser                                                                                                  // 12278
    $rootScope.$watch(function $locationWatch() {                                                                      // 12279
      var oldUrl = trimEmptyHash($browser.url());                                                                      // 12280
      var newUrl = trimEmptyHash($location.absUrl());                                                                  // 12281
      var oldState = $browser.state();                                                                                 // 12282
      var currentReplace = $location.$$replace;                                                                        // 12283
      var urlOrStateChanged = oldUrl !== newUrl ||                                                                     // 12284
        ($location.$$html5 && $sniffer.history && oldState !== $location.$$state);                                     // 12285
                                                                                                                       // 12286
      if (initializing || urlOrStateChanged) {                                                                         // 12287
        initializing = false;                                                                                          // 12288
                                                                                                                       // 12289
        $rootScope.$evalAsync(function() {                                                                             // 12290
          var newUrl = $location.absUrl();                                                                             // 12291
          var defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,                         // 12292
              $location.$$state, oldState).defaultPrevented;                                                           // 12293
                                                                                                                       // 12294
          // if the location was changed by a `$locationChangeStart` handler then stop                                 // 12295
          // processing this location change                                                                           // 12296
          if ($location.absUrl() !== newUrl) return;                                                                   // 12297
                                                                                                                       // 12298
          if (defaultPrevented) {                                                                                      // 12299
            $location.$$parse(oldUrl);                                                                                 // 12300
            $location.$$state = oldState;                                                                              // 12301
          } else {                                                                                                     // 12302
            if (urlOrStateChanged) {                                                                                   // 12303
              setBrowserUrlWithFallback(newUrl, currentReplace,                                                        // 12304
                                        oldState === $location.$$state ? null : $location.$$state);                    // 12305
            }                                                                                                          // 12306
            afterLocationChange(oldUrl, oldState);                                                                     // 12307
          }                                                                                                            // 12308
        });                                                                                                            // 12309
      }                                                                                                                // 12310
                                                                                                                       // 12311
      $location.$$replace = false;                                                                                     // 12312
                                                                                                                       // 12313
      // we don't need to return anything because $evalAsync will make the digest loop dirty when                      // 12314
      // there is a change                                                                                             // 12315
    });                                                                                                                // 12316
                                                                                                                       // 12317
    return $location;                                                                                                  // 12318
                                                                                                                       // 12319
    function afterLocationChange(oldUrl, oldState) {                                                                   // 12320
      $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl,                                      // 12321
        $location.$$state, oldState);                                                                                  // 12322
    }                                                                                                                  // 12323
}];                                                                                                                    // 12324
}                                                                                                                      // 12325
                                                                                                                       // 12326
/**                                                                                                                    // 12327
 * @ngdoc service                                                                                                      // 12328
 * @name $log                                                                                                          // 12329
 * @requires $window                                                                                                   // 12330
 *                                                                                                                     // 12331
 * @description                                                                                                        // 12332
 * Simple service for logging. Default implementation safely writes the message                                        // 12333
 * into the browser's console (if present).                                                                            // 12334
 *                                                                                                                     // 12335
 * The main purpose of this service is to simplify debugging and troubleshooting.                                      // 12336
 *                                                                                                                     // 12337
 * The default is to log `debug` messages. You can use                                                                 // 12338
 * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.                                                // 12339
 *                                                                                                                     // 12340
 * @example                                                                                                            // 12341
   <example module="logExample">                                                                                       // 12342
     <file name="script.js">                                                                                           // 12343
       angular.module('logExample', [])                                                                                // 12344
         .controller('LogController', ['$scope', '$log', function($scope, $log) {                                      // 12345
           $scope.$log = $log;                                                                                         // 12346
           $scope.message = 'Hello World!';                                                                            // 12347
         }]);                                                                                                          // 12348
     </file>                                                                                                           // 12349
     <file name="index.html">                                                                                          // 12350
       <div ng-controller="LogController">                                                                             // 12351
         <p>Reload this page with open console, enter text and hit the log button...</p>                               // 12352
         <label>Message:                                                                                               // 12353
         <input type="text" ng-model="message" /></label>                                                              // 12354
         <button ng-click="$log.log(message)">log</button>                                                             // 12355
         <button ng-click="$log.warn(message)">warn</button>                                                           // 12356
         <button ng-click="$log.info(message)">info</button>                                                           // 12357
         <button ng-click="$log.error(message)">error</button>                                                         // 12358
         <button ng-click="$log.debug(message)">debug</button>                                                         // 12359
       </div>                                                                                                          // 12360
     </file>                                                                                                           // 12361
   </example>                                                                                                          // 12362
 */                                                                                                                    // 12363
                                                                                                                       // 12364
/**                                                                                                                    // 12365
 * @ngdoc provider                                                                                                     // 12366
 * @name $logProvider                                                                                                  // 12367
 * @description                                                                                                        // 12368
 * Use the `$logProvider` to configure how the application logs messages                                               // 12369
 */                                                                                                                    // 12370
function $LogProvider() {                                                                                              // 12371
  var debug = true,                                                                                                    // 12372
      self = this;                                                                                                     // 12373
                                                                                                                       // 12374
  /**                                                                                                                  // 12375
   * @ngdoc method                                                                                                     // 12376
   * @name $logProvider#debugEnabled                                                                                   // 12377
   * @description                                                                                                      // 12378
   * @param {boolean=} flag enable or disable debug level messages                                                     // 12379
   * @returns {*} current value if used as getter or itself (chaining) if used as setter                               // 12380
   */                                                                                                                  // 12381
  this.debugEnabled = function(flag) {                                                                                 // 12382
    if (isDefined(flag)) {                                                                                             // 12383
      debug = flag;                                                                                                    // 12384
    return this;                                                                                                       // 12385
    } else {                                                                                                           // 12386
      return debug;                                                                                                    // 12387
    }                                                                                                                  // 12388
  };                                                                                                                   // 12389
                                                                                                                       // 12390
  this.$get = ['$window', function($window) {                                                                          // 12391
    return {                                                                                                           // 12392
      /**                                                                                                              // 12393
       * @ngdoc method                                                                                                 // 12394
       * @name $log#log                                                                                                // 12395
       *                                                                                                               // 12396
       * @description                                                                                                  // 12397
       * Write a log message                                                                                           // 12398
       */                                                                                                              // 12399
      log: consoleLog('log'),                                                                                          // 12400
                                                                                                                       // 12401
      /**                                                                                                              // 12402
       * @ngdoc method                                                                                                 // 12403
       * @name $log#info                                                                                               // 12404
       *                                                                                                               // 12405
       * @description                                                                                                  // 12406
       * Write an information message                                                                                  // 12407
       */                                                                                                              // 12408
      info: consoleLog('info'),                                                                                        // 12409
                                                                                                                       // 12410
      /**                                                                                                              // 12411
       * @ngdoc method                                                                                                 // 12412
       * @name $log#warn                                                                                               // 12413
       *                                                                                                               // 12414
       * @description                                                                                                  // 12415
       * Write a warning message                                                                                       // 12416
       */                                                                                                              // 12417
      warn: consoleLog('warn'),                                                                                        // 12418
                                                                                                                       // 12419
      /**                                                                                                              // 12420
       * @ngdoc method                                                                                                 // 12421
       * @name $log#error                                                                                              // 12422
       *                                                                                                               // 12423
       * @description                                                                                                  // 12424
       * Write an error message                                                                                        // 12425
       */                                                                                                              // 12426
      error: consoleLog('error'),                                                                                      // 12427
                                                                                                                       // 12428
      /**                                                                                                              // 12429
       * @ngdoc method                                                                                                 // 12430
       * @name $log#debug                                                                                              // 12431
       *                                                                                                               // 12432
       * @description                                                                                                  // 12433
       * Write a debug message                                                                                         // 12434
       */                                                                                                              // 12435
      debug: (function() {                                                                                             // 12436
        var fn = consoleLog('debug');                                                                                  // 12437
                                                                                                                       // 12438
        return function() {                                                                                            // 12439
          if (debug) {                                                                                                 // 12440
            fn.apply(self, arguments);                                                                                 // 12441
          }                                                                                                            // 12442
        };                                                                                                             // 12443
      }())                                                                                                             // 12444
    };                                                                                                                 // 12445
                                                                                                                       // 12446
    function formatError(arg) {                                                                                        // 12447
      if (arg instanceof Error) {                                                                                      // 12448
        if (arg.stack) {                                                                                               // 12449
          arg = (arg.message && arg.stack.indexOf(arg.message) === -1)                                                 // 12450
              ? 'Error: ' + arg.message + '\n' + arg.stack                                                             // 12451
              : arg.stack;                                                                                             // 12452
        } else if (arg.sourceURL) {                                                                                    // 12453
          arg = arg.message + '\n' + arg.sourceURL + ':' + arg.line;                                                   // 12454
        }                                                                                                              // 12455
      }                                                                                                                // 12456
      return arg;                                                                                                      // 12457
    }                                                                                                                  // 12458
                                                                                                                       // 12459
    function consoleLog(type) {                                                                                        // 12460
      var console = $window.console || {},                                                                             // 12461
          logFn = console[type] || console.log || noop,                                                                // 12462
          hasApply = false;                                                                                            // 12463
                                                                                                                       // 12464
      // Note: reading logFn.apply throws an error in IE11 in IE8 document mode.                                       // 12465
      // The reason behind this is that console.log has type "object" in IE8...                                        // 12466
      try {                                                                                                            // 12467
        hasApply = !!logFn.apply;                                                                                      // 12468
      } catch (e) {}                                                                                                   // 12469
                                                                                                                       // 12470
      if (hasApply) {                                                                                                  // 12471
        return function() {                                                                                            // 12472
          var args = [];                                                                                               // 12473
          forEach(arguments, function(arg) {                                                                           // 12474
            args.push(formatError(arg));                                                                               // 12475
          });                                                                                                          // 12476
          return logFn.apply(console, args);                                                                           // 12477
        };                                                                                                             // 12478
      }                                                                                                                // 12479
                                                                                                                       // 12480
      // we are IE which either doesn't have window.console => this is noop and we do nothing,                         // 12481
      // or we are IE where console.log doesn't have apply so we log at least first 2 args                             // 12482
      return function(arg1, arg2) {                                                                                    // 12483
        logFn(arg1, arg2 == null ? '' : arg2);                                                                         // 12484
      };                                                                                                               // 12485
    }                                                                                                                  // 12486
  }];                                                                                                                  // 12487
}                                                                                                                      // 12488
                                                                                                                       // 12489
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                           // 12490
 *     Any commits to this file should be reviewed with security in mind.  *                                           // 12491
 *   Changes to this file can potentially create security vulnerabilities. *                                           // 12492
 *          An approval from 2 Core members with history of modifying      *                                           // 12493
 *                         this file is required.                          *                                           // 12494
 *                                                                         *                                           // 12495
 *  Does the change somehow allow for arbitrary javascript to be executed? *                                           // 12496
 *    Or allows for someone to change the prototype of built-in objects?   *                                           // 12497
 *     Or gives undesired access to variables likes document or window?    *                                           // 12498
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */                                          // 12499
                                                                                                                       // 12500
var $parseMinErr = minErr('$parse');                                                                                   // 12501
                                                                                                                       // 12502
// Sandboxing Angular Expressions                                                                                      // 12503
// ------------------------------                                                                                      // 12504
// Angular expressions are generally considered safe because these expressions only have direct                        // 12505
// access to `$scope` and locals. However, one can obtain the ability to execute arbitrary JS code by                  // 12506
// obtaining a reference to native JS functions such as the Function constructor.                                      // 12507
//                                                                                                                     // 12508
// As an example, consider the following Angular expression:                                                           // 12509
//                                                                                                                     // 12510
//   {}.toString.constructor('alert("evil JS code")')                                                                  // 12511
//                                                                                                                     // 12512
// This sandboxing technique is not perfect and doesn't aim to be. The goal is to prevent exploits                     // 12513
// against the expression language, but not to prevent exploits that were enabled by exposing                          // 12514
// sensitive JavaScript or browser APIs on Scope. Exposing such objects on a Scope is never a good                     // 12515
// practice and therefore we are not even trying to protect against interaction with an object                         // 12516
// explicitly exposed in this way.                                                                                     // 12517
//                                                                                                                     // 12518
// In general, it is not possible to access a Window object from an angular expression unless a                        // 12519
// window or some DOM object that has a reference to window is published onto a Scope.                                 // 12520
// Similarly we prevent invocations of function known to be dangerous, as well as assignments to                       // 12521
// native objects.                                                                                                     // 12522
//                                                                                                                     // 12523
// See https://docs.angularjs.org/guide/security                                                                       // 12524
                                                                                                                       // 12525
                                                                                                                       // 12526
function ensureSafeMemberName(name, fullExpression) {                                                                  // 12527
  if (name === "__defineGetter__" || name === "__defineSetter__"                                                       // 12528
      || name === "__lookupGetter__" || name === "__lookupSetter__"                                                    // 12529
      || name === "__proto__") {                                                                                       // 12530
    throw $parseMinErr('isecfld',                                                                                      // 12531
        'Attempting to access a disallowed field in Angular expressions! '                                             // 12532
        + 'Expression: {0}', fullExpression);                                                                          // 12533
  }                                                                                                                    // 12534
  return name;                                                                                                         // 12535
}                                                                                                                      // 12536
                                                                                                                       // 12537
function getStringValue(name, fullExpression) {                                                                        // 12538
  // From the JavaScript docs:                                                                                         // 12539
  // Property names must be strings. This means that non-string objects cannot be used                                 // 12540
  // as keys in an object. Any non-string object, including a number, is typecasted                                    // 12541
  // into a string via the toString method.                                                                            // 12542
  //                                                                                                                   // 12543
  // So, to ensure that we are checking the same `name` that JavaScript would use,                                     // 12544
  // we cast it to a string, if possible.                                                                              // 12545
  // Doing `name + ''` can cause a repl error if the result to `toString` is not a string,                             // 12546
  // this is, this will handle objects that misbehave.                                                                 // 12547
  name = name + '';                                                                                                    // 12548
  if (!isString(name)) {                                                                                               // 12549
    throw $parseMinErr('iseccst',                                                                                      // 12550
        'Cannot convert object to primitive value! '                                                                   // 12551
        + 'Expression: {0}', fullExpression);                                                                          // 12552
  }                                                                                                                    // 12553
  return name;                                                                                                         // 12554
}                                                                                                                      // 12555
                                                                                                                       // 12556
function ensureSafeObject(obj, fullExpression) {                                                                       // 12557
  // nifty check if obj is Function that is fast and works across iframes and other contexts                           // 12558
  if (obj) {                                                                                                           // 12559
    if (obj.constructor === obj) {                                                                                     // 12560
      throw $parseMinErr('isecfn',                                                                                     // 12561
          'Referencing Function in Angular expressions is disallowed! Expression: {0}',                                // 12562
          fullExpression);                                                                                             // 12563
    } else if (// isWindow(obj)                                                                                        // 12564
        obj.window === obj) {                                                                                          // 12565
      throw $parseMinErr('isecwindow',                                                                                 // 12566
          'Referencing the Window in Angular expressions is disallowed! Expression: {0}',                              // 12567
          fullExpression);                                                                                             // 12568
    } else if (// isElement(obj)                                                                                       // 12569
        obj.children && (obj.nodeName || (obj.prop && obj.attr && obj.find))) {                                        // 12570
      throw $parseMinErr('isecdom',                                                                                    // 12571
          'Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}',                               // 12572
          fullExpression);                                                                                             // 12573
    } else if (// block Object so that we can't get hold of dangerous Object.* methods                                 // 12574
        obj === Object) {                                                                                              // 12575
      throw $parseMinErr('isecobj',                                                                                    // 12576
          'Referencing Object in Angular expressions is disallowed! Expression: {0}',                                  // 12577
          fullExpression);                                                                                             // 12578
    }                                                                                                                  // 12579
  }                                                                                                                    // 12580
  return obj;                                                                                                          // 12581
}                                                                                                                      // 12582
                                                                                                                       // 12583
var CALL = Function.prototype.call;                                                                                    // 12584
var APPLY = Function.prototype.apply;                                                                                  // 12585
var BIND = Function.prototype.bind;                                                                                    // 12586
                                                                                                                       // 12587
function ensureSafeFunction(obj, fullExpression) {                                                                     // 12588
  if (obj) {                                                                                                           // 12589
    if (obj.constructor === obj) {                                                                                     // 12590
      throw $parseMinErr('isecfn',                                                                                     // 12591
        'Referencing Function in Angular expressions is disallowed! Expression: {0}',                                  // 12592
        fullExpression);                                                                                               // 12593
    } else if (obj === CALL || obj === APPLY || obj === BIND) {                                                        // 12594
      throw $parseMinErr('isecff',                                                                                     // 12595
        'Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}',                       // 12596
        fullExpression);                                                                                               // 12597
    }                                                                                                                  // 12598
  }                                                                                                                    // 12599
}                                                                                                                      // 12600
                                                                                                                       // 12601
function ensureSafeAssignContext(obj, fullExpression) {                                                                // 12602
  if (obj) {                                                                                                           // 12603
    if (obj === (0).constructor || obj === (false).constructor || obj === ''.constructor ||                            // 12604
        obj === {}.constructor || obj === [].constructor || obj === Function.constructor) {                            // 12605
      throw $parseMinErr('isecaf',                                                                                     // 12606
        'Assigning to a constructor is disallowed! Expression: {0}', fullExpression);                                  // 12607
    }                                                                                                                  // 12608
  }                                                                                                                    // 12609
}                                                                                                                      // 12610
                                                                                                                       // 12611
var OPERATORS = createMap();                                                                                           // 12612
forEach('+ - * / % === !== == != < > <= >= && || ! = |'.split(' '), function(operator) { OPERATORS[operator] = true; });
var ESCAPE = {"n":"\n", "f":"\f", "r":"\r", "t":"\t", "v":"\v", "'":"'", '"':'"'};                                     // 12614
                                                                                                                       // 12615
                                                                                                                       // 12616
/////////////////////////////////////////                                                                              // 12617
                                                                                                                       // 12618
                                                                                                                       // 12619
/**                                                                                                                    // 12620
 * @constructor                                                                                                        // 12621
 */                                                                                                                    // 12622
var Lexer = function(options) {                                                                                        // 12623
  this.options = options;                                                                                              // 12624
};                                                                                                                     // 12625
                                                                                                                       // 12626
Lexer.prototype = {                                                                                                    // 12627
  constructor: Lexer,                                                                                                  // 12628
                                                                                                                       // 12629
  lex: function(text) {                                                                                                // 12630
    this.text = text;                                                                                                  // 12631
    this.index = 0;                                                                                                    // 12632
    this.tokens = [];                                                                                                  // 12633
                                                                                                                       // 12634
    while (this.index < this.text.length) {                                                                            // 12635
      var ch = this.text.charAt(this.index);                                                                           // 12636
      if (ch === '"' || ch === "'") {                                                                                  // 12637
        this.readString(ch);                                                                                           // 12638
      } else if (this.isNumber(ch) || ch === '.' && this.isNumber(this.peek())) {                                      // 12639
        this.readNumber();                                                                                             // 12640
      } else if (this.isIdent(ch)) {                                                                                   // 12641
        this.readIdent();                                                                                              // 12642
      } else if (this.is(ch, '(){}[].,;:?')) {                                                                         // 12643
        this.tokens.push({index: this.index, text: ch});                                                               // 12644
        this.index++;                                                                                                  // 12645
      } else if (this.isWhitespace(ch)) {                                                                              // 12646
        this.index++;                                                                                                  // 12647
      } else {                                                                                                         // 12648
        var ch2 = ch + this.peek();                                                                                    // 12649
        var ch3 = ch2 + this.peek(2);                                                                                  // 12650
        var op1 = OPERATORS[ch];                                                                                       // 12651
        var op2 = OPERATORS[ch2];                                                                                      // 12652
        var op3 = OPERATORS[ch3];                                                                                      // 12653
        if (op1 || op2 || op3) {                                                                                       // 12654
          var token = op3 ? ch3 : (op2 ? ch2 : ch);                                                                    // 12655
          this.tokens.push({index: this.index, text: token, operator: true});                                          // 12656
          this.index += token.length;                                                                                  // 12657
        } else {                                                                                                       // 12658
          this.throwError('Unexpected next character ', this.index, this.index + 1);                                   // 12659
        }                                                                                                              // 12660
      }                                                                                                                // 12661
    }                                                                                                                  // 12662
    return this.tokens;                                                                                                // 12663
  },                                                                                                                   // 12664
                                                                                                                       // 12665
  is: function(ch, chars) {                                                                                            // 12666
    return chars.indexOf(ch) !== -1;                                                                                   // 12667
  },                                                                                                                   // 12668
                                                                                                                       // 12669
  peek: function(i) {                                                                                                  // 12670
    var num = i || 1;                                                                                                  // 12671
    return (this.index + num < this.text.length) ? this.text.charAt(this.index + num) : false;                         // 12672
  },                                                                                                                   // 12673
                                                                                                                       // 12674
  isNumber: function(ch) {                                                                                             // 12675
    return ('0' <= ch && ch <= '9') && typeof ch === "string";                                                         // 12676
  },                                                                                                                   // 12677
                                                                                                                       // 12678
  isWhitespace: function(ch) {                                                                                         // 12679
    // IE treats non-breaking space as \u00A0                                                                          // 12680
    return (ch === ' ' || ch === '\r' || ch === '\t' ||                                                                // 12681
            ch === '\n' || ch === '\v' || ch === '\u00A0');                                                            // 12682
  },                                                                                                                   // 12683
                                                                                                                       // 12684
  isIdent: function(ch) {                                                                                              // 12685
    return ('a' <= ch && ch <= 'z' ||                                                                                  // 12686
            'A' <= ch && ch <= 'Z' ||                                                                                  // 12687
            '_' === ch || ch === '$');                                                                                 // 12688
  },                                                                                                                   // 12689
                                                                                                                       // 12690
  isExpOperator: function(ch) {                                                                                        // 12691
    return (ch === '-' || ch === '+' || this.isNumber(ch));                                                            // 12692
  },                                                                                                                   // 12693
                                                                                                                       // 12694
  throwError: function(error, start, end) {                                                                            // 12695
    end = end || this.index;                                                                                           // 12696
    var colStr = (isDefined(start)                                                                                     // 12697
            ? 's ' + start +  '-' + this.index + ' [' + this.text.substring(start, end) + ']'                          // 12698
            : ' ' + end);                                                                                              // 12699
    throw $parseMinErr('lexerr', 'Lexer Error: {0} at column{1} in expression [{2}].',                                 // 12700
        error, colStr, this.text);                                                                                     // 12701
  },                                                                                                                   // 12702
                                                                                                                       // 12703
  readNumber: function() {                                                                                             // 12704
    var number = '';                                                                                                   // 12705
    var start = this.index;                                                                                            // 12706
    while (this.index < this.text.length) {                                                                            // 12707
      var ch = lowercase(this.text.charAt(this.index));                                                                // 12708
      if (ch == '.' || this.isNumber(ch)) {                                                                            // 12709
        number += ch;                                                                                                  // 12710
      } else {                                                                                                         // 12711
        var peekCh = this.peek();                                                                                      // 12712
        if (ch == 'e' && this.isExpOperator(peekCh)) {                                                                 // 12713
          number += ch;                                                                                                // 12714
        } else if (this.isExpOperator(ch) &&                                                                           // 12715
            peekCh && this.isNumber(peekCh) &&                                                                         // 12716
            number.charAt(number.length - 1) == 'e') {                                                                 // 12717
          number += ch;                                                                                                // 12718
        } else if (this.isExpOperator(ch) &&                                                                           // 12719
            (!peekCh || !this.isNumber(peekCh)) &&                                                                     // 12720
            number.charAt(number.length - 1) == 'e') {                                                                 // 12721
          this.throwError('Invalid exponent');                                                                         // 12722
        } else {                                                                                                       // 12723
          break;                                                                                                       // 12724
        }                                                                                                              // 12725
      }                                                                                                                // 12726
      this.index++;                                                                                                    // 12727
    }                                                                                                                  // 12728
    this.tokens.push({                                                                                                 // 12729
      index: start,                                                                                                    // 12730
      text: number,                                                                                                    // 12731
      constant: true,                                                                                                  // 12732
      value: Number(number)                                                                                            // 12733
    });                                                                                                                // 12734
  },                                                                                                                   // 12735
                                                                                                                       // 12736
  readIdent: function() {                                                                                              // 12737
    var start = this.index;                                                                                            // 12738
    while (this.index < this.text.length) {                                                                            // 12739
      var ch = this.text.charAt(this.index);                                                                           // 12740
      if (!(this.isIdent(ch) || this.isNumber(ch))) {                                                                  // 12741
        break;                                                                                                         // 12742
      }                                                                                                                // 12743
      this.index++;                                                                                                    // 12744
    }                                                                                                                  // 12745
    this.tokens.push({                                                                                                 // 12746
      index: start,                                                                                                    // 12747
      text: this.text.slice(start, this.index),                                                                        // 12748
      identifier: true                                                                                                 // 12749
    });                                                                                                                // 12750
  },                                                                                                                   // 12751
                                                                                                                       // 12752
  readString: function(quote) {                                                                                        // 12753
    var start = this.index;                                                                                            // 12754
    this.index++;                                                                                                      // 12755
    var string = '';                                                                                                   // 12756
    var rawString = quote;                                                                                             // 12757
    var escape = false;                                                                                                // 12758
    while (this.index < this.text.length) {                                                                            // 12759
      var ch = this.text.charAt(this.index);                                                                           // 12760
      rawString += ch;                                                                                                 // 12761
      if (escape) {                                                                                                    // 12762
        if (ch === 'u') {                                                                                              // 12763
          var hex = this.text.substring(this.index + 1, this.index + 5);                                               // 12764
          if (!hex.match(/[\da-f]{4}/i)) {                                                                             // 12765
            this.throwError('Invalid unicode escape [\\u' + hex + ']');                                                // 12766
          }                                                                                                            // 12767
          this.index += 4;                                                                                             // 12768
          string += String.fromCharCode(parseInt(hex, 16));                                                            // 12769
        } else {                                                                                                       // 12770
          var rep = ESCAPE[ch];                                                                                        // 12771
          string = string + (rep || ch);                                                                               // 12772
        }                                                                                                              // 12773
        escape = false;                                                                                                // 12774
      } else if (ch === '\\') {                                                                                        // 12775
        escape = true;                                                                                                 // 12776
      } else if (ch === quote) {                                                                                       // 12777
        this.index++;                                                                                                  // 12778
        this.tokens.push({                                                                                             // 12779
          index: start,                                                                                                // 12780
          text: rawString,                                                                                             // 12781
          constant: true,                                                                                              // 12782
          value: string                                                                                                // 12783
        });                                                                                                            // 12784
        return;                                                                                                        // 12785
      } else {                                                                                                         // 12786
        string += ch;                                                                                                  // 12787
      }                                                                                                                // 12788
      this.index++;                                                                                                    // 12789
    }                                                                                                                  // 12790
    this.throwError('Unterminated quote', start);                                                                      // 12791
  }                                                                                                                    // 12792
};                                                                                                                     // 12793
                                                                                                                       // 12794
var AST = function(lexer, options) {                                                                                   // 12795
  this.lexer = lexer;                                                                                                  // 12796
  this.options = options;                                                                                              // 12797
};                                                                                                                     // 12798
                                                                                                                       // 12799
AST.Program = 'Program';                                                                                               // 12800
AST.ExpressionStatement = 'ExpressionStatement';                                                                       // 12801
AST.AssignmentExpression = 'AssignmentExpression';                                                                     // 12802
AST.ConditionalExpression = 'ConditionalExpression';                                                                   // 12803
AST.LogicalExpression = 'LogicalExpression';                                                                           // 12804
AST.BinaryExpression = 'BinaryExpression';                                                                             // 12805
AST.UnaryExpression = 'UnaryExpression';                                                                               // 12806
AST.CallExpression = 'CallExpression';                                                                                 // 12807
AST.MemberExpression = 'MemberExpression';                                                                             // 12808
AST.Identifier = 'Identifier';                                                                                         // 12809
AST.Literal = 'Literal';                                                                                               // 12810
AST.ArrayExpression = 'ArrayExpression';                                                                               // 12811
AST.Property = 'Property';                                                                                             // 12812
AST.ObjectExpression = 'ObjectExpression';                                                                             // 12813
AST.ThisExpression = 'ThisExpression';                                                                                 // 12814
                                                                                                                       // 12815
// Internal use only                                                                                                   // 12816
AST.NGValueParameter = 'NGValueParameter';                                                                             // 12817
                                                                                                                       // 12818
AST.prototype = {                                                                                                      // 12819
  ast: function(text) {                                                                                                // 12820
    this.text = text;                                                                                                  // 12821
    this.tokens = this.lexer.lex(text);                                                                                // 12822
                                                                                                                       // 12823
    var value = this.program();                                                                                        // 12824
                                                                                                                       // 12825
    if (this.tokens.length !== 0) {                                                                                    // 12826
      this.throwError('is an unexpected token', this.tokens[0]);                                                       // 12827
    }                                                                                                                  // 12828
                                                                                                                       // 12829
    return value;                                                                                                      // 12830
  },                                                                                                                   // 12831
                                                                                                                       // 12832
  program: function() {                                                                                                // 12833
    var body = [];                                                                                                     // 12834
    while (true) {                                                                                                     // 12835
      if (this.tokens.length > 0 && !this.peek('}', ')', ';', ']'))                                                    // 12836
        body.push(this.expressionStatement());                                                                         // 12837
      if (!this.expect(';')) {                                                                                         // 12838
        return { type: AST.Program, body: body};                                                                       // 12839
      }                                                                                                                // 12840
    }                                                                                                                  // 12841
  },                                                                                                                   // 12842
                                                                                                                       // 12843
  expressionStatement: function() {                                                                                    // 12844
    return { type: AST.ExpressionStatement, expression: this.filterChain() };                                          // 12845
  },                                                                                                                   // 12846
                                                                                                                       // 12847
  filterChain: function() {                                                                                            // 12848
    var left = this.expression();                                                                                      // 12849
    var token;                                                                                                         // 12850
    while ((token = this.expect('|'))) {                                                                               // 12851
      left = this.filter(left);                                                                                        // 12852
    }                                                                                                                  // 12853
    return left;                                                                                                       // 12854
  },                                                                                                                   // 12855
                                                                                                                       // 12856
  expression: function() {                                                                                             // 12857
    return this.assignment();                                                                                          // 12858
  },                                                                                                                   // 12859
                                                                                                                       // 12860
  assignment: function() {                                                                                             // 12861
    var result = this.ternary();                                                                                       // 12862
    if (this.expect('=')) {                                                                                            // 12863
      result = { type: AST.AssignmentExpression, left: result, right: this.assignment(), operator: '='};               // 12864
    }                                                                                                                  // 12865
    return result;                                                                                                     // 12866
  },                                                                                                                   // 12867
                                                                                                                       // 12868
  ternary: function() {                                                                                                // 12869
    var test = this.logicalOR();                                                                                       // 12870
    var alternate;                                                                                                     // 12871
    var consequent;                                                                                                    // 12872
    if (this.expect('?')) {                                                                                            // 12873
      alternate = this.expression();                                                                                   // 12874
      if (this.consume(':')) {                                                                                         // 12875
        consequent = this.expression();                                                                                // 12876
        return { type: AST.ConditionalExpression, test: test, alternate: alternate, consequent: consequent};           // 12877
      }                                                                                                                // 12878
    }                                                                                                                  // 12879
    return test;                                                                                                       // 12880
  },                                                                                                                   // 12881
                                                                                                                       // 12882
  logicalOR: function() {                                                                                              // 12883
    var left = this.logicalAND();                                                                                      // 12884
    while (this.expect('||')) {                                                                                        // 12885
      left = { type: AST.LogicalExpression, operator: '||', left: left, right: this.logicalAND() };                    // 12886
    }                                                                                                                  // 12887
    return left;                                                                                                       // 12888
  },                                                                                                                   // 12889
                                                                                                                       // 12890
  logicalAND: function() {                                                                                             // 12891
    var left = this.equality();                                                                                        // 12892
    while (this.expect('&&')) {                                                                                        // 12893
      left = { type: AST.LogicalExpression, operator: '&&', left: left, right: this.equality()};                       // 12894
    }                                                                                                                  // 12895
    return left;                                                                                                       // 12896
  },                                                                                                                   // 12897
                                                                                                                       // 12898
  equality: function() {                                                                                               // 12899
    var left = this.relational();                                                                                      // 12900
    var token;                                                                                                         // 12901
    while ((token = this.expect('==','!=','===','!=='))) {                                                             // 12902
      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.relational() };               // 12903
    }                                                                                                                  // 12904
    return left;                                                                                                       // 12905
  },                                                                                                                   // 12906
                                                                                                                       // 12907
  relational: function() {                                                                                             // 12908
    var left = this.additive();                                                                                        // 12909
    var token;                                                                                                         // 12910
    while ((token = this.expect('<', '>', '<=', '>='))) {                                                              // 12911
      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.additive() };                 // 12912
    }                                                                                                                  // 12913
    return left;                                                                                                       // 12914
  },                                                                                                                   // 12915
                                                                                                                       // 12916
  additive: function() {                                                                                               // 12917
    var left = this.multiplicative();                                                                                  // 12918
    var token;                                                                                                         // 12919
    while ((token = this.expect('+','-'))) {                                                                           // 12920
      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.multiplicative() };           // 12921
    }                                                                                                                  // 12922
    return left;                                                                                                       // 12923
  },                                                                                                                   // 12924
                                                                                                                       // 12925
  multiplicative: function() {                                                                                         // 12926
    var left = this.unary();                                                                                           // 12927
    var token;                                                                                                         // 12928
    while ((token = this.expect('*','/','%'))) {                                                                       // 12929
      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.unary() };                    // 12930
    }                                                                                                                  // 12931
    return left;                                                                                                       // 12932
  },                                                                                                                   // 12933
                                                                                                                       // 12934
  unary: function() {                                                                                                  // 12935
    var token;                                                                                                         // 12936
    if ((token = this.expect('+', '-', '!'))) {                                                                        // 12937
      return { type: AST.UnaryExpression, operator: token.text, prefix: true, argument: this.unary() };                // 12938
    } else {                                                                                                           // 12939
      return this.primary();                                                                                           // 12940
    }                                                                                                                  // 12941
  },                                                                                                                   // 12942
                                                                                                                       // 12943
  primary: function() {                                                                                                // 12944
    var primary;                                                                                                       // 12945
    if (this.expect('(')) {                                                                                            // 12946
      primary = this.filterChain();                                                                                    // 12947
      this.consume(')');                                                                                               // 12948
    } else if (this.expect('[')) {                                                                                     // 12949
      primary = this.arrayDeclaration();                                                                               // 12950
    } else if (this.expect('{')) {                                                                                     // 12951
      primary = this.object();                                                                                         // 12952
    } else if (this.constants.hasOwnProperty(this.peek().text)) {                                                      // 12953
      primary = copy(this.constants[this.consume().text]);                                                             // 12954
    } else if (this.peek().identifier) {                                                                               // 12955
      primary = this.identifier();                                                                                     // 12956
    } else if (this.peek().constant) {                                                                                 // 12957
      primary = this.constant();                                                                                       // 12958
    } else {                                                                                                           // 12959
      this.throwError('not a primary expression', this.peek());                                                        // 12960
    }                                                                                                                  // 12961
                                                                                                                       // 12962
    var next;                                                                                                          // 12963
    while ((next = this.expect('(', '[', '.'))) {                                                                      // 12964
      if (next.text === '(') {                                                                                         // 12965
        primary = {type: AST.CallExpression, callee: primary, arguments: this.parseArguments() };                      // 12966
        this.consume(')');                                                                                             // 12967
      } else if (next.text === '[') {                                                                                  // 12968
        primary = { type: AST.MemberExpression, object: primary, property: this.expression(), computed: true };        // 12969
        this.consume(']');                                                                                             // 12970
      } else if (next.text === '.') {                                                                                  // 12971
        primary = { type: AST.MemberExpression, object: primary, property: this.identifier(), computed: false };       // 12972
      } else {                                                                                                         // 12973
        this.throwError('IMPOSSIBLE');                                                                                 // 12974
      }                                                                                                                // 12975
    }                                                                                                                  // 12976
    return primary;                                                                                                    // 12977
  },                                                                                                                   // 12978
                                                                                                                       // 12979
  filter: function(baseExpression) {                                                                                   // 12980
    var args = [baseExpression];                                                                                       // 12981
    var result = {type: AST.CallExpression, callee: this.identifier(), arguments: args, filter: true};                 // 12982
                                                                                                                       // 12983
    while (this.expect(':')) {                                                                                         // 12984
      args.push(this.expression());                                                                                    // 12985
    }                                                                                                                  // 12986
                                                                                                                       // 12987
    return result;                                                                                                     // 12988
  },                                                                                                                   // 12989
                                                                                                                       // 12990
  parseArguments: function() {                                                                                         // 12991
    var args = [];                                                                                                     // 12992
    if (this.peekToken().text !== ')') {                                                                               // 12993
      do {                                                                                                             // 12994
        args.push(this.expression());                                                                                  // 12995
      } while (this.expect(','));                                                                                      // 12996
    }                                                                                                                  // 12997
    return args;                                                                                                       // 12998
  },                                                                                                                   // 12999
                                                                                                                       // 13000
  identifier: function() {                                                                                             // 13001
    var token = this.consume();                                                                                        // 13002
    if (!token.identifier) {                                                                                           // 13003
      this.throwError('is not a valid identifier', token);                                                             // 13004
    }                                                                                                                  // 13005
    return { type: AST.Identifier, name: token.text };                                                                 // 13006
  },                                                                                                                   // 13007
                                                                                                                       // 13008
  constant: function() {                                                                                               // 13009
    // TODO check that it is a constant                                                                                // 13010
    return { type: AST.Literal, value: this.consume().value };                                                         // 13011
  },                                                                                                                   // 13012
                                                                                                                       // 13013
  arrayDeclaration: function() {                                                                                       // 13014
    var elements = [];                                                                                                 // 13015
    if (this.peekToken().text !== ']') {                                                                               // 13016
      do {                                                                                                             // 13017
        if (this.peek(']')) {                                                                                          // 13018
          // Support trailing commas per ES5.1.                                                                        // 13019
          break;                                                                                                       // 13020
        }                                                                                                              // 13021
        elements.push(this.expression());                                                                              // 13022
      } while (this.expect(','));                                                                                      // 13023
    }                                                                                                                  // 13024
    this.consume(']');                                                                                                 // 13025
                                                                                                                       // 13026
    return { type: AST.ArrayExpression, elements: elements };                                                          // 13027
  },                                                                                                                   // 13028
                                                                                                                       // 13029
  object: function() {                                                                                                 // 13030
    var properties = [], property;                                                                                     // 13031
    if (this.peekToken().text !== '}') {                                                                               // 13032
      do {                                                                                                             // 13033
        if (this.peek('}')) {                                                                                          // 13034
          // Support trailing commas per ES5.1.                                                                        // 13035
          break;                                                                                                       // 13036
        }                                                                                                              // 13037
        property = {type: AST.Property, kind: 'init'};                                                                 // 13038
        if (this.peek().constant) {                                                                                    // 13039
          property.key = this.constant();                                                                              // 13040
        } else if (this.peek().identifier) {                                                                           // 13041
          property.key = this.identifier();                                                                            // 13042
        } else {                                                                                                       // 13043
          this.throwError("invalid key", this.peek());                                                                 // 13044
        }                                                                                                              // 13045
        this.consume(':');                                                                                             // 13046
        property.value = this.expression();                                                                            // 13047
        properties.push(property);                                                                                     // 13048
      } while (this.expect(','));                                                                                      // 13049
    }                                                                                                                  // 13050
    this.consume('}');                                                                                                 // 13051
                                                                                                                       // 13052
    return {type: AST.ObjectExpression, properties: properties };                                                      // 13053
  },                                                                                                                   // 13054
                                                                                                                       // 13055
  throwError: function(msg, token) {                                                                                   // 13056
    throw $parseMinErr('syntax',                                                                                       // 13057
        'Syntax Error: Token \'{0}\' {1} at column {2} of the expression [{3}] starting at [{4}].',                    // 13058
          token.text, msg, (token.index + 1), this.text, this.text.substring(token.index));                            // 13059
  },                                                                                                                   // 13060
                                                                                                                       // 13061
  consume: function(e1) {                                                                                              // 13062
    if (this.tokens.length === 0) {                                                                                    // 13063
      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);                                      // 13064
    }                                                                                                                  // 13065
                                                                                                                       // 13066
    var token = this.expect(e1);                                                                                       // 13067
    if (!token) {                                                                                                      // 13068
      this.throwError('is unexpected, expecting [' + e1 + ']', this.peek());                                           // 13069
    }                                                                                                                  // 13070
    return token;                                                                                                      // 13071
  },                                                                                                                   // 13072
                                                                                                                       // 13073
  peekToken: function() {                                                                                              // 13074
    if (this.tokens.length === 0) {                                                                                    // 13075
      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);                                      // 13076
    }                                                                                                                  // 13077
    return this.tokens[0];                                                                                             // 13078
  },                                                                                                                   // 13079
                                                                                                                       // 13080
  peek: function(e1, e2, e3, e4) {                                                                                     // 13081
    return this.peekAhead(0, e1, e2, e3, e4);                                                                          // 13082
  },                                                                                                                   // 13083
                                                                                                                       // 13084
  peekAhead: function(i, e1, e2, e3, e4) {                                                                             // 13085
    if (this.tokens.length > i) {                                                                                      // 13086
      var token = this.tokens[i];                                                                                      // 13087
      var t = token.text;                                                                                              // 13088
      if (t === e1 || t === e2 || t === e3 || t === e4 ||                                                              // 13089
          (!e1 && !e2 && !e3 && !e4)) {                                                                                // 13090
        return token;                                                                                                  // 13091
      }                                                                                                                // 13092
    }                                                                                                                  // 13093
    return false;                                                                                                      // 13094
  },                                                                                                                   // 13095
                                                                                                                       // 13096
  expect: function(e1, e2, e3, e4) {                                                                                   // 13097
    var token = this.peek(e1, e2, e3, e4);                                                                             // 13098
    if (token) {                                                                                                       // 13099
      this.tokens.shift();                                                                                             // 13100
      return token;                                                                                                    // 13101
    }                                                                                                                  // 13102
    return false;                                                                                                      // 13103
  },                                                                                                                   // 13104
                                                                                                                       // 13105
                                                                                                                       // 13106
  /* `undefined` is not a constant, it is an identifier,                                                               // 13107
   * but using it as an identifier is not supported                                                                    // 13108
   */                                                                                                                  // 13109
  constants: {                                                                                                         // 13110
    'true': { type: AST.Literal, value: true },                                                                        // 13111
    'false': { type: AST.Literal, value: false },                                                                      // 13112
    'null': { type: AST.Literal, value: null },                                                                        // 13113
    'undefined': {type: AST.Literal, value: undefined },                                                               // 13114
    'this': {type: AST.ThisExpression }                                                                                // 13115
  }                                                                                                                    // 13116
};                                                                                                                     // 13117
                                                                                                                       // 13118
function ifDefined(v, d) {                                                                                             // 13119
  return typeof v !== 'undefined' ? v : d;                                                                             // 13120
}                                                                                                                      // 13121
                                                                                                                       // 13122
function plusFn(l, r) {                                                                                                // 13123
  if (typeof l === 'undefined') return r;                                                                              // 13124
  if (typeof r === 'undefined') return l;                                                                              // 13125
  return l + r;                                                                                                        // 13126
}                                                                                                                      // 13127
                                                                                                                       // 13128
function isStateless($filter, filterName) {                                                                            // 13129
  var fn = $filter(filterName);                                                                                        // 13130
  return !fn.$stateful;                                                                                                // 13131
}                                                                                                                      // 13132
                                                                                                                       // 13133
function findConstantAndWatchExpressions(ast, $filter) {                                                               // 13134
  var allConstants;                                                                                                    // 13135
  var argsToWatch;                                                                                                     // 13136
  switch (ast.type) {                                                                                                  // 13137
  case AST.Program:                                                                                                    // 13138
    allConstants = true;                                                                                               // 13139
    forEach(ast.body, function(expr) {                                                                                 // 13140
      findConstantAndWatchExpressions(expr.expression, $filter);                                                       // 13141
      allConstants = allConstants && expr.expression.constant;                                                         // 13142
    });                                                                                                                // 13143
    ast.constant = allConstants;                                                                                       // 13144
    break;                                                                                                             // 13145
  case AST.Literal:                                                                                                    // 13146
    ast.constant = true;                                                                                               // 13147
    ast.toWatch = [];                                                                                                  // 13148
    break;                                                                                                             // 13149
  case AST.UnaryExpression:                                                                                            // 13150
    findConstantAndWatchExpressions(ast.argument, $filter);                                                            // 13151
    ast.constant = ast.argument.constant;                                                                              // 13152
    ast.toWatch = ast.argument.toWatch;                                                                                // 13153
    break;                                                                                                             // 13154
  case AST.BinaryExpression:                                                                                           // 13155
    findConstantAndWatchExpressions(ast.left, $filter);                                                                // 13156
    findConstantAndWatchExpressions(ast.right, $filter);                                                               // 13157
    ast.constant = ast.left.constant && ast.right.constant;                                                            // 13158
    ast.toWatch = ast.left.toWatch.concat(ast.right.toWatch);                                                          // 13159
    break;                                                                                                             // 13160
  case AST.LogicalExpression:                                                                                          // 13161
    findConstantAndWatchExpressions(ast.left, $filter);                                                                // 13162
    findConstantAndWatchExpressions(ast.right, $filter);                                                               // 13163
    ast.constant = ast.left.constant && ast.right.constant;                                                            // 13164
    ast.toWatch = ast.constant ? [] : [ast];                                                                           // 13165
    break;                                                                                                             // 13166
  case AST.ConditionalExpression:                                                                                      // 13167
    findConstantAndWatchExpressions(ast.test, $filter);                                                                // 13168
    findConstantAndWatchExpressions(ast.alternate, $filter);                                                           // 13169
    findConstantAndWatchExpressions(ast.consequent, $filter);                                                          // 13170
    ast.constant = ast.test.constant && ast.alternate.constant && ast.consequent.constant;                             // 13171
    ast.toWatch = ast.constant ? [] : [ast];                                                                           // 13172
    break;                                                                                                             // 13173
  case AST.Identifier:                                                                                                 // 13174
    ast.constant = false;                                                                                              // 13175
    ast.toWatch = [ast];                                                                                               // 13176
    break;                                                                                                             // 13177
  case AST.MemberExpression:                                                                                           // 13178
    findConstantAndWatchExpressions(ast.object, $filter);                                                              // 13179
    if (ast.computed) {                                                                                                // 13180
      findConstantAndWatchExpressions(ast.property, $filter);                                                          // 13181
    }                                                                                                                  // 13182
    ast.constant = ast.object.constant && (!ast.computed || ast.property.constant);                                    // 13183
    ast.toWatch = [ast];                                                                                               // 13184
    break;                                                                                                             // 13185
  case AST.CallExpression:                                                                                             // 13186
    allConstants = ast.filter ? isStateless($filter, ast.callee.name) : false;                                         // 13187
    argsToWatch = [];                                                                                                  // 13188
    forEach(ast.arguments, function(expr) {                                                                            // 13189
      findConstantAndWatchExpressions(expr, $filter);                                                                  // 13190
      allConstants = allConstants && expr.constant;                                                                    // 13191
      if (!expr.constant) {                                                                                            // 13192
        argsToWatch.push.apply(argsToWatch, expr.toWatch);                                                             // 13193
      }                                                                                                                // 13194
    });                                                                                                                // 13195
    ast.constant = allConstants;                                                                                       // 13196
    ast.toWatch = ast.filter && isStateless($filter, ast.callee.name) ? argsToWatch : [ast];                           // 13197
    break;                                                                                                             // 13198
  case AST.AssignmentExpression:                                                                                       // 13199
    findConstantAndWatchExpressions(ast.left, $filter);                                                                // 13200
    findConstantAndWatchExpressions(ast.right, $filter);                                                               // 13201
    ast.constant = ast.left.constant && ast.right.constant;                                                            // 13202
    ast.toWatch = [ast];                                                                                               // 13203
    break;                                                                                                             // 13204
  case AST.ArrayExpression:                                                                                            // 13205
    allConstants = true;                                                                                               // 13206
    argsToWatch = [];                                                                                                  // 13207
    forEach(ast.elements, function(expr) {                                                                             // 13208
      findConstantAndWatchExpressions(expr, $filter);                                                                  // 13209
      allConstants = allConstants && expr.constant;                                                                    // 13210
      if (!expr.constant) {                                                                                            // 13211
        argsToWatch.push.apply(argsToWatch, expr.toWatch);                                                             // 13212
      }                                                                                                                // 13213
    });                                                                                                                // 13214
    ast.constant = allConstants;                                                                                       // 13215
    ast.toWatch = argsToWatch;                                                                                         // 13216
    break;                                                                                                             // 13217
  case AST.ObjectExpression:                                                                                           // 13218
    allConstants = true;                                                                                               // 13219
    argsToWatch = [];                                                                                                  // 13220
    forEach(ast.properties, function(property) {                                                                       // 13221
      findConstantAndWatchExpressions(property.value, $filter);                                                        // 13222
      allConstants = allConstants && property.value.constant;                                                          // 13223
      if (!property.value.constant) {                                                                                  // 13224
        argsToWatch.push.apply(argsToWatch, property.value.toWatch);                                                   // 13225
      }                                                                                                                // 13226
    });                                                                                                                // 13227
    ast.constant = allConstants;                                                                                       // 13228
    ast.toWatch = argsToWatch;                                                                                         // 13229
    break;                                                                                                             // 13230
  case AST.ThisExpression:                                                                                             // 13231
    ast.constant = false;                                                                                              // 13232
    ast.toWatch = [];                                                                                                  // 13233
    break;                                                                                                             // 13234
  }                                                                                                                    // 13235
}                                                                                                                      // 13236
                                                                                                                       // 13237
function getInputs(body) {                                                                                             // 13238
  if (body.length != 1) return;                                                                                        // 13239
  var lastExpression = body[0].expression;                                                                             // 13240
  var candidate = lastExpression.toWatch;                                                                              // 13241
  if (candidate.length !== 1) return candidate;                                                                        // 13242
  return candidate[0] !== lastExpression ? candidate : undefined;                                                      // 13243
}                                                                                                                      // 13244
                                                                                                                       // 13245
function isAssignable(ast) {                                                                                           // 13246
  return ast.type === AST.Identifier || ast.type === AST.MemberExpression;                                             // 13247
}                                                                                                                      // 13248
                                                                                                                       // 13249
function assignableAST(ast) {                                                                                          // 13250
  if (ast.body.length === 1 && isAssignable(ast.body[0].expression)) {                                                 // 13251
    return {type: AST.AssignmentExpression, left: ast.body[0].expression, right: {type: AST.NGValueParameter}, operator: '='};
  }                                                                                                                    // 13253
}                                                                                                                      // 13254
                                                                                                                       // 13255
function isLiteral(ast) {                                                                                              // 13256
  return ast.body.length === 0 ||                                                                                      // 13257
      ast.body.length === 1 && (                                                                                       // 13258
      ast.body[0].expression.type === AST.Literal ||                                                                   // 13259
      ast.body[0].expression.type === AST.ArrayExpression ||                                                           // 13260
      ast.body[0].expression.type === AST.ObjectExpression);                                                           // 13261
}                                                                                                                      // 13262
                                                                                                                       // 13263
function isConstant(ast) {                                                                                             // 13264
  return ast.constant;                                                                                                 // 13265
}                                                                                                                      // 13266
                                                                                                                       // 13267
function ASTCompiler(astBuilder, $filter) {                                                                            // 13268
  this.astBuilder = astBuilder;                                                                                        // 13269
  this.$filter = $filter;                                                                                              // 13270
}                                                                                                                      // 13271
                                                                                                                       // 13272
ASTCompiler.prototype = {                                                                                              // 13273
  compile: function(expression, expensiveChecks) {                                                                     // 13274
    var self = this;                                                                                                   // 13275
    var ast = this.astBuilder.ast(expression);                                                                         // 13276
    this.state = {                                                                                                     // 13277
      nextId: 0,                                                                                                       // 13278
      filters: {},                                                                                                     // 13279
      expensiveChecks: expensiveChecks,                                                                                // 13280
      fn: {vars: [], body: [], own: {}},                                                                               // 13281
      assign: {vars: [], body: [], own: {}},                                                                           // 13282
      inputs: []                                                                                                       // 13283
    };                                                                                                                 // 13284
    findConstantAndWatchExpressions(ast, self.$filter);                                                                // 13285
    var extra = '';                                                                                                    // 13286
    var assignable;                                                                                                    // 13287
    this.stage = 'assign';                                                                                             // 13288
    if ((assignable = assignableAST(ast))) {                                                                           // 13289
      this.state.computing = 'assign';                                                                                 // 13290
      var result = this.nextId();                                                                                      // 13291
      this.recurse(assignable, result);                                                                                // 13292
      this.return_(result);                                                                                            // 13293
      extra = 'fn.assign=' + this.generateFunction('assign', 's,v,l');                                                 // 13294
    }                                                                                                                  // 13295
    var toWatch = getInputs(ast.body);                                                                                 // 13296
    self.stage = 'inputs';                                                                                             // 13297
    forEach(toWatch, function(watch, key) {                                                                            // 13298
      var fnKey = 'fn' + key;                                                                                          // 13299
      self.state[fnKey] = {vars: [], body: [], own: {}};                                                               // 13300
      self.state.computing = fnKey;                                                                                    // 13301
      var intoId = self.nextId();                                                                                      // 13302
      self.recurse(watch, intoId);                                                                                     // 13303
      self.return_(intoId);                                                                                            // 13304
      self.state.inputs.push(fnKey);                                                                                   // 13305
      watch.watchId = key;                                                                                             // 13306
    });                                                                                                                // 13307
    this.state.computing = 'fn';                                                                                       // 13308
    this.stage = 'main';                                                                                               // 13309
    this.recurse(ast);                                                                                                 // 13310
    var fnString =                                                                                                     // 13311
      // The build and minification steps remove the string "use strict" from the code, but this is done using a regex.
      // This is a workaround for this until we do a better job at only removing the prefix only when we should.       // 13313
      '"' + this.USE + ' ' + this.STRICT + '";\n' +                                                                    // 13314
      this.filterPrefix() +                                                                                            // 13315
      'var fn=' + this.generateFunction('fn', 's,l,a,i') +                                                             // 13316
      extra +                                                                                                          // 13317
      this.watchFns() +                                                                                                // 13318
      'return fn;';                                                                                                    // 13319
                                                                                                                       // 13320
    /* jshint -W054 */                                                                                                 // 13321
    var fn = (new Function('$filter',                                                                                  // 13322
        'ensureSafeMemberName',                                                                                        // 13323
        'ensureSafeObject',                                                                                            // 13324
        'ensureSafeFunction',                                                                                          // 13325
        'getStringValue',                                                                                              // 13326
        'ensureSafeAssignContext',                                                                                     // 13327
        'ifDefined',                                                                                                   // 13328
        'plus',                                                                                                        // 13329
        'text',                                                                                                        // 13330
        fnString))(                                                                                                    // 13331
          this.$filter,                                                                                                // 13332
          ensureSafeMemberName,                                                                                        // 13333
          ensureSafeObject,                                                                                            // 13334
          ensureSafeFunction,                                                                                          // 13335
          getStringValue,                                                                                              // 13336
          ensureSafeAssignContext,                                                                                     // 13337
          ifDefined,                                                                                                   // 13338
          plusFn,                                                                                                      // 13339
          expression);                                                                                                 // 13340
    /* jshint +W054 */                                                                                                 // 13341
    this.state = this.stage = undefined;                                                                               // 13342
    fn.literal = isLiteral(ast);                                                                                       // 13343
    fn.constant = isConstant(ast);                                                                                     // 13344
    return fn;                                                                                                         // 13345
  },                                                                                                                   // 13346
                                                                                                                       // 13347
  USE: 'use',                                                                                                          // 13348
                                                                                                                       // 13349
  STRICT: 'strict',                                                                                                    // 13350
                                                                                                                       // 13351
  watchFns: function() {                                                                                               // 13352
    var result = [];                                                                                                   // 13353
    var fns = this.state.inputs;                                                                                       // 13354
    var self = this;                                                                                                   // 13355
    forEach(fns, function(name) {                                                                                      // 13356
      result.push('var ' + name + '=' + self.generateFunction(name, 's'));                                             // 13357
    });                                                                                                                // 13358
    if (fns.length) {                                                                                                  // 13359
      result.push('fn.inputs=[' + fns.join(',') + '];');                                                               // 13360
    }                                                                                                                  // 13361
    return result.join('');                                                                                            // 13362
  },                                                                                                                   // 13363
                                                                                                                       // 13364
  generateFunction: function(name, params) {                                                                           // 13365
    return 'function(' + params + '){' +                                                                               // 13366
        this.varsPrefix(name) +                                                                                        // 13367
        this.body(name) +                                                                                              // 13368
        '};';                                                                                                          // 13369
  },                                                                                                                   // 13370
                                                                                                                       // 13371
  filterPrefix: function() {                                                                                           // 13372
    var parts = [];                                                                                                    // 13373
    var self = this;                                                                                                   // 13374
    forEach(this.state.filters, function(id, filter) {                                                                 // 13375
      parts.push(id + '=$filter(' + self.escape(filter) + ')');                                                        // 13376
    });                                                                                                                // 13377
    if (parts.length) return 'var ' + parts.join(',') + ';';                                                           // 13378
    return '';                                                                                                         // 13379
  },                                                                                                                   // 13380
                                                                                                                       // 13381
  varsPrefix: function(section) {                                                                                      // 13382
    return this.state[section].vars.length ? 'var ' + this.state[section].vars.join(',') + ';' : '';                   // 13383
  },                                                                                                                   // 13384
                                                                                                                       // 13385
  body: function(section) {                                                                                            // 13386
    return this.state[section].body.join('');                                                                          // 13387
  },                                                                                                                   // 13388
                                                                                                                       // 13389
  recurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {                                      // 13390
    var left, right, self = this, args, expression;                                                                    // 13391
    recursionFn = recursionFn || noop;                                                                                 // 13392
    if (!skipWatchIdCheck && isDefined(ast.watchId)) {                                                                 // 13393
      intoId = intoId || this.nextId();                                                                                // 13394
      this.if_('i',                                                                                                    // 13395
        this.lazyAssign(intoId, this.computedMember('i', ast.watchId)),                                                // 13396
        this.lazyRecurse(ast, intoId, nameId, recursionFn, create, true)                                               // 13397
      );                                                                                                               // 13398
      return;                                                                                                          // 13399
    }                                                                                                                  // 13400
    switch (ast.type) {                                                                                                // 13401
    case AST.Program:                                                                                                  // 13402
      forEach(ast.body, function(expression, pos) {                                                                    // 13403
        self.recurse(expression.expression, undefined, undefined, function(expr) { right = expr; });                   // 13404
        if (pos !== ast.body.length - 1) {                                                                             // 13405
          self.current().body.push(right, ';');                                                                        // 13406
        } else {                                                                                                       // 13407
          self.return_(right);                                                                                         // 13408
        }                                                                                                              // 13409
      });                                                                                                              // 13410
      break;                                                                                                           // 13411
    case AST.Literal:                                                                                                  // 13412
      expression = this.escape(ast.value);                                                                             // 13413
      this.assign(intoId, expression);                                                                                 // 13414
      recursionFn(expression);                                                                                         // 13415
      break;                                                                                                           // 13416
    case AST.UnaryExpression:                                                                                          // 13417
      this.recurse(ast.argument, undefined, undefined, function(expr) { right = expr; });                              // 13418
      expression = ast.operator + '(' + this.ifDefined(right, 0) + ')';                                                // 13419
      this.assign(intoId, expression);                                                                                 // 13420
      recursionFn(expression);                                                                                         // 13421
      break;                                                                                                           // 13422
    case AST.BinaryExpression:                                                                                         // 13423
      this.recurse(ast.left, undefined, undefined, function(expr) { left = expr; });                                   // 13424
      this.recurse(ast.right, undefined, undefined, function(expr) { right = expr; });                                 // 13425
      if (ast.operator === '+') {                                                                                      // 13426
        expression = this.plus(left, right);                                                                           // 13427
      } else if (ast.operator === '-') {                                                                               // 13428
        expression = this.ifDefined(left, 0) + ast.operator + this.ifDefined(right, 0);                                // 13429
      } else {                                                                                                         // 13430
        expression = '(' + left + ')' + ast.operator + '(' + right + ')';                                              // 13431
      }                                                                                                                // 13432
      this.assign(intoId, expression);                                                                                 // 13433
      recursionFn(expression);                                                                                         // 13434
      break;                                                                                                           // 13435
    case AST.LogicalExpression:                                                                                        // 13436
      intoId = intoId || this.nextId();                                                                                // 13437
      self.recurse(ast.left, intoId);                                                                                  // 13438
      self.if_(ast.operator === '&&' ? intoId : self.not(intoId), self.lazyRecurse(ast.right, intoId));                // 13439
      recursionFn(intoId);                                                                                             // 13440
      break;                                                                                                           // 13441
    case AST.ConditionalExpression:                                                                                    // 13442
      intoId = intoId || this.nextId();                                                                                // 13443
      self.recurse(ast.test, intoId);                                                                                  // 13444
      self.if_(intoId, self.lazyRecurse(ast.alternate, intoId), self.lazyRecurse(ast.consequent, intoId));             // 13445
      recursionFn(intoId);                                                                                             // 13446
      break;                                                                                                           // 13447
    case AST.Identifier:                                                                                               // 13448
      intoId = intoId || this.nextId();                                                                                // 13449
      if (nameId) {                                                                                                    // 13450
        nameId.context = self.stage === 'inputs' ? 's' : this.assign(this.nextId(), this.getHasOwnProperty('l', ast.name) + '?l:s');
        nameId.computed = false;                                                                                       // 13452
        nameId.name = ast.name;                                                                                        // 13453
      }                                                                                                                // 13454
      ensureSafeMemberName(ast.name);                                                                                  // 13455
      self.if_(self.stage === 'inputs' || self.not(self.getHasOwnProperty('l', ast.name)),                             // 13456
        function() {                                                                                                   // 13457
          self.if_(self.stage === 'inputs' || 's', function() {                                                        // 13458
            if (create && create !== 1) {                                                                              // 13459
              self.if_(                                                                                                // 13460
                self.not(self.nonComputedMember('s', ast.name)),                                                       // 13461
                self.lazyAssign(self.nonComputedMember('s', ast.name), '{}'));                                         // 13462
            }                                                                                                          // 13463
            self.assign(intoId, self.nonComputedMember('s', ast.name));                                                // 13464
          });                                                                                                          // 13465
        }, intoId && self.lazyAssign(intoId, self.nonComputedMember('l', ast.name))                                    // 13466
        );                                                                                                             // 13467
      if (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.name)) {                                     // 13468
        self.addEnsureSafeObject(intoId);                                                                              // 13469
      }                                                                                                                // 13470
      recursionFn(intoId);                                                                                             // 13471
      break;                                                                                                           // 13472
    case AST.MemberExpression:                                                                                         // 13473
      left = nameId && (nameId.context = this.nextId()) || this.nextId();                                              // 13474
      intoId = intoId || this.nextId();                                                                                // 13475
      self.recurse(ast.object, left, undefined, function() {                                                           // 13476
        self.if_(self.notNull(left), function() {                                                                      // 13477
          if (ast.computed) {                                                                                          // 13478
            right = self.nextId();                                                                                     // 13479
            self.recurse(ast.property, right);                                                                         // 13480
            self.getStringValue(right);                                                                                // 13481
            self.addEnsureSafeMemberName(right);                                                                       // 13482
            if (create && create !== 1) {                                                                              // 13483
              self.if_(self.not(self.computedMember(left, right)), self.lazyAssign(self.computedMember(left, right), '{}'));
            }                                                                                                          // 13485
            expression = self.ensureSafeObject(self.computedMember(left, right));                                      // 13486
            self.assign(intoId, expression);                                                                           // 13487
            if (nameId) {                                                                                              // 13488
              nameId.computed = true;                                                                                  // 13489
              nameId.name = right;                                                                                     // 13490
            }                                                                                                          // 13491
          } else {                                                                                                     // 13492
            ensureSafeMemberName(ast.property.name);                                                                   // 13493
            if (create && create !== 1) {                                                                              // 13494
              self.if_(self.not(self.nonComputedMember(left, ast.property.name)), self.lazyAssign(self.nonComputedMember(left, ast.property.name), '{}'));
            }                                                                                                          // 13496
            expression = self.nonComputedMember(left, ast.property.name);                                              // 13497
            if (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.property.name)) {                      // 13498
              expression = self.ensureSafeObject(expression);                                                          // 13499
            }                                                                                                          // 13500
            self.assign(intoId, expression);                                                                           // 13501
            if (nameId) {                                                                                              // 13502
              nameId.computed = false;                                                                                 // 13503
              nameId.name = ast.property.name;                                                                         // 13504
            }                                                                                                          // 13505
          }                                                                                                            // 13506
        }, function() {                                                                                                // 13507
          self.assign(intoId, 'undefined');                                                                            // 13508
        });                                                                                                            // 13509
        recursionFn(intoId);                                                                                           // 13510
      }, !!create);                                                                                                    // 13511
      break;                                                                                                           // 13512
    case AST.CallExpression:                                                                                           // 13513
      intoId = intoId || this.nextId();                                                                                // 13514
      if (ast.filter) {                                                                                                // 13515
        right = self.filter(ast.callee.name);                                                                          // 13516
        args = [];                                                                                                     // 13517
        forEach(ast.arguments, function(expr) {                                                                        // 13518
          var argument = self.nextId();                                                                                // 13519
          self.recurse(expr, argument);                                                                                // 13520
          args.push(argument);                                                                                         // 13521
        });                                                                                                            // 13522
        expression = right + '(' + args.join(',') + ')';                                                               // 13523
        self.assign(intoId, expression);                                                                               // 13524
        recursionFn(intoId);                                                                                           // 13525
      } else {                                                                                                         // 13526
        right = self.nextId();                                                                                         // 13527
        left = {};                                                                                                     // 13528
        args = [];                                                                                                     // 13529
        self.recurse(ast.callee, right, left, function() {                                                             // 13530
          self.if_(self.notNull(right), function() {                                                                   // 13531
            self.addEnsureSafeFunction(right);                                                                         // 13532
            forEach(ast.arguments, function(expr) {                                                                    // 13533
              self.recurse(expr, self.nextId(), undefined, function(argument) {                                        // 13534
                args.push(self.ensureSafeObject(argument));                                                            // 13535
              });                                                                                                      // 13536
            });                                                                                                        // 13537
            if (left.name) {                                                                                           // 13538
              if (!self.state.expensiveChecks) {                                                                       // 13539
                self.addEnsureSafeObject(left.context);                                                                // 13540
              }                                                                                                        // 13541
              expression = self.member(left.context, left.name, left.computed) + '(' + args.join(',') + ')';           // 13542
            } else {                                                                                                   // 13543
              expression = right + '(' + args.join(',') + ')';                                                         // 13544
            }                                                                                                          // 13545
            expression = self.ensureSafeObject(expression);                                                            // 13546
            self.assign(intoId, expression);                                                                           // 13547
          }, function() {                                                                                              // 13548
            self.assign(intoId, 'undefined');                                                                          // 13549
          });                                                                                                          // 13550
          recursionFn(intoId);                                                                                         // 13551
        });                                                                                                            // 13552
      }                                                                                                                // 13553
      break;                                                                                                           // 13554
    case AST.AssignmentExpression:                                                                                     // 13555
      right = this.nextId();                                                                                           // 13556
      left = {};                                                                                                       // 13557
      if (!isAssignable(ast.left)) {                                                                                   // 13558
        throw $parseMinErr('lval', 'Trying to assing a value to a non l-value');                                       // 13559
      }                                                                                                                // 13560
      this.recurse(ast.left, undefined, left, function() {                                                             // 13561
        self.if_(self.notNull(left.context), function() {                                                              // 13562
          self.recurse(ast.right, right);                                                                              // 13563
          self.addEnsureSafeObject(self.member(left.context, left.name, left.computed));                               // 13564
          self.addEnsureSafeAssignContext(left.context);                                                               // 13565
          expression = self.member(left.context, left.name, left.computed) + ast.operator + right;                     // 13566
          self.assign(intoId, expression);                                                                             // 13567
          recursionFn(intoId || expression);                                                                           // 13568
        });                                                                                                            // 13569
      }, 1);                                                                                                           // 13570
      break;                                                                                                           // 13571
    case AST.ArrayExpression:                                                                                          // 13572
      args = [];                                                                                                       // 13573
      forEach(ast.elements, function(expr) {                                                                           // 13574
        self.recurse(expr, self.nextId(), undefined, function(argument) {                                              // 13575
          args.push(argument);                                                                                         // 13576
        });                                                                                                            // 13577
      });                                                                                                              // 13578
      expression = '[' + args.join(',') + ']';                                                                         // 13579
      this.assign(intoId, expression);                                                                                 // 13580
      recursionFn(expression);                                                                                         // 13581
      break;                                                                                                           // 13582
    case AST.ObjectExpression:                                                                                         // 13583
      args = [];                                                                                                       // 13584
      forEach(ast.properties, function(property) {                                                                     // 13585
        self.recurse(property.value, self.nextId(), undefined, function(expr) {                                        // 13586
          args.push(self.escape(                                                                                       // 13587
              property.key.type === AST.Identifier ? property.key.name :                                               // 13588
                ('' + property.key.value)) +                                                                           // 13589
              ':' + expr);                                                                                             // 13590
        });                                                                                                            // 13591
      });                                                                                                              // 13592
      expression = '{' + args.join(',') + '}';                                                                         // 13593
      this.assign(intoId, expression);                                                                                 // 13594
      recursionFn(expression);                                                                                         // 13595
      break;                                                                                                           // 13596
    case AST.ThisExpression:                                                                                           // 13597
      this.assign(intoId, 's');                                                                                        // 13598
      recursionFn('s');                                                                                                // 13599
      break;                                                                                                           // 13600
    case AST.NGValueParameter:                                                                                         // 13601
      this.assign(intoId, 'v');                                                                                        // 13602
      recursionFn('v');                                                                                                // 13603
      break;                                                                                                           // 13604
    }                                                                                                                  // 13605
  },                                                                                                                   // 13606
                                                                                                                       // 13607
  getHasOwnProperty: function(element, property) {                                                                     // 13608
    var key = element + '.' + property;                                                                                // 13609
    var own = this.current().own;                                                                                      // 13610
    if (!own.hasOwnProperty(key)) {                                                                                    // 13611
      own[key] = this.nextId(false, element + '&&(' + this.escape(property) + ' in ' + element + ')');                 // 13612
    }                                                                                                                  // 13613
    return own[key];                                                                                                   // 13614
  },                                                                                                                   // 13615
                                                                                                                       // 13616
  assign: function(id, value) {                                                                                        // 13617
    if (!id) return;                                                                                                   // 13618
    this.current().body.push(id, '=', value, ';');                                                                     // 13619
    return id;                                                                                                         // 13620
  },                                                                                                                   // 13621
                                                                                                                       // 13622
  filter: function(filterName) {                                                                                       // 13623
    if (!this.state.filters.hasOwnProperty(filterName)) {                                                              // 13624
      this.state.filters[filterName] = this.nextId(true);                                                              // 13625
    }                                                                                                                  // 13626
    return this.state.filters[filterName];                                                                             // 13627
  },                                                                                                                   // 13628
                                                                                                                       // 13629
  ifDefined: function(id, defaultValue) {                                                                              // 13630
    return 'ifDefined(' + id + ',' + this.escape(defaultValue) + ')';                                                  // 13631
  },                                                                                                                   // 13632
                                                                                                                       // 13633
  plus: function(left, right) {                                                                                        // 13634
    return 'plus(' + left + ',' + right + ')';                                                                         // 13635
  },                                                                                                                   // 13636
                                                                                                                       // 13637
  return_: function(id) {                                                                                              // 13638
    this.current().body.push('return ', id, ';');                                                                      // 13639
  },                                                                                                                   // 13640
                                                                                                                       // 13641
  if_: function(test, alternate, consequent) {                                                                         // 13642
    if (test === true) {                                                                                               // 13643
      alternate();                                                                                                     // 13644
    } else {                                                                                                           // 13645
      var body = this.current().body;                                                                                  // 13646
      body.push('if(', test, '){');                                                                                    // 13647
      alternate();                                                                                                     // 13648
      body.push('}');                                                                                                  // 13649
      if (consequent) {                                                                                                // 13650
        body.push('else{');                                                                                            // 13651
        consequent();                                                                                                  // 13652
        body.push('}');                                                                                                // 13653
      }                                                                                                                // 13654
    }                                                                                                                  // 13655
  },                                                                                                                   // 13656
                                                                                                                       // 13657
  not: function(expression) {                                                                                          // 13658
    return '!(' + expression + ')';                                                                                    // 13659
  },                                                                                                                   // 13660
                                                                                                                       // 13661
  notNull: function(expression) {                                                                                      // 13662
    return expression + '!=null';                                                                                      // 13663
  },                                                                                                                   // 13664
                                                                                                                       // 13665
  nonComputedMember: function(left, right) {                                                                           // 13666
    return left + '.' + right;                                                                                         // 13667
  },                                                                                                                   // 13668
                                                                                                                       // 13669
  computedMember: function(left, right) {                                                                              // 13670
    return left + '[' + right + ']';                                                                                   // 13671
  },                                                                                                                   // 13672
                                                                                                                       // 13673
  member: function(left, right, computed) {                                                                            // 13674
    if (computed) return this.computedMember(left, right);                                                             // 13675
    return this.nonComputedMember(left, right);                                                                        // 13676
  },                                                                                                                   // 13677
                                                                                                                       // 13678
  addEnsureSafeObject: function(item) {                                                                                // 13679
    this.current().body.push(this.ensureSafeObject(item), ';');                                                        // 13680
  },                                                                                                                   // 13681
                                                                                                                       // 13682
  addEnsureSafeMemberName: function(item) {                                                                            // 13683
    this.current().body.push(this.ensureSafeMemberName(item), ';');                                                    // 13684
  },                                                                                                                   // 13685
                                                                                                                       // 13686
  addEnsureSafeFunction: function(item) {                                                                              // 13687
    this.current().body.push(this.ensureSafeFunction(item), ';');                                                      // 13688
  },                                                                                                                   // 13689
                                                                                                                       // 13690
  addEnsureSafeAssignContext: function(item) {                                                                         // 13691
    this.current().body.push(this.ensureSafeAssignContext(item), ';');                                                 // 13692
  },                                                                                                                   // 13693
                                                                                                                       // 13694
  ensureSafeObject: function(item) {                                                                                   // 13695
    return 'ensureSafeObject(' + item + ',text)';                                                                      // 13696
  },                                                                                                                   // 13697
                                                                                                                       // 13698
  ensureSafeMemberName: function(item) {                                                                               // 13699
    return 'ensureSafeMemberName(' + item + ',text)';                                                                  // 13700
  },                                                                                                                   // 13701
                                                                                                                       // 13702
  ensureSafeFunction: function(item) {                                                                                 // 13703
    return 'ensureSafeFunction(' + item + ',text)';                                                                    // 13704
  },                                                                                                                   // 13705
                                                                                                                       // 13706
  getStringValue: function(item) {                                                                                     // 13707
    this.assign(item, 'getStringValue(' + item + ',text)');                                                            // 13708
  },                                                                                                                   // 13709
                                                                                                                       // 13710
  ensureSafeAssignContext: function(item) {                                                                            // 13711
    return 'ensureSafeAssignContext(' + item + ',text)';                                                               // 13712
  },                                                                                                                   // 13713
                                                                                                                       // 13714
  lazyRecurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {                                  // 13715
    var self = this;                                                                                                   // 13716
    return function() {                                                                                                // 13717
      self.recurse(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck);                                        // 13718
    };                                                                                                                 // 13719
  },                                                                                                                   // 13720
                                                                                                                       // 13721
  lazyAssign: function(id, value) {                                                                                    // 13722
    var self = this;                                                                                                   // 13723
    return function() {                                                                                                // 13724
      self.assign(id, value);                                                                                          // 13725
    };                                                                                                                 // 13726
  },                                                                                                                   // 13727
                                                                                                                       // 13728
  stringEscapeRegex: /[^ a-zA-Z0-9]/g,                                                                                 // 13729
                                                                                                                       // 13730
  stringEscapeFn: function(c) {                                                                                        // 13731
    return '\\u' + ('0000' + c.charCodeAt(0).toString(16)).slice(-4);                                                  // 13732
  },                                                                                                                   // 13733
                                                                                                                       // 13734
  escape: function(value) {                                                                                            // 13735
    if (isString(value)) return "'" + value.replace(this.stringEscapeRegex, this.stringEscapeFn) + "'";                // 13736
    if (isNumber(value)) return value.toString();                                                                      // 13737
    if (value === true) return 'true';                                                                                 // 13738
    if (value === false) return 'false';                                                                               // 13739
    if (value === null) return 'null';                                                                                 // 13740
    if (typeof value === 'undefined') return 'undefined';                                                              // 13741
                                                                                                                       // 13742
    throw $parseMinErr('esc', 'IMPOSSIBLE');                                                                           // 13743
  },                                                                                                                   // 13744
                                                                                                                       // 13745
  nextId: function(skip, init) {                                                                                       // 13746
    var id = 'v' + (this.state.nextId++);                                                                              // 13747
    if (!skip) {                                                                                                       // 13748
      this.current().vars.push(id + (init ? '=' + init : ''));                                                         // 13749
    }                                                                                                                  // 13750
    return id;                                                                                                         // 13751
  },                                                                                                                   // 13752
                                                                                                                       // 13753
  current: function() {                                                                                                // 13754
    return this.state[this.state.computing];                                                                           // 13755
  }                                                                                                                    // 13756
};                                                                                                                     // 13757
                                                                                                                       // 13758
                                                                                                                       // 13759
function ASTInterpreter(astBuilder, $filter) {                                                                         // 13760
  this.astBuilder = astBuilder;                                                                                        // 13761
  this.$filter = $filter;                                                                                              // 13762
}                                                                                                                      // 13763
                                                                                                                       // 13764
ASTInterpreter.prototype = {                                                                                           // 13765
  compile: function(expression, expensiveChecks) {                                                                     // 13766
    var self = this;                                                                                                   // 13767
    var ast = this.astBuilder.ast(expression);                                                                         // 13768
    this.expression = expression;                                                                                      // 13769
    this.expensiveChecks = expensiveChecks;                                                                            // 13770
    findConstantAndWatchExpressions(ast, self.$filter);                                                                // 13771
    var assignable;                                                                                                    // 13772
    var assign;                                                                                                        // 13773
    if ((assignable = assignableAST(ast))) {                                                                           // 13774
      assign = this.recurse(assignable);                                                                               // 13775
    }                                                                                                                  // 13776
    var toWatch = getInputs(ast.body);                                                                                 // 13777
    var inputs;                                                                                                        // 13778
    if (toWatch) {                                                                                                     // 13779
      inputs = [];                                                                                                     // 13780
      forEach(toWatch, function(watch, key) {                                                                          // 13781
        var input = self.recurse(watch);                                                                               // 13782
        watch.input = input;                                                                                           // 13783
        inputs.push(input);                                                                                            // 13784
        watch.watchId = key;                                                                                           // 13785
      });                                                                                                              // 13786
    }                                                                                                                  // 13787
    var expressions = [];                                                                                              // 13788
    forEach(ast.body, function(expression) {                                                                           // 13789
      expressions.push(self.recurse(expression.expression));                                                           // 13790
    });                                                                                                                // 13791
    var fn = ast.body.length === 0 ? function() {} :                                                                   // 13792
             ast.body.length === 1 ? expressions[0] :                                                                  // 13793
             function(scope, locals) {                                                                                 // 13794
               var lastValue;                                                                                          // 13795
               forEach(expressions, function(exp) {                                                                    // 13796
                 lastValue = exp(scope, locals);                                                                       // 13797
               });                                                                                                     // 13798
               return lastValue;                                                                                       // 13799
             };                                                                                                        // 13800
    if (assign) {                                                                                                      // 13801
      fn.assign = function(scope, value, locals) {                                                                     // 13802
        return assign(scope, locals, value);                                                                           // 13803
      };                                                                                                               // 13804
    }                                                                                                                  // 13805
    if (inputs) {                                                                                                      // 13806
      fn.inputs = inputs;                                                                                              // 13807
    }                                                                                                                  // 13808
    fn.literal = isLiteral(ast);                                                                                       // 13809
    fn.constant = isConstant(ast);                                                                                     // 13810
    return fn;                                                                                                         // 13811
  },                                                                                                                   // 13812
                                                                                                                       // 13813
  recurse: function(ast, context, create) {                                                                            // 13814
    var left, right, self = this, args, expression;                                                                    // 13815
    if (ast.input) {                                                                                                   // 13816
      return this.inputs(ast.input, ast.watchId);                                                                      // 13817
    }                                                                                                                  // 13818
    switch (ast.type) {                                                                                                // 13819
    case AST.Literal:                                                                                                  // 13820
      return this.value(ast.value, context);                                                                           // 13821
    case AST.UnaryExpression:                                                                                          // 13822
      right = this.recurse(ast.argument);                                                                              // 13823
      return this['unary' + ast.operator](right, context);                                                             // 13824
    case AST.BinaryExpression:                                                                                         // 13825
      left = this.recurse(ast.left);                                                                                   // 13826
      right = this.recurse(ast.right);                                                                                 // 13827
      return this['binary' + ast.operator](left, right, context);                                                      // 13828
    case AST.LogicalExpression:                                                                                        // 13829
      left = this.recurse(ast.left);                                                                                   // 13830
      right = this.recurse(ast.right);                                                                                 // 13831
      return this['binary' + ast.operator](left, right, context);                                                      // 13832
    case AST.ConditionalExpression:                                                                                    // 13833
      return this['ternary?:'](                                                                                        // 13834
        this.recurse(ast.test),                                                                                        // 13835
        this.recurse(ast.alternate),                                                                                   // 13836
        this.recurse(ast.consequent),                                                                                  // 13837
        context                                                                                                        // 13838
      );                                                                                                               // 13839
    case AST.Identifier:                                                                                               // 13840
      ensureSafeMemberName(ast.name, self.expression);                                                                 // 13841
      return self.identifier(ast.name,                                                                                 // 13842
                             self.expensiveChecks || isPossiblyDangerousMemberName(ast.name),                          // 13843
                             context, create, self.expression);                                                        // 13844
    case AST.MemberExpression:                                                                                         // 13845
      left = this.recurse(ast.object, false, !!create);                                                                // 13846
      if (!ast.computed) {                                                                                             // 13847
        ensureSafeMemberName(ast.property.name, self.expression);                                                      // 13848
        right = ast.property.name;                                                                                     // 13849
      }                                                                                                                // 13850
      if (ast.computed) right = this.recurse(ast.property);                                                            // 13851
      return ast.computed ?                                                                                            // 13852
        this.computedMember(left, right, context, create, self.expression) :                                           // 13853
        this.nonComputedMember(left, right, self.expensiveChecks, context, create, self.expression);                   // 13854
    case AST.CallExpression:                                                                                           // 13855
      args = [];                                                                                                       // 13856
      forEach(ast.arguments, function(expr) {                                                                          // 13857
        args.push(self.recurse(expr));                                                                                 // 13858
      });                                                                                                              // 13859
      if (ast.filter) right = this.$filter(ast.callee.name);                                                           // 13860
      if (!ast.filter) right = this.recurse(ast.callee, true);                                                         // 13861
      return ast.filter ?                                                                                              // 13862
        function(scope, locals, assign, inputs) {                                                                      // 13863
          var values = [];                                                                                             // 13864
          for (var i = 0; i < args.length; ++i) {                                                                      // 13865
            values.push(args[i](scope, locals, assign, inputs));                                                       // 13866
          }                                                                                                            // 13867
          var value = right.apply(undefined, values, inputs);                                                          // 13868
          return context ? {context: undefined, name: undefined, value: value} : value;                                // 13869
        } :                                                                                                            // 13870
        function(scope, locals, assign, inputs) {                                                                      // 13871
          var rhs = right(scope, locals, assign, inputs);                                                              // 13872
          var value;                                                                                                   // 13873
          if (rhs.value != null) {                                                                                     // 13874
            ensureSafeObject(rhs.context, self.expression);                                                            // 13875
            ensureSafeFunction(rhs.value, self.expression);                                                            // 13876
            var values = [];                                                                                           // 13877
            for (var i = 0; i < args.length; ++i) {                                                                    // 13878
              values.push(ensureSafeObject(args[i](scope, locals, assign, inputs), self.expression));                  // 13879
            }                                                                                                          // 13880
            value = ensureSafeObject(rhs.value.apply(rhs.context, values), self.expression);                           // 13881
          }                                                                                                            // 13882
          return context ? {value: value} : value;                                                                     // 13883
        };                                                                                                             // 13884
    case AST.AssignmentExpression:                                                                                     // 13885
      left = this.recurse(ast.left, true, 1);                                                                          // 13886
      right = this.recurse(ast.right);                                                                                 // 13887
      return function(scope, locals, assign, inputs) {                                                                 // 13888
        var lhs = left(scope, locals, assign, inputs);                                                                 // 13889
        var rhs = right(scope, locals, assign, inputs);                                                                // 13890
        ensureSafeObject(lhs.value, self.expression);                                                                  // 13891
        ensureSafeAssignContext(lhs.context);                                                                          // 13892
        lhs.context[lhs.name] = rhs;                                                                                   // 13893
        return context ? {value: rhs} : rhs;                                                                           // 13894
      };                                                                                                               // 13895
    case AST.ArrayExpression:                                                                                          // 13896
      args = [];                                                                                                       // 13897
      forEach(ast.elements, function(expr) {                                                                           // 13898
        args.push(self.recurse(expr));                                                                                 // 13899
      });                                                                                                              // 13900
      return function(scope, locals, assign, inputs) {                                                                 // 13901
        var value = [];                                                                                                // 13902
        for (var i = 0; i < args.length; ++i) {                                                                        // 13903
          value.push(args[i](scope, locals, assign, inputs));                                                          // 13904
        }                                                                                                              // 13905
        return context ? {value: value} : value;                                                                       // 13906
      };                                                                                                               // 13907
    case AST.ObjectExpression:                                                                                         // 13908
      args = [];                                                                                                       // 13909
      forEach(ast.properties, function(property) {                                                                     // 13910
        args.push({key: property.key.type === AST.Identifier ?                                                         // 13911
                        property.key.name :                                                                            // 13912
                        ('' + property.key.value),                                                                     // 13913
                   value: self.recurse(property.value)                                                                 // 13914
        });                                                                                                            // 13915
      });                                                                                                              // 13916
      return function(scope, locals, assign, inputs) {                                                                 // 13917
        var value = {};                                                                                                // 13918
        for (var i = 0; i < args.length; ++i) {                                                                        // 13919
          value[args[i].key] = args[i].value(scope, locals, assign, inputs);                                           // 13920
        }                                                                                                              // 13921
        return context ? {value: value} : value;                                                                       // 13922
      };                                                                                                               // 13923
    case AST.ThisExpression:                                                                                           // 13924
      return function(scope) {                                                                                         // 13925
        return context ? {value: scope} : scope;                                                                       // 13926
      };                                                                                                               // 13927
    case AST.NGValueParameter:                                                                                         // 13928
      return function(scope, locals, assign, inputs) {                                                                 // 13929
        return context ? {value: assign} : assign;                                                                     // 13930
      };                                                                                                               // 13931
    }                                                                                                                  // 13932
  },                                                                                                                   // 13933
                                                                                                                       // 13934
  'unary+': function(argument, context) {                                                                              // 13935
    return function(scope, locals, assign, inputs) {                                                                   // 13936
      var arg = argument(scope, locals, assign, inputs);                                                               // 13937
      if (isDefined(arg)) {                                                                                            // 13938
        arg = +arg;                                                                                                    // 13939
      } else {                                                                                                         // 13940
        arg = 0;                                                                                                       // 13941
      }                                                                                                                // 13942
      return context ? {value: arg} : arg;                                                                             // 13943
    };                                                                                                                 // 13944
  },                                                                                                                   // 13945
  'unary-': function(argument, context) {                                                                              // 13946
    return function(scope, locals, assign, inputs) {                                                                   // 13947
      var arg = argument(scope, locals, assign, inputs);                                                               // 13948
      if (isDefined(arg)) {                                                                                            // 13949
        arg = -arg;                                                                                                    // 13950
      } else {                                                                                                         // 13951
        arg = 0;                                                                                                       // 13952
      }                                                                                                                // 13953
      return context ? {value: arg} : arg;                                                                             // 13954
    };                                                                                                                 // 13955
  },                                                                                                                   // 13956
  'unary!': function(argument, context) {                                                                              // 13957
    return function(scope, locals, assign, inputs) {                                                                   // 13958
      var arg = !argument(scope, locals, assign, inputs);                                                              // 13959
      return context ? {value: arg} : arg;                                                                             // 13960
    };                                                                                                                 // 13961
  },                                                                                                                   // 13962
  'binary+': function(left, right, context) {                                                                          // 13963
    return function(scope, locals, assign, inputs) {                                                                   // 13964
      var lhs = left(scope, locals, assign, inputs);                                                                   // 13965
      var rhs = right(scope, locals, assign, inputs);                                                                  // 13966
      var arg = plusFn(lhs, rhs);                                                                                      // 13967
      return context ? {value: arg} : arg;                                                                             // 13968
    };                                                                                                                 // 13969
  },                                                                                                                   // 13970
  'binary-': function(left, right, context) {                                                                          // 13971
    return function(scope, locals, assign, inputs) {                                                                   // 13972
      var lhs = left(scope, locals, assign, inputs);                                                                   // 13973
      var rhs = right(scope, locals, assign, inputs);                                                                  // 13974
      var arg = (isDefined(lhs) ? lhs : 0) - (isDefined(rhs) ? rhs : 0);                                               // 13975
      return context ? {value: arg} : arg;                                                                             // 13976
    };                                                                                                                 // 13977
  },                                                                                                                   // 13978
  'binary*': function(left, right, context) {                                                                          // 13979
    return function(scope, locals, assign, inputs) {                                                                   // 13980
      var arg = left(scope, locals, assign, inputs) * right(scope, locals, assign, inputs);                            // 13981
      return context ? {value: arg} : arg;                                                                             // 13982
    };                                                                                                                 // 13983
  },                                                                                                                   // 13984
  'binary/': function(left, right, context) {                                                                          // 13985
    return function(scope, locals, assign, inputs) {                                                                   // 13986
      var arg = left(scope, locals, assign, inputs) / right(scope, locals, assign, inputs);                            // 13987
      return context ? {value: arg} : arg;                                                                             // 13988
    };                                                                                                                 // 13989
  },                                                                                                                   // 13990
  'binary%': function(left, right, context) {                                                                          // 13991
    return function(scope, locals, assign, inputs) {                                                                   // 13992
      var arg = left(scope, locals, assign, inputs) % right(scope, locals, assign, inputs);                            // 13993
      return context ? {value: arg} : arg;                                                                             // 13994
    };                                                                                                                 // 13995
  },                                                                                                                   // 13996
  'binary===': function(left, right, context) {                                                                        // 13997
    return function(scope, locals, assign, inputs) {                                                                   // 13998
      var arg = left(scope, locals, assign, inputs) === right(scope, locals, assign, inputs);                          // 13999
      return context ? {value: arg} : arg;                                                                             // 14000
    };                                                                                                                 // 14001
  },                                                                                                                   // 14002
  'binary!==': function(left, right, context) {                                                                        // 14003
    return function(scope, locals, assign, inputs) {                                                                   // 14004
      var arg = left(scope, locals, assign, inputs) !== right(scope, locals, assign, inputs);                          // 14005
      return context ? {value: arg} : arg;                                                                             // 14006
    };                                                                                                                 // 14007
  },                                                                                                                   // 14008
  'binary==': function(left, right, context) {                                                                         // 14009
    return function(scope, locals, assign, inputs) {                                                                   // 14010
      var arg = left(scope, locals, assign, inputs) == right(scope, locals, assign, inputs);                           // 14011
      return context ? {value: arg} : arg;                                                                             // 14012
    };                                                                                                                 // 14013
  },                                                                                                                   // 14014
  'binary!=': function(left, right, context) {                                                                         // 14015
    return function(scope, locals, assign, inputs) {                                                                   // 14016
      var arg = left(scope, locals, assign, inputs) != right(scope, locals, assign, inputs);                           // 14017
      return context ? {value: arg} : arg;                                                                             // 14018
    };                                                                                                                 // 14019
  },                                                                                                                   // 14020
  'binary<': function(left, right, context) {                                                                          // 14021
    return function(scope, locals, assign, inputs) {                                                                   // 14022
      var arg = left(scope, locals, assign, inputs) < right(scope, locals, assign, inputs);                            // 14023
      return context ? {value: arg} : arg;                                                                             // 14024
    };                                                                                                                 // 14025
  },                                                                                                                   // 14026
  'binary>': function(left, right, context) {                                                                          // 14027
    return function(scope, locals, assign, inputs) {                                                                   // 14028
      var arg = left(scope, locals, assign, inputs) > right(scope, locals, assign, inputs);                            // 14029
      return context ? {value: arg} : arg;                                                                             // 14030
    };                                                                                                                 // 14031
  },                                                                                                                   // 14032
  'binary<=': function(left, right, context) {                                                                         // 14033
    return function(scope, locals, assign, inputs) {                                                                   // 14034
      var arg = left(scope, locals, assign, inputs) <= right(scope, locals, assign, inputs);                           // 14035
      return context ? {value: arg} : arg;                                                                             // 14036
    };                                                                                                                 // 14037
  },                                                                                                                   // 14038
  'binary>=': function(left, right, context) {                                                                         // 14039
    return function(scope, locals, assign, inputs) {                                                                   // 14040
      var arg = left(scope, locals, assign, inputs) >= right(scope, locals, assign, inputs);                           // 14041
      return context ? {value: arg} : arg;                                                                             // 14042
    };                                                                                                                 // 14043
  },                                                                                                                   // 14044
  'binary&&': function(left, right, context) {                                                                         // 14045
    return function(scope, locals, assign, inputs) {                                                                   // 14046
      var arg = left(scope, locals, assign, inputs) && right(scope, locals, assign, inputs);                           // 14047
      return context ? {value: arg} : arg;                                                                             // 14048
    };                                                                                                                 // 14049
  },                                                                                                                   // 14050
  'binary||': function(left, right, context) {                                                                         // 14051
    return function(scope, locals, assign, inputs) {                                                                   // 14052
      var arg = left(scope, locals, assign, inputs) || right(scope, locals, assign, inputs);                           // 14053
      return context ? {value: arg} : arg;                                                                             // 14054
    };                                                                                                                 // 14055
  },                                                                                                                   // 14056
  'ternary?:': function(test, alternate, consequent, context) {                                                        // 14057
    return function(scope, locals, assign, inputs) {                                                                   // 14058
      var arg = test(scope, locals, assign, inputs) ? alternate(scope, locals, assign, inputs) : consequent(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;                                                                             // 14060
    };                                                                                                                 // 14061
  },                                                                                                                   // 14062
  value: function(value, context) {                                                                                    // 14063
    return function() { return context ? {context: undefined, name: undefined, value: value} : value; };               // 14064
  },                                                                                                                   // 14065
  identifier: function(name, expensiveChecks, context, create, expression) {                                           // 14066
    return function(scope, locals, assign, inputs) {                                                                   // 14067
      var base = locals && (name in locals) ? locals : scope;                                                          // 14068
      if (create && create !== 1 && base && !(base[name])) {                                                           // 14069
        base[name] = {};                                                                                               // 14070
      }                                                                                                                // 14071
      var value = base ? base[name] : undefined;                                                                       // 14072
      if (expensiveChecks) {                                                                                           // 14073
        ensureSafeObject(value, expression);                                                                           // 14074
      }                                                                                                                // 14075
      if (context) {                                                                                                   // 14076
        return {context: base, name: name, value: value};                                                              // 14077
      } else {                                                                                                         // 14078
        return value;                                                                                                  // 14079
      }                                                                                                                // 14080
    };                                                                                                                 // 14081
  },                                                                                                                   // 14082
  computedMember: function(left, right, context, create, expression) {                                                 // 14083
    return function(scope, locals, assign, inputs) {                                                                   // 14084
      var lhs = left(scope, locals, assign, inputs);                                                                   // 14085
      var rhs;                                                                                                         // 14086
      var value;                                                                                                       // 14087
      if (lhs != null) {                                                                                               // 14088
        rhs = right(scope, locals, assign, inputs);                                                                    // 14089
        rhs = getStringValue(rhs);                                                                                     // 14090
        ensureSafeMemberName(rhs, expression);                                                                         // 14091
        if (create && create !== 1 && lhs && !(lhs[rhs])) {                                                            // 14092
          lhs[rhs] = {};                                                                                               // 14093
        }                                                                                                              // 14094
        value = lhs[rhs];                                                                                              // 14095
        ensureSafeObject(value, expression);                                                                           // 14096
      }                                                                                                                // 14097
      if (context) {                                                                                                   // 14098
        return {context: lhs, name: rhs, value: value};                                                                // 14099
      } else {                                                                                                         // 14100
        return value;                                                                                                  // 14101
      }                                                                                                                // 14102
    };                                                                                                                 // 14103
  },                                                                                                                   // 14104
  nonComputedMember: function(left, right, expensiveChecks, context, create, expression) {                             // 14105
    return function(scope, locals, assign, inputs) {                                                                   // 14106
      var lhs = left(scope, locals, assign, inputs);                                                                   // 14107
      if (create && create !== 1 && lhs && !(lhs[right])) {                                                            // 14108
        lhs[right] = {};                                                                                               // 14109
      }                                                                                                                // 14110
      var value = lhs != null ? lhs[right] : undefined;                                                                // 14111
      if (expensiveChecks || isPossiblyDangerousMemberName(right)) {                                                   // 14112
        ensureSafeObject(value, expression);                                                                           // 14113
      }                                                                                                                // 14114
      if (context) {                                                                                                   // 14115
        return {context: lhs, name: right, value: value};                                                              // 14116
      } else {                                                                                                         // 14117
        return value;                                                                                                  // 14118
      }                                                                                                                // 14119
    };                                                                                                                 // 14120
  },                                                                                                                   // 14121
  inputs: function(input, watchId) {                                                                                   // 14122
    return function(scope, value, locals, inputs) {                                                                    // 14123
      if (inputs) return inputs[watchId];                                                                              // 14124
      return input(scope, value, locals);                                                                              // 14125
    };                                                                                                                 // 14126
  }                                                                                                                    // 14127
};                                                                                                                     // 14128
                                                                                                                       // 14129
/**                                                                                                                    // 14130
 * @constructor                                                                                                        // 14131
 */                                                                                                                    // 14132
var Parser = function(lexer, $filter, options) {                                                                       // 14133
  this.lexer = lexer;                                                                                                  // 14134
  this.$filter = $filter;                                                                                              // 14135
  this.options = options;                                                                                              // 14136
  this.ast = new AST(this.lexer);                                                                                      // 14137
  this.astCompiler = options.csp ? new ASTInterpreter(this.ast, $filter) :                                             // 14138
                                   new ASTCompiler(this.ast, $filter);                                                 // 14139
};                                                                                                                     // 14140
                                                                                                                       // 14141
Parser.prototype = {                                                                                                   // 14142
  constructor: Parser,                                                                                                 // 14143
                                                                                                                       // 14144
  parse: function(text) {                                                                                              // 14145
    return this.astCompiler.compile(text, this.options.expensiveChecks);                                               // 14146
  }                                                                                                                    // 14147
};                                                                                                                     // 14148
                                                                                                                       // 14149
var getterFnCacheDefault = createMap();                                                                                // 14150
var getterFnCacheExpensive = createMap();                                                                              // 14151
                                                                                                                       // 14152
function isPossiblyDangerousMemberName(name) {                                                                         // 14153
  return name == 'constructor';                                                                                        // 14154
}                                                                                                                      // 14155
                                                                                                                       // 14156
var objectValueOf = Object.prototype.valueOf;                                                                          // 14157
                                                                                                                       // 14158
function getValueOf(value) {                                                                                           // 14159
  return isFunction(value.valueOf) ? value.valueOf() : objectValueOf.call(value);                                      // 14160
}                                                                                                                      // 14161
                                                                                                                       // 14162
///////////////////////////////////                                                                                    // 14163
                                                                                                                       // 14164
/**                                                                                                                    // 14165
 * @ngdoc service                                                                                                      // 14166
 * @name $parse                                                                                                        // 14167
 * @kind function                                                                                                      // 14168
 *                                                                                                                     // 14169
 * @description                                                                                                        // 14170
 *                                                                                                                     // 14171
 * Converts Angular {@link guide/expression expression} into a function.                                               // 14172
 *                                                                                                                     // 14173
 * ```js                                                                                                               // 14174
 *   var getter = $parse('user.name');                                                                                 // 14175
 *   var setter = getter.assign;                                                                                       // 14176
 *   var context = {user:{name:'angular'}};                                                                            // 14177
 *   var locals = {user:{name:'local'}};                                                                               // 14178
 *                                                                                                                     // 14179
 *   expect(getter(context)).toEqual('angular');                                                                       // 14180
 *   setter(context, 'newValue');                                                                                      // 14181
 *   expect(context.user.name).toEqual('newValue');                                                                    // 14182
 *   expect(getter(context, locals)).toEqual('local');                                                                 // 14183
 * ```                                                                                                                 // 14184
 *                                                                                                                     // 14185
 *                                                                                                                     // 14186
 * @param {string} expression String expression to compile.                                                            // 14187
 * @returns {function(context, locals)} a function which represents the compiled expression:                           // 14188
 *                                                                                                                     // 14189
 *    * `context` – `{object}` – an object against which any expressions embedded in the strings                       // 14190
 *      are evaluated against (typically a scope object).                                                              // 14191
 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                       // 14192
 *      `context`.                                                                                                     // 14193
 *                                                                                                                     // 14194
 *    The returned function also has the following properties:                                                         // 14195
 *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript                            // 14196
 *        literal.                                                                                                     // 14197
 *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript                             // 14198
 *        constant literals.                                                                                           // 14199
 *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be                     // 14200
 *        set to a function to change its value on the given context.                                                  // 14201
 *                                                                                                                     // 14202
 */                                                                                                                    // 14203
                                                                                                                       // 14204
                                                                                                                       // 14205
/**                                                                                                                    // 14206
 * @ngdoc provider                                                                                                     // 14207
 * @name $parseProvider                                                                                                // 14208
 *                                                                                                                     // 14209
 * @description                                                                                                        // 14210
 * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}                   // 14211
 *  service.                                                                                                           // 14212
 */                                                                                                                    // 14213
function $ParseProvider() {                                                                                            // 14214
  var cacheDefault = createMap();                                                                                      // 14215
  var cacheExpensive = createMap();                                                                                    // 14216
                                                                                                                       // 14217
  this.$get = ['$filter', function($filter) {                                                                          // 14218
    var noUnsafeEval = csp().noUnsafeEval;                                                                             // 14219
    var $parseOptions = {                                                                                              // 14220
          csp: noUnsafeEval,                                                                                           // 14221
          expensiveChecks: false                                                                                       // 14222
        },                                                                                                             // 14223
        $parseOptionsExpensive = {                                                                                     // 14224
          csp: noUnsafeEval,                                                                                           // 14225
          expensiveChecks: true                                                                                        // 14226
        };                                                                                                             // 14227
                                                                                                                       // 14228
    return function $parse(exp, interceptorFn, expensiveChecks) {                                                      // 14229
      var parsedExpression, oneTime, cacheKey;                                                                         // 14230
                                                                                                                       // 14231
      switch (typeof exp) {                                                                                            // 14232
        case 'string':                                                                                                 // 14233
          exp = exp.trim();                                                                                            // 14234
          cacheKey = exp;                                                                                              // 14235
                                                                                                                       // 14236
          var cache = (expensiveChecks ? cacheExpensive : cacheDefault);                                               // 14237
          parsedExpression = cache[cacheKey];                                                                          // 14238
                                                                                                                       // 14239
          if (!parsedExpression) {                                                                                     // 14240
            if (exp.charAt(0) === ':' && exp.charAt(1) === ':') {                                                      // 14241
              oneTime = true;                                                                                          // 14242
              exp = exp.substring(2);                                                                                  // 14243
            }                                                                                                          // 14244
            var parseOptions = expensiveChecks ? $parseOptionsExpensive : $parseOptions;                               // 14245
            var lexer = new Lexer(parseOptions);                                                                       // 14246
            var parser = new Parser(lexer, $filter, parseOptions);                                                     // 14247
            parsedExpression = parser.parse(exp);                                                                      // 14248
            if (parsedExpression.constant) {                                                                           // 14249
              parsedExpression.$$watchDelegate = constantWatchDelegate;                                                // 14250
            } else if (oneTime) {                                                                                      // 14251
              parsedExpression.$$watchDelegate = parsedExpression.literal ?                                            // 14252
                  oneTimeLiteralWatchDelegate : oneTimeWatchDelegate;                                                  // 14253
            } else if (parsedExpression.inputs) {                                                                      // 14254
              parsedExpression.$$watchDelegate = inputsWatchDelegate;                                                  // 14255
            }                                                                                                          // 14256
            cache[cacheKey] = parsedExpression;                                                                        // 14257
          }                                                                                                            // 14258
          return addInterceptor(parsedExpression, interceptorFn);                                                      // 14259
                                                                                                                       // 14260
        case 'function':                                                                                               // 14261
          return addInterceptor(exp, interceptorFn);                                                                   // 14262
                                                                                                                       // 14263
        default:                                                                                                       // 14264
          return noop;                                                                                                 // 14265
      }                                                                                                                // 14266
    };                                                                                                                 // 14267
                                                                                                                       // 14268
    function expressionInputDirtyCheck(newValue, oldValueOfValue) {                                                    // 14269
                                                                                                                       // 14270
      if (newValue == null || oldValueOfValue == null) { // null/undefined                                             // 14271
        return newValue === oldValueOfValue;                                                                           // 14272
      }                                                                                                                // 14273
                                                                                                                       // 14274
      if (typeof newValue === 'object') {                                                                              // 14275
                                                                                                                       // 14276
        // attempt to convert the value to a primitive type                                                            // 14277
        // TODO(docs): add a note to docs that by implementing valueOf even objects and arrays can                     // 14278
        //             be cheaply dirty-checked                                                                        // 14279
        newValue = getValueOf(newValue);                                                                               // 14280
                                                                                                                       // 14281
        if (typeof newValue === 'object') {                                                                            // 14282
          // objects/arrays are not supported - deep-watching them would be too expensive                              // 14283
          return false;                                                                                                // 14284
        }                                                                                                              // 14285
                                                                                                                       // 14286
        // fall-through to the primitive equality check                                                                // 14287
      }                                                                                                                // 14288
                                                                                                                       // 14289
      //Primitive or NaN                                                                                               // 14290
      return newValue === oldValueOfValue || (newValue !== newValue && oldValueOfValue !== oldValueOfValue);           // 14291
    }                                                                                                                  // 14292
                                                                                                                       // 14293
    function inputsWatchDelegate(scope, listener, objectEquality, parsedExpression, prettyPrintExpression) {           // 14294
      var inputExpressions = parsedExpression.inputs;                                                                  // 14295
      var lastResult;                                                                                                  // 14296
                                                                                                                       // 14297
      if (inputExpressions.length === 1) {                                                                             // 14298
        var oldInputValueOf = expressionInputDirtyCheck; // init to something unique so that equals check fails        // 14299
        inputExpressions = inputExpressions[0];                                                                        // 14300
        return scope.$watch(function expressionInputWatch(scope) {                                                     // 14301
          var newInputValue = inputExpressions(scope);                                                                 // 14302
          if (!expressionInputDirtyCheck(newInputValue, oldInputValueOf)) {                                            // 14303
            lastResult = parsedExpression(scope, undefined, undefined, [newInputValue]);                               // 14304
            oldInputValueOf = newInputValue && getValueOf(newInputValue);                                              // 14305
          }                                                                                                            // 14306
          return lastResult;                                                                                           // 14307
        }, listener, objectEquality, prettyPrintExpression);                                                           // 14308
      }                                                                                                                // 14309
                                                                                                                       // 14310
      var oldInputValueOfValues = [];                                                                                  // 14311
      var oldInputValues = [];                                                                                         // 14312
      for (var i = 0, ii = inputExpressions.length; i < ii; i++) {                                                     // 14313
        oldInputValueOfValues[i] = expressionInputDirtyCheck; // init to something unique so that equals check fails   // 14314
        oldInputValues[i] = null;                                                                                      // 14315
      }                                                                                                                // 14316
                                                                                                                       // 14317
      return scope.$watch(function expressionInputsWatch(scope) {                                                      // 14318
        var changed = false;                                                                                           // 14319
                                                                                                                       // 14320
        for (var i = 0, ii = inputExpressions.length; i < ii; i++) {                                                   // 14321
          var newInputValue = inputExpressions[i](scope);                                                              // 14322
          if (changed || (changed = !expressionInputDirtyCheck(newInputValue, oldInputValueOfValues[i]))) {            // 14323
            oldInputValues[i] = newInputValue;                                                                         // 14324
            oldInputValueOfValues[i] = newInputValue && getValueOf(newInputValue);                                     // 14325
          }                                                                                                            // 14326
        }                                                                                                              // 14327
                                                                                                                       // 14328
        if (changed) {                                                                                                 // 14329
          lastResult = parsedExpression(scope, undefined, undefined, oldInputValues);                                  // 14330
        }                                                                                                              // 14331
                                                                                                                       // 14332
        return lastResult;                                                                                             // 14333
      }, listener, objectEquality, prettyPrintExpression);                                                             // 14334
    }                                                                                                                  // 14335
                                                                                                                       // 14336
    function oneTimeWatchDelegate(scope, listener, objectEquality, parsedExpression) {                                 // 14337
      var unwatch, lastValue;                                                                                          // 14338
      return unwatch = scope.$watch(function oneTimeWatch(scope) {                                                     // 14339
        return parsedExpression(scope);                                                                                // 14340
      }, function oneTimeListener(value, old, scope) {                                                                 // 14341
        lastValue = value;                                                                                             // 14342
        if (isFunction(listener)) {                                                                                    // 14343
          listener.apply(this, arguments);                                                                             // 14344
        }                                                                                                              // 14345
        if (isDefined(value)) {                                                                                        // 14346
          scope.$$postDigest(function() {                                                                              // 14347
            if (isDefined(lastValue)) {                                                                                // 14348
              unwatch();                                                                                               // 14349
            }                                                                                                          // 14350
          });                                                                                                          // 14351
        }                                                                                                              // 14352
      }, objectEquality);                                                                                              // 14353
    }                                                                                                                  // 14354
                                                                                                                       // 14355
    function oneTimeLiteralWatchDelegate(scope, listener, objectEquality, parsedExpression) {                          // 14356
      var unwatch, lastValue;                                                                                          // 14357
      return unwatch = scope.$watch(function oneTimeWatch(scope) {                                                     // 14358
        return parsedExpression(scope);                                                                                // 14359
      }, function oneTimeListener(value, old, scope) {                                                                 // 14360
        lastValue = value;                                                                                             // 14361
        if (isFunction(listener)) {                                                                                    // 14362
          listener.call(this, value, old, scope);                                                                      // 14363
        }                                                                                                              // 14364
        if (isAllDefined(value)) {                                                                                     // 14365
          scope.$$postDigest(function() {                                                                              // 14366
            if (isAllDefined(lastValue)) unwatch();                                                                    // 14367
          });                                                                                                          // 14368
        }                                                                                                              // 14369
      }, objectEquality);                                                                                              // 14370
                                                                                                                       // 14371
      function isAllDefined(value) {                                                                                   // 14372
        var allDefined = true;                                                                                         // 14373
        forEach(value, function(val) {                                                                                 // 14374
          if (!isDefined(val)) allDefined = false;                                                                     // 14375
        });                                                                                                            // 14376
        return allDefined;                                                                                             // 14377
      }                                                                                                                // 14378
    }                                                                                                                  // 14379
                                                                                                                       // 14380
    function constantWatchDelegate(scope, listener, objectEquality, parsedExpression) {                                // 14381
      var unwatch;                                                                                                     // 14382
      return unwatch = scope.$watch(function constantWatch(scope) {                                                    // 14383
        return parsedExpression(scope);                                                                                // 14384
      }, function constantListener(value, old, scope) {                                                                // 14385
        if (isFunction(listener)) {                                                                                    // 14386
          listener.apply(this, arguments);                                                                             // 14387
        }                                                                                                              // 14388
        unwatch();                                                                                                     // 14389
      }, objectEquality);                                                                                              // 14390
    }                                                                                                                  // 14391
                                                                                                                       // 14392
    function addInterceptor(parsedExpression, interceptorFn) {                                                         // 14393
      if (!interceptorFn) return parsedExpression;                                                                     // 14394
      var watchDelegate = parsedExpression.$$watchDelegate;                                                            // 14395
                                                                                                                       // 14396
      var regularWatch =                                                                                               // 14397
          watchDelegate !== oneTimeLiteralWatchDelegate &&                                                             // 14398
          watchDelegate !== oneTimeWatchDelegate;                                                                      // 14399
                                                                                                                       // 14400
      var fn = regularWatch ? function regularInterceptedExpression(scope, locals, assign, inputs) {                   // 14401
        var value = parsedExpression(scope, locals, assign, inputs);                                                   // 14402
        return interceptorFn(value, scope, locals);                                                                    // 14403
      } : function oneTimeInterceptedExpression(scope, locals, assign, inputs) {                                       // 14404
        var value = parsedExpression(scope, locals, assign, inputs);                                                   // 14405
        var result = interceptorFn(value, scope, locals);                                                              // 14406
        // we only return the interceptor's result if the                                                              // 14407
        // initial value is defined (for bind-once)                                                                    // 14408
        return isDefined(value) ? result : value;                                                                      // 14409
      };                                                                                                               // 14410
                                                                                                                       // 14411
      // Propagate $$watchDelegates other then inputsWatchDelegate                                                     // 14412
      if (parsedExpression.$$watchDelegate &&                                                                          // 14413
          parsedExpression.$$watchDelegate !== inputsWatchDelegate) {                                                  // 14414
        fn.$$watchDelegate = parsedExpression.$$watchDelegate;                                                         // 14415
      } else if (!interceptorFn.$stateful) {                                                                           // 14416
        // If there is an interceptor, but no watchDelegate then treat the interceptor like                            // 14417
        // we treat filters - it is assumed to be a pure function unless flagged with $stateful                        // 14418
        fn.$$watchDelegate = inputsWatchDelegate;                                                                      // 14419
        fn.inputs = parsedExpression.inputs ? parsedExpression.inputs : [parsedExpression];                            // 14420
      }                                                                                                                // 14421
                                                                                                                       // 14422
      return fn;                                                                                                       // 14423
    }                                                                                                                  // 14424
  }];                                                                                                                  // 14425
}                                                                                                                      // 14426
                                                                                                                       // 14427
/**                                                                                                                    // 14428
 * @ngdoc service                                                                                                      // 14429
 * @name $q                                                                                                            // 14430
 * @requires $rootScope                                                                                                // 14431
 *                                                                                                                     // 14432
 * @description                                                                                                        // 14433
 * A service that helps you run functions asynchronously, and use their return values (or exceptions)                  // 14434
 * when they are done processing.                                                                                      // 14435
 *                                                                                                                     // 14436
 * This is an implementation of promises/deferred objects inspired by                                                  // 14437
 * [Kris Kowal's Q](https://github.com/kriskowal/q).                                                                   // 14438
 *                                                                                                                     // 14439
 * $q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred                 // 14440
 * implementations, and the other which resembles ES6 promises to some degree.                                         // 14441
 *                                                                                                                     // 14442
 * # $q constructor                                                                                                    // 14443
 *                                                                                                                     // 14444
 * The streamlined ES6 style promise is essentially just using $q as a constructor which takes a `resolver`            // 14445
 * function as the first argument. This is similar to the native Promise implementation from ES6 Harmony,              // 14446
 * see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).                // 14447
 *                                                                                                                     // 14448
 * While the constructor-style use is supported, not all of the supporting methods from ES6 Harmony promises are       // 14449
 * available yet.                                                                                                      // 14450
 *                                                                                                                     // 14451
 * It can be used like so:                                                                                             // 14452
 *                                                                                                                     // 14453
 * ```js                                                                                                               // 14454
 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`                               // 14455
 *   // are available in the current lexical scope (they could have been injected or passed in).                       // 14456
 *                                                                                                                     // 14457
 *   function asyncGreet(name) {                                                                                       // 14458
 *     // perform some asynchronous operation, resolve or reject the promise when appropriate.                         // 14459
 *     return $q(function(resolve, reject) {                                                                           // 14460
 *       setTimeout(function() {                                                                                       // 14461
 *         if (okToGreet(name)) {                                                                                      // 14462
 *           resolve('Hello, ' + name + '!');                                                                          // 14463
 *         } else {                                                                                                    // 14464
 *           reject('Greeting ' + name + ' is not allowed.');                                                          // 14465
 *         }                                                                                                           // 14466
 *       }, 1000);                                                                                                     // 14467
 *     });                                                                                                             // 14468
 *   }                                                                                                                 // 14469
 *                                                                                                                     // 14470
 *   var promise = asyncGreet('Robin Hood');                                                                           // 14471
 *   promise.then(function(greeting) {                                                                                 // 14472
 *     alert('Success: ' + greeting);                                                                                  // 14473
 *   }, function(reason) {                                                                                             // 14474
 *     alert('Failed: ' + reason);                                                                                     // 14475
 *   });                                                                                                               // 14476
 * ```                                                                                                                 // 14477
 *                                                                                                                     // 14478
 * Note: progress/notify callbacks are not currently supported via the ES6-style interface.                            // 14479
 *                                                                                                                     // 14480
 * However, the more traditional CommonJS-style usage is still available, and documented below.                        // 14481
 *                                                                                                                     // 14482
 * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an                   // 14483
 * interface for interacting with an object that represents the result of an action that is                            // 14484
 * performed asynchronously, and may or may not be finished at any given point in time.                                // 14485
 *                                                                                                                     // 14486
 * From the perspective of dealing with error handling, deferred and promise APIs are to                               // 14487
 * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.                   // 14488
 *                                                                                                                     // 14489
 * ```js                                                                                                               // 14490
 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`                               // 14491
 *   // are available in the current lexical scope (they could have been injected or passed in).                       // 14492
 *                                                                                                                     // 14493
 *   function asyncGreet(name) {                                                                                       // 14494
 *     var deferred = $q.defer();                                                                                      // 14495
 *                                                                                                                     // 14496
 *     setTimeout(function() {                                                                                         // 14497
 *       deferred.notify('About to greet ' + name + '.');                                                              // 14498
 *                                                                                                                     // 14499
 *       if (okToGreet(name)) {                                                                                        // 14500
 *         deferred.resolve('Hello, ' + name + '!');                                                                   // 14501
 *       } else {                                                                                                      // 14502
 *         deferred.reject('Greeting ' + name + ' is not allowed.');                                                   // 14503
 *       }                                                                                                             // 14504
 *     }, 1000);                                                                                                       // 14505
 *                                                                                                                     // 14506
 *     return deferred.promise;                                                                                        // 14507
 *   }                                                                                                                 // 14508
 *                                                                                                                     // 14509
 *   var promise = asyncGreet('Robin Hood');                                                                           // 14510
 *   promise.then(function(greeting) {                                                                                 // 14511
 *     alert('Success: ' + greeting);                                                                                  // 14512
 *   }, function(reason) {                                                                                             // 14513
 *     alert('Failed: ' + reason);                                                                                     // 14514
 *   }, function(update) {                                                                                             // 14515
 *     alert('Got notification: ' + update);                                                                           // 14516
 *   });                                                                                                               // 14517
 * ```                                                                                                                 // 14518
 *                                                                                                                     // 14519
 * At first it might not be obvious why this extra complexity is worth the trouble. The payoff                         // 14520
 * comes in the way of guarantees that promise and deferred APIs make, see                                             // 14521
 * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.                                      // 14522
 *                                                                                                                     // 14523
 * Additionally the promise api allows for composition that is very hard to do with the                                // 14524
 * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.                     // 14525
 * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the                    // 14526
 * section on serial or parallel joining of promises.                                                                  // 14527
 *                                                                                                                     // 14528
 * # The Deferred API                                                                                                  // 14529
 *                                                                                                                     // 14530
 * A new instance of deferred is constructed by calling `$q.defer()`.                                                  // 14531
 *                                                                                                                     // 14532
 * The purpose of the deferred object is to expose the associated Promise instance as well as APIs                     // 14533
 * that can be used for signaling the successful or unsuccessful completion, as well as the status                     // 14534
 * of the task.                                                                                                        // 14535
 *                                                                                                                     // 14536
 * **Methods**                                                                                                         // 14537
 *                                                                                                                     // 14538
 * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection                     // 14539
 *   constructed via `$q.reject`, the promise will be rejected instead.                                                // 14540
 * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to                           // 14541
 *   resolving it with a rejection constructed via `$q.reject`.                                                        // 14542
 * - `notify(value)` - provides updates on the status of the promise's execution. This may be called                   // 14543
 *   multiple times before the promise is either resolved or rejected.                                                 // 14544
 *                                                                                                                     // 14545
 * **Properties**                                                                                                      // 14546
 *                                                                                                                     // 14547
 * - promise – `{Promise}` – promise object associated with this deferred.                                             // 14548
 *                                                                                                                     // 14549
 *                                                                                                                     // 14550
 * # The Promise API                                                                                                   // 14551
 *                                                                                                                     // 14552
 * A new promise instance is created when a deferred instance is created and can be retrieved by                       // 14553
 * calling `deferred.promise`.                                                                                         // 14554
 *                                                                                                                     // 14555
 * The purpose of the promise object is to allow for interested parties to get access to the result                    // 14556
 * of the deferred task when it completes.                                                                             // 14557
 *                                                                                                                     // 14558
 * **Methods**                                                                                                         // 14559
 *                                                                                                                     // 14560
 * - `then(successCallback, errorCallback, notifyCallback)` – regardless of when the promise was or                    // 14561
 *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously                   // 14562
 *   as soon as the result is available. The callbacks are called with a single argument: the result                   // 14563
 *   or rejection reason. Additionally, the notify callback may be called zero or more times to                        // 14564
 *   provide a progress indication, before the promise is resolved or rejected.                                        // 14565
 *                                                                                                                     // 14566
 *   This method *returns a new promise* which is resolved or rejected via the return value of the                     // 14567
 *   `successCallback`, `errorCallback` (unless that value is a promise, in which case it is resolved                  // 14568
 *   with the value which is resolved in that promise using                                                            // 14569
 *   [promise chaining](http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promises-queues)).                    // 14570
 *   It also notifies via the return value of the `notifyCallback` method. The promise cannot be                       // 14571
 *   resolved or rejected from the notifyCallback method.                                                              // 14572
 *                                                                                                                     // 14573
 * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`                                        // 14574
 *                                                                                                                     // 14575
 * - `finally(callback, notifyCallback)` – allows you to observe either the fulfillment or rejection of a promise,     // 14576
 *   but to do so without modifying the final value. This is useful to release resources or do some                    // 14577
 *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full                        // 14578
 *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for                      // 14579
 *   more information.                                                                                                 // 14580
 *                                                                                                                     // 14581
 * # Chaining promises                                                                                                 // 14582
 *                                                                                                                     // 14583
 * Because calling the `then` method of a promise returns a new derived promise, it is easily                          // 14584
 * possible to create a chain of promises:                                                                             // 14585
 *                                                                                                                     // 14586
 * ```js                                                                                                               // 14587
 *   promiseB = promiseA.then(function(result) {                                                                       // 14588
 *     return result + 1;                                                                                              // 14589
 *   });                                                                                                               // 14590
 *                                                                                                                     // 14591
 *   // promiseB will be resolved immediately after promiseA is resolved and its value                                 // 14592
 *   // will be the result of promiseA incremented by 1                                                                // 14593
 * ```                                                                                                                 // 14594
 *                                                                                                                     // 14595
 * It is possible to create chains of any length and since a promise can be resolved with another                      // 14596
 * promise (which will defer its resolution further), it is possible to pause/defer resolution of                      // 14597
 * the promises at any point in the chain. This makes it possible to implement powerful APIs like                      // 14598
 * $http's response interceptors.                                                                                      // 14599
 *                                                                                                                     // 14600
 *                                                                                                                     // 14601
 * # Differences between Kris Kowal's Q and $q                                                                         // 14602
 *                                                                                                                     // 14603
 *  There are two main differences:                                                                                    // 14604
 *                                                                                                                     // 14605
 * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation                                     // 14606
 *   mechanism in angular, which means faster propagation of resolution or rejection into your                         // 14607
 *   models and avoiding unnecessary browser repaints, which would result in flickering UI.                            // 14608
 * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains                     // 14609
 *   all the important functionality needed for common async tasks.                                                    // 14610
 *                                                                                                                     // 14611
 *  # Testing                                                                                                          // 14612
 *                                                                                                                     // 14613
 *  ```js                                                                                                              // 14614
 *    it('should simulate promise', inject(function($q, $rootScope) {                                                  // 14615
 *      var deferred = $q.defer();                                                                                     // 14616
 *      var promise = deferred.promise;                                                                                // 14617
 *      var resolvedValue;                                                                                             // 14618
 *                                                                                                                     // 14619
 *      promise.then(function(value) { resolvedValue = value; });                                                      // 14620
 *      expect(resolvedValue).toBeUndefined();                                                                         // 14621
 *                                                                                                                     // 14622
 *      // Simulate resolving of promise                                                                               // 14623
 *      deferred.resolve(123);                                                                                         // 14624
 *      // Note that the 'then' function does not get called synchronously.                                            // 14625
 *      // This is because we want the promise API to always be async, whether or not                                  // 14626
 *      // it got called synchronously or asynchronously.                                                              // 14627
 *      expect(resolvedValue).toBeUndefined();                                                                         // 14628
 *                                                                                                                     // 14629
 *      // Propagate promise resolution to 'then' functions using $apply().                                            // 14630
 *      $rootScope.$apply();                                                                                           // 14631
 *      expect(resolvedValue).toEqual(123);                                                                            // 14632
 *    }));                                                                                                             // 14633
 *  ```                                                                                                                // 14634
 *                                                                                                                     // 14635
 * @param {function(function, function)} resolver Function which is responsible for resolving or                       // 14636
 *   rejecting the newly created promise. The first parameter is a function which resolves the                         // 14637
 *   promise, the second parameter is a function which rejects the promise.                                            // 14638
 *                                                                                                                     // 14639
 * @returns {Promise} The newly created promise.                                                                       // 14640
 */                                                                                                                    // 14641
function $QProvider() {                                                                                                // 14642
                                                                                                                       // 14643
  this.$get = ['$rootScope', '$exceptionHandler', function($rootScope, $exceptionHandler) {                            // 14644
    return qFactory(function(callback) {                                                                               // 14645
      $rootScope.$evalAsync(callback);                                                                                 // 14646
    }, $exceptionHandler);                                                                                             // 14647
  }];                                                                                                                  // 14648
}                                                                                                                      // 14649
                                                                                                                       // 14650
function $$QProvider() {                                                                                               // 14651
  this.$get = ['$browser', '$exceptionHandler', function($browser, $exceptionHandler) {                                // 14652
    return qFactory(function(callback) {                                                                               // 14653
      $browser.defer(callback);                                                                                        // 14654
    }, $exceptionHandler);                                                                                             // 14655
  }];                                                                                                                  // 14656
}                                                                                                                      // 14657
                                                                                                                       // 14658
/**                                                                                                                    // 14659
 * Constructs a promise manager.                                                                                       // 14660
 *                                                                                                                     // 14661
 * @param {function(function)} nextTick Function for executing functions in the next turn.                             // 14662
 * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for                   // 14663
 *     debugging purposes.                                                                                             // 14664
 * @returns {object} Promise manager.                                                                                  // 14665
 */                                                                                                                    // 14666
function qFactory(nextTick, exceptionHandler) {                                                                        // 14667
  var $qMinErr = minErr('$q', TypeError);                                                                              // 14668
  function callOnce(self, resolveFn, rejectFn) {                                                                       // 14669
    var called = false;                                                                                                // 14670
    function wrap(fn) {                                                                                                // 14671
      return function(value) {                                                                                         // 14672
        if (called) return;                                                                                            // 14673
        called = true;                                                                                                 // 14674
        fn.call(self, value);                                                                                          // 14675
      };                                                                                                               // 14676
    }                                                                                                                  // 14677
                                                                                                                       // 14678
    return [wrap(resolveFn), wrap(rejectFn)];                                                                          // 14679
  }                                                                                                                    // 14680
                                                                                                                       // 14681
  /**                                                                                                                  // 14682
   * @ngdoc method                                                                                                     // 14683
   * @name ng.$q#defer                                                                                                 // 14684
   * @kind function                                                                                                    // 14685
   *                                                                                                                   // 14686
   * @description                                                                                                      // 14687
   * Creates a `Deferred` object which represents a task which will finish in the future.                              // 14688
   *                                                                                                                   // 14689
   * @returns {Deferred} Returns a new instance of deferred.                                                           // 14690
   */                                                                                                                  // 14691
  var defer = function() {                                                                                             // 14692
    return new Deferred();                                                                                             // 14693
  };                                                                                                                   // 14694
                                                                                                                       // 14695
  function Promise() {                                                                                                 // 14696
    this.$$state = { status: 0 };                                                                                      // 14697
  }                                                                                                                    // 14698
                                                                                                                       // 14699
  extend(Promise.prototype, {                                                                                          // 14700
    then: function(onFulfilled, onRejected, progressBack) {                                                            // 14701
      if (isUndefined(onFulfilled) && isUndefined(onRejected) && isUndefined(progressBack)) {                          // 14702
        return this;                                                                                                   // 14703
      }                                                                                                                // 14704
      var result = new Deferred();                                                                                     // 14705
                                                                                                                       // 14706
      this.$$state.pending = this.$$state.pending || [];                                                               // 14707
      this.$$state.pending.push([result, onFulfilled, onRejected, progressBack]);                                      // 14708
      if (this.$$state.status > 0) scheduleProcessQueue(this.$$state);                                                 // 14709
                                                                                                                       // 14710
      return result.promise;                                                                                           // 14711
    },                                                                                                                 // 14712
                                                                                                                       // 14713
    "catch": function(callback) {                                                                                      // 14714
      return this.then(null, callback);                                                                                // 14715
    },                                                                                                                 // 14716
                                                                                                                       // 14717
    "finally": function(callback, progressBack) {                                                                      // 14718
      return this.then(function(value) {                                                                               // 14719
        return handleCallback(value, true, callback);                                                                  // 14720
      }, function(error) {                                                                                             // 14721
        return handleCallback(error, false, callback);                                                                 // 14722
      }, progressBack);                                                                                                // 14723
    }                                                                                                                  // 14724
  });                                                                                                                  // 14725
                                                                                                                       // 14726
  //Faster, more basic than angular.bind http://jsperf.com/angular-bind-vs-custom-vs-native                            // 14727
  function simpleBind(context, fn) {                                                                                   // 14728
    return function(value) {                                                                                           // 14729
      fn.call(context, value);                                                                                         // 14730
    };                                                                                                                 // 14731
  }                                                                                                                    // 14732
                                                                                                                       // 14733
  function processQueue(state) {                                                                                       // 14734
    var fn, deferred, pending;                                                                                         // 14735
                                                                                                                       // 14736
    pending = state.pending;                                                                                           // 14737
    state.processScheduled = false;                                                                                    // 14738
    state.pending = undefined;                                                                                         // 14739
    for (var i = 0, ii = pending.length; i < ii; ++i) {                                                                // 14740
      deferred = pending[i][0];                                                                                        // 14741
      fn = pending[i][state.status];                                                                                   // 14742
      try {                                                                                                            // 14743
        if (isFunction(fn)) {                                                                                          // 14744
          deferred.resolve(fn(state.value));                                                                           // 14745
        } else if (state.status === 1) {                                                                               // 14746
          deferred.resolve(state.value);                                                                               // 14747
        } else {                                                                                                       // 14748
          deferred.reject(state.value);                                                                                // 14749
        }                                                                                                              // 14750
      } catch (e) {                                                                                                    // 14751
        deferred.reject(e);                                                                                            // 14752
        exceptionHandler(e);                                                                                           // 14753
      }                                                                                                                // 14754
    }                                                                                                                  // 14755
  }                                                                                                                    // 14756
                                                                                                                       // 14757
  function scheduleProcessQueue(state) {                                                                               // 14758
    if (state.processScheduled || !state.pending) return;                                                              // 14759
    state.processScheduled = true;                                                                                     // 14760
    nextTick(function() { processQueue(state); });                                                                     // 14761
  }                                                                                                                    // 14762
                                                                                                                       // 14763
  function Deferred() {                                                                                                // 14764
    this.promise = new Promise();                                                                                      // 14765
    //Necessary to support unbound execution :/                                                                        // 14766
    this.resolve = simpleBind(this, this.resolve);                                                                     // 14767
    this.reject = simpleBind(this, this.reject);                                                                       // 14768
    this.notify = simpleBind(this, this.notify);                                                                       // 14769
  }                                                                                                                    // 14770
                                                                                                                       // 14771
  extend(Deferred.prototype, {                                                                                         // 14772
    resolve: function(val) {                                                                                           // 14773
      if (this.promise.$$state.status) return;                                                                         // 14774
      if (val === this.promise) {                                                                                      // 14775
        this.$$reject($qMinErr(                                                                                        // 14776
          'qcycle',                                                                                                    // 14777
          "Expected promise to be resolved with value other than itself '{0}'",                                        // 14778
          val));                                                                                                       // 14779
      } else {                                                                                                         // 14780
        this.$$resolve(val);                                                                                           // 14781
      }                                                                                                                // 14782
                                                                                                                       // 14783
    },                                                                                                                 // 14784
                                                                                                                       // 14785
    $$resolve: function(val) {                                                                                         // 14786
      var then, fns;                                                                                                   // 14787
                                                                                                                       // 14788
      fns = callOnce(this, this.$$resolve, this.$$reject);                                                             // 14789
      try {                                                                                                            // 14790
        if ((isObject(val) || isFunction(val))) then = val && val.then;                                                // 14791
        if (isFunction(then)) {                                                                                        // 14792
          this.promise.$$state.status = -1;                                                                            // 14793
          then.call(val, fns[0], fns[1], this.notify);                                                                 // 14794
        } else {                                                                                                       // 14795
          this.promise.$$state.value = val;                                                                            // 14796
          this.promise.$$state.status = 1;                                                                             // 14797
          scheduleProcessQueue(this.promise.$$state);                                                                  // 14798
        }                                                                                                              // 14799
      } catch (e) {                                                                                                    // 14800
        fns[1](e);                                                                                                     // 14801
        exceptionHandler(e);                                                                                           // 14802
      }                                                                                                                // 14803
    },                                                                                                                 // 14804
                                                                                                                       // 14805
    reject: function(reason) {                                                                                         // 14806
      if (this.promise.$$state.status) return;                                                                         // 14807
      this.$$reject(reason);                                                                                           // 14808
    },                                                                                                                 // 14809
                                                                                                                       // 14810
    $$reject: function(reason) {                                                                                       // 14811
      this.promise.$$state.value = reason;                                                                             // 14812
      this.promise.$$state.status = 2;                                                                                 // 14813
      scheduleProcessQueue(this.promise.$$state);                                                                      // 14814
    },                                                                                                                 // 14815
                                                                                                                       // 14816
    notify: function(progress) {                                                                                       // 14817
      var callbacks = this.promise.$$state.pending;                                                                    // 14818
                                                                                                                       // 14819
      if ((this.promise.$$state.status <= 0) && callbacks && callbacks.length) {                                       // 14820
        nextTick(function() {                                                                                          // 14821
          var callback, result;                                                                                        // 14822
          for (var i = 0, ii = callbacks.length; i < ii; i++) {                                                        // 14823
            result = callbacks[i][0];                                                                                  // 14824
            callback = callbacks[i][3];                                                                                // 14825
            try {                                                                                                      // 14826
              result.notify(isFunction(callback) ? callback(progress) : progress);                                     // 14827
            } catch (e) {                                                                                              // 14828
              exceptionHandler(e);                                                                                     // 14829
            }                                                                                                          // 14830
          }                                                                                                            // 14831
        });                                                                                                            // 14832
      }                                                                                                                // 14833
    }                                                                                                                  // 14834
  });                                                                                                                  // 14835
                                                                                                                       // 14836
  /**                                                                                                                  // 14837
   * @ngdoc method                                                                                                     // 14838
   * @name $q#reject                                                                                                   // 14839
   * @kind function                                                                                                    // 14840
   *                                                                                                                   // 14841
   * @description                                                                                                      // 14842
   * Creates a promise that is resolved as rejected with the specified `reason`. This api should be                    // 14843
   * used to forward rejection in a chain of promises. If you are dealing with the last promise in                     // 14844
   * a promise chain, you don't need to worry about it.                                                                // 14845
   *                                                                                                                   // 14846
   * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of                           // 14847
   * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via                   // 14848
   * a promise error callback and you want to forward the error to the promise derived from the                        // 14849
   * current promise, you have to "rethrow" the error by returning a rejection constructed via                         // 14850
   * `reject`.                                                                                                         // 14851
   *                                                                                                                   // 14852
   * ```js                                                                                                             // 14853
   *   promiseB = promiseA.then(function(result) {                                                                     // 14854
   *     // success: do something and resolve promiseB                                                                 // 14855
   *     //          with the old or a new result                                                                      // 14856
   *     return result;                                                                                                // 14857
   *   }, function(reason) {                                                                                           // 14858
   *     // error: handle the error if possible and                                                                    // 14859
   *     //        resolve promiseB with newPromiseOrValue,                                                            // 14860
   *     //        otherwise forward the rejection to promiseB                                                         // 14861
   *     if (canHandle(reason)) {                                                                                      // 14862
   *      // handle the error and recover                                                                              // 14863
   *      return newPromiseOrValue;                                                                                    // 14864
   *     }                                                                                                             // 14865
   *     return $q.reject(reason);                                                                                     // 14866
   *   });                                                                                                             // 14867
   * ```                                                                                                               // 14868
   *                                                                                                                   // 14869
   * @param {*} reason Constant, message, exception or an object representing the rejection reason.                    // 14870
   * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.                     // 14871
   */                                                                                                                  // 14872
  var reject = function(reason) {                                                                                      // 14873
    var result = new Deferred();                                                                                       // 14874
    result.reject(reason);                                                                                             // 14875
    return result.promise;                                                                                             // 14876
  };                                                                                                                   // 14877
                                                                                                                       // 14878
  var makePromise = function makePromise(value, resolved) {                                                            // 14879
    var result = new Deferred();                                                                                       // 14880
    if (resolved) {                                                                                                    // 14881
      result.resolve(value);                                                                                           // 14882
    } else {                                                                                                           // 14883
      result.reject(value);                                                                                            // 14884
    }                                                                                                                  // 14885
    return result.promise;                                                                                             // 14886
  };                                                                                                                   // 14887
                                                                                                                       // 14888
  var handleCallback = function handleCallback(value, isResolved, callback) {                                          // 14889
    var callbackOutput = null;                                                                                         // 14890
    try {                                                                                                              // 14891
      if (isFunction(callback)) callbackOutput = callback();                                                           // 14892
    } catch (e) {                                                                                                      // 14893
      return makePromise(e, false);                                                                                    // 14894
    }                                                                                                                  // 14895
    if (isPromiseLike(callbackOutput)) {                                                                               // 14896
      return callbackOutput.then(function() {                                                                          // 14897
        return makePromise(value, isResolved);                                                                         // 14898
      }, function(error) {                                                                                             // 14899
        return makePromise(error, false);                                                                              // 14900
      });                                                                                                              // 14901
    } else {                                                                                                           // 14902
      return makePromise(value, isResolved);                                                                           // 14903
    }                                                                                                                  // 14904
  };                                                                                                                   // 14905
                                                                                                                       // 14906
  /**                                                                                                                  // 14907
   * @ngdoc method                                                                                                     // 14908
   * @name $q#when                                                                                                     // 14909
   * @kind function                                                                                                    // 14910
   *                                                                                                                   // 14911
   * @description                                                                                                      // 14912
   * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.                       // 14913
   * This is useful when you are dealing with an object that might or might not be a promise, or if                    // 14914
   * the promise comes from a source that can't be trusted.                                                            // 14915
   *                                                                                                                   // 14916
   * @param {*} value Value or a promise                                                                               // 14917
   * @param {Function=} successCallback                                                                                // 14918
   * @param {Function=} errorCallback                                                                                  // 14919
   * @param {Function=} progressCallback                                                                               // 14920
   * @returns {Promise} Returns a promise of the passed value or promise                                               // 14921
   */                                                                                                                  // 14922
                                                                                                                       // 14923
                                                                                                                       // 14924
  var when = function(value, callback, errback, progressBack) {                                                        // 14925
    var result = new Deferred();                                                                                       // 14926
    result.resolve(value);                                                                                             // 14927
    return result.promise.then(callback, errback, progressBack);                                                       // 14928
  };                                                                                                                   // 14929
                                                                                                                       // 14930
  /**                                                                                                                  // 14931
   * @ngdoc method                                                                                                     // 14932
   * @name $q#resolve                                                                                                  // 14933
   * @kind function                                                                                                    // 14934
   *                                                                                                                   // 14935
   * @description                                                                                                      // 14936
   * Alias of {@link ng.$q#when when} to maintain naming consistency with ES6.                                         // 14937
   *                                                                                                                   // 14938
   * @param {*} value Value or a promise                                                                               // 14939
   * @param {Function=} successCallback                                                                                // 14940
   * @param {Function=} errorCallback                                                                                  // 14941
   * @param {Function=} progressCallback                                                                               // 14942
   * @returns {Promise} Returns a promise of the passed value or promise                                               // 14943
   */                                                                                                                  // 14944
  var resolve = when;                                                                                                  // 14945
                                                                                                                       // 14946
  /**                                                                                                                  // 14947
   * @ngdoc method                                                                                                     // 14948
   * @name $q#all                                                                                                      // 14949
   * @kind function                                                                                                    // 14950
   *                                                                                                                   // 14951
   * @description                                                                                                      // 14952
   * Combines multiple promises into a single promise that is resolved when all of the input                           // 14953
   * promises are resolved.                                                                                            // 14954
   *                                                                                                                   // 14955
   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.                                  // 14956
   * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,                   // 14957
   *   each value corresponding to the promise at the same index/key in the `promises` array/hash.                     // 14958
   *   If any of the promises is resolved with a rejection, this resulting promise will be rejected                    // 14959
   *   with the same rejection value.                                                                                  // 14960
   */                                                                                                                  // 14961
                                                                                                                       // 14962
  function all(promises) {                                                                                             // 14963
    var deferred = new Deferred(),                                                                                     // 14964
        counter = 0,                                                                                                   // 14965
        results = isArray(promises) ? [] : {};                                                                         // 14966
                                                                                                                       // 14967
    forEach(promises, function(promise, key) {                                                                         // 14968
      counter++;                                                                                                       // 14969
      when(promise).then(function(value) {                                                                             // 14970
        if (results.hasOwnProperty(key)) return;                                                                       // 14971
        results[key] = value;                                                                                          // 14972
        if (!(--counter)) deferred.resolve(results);                                                                   // 14973
      }, function(reason) {                                                                                            // 14974
        if (results.hasOwnProperty(key)) return;                                                                       // 14975
        deferred.reject(reason);                                                                                       // 14976
      });                                                                                                              // 14977
    });                                                                                                                // 14978
                                                                                                                       // 14979
    if (counter === 0) {                                                                                               // 14980
      deferred.resolve(results);                                                                                       // 14981
    }                                                                                                                  // 14982
                                                                                                                       // 14983
    return deferred.promise;                                                                                           // 14984
  }                                                                                                                    // 14985
                                                                                                                       // 14986
  var $Q = function Q(resolver) {                                                                                      // 14987
    if (!isFunction(resolver)) {                                                                                       // 14988
      throw $qMinErr('norslvr', "Expected resolverFn, got '{0}'", resolver);                                           // 14989
    }                                                                                                                  // 14990
                                                                                                                       // 14991
    if (!(this instanceof Q)) {                                                                                        // 14992
      // More useful when $Q is the Promise itself.                                                                    // 14993
      return new Q(resolver);                                                                                          // 14994
    }                                                                                                                  // 14995
                                                                                                                       // 14996
    var deferred = new Deferred();                                                                                     // 14997
                                                                                                                       // 14998
    function resolveFn(value) {                                                                                        // 14999
      deferred.resolve(value);                                                                                         // 15000
    }                                                                                                                  // 15001
                                                                                                                       // 15002
    function rejectFn(reason) {                                                                                        // 15003
      deferred.reject(reason);                                                                                         // 15004
    }                                                                                                                  // 15005
                                                                                                                       // 15006
    resolver(resolveFn, rejectFn);                                                                                     // 15007
                                                                                                                       // 15008
    return deferred.promise;                                                                                           // 15009
  };                                                                                                                   // 15010
                                                                                                                       // 15011
  $Q.defer = defer;                                                                                                    // 15012
  $Q.reject = reject;                                                                                                  // 15013
  $Q.when = when;                                                                                                      // 15014
  $Q.resolve = resolve;                                                                                                // 15015
  $Q.all = all;                                                                                                        // 15016
                                                                                                                       // 15017
  return $Q;                                                                                                           // 15018
}                                                                                                                      // 15019
                                                                                                                       // 15020
function $$RAFProvider() { //rAF                                                                                       // 15021
  this.$get = ['$window', '$timeout', function($window, $timeout) {                                                    // 15022
    var requestAnimationFrame = $window.requestAnimationFrame ||                                                       // 15023
                                $window.webkitRequestAnimationFrame;                                                   // 15024
                                                                                                                       // 15025
    var cancelAnimationFrame = $window.cancelAnimationFrame ||                                                         // 15026
                               $window.webkitCancelAnimationFrame ||                                                   // 15027
                               $window.webkitCancelRequestAnimationFrame;                                              // 15028
                                                                                                                       // 15029
    var rafSupported = !!requestAnimationFrame;                                                                        // 15030
    var raf = rafSupported                                                                                             // 15031
      ? function(fn) {                                                                                                 // 15032
          var id = requestAnimationFrame(fn);                                                                          // 15033
          return function() {                                                                                          // 15034
            cancelAnimationFrame(id);                                                                                  // 15035
          };                                                                                                           // 15036
        }                                                                                                              // 15037
      : function(fn) {                                                                                                 // 15038
          var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666                                                // 15039
          return function() {                                                                                          // 15040
            $timeout.cancel(timer);                                                                                    // 15041
          };                                                                                                           // 15042
        };                                                                                                             // 15043
                                                                                                                       // 15044
    raf.supported = rafSupported;                                                                                      // 15045
                                                                                                                       // 15046
    return raf;                                                                                                        // 15047
  }];                                                                                                                  // 15048
}                                                                                                                      // 15049
                                                                                                                       // 15050
/**                                                                                                                    // 15051
 * DESIGN NOTES                                                                                                        // 15052
 *                                                                                                                     // 15053
 * The design decisions behind the scope are heavily favored for speed and memory consumption.                         // 15054
 *                                                                                                                     // 15055
 * The typical use of scope is to watch the expressions, which most of the time return the same                        // 15056
 * value as last time so we optimize the operation.                                                                    // 15057
 *                                                                                                                     // 15058
 * Closures construction is expensive in terms of speed as well as memory:                                             // 15059
 *   - No closures, instead use prototypical inheritance for API                                                       // 15060
 *   - Internal state needs to be stored on scope directly, which means that private state is                          // 15061
 *     exposed as $$____ properties                                                                                    // 15062
 *                                                                                                                     // 15063
 * Loop operations are optimized by using while(count--) { ... }                                                       // 15064
 *   - this means that in order to keep the same order of execution as addition we have to add                         // 15065
 *     items to the array at the beginning (unshift) instead of at the end (push)                                      // 15066
 *                                                                                                                     // 15067
 * Child scopes are created and removed often                                                                          // 15068
 *   - Using an array would be slow since inserts in middle are expensive so we use linked list                        // 15069
 *                                                                                                                     // 15070
 * There are few watches then a lot of observers. This is why you don't want the observer to be                        // 15071
 * implemented in the same way as watch. Watch requires return of initialization function which                        // 15072
 * are expensive to construct.                                                                                         // 15073
 */                                                                                                                    // 15074
                                                                                                                       // 15075
                                                                                                                       // 15076
/**                                                                                                                    // 15077
 * @ngdoc provider                                                                                                     // 15078
 * @name $rootScopeProvider                                                                                            // 15079
 * @description                                                                                                        // 15080
 *                                                                                                                     // 15081
 * Provider for the $rootScope service.                                                                                // 15082
 */                                                                                                                    // 15083
                                                                                                                       // 15084
/**                                                                                                                    // 15085
 * @ngdoc method                                                                                                       // 15086
 * @name $rootScopeProvider#digestTtl                                                                                  // 15087
 * @description                                                                                                        // 15088
 *                                                                                                                     // 15089
 * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and                    // 15090
 * assuming that the model is unstable.                                                                                // 15091
 *                                                                                                                     // 15092
 * The current default is 10 iterations.                                                                               // 15093
 *                                                                                                                     // 15094
 * In complex applications it's possible that the dependencies between `$watch`s will result in                        // 15095
 * several digest iterations. However if an application needs more than the default 10 digest                          // 15096
 * iterations for its model to stabilize then you should investigate what is causing the model to                      // 15097
 * continuously change during the digest.                                                                              // 15098
 *                                                                                                                     // 15099
 * Increasing the TTL could have performance implications, so you should not change it without                         // 15100
 * proper justification.                                                                                               // 15101
 *                                                                                                                     // 15102
 * @param {number} limit The number of digest iterations.                                                              // 15103
 */                                                                                                                    // 15104
                                                                                                                       // 15105
                                                                                                                       // 15106
/**                                                                                                                    // 15107
 * @ngdoc service                                                                                                      // 15108
 * @name $rootScope                                                                                                    // 15109
 * @description                                                                                                        // 15110
 *                                                                                                                     // 15111
 * Every application has a single root {@link ng.$rootScope.Scope scope}.                                              // 15112
 * All other scopes are descendant scopes of the root scope. Scopes provide separation                                 // 15113
 * between the model and the view, via a mechanism for watching the model for changes.                                 // 15114
 * They also provide an event emission/broadcast and subscription facility. See the                                    // 15115
 * {@link guide/scope developer guide on scopes}.                                                                      // 15116
 */                                                                                                                    // 15117
function $RootScopeProvider() {                                                                                        // 15118
  var TTL = 10;                                                                                                        // 15119
  var $rootScopeMinErr = minErr('$rootScope');                                                                         // 15120
  var lastDirtyWatch = null;                                                                                           // 15121
  var applyAsyncId = null;                                                                                             // 15122
                                                                                                                       // 15123
  this.digestTtl = function(value) {                                                                                   // 15124
    if (arguments.length) {                                                                                            // 15125
      TTL = value;                                                                                                     // 15126
    }                                                                                                                  // 15127
    return TTL;                                                                                                        // 15128
  };                                                                                                                   // 15129
                                                                                                                       // 15130
  function createChildScopeClass(parent) {                                                                             // 15131
    function ChildScope() {                                                                                            // 15132
      this.$$watchers = this.$$nextSibling =                                                                           // 15133
          this.$$childHead = this.$$childTail = null;                                                                  // 15134
      this.$$listeners = {};                                                                                           // 15135
      this.$$listenerCount = {};                                                                                       // 15136
      this.$$watchersCount = 0;                                                                                        // 15137
      this.$id = nextUid();                                                                                            // 15138
      this.$$ChildScope = null;                                                                                        // 15139
    }                                                                                                                  // 15140
    ChildScope.prototype = parent;                                                                                     // 15141
    return ChildScope;                                                                                                 // 15142
  }                                                                                                                    // 15143
                                                                                                                       // 15144
  this.$get = ['$injector', '$exceptionHandler', '$parse', '$browser',                                                 // 15145
      function($injector, $exceptionHandler, $parse, $browser) {                                                       // 15146
                                                                                                                       // 15147
    function destroyChildScope($event) {                                                                               // 15148
        $event.currentScope.$$destroyed = true;                                                                        // 15149
    }                                                                                                                  // 15150
                                                                                                                       // 15151
    /**                                                                                                                // 15152
     * @ngdoc type                                                                                                     // 15153
     * @name $rootScope.Scope                                                                                          // 15154
     *                                                                                                                 // 15155
     * @description                                                                                                    // 15156
     * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the                           // 15157
     * {@link auto.$injector $injector}. Child scopes are created using the                                            // 15158
     * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when                     // 15159
     * compiled HTML template is executed.) See also the {@link guide/scope Scopes guide} for                          // 15160
     * an in-depth introduction and usage examples.                                                                    // 15161
     *                                                                                                                 // 15162
     *                                                                                                                 // 15163
     * # Inheritance                                                                                                   // 15164
     * A scope can inherit from a parent scope, as in this example:                                                    // 15165
     * ```js                                                                                                           // 15166
         var parent = $rootScope;                                                                                      // 15167
         var child = parent.$new();                                                                                    // 15168
                                                                                                                       // 15169
         parent.salutation = "Hello";                                                                                  // 15170
         expect(child.salutation).toEqual('Hello');                                                                    // 15171
                                                                                                                       // 15172
         child.salutation = "Welcome";                                                                                 // 15173
         expect(child.salutation).toEqual('Welcome');                                                                  // 15174
         expect(parent.salutation).toEqual('Hello');                                                                   // 15175
     * ```                                                                                                             // 15176
     *                                                                                                                 // 15177
     * When interacting with `Scope` in tests, additional helper methods are available on the                          // 15178
     * instances of `Scope` type. See {@link ngMock.$rootScope.Scope ngMock Scope} for additional                      // 15179
     * details.                                                                                                        // 15180
     *                                                                                                                 // 15181
     *                                                                                                                 // 15182
     * @param {Object.<string, function()>=} providers Map of service factory which need to be                         // 15183
     *                                       provided for the current scope. Defaults to {@link ng}.                   // 15184
     * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should                      // 15185
     *                              append/override services provided by `providers`. This is handy                    // 15186
     *                              when unit-testing and having the need to override a default                        // 15187
     *                              service.                                                                           // 15188
     * @returns {Object} Newly created scope.                                                                          // 15189
     *                                                                                                                 // 15190
     */                                                                                                                // 15191
    function Scope() {                                                                                                 // 15192
      this.$id = nextUid();                                                                                            // 15193
      this.$$phase = this.$parent = this.$$watchers =                                                                  // 15194
                     this.$$nextSibling = this.$$prevSibling =                                                         // 15195
                     this.$$childHead = this.$$childTail = null;                                                       // 15196
      this.$root = this;                                                                                               // 15197
      this.$$destroyed = false;                                                                                        // 15198
      this.$$listeners = {};                                                                                           // 15199
      this.$$listenerCount = {};                                                                                       // 15200
      this.$$watchersCount = 0;                                                                                        // 15201
      this.$$isolateBindings = null;                                                                                   // 15202
    }                                                                                                                  // 15203
                                                                                                                       // 15204
    /**                                                                                                                // 15205
     * @ngdoc property                                                                                                 // 15206
     * @name $rootScope.Scope#$id                                                                                      // 15207
     *                                                                                                                 // 15208
     * @description                                                                                                    // 15209
     * Unique scope ID (monotonically increasing) useful for debugging.                                                // 15210
     */                                                                                                                // 15211
                                                                                                                       // 15212
     /**                                                                                                               // 15213
      * @ngdoc property                                                                                                // 15214
      * @name $rootScope.Scope#$parent                                                                                 // 15215
      *                                                                                                                // 15216
      * @description                                                                                                   // 15217
      * Reference to the parent scope.                                                                                 // 15218
      */                                                                                                               // 15219
                                                                                                                       // 15220
      /**                                                                                                              // 15221
       * @ngdoc property                                                                                               // 15222
       * @name $rootScope.Scope#$root                                                                                  // 15223
       *                                                                                                               // 15224
       * @description                                                                                                  // 15225
       * Reference to the root scope.                                                                                  // 15226
       */                                                                                                              // 15227
                                                                                                                       // 15228
    Scope.prototype = {                                                                                                // 15229
      constructor: Scope,                                                                                              // 15230
      /**                                                                                                              // 15231
       * @ngdoc method                                                                                                 // 15232
       * @name $rootScope.Scope#$new                                                                                   // 15233
       * @kind function                                                                                                // 15234
       *                                                                                                               // 15235
       * @description                                                                                                  // 15236
       * Creates a new child {@link ng.$rootScope.Scope scope}.                                                        // 15237
       *                                                                                                               // 15238
       * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} event.                      // 15239
       * The scope can be removed from the scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.      // 15240
       *                                                                                                               // 15241
       * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is                          // 15242
       * desired for the scope and its child scopes to be permanently detached from the parent and                     // 15243
       * thus stop participating in model change detection and listener notification by invoking.                      // 15244
       *                                                                                                               // 15245
       * @param {boolean} isolate If true, then the scope does not prototypically inherit from the                     // 15246
       *         parent scope. The scope is isolated, as it can not see parent scope properties.                       // 15247
       *         When creating widgets, it is useful for the widget to not accidentally read parent                    // 15248
       *         state.                                                                                                // 15249
       *                                                                                                               // 15250
       * @param {Scope} [parent=this] The {@link ng.$rootScope.Scope `Scope`} that will be the `$parent`               // 15251
       *                              of the newly created scope. Defaults to `this` scope if not provided.            // 15252
       *                              This is used when creating a transclude scope to correctly place it              // 15253
       *                              in the scope hierarchy while maintaining the correct prototypical                // 15254
       *                              inheritance.                                                                     // 15255
       *                                                                                                               // 15256
       * @returns {Object} The newly created child scope.                                                              // 15257
       *                                                                                                               // 15258
       */                                                                                                              // 15259
      $new: function(isolate, parent) {                                                                                // 15260
        var child;                                                                                                     // 15261
                                                                                                                       // 15262
        parent = parent || this;                                                                                       // 15263
                                                                                                                       // 15264
        if (isolate) {                                                                                                 // 15265
          child = new Scope();                                                                                         // 15266
          child.$root = this.$root;                                                                                    // 15267
        } else {                                                                                                       // 15268
          // Only create a child scope class if somebody asks for one,                                                 // 15269
          // but cache it to allow the VM to optimize lookups.                                                         // 15270
          if (!this.$$ChildScope) {                                                                                    // 15271
            this.$$ChildScope = createChildScopeClass(this);                                                           // 15272
          }                                                                                                            // 15273
          child = new this.$$ChildScope();                                                                             // 15274
        }                                                                                                              // 15275
        child.$parent = parent;                                                                                        // 15276
        child.$$prevSibling = parent.$$childTail;                                                                      // 15277
        if (parent.$$childHead) {                                                                                      // 15278
          parent.$$childTail.$$nextSibling = child;                                                                    // 15279
          parent.$$childTail = child;                                                                                  // 15280
        } else {                                                                                                       // 15281
          parent.$$childHead = parent.$$childTail = child;                                                             // 15282
        }                                                                                                              // 15283
                                                                                                                       // 15284
        // When the new scope is not isolated or we inherit from `this`, and                                           // 15285
        // the parent scope is destroyed, the property `$$destroyed` is inherited                                      // 15286
        // prototypically. In all other cases, this property needs to be set                                           // 15287
        // when the parent scope is destroyed.                                                                         // 15288
        // The listener needs to be added after the parent is set                                                      // 15289
        if (isolate || parent != this) child.$on('$destroy', destroyChildScope);                                       // 15290
                                                                                                                       // 15291
        return child;                                                                                                  // 15292
      },                                                                                                               // 15293
                                                                                                                       // 15294
      /**                                                                                                              // 15295
       * @ngdoc method                                                                                                 // 15296
       * @name $rootScope.Scope#$watch                                                                                 // 15297
       * @kind function                                                                                                // 15298
       *                                                                                                               // 15299
       * @description                                                                                                  // 15300
       * Registers a `listener` callback to be executed whenever the `watchExpression` changes.                        // 15301
       *                                                                                                               // 15302
       * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest                         // 15303
       *   $digest()} and should return the value that will be watched. (`watchExpression` should not change           // 15304
       *   its value when executed multiple times with the same input because it may be executed multiple              // 15305
       *   times by {@link ng.$rootScope.Scope#$digest $digest()}. That is, `watchExpression` should be                // 15306
       *   [idempotent](http://en.wikipedia.org/wiki/Idempotence).                                                     // 15307
       * - The `listener` is called only when the value from the current `watchExpression` and the                     // 15308
       *   previous call to `watchExpression` are not equal (with the exception of the initial run,                    // 15309
       *   see below). Inequality is determined according to reference inequality,                                     // 15310
       *   [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)
       *    via the `!==` Javascript operator, unless `objectEquality == true`                                         // 15312
       *   (see next point)                                                                                            // 15313
       * - When `objectEquality == true`, inequality of the `watchExpression` is determined                            // 15314
       *   according to the {@link angular.equals} function. To save the value of the object for                       // 15315
       *   later comparison, the {@link angular.copy} function is used. This therefore means that                      // 15316
       *   watching complex objects will have adverse memory and performance implications.                             // 15317
       * - The watch `listener` may change the model, which may trigger other `listener`s to fire.                     // 15318
       *   This is achieved by rerunning the watchers until no changes are detected. The rerun                         // 15319
       *   iteration limit is 10 to prevent an infinite loop deadlock.                                                 // 15320
       *                                                                                                               // 15321
       *                                                                                                               // 15322
       * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,                    // 15323
       * you can register a `watchExpression` function with no `listener`. (Be prepared for                            // 15324
       * multiple calls to your `watchExpression` because it will execute multiple times in a                          // 15325
       * single {@link ng.$rootScope.Scope#$digest $digest} cycle if a change is detected.)                            // 15326
       *                                                                                                               // 15327
       * After a watcher is registered with the scope, the `listener` fn is called asynchronously                      // 15328
       * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the                                     // 15329
       * watcher. In rare cases, this is undesirable because the listener is called when the result                    // 15330
       * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you                     // 15331
       * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the                     // 15332
       * listener was called due to initialization.                                                                    // 15333
       *                                                                                                               // 15334
       *                                                                                                               // 15335
       *                                                                                                               // 15336
       * # Example                                                                                                     // 15337
       * ```js                                                                                                         // 15338
           // let's assume that scope was dependency injected as the $rootScope                                        // 15339
           var scope = $rootScope;                                                                                     // 15340
           scope.name = 'misko';                                                                                       // 15341
           scope.counter = 0;                                                                                          // 15342
                                                                                                                       // 15343
           expect(scope.counter).toEqual(0);                                                                           // 15344
           scope.$watch('name', function(newValue, oldValue) {                                                         // 15345
             scope.counter = scope.counter + 1;                                                                        // 15346
           });                                                                                                         // 15347
           expect(scope.counter).toEqual(0);                                                                           // 15348
                                                                                                                       // 15349
           scope.$digest();                                                                                            // 15350
           // the listener is always called during the first $digest loop after it was registered                      // 15351
           expect(scope.counter).toEqual(1);                                                                           // 15352
                                                                                                                       // 15353
           scope.$digest();                                                                                            // 15354
           // but now it will not be called unless the value changes                                                   // 15355
           expect(scope.counter).toEqual(1);                                                                           // 15356
                                                                                                                       // 15357
           scope.name = 'adam';                                                                                        // 15358
           scope.$digest();                                                                                            // 15359
           expect(scope.counter).toEqual(2);                                                                           // 15360
                                                                                                                       // 15361
                                                                                                                       // 15362
                                                                                                                       // 15363
           // Using a function as a watchExpression                                                                    // 15364
           var food;                                                                                                   // 15365
           scope.foodCounter = 0;                                                                                      // 15366
           expect(scope.foodCounter).toEqual(0);                                                                       // 15367
           scope.$watch(                                                                                               // 15368
             // This function returns the value being watched. It is called for each turn of the $digest loop          // 15369
             function() { return food; },                                                                              // 15370
             // This is the change listener, called when the value returned from the above function changes            // 15371
             function(newValue, oldValue) {                                                                            // 15372
               if ( newValue !== oldValue ) {                                                                          // 15373
                 // Only increment the counter if the value changed                                                    // 15374
                 scope.foodCounter = scope.foodCounter + 1;                                                            // 15375
               }                                                                                                       // 15376
             }                                                                                                         // 15377
           );                                                                                                          // 15378
           // No digest has been run so the counter will be zero                                                       // 15379
           expect(scope.foodCounter).toEqual(0);                                                                       // 15380
                                                                                                                       // 15381
           // Run the digest but since food has not changed count will still be zero                                   // 15382
           scope.$digest();                                                                                            // 15383
           expect(scope.foodCounter).toEqual(0);                                                                       // 15384
                                                                                                                       // 15385
           // Update food and run digest.  Now the counter will increment                                              // 15386
           food = 'cheeseburger';                                                                                      // 15387
           scope.$digest();                                                                                            // 15388
           expect(scope.foodCounter).toEqual(1);                                                                       // 15389
                                                                                                                       // 15390
       * ```                                                                                                           // 15391
       *                                                                                                               // 15392
       *                                                                                                               // 15393
       *                                                                                                               // 15394
       * @param {(function()|string)} watchExpression Expression that is evaluated on each                             // 15395
       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers                   // 15396
       *    a call to the `listener`.                                                                                  // 15397
       *                                                                                                               // 15398
       *    - `string`: Evaluated as {@link guide/expression expression}                                               // 15399
       *    - `function(scope)`: called with current `scope` as a parameter.                                           // 15400
       * @param {function(newVal, oldVal, scope)} listener Callback called whenever the value                          // 15401
       *    of `watchExpression` changes.                                                                              // 15402
       *                                                                                                               // 15403
       *    - `newVal` contains the current value of the `watchExpression`                                             // 15404
       *    - `oldVal` contains the previous value of the `watchExpression`                                            // 15405
       *    - `scope` refers to the current scope                                                                      // 15406
       * @param {boolean=} objectEquality Compare for object equality using {@link angular.equals} instead of          // 15407
       *     comparing for reference equality.                                                                         // 15408
       * @returns {function()} Returns a deregistration function for this listener.                                    // 15409
       */                                                                                                              // 15410
      $watch: function(watchExp, listener, objectEquality, prettyPrintExpression) {                                    // 15411
        var get = $parse(watchExp);                                                                                    // 15412
                                                                                                                       // 15413
        if (get.$$watchDelegate) {                                                                                     // 15414
          return get.$$watchDelegate(this, listener, objectEquality, get, watchExp);                                   // 15415
        }                                                                                                              // 15416
        var scope = this,                                                                                              // 15417
            array = scope.$$watchers,                                                                                  // 15418
            watcher = {                                                                                                // 15419
              fn: listener,                                                                                            // 15420
              last: initWatchVal,                                                                                      // 15421
              get: get,                                                                                                // 15422
              exp: prettyPrintExpression || watchExp,                                                                  // 15423
              eq: !!objectEquality                                                                                     // 15424
            };                                                                                                         // 15425
                                                                                                                       // 15426
        lastDirtyWatch = null;                                                                                         // 15427
                                                                                                                       // 15428
        if (!isFunction(listener)) {                                                                                   // 15429
          watcher.fn = noop;                                                                                           // 15430
        }                                                                                                              // 15431
                                                                                                                       // 15432
        if (!array) {                                                                                                  // 15433
          array = scope.$$watchers = [];                                                                               // 15434
        }                                                                                                              // 15435
        // we use unshift since we use a while loop in $digest for speed.                                              // 15436
        // the while loop reads in reverse order.                                                                      // 15437
        array.unshift(watcher);                                                                                        // 15438
        incrementWatchersCount(this, 1);                                                                               // 15439
                                                                                                                       // 15440
        return function deregisterWatch() {                                                                            // 15441
          if (arrayRemove(array, watcher) >= 0) {                                                                      // 15442
            incrementWatchersCount(scope, -1);                                                                         // 15443
          }                                                                                                            // 15444
          lastDirtyWatch = null;                                                                                       // 15445
        };                                                                                                             // 15446
      },                                                                                                               // 15447
                                                                                                                       // 15448
      /**                                                                                                              // 15449
       * @ngdoc method                                                                                                 // 15450
       * @name $rootScope.Scope#$watchGroup                                                                            // 15451
       * @kind function                                                                                                // 15452
       *                                                                                                               // 15453
       * @description                                                                                                  // 15454
       * A variant of {@link ng.$rootScope.Scope#$watch $watch()} where it watches an array of `watchExpressions`.     // 15455
       * If any one expression in the collection changes the `listener` is executed.                                   // 15456
       *                                                                                                               // 15457
       * - The items in the `watchExpressions` array are observed via standard $watch operation and are examined on every
       *   call to $digest() to see if any items changes.                                                              // 15459
       * - The `listener` is called whenever any expression in the `watchExpressions` array changes.                   // 15460
       *                                                                                                               // 15461
       * @param {Array.<string|Function(scope)>} watchExpressions Array of expressions that will be individually       // 15462
       * watched using {@link ng.$rootScope.Scope#$watch $watch()}                                                     // 15463
       *                                                                                                               // 15464
       * @param {function(newValues, oldValues, scope)} listener Callback called whenever the return value of any      // 15465
       *    expression in `watchExpressions` changes                                                                   // 15466
       *    The `newValues` array contains the current values of the `watchExpressions`, with the indexes matching     // 15467
       *    those of `watchExpression`                                                                                 // 15468
       *    and the `oldValues` array contains the previous values of the `watchExpressions`, with the indexes matching
       *    those of `watchExpression`                                                                                 // 15470
       *    The `scope` refers to the current scope.                                                                   // 15471
       * @returns {function()} Returns a de-registration function for all listeners.                                   // 15472
       */                                                                                                              // 15473
      $watchGroup: function(watchExpressions, listener) {                                                              // 15474
        var oldValues = new Array(watchExpressions.length);                                                            // 15475
        var newValues = new Array(watchExpressions.length);                                                            // 15476
        var deregisterFns = [];                                                                                        // 15477
        var self = this;                                                                                               // 15478
        var changeReactionScheduled = false;                                                                           // 15479
        var firstRun = true;                                                                                           // 15480
                                                                                                                       // 15481
        if (!watchExpressions.length) {                                                                                // 15482
          // No expressions means we call the listener ASAP                                                            // 15483
          var shouldCall = true;                                                                                       // 15484
          self.$evalAsync(function() {                                                                                 // 15485
            if (shouldCall) listener(newValues, newValues, self);                                                      // 15486
          });                                                                                                          // 15487
          return function deregisterWatchGroup() {                                                                     // 15488
            shouldCall = false;                                                                                        // 15489
          };                                                                                                           // 15490
        }                                                                                                              // 15491
                                                                                                                       // 15492
        if (watchExpressions.length === 1) {                                                                           // 15493
          // Special case size of one                                                                                  // 15494
          return this.$watch(watchExpressions[0], function watchGroupAction(value, oldValue, scope) {                  // 15495
            newValues[0] = value;                                                                                      // 15496
            oldValues[0] = oldValue;                                                                                   // 15497
            listener(newValues, (value === oldValue) ? newValues : oldValues, scope);                                  // 15498
          });                                                                                                          // 15499
        }                                                                                                              // 15500
                                                                                                                       // 15501
        forEach(watchExpressions, function(expr, i) {                                                                  // 15502
          var unwatchFn = self.$watch(expr, function watchGroupSubAction(value, oldValue) {                            // 15503
            newValues[i] = value;                                                                                      // 15504
            oldValues[i] = oldValue;                                                                                   // 15505
            if (!changeReactionScheduled) {                                                                            // 15506
              changeReactionScheduled = true;                                                                          // 15507
              self.$evalAsync(watchGroupAction);                                                                       // 15508
            }                                                                                                          // 15509
          });                                                                                                          // 15510
          deregisterFns.push(unwatchFn);                                                                               // 15511
        });                                                                                                            // 15512
                                                                                                                       // 15513
        function watchGroupAction() {                                                                                  // 15514
          changeReactionScheduled = false;                                                                             // 15515
                                                                                                                       // 15516
          if (firstRun) {                                                                                              // 15517
            firstRun = false;                                                                                          // 15518
            listener(newValues, newValues, self);                                                                      // 15519
          } else {                                                                                                     // 15520
            listener(newValues, oldValues, self);                                                                      // 15521
          }                                                                                                            // 15522
        }                                                                                                              // 15523
                                                                                                                       // 15524
        return function deregisterWatchGroup() {                                                                       // 15525
          while (deregisterFns.length) {                                                                               // 15526
            deregisterFns.shift()();                                                                                   // 15527
          }                                                                                                            // 15528
        };                                                                                                             // 15529
      },                                                                                                               // 15530
                                                                                                                       // 15531
                                                                                                                       // 15532
      /**                                                                                                              // 15533
       * @ngdoc method                                                                                                 // 15534
       * @name $rootScope.Scope#$watchCollection                                                                       // 15535
       * @kind function                                                                                                // 15536
       *                                                                                                               // 15537
       * @description                                                                                                  // 15538
       * Shallow watches the properties of an object and fires whenever any of the properties change                   // 15539
       * (for arrays, this implies watching the array items; for object maps, this implies watching                    // 15540
       * the properties). If a change is detected, the `listener` callback is fired.                                   // 15541
       *                                                                                                               // 15542
       * - The `obj` collection is observed via standard $watch operation and is examined on every                     // 15543
       *   call to $digest() to see if any items have been added, removed, or moved.                                   // 15544
       * - The `listener` is called whenever anything within the `obj` has changed. Examples include                   // 15545
       *   adding, removing, and moving items belonging to an object or array.                                         // 15546
       *                                                                                                               // 15547
       *                                                                                                               // 15548
       * # Example                                                                                                     // 15549
       * ```js                                                                                                         // 15550
          $scope.names = ['igor', 'matias', 'misko', 'james'];                                                         // 15551
          $scope.dataCount = 4;                                                                                        // 15552
                                                                                                                       // 15553
          $scope.$watchCollection('names', function(newNames, oldNames) {                                              // 15554
            $scope.dataCount = newNames.length;                                                                        // 15555
          });                                                                                                          // 15556
                                                                                                                       // 15557
          expect($scope.dataCount).toEqual(4);                                                                         // 15558
          $scope.$digest();                                                                                            // 15559
                                                                                                                       // 15560
          //still at 4 ... no changes                                                                                  // 15561
          expect($scope.dataCount).toEqual(4);                                                                         // 15562
                                                                                                                       // 15563
          $scope.names.pop();                                                                                          // 15564
          $scope.$digest();                                                                                            // 15565
                                                                                                                       // 15566
          //now there's been a change                                                                                  // 15567
          expect($scope.dataCount).toEqual(3);                                                                         // 15568
       * ```                                                                                                           // 15569
       *                                                                                                               // 15570
       *                                                                                                               // 15571
       * @param {string|function(scope)} obj Evaluated as {@link guide/expression expression}. The                     // 15572
       *    expression value should evaluate to an object or an array which is observed on each                        // 15573
       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the                           // 15574
       *    collection will trigger a call to the `listener`.                                                          // 15575
       *                                                                                                               // 15576
       * @param {function(newCollection, oldCollection, scope)} listener a callback function called                    // 15577
       *    when a change is detected.                                                                                 // 15578
       *    - The `newCollection` object is the newly modified data obtained from the `obj` expression                 // 15579
       *    - The `oldCollection` object is a copy of the former collection data.                                      // 15580
       *      Due to performance considerations, the`oldCollection` value is computed only if the                      // 15581
       *      `listener` function declares two or more arguments.                                                      // 15582
       *    - The `scope` argument refers to the current scope.                                                        // 15583
       *                                                                                                               // 15584
       * @returns {function()} Returns a de-registration function for this listener. When the                          // 15585
       *    de-registration function is executed, the internal watch operation is terminated.                          // 15586
       */                                                                                                              // 15587
      $watchCollection: function(obj, listener) {                                                                      // 15588
        $watchCollectionInterceptor.$stateful = true;                                                                  // 15589
                                                                                                                       // 15590
        var self = this;                                                                                               // 15591
        // the current value, updated on each dirty-check run                                                          // 15592
        var newValue;                                                                                                  // 15593
        // a shallow copy of the newValue from the last dirty-check run,                                               // 15594
        // updated to match newValue during dirty-check run                                                            // 15595
        var oldValue;                                                                                                  // 15596
        // a shallow copy of the newValue from when the last change happened                                           // 15597
        var veryOldValue;                                                                                              // 15598
        // only track veryOldValue if the listener is asking for it                                                    // 15599
        var trackVeryOldValue = (listener.length > 1);                                                                 // 15600
        var changeDetected = 0;                                                                                        // 15601
        var changeDetector = $parse(obj, $watchCollectionInterceptor);                                                 // 15602
        var internalArray = [];                                                                                        // 15603
        var internalObject = {};                                                                                       // 15604
        var initRun = true;                                                                                            // 15605
        var oldLength = 0;                                                                                             // 15606
                                                                                                                       // 15607
        function $watchCollectionInterceptor(_value) {                                                                 // 15608
          newValue = _value;                                                                                           // 15609
          var newLength, key, bothNaN, newItem, oldItem;                                                               // 15610
                                                                                                                       // 15611
          // If the new value is undefined, then return undefined as the watch may be a one-time watch                 // 15612
          if (isUndefined(newValue)) return;                                                                           // 15613
                                                                                                                       // 15614
          if (!isObject(newValue)) { // if primitive                                                                   // 15615
            if (oldValue !== newValue) {                                                                               // 15616
              oldValue = newValue;                                                                                     // 15617
              changeDetected++;                                                                                        // 15618
            }                                                                                                          // 15619
          } else if (isArrayLike(newValue)) {                                                                          // 15620
            if (oldValue !== internalArray) {                                                                          // 15621
              // we are transitioning from something which was not an array into array.                                // 15622
              oldValue = internalArray;                                                                                // 15623
              oldLength = oldValue.length = 0;                                                                         // 15624
              changeDetected++;                                                                                        // 15625
            }                                                                                                          // 15626
                                                                                                                       // 15627
            newLength = newValue.length;                                                                               // 15628
                                                                                                                       // 15629
            if (oldLength !== newLength) {                                                                             // 15630
              // if lengths do not match we need to trigger change notification                                        // 15631
              changeDetected++;                                                                                        // 15632
              oldValue.length = oldLength = newLength;                                                                 // 15633
            }                                                                                                          // 15634
            // copy the items to oldValue and look for changes.                                                        // 15635
            for (var i = 0; i < newLength; i++) {                                                                      // 15636
              oldItem = oldValue[i];                                                                                   // 15637
              newItem = newValue[i];                                                                                   // 15638
                                                                                                                       // 15639
              bothNaN = (oldItem !== oldItem) && (newItem !== newItem);                                                // 15640
              if (!bothNaN && (oldItem !== newItem)) {                                                                 // 15641
                changeDetected++;                                                                                      // 15642
                oldValue[i] = newItem;                                                                                 // 15643
              }                                                                                                        // 15644
            }                                                                                                          // 15645
          } else {                                                                                                     // 15646
            if (oldValue !== internalObject) {                                                                         // 15647
              // we are transitioning from something which was not an object into object.                              // 15648
              oldValue = internalObject = {};                                                                          // 15649
              oldLength = 0;                                                                                           // 15650
              changeDetected++;                                                                                        // 15651
            }                                                                                                          // 15652
            // copy the items to oldValue and look for changes.                                                        // 15653
            newLength = 0;                                                                                             // 15654
            for (key in newValue) {                                                                                    // 15655
              if (hasOwnProperty.call(newValue, key)) {                                                                // 15656
                newLength++;                                                                                           // 15657
                newItem = newValue[key];                                                                               // 15658
                oldItem = oldValue[key];                                                                               // 15659
                                                                                                                       // 15660
                if (key in oldValue) {                                                                                 // 15661
                  bothNaN = (oldItem !== oldItem) && (newItem !== newItem);                                            // 15662
                  if (!bothNaN && (oldItem !== newItem)) {                                                             // 15663
                    changeDetected++;                                                                                  // 15664
                    oldValue[key] = newItem;                                                                           // 15665
                  }                                                                                                    // 15666
                } else {                                                                                               // 15667
                  oldLength++;                                                                                         // 15668
                  oldValue[key] = newItem;                                                                             // 15669
                  changeDetected++;                                                                                    // 15670
                }                                                                                                      // 15671
              }                                                                                                        // 15672
            }                                                                                                          // 15673
            if (oldLength > newLength) {                                                                               // 15674
              // we used to have more keys, need to find them and destroy them.                                        // 15675
              changeDetected++;                                                                                        // 15676
              for (key in oldValue) {                                                                                  // 15677
                if (!hasOwnProperty.call(newValue, key)) {                                                             // 15678
                  oldLength--;                                                                                         // 15679
                  delete oldValue[key];                                                                                // 15680
                }                                                                                                      // 15681
              }                                                                                                        // 15682
            }                                                                                                          // 15683
          }                                                                                                            // 15684
          return changeDetected;                                                                                       // 15685
        }                                                                                                              // 15686
                                                                                                                       // 15687
        function $watchCollectionAction() {                                                                            // 15688
          if (initRun) {                                                                                               // 15689
            initRun = false;                                                                                           // 15690
            listener(newValue, newValue, self);                                                                        // 15691
          } else {                                                                                                     // 15692
            listener(newValue, veryOldValue, self);                                                                    // 15693
          }                                                                                                            // 15694
                                                                                                                       // 15695
          // make a copy for the next time a collection is changed                                                     // 15696
          if (trackVeryOldValue) {                                                                                     // 15697
            if (!isObject(newValue)) {                                                                                 // 15698
              //primitive                                                                                              // 15699
              veryOldValue = newValue;                                                                                 // 15700
            } else if (isArrayLike(newValue)) {                                                                        // 15701
              veryOldValue = new Array(newValue.length);                                                               // 15702
              for (var i = 0; i < newValue.length; i++) {                                                              // 15703
                veryOldValue[i] = newValue[i];                                                                         // 15704
              }                                                                                                        // 15705
            } else { // if object                                                                                      // 15706
              veryOldValue = {};                                                                                       // 15707
              for (var key in newValue) {                                                                              // 15708
                if (hasOwnProperty.call(newValue, key)) {                                                              // 15709
                  veryOldValue[key] = newValue[key];                                                                   // 15710
                }                                                                                                      // 15711
              }                                                                                                        // 15712
            }                                                                                                          // 15713
          }                                                                                                            // 15714
        }                                                                                                              // 15715
                                                                                                                       // 15716
        return this.$watch(changeDetector, $watchCollectionAction);                                                    // 15717
      },                                                                                                               // 15718
                                                                                                                       // 15719
      /**                                                                                                              // 15720
       * @ngdoc method                                                                                                 // 15721
       * @name $rootScope.Scope#$digest                                                                                // 15722
       * @kind function                                                                                                // 15723
       *                                                                                                               // 15724
       * @description                                                                                                  // 15725
       * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and                     // 15726
       * its children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change                      // 15727
       * the model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}                      // 15728
       * until no more listeners are firing. This means that it is possible to get into an infinite                    // 15729
       * loop. This function will throw `'Maximum iteration limit exceeded.'` if the number of                         // 15730
       * iterations exceeds 10.                                                                                        // 15731
       *                                                                                                               // 15732
       * Usually, you don't call `$digest()` directly in                                                               // 15733
       * {@link ng.directive:ngController controllers} or in                                                           // 15734
       * {@link ng.$compileProvider#directive directives}.                                                             // 15735
       * Instead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within                   // 15736
       * a {@link ng.$compileProvider#directive directive}), which will force a `$digest()`.                           // 15737
       *                                                                                                               // 15738
       * If you want to be notified whenever `$digest()` is called,                                                    // 15739
       * you can register a `watchExpression` function with                                                            // 15740
       * {@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.                                               // 15741
       *                                                                                                               // 15742
       * In unit tests, you may need to call `$digest()` to simulate the scope life cycle.                             // 15743
       *                                                                                                               // 15744
       * # Example                                                                                                     // 15745
       * ```js                                                                                                         // 15746
           var scope = ...;                                                                                            // 15747
           scope.name = 'misko';                                                                                       // 15748
           scope.counter = 0;                                                                                          // 15749
                                                                                                                       // 15750
           expect(scope.counter).toEqual(0);                                                                           // 15751
           scope.$watch('name', function(newValue, oldValue) {                                                         // 15752
             scope.counter = scope.counter + 1;                                                                        // 15753
           });                                                                                                         // 15754
           expect(scope.counter).toEqual(0);                                                                           // 15755
                                                                                                                       // 15756
           scope.$digest();                                                                                            // 15757
           // the listener is always called during the first $digest loop after it was registered                      // 15758
           expect(scope.counter).toEqual(1);                                                                           // 15759
                                                                                                                       // 15760
           scope.$digest();                                                                                            // 15761
           // but now it will not be called unless the value changes                                                   // 15762
           expect(scope.counter).toEqual(1);                                                                           // 15763
                                                                                                                       // 15764
           scope.name = 'adam';                                                                                        // 15765
           scope.$digest();                                                                                            // 15766
           expect(scope.counter).toEqual(2);                                                                           // 15767
       * ```                                                                                                           // 15768
       *                                                                                                               // 15769
       */                                                                                                              // 15770
      $digest: function() {                                                                                            // 15771
        var watch, value, last,                                                                                        // 15772
            watchers,                                                                                                  // 15773
            length,                                                                                                    // 15774
            dirty, ttl = TTL,                                                                                          // 15775
            next, current, target = this,                                                                              // 15776
            watchLog = [],                                                                                             // 15777
            logIdx, logMsg, asyncTask;                                                                                 // 15778
                                                                                                                       // 15779
        beginPhase('$digest');                                                                                         // 15780
        // Check for changes to browser url that happened in sync before the call to $digest                           // 15781
        $browser.$$checkUrlChange();                                                                                   // 15782
                                                                                                                       // 15783
        if (this === $rootScope && applyAsyncId !== null) {                                                            // 15784
          // If this is the root scope, and $applyAsync has scheduled a deferred $apply(), then                        // 15785
          // cancel the scheduled $apply and flush the queue of expressions to be evaluated.                           // 15786
          $browser.defer.cancel(applyAsyncId);                                                                         // 15787
          flushApplyAsync();                                                                                           // 15788
        }                                                                                                              // 15789
                                                                                                                       // 15790
        lastDirtyWatch = null;                                                                                         // 15791
                                                                                                                       // 15792
        do { // "while dirty" loop                                                                                     // 15793
          dirty = false;                                                                                               // 15794
          current = target;                                                                                            // 15795
                                                                                                                       // 15796
          while (asyncQueue.length) {                                                                                  // 15797
            try {                                                                                                      // 15798
              asyncTask = asyncQueue.shift();                                                                          // 15799
              asyncTask.scope.$eval(asyncTask.expression, asyncTask.locals);                                           // 15800
            } catch (e) {                                                                                              // 15801
              $exceptionHandler(e);                                                                                    // 15802
            }                                                                                                          // 15803
            lastDirtyWatch = null;                                                                                     // 15804
          }                                                                                                            // 15805
                                                                                                                       // 15806
          traverseScopesLoop:                                                                                          // 15807
          do { // "traverse the scopes" loop                                                                           // 15808
            if ((watchers = current.$$watchers)) {                                                                     // 15809
              // process our watches                                                                                   // 15810
              length = watchers.length;                                                                                // 15811
              while (length--) {                                                                                       // 15812
                try {                                                                                                  // 15813
                  watch = watchers[length];                                                                            // 15814
                  // Most common watches are on primitives, in which case we can short                                 // 15815
                  // circuit it with === operator, only when === fails do we use .equals                               // 15816
                  if (watch) {                                                                                         // 15817
                    if ((value = watch.get(current)) !== (last = watch.last) &&                                        // 15818
                        !(watch.eq                                                                                     // 15819
                            ? equals(value, last)                                                                      // 15820
                            : (typeof value === 'number' && typeof last === 'number'                                   // 15821
                               && isNaN(value) && isNaN(last)))) {                                                     // 15822
                      dirty = true;                                                                                    // 15823
                      lastDirtyWatch = watch;                                                                          // 15824
                      watch.last = watch.eq ? copy(value, null) : value;                                               // 15825
                      watch.fn(value, ((last === initWatchVal) ? value : last), current);                              // 15826
                      if (ttl < 5) {                                                                                   // 15827
                        logIdx = 4 - ttl;                                                                              // 15828
                        if (!watchLog[logIdx]) watchLog[logIdx] = [];                                                  // 15829
                        watchLog[logIdx].push({                                                                        // 15830
                          msg: isFunction(watch.exp) ? 'fn: ' + (watch.exp.name || watch.exp.toString()) : watch.exp,  // 15831
                          newVal: value,                                                                               // 15832
                          oldVal: last                                                                                 // 15833
                        });                                                                                            // 15834
                      }                                                                                                // 15835
                    } else if (watch === lastDirtyWatch) {                                                             // 15836
                      // If the most recently dirty watcher is now clean, short circuit since the remaining watchers   // 15837
                      // have already been tested.                                                                     // 15838
                      dirty = false;                                                                                   // 15839
                      break traverseScopesLoop;                                                                        // 15840
                    }                                                                                                  // 15841
                  }                                                                                                    // 15842
                } catch (e) {                                                                                          // 15843
                  $exceptionHandler(e);                                                                                // 15844
                }                                                                                                      // 15845
              }                                                                                                        // 15846
            }                                                                                                          // 15847
                                                                                                                       // 15848
            // Insanity Warning: scope depth-first traversal                                                           // 15849
            // yes, this code is a bit crazy, but it works and we have tests to prove it!                              // 15850
            // this piece should be kept in sync with the traversal in $broadcast                                      // 15851
            if (!(next = ((current.$$watchersCount && current.$$childHead) ||                                          // 15852
                (current !== target && current.$$nextSibling)))) {                                                     // 15853
              while (current !== target && !(next = current.$$nextSibling)) {                                          // 15854
                current = current.$parent;                                                                             // 15855
              }                                                                                                        // 15856
            }                                                                                                          // 15857
          } while ((current = next));                                                                                  // 15858
                                                                                                                       // 15859
          // `break traverseScopesLoop;` takes us to here                                                              // 15860
                                                                                                                       // 15861
          if ((dirty || asyncQueue.length) && !(ttl--)) {                                                              // 15862
            clearPhase();                                                                                              // 15863
            throw $rootScopeMinErr('infdig',                                                                           // 15864
                '{0} $digest() iterations reached. Aborting!\n' +                                                      // 15865
                'Watchers fired in the last 5 iterations: {1}',                                                        // 15866
                TTL, watchLog);                                                                                        // 15867
          }                                                                                                            // 15868
                                                                                                                       // 15869
        } while (dirty || asyncQueue.length);                                                                          // 15870
                                                                                                                       // 15871
        clearPhase();                                                                                                  // 15872
                                                                                                                       // 15873
        while (postDigestQueue.length) {                                                                               // 15874
          try {                                                                                                        // 15875
            postDigestQueue.shift()();                                                                                 // 15876
          } catch (e) {                                                                                                // 15877
            $exceptionHandler(e);                                                                                      // 15878
          }                                                                                                            // 15879
        }                                                                                                              // 15880
      },                                                                                                               // 15881
                                                                                                                       // 15882
                                                                                                                       // 15883
      /**                                                                                                              // 15884
       * @ngdoc event                                                                                                  // 15885
       * @name $rootScope.Scope#$destroy                                                                               // 15886
       * @eventType broadcast on scope being destroyed                                                                 // 15887
       *                                                                                                               // 15888
       * @description                                                                                                  // 15889
       * Broadcasted when a scope and its children are being destroyed.                                                // 15890
       *                                                                                                               // 15891
       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to                        // 15892
       * clean up DOM bindings before an element is removed from the DOM.                                              // 15893
       */                                                                                                              // 15894
                                                                                                                       // 15895
      /**                                                                                                              // 15896
       * @ngdoc method                                                                                                 // 15897
       * @name $rootScope.Scope#$destroy                                                                               // 15898
       * @kind function                                                                                                // 15899
       *                                                                                                               // 15900
       * @description                                                                                                  // 15901
       * Removes the current scope (and all of its children) from the parent scope. Removal implies                    // 15902
       * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer                                    // 15903
       * propagate to the current scope and its children. Removal also implies that the current                        // 15904
       * scope is eligible for garbage collection.                                                                     // 15905
       *                                                                                                               // 15906
       * The `$destroy()` is usually used by directives such as                                                        // 15907
       * {@link ng.directive:ngRepeat ngRepeat} for managing the                                                       // 15908
       * unrolling of the loop.                                                                                        // 15909
       *                                                                                                               // 15910
       * Just before a scope is destroyed, a `$destroy` event is broadcasted on this scope.                            // 15911
       * Application code can register a `$destroy` event handler that will give it a chance to                        // 15912
       * perform any necessary cleanup.                                                                                // 15913
       *                                                                                                               // 15914
       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to                        // 15915
       * clean up DOM bindings before an element is removed from the DOM.                                              // 15916
       */                                                                                                              // 15917
      $destroy: function() {                                                                                           // 15918
        // We can't destroy a scope that has been already destroyed.                                                   // 15919
        if (this.$$destroyed) return;                                                                                  // 15920
        var parent = this.$parent;                                                                                     // 15921
                                                                                                                       // 15922
        this.$broadcast('$destroy');                                                                                   // 15923
        this.$$destroyed = true;                                                                                       // 15924
                                                                                                                       // 15925
        if (this === $rootScope) {                                                                                     // 15926
          //Remove handlers attached to window when $rootScope is removed                                              // 15927
          $browser.$$applicationDestroyed();                                                                           // 15928
        }                                                                                                              // 15929
                                                                                                                       // 15930
        incrementWatchersCount(this, -this.$$watchersCount);                                                           // 15931
        for (var eventName in this.$$listenerCount) {                                                                  // 15932
          decrementListenerCount(this, this.$$listenerCount[eventName], eventName);                                    // 15933
        }                                                                                                              // 15934
                                                                                                                       // 15935
        // sever all the references to parent scopes (after this cleanup, the current scope should                     // 15936
        // not be retained by any of our references and should be eligible for garbage collection)                     // 15937
        if (parent && parent.$$childHead == this) parent.$$childHead = this.$$nextSibling;                             // 15938
        if (parent && parent.$$childTail == this) parent.$$childTail = this.$$prevSibling;                             // 15939
        if (this.$$prevSibling) this.$$prevSibling.$$nextSibling = this.$$nextSibling;                                 // 15940
        if (this.$$nextSibling) this.$$nextSibling.$$prevSibling = this.$$prevSibling;                                 // 15941
                                                                                                                       // 15942
        // Disable listeners, watchers and apply/digest methods                                                        // 15943
        this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = noop;                        // 15944
        this.$on = this.$watch = this.$watchGroup = function() { return noop; };                                       // 15945
        this.$$listeners = {};                                                                                         // 15946
                                                                                                                       // 15947
        // All of the code below is bogus code that works around V8's memory leak via optimized code                   // 15948
        // and inline caches.                                                                                          // 15949
        //                                                                                                             // 15950
        // see:                                                                                                        // 15951
        // - https://code.google.com/p/v8/issues/detail?id=2073#c26                                                    // 15952
        // - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909                                   // 15953
        // - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451                                   // 15954
                                                                                                                       // 15955
        this.$parent = this.$$nextSibling = this.$$prevSibling = this.$$childHead =                                    // 15956
            this.$$childTail = this.$root = this.$$watchers = null;                                                    // 15957
      },                                                                                                               // 15958
                                                                                                                       // 15959
      /**                                                                                                              // 15960
       * @ngdoc method                                                                                                 // 15961
       * @name $rootScope.Scope#$eval                                                                                  // 15962
       * @kind function                                                                                                // 15963
       *                                                                                                               // 15964
       * @description                                                                                                  // 15965
       * Executes the `expression` on the current scope and returns the result. Any exceptions in                      // 15966
       * the expression are propagated (uncaught). This is useful when evaluating Angular                              // 15967
       * expressions.                                                                                                  // 15968
       *                                                                                                               // 15969
       * # Example                                                                                                     // 15970
       * ```js                                                                                                         // 15971
           var scope = ng.$rootScope.Scope();                                                                          // 15972
           scope.a = 1;                                                                                                // 15973
           scope.b = 2;                                                                                                // 15974
                                                                                                                       // 15975
           expect(scope.$eval('a+b')).toEqual(3);                                                                      // 15976
           expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);                               // 15977
       * ```                                                                                                           // 15978
       *                                                                                                               // 15979
       * @param {(string|function())=} expression An angular expression to be executed.                                // 15980
       *                                                                                                               // 15981
       *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.                    // 15982
       *    - `function(scope)`: execute the function with the current `scope` parameter.                              // 15983
       *                                                                                                               // 15984
       * @param {(object)=} locals Local variables object, useful for overriding values in scope.                      // 15985
       * @returns {*} The result of evaluating the expression.                                                         // 15986
       */                                                                                                              // 15987
      $eval: function(expr, locals) {                                                                                  // 15988
        return $parse(expr)(this, locals);                                                                             // 15989
      },                                                                                                               // 15990
                                                                                                                       // 15991
      /**                                                                                                              // 15992
       * @ngdoc method                                                                                                 // 15993
       * @name $rootScope.Scope#$evalAsync                                                                             // 15994
       * @kind function                                                                                                // 15995
       *                                                                                                               // 15996
       * @description                                                                                                  // 15997
       * Executes the expression on the current scope at a later point in time.                                        // 15998
       *                                                                                                               // 15999
       * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only                       // 16000
       * that:                                                                                                         // 16001
       *                                                                                                               // 16002
       *   - it will execute after the function that scheduled the evaluation (preferably before DOM                   // 16003
       *     rendering).                                                                                               // 16004
       *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after                    // 16005
       *     `expression` execution.                                                                                   // 16006
       *                                                                                                               // 16007
       * Any exceptions from the execution of the expression are forwarded to the                                      // 16008
       * {@link ng.$exceptionHandler $exceptionHandler} service.                                                       // 16009
       *                                                                                                               // 16010
       * __Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle                      // 16011
       * will be scheduled. However, it is encouraged to always call code that changes the model                       // 16012
       * from within an `$apply` call. That includes code evaluated via `$evalAsync`.                                  // 16013
       *                                                                                                               // 16014
       * @param {(string|function())=} expression An angular expression to be executed.                                // 16015
       *                                                                                                               // 16016
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.                     // 16017
       *    - `function(scope)`: execute the function with the current `scope` parameter.                              // 16018
       *                                                                                                               // 16019
       * @param {(object)=} locals Local variables object, useful for overriding values in scope.                      // 16020
       */                                                                                                              // 16021
      $evalAsync: function(expr, locals) {                                                                             // 16022
        // if we are outside of an $digest loop and this is the first time we are scheduling async                     // 16023
        // task also schedule async auto-flush                                                                         // 16024
        if (!$rootScope.$$phase && !asyncQueue.length) {                                                               // 16025
          $browser.defer(function() {                                                                                  // 16026
            if (asyncQueue.length) {                                                                                   // 16027
              $rootScope.$digest();                                                                                    // 16028
            }                                                                                                          // 16029
          });                                                                                                          // 16030
        }                                                                                                              // 16031
                                                                                                                       // 16032
        asyncQueue.push({scope: this, expression: expr, locals: locals});                                              // 16033
      },                                                                                                               // 16034
                                                                                                                       // 16035
      $$postDigest: function(fn) {                                                                                     // 16036
        postDigestQueue.push(fn);                                                                                      // 16037
      },                                                                                                               // 16038
                                                                                                                       // 16039
      /**                                                                                                              // 16040
       * @ngdoc method                                                                                                 // 16041
       * @name $rootScope.Scope#$apply                                                                                 // 16042
       * @kind function                                                                                                // 16043
       *                                                                                                               // 16044
       * @description                                                                                                  // 16045
       * `$apply()` is used to execute an expression in angular from outside of the angular                            // 16046
       * framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).                   // 16047
       * Because we are calling into the angular framework we need to perform proper scope life                        // 16048
       * cycle of {@link ng.$exceptionHandler exception handling},                                                     // 16049
       * {@link ng.$rootScope.Scope#$digest executing watches}.                                                        // 16050
       *                                                                                                               // 16051
       * ## Life cycle                                                                                                 // 16052
       *                                                                                                               // 16053
       * # Pseudo-Code of `$apply()`                                                                                   // 16054
       * ```js                                                                                                         // 16055
           function $apply(expr) {                                                                                     // 16056
             try {                                                                                                     // 16057
               return $eval(expr);                                                                                     // 16058
             } catch (e) {                                                                                             // 16059
               $exceptionHandler(e);                                                                                   // 16060
             } finally {                                                                                               // 16061
               $root.$digest();                                                                                        // 16062
             }                                                                                                         // 16063
           }                                                                                                           // 16064
       * ```                                                                                                           // 16065
       *                                                                                                               // 16066
       *                                                                                                               // 16067
       * Scope's `$apply()` method transitions through the following stages:                                           // 16068
       *                                                                                                               // 16069
       * 1. The {@link guide/expression expression} is executed using the                                              // 16070
       *    {@link ng.$rootScope.Scope#$eval $eval()} method.                                                          // 16071
       * 2. Any exceptions from the execution of the expression are forwarded to the                                   // 16072
       *    {@link ng.$exceptionHandler $exceptionHandler} service.                                                    // 16073
       * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the                     // 16074
       *    expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.                    // 16075
       *                                                                                                               // 16076
       *                                                                                                               // 16077
       * @param {(string|function())=} exp An angular expression to be executed.                                       // 16078
       *                                                                                                               // 16079
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.                     // 16080
       *    - `function(scope)`: execute the function with current `scope` parameter.                                  // 16081
       *                                                                                                               // 16082
       * @returns {*} The result of evaluating the expression.                                                         // 16083
       */                                                                                                              // 16084
      $apply: function(expr) {                                                                                         // 16085
        try {                                                                                                          // 16086
          beginPhase('$apply');                                                                                        // 16087
          try {                                                                                                        // 16088
            return this.$eval(expr);                                                                                   // 16089
          } finally {                                                                                                  // 16090
            clearPhase();                                                                                              // 16091
          }                                                                                                            // 16092
        } catch (e) {                                                                                                  // 16093
          $exceptionHandler(e);                                                                                        // 16094
        } finally {                                                                                                    // 16095
          try {                                                                                                        // 16096
            $rootScope.$digest();                                                                                      // 16097
          } catch (e) {                                                                                                // 16098
            $exceptionHandler(e);                                                                                      // 16099
            throw e;                                                                                                   // 16100
          }                                                                                                            // 16101
        }                                                                                                              // 16102
      },                                                                                                               // 16103
                                                                                                                       // 16104
      /**                                                                                                              // 16105
       * @ngdoc method                                                                                                 // 16106
       * @name $rootScope.Scope#$applyAsync                                                                            // 16107
       * @kind function                                                                                                // 16108
       *                                                                                                               // 16109
       * @description                                                                                                  // 16110
       * Schedule the invocation of $apply to occur at a later time. The actual time difference                        // 16111
       * varies across browsers, but is typically around ~10 milliseconds.                                             // 16112
       *                                                                                                               // 16113
       * This can be used to queue up multiple expressions which need to be evaluated in the same                      // 16114
       * digest.                                                                                                       // 16115
       *                                                                                                               // 16116
       * @param {(string|function())=} exp An angular expression to be executed.                                       // 16117
       *                                                                                                               // 16118
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.                     // 16119
       *    - `function(scope)`: execute the function with current `scope` parameter.                                  // 16120
       */                                                                                                              // 16121
      $applyAsync: function(expr) {                                                                                    // 16122
        var scope = this;                                                                                              // 16123
        expr && applyAsyncQueue.push($applyAsyncExpression);                                                           // 16124
        scheduleApplyAsync();                                                                                          // 16125
                                                                                                                       // 16126
        function $applyAsyncExpression() {                                                                             // 16127
          scope.$eval(expr);                                                                                           // 16128
        }                                                                                                              // 16129
      },                                                                                                               // 16130
                                                                                                                       // 16131
      /**                                                                                                              // 16132
       * @ngdoc method                                                                                                 // 16133
       * @name $rootScope.Scope#$on                                                                                    // 16134
       * @kind function                                                                                                // 16135
       *                                                                                                               // 16136
       * @description                                                                                                  // 16137
       * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for                            // 16138
       * discussion of event life cycle.                                                                               // 16139
       *                                                                                                               // 16140
       * The event listener function format is: `function(event, args...)`. The `event` object                         // 16141
       * passed into the listener has the following attributes:                                                        // 16142
       *                                                                                                               // 16143
       *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or                                 // 16144
       *     `$broadcast`-ed.                                                                                          // 16145
       *   - `currentScope` - `{Scope}`: the scope that is currently handling the event. Once the                      // 16146
       *     event propagates through the scope hierarchy, this property is set to null.                               // 16147
       *   - `name` - `{string}`: name of the event.                                                                   // 16148
       *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel                         // 16149
       *     further event propagation (available only for events that were `$emit`-ed).                               // 16150
       *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag                    // 16151
       *     to true.                                                                                                  // 16152
       *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.                                    // 16153
       *                                                                                                               // 16154
       * @param {string} name Event name to listen on.                                                                 // 16155
       * @param {function(event, ...args)} listener Function to call when the event is emitted.                        // 16156
       * @returns {function()} Returns a deregistration function for this listener.                                    // 16157
       */                                                                                                              // 16158
      $on: function(name, listener) {                                                                                  // 16159
        var namedListeners = this.$$listeners[name];                                                                   // 16160
        if (!namedListeners) {                                                                                         // 16161
          this.$$listeners[name] = namedListeners = [];                                                                // 16162
        }                                                                                                              // 16163
        namedListeners.push(listener);                                                                                 // 16164
                                                                                                                       // 16165
        var current = this;                                                                                            // 16166
        do {                                                                                                           // 16167
          if (!current.$$listenerCount[name]) {                                                                        // 16168
            current.$$listenerCount[name] = 0;                                                                         // 16169
          }                                                                                                            // 16170
          current.$$listenerCount[name]++;                                                                             // 16171
        } while ((current = current.$parent));                                                                         // 16172
                                                                                                                       // 16173
        var self = this;                                                                                               // 16174
        return function() {                                                                                            // 16175
          var indexOfListener = namedListeners.indexOf(listener);                                                      // 16176
          if (indexOfListener !== -1) {                                                                                // 16177
            namedListeners[indexOfListener] = null;                                                                    // 16178
            decrementListenerCount(self, 1, name);                                                                     // 16179
          }                                                                                                            // 16180
        };                                                                                                             // 16181
      },                                                                                                               // 16182
                                                                                                                       // 16183
                                                                                                                       // 16184
      /**                                                                                                              // 16185
       * @ngdoc method                                                                                                 // 16186
       * @name $rootScope.Scope#$emit                                                                                  // 16187
       * @kind function                                                                                                // 16188
       *                                                                                                               // 16189
       * @description                                                                                                  // 16190
       * Dispatches an event `name` upwards through the scope hierarchy notifying the                                  // 16191
       * registered {@link ng.$rootScope.Scope#$on} listeners.                                                         // 16192
       *                                                                                                               // 16193
       * The event life cycle starts at the scope on which `$emit` was called. All                                     // 16194
       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get                        // 16195
       * notified. Afterwards, the event traverses upwards toward the root scope and calls all                         // 16196
       * registered listeners along the way. The event will stop propagating if one of the listeners                   // 16197
       * cancels it.                                                                                                   // 16198
       *                                                                                                               // 16199
       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed                       // 16200
       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.                                              // 16201
       *                                                                                                               // 16202
       * @param {string} name Event name to emit.                                                                      // 16203
       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.              // 16204
       * @return {Object} Event object (see {@link ng.$rootScope.Scope#$on}).                                          // 16205
       */                                                                                                              // 16206
      $emit: function(name, args) {                                                                                    // 16207
        var empty = [],                                                                                                // 16208
            namedListeners,                                                                                            // 16209
            scope = this,                                                                                              // 16210
            stopPropagation = false,                                                                                   // 16211
            event = {                                                                                                  // 16212
              name: name,                                                                                              // 16213
              targetScope: scope,                                                                                      // 16214
              stopPropagation: function() {stopPropagation = true;},                                                   // 16215
              preventDefault: function() {                                                                             // 16216
                event.defaultPrevented = true;                                                                         // 16217
              },                                                                                                       // 16218
              defaultPrevented: false                                                                                  // 16219
            },                                                                                                         // 16220
            listenerArgs = concat([event], arguments, 1),                                                              // 16221
            i, length;                                                                                                 // 16222
                                                                                                                       // 16223
        do {                                                                                                           // 16224
          namedListeners = scope.$$listeners[name] || empty;                                                           // 16225
          event.currentScope = scope;                                                                                  // 16226
          for (i = 0, length = namedListeners.length; i < length; i++) {                                               // 16227
                                                                                                                       // 16228
            // if listeners were deregistered, defragment the array                                                    // 16229
            if (!namedListeners[i]) {                                                                                  // 16230
              namedListeners.splice(i, 1);                                                                             // 16231
              i--;                                                                                                     // 16232
              length--;                                                                                                // 16233
              continue;                                                                                                // 16234
            }                                                                                                          // 16235
            try {                                                                                                      // 16236
              //allow all listeners attached to the current scope to run                                               // 16237
              namedListeners[i].apply(null, listenerArgs);                                                             // 16238
            } catch (e) {                                                                                              // 16239
              $exceptionHandler(e);                                                                                    // 16240
            }                                                                                                          // 16241
          }                                                                                                            // 16242
          //if any listener on the current scope stops propagation, prevent bubbling                                   // 16243
          if (stopPropagation) {                                                                                       // 16244
            event.currentScope = null;                                                                                 // 16245
            return event;                                                                                              // 16246
          }                                                                                                            // 16247
          //traverse upwards                                                                                           // 16248
          scope = scope.$parent;                                                                                       // 16249
        } while (scope);                                                                                               // 16250
                                                                                                                       // 16251
        event.currentScope = null;                                                                                     // 16252
                                                                                                                       // 16253
        return event;                                                                                                  // 16254
      },                                                                                                               // 16255
                                                                                                                       // 16256
                                                                                                                       // 16257
      /**                                                                                                              // 16258
       * @ngdoc method                                                                                                 // 16259
       * @name $rootScope.Scope#$broadcast                                                                             // 16260
       * @kind function                                                                                                // 16261
       *                                                                                                               // 16262
       * @description                                                                                                  // 16263
       * Dispatches an event `name` downwards to all child scopes (and their children) notifying the                   // 16264
       * registered {@link ng.$rootScope.Scope#$on} listeners.                                                         // 16265
       *                                                                                                               // 16266
       * The event life cycle starts at the scope on which `$broadcast` was called. All                                // 16267
       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get                        // 16268
       * notified. Afterwards, the event propagates to all direct and indirect scopes of the current                   // 16269
       * scope and calls all registered listeners along the way. The event cannot be canceled.                         // 16270
       *                                                                                                               // 16271
       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed                       // 16272
       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.                                              // 16273
       *                                                                                                               // 16274
       * @param {string} name Event name to broadcast.                                                                 // 16275
       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.              // 16276
       * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}                                            // 16277
       */                                                                                                              // 16278
      $broadcast: function(name, args) {                                                                               // 16279
        var target = this,                                                                                             // 16280
            current = target,                                                                                          // 16281
            next = target,                                                                                             // 16282
            event = {                                                                                                  // 16283
              name: name,                                                                                              // 16284
              targetScope: target,                                                                                     // 16285
              preventDefault: function() {                                                                             // 16286
                event.defaultPrevented = true;                                                                         // 16287
              },                                                                                                       // 16288
              defaultPrevented: false                                                                                  // 16289
            };                                                                                                         // 16290
                                                                                                                       // 16291
        if (!target.$$listenerCount[name]) return event;                                                               // 16292
                                                                                                                       // 16293
        var listenerArgs = concat([event], arguments, 1),                                                              // 16294
            listeners, i, length;                                                                                      // 16295
                                                                                                                       // 16296
        //down while you can, then up and next sibling or up and next sibling until back at root                       // 16297
        while ((current = next)) {                                                                                     // 16298
          event.currentScope = current;                                                                                // 16299
          listeners = current.$$listeners[name] || [];                                                                 // 16300
          for (i = 0, length = listeners.length; i < length; i++) {                                                    // 16301
            // if listeners were deregistered, defragment the array                                                    // 16302
            if (!listeners[i]) {                                                                                       // 16303
              listeners.splice(i, 1);                                                                                  // 16304
              i--;                                                                                                     // 16305
              length--;                                                                                                // 16306
              continue;                                                                                                // 16307
            }                                                                                                          // 16308
                                                                                                                       // 16309
            try {                                                                                                      // 16310
              listeners[i].apply(null, listenerArgs);                                                                  // 16311
            } catch (e) {                                                                                              // 16312
              $exceptionHandler(e);                                                                                    // 16313
            }                                                                                                          // 16314
          }                                                                                                            // 16315
                                                                                                                       // 16316
          // Insanity Warning: scope depth-first traversal                                                             // 16317
          // yes, this code is a bit crazy, but it works and we have tests to prove it!                                // 16318
          // this piece should be kept in sync with the traversal in $digest                                           // 16319
          // (though it differs due to having the extra check for $$listenerCount)                                     // 16320
          if (!(next = ((current.$$listenerCount[name] && current.$$childHead) ||                                      // 16321
              (current !== target && current.$$nextSibling)))) {                                                       // 16322
            while (current !== target && !(next = current.$$nextSibling)) {                                            // 16323
              current = current.$parent;                                                                               // 16324
            }                                                                                                          // 16325
          }                                                                                                            // 16326
        }                                                                                                              // 16327
                                                                                                                       // 16328
        event.currentScope = null;                                                                                     // 16329
        return event;                                                                                                  // 16330
      }                                                                                                                // 16331
    };                                                                                                                 // 16332
                                                                                                                       // 16333
    var $rootScope = new Scope();                                                                                      // 16334
                                                                                                                       // 16335
    //The internal queues. Expose them on the $rootScope for debugging/testing purposes.                               // 16336
    var asyncQueue = $rootScope.$$asyncQueue = [];                                                                     // 16337
    var postDigestQueue = $rootScope.$$postDigestQueue = [];                                                           // 16338
    var applyAsyncQueue = $rootScope.$$applyAsyncQueue = [];                                                           // 16339
                                                                                                                       // 16340
    return $rootScope;                                                                                                 // 16341
                                                                                                                       // 16342
                                                                                                                       // 16343
    function beginPhase(phase) {                                                                                       // 16344
      if ($rootScope.$$phase) {                                                                                        // 16345
        throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase);                               // 16346
      }                                                                                                                // 16347
                                                                                                                       // 16348
      $rootScope.$$phase = phase;                                                                                      // 16349
    }                                                                                                                  // 16350
                                                                                                                       // 16351
    function clearPhase() {                                                                                            // 16352
      $rootScope.$$phase = null;                                                                                       // 16353
    }                                                                                                                  // 16354
                                                                                                                       // 16355
    function incrementWatchersCount(current, count) {                                                                  // 16356
      do {                                                                                                             // 16357
        current.$$watchersCount += count;                                                                              // 16358
      } while ((current = current.$parent));                                                                           // 16359
    }                                                                                                                  // 16360
                                                                                                                       // 16361
    function decrementListenerCount(current, count, name) {                                                            // 16362
      do {                                                                                                             // 16363
        current.$$listenerCount[name] -= count;                                                                        // 16364
                                                                                                                       // 16365
        if (current.$$listenerCount[name] === 0) {                                                                     // 16366
          delete current.$$listenerCount[name];                                                                        // 16367
        }                                                                                                              // 16368
      } while ((current = current.$parent));                                                                           // 16369
    }                                                                                                                  // 16370
                                                                                                                       // 16371
    /**                                                                                                                // 16372
     * function used as an initial value for watchers.                                                                 // 16373
     * because it's unique we can easily tell it apart from other values                                               // 16374
     */                                                                                                                // 16375
    function initWatchVal() {}                                                                                         // 16376
                                                                                                                       // 16377
    function flushApplyAsync() {                                                                                       // 16378
      while (applyAsyncQueue.length) {                                                                                 // 16379
        try {                                                                                                          // 16380
          applyAsyncQueue.shift()();                                                                                   // 16381
        } catch (e) {                                                                                                  // 16382
          $exceptionHandler(e);                                                                                        // 16383
        }                                                                                                              // 16384
      }                                                                                                                // 16385
      applyAsyncId = null;                                                                                             // 16386
    }                                                                                                                  // 16387
                                                                                                                       // 16388
    function scheduleApplyAsync() {                                                                                    // 16389
      if (applyAsyncId === null) {                                                                                     // 16390
        applyAsyncId = $browser.defer(function() {                                                                     // 16391
          $rootScope.$apply(flushApplyAsync);                                                                          // 16392
        });                                                                                                            // 16393
      }                                                                                                                // 16394
    }                                                                                                                  // 16395
  }];                                                                                                                  // 16396
}                                                                                                                      // 16397
                                                                                                                       // 16398
/**                                                                                                                    // 16399
 * @description                                                                                                        // 16400
 * Private service to sanitize uris for links and images. Used by $compile and $sanitize.                              // 16401
 */                                                                                                                    // 16402
function $$SanitizeUriProvider() {                                                                                     // 16403
  var aHrefSanitizationWhitelist = /^\s*(https?|ftp|mailto|tel|file):/,                                                // 16404
    imgSrcSanitizationWhitelist = /^\s*((https?|ftp|file|blob):|data:image\/)/;                                        // 16405
                                                                                                                       // 16406
  /**                                                                                                                  // 16407
   * @description                                                                                                      // 16408
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe                       // 16409
   * urls during a[href] sanitization.                                                                                 // 16410
   *                                                                                                                   // 16411
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.                               // 16412
   *                                                                                                                   // 16413
   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into                      // 16414
   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`                          // 16415
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,                     // 16416
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.                    // 16417
   *                                                                                                                   // 16418
   * @param {RegExp=} regexp New regexp to whitelist urls with.                                                        // 16419
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for                          // 16420
   *    chaining otherwise.                                                                                            // 16421
   */                                                                                                                  // 16422
  this.aHrefSanitizationWhitelist = function(regexp) {                                                                 // 16423
    if (isDefined(regexp)) {                                                                                           // 16424
      aHrefSanitizationWhitelist = regexp;                                                                             // 16425
      return this;                                                                                                     // 16426
    }                                                                                                                  // 16427
    return aHrefSanitizationWhitelist;                                                                                 // 16428
  };                                                                                                                   // 16429
                                                                                                                       // 16430
                                                                                                                       // 16431
  /**                                                                                                                  // 16432
   * @description                                                                                                      // 16433
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe                       // 16434
   * urls during img[src] sanitization.                                                                                // 16435
   *                                                                                                                   // 16436
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.                               // 16437
   *                                                                                                                   // 16438
   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into                     // 16439
   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`                         // 16440
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,                     // 16441
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.                    // 16442
   *                                                                                                                   // 16443
   * @param {RegExp=} regexp New regexp to whitelist urls with.                                                        // 16444
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for                          // 16445
   *    chaining otherwise.                                                                                            // 16446
   */                                                                                                                  // 16447
  this.imgSrcSanitizationWhitelist = function(regexp) {                                                                // 16448
    if (isDefined(regexp)) {                                                                                           // 16449
      imgSrcSanitizationWhitelist = regexp;                                                                            // 16450
      return this;                                                                                                     // 16451
    }                                                                                                                  // 16452
    return imgSrcSanitizationWhitelist;                                                                                // 16453
  };                                                                                                                   // 16454
                                                                                                                       // 16455
  this.$get = function() {                                                                                             // 16456
    return function sanitizeUri(uri, isImage) {                                                                        // 16457
      var regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;                                  // 16458
      var normalizedVal;                                                                                               // 16459
      normalizedVal = urlResolve(uri).href;                                                                            // 16460
      if (normalizedVal !== '' && !normalizedVal.match(regex)) {                                                       // 16461
        return 'unsafe:' + normalizedVal;                                                                              // 16462
      }                                                                                                                // 16463
      return uri;                                                                                                      // 16464
    };                                                                                                                 // 16465
  };                                                                                                                   // 16466
}                                                                                                                      // 16467
                                                                                                                       // 16468
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                           // 16469
 *     Any commits to this file should be reviewed with security in mind.  *                                           // 16470
 *   Changes to this file can potentially create security vulnerabilities. *                                           // 16471
 *          An approval from 2 Core members with history of modifying      *                                           // 16472
 *                         this file is required.                          *                                           // 16473
 *                                                                         *                                           // 16474
 *  Does the change somehow allow for arbitrary javascript to be executed? *                                           // 16475
 *    Or allows for someone to change the prototype of built-in objects?   *                                           // 16476
 *     Or gives undesired access to variables likes document or window?    *                                           // 16477
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */                                          // 16478
                                                                                                                       // 16479
var $sceMinErr = minErr('$sce');                                                                                       // 16480
                                                                                                                       // 16481
var SCE_CONTEXTS = {                                                                                                   // 16482
  HTML: 'html',                                                                                                        // 16483
  CSS: 'css',                                                                                                          // 16484
  URL: 'url',                                                                                                          // 16485
  // RESOURCE_URL is a subtype of URL used in contexts where a privileged resource is sourced from a                   // 16486
  // url.  (e.g. ng-include, script src, templateUrl)                                                                  // 16487
  RESOURCE_URL: 'resourceUrl',                                                                                         // 16488
  JS: 'js'                                                                                                             // 16489
};                                                                                                                     // 16490
                                                                                                                       // 16491
// Helper functions follow.                                                                                            // 16492
                                                                                                                       // 16493
function adjustMatcher(matcher) {                                                                                      // 16494
  if (matcher === 'self') {                                                                                            // 16495
    return matcher;                                                                                                    // 16496
  } else if (isString(matcher)) {                                                                                      // 16497
    // Strings match exactly except for 2 wildcards - '*' and '**'.                                                    // 16498
    // '*' matches any character except those from the set ':/.?&'.                                                    // 16499
    // '**' matches any character (like .* in a RegExp).                                                               // 16500
    // More than 2 *'s raises an error as it's ill defined.                                                            // 16501
    if (matcher.indexOf('***') > -1) {                                                                                 // 16502
      throw $sceMinErr('iwcard',                                                                                       // 16503
          'Illegal sequence *** in string matcher.  String: {0}', matcher);                                            // 16504
    }                                                                                                                  // 16505
    matcher = escapeForRegexp(matcher).                                                                                // 16506
                  replace('\\*\\*', '.*').                                                                             // 16507
                  replace('\\*', '[^:/.?&;]*');                                                                        // 16508
    return new RegExp('^' + matcher + '$');                                                                            // 16509
  } else if (isRegExp(matcher)) {                                                                                      // 16510
    // The only other type of matcher allowed is a Regexp.                                                             // 16511
    // Match entire URL / disallow partial matches.                                                                    // 16512
    // Flags are reset (i.e. no global, ignoreCase or multiline)                                                       // 16513
    return new RegExp('^' + matcher.source + '$');                                                                     // 16514
  } else {                                                                                                             // 16515
    throw $sceMinErr('imatcher',                                                                                       // 16516
        'Matchers may only be "self", string patterns or RegExp objects');                                             // 16517
  }                                                                                                                    // 16518
}                                                                                                                      // 16519
                                                                                                                       // 16520
                                                                                                                       // 16521
function adjustMatchers(matchers) {                                                                                    // 16522
  var adjustedMatchers = [];                                                                                           // 16523
  if (isDefined(matchers)) {                                                                                           // 16524
    forEach(matchers, function(matcher) {                                                                              // 16525
      adjustedMatchers.push(adjustMatcher(matcher));                                                                   // 16526
    });                                                                                                                // 16527
  }                                                                                                                    // 16528
  return adjustedMatchers;                                                                                             // 16529
}                                                                                                                      // 16530
                                                                                                                       // 16531
                                                                                                                       // 16532
/**                                                                                                                    // 16533
 * @ngdoc service                                                                                                      // 16534
 * @name $sceDelegate                                                                                                  // 16535
 * @kind function                                                                                                      // 16536
 *                                                                                                                     // 16537
 * @description                                                                                                        // 16538
 *                                                                                                                     // 16539
 * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict                     // 16540
 * Contextual Escaping (SCE)} services to AngularJS.                                                                   // 16541
 *                                                                                                                     // 16542
 * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of                      // 16543
 * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is                     // 16544
 * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to                        // 16545
 * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things                         // 16546
 * work because `$sce` delegates to `$sceDelegate` for these operations.                                               // 16547
 *                                                                                                                     // 16548
 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.                               // 16549
 *                                                                                                                     // 16550
 * The default instance of `$sceDelegate` should work out of the box with little pain.  While you                      // 16551
 * can override it completely to change the behavior of `$sce`, the common case would                                  // 16552
 * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting                     // 16553
 * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as                   // 16554
 * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist                                               // 16555
 * $sceDelegateProvider.resourceUrlWhitelist} and {@link                                                               // 16556
 * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}                             // 16557
 */                                                                                                                    // 16558
                                                                                                                       // 16559
/**                                                                                                                    // 16560
 * @ngdoc provider                                                                                                     // 16561
 * @name $sceDelegateProvider                                                                                          // 16562
 * @description                                                                                                        // 16563
 *                                                                                                                     // 16564
 * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate                       // 16565
 * $sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure                     // 16566
 * that the URLs used for sourcing Angular templates are safe.  Refer {@link                                           // 16567
 * ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and                         // 16568
 * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}                      // 16569
 *                                                                                                                     // 16570
 * For the general details about this service in Angular, read the main page for {@link ng.$sce                        // 16571
 * Strict Contextual Escaping (SCE)}.                                                                                  // 16572
 *                                                                                                                     // 16573
 * **Example**:  Consider the following case. <a name="example"></a>                                                   // 16574
 *                                                                                                                     // 16575
 * - your app is hosted at url `http://myapp.example.com/`                                                             // 16576
 * - but some of your templates are hosted on other domains you control such as                                        // 16577
 *   `http://srv01.assets.example.com/`,  `http://srv02.assets.example.com/`, etc.                                     // 16578
 * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.                                        // 16579
 *                                                                                                                     // 16580
 * Here is what a secure configuration for this scenario might look like:                                              // 16581
 *                                                                                                                     // 16582
 * ```                                                                                                                 // 16583
 *  angular.module('myApp', []).config(function($sceDelegateProvider) {                                                // 16584
 *    $sceDelegateProvider.resourceUrlWhitelist([                                                                      // 16585
 *      // Allow same origin resource loads.                                                                           // 16586
 *      'self',                                                                                                        // 16587
 *      // Allow loading from our assets domain.  Notice the difference between * and **.                              // 16588
 *      'http://srv*.assets.example.com/**'                                                                            // 16589
 *    ]);                                                                                                              // 16590
 *                                                                                                                     // 16591
 *    // The blacklist overrides the whitelist so the open redirect here is blocked.                                   // 16592
 *    $sceDelegateProvider.resourceUrlBlacklist([                                                                      // 16593
 *      'http://myapp.example.com/clickThru**'                                                                         // 16594
 *    ]);                                                                                                              // 16595
 *  });                                                                                                                // 16596
 * ```                                                                                                                 // 16597
 */                                                                                                                    // 16598
                                                                                                                       // 16599
function $SceDelegateProvider() {                                                                                      // 16600
  this.SCE_CONTEXTS = SCE_CONTEXTS;                                                                                    // 16601
                                                                                                                       // 16602
  // Resource URLs can also be trusted by policy.                                                                      // 16603
  var resourceUrlWhitelist = ['self'],                                                                                 // 16604
      resourceUrlBlacklist = [];                                                                                       // 16605
                                                                                                                       // 16606
  /**                                                                                                                  // 16607
   * @ngdoc method                                                                                                     // 16608
   * @name $sceDelegateProvider#resourceUrlWhitelist                                                                   // 16609
   * @kind function                                                                                                    // 16610
   *                                                                                                                   // 16611
   * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value                         // 16612
   *     provided.  This must be an array or null.  A snapshot of this array is used so further                        // 16613
   *     changes to the array are ignored.                                                                             // 16614
   *                                                                                                                   // 16615
   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items                        // 16616
   *     allowed in this array.                                                                                        // 16617
   *                                                                                                                   // 16618
   *     Note: **an empty whitelist array will block all URLs**!                                                       // 16619
   *                                                                                                                   // 16620
   * @return {Array} the currently set whitelist array.                                                                // 16621
   *                                                                                                                   // 16622
   * The **default value** when no whitelist has been explicitly set is `['self']` allowing only                       // 16623
   * same origin resource requests.                                                                                    // 16624
   *                                                                                                                   // 16625
   * @description                                                                                                      // 16626
   * Sets/Gets the whitelist of trusted resource URLs.                                                                 // 16627
   */                                                                                                                  // 16628
  this.resourceUrlWhitelist = function(value) {                                                                        // 16629
    if (arguments.length) {                                                                                            // 16630
      resourceUrlWhitelist = adjustMatchers(value);                                                                    // 16631
    }                                                                                                                  // 16632
    return resourceUrlWhitelist;                                                                                       // 16633
  };                                                                                                                   // 16634
                                                                                                                       // 16635
  /**                                                                                                                  // 16636
   * @ngdoc method                                                                                                     // 16637
   * @name $sceDelegateProvider#resourceUrlBlacklist                                                                   // 16638
   * @kind function                                                                                                    // 16639
   *                                                                                                                   // 16640
   * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value                         // 16641
   *     provided.  This must be an array or null.  A snapshot of this array is used so further                        // 16642
   *     changes to the array are ignored.                                                                             // 16643
   *                                                                                                                   // 16644
   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items                        // 16645
   *     allowed in this array.                                                                                        // 16646
   *                                                                                                                   // 16647
   *     The typical usage for the blacklist is to **block                                                             // 16648
   *     [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as                   // 16649
   *     these would otherwise be trusted but actually return content from the redirected domain.                      // 16650
   *                                                                                                                   // 16651
   *     Finally, **the blacklist overrides the whitelist** and has the final say.                                     // 16652
   *                                                                                                                   // 16653
   * @return {Array} the currently set blacklist array.                                                                // 16654
   *                                                                                                                   // 16655
   * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there                    // 16656
   * is no blacklist.)                                                                                                 // 16657
   *                                                                                                                   // 16658
   * @description                                                                                                      // 16659
   * Sets/Gets the blacklist of trusted resource URLs.                                                                 // 16660
   */                                                                                                                  // 16661
                                                                                                                       // 16662
  this.resourceUrlBlacklist = function(value) {                                                                        // 16663
    if (arguments.length) {                                                                                            // 16664
      resourceUrlBlacklist = adjustMatchers(value);                                                                    // 16665
    }                                                                                                                  // 16666
    return resourceUrlBlacklist;                                                                                       // 16667
  };                                                                                                                   // 16668
                                                                                                                       // 16669
  this.$get = ['$injector', function($injector) {                                                                      // 16670
                                                                                                                       // 16671
    var htmlSanitizer = function htmlSanitizer(html) {                                                                 // 16672
      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');                              // 16673
    };                                                                                                                 // 16674
                                                                                                                       // 16675
    if ($injector.has('$sanitize')) {                                                                                  // 16676
      htmlSanitizer = $injector.get('$sanitize');                                                                      // 16677
    }                                                                                                                  // 16678
                                                                                                                       // 16679
                                                                                                                       // 16680
    function matchUrl(matcher, parsedUrl) {                                                                            // 16681
      if (matcher === 'self') {                                                                                        // 16682
        return urlIsSameOrigin(parsedUrl);                                                                             // 16683
      } else {                                                                                                         // 16684
        // definitely a regex.  See adjustMatchers()                                                                   // 16685
        return !!matcher.exec(parsedUrl.href);                                                                         // 16686
      }                                                                                                                // 16687
    }                                                                                                                  // 16688
                                                                                                                       // 16689
    function isResourceUrlAllowedByPolicy(url) {                                                                       // 16690
      var parsedUrl = urlResolve(url.toString());                                                                      // 16691
      var i, n, allowed = false;                                                                                       // 16692
      // Ensure that at least one item from the whitelist allows this url.                                             // 16693
      for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {                                                       // 16694
        if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {                                                            // 16695
          allowed = true;                                                                                              // 16696
          break;                                                                                                       // 16697
        }                                                                                                              // 16698
      }                                                                                                                // 16699
      if (allowed) {                                                                                                   // 16700
        // Ensure that no item from the blacklist blocked this url.                                                    // 16701
        for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {                                                     // 16702
          if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {                                                          // 16703
            allowed = false;                                                                                           // 16704
            break;                                                                                                     // 16705
          }                                                                                                            // 16706
        }                                                                                                              // 16707
      }                                                                                                                // 16708
      return allowed;                                                                                                  // 16709
    }                                                                                                                  // 16710
                                                                                                                       // 16711
    function generateHolderType(Base) {                                                                                // 16712
      var holderType = function TrustedValueHolderType(trustedValue) {                                                 // 16713
        this.$$unwrapTrustedValue = function() {                                                                       // 16714
          return trustedValue;                                                                                         // 16715
        };                                                                                                             // 16716
      };                                                                                                               // 16717
      if (Base) {                                                                                                      // 16718
        holderType.prototype = new Base();                                                                             // 16719
      }                                                                                                                // 16720
      holderType.prototype.valueOf = function sceValueOf() {                                                           // 16721
        return this.$$unwrapTrustedValue();                                                                            // 16722
      };                                                                                                               // 16723
      holderType.prototype.toString = function sceToString() {                                                         // 16724
        return this.$$unwrapTrustedValue().toString();                                                                 // 16725
      };                                                                                                               // 16726
      return holderType;                                                                                               // 16727
    }                                                                                                                  // 16728
                                                                                                                       // 16729
    var trustedValueHolderBase = generateHolderType(),                                                                 // 16730
        byType = {};                                                                                                   // 16731
                                                                                                                       // 16732
    byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);                                            // 16733
    byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);                                             // 16734
    byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);                                             // 16735
    byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);                                              // 16736
    byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);                                  // 16737
                                                                                                                       // 16738
    /**                                                                                                                // 16739
     * @ngdoc method                                                                                                   // 16740
     * @name $sceDelegate#trustAs                                                                                      // 16741
     *                                                                                                                 // 16742
     * @description                                                                                                    // 16743
     * Returns an object that is trusted by angular for use in specified strict                                        // 16744
     * contextual escaping contexts (such as ng-bind-html, ng-include, any src                                         // 16745
     * attribute interpolation, any dom event binding attribute interpolation                                          // 16746
     * such as for onclick,  etc.) that uses the provided value.                                                       // 16747
     * See {@link ng.$sce $sce} for enabling strict contextual escaping.                                               // 16748
     *                                                                                                                 // 16749
     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,                        // 16750
     *   resourceUrl, html, js and css.                                                                                // 16751
     * @param {*} value The value that that should be considered trusted/safe.                                         // 16752
     * @returns {*} A value that can be used to stand in for the provided `value` in places                            // 16753
     * where Angular expects a $sce.trustAs() return value.                                                            // 16754
     */                                                                                                                // 16755
    function trustAs(type, trustedValue) {                                                                             // 16756
      var Constructor = (byType.hasOwnProperty(type) ? byType[type] : null);                                           // 16757
      if (!Constructor) {                                                                                              // 16758
        throw $sceMinErr('icontext',                                                                                   // 16759
            'Attempted to trust a value in invalid context. Context: {0}; Value: {1}',                                 // 16760
            type, trustedValue);                                                                                       // 16761
      }                                                                                                                // 16762
      if (trustedValue === null || isUndefined(trustedValue) || trustedValue === '') {                                 // 16763
        return trustedValue;                                                                                           // 16764
      }                                                                                                                // 16765
      // All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting                    // 16766
      // mutable objects, we ensure here that the value passed in is actually a string.                                // 16767
      if (typeof trustedValue !== 'string') {                                                                          // 16768
        throw $sceMinErr('itype',                                                                                      // 16769
            'Attempted to trust a non-string value in a content requiring a string: Context: {0}',                     // 16770
            type);                                                                                                     // 16771
      }                                                                                                                // 16772
      return new Constructor(trustedValue);                                                                            // 16773
    }                                                                                                                  // 16774
                                                                                                                       // 16775
    /**                                                                                                                // 16776
     * @ngdoc method                                                                                                   // 16777
     * @name $sceDelegate#valueOf                                                                                      // 16778
     *                                                                                                                 // 16779
     * @description                                                                                                    // 16780
     * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs                     // 16781
     * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link                                       // 16782
     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.                                                                // 16783
     *                                                                                                                 // 16784
     * If the passed parameter is not a value that had been returned by {@link                                         // 16785
     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.                                              // 16786
     *                                                                                                                 // 16787
     * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}                   // 16788
     *      call or anything else.                                                                                     // 16789
     * @returns {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs                         // 16790
     *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns                        // 16791
     *     `value` unchanged.                                                                                          // 16792
     */                                                                                                                // 16793
    function valueOf(maybeTrusted) {                                                                                   // 16794
      if (maybeTrusted instanceof trustedValueHolderBase) {                                                            // 16795
        return maybeTrusted.$$unwrapTrustedValue();                                                                    // 16796
      } else {                                                                                                         // 16797
        return maybeTrusted;                                                                                           // 16798
      }                                                                                                                // 16799
    }                                                                                                                  // 16800
                                                                                                                       // 16801
    /**                                                                                                                // 16802
     * @ngdoc method                                                                                                   // 16803
     * @name $sceDelegate#getTrusted                                                                                   // 16804
     *                                                                                                                 // 16805
     * @description                                                                                                    // 16806
     * Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and                           // 16807
     * returns the originally supplied value if the queried context type is a supertype of the                         // 16808
     * created type.  If this condition isn't satisfied, throws an exception.                                          // 16809
     *                                                                                                                 // 16810
     * @param {string} type The kind of context in which this value is to be used.                                     // 16811
     * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs                                    // 16812
     *     `$sceDelegate.trustAs`} call.                                                                               // 16813
     * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#trustAs                            // 16814
     *     `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.                          // 16815
     */                                                                                                                // 16816
    function getTrusted(type, maybeTrusted) {                                                                          // 16817
      if (maybeTrusted === null || isUndefined(maybeTrusted) || maybeTrusted === '') {                                 // 16818
        return maybeTrusted;                                                                                           // 16819
      }                                                                                                                // 16820
      var constructor = (byType.hasOwnProperty(type) ? byType[type] : null);                                           // 16821
      if (constructor && maybeTrusted instanceof constructor) {                                                        // 16822
        return maybeTrusted.$$unwrapTrustedValue();                                                                    // 16823
      }                                                                                                                // 16824
      // If we get here, then we may only take one of two actions.                                                     // 16825
      // 1. sanitize the value for the requested type, or                                                              // 16826
      // 2. throw an exception.                                                                                        // 16827
      if (type === SCE_CONTEXTS.RESOURCE_URL) {                                                                        // 16828
        if (isResourceUrlAllowedByPolicy(maybeTrusted)) {                                                              // 16829
          return maybeTrusted;                                                                                         // 16830
        } else {                                                                                                       // 16831
          throw $sceMinErr('insecurl',                                                                                 // 16832
              'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}',                       // 16833
              maybeTrusted.toString());                                                                                // 16834
        }                                                                                                              // 16835
      } else if (type === SCE_CONTEXTS.HTML) {                                                                         // 16836
        return htmlSanitizer(maybeTrusted);                                                                            // 16837
      }                                                                                                                // 16838
      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');                              // 16839
    }                                                                                                                  // 16840
                                                                                                                       // 16841
    return { trustAs: trustAs,                                                                                         // 16842
             getTrusted: getTrusted,                                                                                   // 16843
             valueOf: valueOf };                                                                                       // 16844
  }];                                                                                                                  // 16845
}                                                                                                                      // 16846
                                                                                                                       // 16847
                                                                                                                       // 16848
/**                                                                                                                    // 16849
 * @ngdoc provider                                                                                                     // 16850
 * @name $sceProvider                                                                                                  // 16851
 * @description                                                                                                        // 16852
 *                                                                                                                     // 16853
 * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.                          // 16854
 * -   enable/disable Strict Contextual Escaping (SCE) in a module                                                     // 16855
 * -   override the default implementation with a custom delegate                                                      // 16856
 *                                                                                                                     // 16857
 * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.                                                   // 16858
 */                                                                                                                    // 16859
                                                                                                                       // 16860
/* jshint maxlen: false*/                                                                                              // 16861
                                                                                                                       // 16862
/**                                                                                                                    // 16863
 * @ngdoc service                                                                                                      // 16864
 * @name $sce                                                                                                          // 16865
 * @kind function                                                                                                      // 16866
 *                                                                                                                     // 16867
 * @description                                                                                                        // 16868
 *                                                                                                                     // 16869
 * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.                                 // 16870
 *                                                                                                                     // 16871
 * # Strict Contextual Escaping                                                                                        // 16872
 *                                                                                                                     // 16873
 * Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain                          // 16874
 * contexts to result in a value that is marked as safe to use for that context.  One example of                       // 16875
 * such a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer                       // 16876
 * to these contexts as privileged or SCE contexts.                                                                    // 16877
 *                                                                                                                     // 16878
 * As of version 1.2, Angular ships with SCE enabled by default.                                                       // 16879
 *                                                                                                                     // 16880
 * Note:  When enabled (the default), IE<11 in quirks mode is not supported.  In this mode, IE<11 allow                // 16881
 * one to execute arbitrary javascript by the use of the expression() syntax.  Refer                                   // 16882
 * <http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.                   // 16883
 * You can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`                   // 16884
 * to the top of your HTML document.                                                                                   // 16885
 *                                                                                                                     // 16886
 * SCE assists in writing code in way that (a) is secure by default and (b) makes auditing for                         // 16887
 * security vulnerabilities such as XSS, clickjacking, etc. a lot easier.                                              // 16888
 *                                                                                                                     // 16889
 * Here's an example of a binding in a privileged context:                                                             // 16890
 *                                                                                                                     // 16891
 * ```                                                                                                                 // 16892
 * <input ng-model="userHtml" aria-label="User input">                                                                 // 16893
 * <div ng-bind-html="userHtml"></div>                                                                                 // 16894
 * ```                                                                                                                 // 16895
 *                                                                                                                     // 16896
 * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE                                 // 16897
 * disabled, this application allows the user to render arbitrary HTML into the DIV.                                   // 16898
 * In a more realistic example, one may be rendering user comments, blog articles, etc. via                            // 16899
 * bindings.  (HTML is just one example of a context where rendering user controlled input creates                     // 16900
 * security vulnerabilities.)                                                                                          // 16901
 *                                                                                                                     // 16902
 * For the case of HTML, you might use a library, either on the client side, or on the server side,                    // 16903
 * to sanitize unsafe HTML before binding to the value and rendering it in the document.                               // 16904
 *                                                                                                                     // 16905
 * How would you ensure that every place that used these types of bindings was bound to a value that                   // 16906
 * was sanitized by your library (or returned as safe for rendering by your server?)  How can you                      // 16907
 * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some                       // 16908
 * properties/fields and forgot to update the binding to the sanitized value?                                          // 16909
 *                                                                                                                     // 16910
 * To be secure by default, you want to ensure that any such bindings are disallowed unless you can                    // 16911
 * determine that something explicitly says it's safe to use a value for binding in that                               // 16912
 * context.  You can then audit your code (a simple grep would do) to ensure that this is only done                    // 16913
 * for those values that you can easily tell are safe - because they were received from your server,                   // 16914
 * sanitized by your library, etc.  You can organize your codebase to help with this - perhaps                         // 16915
 * allowing only the files in a specific directory to do this.  Ensuring that the internal API                         // 16916
 * exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.                   // 16917
 *                                                                                                                     // 16918
 * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}                                // 16919
 * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to                               // 16920
 * obtain values that will be accepted by SCE / privileged contexts.                                                   // 16921
 *                                                                                                                     // 16922
 *                                                                                                                     // 16923
 * ## How does it work?                                                                                                // 16924
 *                                                                                                                     // 16925
 * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted                    // 16926
 * $sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link                          // 16927
 * ng.$sce#parseAs $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the                  // 16928
 * {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.                              // 16929
 *                                                                                                                     // 16930
 * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link                                               // 16931
 * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly                        // 16932
 * simplified):                                                                                                        // 16933
 *                                                                                                                     // 16934
 * ```                                                                                                                 // 16935
 * var ngBindHtmlDirective = ['$sce', function($sce) {                                                                 // 16936
 *   return function(scope, element, attr) {                                                                           // 16937
 *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {                                               // 16938
 *       element.html(value || '');                                                                                    // 16939
 *     });                                                                                                             // 16940
 *   };                                                                                                                // 16941
 * }];                                                                                                                 // 16942
 * ```                                                                                                                 // 16943
 *                                                                                                                     // 16944
 * ## Impact on loading templates                                                                                      // 16945
 *                                                                                                                     // 16946
 * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as                           // 16947
 * `templateUrl`'s specified by {@link guide/directive directives}.                                                    // 16948
 *                                                                                                                     // 16949
 * By default, Angular only loads templates from the same domain and protocol as the application                       // 16950
 * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl                                             // 16951
 * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or                       // 16952
 * protocols, you may either either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist                      // 16953
 * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.                                           // 16954
 *                                                                                                                     // 16955
 * *Please note*:                                                                                                      // 16956
 * The browser's                                                                                                       // 16957
 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)         // 16958
 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)                                              // 16959
 * policy apply in addition to this and may further restrict whether the template is successfully                      // 16960
 * loaded.  This means that without the right CORS policy, loading templates from a different domain                   // 16961
 * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some                       // 16962
 * browsers.                                                                                                           // 16963
 *                                                                                                                     // 16964
 * ## This feels like too much overhead                                                                                // 16965
 *                                                                                                                     // 16966
 * It's important to remember that SCE only applies to interpolation expressions.                                      // 16967
 *                                                                                                                     // 16968
 * If your expressions are constant literals, they're automatically trusted and you don't need to                      // 16969
 * call `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.                                     // 16970
 * `<div ng-bind-html="'<b>implicitly trusted</b>'"></div>`) just works.                                               // 16971
 *                                                                                                                     // 16972
 * Additionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them                       // 16973
 * through {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.                                  // 16974
 *                                                                                                                     // 16975
 * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load                     // 16976
 * templates in `ng-include` from your application's domain without having to even know about SCE.                     // 16977
 * It blocks loading templates from other domains or loading templates over http from an https                         // 16978
 * served document.  You can change these by setting your own custom {@link                                            // 16979
 * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link                                                 // 16980
 * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.                                    // 16981
 *                                                                                                                     // 16982
 * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an                    // 16983
 * application that's secure and can be audited to verify that with much more ease than bolting                        // 16984
 * security onto an application later.                                                                                 // 16985
 *                                                                                                                     // 16986
 * <a name="contexts"></a>                                                                                             // 16987
 * ## What trusted context types are supported?                                                                        // 16988
 *                                                                                                                     // 16989
 * | Context             | Notes          |                                                                            // 16990
 * |---------------------|----------------|                                                                            // 16991
 * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |
 * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |
 * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |
 * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |
 * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |
 *                                                                                                                     // 16997
 * ## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name="resourceUrlPatternItem"></a>
 *                                                                                                                     // 16999
 *  Each element in these arrays must be one of the following:                                                         // 17000
 *                                                                                                                     // 17001
 *  - **'self'**                                                                                                       // 17002
 *    - The special **string**, `'self'`, can be used to match against all URLs of the **same                          // 17003
 *      domain** as the application document using the **same protocol**.                                              // 17004
 *  - **String** (except the special value `'self'`)                                                                   // 17005
 *    - The string is matched against the full *normalized / absolute URL* of the resource                             // 17006
 *      being tested (substring matches are not good enough.)                                                          // 17007
 *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters                             // 17008
 *      match themselves.                                                                                              // 17009
 *    - `*`: matches zero or more occurrences of any character other than one of the following 6                       // 17010
 *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and '`;`'.  It's a useful wildcard for use                       // 17011
 *      in a whitelist.                                                                                                // 17012
 *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not                                  // 17013
 *      appropriate for use in a scheme, domain, etc. as it would match too much.  (e.g.                               // 17014
 *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might                        // 17015
 *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.                             // 17016
 *      http://foo.example.com/templates/**).                                                                          // 17017
 *  - **RegExp** (*see caveat below*)                                                                                  // 17018
 *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax                   // 17019
 *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to                               // 17020
 *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should                   // 17021
 *      have good test coverage).  For instance, the use of `.` in the regex is correct only in a                      // 17022
 *      small number of cases.  A `.` character in the regex used when matching the scheme or a                        // 17023
 *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It                     // 17024
 *      is highly recommended to use the string patterns and only fall back to regular expressions                     // 17025
 *      as a last resort.                                                                                              // 17026
 *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is                               // 17027
 *      matched against the **entire** *normalized / absolute URL* of the resource being tested                        // 17028
 *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags                             // 17029
 *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.                                     // 17030
 *    - If you are generating your JavaScript from some other templating engine (not                                   // 17031
 *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),                        // 17032
 *      remember to escape your regular expression (and be aware that you might need more than                         // 17033
 *      one level of escaping depending on your templating engine and the way you interpolated                         // 17034
 *      the value.)  Do make use of your platform's escaping mechanism as it might be good                             // 17035
 *      enough before coding your own.  E.g. Ruby has                                                                  // 17036
 *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)                           // 17037
 *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).                                  // 17038
 *      Javascript lacks a similar built in function for escaping.  Take a look at Google                              // 17039
 *      Closure library's [goog.string.regExpEscape(s)](                                                               // 17040
 *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).             // 17041
 *                                                                                                                     // 17042
 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.                                          // 17043
 *                                                                                                                     // 17044
 * ## Show me an example using SCE.                                                                                    // 17045
 *                                                                                                                     // 17046
 * <example module="mySceApp" deps="angular-sanitize.js">                                                              // 17047
 * <file name="index.html">                                                                                            // 17048
 *   <div ng-controller="AppController as myCtrl">                                                                     // 17049
 *     <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>                          // 17050
 *     <b>User comments</b><br>                                                                                        // 17051
 *     By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when                         // 17052
 *     $sanitize is available.  If $sanitize isn't available, this results in an error instead of an                   // 17053
 *     exploit.                                                                                                        // 17054
 *     <div class="well">                                                                                              // 17055
 *       <div ng-repeat="userComment in myCtrl.userComments">                                                          // 17056
 *         <b>{{userComment.name}}</b>:                                                                                // 17057
 *         <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>                                    // 17058
 *         <br>                                                                                                        // 17059
 *       </div>                                                                                                        // 17060
 *     </div>                                                                                                          // 17061
 *   </div>                                                                                                            // 17062
 * </file>                                                                                                             // 17063
 *                                                                                                                     // 17064
 * <file name="script.js">                                                                                             // 17065
 *   angular.module('mySceApp', ['ngSanitize'])                                                                        // 17066
 *     .controller('AppController', ['$http', '$templateCache', '$sce',                                                // 17067
 *       function($http, $templateCache, $sce) {                                                                       // 17068
 *         var self = this;                                                                                            // 17069
 *         $http.get("test_data.json", {cache: $templateCache}).success(function(userComments) {                       // 17070
 *           self.userComments = userComments;                                                                         // 17071
 *         });                                                                                                         // 17072
 *         self.explicitlyTrustedHtml = $sce.trustAsHtml(                                                              // 17073
 *             '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +                         // 17074
 *             'sanitization.&quot;">Hover over this text.</span>');                                                   // 17075
 *       }]);                                                                                                          // 17076
 * </file>                                                                                                             // 17077
 *                                                                                                                     // 17078
 * <file name="test_data.json">                                                                                        // 17079
 * [                                                                                                                   // 17080
 *   { "name": "Alice",                                                                                                // 17081
 *     "htmlComment":                                                                                                  // 17082
 *         "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"                     // 17083
 *   },                                                                                                                // 17084
 *   { "name": "Bob",                                                                                                  // 17085
 *     "htmlComment": "<i>Yes!</i>  Am I the only other one?"                                                          // 17086
 *   }                                                                                                                 // 17087
 * ]                                                                                                                   // 17088
 * </file>                                                                                                             // 17089
 *                                                                                                                     // 17090
 * <file name="protractor.js" type="protractor">                                                                       // 17091
 *   describe('SCE doc demo', function() {                                                                             // 17092
 *     it('should sanitize untrusted values', function() {                                                             // 17093
 *       expect(element.all(by.css('.htmlComment')).first().getInnerHtml())                                            // 17094
 *           .toBe('<span>Is <i>anyone</i> reading this?</span>');                                                     // 17095
 *     });                                                                                                             // 17096
 *                                                                                                                     // 17097
 *     it('should NOT sanitize explicitly trusted values', function() {                                                // 17098
 *       expect(element(by.id('explicitlyTrustedHtml')).getInnerHtml()).toBe(                                          // 17099
 *           '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +                           // 17100
 *           'sanitization.&quot;">Hover over this text.</span>');                                                     // 17101
 *     });                                                                                                             // 17102
 *   });                                                                                                               // 17103
 * </file>                                                                                                             // 17104
 * </example>                                                                                                          // 17105
 *                                                                                                                     // 17106
 *                                                                                                                     // 17107
 *                                                                                                                     // 17108
 * ## Can I disable SCE completely?                                                                                    // 17109
 *                                                                                                                     // 17110
 * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits                     // 17111
 * for little coding overhead.  It will be much harder to take an SCE disabled application and                         // 17112
 * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE                    // 17113
 * for cases where you have a lot of existing code that was written before SCE was introduced and                      // 17114
 * you're migrating them a module at a time.                                                                           // 17115
 *                                                                                                                     // 17116
 * That said, here's how you can completely disable SCE:                                                               // 17117
 *                                                                                                                     // 17118
 * ```                                                                                                                 // 17119
 * angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {                                     // 17120
 *   // Completely disable SCE.  For demonstration purposes only!                                                      // 17121
 *   // Do not use in new projects.                                                                                    // 17122
 *   $sceProvider.enabled(false);                                                                                      // 17123
 * });                                                                                                                 // 17124
 * ```                                                                                                                 // 17125
 *                                                                                                                     // 17126
 */                                                                                                                    // 17127
/* jshint maxlen: 100 */                                                                                               // 17128
                                                                                                                       // 17129
function $SceProvider() {                                                                                              // 17130
  var enabled = true;                                                                                                  // 17131
                                                                                                                       // 17132
  /**                                                                                                                  // 17133
   * @ngdoc method                                                                                                     // 17134
   * @name $sceProvider#enabled                                                                                        // 17135
   * @kind function                                                                                                    // 17136
   *                                                                                                                   // 17137
   * @param {boolean=} value If provided, then enables/disables SCE.                                                   // 17138
   * @return {boolean} true if SCE is enabled, false otherwise.                                                        // 17139
   *                                                                                                                   // 17140
   * @description                                                                                                      // 17141
   * Enables/disables SCE and returns the current value.                                                               // 17142
   */                                                                                                                  // 17143
  this.enabled = function(value) {                                                                                     // 17144
    if (arguments.length) {                                                                                            // 17145
      enabled = !!value;                                                                                               // 17146
    }                                                                                                                  // 17147
    return enabled;                                                                                                    // 17148
  };                                                                                                                   // 17149
                                                                                                                       // 17150
                                                                                                                       // 17151
  /* Design notes on the default implementation for SCE.                                                               // 17152
   *                                                                                                                   // 17153
   * The API contract for the SCE delegate                                                                             // 17154
   * -------------------------------------                                                                             // 17155
   * The SCE delegate object must provide the following 3 methods:                                                     // 17156
   *                                                                                                                   // 17157
   * - trustAs(contextEnum, value)                                                                                     // 17158
   *     This method is used to tell the SCE service that the provided value is OK to use in the                       // 17159
   *     contexts specified by contextEnum.  It must return an object that will be accepted by                         // 17160
   *     getTrusted() for a compatible contextEnum and return this value.                                              // 17161
   *                                                                                                                   // 17162
   * - valueOf(value)                                                                                                  // 17163
   *     For values that were not produced by trustAs(), return them as is.  For values that were                      // 17164
   *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if                        // 17165
   *     trustAs is wrapping the given values into some type, this operation unwraps it when given                     // 17166
   *     such a value.                                                                                                 // 17167
   *                                                                                                                   // 17168
   * - getTrusted(contextEnum, value)                                                                                  // 17169
   *     This function should return the a value that is safe to use in the context specified by                       // 17170
   *     contextEnum or throw and exception otherwise.                                                                 // 17171
   *                                                                                                                   // 17172
   * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be                         // 17173
   * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For                       // 17174
   * instance, an implementation could maintain a registry of all trusted objects by context.  In                      // 17175
   * such a case, trustAs() would return the same object that was passed in.  getTrusted() would                       // 17176
   * return the same object passed in if it was found in the registry under a compatible context or                    // 17177
   * throw an exception otherwise.  An implementation might only wrap values some of the time based                    // 17178
   * on some criteria.  getTrusted() might return a value and not throw an exception for special                       // 17179
   * constants or objects even if not wrapped.  All such implementations fulfill this contract.                        // 17180
   *                                                                                                                   // 17181
   *                                                                                                                   // 17182
   * A note on the inheritance model for SCE contexts                                                                  // 17183
   * ------------------------------------------------                                                                  // 17184
   * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This                   // 17185
   * is purely an implementation details.                                                                              // 17186
   *                                                                                                                   // 17187
   * The contract is simply this:                                                                                      // 17188
   *                                                                                                                   // 17189
   *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)                      // 17190
   *     will also succeed.                                                                                            // 17191
   *                                                                                                                   // 17192
   * Inheritance happens to capture this in a natural way.  In some future, we                                         // 17193
   * may not use inheritance anymore.  That is OK because no code outside of                                           // 17194
   * sce.js and sceSpecs.js would need to be aware of this detail.                                                     // 17195
   */                                                                                                                  // 17196
                                                                                                                       // 17197
  this.$get = ['$parse', '$sceDelegate', function(                                                                     // 17198
                $parse,   $sceDelegate) {                                                                              // 17199
    // Prereq: Ensure that we're not running in IE<11 quirks mode.  In that mode, IE < 11 allow                        // 17200
    // the "expression(javascript expression)" syntax which is insecure.                                               // 17201
    if (enabled && msie < 8) {                                                                                         // 17202
      throw $sceMinErr('iequirks',                                                                                     // 17203
        'Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks ' +                      // 17204
        'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' +                        // 17205
        'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');                                 // 17206
    }                                                                                                                  // 17207
                                                                                                                       // 17208
    var sce = shallowCopy(SCE_CONTEXTS);                                                                               // 17209
                                                                                                                       // 17210
    /**                                                                                                                // 17211
     * @ngdoc method                                                                                                   // 17212
     * @name $sce#isEnabled                                                                                            // 17213
     * @kind function                                                                                                  // 17214
     *                                                                                                                 // 17215
     * @return {Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you                   // 17216
     * have to do it at module config time on {@link ng.$sceProvider $sceProvider}.                                    // 17217
     *                                                                                                                 // 17218
     * @description                                                                                                    // 17219
     * Returns a boolean indicating if SCE is enabled.                                                                 // 17220
     */                                                                                                                // 17221
    sce.isEnabled = function() {                                                                                       // 17222
      return enabled;                                                                                                  // 17223
    };                                                                                                                 // 17224
    sce.trustAs = $sceDelegate.trustAs;                                                                                // 17225
    sce.getTrusted = $sceDelegate.getTrusted;                                                                          // 17226
    sce.valueOf = $sceDelegate.valueOf;                                                                                // 17227
                                                                                                                       // 17228
    if (!enabled) {                                                                                                    // 17229
      sce.trustAs = sce.getTrusted = function(type, value) { return value; };                                          // 17230
      sce.valueOf = identity;                                                                                          // 17231
    }                                                                                                                  // 17232
                                                                                                                       // 17233
    /**                                                                                                                // 17234
     * @ngdoc method                                                                                                   // 17235
     * @name $sce#parseAs                                                                                              // 17236
     *                                                                                                                 // 17237
     * @description                                                                                                    // 17238
     * Converts Angular {@link guide/expression expression} into a function.  This is like {@link                      // 17239
     * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it                    // 17240
     * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,                             // 17241
     * *result*)}                                                                                                      // 17242
     *                                                                                                                 // 17243
     * @param {string} type The kind of SCE context in which this result will be used.                                 // 17244
     * @param {string} expression String expression to compile.                                                        // 17245
     * @returns {function(context, locals)} a function which represents the compiled expression:                       // 17246
     *                                                                                                                 // 17247
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings                   // 17248
     *      are evaluated against (typically a scope object).                                                          // 17249
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                   // 17250
     *      `context`.                                                                                                 // 17251
     */                                                                                                                // 17252
    sce.parseAs = function sceParseAs(type, expr) {                                                                    // 17253
      var parsed = $parse(expr);                                                                                       // 17254
      if (parsed.literal && parsed.constant) {                                                                         // 17255
        return parsed;                                                                                                 // 17256
      } else {                                                                                                         // 17257
        return $parse(expr, function(value) {                                                                          // 17258
          return sce.getTrusted(type, value);                                                                          // 17259
        });                                                                                                            // 17260
      }                                                                                                                // 17261
    };                                                                                                                 // 17262
                                                                                                                       // 17263
    /**                                                                                                                // 17264
     * @ngdoc method                                                                                                   // 17265
     * @name $sce#trustAs                                                                                              // 17266
     *                                                                                                                 // 17267
     * @description                                                                                                    // 17268
     * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,                                  // 17269
     * returns an object that is trusted by angular for use in specified strict contextual                             // 17270
     * escaping contexts (such as ng-bind-html, ng-include, any src attribute                                          // 17271
     * interpolation, any dom event binding attribute interpolation such as for onclick,  etc.)                        // 17272
     * that uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual                        // 17273
     * escaping.                                                                                                       // 17274
     *                                                                                                                 // 17275
     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,                        // 17276
     *   resourceUrl, html, js and css.                                                                                // 17277
     * @param {*} value The value that that should be considered trusted/safe.                                         // 17278
     * @returns {*} A value that can be used to stand in for the provided `value` in places                            // 17279
     * where Angular expects a $sce.trustAs() return value.                                                            // 17280
     */                                                                                                                // 17281
                                                                                                                       // 17282
    /**                                                                                                                // 17283
     * @ngdoc method                                                                                                   // 17284
     * @name $sce#trustAsHtml                                                                                          // 17285
     *                                                                                                                 // 17286
     * @description                                                                                                    // 17287
     * Shorthand method.  `$sce.trustAsHtml(value)` →                                                                  // 17288
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}                                    // 17289
     *                                                                                                                 // 17290
     * @param {*} value The value to trustAs.                                                                          // 17291
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedHtml                                      // 17292
     *     $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives                           // 17293
     *     only accept expressions that are either literal constants or are the                                        // 17294
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)                                                      // 17295
     */                                                                                                                // 17296
                                                                                                                       // 17297
    /**                                                                                                                // 17298
     * @ngdoc method                                                                                                   // 17299
     * @name $sce#trustAsUrl                                                                                           // 17300
     *                                                                                                                 // 17301
     * @description                                                                                                    // 17302
     * Shorthand method.  `$sce.trustAsUrl(value)` →                                                                   // 17303
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}                                     // 17304
     *                                                                                                                 // 17305
     * @param {*} value The value to trustAs.                                                                          // 17306
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedUrl                                       // 17307
     *     $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives                            // 17308
     *     only accept expressions that are either literal constants or are the                                        // 17309
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)                                                      // 17310
     */                                                                                                                // 17311
                                                                                                                       // 17312
    /**                                                                                                                // 17313
     * @ngdoc method                                                                                                   // 17314
     * @name $sce#trustAsResourceUrl                                                                                   // 17315
     *                                                                                                                 // 17316
     * @description                                                                                                    // 17317
     * Shorthand method.  `$sce.trustAsResourceUrl(value)` →                                                           // 17318
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}                            // 17319
     *                                                                                                                 // 17320
     * @param {*} value The value to trustAs.                                                                          // 17321
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedResourceUrl                               // 17322
     *     $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives                    // 17323
     *     only accept expressions that are either literal constants or are the return                                 // 17324
     *     value of {@link ng.$sce#trustAs $sce.trustAs}.)                                                             // 17325
     */                                                                                                                // 17326
                                                                                                                       // 17327
    /**                                                                                                                // 17328
     * @ngdoc method                                                                                                   // 17329
     * @name $sce#trustAsJs                                                                                            // 17330
     *                                                                                                                 // 17331
     * @description                                                                                                    // 17332
     * Shorthand method.  `$sce.trustAsJs(value)` →                                                                    // 17333
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}                                      // 17334
     *                                                                                                                 // 17335
     * @param {*} value The value to trustAs.                                                                          // 17336
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedJs                                        // 17337
     *     $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives                             // 17338
     *     only accept expressions that are either literal constants or are the                                        // 17339
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)                                                      // 17340
     */                                                                                                                // 17341
                                                                                                                       // 17342
    /**                                                                                                                // 17343
     * @ngdoc method                                                                                                   // 17344
     * @name $sce#getTrusted                                                                                           // 17345
     *                                                                                                                 // 17346
     * @description                                                                                                    // 17347
     * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,                            // 17348
     * takes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the                             // 17349
     * originally supplied value if the queried context type is a supertype of the created type.                       // 17350
     * If this condition isn't satisfied, throws an exception.                                                         // 17351
     *                                                                                                                 // 17352
     * @param {string} type The kind of context in which this value is to be used.                                     // 17353
     * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}                            // 17354
     *                         call.                                                                                   // 17355
     * @returns {*} The value the was originally provided to                                                           // 17356
     *              {@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.                                   // 17357
     *              Otherwise, throws an exception.                                                                    // 17358
     */                                                                                                                // 17359
                                                                                                                       // 17360
    /**                                                                                                                // 17361
     * @ngdoc method                                                                                                   // 17362
     * @name $sce#getTrustedHtml                                                                                       // 17363
     *                                                                                                                 // 17364
     * @description                                                                                                    // 17365
     * Shorthand method.  `$sce.getTrustedHtml(value)` →                                                               // 17366
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}                              // 17367
     *                                                                                                                 // 17368
     * @param {*} value The value to pass to `$sce.getTrusted`.                                                        // 17369
     * @returns {*} The return value of `$sce.getTrusted($sce.HTML, value)`                                            // 17370
     */                                                                                                                // 17371
                                                                                                                       // 17372
    /**                                                                                                                // 17373
     * @ngdoc method                                                                                                   // 17374
     * @name $sce#getTrustedCss                                                                                        // 17375
     *                                                                                                                 // 17376
     * @description                                                                                                    // 17377
     * Shorthand method.  `$sce.getTrustedCss(value)` →                                                                // 17378
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}                               // 17379
     *                                                                                                                 // 17380
     * @param {*} value The value to pass to `$sce.getTrusted`.                                                        // 17381
     * @returns {*} The return value of `$sce.getTrusted($sce.CSS, value)`                                             // 17382
     */                                                                                                                // 17383
                                                                                                                       // 17384
    /**                                                                                                                // 17385
     * @ngdoc method                                                                                                   // 17386
     * @name $sce#getTrustedUrl                                                                                        // 17387
     *                                                                                                                 // 17388
     * @description                                                                                                    // 17389
     * Shorthand method.  `$sce.getTrustedUrl(value)` →                                                                // 17390
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}                               // 17391
     *                                                                                                                 // 17392
     * @param {*} value The value to pass to `$sce.getTrusted`.                                                        // 17393
     * @returns {*} The return value of `$sce.getTrusted($sce.URL, value)`                                             // 17394
     */                                                                                                                // 17395
                                                                                                                       // 17396
    /**                                                                                                                // 17397
     * @ngdoc method                                                                                                   // 17398
     * @name $sce#getTrustedResourceUrl                                                                                // 17399
     *                                                                                                                 // 17400
     * @description                                                                                                    // 17401
     * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →                                                        // 17402
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}                      // 17403
     *                                                                                                                 // 17404
     * @param {*} value The value to pass to `$sceDelegate.getTrusted`.                                                // 17405
     * @returns {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`                                    // 17406
     */                                                                                                                // 17407
                                                                                                                       // 17408
    /**                                                                                                                // 17409
     * @ngdoc method                                                                                                   // 17410
     * @name $sce#getTrustedJs                                                                                         // 17411
     *                                                                                                                 // 17412
     * @description                                                                                                    // 17413
     * Shorthand method.  `$sce.getTrustedJs(value)` →                                                                 // 17414
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}                                // 17415
     *                                                                                                                 // 17416
     * @param {*} value The value to pass to `$sce.getTrusted`.                                                        // 17417
     * @returns {*} The return value of `$sce.getTrusted($sce.JS, value)`                                              // 17418
     */                                                                                                                // 17419
                                                                                                                       // 17420
    /**                                                                                                                // 17421
     * @ngdoc method                                                                                                   // 17422
     * @name $sce#parseAsHtml                                                                                          // 17423
     *                                                                                                                 // 17424
     * @description                                                                                                    // 17425
     * Shorthand method.  `$sce.parseAsHtml(expression string)` →                                                      // 17426
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.HTML, value)`}                                                    // 17427
     *                                                                                                                 // 17428
     * @param {string} expression String expression to compile.                                                        // 17429
     * @returns {function(context, locals)} a function which represents the compiled expression:                       // 17430
     *                                                                                                                 // 17431
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings                   // 17432
     *      are evaluated against (typically a scope object).                                                          // 17433
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                   // 17434
     *      `context`.                                                                                                 // 17435
     */                                                                                                                // 17436
                                                                                                                       // 17437
    /**                                                                                                                // 17438
     * @ngdoc method                                                                                                   // 17439
     * @name $sce#parseAsCss                                                                                           // 17440
     *                                                                                                                 // 17441
     * @description                                                                                                    // 17442
     * Shorthand method.  `$sce.parseAsCss(value)` →                                                                   // 17443
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.CSS, value)`}                                                     // 17444
     *                                                                                                                 // 17445
     * @param {string} expression String expression to compile.                                                        // 17446
     * @returns {function(context, locals)} a function which represents the compiled expression:                       // 17447
     *                                                                                                                 // 17448
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings                   // 17449
     *      are evaluated against (typically a scope object).                                                          // 17450
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                   // 17451
     *      `context`.                                                                                                 // 17452
     */                                                                                                                // 17453
                                                                                                                       // 17454
    /**                                                                                                                // 17455
     * @ngdoc method                                                                                                   // 17456
     * @name $sce#parseAsUrl                                                                                           // 17457
     *                                                                                                                 // 17458
     * @description                                                                                                    // 17459
     * Shorthand method.  `$sce.parseAsUrl(value)` →                                                                   // 17460
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.URL, value)`}                                                     // 17461
     *                                                                                                                 // 17462
     * @param {string} expression String expression to compile.                                                        // 17463
     * @returns {function(context, locals)} a function which represents the compiled expression:                       // 17464
     *                                                                                                                 // 17465
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings                   // 17466
     *      are evaluated against (typically a scope object).                                                          // 17467
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                   // 17468
     *      `context`.                                                                                                 // 17469
     */                                                                                                                // 17470
                                                                                                                       // 17471
    /**                                                                                                                // 17472
     * @ngdoc method                                                                                                   // 17473
     * @name $sce#parseAsResourceUrl                                                                                   // 17474
     *                                                                                                                 // 17475
     * @description                                                                                                    // 17476
     * Shorthand method.  `$sce.parseAsResourceUrl(value)` →                                                           // 17477
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}                                            // 17478
     *                                                                                                                 // 17479
     * @param {string} expression String expression to compile.                                                        // 17480
     * @returns {function(context, locals)} a function which represents the compiled expression:                       // 17481
     *                                                                                                                 // 17482
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings                   // 17483
     *      are evaluated against (typically a scope object).                                                          // 17484
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                   // 17485
     *      `context`.                                                                                                 // 17486
     */                                                                                                                // 17487
                                                                                                                       // 17488
    /**                                                                                                                // 17489
     * @ngdoc method                                                                                                   // 17490
     * @name $sce#parseAsJs                                                                                            // 17491
     *                                                                                                                 // 17492
     * @description                                                                                                    // 17493
     * Shorthand method.  `$sce.parseAsJs(value)` →                                                                    // 17494
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.JS, value)`}                                                      // 17495
     *                                                                                                                 // 17496
     * @param {string} expression String expression to compile.                                                        // 17497
     * @returns {function(context, locals)} a function which represents the compiled expression:                       // 17498
     *                                                                                                                 // 17499
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings                   // 17500
     *      are evaluated against (typically a scope object).                                                          // 17501
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                   // 17502
     *      `context`.                                                                                                 // 17503
     */                                                                                                                // 17504
                                                                                                                       // 17505
    // Shorthand delegations.                                                                                          // 17506
    var parse = sce.parseAs,                                                                                           // 17507
        getTrusted = sce.getTrusted,                                                                                   // 17508
        trustAs = sce.trustAs;                                                                                         // 17509
                                                                                                                       // 17510
    forEach(SCE_CONTEXTS, function(enumValue, name) {                                                                  // 17511
      var lName = lowercase(name);                                                                                     // 17512
      sce[camelCase("parse_as_" + lName)] = function(expr) {                                                           // 17513
        return parse(enumValue, expr);                                                                                 // 17514
      };                                                                                                               // 17515
      sce[camelCase("get_trusted_" + lName)] = function(value) {                                                       // 17516
        return getTrusted(enumValue, value);                                                                           // 17517
      };                                                                                                               // 17518
      sce[camelCase("trust_as_" + lName)] = function(value) {                                                          // 17519
        return trustAs(enumValue, value);                                                                              // 17520
      };                                                                                                               // 17521
    });                                                                                                                // 17522
                                                                                                                       // 17523
    return sce;                                                                                                        // 17524
  }];                                                                                                                  // 17525
}                                                                                                                      // 17526
                                                                                                                       // 17527
/**                                                                                                                    // 17528
 * !!! This is an undocumented "private" service !!!                                                                   // 17529
 *                                                                                                                     // 17530
 * @name $sniffer                                                                                                      // 17531
 * @requires $window                                                                                                   // 17532
 * @requires $document                                                                                                 // 17533
 *                                                                                                                     // 17534
 * @property {boolean} history Does the browser support html5 history api ?                                            // 17535
 * @property {boolean} transitions Does the browser support CSS transition events ?                                    // 17536
 * @property {boolean} animations Does the browser support CSS animation events ?                                      // 17537
 *                                                                                                                     // 17538
 * @description                                                                                                        // 17539
 * This is very simple implementation of testing browser's features.                                                   // 17540
 */                                                                                                                    // 17541
function $SnifferProvider() {                                                                                          // 17542
  this.$get = ['$window', '$document', function($window, $document) {                                                  // 17543
    var eventSupport = {},                                                                                             // 17544
        android =                                                                                                      // 17545
          toInt((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]),                      // 17546
        boxee = /Boxee/i.test(($window.navigator || {}).userAgent),                                                    // 17547
        document = $document[0] || {},                                                                                 // 17548
        vendorPrefix,                                                                                                  // 17549
        vendorRegex = /^(Moz|webkit|ms)(?=[A-Z])/,                                                                     // 17550
        bodyStyle = document.body && document.body.style,                                                              // 17551
        transitions = false,                                                                                           // 17552
        animations = false,                                                                                            // 17553
        match;                                                                                                         // 17554
                                                                                                                       // 17555
    if (bodyStyle) {                                                                                                   // 17556
      for (var prop in bodyStyle) {                                                                                    // 17557
        if (match = vendorRegex.exec(prop)) {                                                                          // 17558
          vendorPrefix = match[0];                                                                                     // 17559
          vendorPrefix = vendorPrefix.substr(0, 1).toUpperCase() + vendorPrefix.substr(1);                             // 17560
          break;                                                                                                       // 17561
        }                                                                                                              // 17562
      }                                                                                                                // 17563
                                                                                                                       // 17564
      if (!vendorPrefix) {                                                                                             // 17565
        vendorPrefix = ('WebkitOpacity' in bodyStyle) && 'webkit';                                                     // 17566
      }                                                                                                                // 17567
                                                                                                                       // 17568
      transitions = !!(('transition' in bodyStyle) || (vendorPrefix + 'Transition' in bodyStyle));                     // 17569
      animations  = !!(('animation' in bodyStyle) || (vendorPrefix + 'Animation' in bodyStyle));                       // 17570
                                                                                                                       // 17571
      if (android && (!transitions ||  !animations)) {                                                                 // 17572
        transitions = isString(bodyStyle.webkitTransition);                                                            // 17573
        animations = isString(bodyStyle.webkitAnimation);                                                              // 17574
      }                                                                                                                // 17575
    }                                                                                                                  // 17576
                                                                                                                       // 17577
                                                                                                                       // 17578
    return {                                                                                                           // 17579
      // Android has history.pushState, but it does not update location correctly                                      // 17580
      // so let's not use the history API at all.                                                                      // 17581
      // http://code.google.com/p/android/issues/detail?id=17471                                                       // 17582
      // https://github.com/angular/angular.js/issues/904                                                              // 17583
                                                                                                                       // 17584
      // older webkit browser (533.9) on Boxee box has exactly the same problem as Android has                         // 17585
      // so let's not use the history API also                                                                         // 17586
      // We are purposefully using `!(android < 4)` to cover the case when `android` is undefined                      // 17587
      // jshint -W018                                                                                                  // 17588
      history: !!($window.history && $window.history.pushState && !(android < 4) && !boxee),                           // 17589
      // jshint +W018                                                                                                  // 17590
      hasEvent: function(event) {                                                                                      // 17591
        // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have                    // 17592
        // it. In particular the event is not fired when backspace or delete key are pressed or                        // 17593
        // when cut operation is performed.                                                                            // 17594
        // IE10+ implements 'input' event but it erroneously fires under various situations,                           // 17595
        // e.g. when placeholder changes, or a form is focused.                                                        // 17596
        if (event === 'input' && msie <= 11) return false;                                                             // 17597
                                                                                                                       // 17598
        if (isUndefined(eventSupport[event])) {                                                                        // 17599
          var divElm = document.createElement('div');                                                                  // 17600
          eventSupport[event] = 'on' + event in divElm;                                                                // 17601
        }                                                                                                              // 17602
                                                                                                                       // 17603
        return eventSupport[event];                                                                                    // 17604
      },                                                                                                               // 17605
      csp: csp(),                                                                                                      // 17606
      vendorPrefix: vendorPrefix,                                                                                      // 17607
      transitions: transitions,                                                                                        // 17608
      animations: animations,                                                                                          // 17609
      android: android                                                                                                 // 17610
    };                                                                                                                 // 17611
  }];                                                                                                                  // 17612
}                                                                                                                      // 17613
                                                                                                                       // 17614
var $compileMinErr = minErr('$compile');                                                                               // 17615
                                                                                                                       // 17616
/**                                                                                                                    // 17617
 * @ngdoc service                                                                                                      // 17618
 * @name $templateRequest                                                                                              // 17619
 *                                                                                                                     // 17620
 * @description                                                                                                        // 17621
 * The `$templateRequest` service runs security checks then downloads the provided template using                      // 17622
 * `$http` and, upon success, stores the contents inside of `$templateCache`. If the HTTP request                      // 17623
 * fails or the response data of the HTTP request is empty, a `$compile` error will be thrown (the                     // 17624
 * exception can be thwarted by setting the 2nd parameter of the function to true). Note that the                      // 17625
 * contents of `$templateCache` are trusted, so the call to `$sce.getTrustedUrl(tpl)` is omitted                       // 17626
 * when `tpl` is of type string and `$templateCache` has the matching entry.                                           // 17627
 *                                                                                                                     // 17628
 * @param {string|TrustedResourceUrl} tpl The HTTP request template URL                                                // 17629
 * @param {boolean=} ignoreRequestError Whether or not to ignore the exception when the request fails or the template is empty
 *                                                                                                                     // 17631
 * @return {Promise} a promise for the HTTP response data of the given URL.                                            // 17632
 *                                                                                                                     // 17633
 * @property {number} totalPendingRequests total amount of pending template requests being downloaded.                 // 17634
 */                                                                                                                    // 17635
function $TemplateRequestProvider() {                                                                                  // 17636
  this.$get = ['$templateCache', '$http', '$q', '$sce', function($templateCache, $http, $q, $sce) {                    // 17637
    function handleRequestFn(tpl, ignoreRequestError) {                                                                // 17638
      handleRequestFn.totalPendingRequests++;                                                                          // 17639
                                                                                                                       // 17640
      // We consider the template cache holds only trusted templates, so                                               // 17641
      // there's no need to go through whitelisting again for keys that already                                        // 17642
      // are included in there. This also makes Angular accept any script                                              // 17643
      // directive, no matter its name. However, we still need to unwrap trusted                                       // 17644
      // types.                                                                                                        // 17645
      if (!isString(tpl) || !$templateCache.get(tpl)) {                                                                // 17646
        tpl = $sce.getTrustedResourceUrl(tpl);                                                                         // 17647
      }                                                                                                                // 17648
                                                                                                                       // 17649
      var transformResponse = $http.defaults && $http.defaults.transformResponse;                                      // 17650
                                                                                                                       // 17651
      if (isArray(transformResponse)) {                                                                                // 17652
        transformResponse = transformResponse.filter(function(transformer) {                                           // 17653
          return transformer !== defaultHttpResponseTransform;                                                         // 17654
        });                                                                                                            // 17655
      } else if (transformResponse === defaultHttpResponseTransform) {                                                 // 17656
        transformResponse = null;                                                                                      // 17657
      }                                                                                                                // 17658
                                                                                                                       // 17659
      var httpOptions = {                                                                                              // 17660
        cache: $templateCache,                                                                                         // 17661
        transformResponse: transformResponse                                                                           // 17662
      };                                                                                                               // 17663
                                                                                                                       // 17664
      return $http.get(tpl, httpOptions)                                                                               // 17665
        ['finally'](function() {                                                                                       // 17666
          handleRequestFn.totalPendingRequests--;                                                                      // 17667
        })                                                                                                             // 17668
        .then(function(response) {                                                                                     // 17669
          $templateCache.put(tpl, response.data);                                                                      // 17670
          return response.data;                                                                                        // 17671
        }, handleError);                                                                                               // 17672
                                                                                                                       // 17673
      function handleError(resp) {                                                                                     // 17674
        if (!ignoreRequestError) {                                                                                     // 17675
          throw $compileMinErr('tpload', 'Failed to load template: {0} (HTTP status: {1} {2})',                        // 17676
            tpl, resp.status, resp.statusText);                                                                        // 17677
        }                                                                                                              // 17678
        return $q.reject(resp);                                                                                        // 17679
      }                                                                                                                // 17680
    }                                                                                                                  // 17681
                                                                                                                       // 17682
    handleRequestFn.totalPendingRequests = 0;                                                                          // 17683
                                                                                                                       // 17684
    return handleRequestFn;                                                                                            // 17685
  }];                                                                                                                  // 17686
}                                                                                                                      // 17687
                                                                                                                       // 17688
function $$TestabilityProvider() {                                                                                     // 17689
  this.$get = ['$rootScope', '$browser', '$location',                                                                  // 17690
       function($rootScope,   $browser,   $location) {                                                                 // 17691
                                                                                                                       // 17692
    /**                                                                                                                // 17693
     * @name $testability                                                                                              // 17694
     *                                                                                                                 // 17695
     * @description                                                                                                    // 17696
     * The private $$testability service provides a collection of methods for use when debugging                       // 17697
     * or by automated test and debugging tools.                                                                       // 17698
     */                                                                                                                // 17699
    var testability = {};                                                                                              // 17700
                                                                                                                       // 17701
    /**                                                                                                                // 17702
     * @name $$testability#findBindings                                                                                // 17703
     *                                                                                                                 // 17704
     * @description                                                                                                    // 17705
     * Returns an array of elements that are bound (via ng-bind or {{}})                                               // 17706
     * to expressions matching the input.                                                                              // 17707
     *                                                                                                                 // 17708
     * @param {Element} element The element root to search from.                                                       // 17709
     * @param {string} expression The binding expression to match.                                                     // 17710
     * @param {boolean} opt_exactMatch If true, only returns exact matches                                             // 17711
     *     for the expression. Filters and whitespace are ignored.                                                     // 17712
     */                                                                                                                // 17713
    testability.findBindings = function(element, expression, opt_exactMatch) {                                         // 17714
      var bindings = element.getElementsByClassName('ng-binding');                                                     // 17715
      var matches = [];                                                                                                // 17716
      forEach(bindings, function(binding) {                                                                            // 17717
        var dataBinding = angular.element(binding).data('$binding');                                                   // 17718
        if (dataBinding) {                                                                                             // 17719
          forEach(dataBinding, function(bindingName) {                                                                 // 17720
            if (opt_exactMatch) {                                                                                      // 17721
              var matcher = new RegExp('(^|\\s)' + escapeForRegexp(expression) + '(\\s|\\||$)');                       // 17722
              if (matcher.test(bindingName)) {                                                                         // 17723
                matches.push(binding);                                                                                 // 17724
              }                                                                                                        // 17725
            } else {                                                                                                   // 17726
              if (bindingName.indexOf(expression) != -1) {                                                             // 17727
                matches.push(binding);                                                                                 // 17728
              }                                                                                                        // 17729
            }                                                                                                          // 17730
          });                                                                                                          // 17731
        }                                                                                                              // 17732
      });                                                                                                              // 17733
      return matches;                                                                                                  // 17734
    };                                                                                                                 // 17735
                                                                                                                       // 17736
    /**                                                                                                                // 17737
     * @name $$testability#findModels                                                                                  // 17738
     *                                                                                                                 // 17739
     * @description                                                                                                    // 17740
     * Returns an array of elements that are two-way found via ng-model to                                             // 17741
     * expressions matching the input.                                                                                 // 17742
     *                                                                                                                 // 17743
     * @param {Element} element The element root to search from.                                                       // 17744
     * @param {string} expression The model expression to match.                                                       // 17745
     * @param {boolean} opt_exactMatch If true, only returns exact matches                                             // 17746
     *     for the expression.                                                                                         // 17747
     */                                                                                                                // 17748
    testability.findModels = function(element, expression, opt_exactMatch) {                                           // 17749
      var prefixes = ['ng-', 'data-ng-', 'ng\\:'];                                                                     // 17750
      for (var p = 0; p < prefixes.length; ++p) {                                                                      // 17751
        var attributeEquals = opt_exactMatch ? '=' : '*=';                                                             // 17752
        var selector = '[' + prefixes[p] + 'model' + attributeEquals + '"' + expression + '"]';                        // 17753
        var elements = element.querySelectorAll(selector);                                                             // 17754
        if (elements.length) {                                                                                         // 17755
          return elements;                                                                                             // 17756
        }                                                                                                              // 17757
      }                                                                                                                // 17758
    };                                                                                                                 // 17759
                                                                                                                       // 17760
    /**                                                                                                                // 17761
     * @name $$testability#getLocation                                                                                 // 17762
     *                                                                                                                 // 17763
     * @description                                                                                                    // 17764
     * Shortcut for getting the location in a browser agnostic way. Returns                                            // 17765
     *     the path, search, and hash. (e.g. /path?a=b#hash)                                                           // 17766
     */                                                                                                                // 17767
    testability.getLocation = function() {                                                                             // 17768
      return $location.url();                                                                                          // 17769
    };                                                                                                                 // 17770
                                                                                                                       // 17771
    /**                                                                                                                // 17772
     * @name $$testability#setLocation                                                                                 // 17773
     *                                                                                                                 // 17774
     * @description                                                                                                    // 17775
     * Shortcut for navigating to a location without doing a full page reload.                                         // 17776
     *                                                                                                                 // 17777
     * @param {string} url The location url (path, search and hash,                                                    // 17778
     *     e.g. /path?a=b#hash) to go to.                                                                              // 17779
     */                                                                                                                // 17780
    testability.setLocation = function(url) {                                                                          // 17781
      if (url !== $location.url()) {                                                                                   // 17782
        $location.url(url);                                                                                            // 17783
        $rootScope.$digest();                                                                                          // 17784
      }                                                                                                                // 17785
    };                                                                                                                 // 17786
                                                                                                                       // 17787
    /**                                                                                                                // 17788
     * @name $$testability#whenStable                                                                                  // 17789
     *                                                                                                                 // 17790
     * @description                                                                                                    // 17791
     * Calls the callback when $timeout and $http requests are completed.                                              // 17792
     *                                                                                                                 // 17793
     * @param {function} callback                                                                                      // 17794
     */                                                                                                                // 17795
    testability.whenStable = function(callback) {                                                                      // 17796
      $browser.notifyWhenNoOutstandingRequests(callback);                                                              // 17797
    };                                                                                                                 // 17798
                                                                                                                       // 17799
    return testability;                                                                                                // 17800
  }];                                                                                                                  // 17801
}                                                                                                                      // 17802
                                                                                                                       // 17803
function $TimeoutProvider() {                                                                                          // 17804
  this.$get = ['$rootScope', '$browser', '$q', '$$q', '$exceptionHandler',                                             // 17805
       function($rootScope,   $browser,   $q,   $$q,   $exceptionHandler) {                                            // 17806
                                                                                                                       // 17807
    var deferreds = {};                                                                                                // 17808
                                                                                                                       // 17809
                                                                                                                       // 17810
     /**                                                                                                               // 17811
      * @ngdoc service                                                                                                 // 17812
      * @name $timeout                                                                                                 // 17813
      *                                                                                                                // 17814
      * @description                                                                                                   // 17815
      * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch                       // 17816
      * block and delegates any exceptions to                                                                          // 17817
      * {@link ng.$exceptionHandler $exceptionHandler} service.                                                        // 17818
      *                                                                                                                // 17819
      * The return value of calling `$timeout` is a promise, which will be resolved when                               // 17820
      * the delay has passed and the timeout function, if provided, is executed.                                       // 17821
      *                                                                                                                // 17822
      * To cancel a timeout request, call `$timeout.cancel(promise)`.                                                  // 17823
      *                                                                                                                // 17824
      * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to                                             // 17825
      * synchronously flush the queue of deferred functions.                                                           // 17826
      *                                                                                                                // 17827
      * If you only want a promise that will be resolved after some specified delay                                    // 17828
      * then you can call `$timeout` without the `fn` function.                                                        // 17829
      *                                                                                                                // 17830
      * @param {function()=} fn A function, whose execution should be delayed.                                         // 17831
      * @param {number=} [delay=0] Delay in milliseconds.                                                              // 17832
      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise                   // 17833
      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.                                 // 17834
      * @param {...*=} Pass additional parameters to the executed function.                                            // 17835
      * @returns {Promise} Promise that will be resolved when the timeout is reached. The value this                   // 17836
      *   promise will be resolved with is the return value of the `fn` function.                                      // 17837
      *                                                                                                                // 17838
      */                                                                                                               // 17839
    function timeout(fn, delay, invokeApply) {                                                                         // 17840
      if (!isFunction(fn)) {                                                                                           // 17841
        invokeApply = delay;                                                                                           // 17842
        delay = fn;                                                                                                    // 17843
        fn = noop;                                                                                                     // 17844
      }                                                                                                                // 17845
                                                                                                                       // 17846
      var args = sliceArgs(arguments, 3),                                                                              // 17847
          skipApply = (isDefined(invokeApply) && !invokeApply),                                                        // 17848
          deferred = (skipApply ? $$q : $q).defer(),                                                                   // 17849
          promise = deferred.promise,                                                                                  // 17850
          timeoutId;                                                                                                   // 17851
                                                                                                                       // 17852
      timeoutId = $browser.defer(function() {                                                                          // 17853
        try {                                                                                                          // 17854
          deferred.resolve(fn.apply(null, args));                                                                      // 17855
        } catch (e) {                                                                                                  // 17856
          deferred.reject(e);                                                                                          // 17857
          $exceptionHandler(e);                                                                                        // 17858
        }                                                                                                              // 17859
        finally {                                                                                                      // 17860
          delete deferreds[promise.$$timeoutId];                                                                       // 17861
        }                                                                                                              // 17862
                                                                                                                       // 17863
        if (!skipApply) $rootScope.$apply();                                                                           // 17864
      }, delay);                                                                                                       // 17865
                                                                                                                       // 17866
      promise.$$timeoutId = timeoutId;                                                                                 // 17867
      deferreds[timeoutId] = deferred;                                                                                 // 17868
                                                                                                                       // 17869
      return promise;                                                                                                  // 17870
    }                                                                                                                  // 17871
                                                                                                                       // 17872
                                                                                                                       // 17873
     /**                                                                                                               // 17874
      * @ngdoc method                                                                                                  // 17875
      * @name $timeout#cancel                                                                                          // 17876
      *                                                                                                                // 17877
      * @description                                                                                                   // 17878
      * Cancels a task associated with the `promise`. As a result of this, the promise will be                         // 17879
      * resolved with a rejection.                                                                                     // 17880
      *                                                                                                                // 17881
      * @param {Promise=} promise Promise returned by the `$timeout` function.                                         // 17882
      * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully                         // 17883
      *   canceled.                                                                                                    // 17884
      */                                                                                                               // 17885
    timeout.cancel = function(promise) {                                                                               // 17886
      if (promise && promise.$$timeoutId in deferreds) {                                                               // 17887
        deferreds[promise.$$timeoutId].reject('canceled');                                                             // 17888
        delete deferreds[promise.$$timeoutId];                                                                         // 17889
        return $browser.defer.cancel(promise.$$timeoutId);                                                             // 17890
      }                                                                                                                // 17891
      return false;                                                                                                    // 17892
    };                                                                                                                 // 17893
                                                                                                                       // 17894
    return timeout;                                                                                                    // 17895
  }];                                                                                                                  // 17896
}                                                                                                                      // 17897
                                                                                                                       // 17898
// NOTE:  The usage of window and document instead of $window and $document here is                                    // 17899
// deliberate.  This service depends on the specific behavior of anchor nodes created by the                           // 17900
// browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and                            // 17901
// cause us to break tests.  In addition, when the browser resolves a URL for XHR, it                                  // 17902
// doesn't know about mocked locations and resolves URLs to the real document - which is                               // 17903
// exactly the behavior needed here.  There is little value is mocking these out for this                              // 17904
// service.                                                                                                            // 17905
var urlParsingNode = document.createElement("a");                                                                      // 17906
var originUrl = urlResolve(window.location.href);                                                                      // 17907
                                                                                                                       // 17908
                                                                                                                       // 17909
/**                                                                                                                    // 17910
 *                                                                                                                     // 17911
 * Implementation Notes for non-IE browsers                                                                            // 17912
 * ----------------------------------------                                                                            // 17913
 * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,                           // 17914
 * results both in the normalizing and parsing of the URL.  Normalizing means that a relative                          // 17915
 * URL will be resolved into an absolute URL in the context of the application document.                               // 17916
 * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related                           // 17917
 * properties are all populated to reflect the normalized URL.  This approach has wide                                 // 17918
 * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See                                                         // 17919
 * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html                                                     // 17920
 *                                                                                                                     // 17921
 * Implementation Notes for IE                                                                                         // 17922
 * ---------------------------                                                                                         // 17923
 * IE <= 10 normalizes the URL when assigned to the anchor node similar to the other                                   // 17924
 * browsers.  However, the parsed components will not be set if the URL assigned did not specify                       // 17925
 * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We                        // 17926
 * work around that by performing the parsing in a 2nd step by taking a previously normalized                          // 17927
 * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the                      // 17928
 * properties such as protocol, hostname, port, etc.                                                                   // 17929
 *                                                                                                                     // 17930
 * References:                                                                                                         // 17931
 *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement                                                 // 17932
 *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html                                                   // 17933
 *   http://url.spec.whatwg.org/#urlutils                                                                              // 17934
 *   https://github.com/angular/angular.js/pull/2902                                                                   // 17935
 *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/                                                   // 17936
 *                                                                                                                     // 17937
 * @kind function                                                                                                      // 17938
 * @param {string} url The URL to be parsed.                                                                           // 17939
 * @description Normalizes and parses a URL.                                                                           // 17940
 * @returns {object} Returns the normalized URL as a dictionary.                                                       // 17941
 *                                                                                                                     // 17942
 *   | member name   | Description    |                                                                                // 17943
 *   |---------------|----------------|                                                                                // 17944
 *   | href          | A normalized version of the provided URL if it was not an absolute URL |                        // 17945
 *   | protocol      | The protocol including the trailing colon                              |                        // 17946
 *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |                        // 17947
 *   | search        | The search params, minus the question mark                             |                        // 17948
 *   | hash          | The hash string, minus the hash symbol                                                          // 17949
 *   | hostname      | The hostname                                                                                    // 17950
 *   | port          | The port, without ":"                                                                           // 17951
 *   | pathname      | The pathname, beginning with "/"                                                                // 17952
 *                                                                                                                     // 17953
 */                                                                                                                    // 17954
function urlResolve(url) {                                                                                             // 17955
  var href = url;                                                                                                      // 17956
                                                                                                                       // 17957
  if (msie) {                                                                                                          // 17958
    // Normalize before parse.  Refer Implementation Notes on why this is                                              // 17959
    // done in two steps on IE.                                                                                        // 17960
    urlParsingNode.setAttribute("href", href);                                                                         // 17961
    href = urlParsingNode.href;                                                                                        // 17962
  }                                                                                                                    // 17963
                                                                                                                       // 17964
  urlParsingNode.setAttribute('href', href);                                                                           // 17965
                                                                                                                       // 17966
  // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils                             // 17967
  return {                                                                                                             // 17968
    href: urlParsingNode.href,                                                                                         // 17969
    protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',                                // 17970
    host: urlParsingNode.host,                                                                                         // 17971
    search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',                                     // 17972
    hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',                                            // 17973
    hostname: urlParsingNode.hostname,                                                                                 // 17974
    port: urlParsingNode.port,                                                                                         // 17975
    pathname: (urlParsingNode.pathname.charAt(0) === '/')                                                              // 17976
      ? urlParsingNode.pathname                                                                                        // 17977
      : '/' + urlParsingNode.pathname                                                                                  // 17978
  };                                                                                                                   // 17979
}                                                                                                                      // 17980
                                                                                                                       // 17981
/**                                                                                                                    // 17982
 * Parse a request URL and determine whether this is a same-origin request as the application document.                // 17983
 *                                                                                                                     // 17984
 * @param {string|object} requestUrl The url of the request as a string that will be resolved                          // 17985
 * or a parsed URL object.                                                                                             // 17986
 * @returns {boolean} Whether the request is for the same origin as the application document.                          // 17987
 */                                                                                                                    // 17988
function urlIsSameOrigin(requestUrl) {                                                                                 // 17989
  var parsed = (isString(requestUrl)) ? urlResolve(requestUrl) : requestUrl;                                           // 17990
  return (parsed.protocol === originUrl.protocol &&                                                                    // 17991
          parsed.host === originUrl.host);                                                                             // 17992
}                                                                                                                      // 17993
                                                                                                                       // 17994
/**                                                                                                                    // 17995
 * @ngdoc service                                                                                                      // 17996
 * @name $window                                                                                                       // 17997
 *                                                                                                                     // 17998
 * @description                                                                                                        // 17999
 * A reference to the browser's `window` object. While `window`                                                        // 18000
 * is globally available in JavaScript, it causes testability problems, because                                        // 18001
 * it is a global variable. In angular we always refer to it through the                                               // 18002
 * `$window` service, so it may be overridden, removed or mocked for testing.                                          // 18003
 *                                                                                                                     // 18004
 * Expressions, like the one defined for the `ngClick` directive in the example                                        // 18005
 * below, are evaluated with respect to the current scope.  Therefore, there is                                        // 18006
 * no risk of inadvertently coding in a dependency on a global value in such an                                        // 18007
 * expression.                                                                                                         // 18008
 *                                                                                                                     // 18009
 * @example                                                                                                            // 18010
   <example module="windowExample">                                                                                    // 18011
     <file name="index.html">                                                                                          // 18012
       <script>                                                                                                        // 18013
         angular.module('windowExample', [])                                                                           // 18014
           .controller('ExampleController', ['$scope', '$window', function($scope, $window) {                          // 18015
             $scope.greeting = 'Hello, World!';                                                                        // 18016
             $scope.doGreeting = function(greeting) {                                                                  // 18017
               $window.alert(greeting);                                                                                // 18018
             };                                                                                                        // 18019
           }]);                                                                                                        // 18020
       </script>                                                                                                       // 18021
       <div ng-controller="ExampleController">                                                                         // 18022
         <input type="text" ng-model="greeting" aria-label="greeting" />                                               // 18023
         <button ng-click="doGreeting(greeting)">ALERT</button>                                                        // 18024
       </div>                                                                                                          // 18025
     </file>                                                                                                           // 18026
     <file name="protractor.js" type="protractor">                                                                     // 18027
      it('should display the greeting in the input box', function() {                                                  // 18028
       element(by.model('greeting')).sendKeys('Hello, E2E Tests');                                                     // 18029
       // If we click the button it will block the test runner                                                         // 18030
       // element(':button').click();                                                                                  // 18031
      });                                                                                                              // 18032
     </file>                                                                                                           // 18033
   </example>                                                                                                          // 18034
 */                                                                                                                    // 18035
function $WindowProvider() {                                                                                           // 18036
  this.$get = valueFn(window);                                                                                         // 18037
}                                                                                                                      // 18038
                                                                                                                       // 18039
/**                                                                                                                    // 18040
 * @name $$cookieReader                                                                                                // 18041
 * @requires $document                                                                                                 // 18042
 *                                                                                                                     // 18043
 * @description                                                                                                        // 18044
 * This is a private service for reading cookies used by $http and ngCookies                                           // 18045
 *                                                                                                                     // 18046
 * @return {Object} a key/value map of the current cookies                                                             // 18047
 */                                                                                                                    // 18048
function $$CookieReader($document) {                                                                                   // 18049
  var rawDocument = $document[0] || {};                                                                                // 18050
  var lastCookies = {};                                                                                                // 18051
  var lastCookieString = '';                                                                                           // 18052
                                                                                                                       // 18053
  function safeDecodeURIComponent(str) {                                                                               // 18054
    try {                                                                                                              // 18055
      return decodeURIComponent(str);                                                                                  // 18056
    } catch (e) {                                                                                                      // 18057
      return str;                                                                                                      // 18058
    }                                                                                                                  // 18059
  }                                                                                                                    // 18060
                                                                                                                       // 18061
  return function() {                                                                                                  // 18062
    var cookieArray, cookie, i, index, name;                                                                           // 18063
    var currentCookieString = rawDocument.cookie || '';                                                                // 18064
                                                                                                                       // 18065
    if (currentCookieString !== lastCookieString) {                                                                    // 18066
      lastCookieString = currentCookieString;                                                                          // 18067
      cookieArray = lastCookieString.split('; ');                                                                      // 18068
      lastCookies = {};                                                                                                // 18069
                                                                                                                       // 18070
      for (i = 0; i < cookieArray.length; i++) {                                                                       // 18071
        cookie = cookieArray[i];                                                                                       // 18072
        index = cookie.indexOf('=');                                                                                   // 18073
        if (index > 0) { //ignore nameless cookies                                                                     // 18074
          name = safeDecodeURIComponent(cookie.substring(0, index));                                                   // 18075
          // the first value that is seen for a cookie is the most                                                     // 18076
          // specific one.  values for the same cookie name that                                                       // 18077
          // follow are for less specific paths.                                                                       // 18078
          if (isUndefined(lastCookies[name])) {                                                                        // 18079
            lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1));                                   // 18080
          }                                                                                                            // 18081
        }                                                                                                              // 18082
      }                                                                                                                // 18083
    }                                                                                                                  // 18084
    return lastCookies;                                                                                                // 18085
  };                                                                                                                   // 18086
}                                                                                                                      // 18087
                                                                                                                       // 18088
$$CookieReader.$inject = ['$document'];                                                                                // 18089
                                                                                                                       // 18090
function $$CookieReaderProvider() {                                                                                    // 18091
  this.$get = $$CookieReader;                                                                                          // 18092
}                                                                                                                      // 18093
                                                                                                                       // 18094
/* global currencyFilter: true,                                                                                        // 18095
 dateFilter: true,                                                                                                     // 18096
 filterFilter: true,                                                                                                   // 18097
 jsonFilter: true,                                                                                                     // 18098
 limitToFilter: true,                                                                                                  // 18099
 lowercaseFilter: true,                                                                                                // 18100
 numberFilter: true,                                                                                                   // 18101
 orderByFilter: true,                                                                                                  // 18102
 uppercaseFilter: true,                                                                                                // 18103
 */                                                                                                                    // 18104
                                                                                                                       // 18105
/**                                                                                                                    // 18106
 * @ngdoc provider                                                                                                     // 18107
 * @name $filterProvider                                                                                               // 18108
 * @description                                                                                                        // 18109
 *                                                                                                                     // 18110
 * Filters are just functions which transform input to an output. However filters need to be                           // 18111
 * Dependency Injected. To achieve this a filter definition consists of a factory function which is                    // 18112
 * annotated with dependencies and is responsible for creating a filter function.                                      // 18113
 *                                                                                                                     // 18114
 * <div class="alert alert-warning">                                                                                   // 18115
 * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.      // 18116
 * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace                  // 18117
 * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores                             // 18118
 * (`myapp_subsection_filterx`).                                                                                       // 18119
 * </div>                                                                                                              // 18120
 *                                                                                                                     // 18121
 * ```js                                                                                                               // 18122
 *   // Filter registration                                                                                            // 18123
 *   function MyModule($provide, $filterProvider) {                                                                    // 18124
 *     // create a service to demonstrate injection (not always needed)                                                // 18125
 *     $provide.value('greet', function(name){                                                                         // 18126
 *       return 'Hello ' + name + '!';                                                                                 // 18127
 *     });                                                                                                             // 18128
 *                                                                                                                     // 18129
 *     // register a filter factory which uses the                                                                     // 18130
 *     // greet service to demonstrate DI.                                                                             // 18131
 *     $filterProvider.register('greet', function(greet){                                                              // 18132
 *       // return the filter function which uses the greet service                                                    // 18133
 *       // to generate salutation                                                                                     // 18134
 *       return function(text) {                                                                                       // 18135
 *         // filters need to be forgiving so check input validity                                                     // 18136
 *         return text && greet(text) || text;                                                                         // 18137
 *       };                                                                                                            // 18138
 *     });                                                                                                             // 18139
 *   }                                                                                                                 // 18140
 * ```                                                                                                                 // 18141
 *                                                                                                                     // 18142
 * The filter function is registered with the `$injector` under the filter name suffix with                            // 18143
 * `Filter`.                                                                                                           // 18144
 *                                                                                                                     // 18145
 * ```js                                                                                                               // 18146
 *   it('should be the same instance', inject(                                                                         // 18147
 *     function($filterProvider) {                                                                                     // 18148
 *       $filterProvider.register('reverse', function(){                                                               // 18149
 *         return ...;                                                                                                 // 18150
 *       });                                                                                                           // 18151
 *     },                                                                                                              // 18152
 *     function($filter, reverseFilter) {                                                                              // 18153
 *       expect($filter('reverse')).toBe(reverseFilter);                                                               // 18154
 *     });                                                                                                             // 18155
 * ```                                                                                                                 // 18156
 *                                                                                                                     // 18157
 *                                                                                                                     // 18158
 * For more information about how angular filters work, and how to create your own filters, see                        // 18159
 * {@link guide/filter Filters} in the Angular Developer Guide.                                                        // 18160
 */                                                                                                                    // 18161
                                                                                                                       // 18162
/**                                                                                                                    // 18163
 * @ngdoc service                                                                                                      // 18164
 * @name $filter                                                                                                       // 18165
 * @kind function                                                                                                      // 18166
 * @description                                                                                                        // 18167
 * Filters are used for formatting data displayed to the user.                                                         // 18168
 *                                                                                                                     // 18169
 * The general syntax in templates is as follows:                                                                      // 18170
 *                                                                                                                     // 18171
 *         {{ expression [| filter_name[:parameter_value] ... ] }}                                                     // 18172
 *                                                                                                                     // 18173
 * @param {String} name Name of the filter function to retrieve                                                        // 18174
 * @return {Function} the filter function                                                                              // 18175
 * @example                                                                                                            // 18176
   <example name="$filter" module="filterExample">                                                                     // 18177
     <file name="index.html">                                                                                          // 18178
       <div ng-controller="MainCtrl">                                                                                  // 18179
        <h3>{{ originalText }}</h3>                                                                                    // 18180
        <h3>{{ filteredText }}</h3>                                                                                    // 18181
       </div>                                                                                                          // 18182
     </file>                                                                                                           // 18183
                                                                                                                       // 18184
     <file name="script.js">                                                                                           // 18185
      angular.module('filterExample', [])                                                                              // 18186
      .controller('MainCtrl', function($scope, $filter) {                                                              // 18187
        $scope.originalText = 'hello';                                                                                 // 18188
        $scope.filteredText = $filter('uppercase')($scope.originalText);                                               // 18189
      });                                                                                                              // 18190
     </file>                                                                                                           // 18191
   </example>                                                                                                          // 18192
  */                                                                                                                   // 18193
$FilterProvider.$inject = ['$provide'];                                                                                // 18194
function $FilterProvider($provide) {                                                                                   // 18195
  var suffix = 'Filter';                                                                                               // 18196
                                                                                                                       // 18197
  /**                                                                                                                  // 18198
   * @ngdoc method                                                                                                     // 18199
   * @name $filterProvider#register                                                                                    // 18200
   * @param {string|Object} name Name of the filter function, or an object map of filters where                        // 18201
   *    the keys are the filter names and the values are the filter factories.                                         // 18202
   *                                                                                                                   // 18203
   *    <div class="alert alert-warning">                                                                              // 18204
   *    **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
   *    Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace             // 18206
   *    your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores                        // 18207
   *    (`myapp_subsection_filterx`).                                                                                  // 18208
   *    </div>                                                                                                         // 18209
    * @param {Function} factory If the first argument was a string, a factory function for the filter to be registered.
   * @returns {Object} Registered filter instance, or if a map of filters was provided then a map                      // 18211
   *    of the registered filter instances.                                                                            // 18212
   */                                                                                                                  // 18213
  function register(name, factory) {                                                                                   // 18214
    if (isObject(name)) {                                                                                              // 18215
      var filters = {};                                                                                                // 18216
      forEach(name, function(filter, key) {                                                                            // 18217
        filters[key] = register(key, filter);                                                                          // 18218
      });                                                                                                              // 18219
      return filters;                                                                                                  // 18220
    } else {                                                                                                           // 18221
      return $provide.factory(name + suffix, factory);                                                                 // 18222
    }                                                                                                                  // 18223
  }                                                                                                                    // 18224
  this.register = register;                                                                                            // 18225
                                                                                                                       // 18226
  this.$get = ['$injector', function($injector) {                                                                      // 18227
    return function(name) {                                                                                            // 18228
      return $injector.get(name + suffix);                                                                             // 18229
    };                                                                                                                 // 18230
  }];                                                                                                                  // 18231
                                                                                                                       // 18232
  ////////////////////////////////////////                                                                             // 18233
                                                                                                                       // 18234
  /* global                                                                                                            // 18235
    currencyFilter: false,                                                                                             // 18236
    dateFilter: false,                                                                                                 // 18237
    filterFilter: false,                                                                                               // 18238
    jsonFilter: false,                                                                                                 // 18239
    limitToFilter: false,                                                                                              // 18240
    lowercaseFilter: false,                                                                                            // 18241
    numberFilter: false,                                                                                               // 18242
    orderByFilter: false,                                                                                              // 18243
    uppercaseFilter: false,                                                                                            // 18244
  */                                                                                                                   // 18245
                                                                                                                       // 18246
  register('currency', currencyFilter);                                                                                // 18247
  register('date', dateFilter);                                                                                        // 18248
  register('filter', filterFilter);                                                                                    // 18249
  register('json', jsonFilter);                                                                                        // 18250
  register('limitTo', limitToFilter);                                                                                  // 18251
  register('lowercase', lowercaseFilter);                                                                              // 18252
  register('number', numberFilter);                                                                                    // 18253
  register('orderBy', orderByFilter);                                                                                  // 18254
  register('uppercase', uppercaseFilter);                                                                              // 18255
}                                                                                                                      // 18256
                                                                                                                       // 18257
/**                                                                                                                    // 18258
 * @ngdoc filter                                                                                                       // 18259
 * @name filter                                                                                                        // 18260
 * @kind function                                                                                                      // 18261
 *                                                                                                                     // 18262
 * @description                                                                                                        // 18263
 * Selects a subset of items from `array` and returns it as a new array.                                               // 18264
 *                                                                                                                     // 18265
 * @param {Array} array The source array.                                                                              // 18266
 * @param {string|Object|function()} expression The predicate to be used for selecting items from                      // 18267
 *   `array`.                                                                                                          // 18268
 *                                                                                                                     // 18269
 *   Can be one of:                                                                                                    // 18270
 *                                                                                                                     // 18271
 *   - `string`: The string is used for matching against the contents of the `array`. All strings or                   // 18272
 *     objects with string properties in `array` that match this string will be returned. This also                    // 18273
 *     applies to nested object properties.                                                                            // 18274
 *     The predicate can be negated by prefixing the string with `!`.                                                  // 18275
 *                                                                                                                     // 18276
 *   - `Object`: A pattern object can be used to filter specific properties on objects contained                       // 18277
 *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items                         // 18278
 *     which have property `name` containing "M" and property `phone` containing "1". A special                        // 18279
 *     property name `$` can be used (as in `{$:"text"}`) to accept a match against any                                // 18280
 *     property of the object or its nested object properties. That's equivalent to the simple                         // 18281
 *     substring match with a `string` as described above. The predicate can be negated by prefixing                   // 18282
 *     the string with `!`.                                                                                            // 18283
 *     For example `{name: "!M"}` predicate will return an array of items which have property `name`                   // 18284
 *     not containing "M".                                                                                             // 18285
 *                                                                                                                     // 18286
 *     Note that a named property will match properties on the same level only, while the special                      // 18287
 *     `$` property will match properties on the same level or deeper. E.g. an array item like                         // 18288
 *     `{name: {first: 'John', last: 'Doe'}}` will **not** be matched by `{name: 'John'}`, but                         // 18289
 *     **will** be matched by `{$: 'John'}`.                                                                           // 18290
 *                                                                                                                     // 18291
 *   - `function(value, index, array)`: A predicate function can be used to write arbitrary filters.                   // 18292
 *     The function is called for each element of the array, with the element, its index, and                          // 18293
 *     the entire array itself as arguments.                                                                           // 18294
 *                                                                                                                     // 18295
 *     The final result is an array of those elements that the predicate returned true for.                            // 18296
 *                                                                                                                     // 18297
 * @param {function(actual, expected)|true|undefined} comparator Comparator which is used in                           // 18298
 *     determining if the expected value (from the filter expression) and actual value (from                           // 18299
 *     the object in the array) should be considered a match.                                                          // 18300
 *                                                                                                                     // 18301
 *   Can be one of:                                                                                                    // 18302
 *                                                                                                                     // 18303
 *   - `function(actual, expected)`:                                                                                   // 18304
 *     The function will be given the object value and the predicate value to compare and                              // 18305
 *     should return true if both values should be considered equal.                                                   // 18306
 *                                                                                                                     // 18307
 *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(actual, expected)}`.                // 18308
 *     This is essentially strict comparison of expected and actual.                                                   // 18309
 *                                                                                                                     // 18310
 *   - `false|undefined`: A short hand for a function which will look for a substring match in case                    // 18311
 *     insensitive way.                                                                                                // 18312
 *                                                                                                                     // 18313
 *     Primitive values are converted to strings. Objects are not compared against primitives,                         // 18314
 *     unless they have a custom `toString` method (e.g. `Date` objects).                                              // 18315
 *                                                                                                                     // 18316
 * @example                                                                                                            // 18317
   <example>                                                                                                           // 18318
     <file name="index.html">                                                                                          // 18319
       <div ng-init="friends = [{name:'John', phone:'555-1276'},                                                       // 18320
                                {name:'Mary', phone:'800-BIG-MARY'},                                                   // 18321
                                {name:'Mike', phone:'555-4321'},                                                       // 18322
                                {name:'Adam', phone:'555-5678'},                                                       // 18323
                                {name:'Julie', phone:'555-8765'},                                                      // 18324
                                {name:'Juliette', phone:'555-5678'}]"></div>                                           // 18325
                                                                                                                       // 18326
       <label>Search: <input ng-model="searchText"></label>                                                            // 18327
       <table id="searchTextResults">                                                                                  // 18328
         <tr><th>Name</th><th>Phone</th></tr>                                                                          // 18329
         <tr ng-repeat="friend in friends | filter:searchText">                                                        // 18330
           <td>{{friend.name}}</td>                                                                                    // 18331
           <td>{{friend.phone}}</td>                                                                                   // 18332
         </tr>                                                                                                         // 18333
       </table>                                                                                                        // 18334
       <hr>                                                                                                            // 18335
       <label>Any: <input ng-model="search.$"></label> <br>                                                            // 18336
       <label>Name only <input ng-model="search.name"></label><br>                                                     // 18337
       <label>Phone only <input ng-model="search.phone"></label><br>                                                   // 18338
       <label>Equality <input type="checkbox" ng-model="strict"></label><br>                                           // 18339
       <table id="searchObjResults">                                                                                   // 18340
         <tr><th>Name</th><th>Phone</th></tr>                                                                          // 18341
         <tr ng-repeat="friendObj in friends | filter:search:strict">                                                  // 18342
           <td>{{friendObj.name}}</td>                                                                                 // 18343
           <td>{{friendObj.phone}}</td>                                                                                // 18344
         </tr>                                                                                                         // 18345
       </table>                                                                                                        // 18346
     </file>                                                                                                           // 18347
     <file name="protractor.js" type="protractor">                                                                     // 18348
       var expectFriendNames = function(expectedNames, key) {                                                          // 18349
         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {                      // 18350
           arr.forEach(function(wd, i) {                                                                               // 18351
             expect(wd.getText()).toMatch(expectedNames[i]);                                                           // 18352
           });                                                                                                         // 18353
         });                                                                                                           // 18354
       };                                                                                                              // 18355
                                                                                                                       // 18356
       it('should search across all fields when filtering with a string', function() {                                 // 18357
         var searchText = element(by.model('searchText'));                                                             // 18358
         searchText.clear();                                                                                           // 18359
         searchText.sendKeys('m');                                                                                     // 18360
         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');                                                        // 18361
                                                                                                                       // 18362
         searchText.clear();                                                                                           // 18363
         searchText.sendKeys('76');                                                                                    // 18364
         expectFriendNames(['John', 'Julie'], 'friend');                                                               // 18365
       });                                                                                                             // 18366
                                                                                                                       // 18367
       it('should search in specific fields when filtering with a predicate object', function() {                      // 18368
         var searchAny = element(by.model('search.$'));                                                                // 18369
         searchAny.clear();                                                                                            // 18370
         searchAny.sendKeys('i');                                                                                      // 18371
         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');                                        // 18372
       });                                                                                                             // 18373
       it('should use a equal comparison when comparator is true', function() {                                        // 18374
         var searchName = element(by.model('search.name'));                                                            // 18375
         var strict = element(by.model('strict'));                                                                     // 18376
         searchName.clear();                                                                                           // 18377
         searchName.sendKeys('Julie');                                                                                 // 18378
         strict.click();                                                                                               // 18379
         expectFriendNames(['Julie'], 'friendObj');                                                                    // 18380
       });                                                                                                             // 18381
     </file>                                                                                                           // 18382
   </example>                                                                                                          // 18383
 */                                                                                                                    // 18384
function filterFilter() {                                                                                              // 18385
  return function(array, expression, comparator) {                                                                     // 18386
    if (!isArrayLike(array)) {                                                                                         // 18387
      if (array == null) {                                                                                             // 18388
        return array;                                                                                                  // 18389
      } else {                                                                                                         // 18390
        throw minErr('filter')('notarray', 'Expected array but received: {0}', array);                                 // 18391
      }                                                                                                                // 18392
    }                                                                                                                  // 18393
                                                                                                                       // 18394
    var expressionType = getTypeForFilter(expression);                                                                 // 18395
    var predicateFn;                                                                                                   // 18396
    var matchAgainstAnyProp;                                                                                           // 18397
                                                                                                                       // 18398
    switch (expressionType) {                                                                                          // 18399
      case 'function':                                                                                                 // 18400
        predicateFn = expression;                                                                                      // 18401
        break;                                                                                                         // 18402
      case 'boolean':                                                                                                  // 18403
      case 'null':                                                                                                     // 18404
      case 'number':                                                                                                   // 18405
      case 'string':                                                                                                   // 18406
        matchAgainstAnyProp = true;                                                                                    // 18407
        //jshint -W086                                                                                                 // 18408
      case 'object':                                                                                                   // 18409
        //jshint +W086                                                                                                 // 18410
        predicateFn = createPredicateFn(expression, comparator, matchAgainstAnyProp);                                  // 18411
        break;                                                                                                         // 18412
      default:                                                                                                         // 18413
        return array;                                                                                                  // 18414
    }                                                                                                                  // 18415
                                                                                                                       // 18416
    return Array.prototype.filter.call(array, predicateFn);                                                            // 18417
  };                                                                                                                   // 18418
}                                                                                                                      // 18419
                                                                                                                       // 18420
// Helper functions for `filterFilter`                                                                                 // 18421
function createPredicateFn(expression, comparator, matchAgainstAnyProp) {                                              // 18422
  var shouldMatchPrimitives = isObject(expression) && ('$' in expression);                                             // 18423
  var predicateFn;                                                                                                     // 18424
                                                                                                                       // 18425
  if (comparator === true) {                                                                                           // 18426
    comparator = equals;                                                                                               // 18427
  } else if (!isFunction(comparator)) {                                                                                // 18428
    comparator = function(actual, expected) {                                                                          // 18429
      if (isUndefined(actual)) {                                                                                       // 18430
        // No substring matching against `undefined`                                                                   // 18431
        return false;                                                                                                  // 18432
      }                                                                                                                // 18433
      if ((actual === null) || (expected === null)) {                                                                  // 18434
        // No substring matching against `null`; only match against `null`                                             // 18435
        return actual === expected;                                                                                    // 18436
      }                                                                                                                // 18437
      if (isObject(expected) || (isObject(actual) && !hasCustomToString(actual))) {                                    // 18438
        // Should not compare primitives against objects, unless they have custom `toString` method                    // 18439
        return false;                                                                                                  // 18440
      }                                                                                                                // 18441
                                                                                                                       // 18442
      actual = lowercase('' + actual);                                                                                 // 18443
      expected = lowercase('' + expected);                                                                             // 18444
      return actual.indexOf(expected) !== -1;                                                                          // 18445
    };                                                                                                                 // 18446
  }                                                                                                                    // 18447
                                                                                                                       // 18448
  predicateFn = function(item) {                                                                                       // 18449
    if (shouldMatchPrimitives && !isObject(item)) {                                                                    // 18450
      return deepCompare(item, expression.$, comparator, false);                                                       // 18451
    }                                                                                                                  // 18452
    return deepCompare(item, expression, comparator, matchAgainstAnyProp);                                             // 18453
  };                                                                                                                   // 18454
                                                                                                                       // 18455
  return predicateFn;                                                                                                  // 18456
}                                                                                                                      // 18457
                                                                                                                       // 18458
function deepCompare(actual, expected, comparator, matchAgainstAnyProp, dontMatchWholeObject) {                        // 18459
  var actualType = getTypeForFilter(actual);                                                                           // 18460
  var expectedType = getTypeForFilter(expected);                                                                       // 18461
                                                                                                                       // 18462
  if ((expectedType === 'string') && (expected.charAt(0) === '!')) {                                                   // 18463
    return !deepCompare(actual, expected.substring(1), comparator, matchAgainstAnyProp);                               // 18464
  } else if (isArray(actual)) {                                                                                        // 18465
    // In case `actual` is an array, consider it a match                                                               // 18466
    // if ANY of it's items matches `expected`                                                                         // 18467
    return actual.some(function(item) {                                                                                // 18468
      return deepCompare(item, expected, comparator, matchAgainstAnyProp);                                             // 18469
    });                                                                                                                // 18470
  }                                                                                                                    // 18471
                                                                                                                       // 18472
  switch (actualType) {                                                                                                // 18473
    case 'object':                                                                                                     // 18474
      var key;                                                                                                         // 18475
      if (matchAgainstAnyProp) {                                                                                       // 18476
        for (key in actual) {                                                                                          // 18477
          if ((key.charAt(0) !== '$') && deepCompare(actual[key], expected, comparator, true)) {                       // 18478
            return true;                                                                                               // 18479
          }                                                                                                            // 18480
        }                                                                                                              // 18481
        return dontMatchWholeObject ? false : deepCompare(actual, expected, comparator, false);                        // 18482
      } else if (expectedType === 'object') {                                                                          // 18483
        for (key in expected) {                                                                                        // 18484
          var expectedVal = expected[key];                                                                             // 18485
          if (isFunction(expectedVal) || isUndefined(expectedVal)) {                                                   // 18486
            continue;                                                                                                  // 18487
          }                                                                                                            // 18488
                                                                                                                       // 18489
          var matchAnyProperty = key === '$';                                                                          // 18490
          var actualVal = matchAnyProperty ? actual : actual[key];                                                     // 18491
          if (!deepCompare(actualVal, expectedVal, comparator, matchAnyProperty, matchAnyProperty)) {                  // 18492
            return false;                                                                                              // 18493
          }                                                                                                            // 18494
        }                                                                                                              // 18495
        return true;                                                                                                   // 18496
      } else {                                                                                                         // 18497
        return comparator(actual, expected);                                                                           // 18498
      }                                                                                                                // 18499
      break;                                                                                                           // 18500
    case 'function':                                                                                                   // 18501
      return false;                                                                                                    // 18502
    default:                                                                                                           // 18503
      return comparator(actual, expected);                                                                             // 18504
  }                                                                                                                    // 18505
}                                                                                                                      // 18506
                                                                                                                       // 18507
// Used for easily differentiating between `null` and actual `object`                                                  // 18508
function getTypeForFilter(val) {                                                                                       // 18509
  return (val === null) ? 'null' : typeof val;                                                                         // 18510
}                                                                                                                      // 18511
                                                                                                                       // 18512
/**                                                                                                                    // 18513
 * @ngdoc filter                                                                                                       // 18514
 * @name currency                                                                                                      // 18515
 * @kind function                                                                                                      // 18516
 *                                                                                                                     // 18517
 * @description                                                                                                        // 18518
 * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default                         // 18519
 * symbol for current locale is used.                                                                                  // 18520
 *                                                                                                                     // 18521
 * @param {number} amount Input to filter.                                                                             // 18522
 * @param {string=} symbol Currency symbol or identifier to be displayed.                                              // 18523
 * @param {number=} fractionSize Number of decimal places to round the amount to, defaults to default max fraction size for current locale
 * @returns {string} Formatted number.                                                                                 // 18525
 *                                                                                                                     // 18526
 *                                                                                                                     // 18527
 * @example                                                                                                            // 18528
   <example module="currencyExample">                                                                                  // 18529
     <file name="index.html">                                                                                          // 18530
       <script>                                                                                                        // 18531
         angular.module('currencyExample', [])                                                                         // 18532
           .controller('ExampleController', ['$scope', function($scope) {                                              // 18533
             $scope.amount = 1234.56;                                                                                  // 18534
           }]);                                                                                                        // 18535
       </script>                                                                                                       // 18536
       <div ng-controller="ExampleController">                                                                         // 18537
         <input type="number" ng-model="amount" aria-label="amount"> <br>                                              // 18538
         default currency symbol ($): <span id="currency-default">{{amount | currency}}</span><br>                     // 18539
         custom currency identifier (USD$): <span id="currency-custom">{{amount | currency:"USD$"}}</span>             // 18540
         no fractions (0): <span id="currency-no-fractions">{{amount | currency:"USD$":0}}</span>                      // 18541
       </div>                                                                                                          // 18542
     </file>                                                                                                           // 18543
     <file name="protractor.js" type="protractor">                                                                     // 18544
       it('should init with 1234.56', function() {                                                                     // 18545
         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');                                       // 18546
         expect(element(by.id('currency-custom')).getText()).toBe('USD$1,234.56');                                     // 18547
         expect(element(by.id('currency-no-fractions')).getText()).toBe('USD$1,235');                                  // 18548
       });                                                                                                             // 18549
       it('should update', function() {                                                                                // 18550
         if (browser.params.browser == 'safari') {                                                                     // 18551
           // Safari does not understand the minus key. See                                                            // 18552
           // https://github.com/angular/protractor/issues/481                                                         // 18553
           return;                                                                                                     // 18554
         }                                                                                                             // 18555
         element(by.model('amount')).clear();                                                                          // 18556
         element(by.model('amount')).sendKeys('-1234');                                                                // 18557
         expect(element(by.id('currency-default')).getText()).toBe('-$1,234.00');                                      // 18558
         expect(element(by.id('currency-custom')).getText()).toBe('-USD$1,234.00');                                    // 18559
         expect(element(by.id('currency-no-fractions')).getText()).toBe('-USD$1,234');                                 // 18560
       });                                                                                                             // 18561
     </file>                                                                                                           // 18562
   </example>                                                                                                          // 18563
 */                                                                                                                    // 18564
currencyFilter.$inject = ['$locale'];                                                                                  // 18565
function currencyFilter($locale) {                                                                                     // 18566
  var formats = $locale.NUMBER_FORMATS;                                                                                // 18567
  return function(amount, currencySymbol, fractionSize) {                                                              // 18568
    if (isUndefined(currencySymbol)) {                                                                                 // 18569
      currencySymbol = formats.CURRENCY_SYM;                                                                           // 18570
    }                                                                                                                  // 18571
                                                                                                                       // 18572
    if (isUndefined(fractionSize)) {                                                                                   // 18573
      fractionSize = formats.PATTERNS[1].maxFrac;                                                                      // 18574
    }                                                                                                                  // 18575
                                                                                                                       // 18576
    // if null or undefined pass it through                                                                            // 18577
    return (amount == null)                                                                                            // 18578
        ? amount                                                                                                       // 18579
        : formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize).             // 18580
            replace(/\u00A4/g, currencySymbol);                                                                        // 18581
  };                                                                                                                   // 18582
}                                                                                                                      // 18583
                                                                                                                       // 18584
/**                                                                                                                    // 18585
 * @ngdoc filter                                                                                                       // 18586
 * @name number                                                                                                        // 18587
 * @kind function                                                                                                      // 18588
 *                                                                                                                     // 18589
 * @description                                                                                                        // 18590
 * Formats a number as text.                                                                                           // 18591
 *                                                                                                                     // 18592
 * If the input is null or undefined, it will just be returned.                                                        // 18593
 * If the input is infinite (Infinity/-Infinity) the Infinity symbol '∞' is returned.                                  // 18594
 * If the input is not a number an empty string is returned.                                                           // 18595
 *                                                                                                                     // 18596
 *                                                                                                                     // 18597
 * @param {number|string} number Number to format.                                                                     // 18598
 * @param {(number|string)=} fractionSize Number of decimal places to round the number to.                             // 18599
 * If this is not provided then the fraction size is computed from the current locale's number                         // 18600
 * formatting pattern. In the case of the default locale, it will be 3.                                                // 18601
 * @returns {string} Number rounded to decimalPlaces and places a “,” after each third digit.                          // 18602
 *                                                                                                                     // 18603
 * @example                                                                                                            // 18604
   <example module="numberFilterExample">                                                                              // 18605
     <file name="index.html">                                                                                          // 18606
       <script>                                                                                                        // 18607
         angular.module('numberFilterExample', [])                                                                     // 18608
           .controller('ExampleController', ['$scope', function($scope) {                                              // 18609
             $scope.val = 1234.56789;                                                                                  // 18610
           }]);                                                                                                        // 18611
       </script>                                                                                                       // 18612
       <div ng-controller="ExampleController">                                                                         // 18613
         <label>Enter number: <input ng-model='val'></label><br>                                                       // 18614
         Default formatting: <span id='number-default'>{{val | number}}</span><br>                                     // 18615
         No fractions: <span>{{val | number:0}}</span><br>                                                             // 18616
         Negative number: <span>{{-val | number:4}}</span>                                                             // 18617
       </div>                                                                                                          // 18618
     </file>                                                                                                           // 18619
     <file name="protractor.js" type="protractor">                                                                     // 18620
       it('should format numbers', function() {                                                                        // 18621
         expect(element(by.id('number-default')).getText()).toBe('1,234.568');                                         // 18622
         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');                                        // 18623
         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');                                 // 18624
       });                                                                                                             // 18625
                                                                                                                       // 18626
       it('should update', function() {                                                                                // 18627
         element(by.model('val')).clear();                                                                             // 18628
         element(by.model('val')).sendKeys('3374.333');                                                                // 18629
         expect(element(by.id('number-default')).getText()).toBe('3,374.333');                                         // 18630
         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');                                        // 18631
         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');                                 // 18632
      });                                                                                                              // 18633
     </file>                                                                                                           // 18634
   </example>                                                                                                          // 18635
 */                                                                                                                    // 18636
                                                                                                                       // 18637
                                                                                                                       // 18638
numberFilter.$inject = ['$locale'];                                                                                    // 18639
function numberFilter($locale) {                                                                                       // 18640
  var formats = $locale.NUMBER_FORMATS;                                                                                // 18641
  return function(number, fractionSize) {                                                                              // 18642
                                                                                                                       // 18643
    // if null or undefined pass it through                                                                            // 18644
    return (number == null)                                                                                            // 18645
        ? number                                                                                                       // 18646
        : formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP,                            // 18647
                       fractionSize);                                                                                  // 18648
  };                                                                                                                   // 18649
}                                                                                                                      // 18650
                                                                                                                       // 18651
var DECIMAL_SEP = '.';                                                                                                 // 18652
function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {                                           // 18653
  if (isObject(number)) return '';                                                                                     // 18654
                                                                                                                       // 18655
  var isNegative = number < 0;                                                                                         // 18656
  number = Math.abs(number);                                                                                           // 18657
                                                                                                                       // 18658
  var isInfinity = number === Infinity;                                                                                // 18659
  if (!isInfinity && !isFinite(number)) return '';                                                                     // 18660
                                                                                                                       // 18661
  var numStr = number + '',                                                                                            // 18662
      formatedText = '',                                                                                               // 18663
      hasExponent = false,                                                                                             // 18664
      parts = [];                                                                                                      // 18665
                                                                                                                       // 18666
  if (isInfinity) formatedText = '\u221e';                                                                             // 18667
                                                                                                                       // 18668
  if (!isInfinity && numStr.indexOf('e') !== -1) {                                                                     // 18669
    var match = numStr.match(/([\d\.]+)e(-?)(\d+)/);                                                                   // 18670
    if (match && match[2] == '-' && match[3] > fractionSize + 1) {                                                     // 18671
      number = 0;                                                                                                      // 18672
    } else {                                                                                                           // 18673
      formatedText = numStr;                                                                                           // 18674
      hasExponent = true;                                                                                              // 18675
    }                                                                                                                  // 18676
  }                                                                                                                    // 18677
                                                                                                                       // 18678
  if (!isInfinity && !hasExponent) {                                                                                   // 18679
    var fractionLen = (numStr.split(DECIMAL_SEP)[1] || '').length;                                                     // 18680
                                                                                                                       // 18681
    // determine fractionSize if it is not specified                                                                   // 18682
    if (isUndefined(fractionSize)) {                                                                                   // 18683
      fractionSize = Math.min(Math.max(pattern.minFrac, fractionLen), pattern.maxFrac);                                // 18684
    }                                                                                                                  // 18685
                                                                                                                       // 18686
    // safely round numbers in JS without hitting imprecisions of floating-point arithmetics                           // 18687
    // inspired by:                                                                                                    // 18688
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round                     // 18689
    number = +(Math.round(+(number.toString() + 'e' + fractionSize)).toString() + 'e' + -fractionSize);                // 18690
                                                                                                                       // 18691
    var fraction = ('' + number).split(DECIMAL_SEP);                                                                   // 18692
    var whole = fraction[0];                                                                                           // 18693
    fraction = fraction[1] || '';                                                                                      // 18694
                                                                                                                       // 18695
    var i, pos = 0,                                                                                                    // 18696
        lgroup = pattern.lgSize,                                                                                       // 18697
        group = pattern.gSize;                                                                                         // 18698
                                                                                                                       // 18699
    if (whole.length >= (lgroup + group)) {                                                                            // 18700
      pos = whole.length - lgroup;                                                                                     // 18701
      for (i = 0; i < pos; i++) {                                                                                      // 18702
        if ((pos - i) % group === 0 && i !== 0) {                                                                      // 18703
          formatedText += groupSep;                                                                                    // 18704
        }                                                                                                              // 18705
        formatedText += whole.charAt(i);                                                                               // 18706
      }                                                                                                                // 18707
    }                                                                                                                  // 18708
                                                                                                                       // 18709
    for (i = pos; i < whole.length; i++) {                                                                             // 18710
      if ((whole.length - i) % lgroup === 0 && i !== 0) {                                                              // 18711
        formatedText += groupSep;                                                                                      // 18712
      }                                                                                                                // 18713
      formatedText += whole.charAt(i);                                                                                 // 18714
    }                                                                                                                  // 18715
                                                                                                                       // 18716
    // format fraction part.                                                                                           // 18717
    while (fraction.length < fractionSize) {                                                                           // 18718
      fraction += '0';                                                                                                 // 18719
    }                                                                                                                  // 18720
                                                                                                                       // 18721
    if (fractionSize && fractionSize !== "0") formatedText += decimalSep + fraction.substr(0, fractionSize);           // 18722
  } else {                                                                                                             // 18723
    if (fractionSize > 0 && number < 1) {                                                                              // 18724
      formatedText = number.toFixed(fractionSize);                                                                     // 18725
      number = parseFloat(formatedText);                                                                               // 18726
      formatedText = formatedText.replace(DECIMAL_SEP, decimalSep);                                                    // 18727
    }                                                                                                                  // 18728
  }                                                                                                                    // 18729
                                                                                                                       // 18730
  if (number === 0) {                                                                                                  // 18731
    isNegative = false;                                                                                                // 18732
  }                                                                                                                    // 18733
                                                                                                                       // 18734
  parts.push(isNegative ? pattern.negPre : pattern.posPre,                                                             // 18735
             formatedText,                                                                                             // 18736
             isNegative ? pattern.negSuf : pattern.posSuf);                                                            // 18737
  return parts.join('');                                                                                               // 18738
}                                                                                                                      // 18739
                                                                                                                       // 18740
function padNumber(num, digits, trim) {                                                                                // 18741
  var neg = '';                                                                                                        // 18742
  if (num < 0) {                                                                                                       // 18743
    neg =  '-';                                                                                                        // 18744
    num = -num;                                                                                                        // 18745
  }                                                                                                                    // 18746
  num = '' + num;                                                                                                      // 18747
  while (num.length < digits) num = '0' + num;                                                                         // 18748
  if (trim) {                                                                                                          // 18749
    num = num.substr(num.length - digits);                                                                             // 18750
  }                                                                                                                    // 18751
  return neg + num;                                                                                                    // 18752
}                                                                                                                      // 18753
                                                                                                                       // 18754
                                                                                                                       // 18755
function dateGetter(name, size, offset, trim) {                                                                        // 18756
  offset = offset || 0;                                                                                                // 18757
  return function(date) {                                                                                              // 18758
    var value = date['get' + name]();                                                                                  // 18759
    if (offset > 0 || value > -offset) {                                                                               // 18760
      value += offset;                                                                                                 // 18761
    }                                                                                                                  // 18762
    if (value === 0 && offset == -12) value = 12;                                                                      // 18763
    return padNumber(value, size, trim);                                                                               // 18764
  };                                                                                                                   // 18765
}                                                                                                                      // 18766
                                                                                                                       // 18767
function dateStrGetter(name, shortForm) {                                                                              // 18768
  return function(date, formats) {                                                                                     // 18769
    var value = date['get' + name]();                                                                                  // 18770
    var get = uppercase(shortForm ? ('SHORT' + name) : name);                                                          // 18771
                                                                                                                       // 18772
    return formats[get][value];                                                                                        // 18773
  };                                                                                                                   // 18774
}                                                                                                                      // 18775
                                                                                                                       // 18776
function timeZoneGetter(date, formats, offset) {                                                                       // 18777
  var zone = -1 * offset;                                                                                              // 18778
  var paddedZone = (zone >= 0) ? "+" : "";                                                                             // 18779
                                                                                                                       // 18780
  paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) +                                           // 18781
                padNumber(Math.abs(zone % 60), 2);                                                                     // 18782
                                                                                                                       // 18783
  return paddedZone;                                                                                                   // 18784
}                                                                                                                      // 18785
                                                                                                                       // 18786
function getFirstThursdayOfYear(year) {                                                                                // 18787
    // 0 = index of January                                                                                            // 18788
    var dayOfWeekOnFirst = (new Date(year, 0, 1)).getDay();                                                            // 18789
    // 4 = index of Thursday (+1 to account for 1st = 5)                                                               // 18790
    // 11 = index of *next* Thursday (+1 account for 1st = 12)                                                         // 18791
    return new Date(year, 0, ((dayOfWeekOnFirst <= 4) ? 5 : 12) - dayOfWeekOnFirst);                                   // 18792
}                                                                                                                      // 18793
                                                                                                                       // 18794
function getThursdayThisWeek(datetime) {                                                                               // 18795
    return new Date(datetime.getFullYear(), datetime.getMonth(),                                                       // 18796
      // 4 = index of Thursday                                                                                         // 18797
      datetime.getDate() + (4 - datetime.getDay()));                                                                   // 18798
}                                                                                                                      // 18799
                                                                                                                       // 18800
function weekGetter(size) {                                                                                            // 18801
   return function(date) {                                                                                             // 18802
      var firstThurs = getFirstThursdayOfYear(date.getFullYear()),                                                     // 18803
         thisThurs = getThursdayThisWeek(date);                                                                        // 18804
                                                                                                                       // 18805
      var diff = +thisThurs - +firstThurs,                                                                             // 18806
         result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week                                               // 18807
                                                                                                                       // 18808
      return padNumber(result, size);                                                                                  // 18809
   };                                                                                                                  // 18810
}                                                                                                                      // 18811
                                                                                                                       // 18812
function ampmGetter(date, formats) {                                                                                   // 18813
  return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];                                                   // 18814
}                                                                                                                      // 18815
                                                                                                                       // 18816
function eraGetter(date, formats) {                                                                                    // 18817
  return date.getFullYear() <= 0 ? formats.ERAS[0] : formats.ERAS[1];                                                  // 18818
}                                                                                                                      // 18819
                                                                                                                       // 18820
function longEraGetter(date, formats) {                                                                                // 18821
  return date.getFullYear() <= 0 ? formats.ERANAMES[0] : formats.ERANAMES[1];                                          // 18822
}                                                                                                                      // 18823
                                                                                                                       // 18824
var DATE_FORMATS = {                                                                                                   // 18825
  yyyy: dateGetter('FullYear', 4),                                                                                     // 18826
    yy: dateGetter('FullYear', 2, 0, true),                                                                            // 18827
     y: dateGetter('FullYear', 1),                                                                                     // 18828
  MMMM: dateStrGetter('Month'),                                                                                        // 18829
   MMM: dateStrGetter('Month', true),                                                                                  // 18830
    MM: dateGetter('Month', 2, 1),                                                                                     // 18831
     M: dateGetter('Month', 1, 1),                                                                                     // 18832
    dd: dateGetter('Date', 2),                                                                                         // 18833
     d: dateGetter('Date', 1),                                                                                         // 18834
    HH: dateGetter('Hours', 2),                                                                                        // 18835
     H: dateGetter('Hours', 1),                                                                                        // 18836
    hh: dateGetter('Hours', 2, -12),                                                                                   // 18837
     h: dateGetter('Hours', 1, -12),                                                                                   // 18838
    mm: dateGetter('Minutes', 2),                                                                                      // 18839
     m: dateGetter('Minutes', 1),                                                                                      // 18840
    ss: dateGetter('Seconds', 2),                                                                                      // 18841
     s: dateGetter('Seconds', 1),                                                                                      // 18842
     // while ISO 8601 requires fractions to be prefixed with `.` or `,`                                               // 18843
     // we can be just safely rely on using `sss` since we currently don't support single or two digit fractions       // 18844
   sss: dateGetter('Milliseconds', 3),                                                                                 // 18845
  EEEE: dateStrGetter('Day'),                                                                                          // 18846
   EEE: dateStrGetter('Day', true),                                                                                    // 18847
     a: ampmGetter,                                                                                                    // 18848
     Z: timeZoneGetter,                                                                                                // 18849
    ww: weekGetter(2),                                                                                                 // 18850
     w: weekGetter(1),                                                                                                 // 18851
     G: eraGetter,                                                                                                     // 18852
     GG: eraGetter,                                                                                                    // 18853
     GGG: eraGetter,                                                                                                   // 18854
     GGGG: longEraGetter                                                                                               // 18855
};                                                                                                                     // 18856
                                                                                                                       // 18857
var DATE_FORMATS_SPLIT = /((?:[^yMdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,       // 18858
    NUMBER_STRING = /^\-?\d+$/;                                                                                        // 18859
                                                                                                                       // 18860
/**                                                                                                                    // 18861
 * @ngdoc filter                                                                                                       // 18862
 * @name date                                                                                                          // 18863
 * @kind function                                                                                                      // 18864
 *                                                                                                                     // 18865
 * @description                                                                                                        // 18866
 *   Formats `date` to a string based on the requested `format`.                                                       // 18867
 *                                                                                                                     // 18868
 *   `format` string can be composed of the following elements:                                                        // 18869
 *                                                                                                                     // 18870
 *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)                                   // 18871
 *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)                     // 18872
 *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)                                          // 18873
 *   * `'MMMM'`: Month in year (January-December)                                                                      // 18874
 *   * `'MMM'`: Month in year (Jan-Dec)                                                                                // 18875
 *   * `'MM'`: Month in year, padded (01-12)                                                                           // 18876
 *   * `'M'`: Month in year (1-12)                                                                                     // 18877
 *   * `'dd'`: Day in month, padded (01-31)                                                                            // 18878
 *   * `'d'`: Day in month (1-31)                                                                                      // 18879
 *   * `'EEEE'`: Day in Week,(Sunday-Saturday)                                                                         // 18880
 *   * `'EEE'`: Day in Week, (Sun-Sat)                                                                                 // 18881
 *   * `'HH'`: Hour in day, padded (00-23)                                                                             // 18882
 *   * `'H'`: Hour in day (0-23)                                                                                       // 18883
 *   * `'hh'`: Hour in AM/PM, padded (01-12)                                                                           // 18884
 *   * `'h'`: Hour in AM/PM, (1-12)                                                                                    // 18885
 *   * `'mm'`: Minute in hour, padded (00-59)                                                                          // 18886
 *   * `'m'`: Minute in hour (0-59)                                                                                    // 18887
 *   * `'ss'`: Second in minute, padded (00-59)                                                                        // 18888
 *   * `'s'`: Second in minute (0-59)                                                                                  // 18889
 *   * `'sss'`: Millisecond in second, padded (000-999)                                                                // 18890
 *   * `'a'`: AM/PM marker                                                                                             // 18891
 *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)                                      // 18892
 *   * `'ww'`: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year                   // 18893
 *   * `'w'`: Week of year (0-53). Week 1 is the week with the first Thursday of the year                              // 18894
 *   * `'G'`, `'GG'`, `'GGG'`: The abbreviated form of the era string (e.g. 'AD')                                      // 18895
 *   * `'GGGG'`: The long form of the era string (e.g. 'Anno Domini')                                                  // 18896
 *                                                                                                                     // 18897
 *   `format` string can also be one of the following predefined                                                       // 18898
 *   {@link guide/i18n localizable formats}:                                                                           // 18899
 *                                                                                                                     // 18900
 *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale                                               // 18901
 *     (e.g. Sep 3, 2010 12:05:08 PM)                                                                                  // 18902
 *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 PM)                             // 18903
 *   * `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` for en_US  locale                                               // 18904
 *     (e.g. Friday, September 3, 2010)                                                                                // 18905
 *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)                            // 18906
 *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)                                 // 18907
 *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)                                          // 18908
 *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 PM)                                 // 18909
 *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 PM)                                        // 18910
 *                                                                                                                     // 18911
 *   `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.      // 18912
 *   `"h 'in the morning'"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence     // 18913
 *   (e.g. `"h 'o''clock'"`).                                                                                          // 18914
 *                                                                                                                     // 18915
 * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or                    // 18916
 *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its                       // 18917
 *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is                      // 18918
 *    specified in the string input, the time is considered to be in the local timezone.                               // 18919
 * @param {string=} format Formatting rules (see Description). If not specified,                                       // 18920
 *    `mediumDate` is used.                                                                                            // 18921
 * @param {string=} timezone Timezone to be used for formatting. It understands UTC/GMT and the                        // 18922
 *    continental US time zone abbreviations, but for general use, use a time zone offset, for                         // 18923
 *    example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)                                          // 18924
 *    If not specified, the timezone of the browser will be used.                                                      // 18925
 * @returns {string} Formatted string or the input if input is not recognized as date/millis.                          // 18926
 *                                                                                                                     // 18927
 * @example                                                                                                            // 18928
   <example>                                                                                                           // 18929
     <file name="index.html">                                                                                          // 18930
       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:                                                 // 18931
           <span>{{1288323623006 | date:'medium'}}</span><br>                                                          // 18932
       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:                                  // 18933
          <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>                                            // 18934
       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:                                     // 18935
          <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>                                             // 18936
       <span ng-non-bindable>{{1288323623006 | date:"MM/dd/yyyy 'at' h:mma"}}</span>:                                  // 18937
          <span>{{'1288323623006' | date:"MM/dd/yyyy 'at' h:mma"}}</span><br>                                          // 18938
     </file>                                                                                                           // 18939
     <file name="protractor.js" type="protractor">                                                                     // 18940
       it('should format date', function() {                                                                           // 18941
         expect(element(by.binding("1288323623006 | date:'medium'")).getText()).                                       // 18942
            toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);                                                      // 18943
         expect(element(by.binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).getText()).                        // 18944
            toMatch(/2010\-10\-2\d \d{2}:\d{2}:\d{2} (\-|\+)?\d{4}/);                                                  // 18945
         expect(element(by.binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).getText()).                         // 18946
            toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);                                                           // 18947
         expect(element(by.binding("'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"")).getText()).                    // 18948
            toMatch(/10\/2\d\/2010 at \d{1,2}:\d{2}(AM|PM)/);                                                          // 18949
       });                                                                                                             // 18950
     </file>                                                                                                           // 18951
   </example>                                                                                                          // 18952
 */                                                                                                                    // 18953
dateFilter.$inject = ['$locale'];                                                                                      // 18954
function dateFilter($locale) {                                                                                         // 18955
                                                                                                                       // 18956
                                                                                                                       // 18957
  var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
                     // 1        2       3         4          5          6          7          8  9     10      11     // 18959
  function jsonStringToDate(string) {                                                                                  // 18960
    var match;                                                                                                         // 18961
    if (match = string.match(R_ISO8601_STR)) {                                                                         // 18962
      var date = new Date(0),                                                                                          // 18963
          tzHour = 0,                                                                                                  // 18964
          tzMin  = 0,                                                                                                  // 18965
          dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear,                                              // 18966
          timeSetter = match[8] ? date.setUTCHours : date.setHours;                                                    // 18967
                                                                                                                       // 18968
      if (match[9]) {                                                                                                  // 18969
        tzHour = toInt(match[9] + match[10]);                                                                          // 18970
        tzMin = toInt(match[9] + match[11]);                                                                           // 18971
      }                                                                                                                // 18972
      dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));                                    // 18973
      var h = toInt(match[4] || 0) - tzHour;                                                                           // 18974
      var m = toInt(match[5] || 0) - tzMin;                                                                            // 18975
      var s = toInt(match[6] || 0);                                                                                    // 18976
      var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);                                                  // 18977
      timeSetter.call(date, h, m, s, ms);                                                                              // 18978
      return date;                                                                                                     // 18979
    }                                                                                                                  // 18980
    return string;                                                                                                     // 18981
  }                                                                                                                    // 18982
                                                                                                                       // 18983
                                                                                                                       // 18984
  return function(date, format, timezone) {                                                                            // 18985
    var text = '',                                                                                                     // 18986
        parts = [],                                                                                                    // 18987
        fn, match;                                                                                                     // 18988
                                                                                                                       // 18989
    format = format || 'mediumDate';                                                                                   // 18990
    format = $locale.DATETIME_FORMATS[format] || format;                                                               // 18991
    if (isString(date)) {                                                                                              // 18992
      date = NUMBER_STRING.test(date) ? toInt(date) : jsonStringToDate(date);                                          // 18993
    }                                                                                                                  // 18994
                                                                                                                       // 18995
    if (isNumber(date)) {                                                                                              // 18996
      date = new Date(date);                                                                                           // 18997
    }                                                                                                                  // 18998
                                                                                                                       // 18999
    if (!isDate(date) || !isFinite(date.getTime())) {                                                                  // 19000
      return date;                                                                                                     // 19001
    }                                                                                                                  // 19002
                                                                                                                       // 19003
    while (format) {                                                                                                   // 19004
      match = DATE_FORMATS_SPLIT.exec(format);                                                                         // 19005
      if (match) {                                                                                                     // 19006
        parts = concat(parts, match, 1);                                                                               // 19007
        format = parts.pop();                                                                                          // 19008
      } else {                                                                                                         // 19009
        parts.push(format);                                                                                            // 19010
        format = null;                                                                                                 // 19011
      }                                                                                                                // 19012
    }                                                                                                                  // 19013
                                                                                                                       // 19014
    var dateTimezoneOffset = date.getTimezoneOffset();                                                                 // 19015
    if (timezone) {                                                                                                    // 19016
      dateTimezoneOffset = timezoneToOffset(timezone, date.getTimezoneOffset());                                       // 19017
      date = convertTimezoneToLocal(date, timezone, true);                                                             // 19018
    }                                                                                                                  // 19019
    forEach(parts, function(value) {                                                                                   // 19020
      fn = DATE_FORMATS[value];                                                                                        // 19021
      text += fn ? fn(date, $locale.DATETIME_FORMATS, dateTimezoneOffset)                                              // 19022
                 : value.replace(/(^'|'$)/g, '').replace(/''/g, "'");                                                  // 19023
    });                                                                                                                // 19024
                                                                                                                       // 19025
    return text;                                                                                                       // 19026
  };                                                                                                                   // 19027
}                                                                                                                      // 19028
                                                                                                                       // 19029
                                                                                                                       // 19030
/**                                                                                                                    // 19031
 * @ngdoc filter                                                                                                       // 19032
 * @name json                                                                                                          // 19033
 * @kind function                                                                                                      // 19034
 *                                                                                                                     // 19035
 * @description                                                                                                        // 19036
 *   Allows you to convert a JavaScript object into JSON string.                                                       // 19037
 *                                                                                                                     // 19038
 *   This filter is mostly useful for debugging. When using the double curly {{value}} notation                        // 19039
 *   the binding is automatically converted to JSON.                                                                   // 19040
 *                                                                                                                     // 19041
 * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.                           // 19042
 * @param {number=} spacing The number of spaces to use per indentation, defaults to 2.                                // 19043
 * @returns {string} JSON string.                                                                                      // 19044
 *                                                                                                                     // 19045
 *                                                                                                                     // 19046
 * @example                                                                                                            // 19047
   <example>                                                                                                           // 19048
     <file name="index.html">                                                                                          // 19049
       <pre id="default-spacing">{{ {'name':'value'} | json }}</pre>                                                   // 19050
       <pre id="custom-spacing">{{ {'name':'value'} | json:4 }}</pre>                                                  // 19051
     </file>                                                                                                           // 19052
     <file name="protractor.js" type="protractor">                                                                     // 19053
       it('should jsonify filtered objects', function() {                                                              // 19054
         expect(element(by.id('default-spacing')).getText()).toMatch(/\{\n  "name": ?"value"\n}/);                     // 19055
         expect(element(by.id('custom-spacing')).getText()).toMatch(/\{\n    "name": ?"value"\n}/);                    // 19056
       });                                                                                                             // 19057
     </file>                                                                                                           // 19058
   </example>                                                                                                          // 19059
 *                                                                                                                     // 19060
 */                                                                                                                    // 19061
function jsonFilter() {                                                                                                // 19062
  return function(object, spacing) {                                                                                   // 19063
    if (isUndefined(spacing)) {                                                                                        // 19064
        spacing = 2;                                                                                                   // 19065
    }                                                                                                                  // 19066
    return toJson(object, spacing);                                                                                    // 19067
  };                                                                                                                   // 19068
}                                                                                                                      // 19069
                                                                                                                       // 19070
                                                                                                                       // 19071
/**                                                                                                                    // 19072
 * @ngdoc filter                                                                                                       // 19073
 * @name lowercase                                                                                                     // 19074
 * @kind function                                                                                                      // 19075
 * @description                                                                                                        // 19076
 * Converts string to lowercase.                                                                                       // 19077
 * @see angular.lowercase                                                                                              // 19078
 */                                                                                                                    // 19079
var lowercaseFilter = valueFn(lowercase);                                                                              // 19080
                                                                                                                       // 19081
                                                                                                                       // 19082
/**                                                                                                                    // 19083
 * @ngdoc filter                                                                                                       // 19084
 * @name uppercase                                                                                                     // 19085
 * @kind function                                                                                                      // 19086
 * @description                                                                                                        // 19087
 * Converts string to uppercase.                                                                                       // 19088
 * @see angular.uppercase                                                                                              // 19089
 */                                                                                                                    // 19090
var uppercaseFilter = valueFn(uppercase);                                                                              // 19091
                                                                                                                       // 19092
/**                                                                                                                    // 19093
 * @ngdoc filter                                                                                                       // 19094
 * @name limitTo                                                                                                       // 19095
 * @kind function                                                                                                      // 19096
 *                                                                                                                     // 19097
 * @description                                                                                                        // 19098
 * Creates a new array or string containing only a specified number of elements. The elements                          // 19099
 * are taken from either the beginning or the end of the source array, string or number, as specified by               // 19100
 * the value and sign (positive or negative) of `limit`. If a number is used as input, it is                           // 19101
 * converted to a string.                                                                                              // 19102
 *                                                                                                                     // 19103
 * @param {Array|string|number} input Source array, string or number to be limited.                                    // 19104
 * @param {string|number} limit The length of the returned array or string. If the `limit` number                      // 19105
 *     is positive, `limit` number of items from the beginning of the source array/string are copied.                  // 19106
 *     If the number is negative, `limit` number  of items from the end of the source array/string                     // 19107
 *     are copied. The `limit` will be trimmed if it exceeds `array.length`. If `limit` is undefined,                  // 19108
 *     the input will be returned unchanged.                                                                           // 19109
 * @param {(string|number)=} begin Index at which to begin limitation. As a negative index, `begin`                    // 19110
 *     indicates an offset from the end of `input`. Defaults to `0`.                                                   // 19111
 * @returns {Array|string} A new sub-array or substring of length `limit` or less if input array                       // 19112
 *     had less than `limit` elements.                                                                                 // 19113
 *                                                                                                                     // 19114
 * @example                                                                                                            // 19115
   <example module="limitToExample">                                                                                   // 19116
     <file name="index.html">                                                                                          // 19117
       <script>                                                                                                        // 19118
         angular.module('limitToExample', [])                                                                          // 19119
           .controller('ExampleController', ['$scope', function($scope) {                                              // 19120
             $scope.numbers = [1,2,3,4,5,6,7,8,9];                                                                     // 19121
             $scope.letters = "abcdefghi";                                                                             // 19122
             $scope.longNumber = 2345432342;                                                                           // 19123
             $scope.numLimit = 3;                                                                                      // 19124
             $scope.letterLimit = 3;                                                                                   // 19125
             $scope.longNumberLimit = 3;                                                                               // 19126
           }]);                                                                                                        // 19127
       </script>                                                                                                       // 19128
       <div ng-controller="ExampleController">                                                                         // 19129
         <label>                                                                                                       // 19130
            Limit {{numbers}} to:                                                                                      // 19131
            <input type="number" step="1" ng-model="numLimit">                                                         // 19132
         </label>                                                                                                      // 19133
         <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>                                                       // 19134
         <label>                                                                                                       // 19135
            Limit {{letters}} to:                                                                                      // 19136
            <input type="number" step="1" ng-model="letterLimit">                                                      // 19137
         </label>                                                                                                      // 19138
         <p>Output letters: {{ letters | limitTo:letterLimit }}</p>                                                    // 19139
         <label>                                                                                                       // 19140
            Limit {{longNumber}} to:                                                                                   // 19141
            <input type="number" step="1" ng-model="longNumberLimit">                                                  // 19142
         </label>                                                                                                      // 19143
         <p>Output long number: {{ longNumber | limitTo:longNumberLimit }}</p>                                         // 19144
       </div>                                                                                                          // 19145
     </file>                                                                                                           // 19146
     <file name="protractor.js" type="protractor">                                                                     // 19147
       var numLimitInput = element(by.model('numLimit'));                                                              // 19148
       var letterLimitInput = element(by.model('letterLimit'));                                                        // 19149
       var longNumberLimitInput = element(by.model('longNumberLimit'));                                                // 19150
       var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));                                         // 19151
       var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));                                      // 19152
       var limitedLongNumber = element(by.binding('longNumber | limitTo:longNumberLimit'));                            // 19153
                                                                                                                       // 19154
       it('should limit the number array to first three items', function() {                                           // 19155
         expect(numLimitInput.getAttribute('value')).toBe('3');                                                        // 19156
         expect(letterLimitInput.getAttribute('value')).toBe('3');                                                     // 19157
         expect(longNumberLimitInput.getAttribute('value')).toBe('3');                                                 // 19158
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');                                          // 19159
         expect(limitedLetters.getText()).toEqual('Output letters: abc');                                              // 19160
         expect(limitedLongNumber.getText()).toEqual('Output long number: 234');                                       // 19161
       });                                                                                                             // 19162
                                                                                                                       // 19163
       // There is a bug in safari and protractor that doesn't like the minus key                                      // 19164
       // it('should update the output when -3 is entered', function() {                                               // 19165
       //   numLimitInput.clear();                                                                                     // 19166
       //   numLimitInput.sendKeys('-3');                                                                              // 19167
       //   letterLimitInput.clear();                                                                                  // 19168
       //   letterLimitInput.sendKeys('-3');                                                                           // 19169
       //   longNumberLimitInput.clear();                                                                              // 19170
       //   longNumberLimitInput.sendKeys('-3');                                                                       // 19171
       //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');                                       // 19172
       //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');                                           // 19173
       //   expect(limitedLongNumber.getText()).toEqual('Output long number: 342');                                    // 19174
       // });                                                                                                          // 19175
                                                                                                                       // 19176
       it('should not exceed the maximum size of input array', function() {                                            // 19177
         numLimitInput.clear();                                                                                        // 19178
         numLimitInput.sendKeys('100');                                                                                // 19179
         letterLimitInput.clear();                                                                                     // 19180
         letterLimitInput.sendKeys('100');                                                                             // 19181
         longNumberLimitInput.clear();                                                                                 // 19182
         longNumberLimitInput.sendKeys('100');                                                                         // 19183
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');                              // 19184
         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');                                        // 19185
         expect(limitedLongNumber.getText()).toEqual('Output long number: 2345432342');                                // 19186
       });                                                                                                             // 19187
     </file>                                                                                                           // 19188
   </example>                                                                                                          // 19189
*/                                                                                                                     // 19190
function limitToFilter() {                                                                                             // 19191
  return function(input, limit, begin) {                                                                               // 19192
    if (Math.abs(Number(limit)) === Infinity) {                                                                        // 19193
      limit = Number(limit);                                                                                           // 19194
    } else {                                                                                                           // 19195
      limit = toInt(limit);                                                                                            // 19196
    }                                                                                                                  // 19197
    if (isNaN(limit)) return input;                                                                                    // 19198
                                                                                                                       // 19199
    if (isNumber(input)) input = input.toString();                                                                     // 19200
    if (!isArray(input) && !isString(input)) return input;                                                             // 19201
                                                                                                                       // 19202
    begin = (!begin || isNaN(begin)) ? 0 : toInt(begin);                                                               // 19203
    begin = (begin < 0 && begin >= -input.length) ? input.length + begin : begin;                                      // 19204
                                                                                                                       // 19205
    if (limit >= 0) {                                                                                                  // 19206
      return input.slice(begin, begin + limit);                                                                        // 19207
    } else {                                                                                                           // 19208
      if (begin === 0) {                                                                                               // 19209
        return input.slice(limit, input.length);                                                                       // 19210
      } else {                                                                                                         // 19211
        return input.slice(Math.max(0, begin + limit), begin);                                                         // 19212
      }                                                                                                                // 19213
    }                                                                                                                  // 19214
  };                                                                                                                   // 19215
}                                                                                                                      // 19216
                                                                                                                       // 19217
/**                                                                                                                    // 19218
 * @ngdoc filter                                                                                                       // 19219
 * @name orderBy                                                                                                       // 19220
 * @kind function                                                                                                      // 19221
 *                                                                                                                     // 19222
 * @description                                                                                                        // 19223
 * Orders a specified `array` by the `expression` predicate. It is ordered alphabetically                              // 19224
 * for strings and numerically for numbers. Note: if you notice numbers are not being sorted                           // 19225
 * as expected, make sure they are actually being saved as numbers and not strings.                                    // 19226
 *                                                                                                                     // 19227
 * @param {Array} array The array to sort.                                                                             // 19228
 * @param {function(*)|string|Array.<(function(*)|string)>=} expression A predicate to be                              // 19229
 *    used by the comparator to determine the order of elements.                                                       // 19230
 *                                                                                                                     // 19231
 *    Can be one of:                                                                                                   // 19232
 *                                                                                                                     // 19233
 *    - `function`: Getter function. The result of this function will be sorted using the                              // 19234
 *      `<`, `===`, `>` operator.                                                                                      // 19235
 *    - `string`: An Angular expression. The result of this expression is used to compare elements                     // 19236
 *      (for example `name` to sort by a property called `name` or `name.substr(0, 3)` to sort by                      // 19237
 *      3 first characters of a property called `name`). The result of a constant expression                           // 19238
 *      is interpreted as a property name to be used in comparisons (for example `"special name"`                      // 19239
 *      to sort object by the value of their `special name` property). An expression can be                            // 19240
 *      optionally prefixed with `+` or `-` to control ascending or descending sort order                              // 19241
 *      (for example, `+name` or `-name`). If no property is provided, (e.g. `'+'`) then the array                     // 19242
 *      element itself is used to compare where sorting.                                                               // 19243
 *    - `Array`: An array of function or string predicates. The first predicate in the array                           // 19244
 *      is used for sorting, but when two items are equivalent, the next predicate is used.                            // 19245
 *                                                                                                                     // 19246
 *    If the predicate is missing or empty then it defaults to `'+'`.                                                  // 19247
 *                                                                                                                     // 19248
 * @param {boolean=} reverse Reverse the order of the array.                                                           // 19249
 * @returns {Array} Sorted copy of the source array.                                                                   // 19250
 *                                                                                                                     // 19251
 *                                                                                                                     // 19252
 * @example                                                                                                            // 19253
 * The example below demonstrates a simple ngRepeat, where the data is sorted                                          // 19254
 * by age in descending order (predicate is set to `'-age'`).                                                          // 19255
 * `reverse` is not set, which means it defaults to `false`.                                                           // 19256
   <example module="orderByExample">                                                                                   // 19257
     <file name="index.html">                                                                                          // 19258
       <script>                                                                                                        // 19259
         angular.module('orderByExample', [])                                                                          // 19260
           .controller('ExampleController', ['$scope', function($scope) {                                              // 19261
             $scope.friends =                                                                                          // 19262
                 [{name:'John', phone:'555-1212', age:10},                                                             // 19263
                  {name:'Mary', phone:'555-9876', age:19},                                                             // 19264
                  {name:'Mike', phone:'555-4321', age:21},                                                             // 19265
                  {name:'Adam', phone:'555-5678', age:35},                                                             // 19266
                  {name:'Julie', phone:'555-8765', age:29}];                                                           // 19267
           }]);                                                                                                        // 19268
       </script>                                                                                                       // 19269
       <div ng-controller="ExampleController">                                                                         // 19270
         <table class="friend">                                                                                        // 19271
           <tr>                                                                                                        // 19272
             <th>Name</th>                                                                                             // 19273
             <th>Phone Number</th>                                                                                     // 19274
             <th>Age</th>                                                                                              // 19275
           </tr>                                                                                                       // 19276
           <tr ng-repeat="friend in friends | orderBy:'-age'">                                                         // 19277
             <td>{{friend.name}}</td>                                                                                  // 19278
             <td>{{friend.phone}}</td>                                                                                 // 19279
             <td>{{friend.age}}</td>                                                                                   // 19280
           </tr>                                                                                                       // 19281
         </table>                                                                                                      // 19282
       </div>                                                                                                          // 19283
     </file>                                                                                                           // 19284
   </example>                                                                                                          // 19285
 *                                                                                                                     // 19286
 * The predicate and reverse parameters can be controlled dynamically through scope properties,                        // 19287
 * as shown in the next example.                                                                                       // 19288
 * @example                                                                                                            // 19289
   <example module="orderByExample">                                                                                   // 19290
     <file name="index.html">                                                                                          // 19291
       <script>                                                                                                        // 19292
         angular.module('orderByExample', [])                                                                          // 19293
           .controller('ExampleController', ['$scope', function($scope) {                                              // 19294
             $scope.friends =                                                                                          // 19295
                 [{name:'John', phone:'555-1212', age:10},                                                             // 19296
                  {name:'Mary', phone:'555-9876', age:19},                                                             // 19297
                  {name:'Mike', phone:'555-4321', age:21},                                                             // 19298
                  {name:'Adam', phone:'555-5678', age:35},                                                             // 19299
                  {name:'Julie', phone:'555-8765', age:29}];                                                           // 19300
             $scope.predicate = 'age';                                                                                 // 19301
             $scope.reverse = true;                                                                                    // 19302
             $scope.order = function(predicate) {                                                                      // 19303
               $scope.reverse = ($scope.predicate === predicate) ? !$scope.reverse : false;                            // 19304
               $scope.predicate = predicate;                                                                           // 19305
             };                                                                                                        // 19306
           }]);                                                                                                        // 19307
       </script>                                                                                                       // 19308
       <style type="text/css">                                                                                         // 19309
         .sortorder:after {                                                                                            // 19310
           content: '\25b2';                                                                                           // 19311
         }                                                                                                             // 19312
         .sortorder.reverse:after {                                                                                    // 19313
           content: '\25bc';                                                                                           // 19314
         }                                                                                                             // 19315
       </style>                                                                                                        // 19316
       <div ng-controller="ExampleController">                                                                         // 19317
         <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>                                           // 19318
         <hr/>                                                                                                         // 19319
         [ <a href="" ng-click="predicate=''">unsorted</a> ]                                                           // 19320
         <table class="friend">                                                                                        // 19321
           <tr>                                                                                                        // 19322
             <th>                                                                                                      // 19323
               <a href="" ng-click="order('name')">Name</a>                                                            // 19324
               <span class="sortorder" ng-show="predicate === 'name'" ng-class="{reverse:reverse}"></span>             // 19325
             </th>                                                                                                     // 19326
             <th>                                                                                                      // 19327
               <a href="" ng-click="order('phone')">Phone Number</a>                                                   // 19328
               <span class="sortorder" ng-show="predicate === 'phone'" ng-class="{reverse:reverse}"></span>            // 19329
             </th>                                                                                                     // 19330
             <th>                                                                                                      // 19331
               <a href="" ng-click="order('age')">Age</a>                                                              // 19332
               <span class="sortorder" ng-show="predicate === 'age'" ng-class="{reverse:reverse}"></span>              // 19333
             </th>                                                                                                     // 19334
           </tr>                                                                                                       // 19335
           <tr ng-repeat="friend in friends | orderBy:predicate:reverse">                                              // 19336
             <td>{{friend.name}}</td>                                                                                  // 19337
             <td>{{friend.phone}}</td>                                                                                 // 19338
             <td>{{friend.age}}</td>                                                                                   // 19339
           </tr>                                                                                                       // 19340
         </table>                                                                                                      // 19341
       </div>                                                                                                          // 19342
     </file>                                                                                                           // 19343
   </example>                                                                                                          // 19344
 *                                                                                                                     // 19345
 * It's also possible to call the orderBy filter manually, by injecting `$filter`, retrieving the                      // 19346
 * filter routine with `$filter('orderBy')`, and calling the returned filter routine with the                          // 19347
 * desired parameters.                                                                                                 // 19348
 *                                                                                                                     // 19349
 * Example:                                                                                                            // 19350
 *                                                                                                                     // 19351
 * @example                                                                                                            // 19352
  <example module="orderByExample">                                                                                    // 19353
    <file name="index.html">                                                                                           // 19354
      <div ng-controller="ExampleController">                                                                          // 19355
        <table class="friend">                                                                                         // 19356
          <tr>                                                                                                         // 19357
            <th><a href="" ng-click="reverse=false;order('name', false)">Name</a>                                      // 19358
              (<a href="" ng-click="order('-name',false)">^</a>)</th>                                                  // 19359
            <th><a href="" ng-click="reverse=!reverse;order('phone', reverse)">Phone Number</a></th>                   // 19360
            <th><a href="" ng-click="reverse=!reverse;order('age',reverse)">Age</a></th>                               // 19361
          </tr>                                                                                                        // 19362
          <tr ng-repeat="friend in friends">                                                                           // 19363
            <td>{{friend.name}}</td>                                                                                   // 19364
            <td>{{friend.phone}}</td>                                                                                  // 19365
            <td>{{friend.age}}</td>                                                                                    // 19366
          </tr>                                                                                                        // 19367
        </table>                                                                                                       // 19368
      </div>                                                                                                           // 19369
    </file>                                                                                                            // 19370
                                                                                                                       // 19371
    <file name="script.js">                                                                                            // 19372
      angular.module('orderByExample', [])                                                                             // 19373
        .controller('ExampleController', ['$scope', '$filter', function($scope, $filter) {                             // 19374
          var orderBy = $filter('orderBy');                                                                            // 19375
          $scope.friends = [                                                                                           // 19376
            { name: 'John',    phone: '555-1212',    age: 10 },                                                        // 19377
            { name: 'Mary',    phone: '555-9876',    age: 19 },                                                        // 19378
            { name: 'Mike',    phone: '555-4321',    age: 21 },                                                        // 19379
            { name: 'Adam',    phone: '555-5678',    age: 35 },                                                        // 19380
            { name: 'Julie',   phone: '555-8765',    age: 29 }                                                         // 19381
          ];                                                                                                           // 19382
          $scope.order = function(predicate, reverse) {                                                                // 19383
            $scope.friends = orderBy($scope.friends, predicate, reverse);                                              // 19384
          };                                                                                                           // 19385
          $scope.order('-age',false);                                                                                  // 19386
        }]);                                                                                                           // 19387
    </file>                                                                                                            // 19388
</example>                                                                                                             // 19389
 */                                                                                                                    // 19390
orderByFilter.$inject = ['$parse'];                                                                                    // 19391
function orderByFilter($parse) {                                                                                       // 19392
  return function(array, sortPredicate, reverseOrder) {                                                                // 19393
                                                                                                                       // 19394
    if (!(isArrayLike(array))) return array;                                                                           // 19395
                                                                                                                       // 19396
    if (!isArray(sortPredicate)) { sortPredicate = [sortPredicate]; }                                                  // 19397
    if (sortPredicate.length === 0) { sortPredicate = ['+']; }                                                         // 19398
                                                                                                                       // 19399
    var predicates = processPredicates(sortPredicate, reverseOrder);                                                   // 19400
    // Add a predicate at the end that evaluates to the element index. This makes the                                  // 19401
    // sort stable as it works as a tie-breaker when all the input predicates cannot                                   // 19402
    // distinguish between two elements.                                                                               // 19403
    predicates.push({ get: function() { return {}; }, descending: reverseOrder ? -1 : 1});                             // 19404
                                                                                                                       // 19405
    // The next three lines are a version of a Swartzian Transform idiom from Perl                                     // 19406
    // (sometimes called the Decorate-Sort-Undecorate idiom)                                                           // 19407
    // See https://en.wikipedia.org/wiki/Schwartzian_transform                                                         // 19408
    var compareValues = Array.prototype.map.call(array, getComparisonObject);                                          // 19409
    compareValues.sort(doComparison);                                                                                  // 19410
    array = compareValues.map(function(item) { return item.value; });                                                  // 19411
                                                                                                                       // 19412
    return array;                                                                                                      // 19413
                                                                                                                       // 19414
    function getComparisonObject(value, index) {                                                                       // 19415
      return {                                                                                                         // 19416
        value: value,                                                                                                  // 19417
        predicateValues: predicates.map(function(predicate) {                                                          // 19418
          return getPredicateValue(predicate.get(value), index);                                                       // 19419
        })                                                                                                             // 19420
      };                                                                                                               // 19421
    }                                                                                                                  // 19422
                                                                                                                       // 19423
    function doComparison(v1, v2) {                                                                                    // 19424
      var result = 0;                                                                                                  // 19425
      for (var index=0, length = predicates.length; index < length; ++index) {                                         // 19426
        result = compare(v1.predicateValues[index], v2.predicateValues[index]) * predicates[index].descending;         // 19427
        if (result) break;                                                                                             // 19428
      }                                                                                                                // 19429
      return result;                                                                                                   // 19430
    }                                                                                                                  // 19431
  };                                                                                                                   // 19432
                                                                                                                       // 19433
  function processPredicates(sortPredicate, reverseOrder) {                                                            // 19434
    reverseOrder = reverseOrder ? -1 : 1;                                                                              // 19435
    return sortPredicate.map(function(predicate) {                                                                     // 19436
      var descending = 1, get = identity;                                                                              // 19437
                                                                                                                       // 19438
      if (isFunction(predicate)) {                                                                                     // 19439
        get = predicate;                                                                                               // 19440
      } else if (isString(predicate)) {                                                                                // 19441
        if ((predicate.charAt(0) == '+' || predicate.charAt(0) == '-')) {                                              // 19442
          descending = predicate.charAt(0) == '-' ? -1 : 1;                                                            // 19443
          predicate = predicate.substring(1);                                                                          // 19444
        }                                                                                                              // 19445
        if (predicate !== '') {                                                                                        // 19446
          get = $parse(predicate);                                                                                     // 19447
          if (get.constant) {                                                                                          // 19448
            var key = get();                                                                                           // 19449
            get = function(value) { return value[key]; };                                                              // 19450
          }                                                                                                            // 19451
        }                                                                                                              // 19452
      }                                                                                                                // 19453
      return { get: get, descending: descending * reverseOrder };                                                      // 19454
    });                                                                                                                // 19455
  }                                                                                                                    // 19456
                                                                                                                       // 19457
  function isPrimitive(value) {                                                                                        // 19458
    switch (typeof value) {                                                                                            // 19459
      case 'number': /* falls through */                                                                               // 19460
      case 'boolean': /* falls through */                                                                              // 19461
      case 'string':                                                                                                   // 19462
        return true;                                                                                                   // 19463
      default:                                                                                                         // 19464
        return false;                                                                                                  // 19465
    }                                                                                                                  // 19466
  }                                                                                                                    // 19467
                                                                                                                       // 19468
  function objectValue(value, index) {                                                                                 // 19469
    // If `valueOf` is a valid function use that                                                                       // 19470
    if (typeof value.valueOf === 'function') {                                                                         // 19471
      value = value.valueOf();                                                                                         // 19472
      if (isPrimitive(value)) return value;                                                                            // 19473
    }                                                                                                                  // 19474
    // If `toString` is a valid function and not the one from `Object.prototype` use that                              // 19475
    if (hasCustomToString(value)) {                                                                                    // 19476
      value = value.toString();                                                                                        // 19477
      if (isPrimitive(value)) return value;                                                                            // 19478
    }                                                                                                                  // 19479
    // We have a basic object so we use the position of the object in the collection                                   // 19480
    return index;                                                                                                      // 19481
  }                                                                                                                    // 19482
                                                                                                                       // 19483
  function getPredicateValue(value, index) {                                                                           // 19484
    var type = typeof value;                                                                                           // 19485
    if (value === null) {                                                                                              // 19486
      type = 'string';                                                                                                 // 19487
      value = 'null';                                                                                                  // 19488
    } else if (type === 'string') {                                                                                    // 19489
      value = value.toLowerCase();                                                                                     // 19490
    } else if (type === 'object') {                                                                                    // 19491
      value = objectValue(value, index);                                                                               // 19492
    }                                                                                                                  // 19493
    return { value: value, type: type };                                                                               // 19494
  }                                                                                                                    // 19495
                                                                                                                       // 19496
  function compare(v1, v2) {                                                                                           // 19497
    var result = 0;                                                                                                    // 19498
    if (v1.type === v2.type) {                                                                                         // 19499
      if (v1.value !== v2.value) {                                                                                     // 19500
        result = v1.value < v2.value ? -1 : 1;                                                                         // 19501
      }                                                                                                                // 19502
    } else {                                                                                                           // 19503
      result = v1.type < v2.type ? -1 : 1;                                                                             // 19504
    }                                                                                                                  // 19505
    return result;                                                                                                     // 19506
  }                                                                                                                    // 19507
}                                                                                                                      // 19508
                                                                                                                       // 19509
function ngDirective(directive) {                                                                                      // 19510
  if (isFunction(directive)) {                                                                                         // 19511
    directive = {                                                                                                      // 19512
      link: directive                                                                                                  // 19513
    };                                                                                                                 // 19514
  }                                                                                                                    // 19515
  directive.restrict = directive.restrict || 'AC';                                                                     // 19516
  return valueFn(directive);                                                                                           // 19517
}                                                                                                                      // 19518
                                                                                                                       // 19519
/**                                                                                                                    // 19520
 * @ngdoc directive                                                                                                    // 19521
 * @name a                                                                                                             // 19522
 * @restrict E                                                                                                         // 19523
 *                                                                                                                     // 19524
 * @description                                                                                                        // 19525
 * Modifies the default behavior of the html A tag so that the default action is prevented when                        // 19526
 * the href attribute is empty.                                                                                        // 19527
 *                                                                                                                     // 19528
 * This change permits the easy creation of action links with the `ngClick` directive                                  // 19529
 * without changing the location or causing page reloads, e.g.:                                                        // 19530
 * `<a href="" ng-click="list.addItem()">Add Item</a>`                                                                 // 19531
 */                                                                                                                    // 19532
var htmlAnchorDirective = valueFn({                                                                                    // 19533
  restrict: 'E',                                                                                                       // 19534
  compile: function(element, attr) {                                                                                   // 19535
    if (!attr.href && !attr.xlinkHref) {                                                                               // 19536
      return function(scope, element) {                                                                                // 19537
        // If the linked element is not an anchor tag anymore, do nothing                                              // 19538
        if (element[0].nodeName.toLowerCase() !== 'a') return;                                                         // 19539
                                                                                                                       // 19540
        // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.                          // 19541
        var href = toString.call(element.prop('href')) === '[object SVGAnimatedString]' ?                              // 19542
                   'xlink:href' : 'href';                                                                              // 19543
        element.on('click', function(event) {                                                                          // 19544
          // if we have no href url, then don't navigate anywhere.                                                     // 19545
          if (!element.attr(href)) {                                                                                   // 19546
            event.preventDefault();                                                                                    // 19547
          }                                                                                                            // 19548
        });                                                                                                            // 19549
      };                                                                                                               // 19550
    }                                                                                                                  // 19551
  }                                                                                                                    // 19552
});                                                                                                                    // 19553
                                                                                                                       // 19554
/**                                                                                                                    // 19555
 * @ngdoc directive                                                                                                    // 19556
 * @name ngHref                                                                                                        // 19557
 * @restrict A                                                                                                         // 19558
 * @priority 99                                                                                                        // 19559
 *                                                                                                                     // 19560
 * @description                                                                                                        // 19561
 * Using Angular markup like `{{hash}}` in an href attribute will                                                      // 19562
 * make the link go to the wrong URL if the user clicks it before                                                      // 19563
 * Angular has a chance to replace the `{{hash}}` markup with its                                                      // 19564
 * value. Until Angular replaces the markup the link will be broken                                                    // 19565
 * and will most likely return a 404 error. The `ngHref` directive                                                     // 19566
 * solves this problem.                                                                                                // 19567
 *                                                                                                                     // 19568
 * The wrong way to write it:                                                                                          // 19569
 * ```html                                                                                                             // 19570
 * <a href="http://www.gravatar.com/avatar/{{hash}}">link1</a>                                                         // 19571
 * ```                                                                                                                 // 19572
 *                                                                                                                     // 19573
 * The correct way to write it:                                                                                        // 19574
 * ```html                                                                                                             // 19575
 * <a ng-href="http://www.gravatar.com/avatar/{{hash}}">link1</a>                                                      // 19576
 * ```                                                                                                                 // 19577
 *                                                                                                                     // 19578
 * @element A                                                                                                          // 19579
 * @param {template} ngHref any string which can contain `{{}}` markup.                                                // 19580
 *                                                                                                                     // 19581
 * @example                                                                                                            // 19582
 * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes                              // 19583
 * in links and their different behaviors:                                                                             // 19584
    <example>                                                                                                          // 19585
      <file name="index.html">                                                                                         // 19586
        <input ng-model="value" /><br />                                                                               // 19587
        <a id="link-1" href ng-click="value = 1">link 1</a> (link, don't reload)<br />                                 // 19588
        <a id="link-2" href="" ng-click="value = 2">link 2</a> (link, don't reload)<br />                              // 19589
        <a id="link-3" ng-href="/{{'123'}}">link 3</a> (link, reload!)<br />                                           // 19590
        <a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don't reload)<br />                    // 19591
        <a id="link-5" name="xxx" ng-click="value = 5">anchor</a> (no link)<br />                                      // 19592
        <a id="link-6" ng-href="{{value}}">link</a> (link, change location)                                            // 19593
      </file>                                                                                                          // 19594
      <file name="protractor.js" type="protractor">                                                                    // 19595
        it('should execute ng-click but not reload when href without value', function() {                              // 19596
          element(by.id('link-1')).click();                                                                            // 19597
          expect(element(by.model('value')).getAttribute('value')).toEqual('1');                                       // 19598
          expect(element(by.id('link-1')).getAttribute('href')).toBe('');                                              // 19599
        });                                                                                                            // 19600
                                                                                                                       // 19601
        it('should execute ng-click but not reload when href empty string', function() {                               // 19602
          element(by.id('link-2')).click();                                                                            // 19603
          expect(element(by.model('value')).getAttribute('value')).toEqual('2');                                       // 19604
          expect(element(by.id('link-2')).getAttribute('href')).toBe('');                                              // 19605
        });                                                                                                            // 19606
                                                                                                                       // 19607
        it('should execute ng-click and change url when ng-href specified', function() {                               // 19608
          expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\/123$/);                                     // 19609
                                                                                                                       // 19610
          element(by.id('link-3')).click();                                                                            // 19611
                                                                                                                       // 19612
          // At this point, we navigate away from an Angular page, so we need                                          // 19613
          // to use browser.driver to get the base webdriver.                                                          // 19614
                                                                                                                       // 19615
          browser.wait(function() {                                                                                    // 19616
            return browser.driver.getCurrentUrl().then(function(url) {                                                 // 19617
              return url.match(/\/123$/);                                                                              // 19618
            });                                                                                                        // 19619
          }, 5000, 'page should navigate to /123');                                                                    // 19620
        });                                                                                                            // 19621
                                                                                                                       // 19622
        it('should execute ng-click but not reload when href empty string and name specified', function() {            // 19623
          element(by.id('link-4')).click();                                                                            // 19624
          expect(element(by.model('value')).getAttribute('value')).toEqual('4');                                       // 19625
          expect(element(by.id('link-4')).getAttribute('href')).toBe('');                                              // 19626
        });                                                                                                            // 19627
                                                                                                                       // 19628
        it('should execute ng-click but not reload when no href but name specified', function() {                      // 19629
          element(by.id('link-5')).click();                                                                            // 19630
          expect(element(by.model('value')).getAttribute('value')).toEqual('5');                                       // 19631
          expect(element(by.id('link-5')).getAttribute('href')).toBe(null);                                            // 19632
        });                                                                                                            // 19633
                                                                                                                       // 19634
        it('should only change url when only ng-href', function() {                                                    // 19635
          element(by.model('value')).clear();                                                                          // 19636
          element(by.model('value')).sendKeys('6');                                                                    // 19637
          expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\/6$/);                                       // 19638
                                                                                                                       // 19639
          element(by.id('link-6')).click();                                                                            // 19640
                                                                                                                       // 19641
          // At this point, we navigate away from an Angular page, so we need                                          // 19642
          // to use browser.driver to get the base webdriver.                                                          // 19643
          browser.wait(function() {                                                                                    // 19644
            return browser.driver.getCurrentUrl().then(function(url) {                                                 // 19645
              return url.match(/\/6$/);                                                                                // 19646
            });                                                                                                        // 19647
          }, 5000, 'page should navigate to /6');                                                                      // 19648
        });                                                                                                            // 19649
      </file>                                                                                                          // 19650
    </example>                                                                                                         // 19651
 */                                                                                                                    // 19652
                                                                                                                       // 19653
/**                                                                                                                    // 19654
 * @ngdoc directive                                                                                                    // 19655
 * @name ngSrc                                                                                                         // 19656
 * @restrict A                                                                                                         // 19657
 * @priority 99                                                                                                        // 19658
 *                                                                                                                     // 19659
 * @description                                                                                                        // 19660
 * Using Angular markup like `{{hash}}` in a `src` attribute doesn't                                                   // 19661
 * work right: The browser will fetch from the URL with the literal                                                    // 19662
 * text `{{hash}}` until Angular replaces the expression inside                                                        // 19663
 * `{{hash}}`. The `ngSrc` directive solves this problem.                                                              // 19664
 *                                                                                                                     // 19665
 * The buggy way to write it:                                                                                          // 19666
 * ```html                                                                                                             // 19667
 * <img src="http://www.gravatar.com/avatar/{{hash}}" alt="Description"/>                                              // 19668
 * ```                                                                                                                 // 19669
 *                                                                                                                     // 19670
 * The correct way to write it:                                                                                        // 19671
 * ```html                                                                                                             // 19672
 * <img ng-src="http://www.gravatar.com/avatar/{{hash}}" alt="Description" />                                          // 19673
 * ```                                                                                                                 // 19674
 *                                                                                                                     // 19675
 * @element IMG                                                                                                        // 19676
 * @param {template} ngSrc any string which can contain `{{}}` markup.                                                 // 19677
 */                                                                                                                    // 19678
                                                                                                                       // 19679
/**                                                                                                                    // 19680
 * @ngdoc directive                                                                                                    // 19681
 * @name ngSrcset                                                                                                      // 19682
 * @restrict A                                                                                                         // 19683
 * @priority 99                                                                                                        // 19684
 *                                                                                                                     // 19685
 * @description                                                                                                        // 19686
 * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't                                                // 19687
 * work right: The browser will fetch from the URL with the literal                                                    // 19688
 * text `{{hash}}` until Angular replaces the expression inside                                                        // 19689
 * `{{hash}}`. The `ngSrcset` directive solves this problem.                                                           // 19690
 *                                                                                                                     // 19691
 * The buggy way to write it:                                                                                          // 19692
 * ```html                                                                                                             // 19693
 * <img srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description"/>                                        // 19694
 * ```                                                                                                                 // 19695
 *                                                                                                                     // 19696
 * The correct way to write it:                                                                                        // 19697
 * ```html                                                                                                             // 19698
 * <img ng-srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description" />                                    // 19699
 * ```                                                                                                                 // 19700
 *                                                                                                                     // 19701
 * @element IMG                                                                                                        // 19702
 * @param {template} ngSrcset any string which can contain `{{}}` markup.                                              // 19703
 */                                                                                                                    // 19704
                                                                                                                       // 19705
/**                                                                                                                    // 19706
 * @ngdoc directive                                                                                                    // 19707
 * @name ngDisabled                                                                                                    // 19708
 * @restrict A                                                                                                         // 19709
 * @priority 100                                                                                                       // 19710
 *                                                                                                                     // 19711
 * @description                                                                                                        // 19712
 *                                                                                                                     // 19713
 * This directive sets the `disabled` attribute on the element if the                                                  // 19714
 * {@link guide/expression expression} inside `ngDisabled` evaluates to truthy.                                        // 19715
 *                                                                                                                     // 19716
 * A special directive is necessary because we cannot use interpolation inside the `disabled`                          // 19717
 * attribute.  The following example would make the button enabled on Chrome/Firefox                                   // 19718
 * but not on older IEs:                                                                                               // 19719
 *                                                                                                                     // 19720
 * ```html                                                                                                             // 19721
 * <!-- See below for an example of ng-disabled being used correctly -->                                               // 19722
 * <div ng-init="isDisabled = false">                                                                                  // 19723
 *  <button disabled="{{isDisabled}}">Disabled</button>                                                                // 19724
 * </div>                                                                                                              // 19725
 * ```                                                                                                                 // 19726
 *                                                                                                                     // 19727
 * This is because the HTML specification does not require browsers to preserve the values of                          // 19728
 * boolean attributes such as `disabled` (Their presence means true and their absence means false.)                    // 19729
 * If we put an Angular interpolation expression into such an attribute then the                                       // 19730
 * binding information would be lost when the browser removes the attribute.                                           // 19731
 *                                                                                                                     // 19732
 * @example                                                                                                            // 19733
    <example>                                                                                                          // 19734
      <file name="index.html">                                                                                         // 19735
        <label>Click me to toggle: <input type="checkbox" ng-model="checked"></label><br/>                             // 19736
        <button ng-model="button" ng-disabled="checked">Button</button>                                                // 19737
      </file>                                                                                                          // 19738
      <file name="protractor.js" type="protractor">                                                                    // 19739
        it('should toggle button', function() {                                                                        // 19740
          expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();                                      // 19741
          element(by.model('checked')).click();                                                                        // 19742
          expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();                                     // 19743
        });                                                                                                            // 19744
      </file>                                                                                                          // 19745
    </example>                                                                                                         // 19746
 *                                                                                                                     // 19747
 * @element INPUT                                                                                                      // 19748
 * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,                                // 19749
 *     then the `disabled` attribute will be set on the element                                                        // 19750
 */                                                                                                                    // 19751
                                                                                                                       // 19752
                                                                                                                       // 19753
/**                                                                                                                    // 19754
 * @ngdoc directive                                                                                                    // 19755
 * @name ngChecked                                                                                                     // 19756
 * @restrict A                                                                                                         // 19757
 * @priority 100                                                                                                       // 19758
 *                                                                                                                     // 19759
 * @description                                                                                                        // 19760
 * Sets the `checked` attribute on the element, if the expression inside `ngChecked` is truthy.                        // 19761
 *                                                                                                                     // 19762
 * Note that this directive should not be used together with {@link ngModel `ngModel`},                                // 19763
 * as this can lead to unexpected behavior.                                                                            // 19764
 *                                                                                                                     // 19765
 * ### Why do we need `ngChecked`?                                                                                     // 19766
 *                                                                                                                     // 19767
 * The HTML specification does not require browsers to preserve the values of boolean attributes                       // 19768
 * such as checked. (Their presence means true and their absence means false.)                                         // 19769
 * If we put an Angular interpolation expression into such an attribute then the                                       // 19770
 * binding information would be lost when the browser removes the attribute.                                           // 19771
 * The `ngChecked` directive solves this problem for the `checked` attribute.                                          // 19772
 * This complementary directive is not removed by the browser and so provides                                          // 19773
 * a permanent reliable place to store the binding information.                                                        // 19774
 * @example                                                                                                            // 19775
    <example>                                                                                                          // 19776
      <file name="index.html">                                                                                         // 19777
        <label>Check me to check both: <input type="checkbox" ng-model="master"></label><br/>                          // 19778
        <input id="checkSlave" type="checkbox" ng-checked="master" aria-label="Slave input">                           // 19779
      </file>                                                                                                          // 19780
      <file name="protractor.js" type="protractor">                                                                    // 19781
        it('should check both checkBoxes', function() {                                                                // 19782
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();                                    // 19783
          element(by.model('master')).click();                                                                         // 19784
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();                                   // 19785
        });                                                                                                            // 19786
      </file>                                                                                                          // 19787
    </example>                                                                                                         // 19788
 *                                                                                                                     // 19789
 * @element INPUT                                                                                                      // 19790
 * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,                                 // 19791
 *     then the `checked` attribute will be set on the element                                                         // 19792
 */                                                                                                                    // 19793
                                                                                                                       // 19794
                                                                                                                       // 19795
/**                                                                                                                    // 19796
 * @ngdoc directive                                                                                                    // 19797
 * @name ngReadonly                                                                                                    // 19798
 * @restrict A                                                                                                         // 19799
 * @priority 100                                                                                                       // 19800
 *                                                                                                                     // 19801
 * @description                                                                                                        // 19802
 * The HTML specification does not require browsers to preserve the values of boolean attributes                       // 19803
 * such as readonly. (Their presence means true and their absence means false.)                                        // 19804
 * If we put an Angular interpolation expression into such an attribute then the                                       // 19805
 * binding information would be lost when the browser removes the attribute.                                           // 19806
 * The `ngReadonly` directive solves this problem for the `readonly` attribute.                                        // 19807
 * This complementary directive is not removed by the browser and so provides                                          // 19808
 * a permanent reliable place to store the binding information.                                                        // 19809
 * @example                                                                                                            // 19810
    <example>                                                                                                          // 19811
      <file name="index.html">                                                                                         // 19812
        <label>Check me to make text readonly: <input type="checkbox" ng-model="checked"></label><br/>                 // 19813
        <input type="text" ng-readonly="checked" value="I'm Angular" aria-label="Readonly field" />                    // 19814
      </file>                                                                                                          // 19815
      <file name="protractor.js" type="protractor">                                                                    // 19816
        it('should toggle readonly attr', function() {                                                                 // 19817
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeFalsy();                               // 19818
          element(by.model('checked')).click();                                                                        // 19819
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeTruthy();                              // 19820
        });                                                                                                            // 19821
      </file>                                                                                                          // 19822
    </example>                                                                                                         // 19823
 *                                                                                                                     // 19824
 * @element INPUT                                                                                                      // 19825
 * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,                                // 19826
 *     then special attribute "readonly" will be set on the element                                                    // 19827
 */                                                                                                                    // 19828
                                                                                                                       // 19829
                                                                                                                       // 19830
/**                                                                                                                    // 19831
 * @ngdoc directive                                                                                                    // 19832
 * @name ngSelected                                                                                                    // 19833
 * @restrict A                                                                                                         // 19834
 * @priority 100                                                                                                       // 19835
 *                                                                                                                     // 19836
 * @description                                                                                                        // 19837
 * The HTML specification does not require browsers to preserve the values of boolean attributes                       // 19838
 * such as selected. (Their presence means true and their absence means false.)                                        // 19839
 * If we put an Angular interpolation expression into such an attribute then the                                       // 19840
 * binding information would be lost when the browser removes the attribute.                                           // 19841
 * The `ngSelected` directive solves this problem for the `selected` attribute.                                        // 19842
 * This complementary directive is not removed by the browser and so provides                                          // 19843
 * a permanent reliable place to store the binding information.                                                        // 19844
 *                                                                                                                     // 19845
 * @example                                                                                                            // 19846
    <example>                                                                                                          // 19847
      <file name="index.html">                                                                                         // 19848
        <label>Check me to select: <input type="checkbox" ng-model="selected"></label><br/>                            // 19849
        <select aria-label="ngSelected demo">                                                                          // 19850
          <option>Hello!</option>                                                                                      // 19851
          <option id="greet" ng-selected="selected">Greetings!</option>                                                // 19852
        </select>                                                                                                      // 19853
      </file>                                                                                                          // 19854
      <file name="protractor.js" type="protractor">                                                                    // 19855
        it('should select Greetings!', function() {                                                                    // 19856
          expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();                                        // 19857
          element(by.model('selected')).click();                                                                       // 19858
          expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();                                       // 19859
        });                                                                                                            // 19860
      </file>                                                                                                          // 19861
    </example>                                                                                                         // 19862
 *                                                                                                                     // 19863
 * @element OPTION                                                                                                     // 19864
 * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,                                // 19865
 *     then special attribute "selected" will be set on the element                                                    // 19866
 */                                                                                                                    // 19867
                                                                                                                       // 19868
/**                                                                                                                    // 19869
 * @ngdoc directive                                                                                                    // 19870
 * @name ngOpen                                                                                                        // 19871
 * @restrict A                                                                                                         // 19872
 * @priority 100                                                                                                       // 19873
 *                                                                                                                     // 19874
 * @description                                                                                                        // 19875
 * The HTML specification does not require browsers to preserve the values of boolean attributes                       // 19876
 * such as open. (Their presence means true and their absence means false.)                                            // 19877
 * If we put an Angular interpolation expression into such an attribute then the                                       // 19878
 * binding information would be lost when the browser removes the attribute.                                           // 19879
 * The `ngOpen` directive solves this problem for the `open` attribute.                                                // 19880
 * This complementary directive is not removed by the browser and so provides                                          // 19881
 * a permanent reliable place to store the binding information.                                                        // 19882
 * @example                                                                                                            // 19883
     <example>                                                                                                         // 19884
       <file name="index.html">                                                                                        // 19885
         <label>Check me check multiple: <input type="checkbox" ng-model="open"></label><br/>                          // 19886
         <details id="details" ng-open="open">                                                                         // 19887
            <summary>Show/Hide me</summary>                                                                            // 19888
         </details>                                                                                                    // 19889
       </file>                                                                                                         // 19890
       <file name="protractor.js" type="protractor">                                                                   // 19891
         it('should toggle open', function() {                                                                         // 19892
           expect(element(by.id('details')).getAttribute('open')).toBeFalsy();                                         // 19893
           element(by.model('open')).click();                                                                          // 19894
           expect(element(by.id('details')).getAttribute('open')).toBeTruthy();                                        // 19895
         });                                                                                                           // 19896
       </file>                                                                                                         // 19897
     </example>                                                                                                        // 19898
 *                                                                                                                     // 19899
 * @element DETAILS                                                                                                    // 19900
 * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,                                    // 19901
 *     then special attribute "open" will be set on the element                                                        // 19902
 */                                                                                                                    // 19903
                                                                                                                       // 19904
var ngAttributeAliasDirectives = {};                                                                                   // 19905
                                                                                                                       // 19906
// boolean attrs are evaluated                                                                                         // 19907
forEach(BOOLEAN_ATTR, function(propName, attrName) {                                                                   // 19908
  // binding to multiple is not supported                                                                              // 19909
  if (propName == "multiple") return;                                                                                  // 19910
                                                                                                                       // 19911
  function defaultLinkFn(scope, element, attr) {                                                                       // 19912
    scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {                                          // 19913
      attr.$set(attrName, !!value);                                                                                    // 19914
    });                                                                                                                // 19915
  }                                                                                                                    // 19916
                                                                                                                       // 19917
  var normalized = directiveNormalize('ng-' + attrName);                                                               // 19918
  var linkFn = defaultLinkFn;                                                                                          // 19919
                                                                                                                       // 19920
  if (propName === 'checked') {                                                                                        // 19921
    linkFn = function(scope, element, attr) {                                                                          // 19922
      // ensuring ngChecked doesn't interfere with ngModel when both are set on the same input                         // 19923
      if (attr.ngModel !== attr[normalized]) {                                                                         // 19924
        defaultLinkFn(scope, element, attr);                                                                           // 19925
      }                                                                                                                // 19926
    };                                                                                                                 // 19927
  }                                                                                                                    // 19928
                                                                                                                       // 19929
  ngAttributeAliasDirectives[normalized] = function() {                                                                // 19930
    return {                                                                                                           // 19931
      restrict: 'A',                                                                                                   // 19932
      priority: 100,                                                                                                   // 19933
      link: linkFn                                                                                                     // 19934
    };                                                                                                                 // 19935
  };                                                                                                                   // 19936
});                                                                                                                    // 19937
                                                                                                                       // 19938
// aliased input attrs are evaluated                                                                                   // 19939
forEach(ALIASED_ATTR, function(htmlAttr, ngAttr) {                                                                     // 19940
  ngAttributeAliasDirectives[ngAttr] = function() {                                                                    // 19941
    return {                                                                                                           // 19942
      priority: 100,                                                                                                   // 19943
      link: function(scope, element, attr) {                                                                           // 19944
        //special case ngPattern when a literal regular expression value                                               // 19945
        //is used as the expression (this way we don't have to watch anything).                                        // 19946
        if (ngAttr === "ngPattern" && attr.ngPattern.charAt(0) == "/") {                                               // 19947
          var match = attr.ngPattern.match(REGEX_STRING_REGEXP);                                                       // 19948
          if (match) {                                                                                                 // 19949
            attr.$set("ngPattern", new RegExp(match[1], match[2]));                                                    // 19950
            return;                                                                                                    // 19951
          }                                                                                                            // 19952
        }                                                                                                              // 19953
                                                                                                                       // 19954
        scope.$watch(attr[ngAttr], function ngAttrAliasWatchAction(value) {                                            // 19955
          attr.$set(ngAttr, value);                                                                                    // 19956
        });                                                                                                            // 19957
      }                                                                                                                // 19958
    };                                                                                                                 // 19959
  };                                                                                                                   // 19960
});                                                                                                                    // 19961
                                                                                                                       // 19962
// ng-src, ng-srcset, ng-href are interpolated                                                                         // 19963
forEach(['src', 'srcset', 'href'], function(attrName) {                                                                // 19964
  var normalized = directiveNormalize('ng-' + attrName);                                                               // 19965
  ngAttributeAliasDirectives[normalized] = function() {                                                                // 19966
    return {                                                                                                           // 19967
      priority: 99, // it needs to run after the attributes are interpolated                                           // 19968
      link: function(scope, element, attr) {                                                                           // 19969
        var propName = attrName,                                                                                       // 19970
            name = attrName;                                                                                           // 19971
                                                                                                                       // 19972
        if (attrName === 'href' &&                                                                                     // 19973
            toString.call(element.prop('href')) === '[object SVGAnimatedString]') {                                    // 19974
          name = 'xlinkHref';                                                                                          // 19975
          attr.$attr[name] = 'xlink:href';                                                                             // 19976
          propName = null;                                                                                             // 19977
        }                                                                                                              // 19978
                                                                                                                       // 19979
        attr.$observe(normalized, function(value) {                                                                    // 19980
          if (!value) {                                                                                                // 19981
            if (attrName === 'href') {                                                                                 // 19982
              attr.$set(name, null);                                                                                   // 19983
            }                                                                                                          // 19984
            return;                                                                                                    // 19985
          }                                                                                                            // 19986
                                                                                                                       // 19987
          attr.$set(name, value);                                                                                      // 19988
                                                                                                                       // 19989
          // on IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist                        // 19990
          // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need                           // 19991
          // to set the property as well to achieve the desired effect.                                                // 19992
          // we use attr[attrName] value since $set can sanitize the url.                                              // 19993
          if (msie && propName) element.prop(propName, attr[name]);                                                    // 19994
        });                                                                                                            // 19995
      }                                                                                                                // 19996
    };                                                                                                                 // 19997
  };                                                                                                                   // 19998
});                                                                                                                    // 19999
                                                                                                                       // 20000
/* global -nullFormCtrl, -SUBMITTED_CLASS, addSetValidityMethod: true                                                  // 20001
 */                                                                                                                    // 20002
var nullFormCtrl = {                                                                                                   // 20003
  $addControl: noop,                                                                                                   // 20004
  $$renameControl: nullFormRenameControl,                                                                              // 20005
  $removeControl: noop,                                                                                                // 20006
  $setValidity: noop,                                                                                                  // 20007
  $setDirty: noop,                                                                                                     // 20008
  $setPristine: noop,                                                                                                  // 20009
  $setSubmitted: noop                                                                                                  // 20010
},                                                                                                                     // 20011
SUBMITTED_CLASS = 'ng-submitted';                                                                                      // 20012
                                                                                                                       // 20013
function nullFormRenameControl(control, name) {                                                                        // 20014
  control.$name = name;                                                                                                // 20015
}                                                                                                                      // 20016
                                                                                                                       // 20017
/**                                                                                                                    // 20018
 * @ngdoc type                                                                                                         // 20019
 * @name form.FormController                                                                                           // 20020
 *                                                                                                                     // 20021
 * @property {boolean} $pristine True if user has not interacted with the form yet.                                    // 20022
 * @property {boolean} $dirty True if user has already interacted with the form.                                       // 20023
 * @property {boolean} $valid True if all of the containing forms and controls are valid.                              // 20024
 * @property {boolean} $invalid True if at least one containing control or form is invalid.                            // 20025
 * @property {boolean} $pending True if at least one containing control or form is pending.                            // 20026
 * @property {boolean} $submitted True if user has submitted the form even if its invalid.                             // 20027
 *                                                                                                                     // 20028
 * @property {Object} $error Is an object hash, containing references to controls or                                   // 20029
 *  forms with failing validators, where:                                                                              // 20030
 *                                                                                                                     // 20031
 *  - keys are validation tokens (error names),                                                                        // 20032
 *  - values are arrays of controls or forms that have a failing validator for given error name.                       // 20033
 *                                                                                                                     // 20034
 *  Built-in validation tokens:                                                                                        // 20035
 *                                                                                                                     // 20036
 *  - `email`                                                                                                          // 20037
 *  - `max`                                                                                                            // 20038
 *  - `maxlength`                                                                                                      // 20039
 *  - `min`                                                                                                            // 20040
 *  - `minlength`                                                                                                      // 20041
 *  - `number`                                                                                                         // 20042
 *  - `pattern`                                                                                                        // 20043
 *  - `required`                                                                                                       // 20044
 *  - `url`                                                                                                            // 20045
 *  - `date`                                                                                                           // 20046
 *  - `datetimelocal`                                                                                                  // 20047
 *  - `time`                                                                                                           // 20048
 *  - `week`                                                                                                           // 20049
 *  - `month`                                                                                                          // 20050
 *                                                                                                                     // 20051
 * @description                                                                                                        // 20052
 * `FormController` keeps track of all its controls and nested forms as well as the state of them,                     // 20053
 * such as being valid/invalid or dirty/pristine.                                                                      // 20054
 *                                                                                                                     // 20055
 * Each {@link ng.directive:form form} directive creates an instance                                                   // 20056
 * of `FormController`.                                                                                                // 20057
 *                                                                                                                     // 20058
 */                                                                                                                    // 20059
//asks for $scope to fool the BC controller module                                                                     // 20060
FormController.$inject = ['$element', '$attrs', '$scope', '$animate', '$interpolate'];                                 // 20061
function FormController(element, attrs, $scope, $animate, $interpolate) {                                              // 20062
  var form = this,                                                                                                     // 20063
      controls = [];                                                                                                   // 20064
                                                                                                                       // 20065
  // init state                                                                                                        // 20066
  form.$error = {};                                                                                                    // 20067
  form.$$success = {};                                                                                                 // 20068
  form.$pending = undefined;                                                                                           // 20069
  form.$name = $interpolate(attrs.name || attrs.ngForm || '')($scope);                                                 // 20070
  form.$dirty = false;                                                                                                 // 20071
  form.$pristine = true;                                                                                               // 20072
  form.$valid = true;                                                                                                  // 20073
  form.$invalid = false;                                                                                               // 20074
  form.$submitted = false;                                                                                             // 20075
  form.$$parentForm = nullFormCtrl;                                                                                    // 20076
                                                                                                                       // 20077
  /**                                                                                                                  // 20078
   * @ngdoc method                                                                                                     // 20079
   * @name form.FormController#$rollbackViewValue                                                                      // 20080
   *                                                                                                                   // 20081
   * @description                                                                                                      // 20082
   * Rollback all form controls pending updates to the `$modelValue`.                                                  // 20083
   *                                                                                                                   // 20084
   * Updates may be pending by a debounced event or because the input is waiting for a some future                     // 20085
   * event defined in `ng-model-options`. This method is typically needed by the reset button of                       // 20086
   * a form that uses `ng-model-options` to pend updates.                                                              // 20087
   */                                                                                                                  // 20088
  form.$rollbackViewValue = function() {                                                                               // 20089
    forEach(controls, function(control) {                                                                              // 20090
      control.$rollbackViewValue();                                                                                    // 20091
    });                                                                                                                // 20092
  };                                                                                                                   // 20093
                                                                                                                       // 20094
  /**                                                                                                                  // 20095
   * @ngdoc method                                                                                                     // 20096
   * @name form.FormController#$commitViewValue                                                                        // 20097
   *                                                                                                                   // 20098
   * @description                                                                                                      // 20099
   * Commit all form controls pending updates to the `$modelValue`.                                                    // 20100
   *                                                                                                                   // 20101
   * Updates may be pending by a debounced event or because the input is waiting for a some future                     // 20102
   * event defined in `ng-model-options`. This method is rarely needed as `NgModelController`                          // 20103
   * usually handles calling this in response to input events.                                                         // 20104
   */                                                                                                                  // 20105
  form.$commitViewValue = function() {                                                                                 // 20106
    forEach(controls, function(control) {                                                                              // 20107
      control.$commitViewValue();                                                                                      // 20108
    });                                                                                                                // 20109
  };                                                                                                                   // 20110
                                                                                                                       // 20111
  /**                                                                                                                  // 20112
   * @ngdoc method                                                                                                     // 20113
   * @name form.FormController#$addControl                                                                             // 20114
   * @param {object} control control object, either a {@link form.FormController} or an                                // 20115
   * {@link ngModel.NgModelController}                                                                                 // 20116
   *                                                                                                                   // 20117
   * @description                                                                                                      // 20118
   * Register a control with the form. Input elements using ngModelController do this automatically                    // 20119
   * when they are linked.                                                                                             // 20120
   *                                                                                                                   // 20121
   * Note that the current state of the control will not be reflected on the new parent form. This                     // 20122
   * is not an issue with normal use, as freshly compiled and linked controls are in a `$pristine`                     // 20123
   * state.                                                                                                            // 20124
   *                                                                                                                   // 20125
   * However, if the method is used programmatically, for example by adding dynamically created controls,              // 20126
   * or controls that have been previously removed without destroying their corresponding DOM element,                 // 20127
   * it's the developers responsiblity to make sure the current state propagates to the parent form.                   // 20128
   *                                                                                                                   // 20129
   * For example, if an input control is added that is already `$dirty` and has `$error` properties,                   // 20130
   * calling `$setDirty()` and `$validate()` afterwards will propagate the state to the parent form.                   // 20131
   */                                                                                                                  // 20132
  form.$addControl = function(control) {                                                                               // 20133
    // Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored                           // 20134
    // and not added to the scope.  Now we throw an error.                                                             // 20135
    assertNotHasOwnProperty(control.$name, 'input');                                                                   // 20136
    controls.push(control);                                                                                            // 20137
                                                                                                                       // 20138
    if (control.$name) {                                                                                               // 20139
      form[control.$name] = control;                                                                                   // 20140
    }                                                                                                                  // 20141
                                                                                                                       // 20142
    control.$$parentForm = form;                                                                                       // 20143
  };                                                                                                                   // 20144
                                                                                                                       // 20145
  // Private API: rename a form control                                                                                // 20146
  form.$$renameControl = function(control, newName) {                                                                  // 20147
    var oldName = control.$name;                                                                                       // 20148
                                                                                                                       // 20149
    if (form[oldName] === control) {                                                                                   // 20150
      delete form[oldName];                                                                                            // 20151
    }                                                                                                                  // 20152
    form[newName] = control;                                                                                           // 20153
    control.$name = newName;                                                                                           // 20154
  };                                                                                                                   // 20155
                                                                                                                       // 20156
  /**                                                                                                                  // 20157
   * @ngdoc method                                                                                                     // 20158
   * @name form.FormController#$removeControl                                                                          // 20159
   * @param {object} control control object, either a {@link form.FormController} or an                                // 20160
   * {@link ngModel.NgModelController}                                                                                 // 20161
   *                                                                                                                   // 20162
   * @description                                                                                                      // 20163
   * Deregister a control from the form.                                                                               // 20164
   *                                                                                                                   // 20165
   * Input elements using ngModelController do this automatically when they are destroyed.                             // 20166
   *                                                                                                                   // 20167
   * Note that only the removed control's validation state (`$errors`etc.) will be removed from the                    // 20168
   * form. `$dirty`, `$submitted` states will not be changed, because the expected behavior can be                     // 20169
   * different from case to case. For example, removing the only `$dirty` control from a form may or                   // 20170
   * may not mean that the form is still `$dirty`.                                                                     // 20171
   */                                                                                                                  // 20172
  form.$removeControl = function(control) {                                                                            // 20173
    if (control.$name && form[control.$name] === control) {                                                            // 20174
      delete form[control.$name];                                                                                      // 20175
    }                                                                                                                  // 20176
    forEach(form.$pending, function(value, name) {                                                                     // 20177
      form.$setValidity(name, null, control);                                                                          // 20178
    });                                                                                                                // 20179
    forEach(form.$error, function(value, name) {                                                                       // 20180
      form.$setValidity(name, null, control);                                                                          // 20181
    });                                                                                                                // 20182
    forEach(form.$$success, function(value, name) {                                                                    // 20183
      form.$setValidity(name, null, control);                                                                          // 20184
    });                                                                                                                // 20185
                                                                                                                       // 20186
    arrayRemove(controls, control);                                                                                    // 20187
    control.$$parentForm = nullFormCtrl;                                                                               // 20188
  };                                                                                                                   // 20189
                                                                                                                       // 20190
                                                                                                                       // 20191
  /**                                                                                                                  // 20192
   * @ngdoc method                                                                                                     // 20193
   * @name form.FormController#$setValidity                                                                            // 20194
   *                                                                                                                   // 20195
   * @description                                                                                                      // 20196
   * Sets the validity of a form control.                                                                              // 20197
   *                                                                                                                   // 20198
   * This method will also propagate to parent forms.                                                                  // 20199
   */                                                                                                                  // 20200
  addSetValidityMethod({                                                                                               // 20201
    ctrl: this,                                                                                                        // 20202
    $element: element,                                                                                                 // 20203
    set: function(object, property, controller) {                                                                      // 20204
      var list = object[property];                                                                                     // 20205
      if (!list) {                                                                                                     // 20206
        object[property] = [controller];                                                                               // 20207
      } else {                                                                                                         // 20208
        var index = list.indexOf(controller);                                                                          // 20209
        if (index === -1) {                                                                                            // 20210
          list.push(controller);                                                                                       // 20211
        }                                                                                                              // 20212
      }                                                                                                                // 20213
    },                                                                                                                 // 20214
    unset: function(object, property, controller) {                                                                    // 20215
      var list = object[property];                                                                                     // 20216
      if (!list) {                                                                                                     // 20217
        return;                                                                                                        // 20218
      }                                                                                                                // 20219
      arrayRemove(list, controller);                                                                                   // 20220
      if (list.length === 0) {                                                                                         // 20221
        delete object[property];                                                                                       // 20222
      }                                                                                                                // 20223
    },                                                                                                                 // 20224
    $animate: $animate                                                                                                 // 20225
  });                                                                                                                  // 20226
                                                                                                                       // 20227
  /**                                                                                                                  // 20228
   * @ngdoc method                                                                                                     // 20229
   * @name form.FormController#$setDirty                                                                               // 20230
   *                                                                                                                   // 20231
   * @description                                                                                                      // 20232
   * Sets the form to a dirty state.                                                                                   // 20233
   *                                                                                                                   // 20234
   * This method can be called to add the 'ng-dirty' class and set the form to a dirty                                 // 20235
   * state (ng-dirty class). This method will also propagate to parent forms.                                          // 20236
   */                                                                                                                  // 20237
  form.$setDirty = function() {                                                                                        // 20238
    $animate.removeClass(element, PRISTINE_CLASS);                                                                     // 20239
    $animate.addClass(element, DIRTY_CLASS);                                                                           // 20240
    form.$dirty = true;                                                                                                // 20241
    form.$pristine = false;                                                                                            // 20242
    form.$$parentForm.$setDirty();                                                                                     // 20243
  };                                                                                                                   // 20244
                                                                                                                       // 20245
  /**                                                                                                                  // 20246
   * @ngdoc method                                                                                                     // 20247
   * @name form.FormController#$setPristine                                                                            // 20248
   *                                                                                                                   // 20249
   * @description                                                                                                      // 20250
   * Sets the form to its pristine state.                                                                              // 20251
   *                                                                                                                   // 20252
   * This method can be called to remove the 'ng-dirty' class and set the form to its pristine                         // 20253
   * state (ng-pristine class). This method will also propagate to all the controls contained                          // 20254
   * in this form.                                                                                                     // 20255
   *                                                                                                                   // 20256
   * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after                      // 20257
   * saving or resetting it.                                                                                           // 20258
   */                                                                                                                  // 20259
  form.$setPristine = function() {                                                                                     // 20260
    $animate.setClass(element, PRISTINE_CLASS, DIRTY_CLASS + ' ' + SUBMITTED_CLASS);                                   // 20261
    form.$dirty = false;                                                                                               // 20262
    form.$pristine = true;                                                                                             // 20263
    form.$submitted = false;                                                                                           // 20264
    forEach(controls, function(control) {                                                                              // 20265
      control.$setPristine();                                                                                          // 20266
    });                                                                                                                // 20267
  };                                                                                                                   // 20268
                                                                                                                       // 20269
  /**                                                                                                                  // 20270
   * @ngdoc method                                                                                                     // 20271
   * @name form.FormController#$setUntouched                                                                           // 20272
   *                                                                                                                   // 20273
   * @description                                                                                                      // 20274
   * Sets the form to its untouched state.                                                                             // 20275
   *                                                                                                                   // 20276
   * This method can be called to remove the 'ng-touched' class and set the form controls to their                     // 20277
   * untouched state (ng-untouched class).                                                                             // 20278
   *                                                                                                                   // 20279
   * Setting a form controls back to their untouched state is often useful when setting the form                       // 20280
   * back to its pristine state.                                                                                       // 20281
   */                                                                                                                  // 20282
  form.$setUntouched = function() {                                                                                    // 20283
    forEach(controls, function(control) {                                                                              // 20284
      control.$setUntouched();                                                                                         // 20285
    });                                                                                                                // 20286
  };                                                                                                                   // 20287
                                                                                                                       // 20288
  /**                                                                                                                  // 20289
   * @ngdoc method                                                                                                     // 20290
   * @name form.FormController#$setSubmitted                                                                           // 20291
   *                                                                                                                   // 20292
   * @description                                                                                                      // 20293
   * Sets the form to its submitted state.                                                                             // 20294
   */                                                                                                                  // 20295
  form.$setSubmitted = function() {                                                                                    // 20296
    $animate.addClass(element, SUBMITTED_CLASS);                                                                       // 20297
    form.$submitted = true;                                                                                            // 20298
    form.$$parentForm.$setSubmitted();                                                                                 // 20299
  };                                                                                                                   // 20300
}                                                                                                                      // 20301
                                                                                                                       // 20302
/**                                                                                                                    // 20303
 * @ngdoc directive                                                                                                    // 20304
 * @name ngForm                                                                                                        // 20305
 * @restrict EAC                                                                                                       // 20306
 *                                                                                                                     // 20307
 * @description                                                                                                        // 20308
 * Nestable alias of {@link ng.directive:form `form`} directive. HTML                                                  // 20309
 * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a               // 20310
 * sub-group of controls needs to be determined.                                                                       // 20311
 *                                                                                                                     // 20312
 * Note: the purpose of `ngForm` is to group controls,                                                                 // 20313
 * but not to be a replacement for the `<form>` tag with all of its capabilities                                       // 20314
 * (e.g. posting to the server, ...).                                                                                  // 20315
 *                                                                                                                     // 20316
 * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into             // 20317
 *                       related scope, under this name.                                                               // 20318
 *                                                                                                                     // 20319
 */                                                                                                                    // 20320
                                                                                                                       // 20321
 /**                                                                                                                   // 20322
 * @ngdoc directive                                                                                                    // 20323
 * @name form                                                                                                          // 20324
 * @restrict E                                                                                                         // 20325
 *                                                                                                                     // 20326
 * @description                                                                                                        // 20327
 * Directive that instantiates                                                                                         // 20328
 * {@link form.FormController FormController}.                                                                         // 20329
 *                                                                                                                     // 20330
 * If the `name` attribute is specified, the form controller is published onto the current scope under                 // 20331
 * this name.                                                                                                          // 20332
 *                                                                                                                     // 20333
 * # Alias: {@link ng.directive:ngForm `ngForm`}                                                                       // 20334
 *                                                                                                                     // 20335
 * In Angular, forms can be nested. This means that the outer form is valid when all of the child                      // 20336
 * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so                            // 20337
 * Angular provides the {@link ng.directive:ngForm `ngForm`} directive which behaves identically to                    // 20338
 * `<form>` but can be nested.  This allows you to have nested forms, which is very useful when                        // 20339
 * using Angular validation directives in forms that are dynamically generated using the                               // 20340
 * {@link ng.directive:ngRepeat `ngRepeat`} directive. Since you cannot dynamically generate the `name`                // 20341
 * attribute of input elements using interpolation, you have to wrap each set of repeated inputs in an                 // 20342
 * `ngForm` directive and nest these in an outer `form` element.                                                       // 20343
 *                                                                                                                     // 20344
 *                                                                                                                     // 20345
 * # CSS classes                                                                                                       // 20346
 *  - `ng-valid` is set if the form is valid.                                                                          // 20347
 *  - `ng-invalid` is set if the form is invalid.                                                                      // 20348
 *  - `ng-pending` is set if the form is pending.                                                                      // 20349
 *  - `ng-pristine` is set if the form is pristine.                                                                    // 20350
 *  - `ng-dirty` is set if the form is dirty.                                                                          // 20351
 *  - `ng-submitted` is set if the form was submitted.                                                                 // 20352
 *                                                                                                                     // 20353
 * Keep in mind that ngAnimate can detect each of these classes when added and removed.                                // 20354
 *                                                                                                                     // 20355
 *                                                                                                                     // 20356
 * # Submitting a form and preventing the default action                                                               // 20357
 *                                                                                                                     // 20358
 * Since the role of forms in client-side Angular applications is different than in classical                          // 20359
 * roundtrip apps, it is desirable for the browser not to translate the form submission into a full                    // 20360
 * page reload that sends the data to the server. Instead some javascript logic should be triggered                    // 20361
 * to handle the form submission in an application-specific way.                                                       // 20362
 *                                                                                                                     // 20363
 * For this reason, Angular prevents the default action (form submission to the server) unless the                     // 20364
 * `<form>` element has an `action` attribute specified.                                                               // 20365
 *                                                                                                                     // 20366
 * You can use one of the following two ways to specify what javascript method should be called when                   // 20367
 * a form is submitted:                                                                                                // 20368
 *                                                                                                                     // 20369
 * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element                                              // 20370
 * - {@link ng.directive:ngClick ngClick} directive on the first                                                       // 20371
  *  button or input field of type submit (input[type=submit])                                                         // 20372
 *                                                                                                                     // 20373
 * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}              // 20374
 * or {@link ng.directive:ngClick ngClick} directives.                                                                 // 20375
 * This is because of the following form submission rules in the HTML specification:                                   // 20376
 *                                                                                                                     // 20377
 * - If a form has only one input field then hitting enter in this field triggers form submit                          // 20378
 * (`ngSubmit`)                                                                                                        // 20379
 * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter                             // 20380
 * doesn't trigger submit                                                                                              // 20381
 * - if a form has one or more input fields and one or more buttons or input[type=submit] then                         // 20382
 * hitting enter in any of the input fields will trigger the click handler on the *first* button or                    // 20383
 * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)                            // 20384
 *                                                                                                                     // 20385
 * Any pending `ngModelOptions` changes will take place immediately when an enclosing form is                          // 20386
 * submitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`                        // 20387
 * to have access to the updated model.                                                                                // 20388
 *                                                                                                                     // 20389
 * ## Animation Hooks                                                                                                  // 20390
 *                                                                                                                     // 20391
 * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.                    // 20392
 * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any                        // 20393
 * other validations that are performed within the form. Animations in ngForm are similar to how                       // 20394
 * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well                     // 20395
 * as JS animations.                                                                                                   // 20396
 *                                                                                                                     // 20397
 * The following example shows a simple way to utilize CSS transitions to style a form element                         // 20398
 * that has been rendered as invalid after it has been validated:                                                      // 20399
 *                                                                                                                     // 20400
 * <pre>                                                                                                               // 20401
 * //be sure to include ngAnimate as a module to hook into more                                                        // 20402
 * //advanced animations                                                                                               // 20403
 * .my-form {                                                                                                          // 20404
 *   transition:0.5s linear all;                                                                                       // 20405
 *   background: white;                                                                                                // 20406
 * }                                                                                                                   // 20407
 * .my-form.ng-invalid {                                                                                               // 20408
 *   background: red;                                                                                                  // 20409
 *   color:white;                                                                                                      // 20410
 * }                                                                                                                   // 20411
 * </pre>                                                                                                              // 20412
 *                                                                                                                     // 20413
 * @example                                                                                                            // 20414
    <example deps="angular-animate.js" animations="true" fixBase="true" module="formExample">                          // 20415
      <file name="index.html">                                                                                         // 20416
       <script>                                                                                                        // 20417
         angular.module('formExample', [])                                                                             // 20418
           .controller('FormController', ['$scope', function($scope) {                                                 // 20419
             $scope.userType = 'guest';                                                                                // 20420
           }]);                                                                                                        // 20421
       </script>                                                                                                       // 20422
       <style>                                                                                                         // 20423
        .my-form {                                                                                                     // 20424
          transition:all linear 0.5s;                                                                                  // 20425
          background: transparent;                                                                                     // 20426
        }                                                                                                              // 20427
        .my-form.ng-invalid {                                                                                          // 20428
          background: red;                                                                                             // 20429
        }                                                                                                              // 20430
       </style>                                                                                                        // 20431
       <form name="myForm" ng-controller="FormController" class="my-form">                                             // 20432
         userType: <input name="input" ng-model="userType" required>                                                   // 20433
         <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>                               // 20434
         <code>userType = {{userType}}</code><br>                                                                      // 20435
         <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br>                                                // 20436
         <code>myForm.input.$error = {{myForm.input.$error}}</code><br>                                                // 20437
         <code>myForm.$valid = {{myForm.$valid}}</code><br>                                                            // 20438
         <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br>                                        // 20439
        </form>                                                                                                        // 20440
      </file>                                                                                                          // 20441
      <file name="protractor.js" type="protractor">                                                                    // 20442
        it('should initialize to model', function() {                                                                  // 20443
          var userType = element(by.binding('userType'));                                                              // 20444
          var valid = element(by.binding('myForm.input.$valid'));                                                      // 20445
                                                                                                                       // 20446
          expect(userType.getText()).toContain('guest');                                                               // 20447
          expect(valid.getText()).toContain('true');                                                                   // 20448
        });                                                                                                            // 20449
                                                                                                                       // 20450
        it('should be invalid if empty', function() {                                                                  // 20451
          var userType = element(by.binding('userType'));                                                              // 20452
          var valid = element(by.binding('myForm.input.$valid'));                                                      // 20453
          var userInput = element(by.model('userType'));                                                               // 20454
                                                                                                                       // 20455
          userInput.clear();                                                                                           // 20456
          userInput.sendKeys('');                                                                                      // 20457
                                                                                                                       // 20458
          expect(userType.getText()).toEqual('userType =');                                                            // 20459
          expect(valid.getText()).toContain('false');                                                                  // 20460
        });                                                                                                            // 20461
      </file>                                                                                                          // 20462
    </example>                                                                                                         // 20463
 *                                                                                                                     // 20464
 * @param {string=} name Name of the form. If specified, the form controller will be published into                    // 20465
 *                       related scope, under this name.                                                               // 20466
 */                                                                                                                    // 20467
var formDirectiveFactory = function(isNgForm) {                                                                        // 20468
  return ['$timeout', '$parse', function($timeout, $parse) {                                                           // 20469
    var formDirective = {                                                                                              // 20470
      name: 'form',                                                                                                    // 20471
      restrict: isNgForm ? 'EAC' : 'E',                                                                                // 20472
      require: ['form', '^^?form'], //first is the form's own ctrl, second is an optional parent form                  // 20473
      controller: FormController,                                                                                      // 20474
      compile: function ngFormCompile(formElement, attr) {                                                             // 20475
        // Setup initial state of the control                                                                          // 20476
        formElement.addClass(PRISTINE_CLASS).addClass(VALID_CLASS);                                                    // 20477
                                                                                                                       // 20478
        var nameAttr = attr.name ? 'name' : (isNgForm && attr.ngForm ? 'ngForm' : false);                              // 20479
                                                                                                                       // 20480
        return {                                                                                                       // 20481
          pre: function ngFormPreLink(scope, formElement, attr, ctrls) {                                               // 20482
            var controller = ctrls[0];                                                                                 // 20483
                                                                                                                       // 20484
            // if `action` attr is not present on the form, prevent the default action (submission)                    // 20485
            if (!('action' in attr)) {                                                                                 // 20486
              // we can't use jq events because if a form is destroyed during submission the default                   // 20487
              // action is not prevented. see #1238                                                                    // 20488
              //                                                                                                       // 20489
              // IE 9 is not affected because it doesn't fire a submit event and try to do a full                      // 20490
              // page reload if the form was destroyed by submission of the form via a click handler                   // 20491
              // on a button in the form. Looks like an IE9 specific bug.                                              // 20492
              var handleFormSubmission = function(event) {                                                             // 20493
                scope.$apply(function() {                                                                              // 20494
                  controller.$commitViewValue();                                                                       // 20495
                  controller.$setSubmitted();                                                                          // 20496
                });                                                                                                    // 20497
                                                                                                                       // 20498
                event.preventDefault();                                                                                // 20499
              };                                                                                                       // 20500
                                                                                                                       // 20501
              addEventListenerFn(formElement[0], 'submit', handleFormSubmission);                                      // 20502
                                                                                                                       // 20503
              // unregister the preventDefault listener so that we don't not leak memory but in a                      // 20504
              // way that will achieve the prevention of the default action.                                           // 20505
              formElement.on('$destroy', function() {                                                                  // 20506
                $timeout(function() {                                                                                  // 20507
                  removeEventListenerFn(formElement[0], 'submit', handleFormSubmission);                               // 20508
                }, 0, false);                                                                                          // 20509
              });                                                                                                      // 20510
            }                                                                                                          // 20511
                                                                                                                       // 20512
            var parentFormCtrl = ctrls[1] || controller.$$parentForm;                                                  // 20513
            parentFormCtrl.$addControl(controller);                                                                    // 20514
                                                                                                                       // 20515
            var setter = nameAttr ? getSetter(controller.$name) : noop;                                                // 20516
                                                                                                                       // 20517
            if (nameAttr) {                                                                                            // 20518
              setter(scope, controller);                                                                               // 20519
              attr.$observe(nameAttr, function(newValue) {                                                             // 20520
                if (controller.$name === newValue) return;                                                             // 20521
                setter(scope, undefined);                                                                              // 20522
                controller.$$parentForm.$$renameControl(controller, newValue);                                         // 20523
                setter = getSetter(controller.$name);                                                                  // 20524
                setter(scope, controller);                                                                             // 20525
              });                                                                                                      // 20526
            }                                                                                                          // 20527
            formElement.on('$destroy', function() {                                                                    // 20528
              controller.$$parentForm.$removeControl(controller);                                                      // 20529
              setter(scope, undefined);                                                                                // 20530
              extend(controller, nullFormCtrl); //stop propagating child destruction handlers upwards                  // 20531
            });                                                                                                        // 20532
          }                                                                                                            // 20533
        };                                                                                                             // 20534
      }                                                                                                                // 20535
    };                                                                                                                 // 20536
                                                                                                                       // 20537
    return formDirective;                                                                                              // 20538
                                                                                                                       // 20539
    function getSetter(expression) {                                                                                   // 20540
      if (expression === '') {                                                                                         // 20541
        //create an assignable expression, so forms with an empty name can be renamed later                            // 20542
        return $parse('this[""]').assign;                                                                              // 20543
      }                                                                                                                // 20544
      return $parse(expression).assign || noop;                                                                        // 20545
    }                                                                                                                  // 20546
  }];                                                                                                                  // 20547
};                                                                                                                     // 20548
                                                                                                                       // 20549
var formDirective = formDirectiveFactory();                                                                            // 20550
var ngFormDirective = formDirectiveFactory(true);                                                                      // 20551
                                                                                                                       // 20552
/* global VALID_CLASS: false,                                                                                          // 20553
  INVALID_CLASS: false,                                                                                                // 20554
  PRISTINE_CLASS: false,                                                                                               // 20555
  DIRTY_CLASS: false,                                                                                                  // 20556
  UNTOUCHED_CLASS: false,                                                                                              // 20557
  TOUCHED_CLASS: false,                                                                                                // 20558
  ngModelMinErr: false,                                                                                                // 20559
*/                                                                                                                     // 20560
                                                                                                                       // 20561
// Regex code is obtained from SO: https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime#answer-3143231
var ISO_DATE_REGEXP = /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/;                      // 20563
var URL_REGEXP = /^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/;                // 20564
var EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;
var NUMBER_REGEXP = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/;                                               // 20566
var DATE_REGEXP = /^(\d{4})-(\d{2})-(\d{2})$/;                                                                         // 20567
var DATETIMELOCAL_REGEXP = /^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;                            // 20568
var WEEK_REGEXP = /^(\d{4})-W(\d\d)$/;                                                                                 // 20569
var MONTH_REGEXP = /^(\d{4})-(\d\d)$/;                                                                                 // 20570
var TIME_REGEXP = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;                                                           // 20571
                                                                                                                       // 20572
var inputType = {                                                                                                      // 20573
                                                                                                                       // 20574
  /**                                                                                                                  // 20575
   * @ngdoc input                                                                                                      // 20576
   * @name input[text]                                                                                                 // 20577
   *                                                                                                                   // 20578
   * @description                                                                                                      // 20579
   * Standard HTML text input with angular data binding, inherited by most of the `input` elements.                    // 20580
   *                                                                                                                   // 20581
   *                                                                                                                   // 20582
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 20583
   * @param {string=} name Property name of the form under which the control is published.                             // 20584
   * @param {string=} required Adds `required` validation error key if the value is not entered.                       // 20585
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 20586
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 20587
   *    `required` when you want to data-bind to the `required` attribute.                                             // 20588
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                   // 20589
   *    minlength.                                                                                                     // 20590
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                    // 20591
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of                     // 20592
   *    any length.                                                                                                    // 20593
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string              // 20594
   *    that contains the regular expression body that will be converted to a regular expression                       // 20595
   *    as in the ngPattern directive.                                                                                 // 20596
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match                // 20597
   *    a RegExp found by evaluating the Angular expression given in the attribute value.                              // 20598
   *    If the expression evaluates to a RegExp object, then this is used directly.                                    // 20599
   *    If the expression evaluates to a string, then it will be converted to a RegExp                                 // 20600
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to                        // 20601
   *    `new RegExp('^abc$')`.<br />                                                                                   // 20602
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to                   // 20603
   *    start at the index of the last search's match, thus not taking the whole input value into                      // 20604
   *    account.                                                                                                       // 20605
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 20606
   *    interaction with the input element.                                                                            // 20607
   * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.                    // 20608
   *    This parameter is ignored for input[type=password] controls, which will never trim the                         // 20609
   *    input.                                                                                                         // 20610
   *                                                                                                                   // 20611
   * @example                                                                                                          // 20612
      <example name="text-input-directive" module="textInputExample">                                                  // 20613
        <file name="index.html">                                                                                       // 20614
         <script>                                                                                                      // 20615
           angular.module('textInputExample', [])                                                                      // 20616
             .controller('ExampleController', ['$scope', function($scope) {                                            // 20617
               $scope.example = {                                                                                      // 20618
                 text: 'guest',                                                                                        // 20619
                 word: /^\s*\w*\s*$/                                                                                   // 20620
               };                                                                                                      // 20621
             }]);                                                                                                      // 20622
         </script>                                                                                                     // 20623
         <form name="myForm" ng-controller="ExampleController">                                                        // 20624
           <label>Single word:                                                                                         // 20625
             <input type="text" name="input" ng-model="example.text"                                                   // 20626
                    ng-pattern="example.word" required ng-trim="false">                                                // 20627
           </label>                                                                                                    // 20628
           <div role="alert">                                                                                          // 20629
             <span class="error" ng-show="myForm.input.$error.required">                                               // 20630
               Required!</span>                                                                                        // 20631
             <span class="error" ng-show="myForm.input.$error.pattern">                                                // 20632
               Single word only!</span>                                                                                // 20633
           </div>                                                                                                      // 20634
           <tt>text = {{example.text}}</tt><br/>                                                                       // 20635
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                 // 20636
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                 // 20637
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                             // 20638
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                         // 20639
          </form>                                                                                                      // 20640
        </file>                                                                                                        // 20641
        <file name="protractor.js" type="protractor">                                                                  // 20642
          var text = element(by.binding('example.text'));                                                              // 20643
          var valid = element(by.binding('myForm.input.$valid'));                                                      // 20644
          var input = element(by.model('example.text'));                                                               // 20645
                                                                                                                       // 20646
          it('should initialize to model', function() {                                                                // 20647
            expect(text.getText()).toContain('guest');                                                                 // 20648
            expect(valid.getText()).toContain('true');                                                                 // 20649
          });                                                                                                          // 20650
                                                                                                                       // 20651
          it('should be invalid if empty', function() {                                                                // 20652
            input.clear();                                                                                             // 20653
            input.sendKeys('');                                                                                        // 20654
                                                                                                                       // 20655
            expect(text.getText()).toEqual('text =');                                                                  // 20656
            expect(valid.getText()).toContain('false');                                                                // 20657
          });                                                                                                          // 20658
                                                                                                                       // 20659
          it('should be invalid if multi word', function() {                                                           // 20660
            input.clear();                                                                                             // 20661
            input.sendKeys('hello world');                                                                             // 20662
                                                                                                                       // 20663
            expect(valid.getText()).toContain('false');                                                                // 20664
          });                                                                                                          // 20665
        </file>                                                                                                        // 20666
      </example>                                                                                                       // 20667
   */                                                                                                                  // 20668
  'text': textInputType,                                                                                               // 20669
                                                                                                                       // 20670
    /**                                                                                                                // 20671
     * @ngdoc input                                                                                                    // 20672
     * @name input[date]                                                                                               // 20673
     *                                                                                                                 // 20674
     * @description                                                                                                    // 20675
     * Input with date validation and transformation. In browsers that do not yet support                              // 20676
     * the HTML5 date input, a text element will be used. In that case, text must be entered in a valid ISO-8601       // 20677
     * date format (yyyy-MM-dd), for example: `2009-01-06`. Since many                                                 // 20678
     * modern browsers do not yet support this input type, it is important to provide cues to users on the             // 20679
     * expected input format via a placeholder or label.                                                               // 20680
     *                                                                                                                 // 20681
     * The model must always be a Date object, otherwise Angular will throw an error.                                  // 20682
     * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.                  // 20683
     *                                                                                                                 // 20684
     * The timezone to be used to read/write the `Date` instance in the model can be defined using                     // 20685
     * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.            // 20686
     *                                                                                                                 // 20687
     * @param {string} ngModel Assignable angular expression to data-bind to.                                          // 20688
     * @param {string=} name Property name of the form under which the control is published.                           // 20689
     * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
     *   valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute                      // 20691
     *   (e.g. `min="{{minDate | date:'yyyy-MM-dd'}}"`). Note that `min` will also add native HTML5                    // 20692
     *   constraint validation.                                                                                        // 20693
     * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
     *   a valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute                    // 20695
     *   (e.g. `max="{{maxDate | date:'yyyy-MM-dd'}}"`). Note that `max` will also add native HTML5                    // 20696
     *   constraint validation.                                                                                        // 20697
     * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO date string                // 20698
     *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.                           // 20699
     * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO date string                // 20700
     *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.                           // 20701
     * @param {string=} required Sets `required` validation error key if the value is not entered.                     // 20702
     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                   // 20703
     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                    // 20704
     *    `required` when you want to data-bind to the `required` attribute.                                           // 20705
     * @param {string=} ngChange Angular expression to be executed when input changes due to user                      // 20706
     *    interaction with the input element.                                                                          // 20707
     *                                                                                                                 // 20708
     * @example                                                                                                        // 20709
     <example name="date-input-directive" module="dateInputExample">                                                   // 20710
     <file name="index.html">                                                                                          // 20711
       <script>                                                                                                        // 20712
          angular.module('dateInputExample', [])                                                                       // 20713
            .controller('DateController', ['$scope', function($scope) {                                                // 20714
              $scope.example = {                                                                                       // 20715
                value: new Date(2013, 9, 22)                                                                           // 20716
              };                                                                                                       // 20717
            }]);                                                                                                       // 20718
       </script>                                                                                                       // 20719
       <form name="myForm" ng-controller="DateController as dateCtrl">                                                 // 20720
          <label for="exampleInput">Pick a date in 2013:</label>                                                       // 20721
          <input type="date" id="exampleInput" name="input" ng-model="example.value"                                   // 20722
              placeholder="yyyy-MM-dd" min="2013-01-01" max="2013-12-31" required />                                   // 20723
          <div role="alert">                                                                                           // 20724
            <span class="error" ng-show="myForm.input.$error.required">                                                // 20725
                Required!</span>                                                                                       // 20726
            <span class="error" ng-show="myForm.input.$error.date">                                                    // 20727
                Not a valid date!</span>                                                                               // 20728
           </div>                                                                                                      // 20729
           <tt>value = {{example.value | date: "yyyy-MM-dd"}}</tt><br/>                                                // 20730
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                 // 20731
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                 // 20732
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                             // 20733
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                         // 20734
       </form>                                                                                                         // 20735
     </file>                                                                                                           // 20736
     <file name="protractor.js" type="protractor">                                                                     // 20737
        var value = element(by.binding('example.value | date: "yyyy-MM-dd"'));                                         // 20738
        var valid = element(by.binding('myForm.input.$valid'));                                                        // 20739
        var input = element(by.model('example.value'));                                                                // 20740
                                                                                                                       // 20741
        // currently protractor/webdriver does not support                                                             // 20742
        // sending keys to all known HTML5 input controls                                                              // 20743
        // for various browsers (see https://github.com/angular/protractor/issues/562).                                // 20744
        function setInput(val) {                                                                                       // 20745
          // set the value of the element and force validation.                                                        // 20746
          var scr = "var ipt = document.getElementById('exampleInput'); " +                                            // 20747
          "ipt.value = '" + val + "';" +                                                                               // 20748
          "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";    // 20749
          browser.executeScript(scr);                                                                                  // 20750
        }                                                                                                              // 20751
                                                                                                                       // 20752
        it('should initialize to model', function() {                                                                  // 20753
          expect(value.getText()).toContain('2013-10-22');                                                             // 20754
          expect(valid.getText()).toContain('myForm.input.$valid = true');                                             // 20755
        });                                                                                                            // 20756
                                                                                                                       // 20757
        it('should be invalid if empty', function() {                                                                  // 20758
          setInput('');                                                                                                // 20759
          expect(value.getText()).toEqual('value =');                                                                  // 20760
          expect(valid.getText()).toContain('myForm.input.$valid = false');                                            // 20761
        });                                                                                                            // 20762
                                                                                                                       // 20763
        it('should be invalid if over max', function() {                                                               // 20764
          setInput('2015-01-01');                                                                                      // 20765
          expect(value.getText()).toContain('');                                                                       // 20766
          expect(valid.getText()).toContain('myForm.input.$valid = false');                                            // 20767
        });                                                                                                            // 20768
     </file>                                                                                                           // 20769
     </example>                                                                                                        // 20770
     */                                                                                                                // 20771
  'date': createDateInputType('date', DATE_REGEXP,                                                                     // 20772
         createDateParser(DATE_REGEXP, ['yyyy', 'MM', 'dd']),                                                          // 20773
         'yyyy-MM-dd'),                                                                                                // 20774
                                                                                                                       // 20775
   /**                                                                                                                 // 20776
    * @ngdoc input                                                                                                     // 20777
    * @name input[datetime-local]                                                                                      // 20778
    *                                                                                                                  // 20779
    * @description                                                                                                     // 20780
    * Input with datetime validation and transformation. In browsers that do not yet support                           // 20781
    * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601    // 20782
    * local datetime format (yyyy-MM-ddTHH:mm:ss), for example: `2010-12-28T14:57:00`.                                 // 20783
    *                                                                                                                  // 20784
    * The model must always be a Date object, otherwise Angular will throw an error.                                   // 20785
    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.                   // 20786
    *                                                                                                                  // 20787
    * The timezone to be used to read/write the `Date` instance in the model can be defined using                      // 20788
    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.             // 20789
    *                                                                                                                  // 20790
    * @param {string} ngModel Assignable angular expression to data-bind to.                                           // 20791
    * @param {string=} name Property name of the form under which the control is published.                            // 20792
    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.                // 20793
    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation                 // 20794
    *   inside this attribute (e.g. `min="{{minDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).                        // 20795
    *   Note that `min` will also add native HTML5 constraint validation.                                              // 20796
    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.             // 20797
    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation                 // 20798
    *   inside this attribute (e.g. `max="{{maxDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).                        // 20799
    *   Note that `max` will also add native HTML5 constraint validation.                                              // 20800
    * @param {(date|string)=} ngMin Sets the `min` validation error key to the Date / ISO datetime string              // 20801
    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.                            // 20802
    * @param {(date|string)=} ngMax Sets the `max` validation error key to the Date / ISO datetime string              // 20803
    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.                            // 20804
    * @param {string=} required Sets `required` validation error key if the value is not entered.                      // 20805
    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                    // 20806
    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                     // 20807
    *    `required` when you want to data-bind to the `required` attribute.                                            // 20808
    * @param {string=} ngChange Angular expression to be executed when input changes due to user                       // 20809
    *    interaction with the input element.                                                                           // 20810
    *                                                                                                                  // 20811
    * @example                                                                                                         // 20812
    <example name="datetimelocal-input-directive" module="dateExample">                                                // 20813
    <file name="index.html">                                                                                           // 20814
      <script>                                                                                                         // 20815
        angular.module('dateExample', [])                                                                              // 20816
          .controller('DateController', ['$scope', function($scope) {                                                  // 20817
            $scope.example = {                                                                                         // 20818
              value: new Date(2010, 11, 28, 14, 57)                                                                    // 20819
            };                                                                                                         // 20820
          }]);                                                                                                         // 20821
      </script>                                                                                                        // 20822
      <form name="myForm" ng-controller="DateController as dateCtrl">                                                  // 20823
        <label for="exampleInput">Pick a date between in 2013:</label>                                                 // 20824
        <input type="datetime-local" id="exampleInput" name="input" ng-model="example.value"                           // 20825
            placeholder="yyyy-MM-ddTHH:mm:ss" min="2001-01-01T00:00:00" max="2013-12-31T00:00:00" required />          // 20826
        <div role="alert">                                                                                             // 20827
          <span class="error" ng-show="myForm.input.$error.required">                                                  // 20828
              Required!</span>                                                                                         // 20829
          <span class="error" ng-show="myForm.input.$error.datetimelocal">                                             // 20830
              Not a valid date!</span>                                                                                 // 20831
        </div>                                                                                                         // 20832
        <tt>value = {{example.value | date: "yyyy-MM-ddTHH:mm:ss"}}</tt><br/>                                          // 20833
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                    // 20834
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                    // 20835
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                // 20836
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                            // 20837
      </form>                                                                                                          // 20838
    </file>                                                                                                            // 20839
    <file name="protractor.js" type="protractor">                                                                      // 20840
      var value = element(by.binding('example.value | date: "yyyy-MM-ddTHH:mm:ss"'));                                  // 20841
      var valid = element(by.binding('myForm.input.$valid'));                                                          // 20842
      var input = element(by.model('example.value'));                                                                  // 20843
                                                                                                                       // 20844
      // currently protractor/webdriver does not support                                                               // 20845
      // sending keys to all known HTML5 input controls                                                                // 20846
      // for various browsers (https://github.com/angular/protractor/issues/562).                                      // 20847
      function setInput(val) {                                                                                         // 20848
        // set the value of the element and force validation.                                                          // 20849
        var scr = "var ipt = document.getElementById('exampleInput'); " +                                              // 20850
        "ipt.value = '" + val + "';" +                                                                                 // 20851
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";      // 20852
        browser.executeScript(scr);                                                                                    // 20853
      }                                                                                                                // 20854
                                                                                                                       // 20855
      it('should initialize to model', function() {                                                                    // 20856
        expect(value.getText()).toContain('2010-12-28T14:57:00');                                                      // 20857
        expect(valid.getText()).toContain('myForm.input.$valid = true');                                               // 20858
      });                                                                                                              // 20859
                                                                                                                       // 20860
      it('should be invalid if empty', function() {                                                                    // 20861
        setInput('');                                                                                                  // 20862
        expect(value.getText()).toEqual('value =');                                                                    // 20863
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 20864
      });                                                                                                              // 20865
                                                                                                                       // 20866
      it('should be invalid if over max', function() {                                                                 // 20867
        setInput('2015-01-01T23:59:00');                                                                               // 20868
        expect(value.getText()).toContain('');                                                                         // 20869
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 20870
      });                                                                                                              // 20871
    </file>                                                                                                            // 20872
    </example>                                                                                                         // 20873
    */                                                                                                                 // 20874
  'datetime-local': createDateInputType('datetimelocal', DATETIMELOCAL_REGEXP,                                         // 20875
      createDateParser(DATETIMELOCAL_REGEXP, ['yyyy', 'MM', 'dd', 'HH', 'mm', 'ss', 'sss']),                           // 20876
      'yyyy-MM-ddTHH:mm:ss.sss'),                                                                                      // 20877
                                                                                                                       // 20878
  /**                                                                                                                  // 20879
   * @ngdoc input                                                                                                      // 20880
   * @name input[time]                                                                                                 // 20881
   *                                                                                                                   // 20882
   * @description                                                                                                      // 20883
   * Input with time validation and transformation. In browsers that do not yet support                                // 20884
   * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601     // 20885
   * local time format (HH:mm:ss), for example: `14:57:00`. Model must be a Date object. This binding will always output a
   * Date object to the model of January 1, 1970, or local date `new Date(1970, 0, 1, HH, mm, ss)`.                    // 20887
   *                                                                                                                   // 20888
   * The model must always be a Date object, otherwise Angular will throw an error.                                    // 20889
   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.                    // 20890
   *                                                                                                                   // 20891
   * The timezone to be used to read/write the `Date` instance in the model can be defined using                       // 20892
   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.              // 20893
   *                                                                                                                   // 20894
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 20895
   * @param {string=} name Property name of the form under which the control is published.                             // 20896
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.                 // 20897
   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this                     // 20898
   *   attribute (e.g. `min="{{minTime | date:'HH:mm:ss'}}"`). Note that `min` will also add                           // 20899
   *   native HTML5 constraint validation.                                                                             // 20900
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.              // 20901
   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this                     // 20902
   *   attribute (e.g. `max="{{maxTime | date:'HH:mm:ss'}}"`). Note that `max` will also add                           // 20903
   *   native HTML5 constraint validation.                                                                             // 20904
   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO time string the              // 20905
   *   `ngMin` expression evaluates to. Note that it does not set the `min` attribute.                                 // 20906
   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO time string the              // 20907
   *   `ngMax` expression evaluates to. Note that it does not set the `max` attribute.                                 // 20908
   * @param {string=} required Sets `required` validation error key if the value is not entered.                       // 20909
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 20910
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 20911
   *    `required` when you want to data-bind to the `required` attribute.                                             // 20912
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 20913
   *    interaction with the input element.                                                                            // 20914
   *                                                                                                                   // 20915
   * @example                                                                                                          // 20916
   <example name="time-input-directive" module="timeExample">                                                          // 20917
   <file name="index.html">                                                                                            // 20918
     <script>                                                                                                          // 20919
      angular.module('timeExample', [])                                                                                // 20920
        .controller('DateController', ['$scope', function($scope) {                                                    // 20921
          $scope.example = {                                                                                           // 20922
            value: new Date(1970, 0, 1, 14, 57, 0)                                                                     // 20923
          };                                                                                                           // 20924
        }]);                                                                                                           // 20925
     </script>                                                                                                         // 20926
     <form name="myForm" ng-controller="DateController as dateCtrl">                                                   // 20927
        <label for="exampleInput">Pick a between 8am and 5pm:</label>                                                  // 20928
        <input type="time" id="exampleInput" name="input" ng-model="example.value"                                     // 20929
            placeholder="HH:mm:ss" min="08:00:00" max="17:00:00" required />                                           // 20930
        <div role="alert">                                                                                             // 20931
          <span class="error" ng-show="myForm.input.$error.required">                                                  // 20932
              Required!</span>                                                                                         // 20933
          <span class="error" ng-show="myForm.input.$error.time">                                                      // 20934
              Not a valid date!</span>                                                                                 // 20935
        </div>                                                                                                         // 20936
        <tt>value = {{example.value | date: "HH:mm:ss"}}</tt><br/>                                                     // 20937
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                    // 20938
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                    // 20939
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                // 20940
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                            // 20941
     </form>                                                                                                           // 20942
   </file>                                                                                                             // 20943
   <file name="protractor.js" type="protractor">                                                                       // 20944
      var value = element(by.binding('example.value | date: "HH:mm:ss"'));                                             // 20945
      var valid = element(by.binding('myForm.input.$valid'));                                                          // 20946
      var input = element(by.model('example.value'));                                                                  // 20947
                                                                                                                       // 20948
      // currently protractor/webdriver does not support                                                               // 20949
      // sending keys to all known HTML5 input controls                                                                // 20950
      // for various browsers (https://github.com/angular/protractor/issues/562).                                      // 20951
      function setInput(val) {                                                                                         // 20952
        // set the value of the element and force validation.                                                          // 20953
        var scr = "var ipt = document.getElementById('exampleInput'); " +                                              // 20954
        "ipt.value = '" + val + "';" +                                                                                 // 20955
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";      // 20956
        browser.executeScript(scr);                                                                                    // 20957
      }                                                                                                                // 20958
                                                                                                                       // 20959
      it('should initialize to model', function() {                                                                    // 20960
        expect(value.getText()).toContain('14:57:00');                                                                 // 20961
        expect(valid.getText()).toContain('myForm.input.$valid = true');                                               // 20962
      });                                                                                                              // 20963
                                                                                                                       // 20964
      it('should be invalid if empty', function() {                                                                    // 20965
        setInput('');                                                                                                  // 20966
        expect(value.getText()).toEqual('value =');                                                                    // 20967
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 20968
      });                                                                                                              // 20969
                                                                                                                       // 20970
      it('should be invalid if over max', function() {                                                                 // 20971
        setInput('23:59:00');                                                                                          // 20972
        expect(value.getText()).toContain('');                                                                         // 20973
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 20974
      });                                                                                                              // 20975
   </file>                                                                                                             // 20976
   </example>                                                                                                          // 20977
   */                                                                                                                  // 20978
  'time': createDateInputType('time', TIME_REGEXP,                                                                     // 20979
      createDateParser(TIME_REGEXP, ['HH', 'mm', 'ss', 'sss']),                                                        // 20980
     'HH:mm:ss.sss'),                                                                                                  // 20981
                                                                                                                       // 20982
   /**                                                                                                                 // 20983
    * @ngdoc input                                                                                                     // 20984
    * @name input[week]                                                                                                // 20985
    *                                                                                                                  // 20986
    * @description                                                                                                     // 20987
    * Input with week-of-the-year validation and transformation to Date. In browsers that do not yet support           // 20988
    * the HTML5 week input, a text element will be used. In that case, the text must be entered in a valid ISO-8601    // 20989
    * week format (yyyy-W##), for example: `2013-W02`.                                                                 // 20990
    *                                                                                                                  // 20991
    * The model must always be a Date object, otherwise Angular will throw an error.                                   // 20992
    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.                   // 20993
    *                                                                                                                  // 20994
    * The timezone to be used to read/write the `Date` instance in the model can be defined using                      // 20995
    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.             // 20996
    *                                                                                                                  // 20997
    * @param {string} ngModel Assignable angular expression to data-bind to.                                           // 20998
    * @param {string=} name Property name of the form under which the control is published.                            // 20999
    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.                // 21000
    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this                    // 21001
    *   attribute (e.g. `min="{{minWeek | date:'yyyy-Www'}}"`). Note that `min` will also add                          // 21002
    *   native HTML5 constraint validation.                                                                            // 21003
    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.             // 21004
    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this                    // 21005
    *   attribute (e.g. `max="{{maxWeek | date:'yyyy-Www'}}"`). Note that `max` will also add                          // 21006
    *   native HTML5 constraint validation.                                                                            // 21007
    * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string                 // 21008
    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.                            // 21009
    * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string                 // 21010
    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.                            // 21011
    * @param {string=} required Sets `required` validation error key if the value is not entered.                      // 21012
    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                    // 21013
    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                     // 21014
    *    `required` when you want to data-bind to the `required` attribute.                                            // 21015
    * @param {string=} ngChange Angular expression to be executed when input changes due to user                       // 21016
    *    interaction with the input element.                                                                           // 21017
    *                                                                                                                  // 21018
    * @example                                                                                                         // 21019
    <example name="week-input-directive" module="weekExample">                                                         // 21020
    <file name="index.html">                                                                                           // 21021
      <script>                                                                                                         // 21022
      angular.module('weekExample', [])                                                                                // 21023
        .controller('DateController', ['$scope', function($scope) {                                                    // 21024
          $scope.example = {                                                                                           // 21025
            value: new Date(2013, 0, 3)                                                                                // 21026
          };                                                                                                           // 21027
        }]);                                                                                                           // 21028
      </script>                                                                                                        // 21029
      <form name="myForm" ng-controller="DateController as dateCtrl">                                                  // 21030
        <label>Pick a date between in 2013:                                                                            // 21031
          <input id="exampleInput" type="week" name="input" ng-model="example.value"                                   // 21032
                 placeholder="YYYY-W##" min="2012-W32"                                                                 // 21033
                 max="2013-W52" required />                                                                            // 21034
        </label>                                                                                                       // 21035
        <div role="alert">                                                                                             // 21036
          <span class="error" ng-show="myForm.input.$error.required">                                                  // 21037
              Required!</span>                                                                                         // 21038
          <span class="error" ng-show="myForm.input.$error.week">                                                      // 21039
              Not a valid date!</span>                                                                                 // 21040
        </div>                                                                                                         // 21041
        <tt>value = {{example.value | date: "yyyy-Www"}}</tt><br/>                                                     // 21042
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                    // 21043
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                    // 21044
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                // 21045
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                            // 21046
      </form>                                                                                                          // 21047
    </file>                                                                                                            // 21048
    <file name="protractor.js" type="protractor">                                                                      // 21049
      var value = element(by.binding('example.value | date: "yyyy-Www"'));                                             // 21050
      var valid = element(by.binding('myForm.input.$valid'));                                                          // 21051
      var input = element(by.model('example.value'));                                                                  // 21052
                                                                                                                       // 21053
      // currently protractor/webdriver does not support                                                               // 21054
      // sending keys to all known HTML5 input controls                                                                // 21055
      // for various browsers (https://github.com/angular/protractor/issues/562).                                      // 21056
      function setInput(val) {                                                                                         // 21057
        // set the value of the element and force validation.                                                          // 21058
        var scr = "var ipt = document.getElementById('exampleInput'); " +                                              // 21059
        "ipt.value = '" + val + "';" +                                                                                 // 21060
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";      // 21061
        browser.executeScript(scr);                                                                                    // 21062
      }                                                                                                                // 21063
                                                                                                                       // 21064
      it('should initialize to model', function() {                                                                    // 21065
        expect(value.getText()).toContain('2013-W01');                                                                 // 21066
        expect(valid.getText()).toContain('myForm.input.$valid = true');                                               // 21067
      });                                                                                                              // 21068
                                                                                                                       // 21069
      it('should be invalid if empty', function() {                                                                    // 21070
        setInput('');                                                                                                  // 21071
        expect(value.getText()).toEqual('value =');                                                                    // 21072
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 21073
      });                                                                                                              // 21074
                                                                                                                       // 21075
      it('should be invalid if over max', function() {                                                                 // 21076
        setInput('2015-W01');                                                                                          // 21077
        expect(value.getText()).toContain('');                                                                         // 21078
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 21079
      });                                                                                                              // 21080
    </file>                                                                                                            // 21081
    </example>                                                                                                         // 21082
    */                                                                                                                 // 21083
  'week': createDateInputType('week', WEEK_REGEXP, weekParser, 'yyyy-Www'),                                            // 21084
                                                                                                                       // 21085
  /**                                                                                                                  // 21086
   * @ngdoc input                                                                                                      // 21087
   * @name input[month]                                                                                                // 21088
   *                                                                                                                   // 21089
   * @description                                                                                                      // 21090
   * Input with month validation and transformation. In browsers that do not yet support                               // 21091
   * the HTML5 month input, a text element will be used. In that case, the text must be entered in a valid ISO-8601    // 21092
   * month format (yyyy-MM), for example: `2009-01`.                                                                   // 21093
   *                                                                                                                   // 21094
   * The model must always be a Date object, otherwise Angular will throw an error.                                    // 21095
   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.                    // 21096
   * If the model is not set to the first of the month, the next view to model update will set it                      // 21097
   * to the first of the month.                                                                                        // 21098
   *                                                                                                                   // 21099
   * The timezone to be used to read/write the `Date` instance in the model can be defined using                       // 21100
   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.              // 21101
   *                                                                                                                   // 21102
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 21103
   * @param {string=} name Property name of the form under which the control is published.                             // 21104
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.                 // 21105
   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this                     // 21106
   *   attribute (e.g. `min="{{minMonth | date:'yyyy-MM'}}"`). Note that `min` will also add                           // 21107
   *   native HTML5 constraint validation.                                                                             // 21108
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.              // 21109
   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this                     // 21110
   *   attribute (e.g. `max="{{maxMonth | date:'yyyy-MM'}}"`). Note that `max` will also add                           // 21111
   *   native HTML5 constraint validation.                                                                             // 21112
   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string                  // 21113
   *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.                             // 21114
   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string                  // 21115
   *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.                             // 21116
                                                                                                                       // 21117
   * @param {string=} required Sets `required` validation error key if the value is not entered.                       // 21118
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 21119
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 21120
   *    `required` when you want to data-bind to the `required` attribute.                                             // 21121
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 21122
   *    interaction with the input element.                                                                            // 21123
   *                                                                                                                   // 21124
   * @example                                                                                                          // 21125
   <example name="month-input-directive" module="monthExample">                                                        // 21126
   <file name="index.html">                                                                                            // 21127
     <script>                                                                                                          // 21128
      angular.module('monthExample', [])                                                                               // 21129
        .controller('DateController', ['$scope', function($scope) {                                                    // 21130
          $scope.example = {                                                                                           // 21131
            value: new Date(2013, 9, 1)                                                                                // 21132
          };                                                                                                           // 21133
        }]);                                                                                                           // 21134
     </script>                                                                                                         // 21135
     <form name="myForm" ng-controller="DateController as dateCtrl">                                                   // 21136
       <label for="exampleInput">Pick a month in 2013:</label>                                                         // 21137
       <input id="exampleInput" type="month" name="input" ng-model="example.value"                                     // 21138
          placeholder="yyyy-MM" min="2013-01" max="2013-12" required />                                                // 21139
       <div role="alert">                                                                                              // 21140
         <span class="error" ng-show="myForm.input.$error.required">                                                   // 21141
            Required!</span>                                                                                           // 21142
         <span class="error" ng-show="myForm.input.$error.month">                                                      // 21143
            Not a valid month!</span>                                                                                  // 21144
       </div>                                                                                                          // 21145
       <tt>value = {{example.value | date: "yyyy-MM"}}</tt><br/>                                                       // 21146
       <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                     // 21147
       <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                     // 21148
       <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                 // 21149
       <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                             // 21150
     </form>                                                                                                           // 21151
   </file>                                                                                                             // 21152
   <file name="protractor.js" type="protractor">                                                                       // 21153
      var value = element(by.binding('example.value | date: "yyyy-MM"'));                                              // 21154
      var valid = element(by.binding('myForm.input.$valid'));                                                          // 21155
      var input = element(by.model('example.value'));                                                                  // 21156
                                                                                                                       // 21157
      // currently protractor/webdriver does not support                                                               // 21158
      // sending keys to all known HTML5 input controls                                                                // 21159
      // for various browsers (https://github.com/angular/protractor/issues/562).                                      // 21160
      function setInput(val) {                                                                                         // 21161
        // set the value of the element and force validation.                                                          // 21162
        var scr = "var ipt = document.getElementById('exampleInput'); " +                                              // 21163
        "ipt.value = '" + val + "';" +                                                                                 // 21164
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";      // 21165
        browser.executeScript(scr);                                                                                    // 21166
      }                                                                                                                // 21167
                                                                                                                       // 21168
      it('should initialize to model', function() {                                                                    // 21169
        expect(value.getText()).toContain('2013-10');                                                                  // 21170
        expect(valid.getText()).toContain('myForm.input.$valid = true');                                               // 21171
      });                                                                                                              // 21172
                                                                                                                       // 21173
      it('should be invalid if empty', function() {                                                                    // 21174
        setInput('');                                                                                                  // 21175
        expect(value.getText()).toEqual('value =');                                                                    // 21176
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 21177
      });                                                                                                              // 21178
                                                                                                                       // 21179
      it('should be invalid if over max', function() {                                                                 // 21180
        setInput('2015-01');                                                                                           // 21181
        expect(value.getText()).toContain('');                                                                         // 21182
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 21183
      });                                                                                                              // 21184
   </file>                                                                                                             // 21185
   </example>                                                                                                          // 21186
   */                                                                                                                  // 21187
  'month': createDateInputType('month', MONTH_REGEXP,                                                                  // 21188
     createDateParser(MONTH_REGEXP, ['yyyy', 'MM']),                                                                   // 21189
     'yyyy-MM'),                                                                                                       // 21190
                                                                                                                       // 21191
  /**                                                                                                                  // 21192
   * @ngdoc input                                                                                                      // 21193
   * @name input[number]                                                                                               // 21194
   *                                                                                                                   // 21195
   * @description                                                                                                      // 21196
   * Text input with number validation and transformation. Sets the `number` validation                                // 21197
   * error if not a valid number.                                                                                      // 21198
   *                                                                                                                   // 21199
   * <div class="alert alert-warning">                                                                                 // 21200
   * The model must always be of type `number` otherwise Angular will throw an error.                                  // 21201
   * Be aware that a string containing a number is not enough. See the {@link ngModel:numfmt}                          // 21202
   * error docs for more information and an example of how to convert your model if necessary.                         // 21203
   * </div>                                                                                                            // 21204
   *                                                                                                                   // 21205
   * ## Issues with HTML5 constraint validation                                                                        // 21206
   *                                                                                                                   // 21207
   * In browsers that follow the                                                                                       // 21208
   * [HTML5 specification](https://html.spec.whatwg.org/multipage/forms.html#number-state-%28type=number%29),          // 21209
   * `input[number]` does not work as expected with {@link ngModelOptions `ngModelOptions.allowInvalid`}.              // 21210
   * If a non-number is entered in the input, the browser will report the value as an empty string,                    // 21211
   * which means the view / model values in `ngModel` and subsequently the scope value                                 // 21212
   * will also be an empty string.                                                                                     // 21213
   *                                                                                                                   // 21214
   *                                                                                                                   // 21215
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 21216
   * @param {string=} name Property name of the form under which the control is published.                             // 21217
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.                 // 21218
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.              // 21219
   * @param {string=} required Sets `required` validation error key if the value is not entered.                       // 21220
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 21221
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 21222
   *    `required` when you want to data-bind to the `required` attribute.                                             // 21223
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                   // 21224
   *    minlength.                                                                                                     // 21225
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                    // 21226
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of                     // 21227
   *    any length.                                                                                                    // 21228
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string              // 21229
   *    that contains the regular expression body that will be converted to a regular expression                       // 21230
   *    as in the ngPattern directive.                                                                                 // 21231
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match                // 21232
   *    a RegExp found by evaluating the Angular expression given in the attribute value.                              // 21233
   *    If the expression evaluates to a RegExp object, then this is used directly.                                    // 21234
   *    If the expression evaluates to a string, then it will be converted to a RegExp                                 // 21235
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to                        // 21236
   *    `new RegExp('^abc$')`.<br />                                                                                   // 21237
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to                   // 21238
   *    start at the index of the last search's match, thus not taking the whole input value into                      // 21239
   *    account.                                                                                                       // 21240
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 21241
   *    interaction with the input element.                                                                            // 21242
   *                                                                                                                   // 21243
   * @example                                                                                                          // 21244
      <example name="number-input-directive" module="numberExample">                                                   // 21245
        <file name="index.html">                                                                                       // 21246
         <script>                                                                                                      // 21247
           angular.module('numberExample', [])                                                                         // 21248
             .controller('ExampleController', ['$scope', function($scope) {                                            // 21249
               $scope.example = {                                                                                      // 21250
                 value: 12                                                                                             // 21251
               };                                                                                                      // 21252
             }]);                                                                                                      // 21253
         </script>                                                                                                     // 21254
         <form name="myForm" ng-controller="ExampleController">                                                        // 21255
           <label>Number:                                                                                              // 21256
             <input type="number" name="input" ng-model="example.value"                                                // 21257
                    min="0" max="99" required>                                                                         // 21258
          </label>                                                                                                     // 21259
           <div role="alert">                                                                                          // 21260
             <span class="error" ng-show="myForm.input.$error.required">                                               // 21261
               Required!</span>                                                                                        // 21262
             <span class="error" ng-show="myForm.input.$error.number">                                                 // 21263
               Not valid number!</span>                                                                                // 21264
           </div>                                                                                                      // 21265
           <tt>value = {{example.value}}</tt><br/>                                                                     // 21266
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                 // 21267
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                 // 21268
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                             // 21269
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                         // 21270
          </form>                                                                                                      // 21271
        </file>                                                                                                        // 21272
        <file name="protractor.js" type="protractor">                                                                  // 21273
          var value = element(by.binding('example.value'));                                                            // 21274
          var valid = element(by.binding('myForm.input.$valid'));                                                      // 21275
          var input = element(by.model('example.value'));                                                              // 21276
                                                                                                                       // 21277
          it('should initialize to model', function() {                                                                // 21278
            expect(value.getText()).toContain('12');                                                                   // 21279
            expect(valid.getText()).toContain('true');                                                                 // 21280
          });                                                                                                          // 21281
                                                                                                                       // 21282
          it('should be invalid if empty', function() {                                                                // 21283
            input.clear();                                                                                             // 21284
            input.sendKeys('');                                                                                        // 21285
            expect(value.getText()).toEqual('value =');                                                                // 21286
            expect(valid.getText()).toContain('false');                                                                // 21287
          });                                                                                                          // 21288
                                                                                                                       // 21289
          it('should be invalid if over max', function() {                                                             // 21290
            input.clear();                                                                                             // 21291
            input.sendKeys('123');                                                                                     // 21292
            expect(value.getText()).toEqual('value =');                                                                // 21293
            expect(valid.getText()).toContain('false');                                                                // 21294
          });                                                                                                          // 21295
        </file>                                                                                                        // 21296
      </example>                                                                                                       // 21297
   */                                                                                                                  // 21298
  'number': numberInputType,                                                                                           // 21299
                                                                                                                       // 21300
                                                                                                                       // 21301
  /**                                                                                                                  // 21302
   * @ngdoc input                                                                                                      // 21303
   * @name input[url]                                                                                                  // 21304
   *                                                                                                                   // 21305
   * @description                                                                                                      // 21306
   * Text input with URL validation. Sets the `url` validation error key if the content is not a                       // 21307
   * valid URL.                                                                                                        // 21308
   *                                                                                                                   // 21309
   * <div class="alert alert-warning">                                                                                 // 21310
   * **Note:** `input[url]` uses a regex to validate urls that is derived from the regex                               // 21311
   * used in Chromium. If you need stricter validation, you can use `ng-pattern` or modify                             // 21312
   * the built-in validators (see the {@link guide/forms Forms guide})                                                 // 21313
   * </div>                                                                                                            // 21314
   *                                                                                                                   // 21315
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 21316
   * @param {string=} name Property name of the form under which the control is published.                             // 21317
   * @param {string=} required Sets `required` validation error key if the value is not entered.                       // 21318
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 21319
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 21320
   *    `required` when you want to data-bind to the `required` attribute.                                             // 21321
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                   // 21322
   *    minlength.                                                                                                     // 21323
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                    // 21324
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of                     // 21325
   *    any length.                                                                                                    // 21326
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string              // 21327
   *    that contains the regular expression body that will be converted to a regular expression                       // 21328
   *    as in the ngPattern directive.                                                                                 // 21329
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match                // 21330
   *    a RegExp found by evaluating the Angular expression given in the attribute value.                              // 21331
   *    If the expression evaluates to a RegExp object, then this is used directly.                                    // 21332
   *    If the expression evaluates to a string, then it will be converted to a RegExp                                 // 21333
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to                        // 21334
   *    `new RegExp('^abc$')`.<br />                                                                                   // 21335
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to                   // 21336
   *    start at the index of the last search's match, thus not taking the whole input value into                      // 21337
   *    account.                                                                                                       // 21338
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 21339
   *    interaction with the input element.                                                                            // 21340
   *                                                                                                                   // 21341
   * @example                                                                                                          // 21342
      <example name="url-input-directive" module="urlExample">                                                         // 21343
        <file name="index.html">                                                                                       // 21344
         <script>                                                                                                      // 21345
           angular.module('urlExample', [])                                                                            // 21346
             .controller('ExampleController', ['$scope', function($scope) {                                            // 21347
               $scope.url = {                                                                                          // 21348
                 text: 'http://google.com'                                                                             // 21349
               };                                                                                                      // 21350
             }]);                                                                                                      // 21351
         </script>                                                                                                     // 21352
         <form name="myForm" ng-controller="ExampleController">                                                        // 21353
           <label>URL:                                                                                                 // 21354
             <input type="url" name="input" ng-model="url.text" required>                                              // 21355
           <label>                                                                                                     // 21356
           <div role="alert">                                                                                          // 21357
             <span class="error" ng-show="myForm.input.$error.required">                                               // 21358
               Required!</span>                                                                                        // 21359
             <span class="error" ng-show="myForm.input.$error.url">                                                    // 21360
               Not valid url!</span>                                                                                   // 21361
           </div>                                                                                                      // 21362
           <tt>text = {{url.text}}</tt><br/>                                                                           // 21363
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                 // 21364
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                 // 21365
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                             // 21366
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                         // 21367
           <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>                                                   // 21368
          </form>                                                                                                      // 21369
        </file>                                                                                                        // 21370
        <file name="protractor.js" type="protractor">                                                                  // 21371
          var text = element(by.binding('url.text'));                                                                  // 21372
          var valid = element(by.binding('myForm.input.$valid'));                                                      // 21373
          var input = element(by.model('url.text'));                                                                   // 21374
                                                                                                                       // 21375
          it('should initialize to model', function() {                                                                // 21376
            expect(text.getText()).toContain('http://google.com');                                                     // 21377
            expect(valid.getText()).toContain('true');                                                                 // 21378
          });                                                                                                          // 21379
                                                                                                                       // 21380
          it('should be invalid if empty', function() {                                                                // 21381
            input.clear();                                                                                             // 21382
            input.sendKeys('');                                                                                        // 21383
                                                                                                                       // 21384
            expect(text.getText()).toEqual('text =');                                                                  // 21385
            expect(valid.getText()).toContain('false');                                                                // 21386
          });                                                                                                          // 21387
                                                                                                                       // 21388
          it('should be invalid if not url', function() {                                                              // 21389
            input.clear();                                                                                             // 21390
            input.sendKeys('box');                                                                                     // 21391
                                                                                                                       // 21392
            expect(valid.getText()).toContain('false');                                                                // 21393
          });                                                                                                          // 21394
        </file>                                                                                                        // 21395
      </example>                                                                                                       // 21396
   */                                                                                                                  // 21397
  'url': urlInputType,                                                                                                 // 21398
                                                                                                                       // 21399
                                                                                                                       // 21400
  /**                                                                                                                  // 21401
   * @ngdoc input                                                                                                      // 21402
   * @name input[email]                                                                                                // 21403
   *                                                                                                                   // 21404
   * @description                                                                                                      // 21405
   * Text input with email validation. Sets the `email` validation error key if not a valid email                      // 21406
   * address.                                                                                                          // 21407
   *                                                                                                                   // 21408
   * <div class="alert alert-warning">                                                                                 // 21409
   * **Note:** `input[email]` uses a regex to validate email addresses that is derived from the regex                  // 21410
   * used in Chromium. If you need stricter validation (e.g. requiring a top-level domain), you can                    // 21411
   * use `ng-pattern` or modify the built-in validators (see the {@link guide/forms Forms guide})                      // 21412
   * </div>                                                                                                            // 21413
   *                                                                                                                   // 21414
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 21415
   * @param {string=} name Property name of the form under which the control is published.                             // 21416
   * @param {string=} required Sets `required` validation error key if the value is not entered.                       // 21417
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 21418
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 21419
   *    `required` when you want to data-bind to the `required` attribute.                                             // 21420
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                   // 21421
   *    minlength.                                                                                                     // 21422
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                    // 21423
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of                     // 21424
   *    any length.                                                                                                    // 21425
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string              // 21426
   *    that contains the regular expression body that will be converted to a regular expression                       // 21427
   *    as in the ngPattern directive.                                                                                 // 21428
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match                // 21429
   *    a RegExp found by evaluating the Angular expression given in the attribute value.                              // 21430
   *    If the expression evaluates to a RegExp object, then this is used directly.                                    // 21431
   *    If the expression evaluates to a string, then it will be converted to a RegExp                                 // 21432
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to                        // 21433
   *    `new RegExp('^abc$')`.<br />                                                                                   // 21434
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to                   // 21435
   *    start at the index of the last search's match, thus not taking the whole input value into                      // 21436
   *    account.                                                                                                       // 21437
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 21438
   *    interaction with the input element.                                                                            // 21439
   *                                                                                                                   // 21440
   * @example                                                                                                          // 21441
      <example name="email-input-directive" module="emailExample">                                                     // 21442
        <file name="index.html">                                                                                       // 21443
         <script>                                                                                                      // 21444
           angular.module('emailExample', [])                                                                          // 21445
             .controller('ExampleController', ['$scope', function($scope) {                                            // 21446
               $scope.email = {                                                                                        // 21447
                 text: 'me@example.com'                                                                                // 21448
               };                                                                                                      // 21449
             }]);                                                                                                      // 21450
         </script>                                                                                                     // 21451
           <form name="myForm" ng-controller="ExampleController">                                                      // 21452
             <label>Email:                                                                                             // 21453
               <input type="email" name="input" ng-model="email.text" required>                                        // 21454
             </label>                                                                                                  // 21455
             <div role="alert">                                                                                        // 21456
               <span class="error" ng-show="myForm.input.$error.required">                                             // 21457
                 Required!</span>                                                                                      // 21458
               <span class="error" ng-show="myForm.input.$error.email">                                                // 21459
                 Not valid email!</span>                                                                               // 21460
             </div>                                                                                                    // 21461
             <tt>text = {{email.text}}</tt><br/>                                                                       // 21462
             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                               // 21463
             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                               // 21464
             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                           // 21465
             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                       // 21466
             <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>                                             // 21467
           </form>                                                                                                     // 21468
         </file>                                                                                                       // 21469
        <file name="protractor.js" type="protractor">                                                                  // 21470
          var text = element(by.binding('email.text'));                                                                // 21471
          var valid = element(by.binding('myForm.input.$valid'));                                                      // 21472
          var input = element(by.model('email.text'));                                                                 // 21473
                                                                                                                       // 21474
          it('should initialize to model', function() {                                                                // 21475
            expect(text.getText()).toContain('me@example.com');                                                        // 21476
            expect(valid.getText()).toContain('true');                                                                 // 21477
          });                                                                                                          // 21478
                                                                                                                       // 21479
          it('should be invalid if empty', function() {                                                                // 21480
            input.clear();                                                                                             // 21481
            input.sendKeys('');                                                                                        // 21482
            expect(text.getText()).toEqual('text =');                                                                  // 21483
            expect(valid.getText()).toContain('false');                                                                // 21484
          });                                                                                                          // 21485
                                                                                                                       // 21486
          it('should be invalid if not email', function() {                                                            // 21487
            input.clear();                                                                                             // 21488
            input.sendKeys('xxx');                                                                                     // 21489
                                                                                                                       // 21490
            expect(valid.getText()).toContain('false');                                                                // 21491
          });                                                                                                          // 21492
        </file>                                                                                                        // 21493
      </example>                                                                                                       // 21494
   */                                                                                                                  // 21495
  'email': emailInputType,                                                                                             // 21496
                                                                                                                       // 21497
                                                                                                                       // 21498
  /**                                                                                                                  // 21499
   * @ngdoc input                                                                                                      // 21500
   * @name input[radio]                                                                                                // 21501
   *                                                                                                                   // 21502
   * @description                                                                                                      // 21503
   * HTML radio button.                                                                                                // 21504
   *                                                                                                                   // 21505
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 21506
   * @param {string} value The value to which the `ngModel` expression should be set when selected.                    // 21507
   *    Note that `value` only supports `string` values, i.e. the scope model needs to be a string,                    // 21508
   *    too. Use `ngValue` if you need complex models (`number`, `object`, ...).                                       // 21509
   * @param {string=} name Property name of the form under which the control is published.                             // 21510
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 21511
   *    interaction with the input element.                                                                            // 21512
   * @param {string} ngValue Angular expression to which `ngModel` will be be set when the radio                       // 21513
   *    is selected. Should be used instead of the `value` attribute if you need                                       // 21514
   *    a non-string `ngModel` (`boolean`, `array`, ...).                                                              // 21515
   *                                                                                                                   // 21516
   * @example                                                                                                          // 21517
      <example name="radio-input-directive" module="radioExample">                                                     // 21518
        <file name="index.html">                                                                                       // 21519
         <script>                                                                                                      // 21520
           angular.module('radioExample', [])                                                                          // 21521
             .controller('ExampleController', ['$scope', function($scope) {                                            // 21522
               $scope.color = {                                                                                        // 21523
                 name: 'blue'                                                                                          // 21524
               };                                                                                                      // 21525
               $scope.specialValue = {                                                                                 // 21526
                 "id": "12345",                                                                                        // 21527
                 "value": "green"                                                                                      // 21528
               };                                                                                                      // 21529
             }]);                                                                                                      // 21530
         </script>                                                                                                     // 21531
         <form name="myForm" ng-controller="ExampleController">                                                        // 21532
           <label>                                                                                                     // 21533
             <input type="radio" ng-model="color.name" value="red">                                                    // 21534
             Red                                                                                                       // 21535
           </label><br/>                                                                                               // 21536
           <label>                                                                                                     // 21537
             <input type="radio" ng-model="color.name" ng-value="specialValue">                                        // 21538
             Green                                                                                                     // 21539
           </label><br/>                                                                                               // 21540
           <label>                                                                                                     // 21541
             <input type="radio" ng-model="color.name" value="blue">                                                   // 21542
             Blue                                                                                                      // 21543
           </label><br/>                                                                                               // 21544
           <tt>color = {{color.name | json}}</tt><br/>                                                                 // 21545
          </form>                                                                                                      // 21546
          Note that `ng-value="specialValue"` sets radio item's value to be the value of `$scope.specialValue`.        // 21547
        </file>                                                                                                        // 21548
        <file name="protractor.js" type="protractor">                                                                  // 21549
          it('should change state', function() {                                                                       // 21550
            var color = element(by.binding('color.name'));                                                             // 21551
                                                                                                                       // 21552
            expect(color.getText()).toContain('blue');                                                                 // 21553
                                                                                                                       // 21554
            element.all(by.model('color.name')).get(0).click();                                                        // 21555
                                                                                                                       // 21556
            expect(color.getText()).toContain('red');                                                                  // 21557
          });                                                                                                          // 21558
        </file>                                                                                                        // 21559
      </example>                                                                                                       // 21560
   */                                                                                                                  // 21561
  'radio': radioInputType,                                                                                             // 21562
                                                                                                                       // 21563
                                                                                                                       // 21564
  /**                                                                                                                  // 21565
   * @ngdoc input                                                                                                      // 21566
   * @name input[checkbox]                                                                                             // 21567
   *                                                                                                                   // 21568
   * @description                                                                                                      // 21569
   * HTML checkbox.                                                                                                    // 21570
   *                                                                                                                   // 21571
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 21572
   * @param {string=} name Property name of the form under which the control is published.                             // 21573
   * @param {expression=} ngTrueValue The value to which the expression should be set when selected.                   // 21574
   * @param {expression=} ngFalseValue The value to which the expression should be set when not selected.              // 21575
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 21576
   *    interaction with the input element.                                                                            // 21577
   *                                                                                                                   // 21578
   * @example                                                                                                          // 21579
      <example name="checkbox-input-directive" module="checkboxExample">                                               // 21580
        <file name="index.html">                                                                                       // 21581
         <script>                                                                                                      // 21582
           angular.module('checkboxExample', [])                                                                       // 21583
             .controller('ExampleController', ['$scope', function($scope) {                                            // 21584
               $scope.checkboxModel = {                                                                                // 21585
                value1 : true,                                                                                         // 21586
                value2 : 'YES'                                                                                         // 21587
              };                                                                                                       // 21588
             }]);                                                                                                      // 21589
         </script>                                                                                                     // 21590
         <form name="myForm" ng-controller="ExampleController">                                                        // 21591
           <label>Value1:                                                                                              // 21592
             <input type="checkbox" ng-model="checkboxModel.value1">                                                   // 21593
           </label><br/>                                                                                               // 21594
           <label>Value2:                                                                                              // 21595
             <input type="checkbox" ng-model="checkboxModel.value2"                                                    // 21596
                    ng-true-value="'YES'" ng-false-value="'NO'">                                                       // 21597
            </label><br/>                                                                                              // 21598
           <tt>value1 = {{checkboxModel.value1}}</tt><br/>                                                             // 21599
           <tt>value2 = {{checkboxModel.value2}}</tt><br/>                                                             // 21600
          </form>                                                                                                      // 21601
        </file>                                                                                                        // 21602
        <file name="protractor.js" type="protractor">                                                                  // 21603
          it('should change state', function() {                                                                       // 21604
            var value1 = element(by.binding('checkboxModel.value1'));                                                  // 21605
            var value2 = element(by.binding('checkboxModel.value2'));                                                  // 21606
                                                                                                                       // 21607
            expect(value1.getText()).toContain('true');                                                                // 21608
            expect(value2.getText()).toContain('YES');                                                                 // 21609
                                                                                                                       // 21610
            element(by.model('checkboxModel.value1')).click();                                                         // 21611
            element(by.model('checkboxModel.value2')).click();                                                         // 21612
                                                                                                                       // 21613
            expect(value1.getText()).toContain('false');                                                               // 21614
            expect(value2.getText()).toContain('NO');                                                                  // 21615
          });                                                                                                          // 21616
        </file>                                                                                                        // 21617
      </example>                                                                                                       // 21618
   */                                                                                                                  // 21619
  'checkbox': checkboxInputType,                                                                                       // 21620
                                                                                                                       // 21621
  'hidden': noop,                                                                                                      // 21622
  'button': noop,                                                                                                      // 21623
  'submit': noop,                                                                                                      // 21624
  'reset': noop,                                                                                                       // 21625
  'file': noop                                                                                                         // 21626
};                                                                                                                     // 21627
                                                                                                                       // 21628
function stringBasedInputType(ctrl) {                                                                                  // 21629
  ctrl.$formatters.push(function(value) {                                                                              // 21630
    return ctrl.$isEmpty(value) ? value : value.toString();                                                            // 21631
  });                                                                                                                  // 21632
}                                                                                                                      // 21633
                                                                                                                       // 21634
function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {                                               // 21635
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);                                                       // 21636
  stringBasedInputType(ctrl);                                                                                          // 21637
}                                                                                                                      // 21638
                                                                                                                       // 21639
function baseInputType(scope, element, attr, ctrl, $sniffer, $browser) {                                               // 21640
  var type = lowercase(element[0].type);                                                                               // 21641
                                                                                                                       // 21642
  // In composition mode, users are still inputing intermediate text buffer,                                           // 21643
  // hold the listener until composition is done.                                                                      // 21644
  // More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent                  // 21645
  if (!$sniffer.android) {                                                                                             // 21646
    var composing = false;                                                                                             // 21647
                                                                                                                       // 21648
    element.on('compositionstart', function(data) {                                                                    // 21649
      composing = true;                                                                                                // 21650
    });                                                                                                                // 21651
                                                                                                                       // 21652
    element.on('compositionend', function() {                                                                          // 21653
      composing = false;                                                                                               // 21654
      listener();                                                                                                      // 21655
    });                                                                                                                // 21656
  }                                                                                                                    // 21657
                                                                                                                       // 21658
  var listener = function(ev) {                                                                                        // 21659
    if (timeout) {                                                                                                     // 21660
      $browser.defer.cancel(timeout);                                                                                  // 21661
      timeout = null;                                                                                                  // 21662
    }                                                                                                                  // 21663
    if (composing) return;                                                                                             // 21664
    var value = element.val(),                                                                                         // 21665
        event = ev && ev.type;                                                                                         // 21666
                                                                                                                       // 21667
    // By default we will trim the value                                                                               // 21668
    // If the attribute ng-trim exists we will avoid trimming                                                          // 21669
    // If input type is 'password', the value is never trimmed                                                         // 21670
    if (type !== 'password' && (!attr.ngTrim || attr.ngTrim !== 'false')) {                                            // 21671
      value = trim(value);                                                                                             // 21672
    }                                                                                                                  // 21673
                                                                                                                       // 21674
    // If a control is suffering from bad input (due to native validators), browsers discard its                       // 21675
    // value, so it may be necessary to revalidate (by calling $setViewValue again) even if the                        // 21676
    // control's value is the same empty value twice in a row.                                                         // 21677
    if (ctrl.$viewValue !== value || (value === '' && ctrl.$$hasNativeValidators)) {                                   // 21678
      ctrl.$setViewValue(value, event);                                                                                // 21679
    }                                                                                                                  // 21680
  };                                                                                                                   // 21681
                                                                                                                       // 21682
  // if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the                     // 21683
  // input event on backspace, delete or cut                                                                           // 21684
  if ($sniffer.hasEvent('input')) {                                                                                    // 21685
    element.on('input', listener);                                                                                     // 21686
  } else {                                                                                                             // 21687
    var timeout;                                                                                                       // 21688
                                                                                                                       // 21689
    var deferListener = function(ev, input, origValue) {                                                               // 21690
      if (!timeout) {                                                                                                  // 21691
        timeout = $browser.defer(function() {                                                                          // 21692
          timeout = null;                                                                                              // 21693
          if (!input || input.value !== origValue) {                                                                   // 21694
            listener(ev);                                                                                              // 21695
          }                                                                                                            // 21696
        });                                                                                                            // 21697
      }                                                                                                                // 21698
    };                                                                                                                 // 21699
                                                                                                                       // 21700
    element.on('keydown', function(event) {                                                                            // 21701
      var key = event.keyCode;                                                                                         // 21702
                                                                                                                       // 21703
      // ignore                                                                                                        // 21704
      //    command            modifiers                   arrows                                                      // 21705
      if (key === 91 || (15 < key && key < 19) || (37 <= key && key <= 40)) return;                                    // 21706
                                                                                                                       // 21707
      deferListener(event, this, this.value);                                                                          // 21708
    });                                                                                                                // 21709
                                                                                                                       // 21710
    // if user modifies input value using context menu in IE, we need "paste" and "cut" events to catch it             // 21711
    if ($sniffer.hasEvent('paste')) {                                                                                  // 21712
      element.on('paste cut', deferListener);                                                                          // 21713
    }                                                                                                                  // 21714
  }                                                                                                                    // 21715
                                                                                                                       // 21716
  // if user paste into input using mouse on older browser                                                             // 21717
  // or form autocomplete on newer browser, we need "change" event to catch it                                         // 21718
  element.on('change', listener);                                                                                      // 21719
                                                                                                                       // 21720
  ctrl.$render = function() {                                                                                          // 21721
    // Workaround for Firefox validation #12102.                                                                       // 21722
    var value = ctrl.$isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue;                                                 // 21723
    if (element.val() !== value) {                                                                                     // 21724
      element.val(value);                                                                                              // 21725
    }                                                                                                                  // 21726
  };                                                                                                                   // 21727
}                                                                                                                      // 21728
                                                                                                                       // 21729
function weekParser(isoWeek, existingDate) {                                                                           // 21730
  if (isDate(isoWeek)) {                                                                                               // 21731
    return isoWeek;                                                                                                    // 21732
  }                                                                                                                    // 21733
                                                                                                                       // 21734
  if (isString(isoWeek)) {                                                                                             // 21735
    WEEK_REGEXP.lastIndex = 0;                                                                                         // 21736
    var parts = WEEK_REGEXP.exec(isoWeek);                                                                             // 21737
    if (parts) {                                                                                                       // 21738
      var year = +parts[1],                                                                                            // 21739
          week = +parts[2],                                                                                            // 21740
          hours = 0,                                                                                                   // 21741
          minutes = 0,                                                                                                 // 21742
          seconds = 0,                                                                                                 // 21743
          milliseconds = 0,                                                                                            // 21744
          firstThurs = getFirstThursdayOfYear(year),                                                                   // 21745
          addDays = (week - 1) * 7;                                                                                    // 21746
                                                                                                                       // 21747
      if (existingDate) {                                                                                              // 21748
        hours = existingDate.getHours();                                                                               // 21749
        minutes = existingDate.getMinutes();                                                                           // 21750
        seconds = existingDate.getSeconds();                                                                           // 21751
        milliseconds = existingDate.getMilliseconds();                                                                 // 21752
      }                                                                                                                // 21753
                                                                                                                       // 21754
      return new Date(year, 0, firstThurs.getDate() + addDays, hours, minutes, seconds, milliseconds);                 // 21755
    }                                                                                                                  // 21756
  }                                                                                                                    // 21757
                                                                                                                       // 21758
  return NaN;                                                                                                          // 21759
}                                                                                                                      // 21760
                                                                                                                       // 21761
function createDateParser(regexp, mapping) {                                                                           // 21762
  return function(iso, date) {                                                                                         // 21763
    var parts, map;                                                                                                    // 21764
                                                                                                                       // 21765
    if (isDate(iso)) {                                                                                                 // 21766
      return iso;                                                                                                      // 21767
    }                                                                                                                  // 21768
                                                                                                                       // 21769
    if (isString(iso)) {                                                                                               // 21770
      // When a date is JSON'ified to wraps itself inside of an extra                                                  // 21771
      // set of double quotes. This makes the date parsing code unable                                                 // 21772
      // to match the date string and parse it as a date.                                                              // 21773
      if (iso.charAt(0) == '"' && iso.charAt(iso.length - 1) == '"') {                                                 // 21774
        iso = iso.substring(1, iso.length - 1);                                                                        // 21775
      }                                                                                                                // 21776
      if (ISO_DATE_REGEXP.test(iso)) {                                                                                 // 21777
        return new Date(iso);                                                                                          // 21778
      }                                                                                                                // 21779
      regexp.lastIndex = 0;                                                                                            // 21780
      parts = regexp.exec(iso);                                                                                        // 21781
                                                                                                                       // 21782
      if (parts) {                                                                                                     // 21783
        parts.shift();                                                                                                 // 21784
        if (date) {                                                                                                    // 21785
          map = {                                                                                                      // 21786
            yyyy: date.getFullYear(),                                                                                  // 21787
            MM: date.getMonth() + 1,                                                                                   // 21788
            dd: date.getDate(),                                                                                        // 21789
            HH: date.getHours(),                                                                                       // 21790
            mm: date.getMinutes(),                                                                                     // 21791
            ss: date.getSeconds(),                                                                                     // 21792
            sss: date.getMilliseconds() / 1000                                                                         // 21793
          };                                                                                                           // 21794
        } else {                                                                                                       // 21795
          map = { yyyy: 1970, MM: 1, dd: 1, HH: 0, mm: 0, ss: 0, sss: 0 };                                             // 21796
        }                                                                                                              // 21797
                                                                                                                       // 21798
        forEach(parts, function(part, index) {                                                                         // 21799
          if (index < mapping.length) {                                                                                // 21800
            map[mapping[index]] = +part;                                                                               // 21801
          }                                                                                                            // 21802
        });                                                                                                            // 21803
        return new Date(map.yyyy, map.MM - 1, map.dd, map.HH, map.mm, map.ss || 0, map.sss * 1000 || 0);               // 21804
      }                                                                                                                // 21805
    }                                                                                                                  // 21806
                                                                                                                       // 21807
    return NaN;                                                                                                        // 21808
  };                                                                                                                   // 21809
}                                                                                                                      // 21810
                                                                                                                       // 21811
function createDateInputType(type, regexp, parseDate, format) {                                                        // 21812
  return function dynamicDateInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter) {                      // 21813
    badInputChecker(scope, element, attr, ctrl);                                                                       // 21814
    baseInputType(scope, element, attr, ctrl, $sniffer, $browser);                                                     // 21815
    var timezone = ctrl && ctrl.$options && ctrl.$options.timezone;                                                    // 21816
    var previousDate;                                                                                                  // 21817
                                                                                                                       // 21818
    ctrl.$$parserName = type;                                                                                          // 21819
    ctrl.$parsers.push(function(value) {                                                                               // 21820
      if (ctrl.$isEmpty(value)) return null;                                                                           // 21821
      if (regexp.test(value)) {                                                                                        // 21822
        // Note: We cannot read ctrl.$modelValue, as there might be a different                                        // 21823
        // parser/formatter in the processing chain so that the model                                                  // 21824
        // contains some different data format!                                                                        // 21825
        var parsedDate = parseDate(value, previousDate);                                                               // 21826
        if (timezone) {                                                                                                // 21827
          parsedDate = convertTimezoneToLocal(parsedDate, timezone);                                                   // 21828
        }                                                                                                              // 21829
        return parsedDate;                                                                                             // 21830
      }                                                                                                                // 21831
      return undefined;                                                                                                // 21832
    });                                                                                                                // 21833
                                                                                                                       // 21834
    ctrl.$formatters.push(function(value) {                                                                            // 21835
      if (value && !isDate(value)) {                                                                                   // 21836
        throw ngModelMinErr('datefmt', 'Expected `{0}` to be a date', value);                                          // 21837
      }                                                                                                                // 21838
      if (isValidDate(value)) {                                                                                        // 21839
        previousDate = value;                                                                                          // 21840
        if (previousDate && timezone) {                                                                                // 21841
          previousDate = convertTimezoneToLocal(previousDate, timezone, true);                                         // 21842
        }                                                                                                              // 21843
        return $filter('date')(value, format, timezone);                                                               // 21844
      } else {                                                                                                         // 21845
        previousDate = null;                                                                                           // 21846
        return '';                                                                                                     // 21847
      }                                                                                                                // 21848
    });                                                                                                                // 21849
                                                                                                                       // 21850
    if (isDefined(attr.min) || attr.ngMin) {                                                                           // 21851
      var minVal;                                                                                                      // 21852
      ctrl.$validators.min = function(value) {                                                                         // 21853
        return !isValidDate(value) || isUndefined(minVal) || parseDate(value) >= minVal;                               // 21854
      };                                                                                                               // 21855
      attr.$observe('min', function(val) {                                                                             // 21856
        minVal = parseObservedDateValue(val);                                                                          // 21857
        ctrl.$validate();                                                                                              // 21858
      });                                                                                                              // 21859
    }                                                                                                                  // 21860
                                                                                                                       // 21861
    if (isDefined(attr.max) || attr.ngMax) {                                                                           // 21862
      var maxVal;                                                                                                      // 21863
      ctrl.$validators.max = function(value) {                                                                         // 21864
        return !isValidDate(value) || isUndefined(maxVal) || parseDate(value) <= maxVal;                               // 21865
      };                                                                                                               // 21866
      attr.$observe('max', function(val) {                                                                             // 21867
        maxVal = parseObservedDateValue(val);                                                                          // 21868
        ctrl.$validate();                                                                                              // 21869
      });                                                                                                              // 21870
    }                                                                                                                  // 21871
                                                                                                                       // 21872
    function isValidDate(value) {                                                                                      // 21873
      // Invalid Date: getTime() returns NaN                                                                           // 21874
      return value && !(value.getTime && value.getTime() !== value.getTime());                                         // 21875
    }                                                                                                                  // 21876
                                                                                                                       // 21877
    function parseObservedDateValue(val) {                                                                             // 21878
      return isDefined(val) && !isDate(val) ? parseDate(val) || undefined : val;                                       // 21879
    }                                                                                                                  // 21880
  };                                                                                                                   // 21881
}                                                                                                                      // 21882
                                                                                                                       // 21883
function badInputChecker(scope, element, attr, ctrl) {                                                                 // 21884
  var node = element[0];                                                                                               // 21885
  var nativeValidation = ctrl.$$hasNativeValidators = isObject(node.validity);                                         // 21886
  if (nativeValidation) {                                                                                              // 21887
    ctrl.$parsers.push(function(value) {                                                                               // 21888
      var validity = element.prop(VALIDITY_STATE_PROPERTY) || {};                                                      // 21889
      // Detect bug in FF35 for input[email] (https://bugzilla.mozilla.org/show_bug.cgi?id=1064430):                   // 21890
      // - also sets validity.badInput (should only be validity.typeMismatch).                                         // 21891
      // - see http://www.whatwg.org/specs/web-apps/current-work/multipage/forms.html#e-mail-state-(type=email)        // 21892
      // - can ignore this case as we can still read out the erroneous email...                                        // 21893
      return validity.badInput && !validity.typeMismatch ? undefined : value;                                          // 21894
    });                                                                                                                // 21895
  }                                                                                                                    // 21896
}                                                                                                                      // 21897
                                                                                                                       // 21898
function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {                                             // 21899
  badInputChecker(scope, element, attr, ctrl);                                                                         // 21900
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);                                                       // 21901
                                                                                                                       // 21902
  ctrl.$$parserName = 'number';                                                                                        // 21903
  ctrl.$parsers.push(function(value) {                                                                                 // 21904
    if (ctrl.$isEmpty(value))      return null;                                                                        // 21905
    if (NUMBER_REGEXP.test(value)) return parseFloat(value);                                                           // 21906
    return undefined;                                                                                                  // 21907
  });                                                                                                                  // 21908
                                                                                                                       // 21909
  ctrl.$formatters.push(function(value) {                                                                              // 21910
    if (!ctrl.$isEmpty(value)) {                                                                                       // 21911
      if (!isNumber(value)) {                                                                                          // 21912
        throw ngModelMinErr('numfmt', 'Expected `{0}` to be a number', value);                                         // 21913
      }                                                                                                                // 21914
      value = value.toString();                                                                                        // 21915
    }                                                                                                                  // 21916
    return value;                                                                                                      // 21917
  });                                                                                                                  // 21918
                                                                                                                       // 21919
  if (isDefined(attr.min) || attr.ngMin) {                                                                             // 21920
    var minVal;                                                                                                        // 21921
    ctrl.$validators.min = function(value) {                                                                           // 21922
      return ctrl.$isEmpty(value) || isUndefined(minVal) || value >= minVal;                                           // 21923
    };                                                                                                                 // 21924
                                                                                                                       // 21925
    attr.$observe('min', function(val) {                                                                               // 21926
      if (isDefined(val) && !isNumber(val)) {                                                                          // 21927
        val = parseFloat(val, 10);                                                                                     // 21928
      }                                                                                                                // 21929
      minVal = isNumber(val) && !isNaN(val) ? val : undefined;                                                         // 21930
      // TODO(matsko): implement validateLater to reduce number of validations                                         // 21931
      ctrl.$validate();                                                                                                // 21932
    });                                                                                                                // 21933
  }                                                                                                                    // 21934
                                                                                                                       // 21935
  if (isDefined(attr.max) || attr.ngMax) {                                                                             // 21936
    var maxVal;                                                                                                        // 21937
    ctrl.$validators.max = function(value) {                                                                           // 21938
      return ctrl.$isEmpty(value) || isUndefined(maxVal) || value <= maxVal;                                           // 21939
    };                                                                                                                 // 21940
                                                                                                                       // 21941
    attr.$observe('max', function(val) {                                                                               // 21942
      if (isDefined(val) && !isNumber(val)) {                                                                          // 21943
        val = parseFloat(val, 10);                                                                                     // 21944
      }                                                                                                                // 21945
      maxVal = isNumber(val) && !isNaN(val) ? val : undefined;                                                         // 21946
      // TODO(matsko): implement validateLater to reduce number of validations                                         // 21947
      ctrl.$validate();                                                                                                // 21948
    });                                                                                                                // 21949
  }                                                                                                                    // 21950
}                                                                                                                      // 21951
                                                                                                                       // 21952
function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {                                                // 21953
  // Note: no badInputChecker here by purpose as `url` is only a validation                                            // 21954
  // in browsers, i.e. we can always read out input.value even if it is not valid!                                     // 21955
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);                                                       // 21956
  stringBasedInputType(ctrl);                                                                                          // 21957
                                                                                                                       // 21958
  ctrl.$$parserName = 'url';                                                                                           // 21959
  ctrl.$validators.url = function(modelValue, viewValue) {                                                             // 21960
    var value = modelValue || viewValue;                                                                               // 21961
    return ctrl.$isEmpty(value) || URL_REGEXP.test(value);                                                             // 21962
  };                                                                                                                   // 21963
}                                                                                                                      // 21964
                                                                                                                       // 21965
function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {                                              // 21966
  // Note: no badInputChecker here by purpose as `url` is only a validation                                            // 21967
  // in browsers, i.e. we can always read out input.value even if it is not valid!                                     // 21968
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);                                                       // 21969
  stringBasedInputType(ctrl);                                                                                          // 21970
                                                                                                                       // 21971
  ctrl.$$parserName = 'email';                                                                                         // 21972
  ctrl.$validators.email = function(modelValue, viewValue) {                                                           // 21973
    var value = modelValue || viewValue;                                                                               // 21974
    return ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value);                                                           // 21975
  };                                                                                                                   // 21976
}                                                                                                                      // 21977
                                                                                                                       // 21978
function radioInputType(scope, element, attr, ctrl) {                                                                  // 21979
  // make the name unique, if not defined                                                                              // 21980
  if (isUndefined(attr.name)) {                                                                                        // 21981
    element.attr('name', nextUid());                                                                                   // 21982
  }                                                                                                                    // 21983
                                                                                                                       // 21984
  var listener = function(ev) {                                                                                        // 21985
    if (element[0].checked) {                                                                                          // 21986
      ctrl.$setViewValue(attr.value, ev && ev.type);                                                                   // 21987
    }                                                                                                                  // 21988
  };                                                                                                                   // 21989
                                                                                                                       // 21990
  element.on('click', listener);                                                                                       // 21991
                                                                                                                       // 21992
  ctrl.$render = function() {                                                                                          // 21993
    var value = attr.value;                                                                                            // 21994
    element[0].checked = (value == ctrl.$viewValue);                                                                   // 21995
  };                                                                                                                   // 21996
                                                                                                                       // 21997
  attr.$observe('value', ctrl.$render);                                                                                // 21998
}                                                                                                                      // 21999
                                                                                                                       // 22000
function parseConstantExpr($parse, context, name, expression, fallback) {                                              // 22001
  var parseFn;                                                                                                         // 22002
  if (isDefined(expression)) {                                                                                         // 22003
    parseFn = $parse(expression);                                                                                      // 22004
    if (!parseFn.constant) {                                                                                           // 22005
      throw ngModelMinErr('constexpr', 'Expected constant expression for `{0}`, but saw ' +                            // 22006
                                   '`{1}`.', name, expression);                                                        // 22007
    }                                                                                                                  // 22008
    return parseFn(context);                                                                                           // 22009
  }                                                                                                                    // 22010
  return fallback;                                                                                                     // 22011
}                                                                                                                      // 22012
                                                                                                                       // 22013
function checkboxInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter, $parse) {                          // 22014
  var trueValue = parseConstantExpr($parse, scope, 'ngTrueValue', attr.ngTrueValue, true);                             // 22015
  var falseValue = parseConstantExpr($parse, scope, 'ngFalseValue', attr.ngFalseValue, false);                         // 22016
                                                                                                                       // 22017
  var listener = function(ev) {                                                                                        // 22018
    ctrl.$setViewValue(element[0].checked, ev && ev.type);                                                             // 22019
  };                                                                                                                   // 22020
                                                                                                                       // 22021
  element.on('click', listener);                                                                                       // 22022
                                                                                                                       // 22023
  ctrl.$render = function() {                                                                                          // 22024
    element[0].checked = ctrl.$viewValue;                                                                              // 22025
  };                                                                                                                   // 22026
                                                                                                                       // 22027
  // Override the standard `$isEmpty` because the $viewValue of an empty checkbox is always set to `false`             // 22028
  // This is because of the parser below, which compares the `$modelValue` with `trueValue` to convert                 // 22029
  // it to a boolean.                                                                                                  // 22030
  ctrl.$isEmpty = function(value) {                                                                                    // 22031
    return value === false;                                                                                            // 22032
  };                                                                                                                   // 22033
                                                                                                                       // 22034
  ctrl.$formatters.push(function(value) {                                                                              // 22035
    return equals(value, trueValue);                                                                                   // 22036
  });                                                                                                                  // 22037
                                                                                                                       // 22038
  ctrl.$parsers.push(function(value) {                                                                                 // 22039
    return value ? trueValue : falseValue;                                                                             // 22040
  });                                                                                                                  // 22041
}                                                                                                                      // 22042
                                                                                                                       // 22043
                                                                                                                       // 22044
/**                                                                                                                    // 22045
 * @ngdoc directive                                                                                                    // 22046
 * @name textarea                                                                                                      // 22047
 * @restrict E                                                                                                         // 22048
 *                                                                                                                     // 22049
 * @description                                                                                                        // 22050
 * HTML textarea element control with angular data-binding. The data-binding and validation                            // 22051
 * properties of this element are exactly the same as those of the                                                     // 22052
 * {@link ng.directive:input input element}.                                                                           // 22053
 *                                                                                                                     // 22054
 * @param {string} ngModel Assignable angular expression to data-bind to.                                              // 22055
 * @param {string=} name Property name of the form under which the control is published.                               // 22056
 * @param {string=} required Sets `required` validation error key if the value is not entered.                         // 22057
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                       // 22058
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                        // 22059
 *    `required` when you want to data-bind to the `required` attribute.                                               // 22060
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                     // 22061
 *    minlength.                                                                                                       // 22062
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                      // 22063
 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any                   // 22064
 *    length.                                                                                                          // 22065
 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match                  // 22066
 *    a RegExp found by evaluating the Angular expression given in the attribute value.                                // 22067
 *    If the expression evaluates to a RegExp object, then this is used directly.                                      // 22068
 *    If the expression evaluates to a string, then it will be converted to a RegExp                                   // 22069
 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to                          // 22070
 *    `new RegExp('^abc$')`.<br />                                                                                     // 22071
 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to                     // 22072
 *    start at the index of the last search's match, thus not taking the whole input value into                        // 22073
 *    account.                                                                                                         // 22074
 * @param {string=} ngChange Angular expression to be executed when input changes due to user                          // 22075
 *    interaction with the input element.                                                                              // 22076
 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.                      // 22077
 */                                                                                                                    // 22078
                                                                                                                       // 22079
                                                                                                                       // 22080
/**                                                                                                                    // 22081
 * @ngdoc directive                                                                                                    // 22082
 * @name input                                                                                                         // 22083
 * @restrict E                                                                                                         // 22084
 *                                                                                                                     // 22085
 * @description                                                                                                        // 22086
 * HTML input element control. When used together with {@link ngModel `ngModel`}, it provides data-binding,            // 22087
 * input state control, and validation.                                                                                // 22088
 * Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.             // 22089
 *                                                                                                                     // 22090
 * <div class="alert alert-warning">                                                                                   // 22091
 * **Note:** Not every feature offered is available for all input types.                                               // 22092
 * Specifically, data binding and event handling via `ng-model` is unsupported for `input[file]`.                      // 22093
 * </div>                                                                                                              // 22094
 *                                                                                                                     // 22095
 * @param {string} ngModel Assignable angular expression to data-bind to.                                              // 22096
 * @param {string=} name Property name of the form under which the control is published.                               // 22097
 * @param {string=} required Sets `required` validation error key if the value is not entered.                         // 22098
 * @param {boolean=} ngRequired Sets `required` attribute if set to true                                               // 22099
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                     // 22100
 *    minlength.                                                                                                       // 22101
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                      // 22102
 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any                   // 22103
 *    length.                                                                                                          // 22104
 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match                  // 22105
 *    a RegExp found by evaluating the Angular expression given in the attribute value.                                // 22106
 *    If the expression evaluates to a RegExp object, then this is used directly.                                      // 22107
 *    If the expression evaluates to a string, then it will be converted to a RegExp                                   // 22108
 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to                          // 22109
 *    `new RegExp('^abc$')`.<br />                                                                                     // 22110
 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to                     // 22111
 *    start at the index of the last search's match, thus not taking the whole input value into                        // 22112
 *    account.                                                                                                         // 22113
 * @param {string=} ngChange Angular expression to be executed when input changes due to user                          // 22114
 *    interaction with the input element.                                                                              // 22115
 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.                      // 22116
 *    This parameter is ignored for input[type=password] controls, which will never trim the                           // 22117
 *    input.                                                                                                           // 22118
 *                                                                                                                     // 22119
 * @example                                                                                                            // 22120
    <example name="input-directive" module="inputExample">                                                             // 22121
      <file name="index.html">                                                                                         // 22122
       <script>                                                                                                        // 22123
          angular.module('inputExample', [])                                                                           // 22124
            .controller('ExampleController', ['$scope', function($scope) {                                             // 22125
              $scope.user = {name: 'guest', last: 'visitor'};                                                          // 22126
            }]);                                                                                                       // 22127
       </script>                                                                                                       // 22128
       <div ng-controller="ExampleController">                                                                         // 22129
         <form name="myForm">                                                                                          // 22130
           <label>                                                                                                     // 22131
              User name:                                                                                               // 22132
              <input type="text" name="userName" ng-model="user.name" required>                                        // 22133
           </label>                                                                                                    // 22134
           <div role="alert">                                                                                          // 22135
             <span class="error" ng-show="myForm.userName.$error.required">                                            // 22136
              Required!</span>                                                                                         // 22137
           </div>                                                                                                      // 22138
           <label>                                                                                                     // 22139
              Last name:                                                                                               // 22140
              <input type="text" name="lastName" ng-model="user.last"                                                  // 22141
              ng-minlength="3" ng-maxlength="10">                                                                      // 22142
           </label>                                                                                                    // 22143
           <div role="alert">                                                                                          // 22144
             <span class="error" ng-show="myForm.lastName.$error.minlength">                                           // 22145
               Too short!</span>                                                                                       // 22146
             <span class="error" ng-show="myForm.lastName.$error.maxlength">                                           // 22147
               Too long!</span>                                                                                        // 22148
           </div>                                                                                                      // 22149
         </form>                                                                                                       // 22150
         <hr>                                                                                                          // 22151
         <tt>user = {{user}}</tt><br/>                                                                                 // 22152
         <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br/>                                             // 22153
         <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br/>                                             // 22154
         <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br/>                                             // 22155
         <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br/>                                             // 22156
         <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                               // 22157
         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                           // 22158
         <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br/>                                         // 22159
         <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br/>                                         // 22160
       </div>                                                                                                          // 22161
      </file>                                                                                                          // 22162
      <file name="protractor.js" type="protractor">                                                                    // 22163
        var user = element(by.exactBinding('user'));                                                                   // 22164
        var userNameValid = element(by.binding('myForm.userName.$valid'));                                             // 22165
        var lastNameValid = element(by.binding('myForm.lastName.$valid'));                                             // 22166
        var lastNameError = element(by.binding('myForm.lastName.$error'));                                             // 22167
        var formValid = element(by.binding('myForm.$valid'));                                                          // 22168
        var userNameInput = element(by.model('user.name'));                                                            // 22169
        var userLastInput = element(by.model('user.last'));                                                            // 22170
                                                                                                                       // 22171
        it('should initialize to model', function() {                                                                  // 22172
          expect(user.getText()).toContain('{"name":"guest","last":"visitor"}');                                       // 22173
          expect(userNameValid.getText()).toContain('true');                                                           // 22174
          expect(formValid.getText()).toContain('true');                                                               // 22175
        });                                                                                                            // 22176
                                                                                                                       // 22177
        it('should be invalid if empty when required', function() {                                                    // 22178
          userNameInput.clear();                                                                                       // 22179
          userNameInput.sendKeys('');                                                                                  // 22180
                                                                                                                       // 22181
          expect(user.getText()).toContain('{"last":"visitor"}');                                                      // 22182
          expect(userNameValid.getText()).toContain('false');                                                          // 22183
          expect(formValid.getText()).toContain('false');                                                              // 22184
        });                                                                                                            // 22185
                                                                                                                       // 22186
        it('should be valid if empty when min length is set', function() {                                             // 22187
          userLastInput.clear();                                                                                       // 22188
          userLastInput.sendKeys('');                                                                                  // 22189
                                                                                                                       // 22190
          expect(user.getText()).toContain('{"name":"guest","last":""}');                                              // 22191
          expect(lastNameValid.getText()).toContain('true');                                                           // 22192
          expect(formValid.getText()).toContain('true');                                                               // 22193
        });                                                                                                            // 22194
                                                                                                                       // 22195
        it('should be invalid if less than required min length', function() {                                          // 22196
          userLastInput.clear();                                                                                       // 22197
          userLastInput.sendKeys('xx');                                                                                // 22198
                                                                                                                       // 22199
          expect(user.getText()).toContain('{"name":"guest"}');                                                        // 22200
          expect(lastNameValid.getText()).toContain('false');                                                          // 22201
          expect(lastNameError.getText()).toContain('minlength');                                                      // 22202
          expect(formValid.getText()).toContain('false');                                                              // 22203
        });                                                                                                            // 22204
                                                                                                                       // 22205
        it('should be invalid if longer than max length', function() {                                                 // 22206
          userLastInput.clear();                                                                                       // 22207
          userLastInput.sendKeys('some ridiculously long name');                                                       // 22208
                                                                                                                       // 22209
          expect(user.getText()).toContain('{"name":"guest"}');                                                        // 22210
          expect(lastNameValid.getText()).toContain('false');                                                          // 22211
          expect(lastNameError.getText()).toContain('maxlength');                                                      // 22212
          expect(formValid.getText()).toContain('false');                                                              // 22213
        });                                                                                                            // 22214
      </file>                                                                                                          // 22215
    </example>                                                                                                         // 22216
 */                                                                                                                    // 22217
var inputDirective = ['$browser', '$sniffer', '$filter', '$parse',                                                     // 22218
    function($browser, $sniffer, $filter, $parse) {                                                                    // 22219
  return {                                                                                                             // 22220
    restrict: 'E',                                                                                                     // 22221
    require: ['?ngModel'],                                                                                             // 22222
    link: {                                                                                                            // 22223
      pre: function(scope, element, attr, ctrls) {                                                                     // 22224
        if (ctrls[0]) {                                                                                                // 22225
          (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrls[0], $sniffer,                // 22226
                                                              $browser, $filter, $parse);                              // 22227
        }                                                                                                              // 22228
      }                                                                                                                // 22229
    }                                                                                                                  // 22230
  };                                                                                                                   // 22231
}];                                                                                                                    // 22232
                                                                                                                       // 22233
                                                                                                                       // 22234
                                                                                                                       // 22235
var CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/;                                                                      // 22236
/**                                                                                                                    // 22237
 * @ngdoc directive                                                                                                    // 22238
 * @name ngValue                                                                                                       // 22239
 *                                                                                                                     // 22240
 * @description                                                                                                        // 22241
 * Binds the given expression to the value of `<option>` or {@link input[radio] `input[radio]`},                       // 22242
 * so that when the element is selected, the {@link ngModel `ngModel`} of that element is set to                       // 22243
 * the bound value.                                                                                                    // 22244
 *                                                                                                                     // 22245
 * `ngValue` is useful when dynamically generating lists of radio buttons using                                        // 22246
 * {@link ngRepeat `ngRepeat`}, as shown below.                                                                        // 22247
 *                                                                                                                     // 22248
 * Likewise, `ngValue` can be used to generate `<option>` elements for                                                 // 22249
 * the {@link select `select`} element. In that case however, only strings are supported                               // 22250
 * for the `value `attribute, so the resulting `ngModel` will always be a string.                                      // 22251
 * Support for `select` models with non-string values is available via `ngOptions`.                                    // 22252
 *                                                                                                                     // 22253
 * @element input                                                                                                      // 22254
 * @param {string=} ngValue angular expression, whose value will be bound to the `value` attribute                     // 22255
 *   of the `input` element                                                                                            // 22256
 *                                                                                                                     // 22257
 * @example                                                                                                            // 22258
    <example name="ngValue-directive" module="valueExample">                                                           // 22259
      <file name="index.html">                                                                                         // 22260
       <script>                                                                                                        // 22261
          angular.module('valueExample', [])                                                                           // 22262
            .controller('ExampleController', ['$scope', function($scope) {                                             // 22263
              $scope.names = ['pizza', 'unicorns', 'robots'];                                                          // 22264
              $scope.my = { favorite: 'unicorns' };                                                                    // 22265
            }]);                                                                                                       // 22266
       </script>                                                                                                       // 22267
        <form ng-controller="ExampleController">                                                                       // 22268
          <h2>Which is your favorite?</h2>                                                                             // 22269
            <label ng-repeat="name in names" for="{{name}}">                                                           // 22270
              {{name}}                                                                                                 // 22271
              <input type="radio"                                                                                      // 22272
                     ng-model="my.favorite"                                                                            // 22273
                     ng-value="name"                                                                                   // 22274
                     id="{{name}}"                                                                                     // 22275
                     name="favorite">                                                                                  // 22276
            </label>                                                                                                   // 22277
          <div>You chose {{my.favorite}}</div>                                                                         // 22278
        </form>                                                                                                        // 22279
      </file>                                                                                                          // 22280
      <file name="protractor.js" type="protractor">                                                                    // 22281
        var favorite = element(by.binding('my.favorite'));                                                             // 22282
                                                                                                                       // 22283
        it('should initialize to model', function() {                                                                  // 22284
          expect(favorite.getText()).toContain('unicorns');                                                            // 22285
        });                                                                                                            // 22286
        it('should bind the values to the inputs', function() {                                                        // 22287
          element.all(by.model('my.favorite')).get(0).click();                                                         // 22288
          expect(favorite.getText()).toContain('pizza');                                                               // 22289
        });                                                                                                            // 22290
      </file>                                                                                                          // 22291
    </example>                                                                                                         // 22292
 */                                                                                                                    // 22293
var ngValueDirective = function() {                                                                                    // 22294
  return {                                                                                                             // 22295
    restrict: 'A',                                                                                                     // 22296
    priority: 100,                                                                                                     // 22297
    compile: function(tpl, tplAttr) {                                                                                  // 22298
      if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {                                                               // 22299
        return function ngValueConstantLink(scope, elm, attr) {                                                        // 22300
          attr.$set('value', scope.$eval(attr.ngValue));                                                               // 22301
        };                                                                                                             // 22302
      } else {                                                                                                         // 22303
        return function ngValueLink(scope, elm, attr) {                                                                // 22304
          scope.$watch(attr.ngValue, function valueWatchAction(value) {                                                // 22305
            attr.$set('value', value);                                                                                 // 22306
          });                                                                                                          // 22307
        };                                                                                                             // 22308
      }                                                                                                                // 22309
    }                                                                                                                  // 22310
  };                                                                                                                   // 22311
};                                                                                                                     // 22312
                                                                                                                       // 22313
/**                                                                                                                    // 22314
 * @ngdoc directive                                                                                                    // 22315
 * @name ngBind                                                                                                        // 22316
 * @restrict AC                                                                                                        // 22317
 *                                                                                                                     // 22318
 * @description                                                                                                        // 22319
 * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element                      // 22320
 * with the value of a given expression, and to update the text content when the value of that                         // 22321
 * expression changes.                                                                                                 // 22322
 *                                                                                                                     // 22323
 * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like                        // 22324
 * `{{ expression }}` which is similar but less verbose.                                                               // 22325
 *                                                                                                                     // 22326
 * It is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily                         // 22327
 * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an                          // 22328
 * element attribute, it makes the bindings invisible to the user while the page is loading.                           // 22329
 *                                                                                                                     // 22330
 * An alternative solution to this problem would be using the                                                          // 22331
 * {@link ng.directive:ngCloak ngCloak} directive.                                                                     // 22332
 *                                                                                                                     // 22333
 *                                                                                                                     // 22334
 * @element ANY                                                                                                        // 22335
 * @param {expression} ngBind {@link guide/expression Expression} to evaluate.                                         // 22336
 *                                                                                                                     // 22337
 * @example                                                                                                            // 22338
 * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.                       // 22339
   <example module="bindExample">                                                                                      // 22340
     <file name="index.html">                                                                                          // 22341
       <script>                                                                                                        // 22342
         angular.module('bindExample', [])                                                                             // 22343
           .controller('ExampleController', ['$scope', function($scope) {                                              // 22344
             $scope.name = 'Whirled';                                                                                  // 22345
           }]);                                                                                                        // 22346
       </script>                                                                                                       // 22347
       <div ng-controller="ExampleController">                                                                         // 22348
         <label>Enter name: <input type="text" ng-model="name"></label><br>                                            // 22349
         Hello <span ng-bind="name"></span>!                                                                           // 22350
       </div>                                                                                                          // 22351
     </file>                                                                                                           // 22352
     <file name="protractor.js" type="protractor">                                                                     // 22353
       it('should check ng-bind', function() {                                                                         // 22354
         var nameInput = element(by.model('name'));                                                                    // 22355
                                                                                                                       // 22356
         expect(element(by.binding('name')).getText()).toBe('Whirled');                                                // 22357
         nameInput.clear();                                                                                            // 22358
         nameInput.sendKeys('world');                                                                                  // 22359
         expect(element(by.binding('name')).getText()).toBe('world');                                                  // 22360
       });                                                                                                             // 22361
     </file>                                                                                                           // 22362
   </example>                                                                                                          // 22363
 */                                                                                                                    // 22364
var ngBindDirective = ['$compile', function($compile) {                                                                // 22365
  return {                                                                                                             // 22366
    restrict: 'AC',                                                                                                    // 22367
    compile: function ngBindCompile(templateElement) {                                                                 // 22368
      $compile.$$addBindingClass(templateElement);                                                                     // 22369
      return function ngBindLink(scope, element, attr) {                                                               // 22370
        $compile.$$addBindingInfo(element, attr.ngBind);                                                               // 22371
        element = element[0];                                                                                          // 22372
        scope.$watch(attr.ngBind, function ngBindWatchAction(value) {                                                  // 22373
          element.textContent = isUndefined(value) ? '' : value;                                                       // 22374
        });                                                                                                            // 22375
      };                                                                                                               // 22376
    }                                                                                                                  // 22377
  };                                                                                                                   // 22378
}];                                                                                                                    // 22379
                                                                                                                       // 22380
                                                                                                                       // 22381
/**                                                                                                                    // 22382
 * @ngdoc directive                                                                                                    // 22383
 * @name ngBindTemplate                                                                                                // 22384
 *                                                                                                                     // 22385
 * @description                                                                                                        // 22386
 * The `ngBindTemplate` directive specifies that the element                                                           // 22387
 * text content should be replaced with the interpolation of the template                                              // 22388
 * in the `ngBindTemplate` attribute.                                                                                  // 22389
 * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`                                                // 22390
 * expressions. This directive is needed since some HTML elements                                                      // 22391
 * (such as TITLE and OPTION) cannot contain SPAN elements.                                                            // 22392
 *                                                                                                                     // 22393
 * @element ANY                                                                                                        // 22394
 * @param {string} ngBindTemplate template of form                                                                     // 22395
 *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.                                                              // 22396
 *                                                                                                                     // 22397
 * @example                                                                                                            // 22398
 * Try it here: enter text in text box and watch the greeting change.                                                  // 22399
   <example module="bindExample">                                                                                      // 22400
     <file name="index.html">                                                                                          // 22401
       <script>                                                                                                        // 22402
         angular.module('bindExample', [])                                                                             // 22403
           .controller('ExampleController', ['$scope', function($scope) {                                              // 22404
             $scope.salutation = 'Hello';                                                                              // 22405
             $scope.name = 'World';                                                                                    // 22406
           }]);                                                                                                        // 22407
       </script>                                                                                                       // 22408
       <div ng-controller="ExampleController">                                                                         // 22409
        <label>Salutation: <input type="text" ng-model="salutation"></label><br>                                       // 22410
        <label>Name: <input type="text" ng-model="name"></label><br>                                                   // 22411
        <pre ng-bind-template="{{salutation}} {{name}}!"></pre>                                                        // 22412
       </div>                                                                                                          // 22413
     </file>                                                                                                           // 22414
     <file name="protractor.js" type="protractor">                                                                     // 22415
       it('should check ng-bind', function() {                                                                         // 22416
         var salutationElem = element(by.binding('salutation'));                                                       // 22417
         var salutationInput = element(by.model('salutation'));                                                        // 22418
         var nameInput = element(by.model('name'));                                                                    // 22419
                                                                                                                       // 22420
         expect(salutationElem.getText()).toBe('Hello World!');                                                        // 22421
                                                                                                                       // 22422
         salutationInput.clear();                                                                                      // 22423
         salutationInput.sendKeys('Greetings');                                                                        // 22424
         nameInput.clear();                                                                                            // 22425
         nameInput.sendKeys('user');                                                                                   // 22426
                                                                                                                       // 22427
         expect(salutationElem.getText()).toBe('Greetings user!');                                                     // 22428
       });                                                                                                             // 22429
     </file>                                                                                                           // 22430
   </example>                                                                                                          // 22431
 */                                                                                                                    // 22432
var ngBindTemplateDirective = ['$interpolate', '$compile', function($interpolate, $compile) {                          // 22433
  return {                                                                                                             // 22434
    compile: function ngBindTemplateCompile(templateElement) {                                                         // 22435
      $compile.$$addBindingClass(templateElement);                                                                     // 22436
      return function ngBindTemplateLink(scope, element, attr) {                                                       // 22437
        var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));                                     // 22438
        $compile.$$addBindingInfo(element, interpolateFn.expressions);                                                 // 22439
        element = element[0];                                                                                          // 22440
        attr.$observe('ngBindTemplate', function(value) {                                                              // 22441
          element.textContent = isUndefined(value) ? '' : value;                                                       // 22442
        });                                                                                                            // 22443
      };                                                                                                               // 22444
    }                                                                                                                  // 22445
  };                                                                                                                   // 22446
}];                                                                                                                    // 22447
                                                                                                                       // 22448
                                                                                                                       // 22449
/**                                                                                                                    // 22450
 * @ngdoc directive                                                                                                    // 22451
 * @name ngBindHtml                                                                                                    // 22452
 *                                                                                                                     // 22453
 * @description                                                                                                        // 22454
 * Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default,               // 22455
 * the resulting HTML content will be sanitized using the {@link ngSanitize.$sanitize $sanitize} service.              // 22456
 * To utilize this functionality, ensure that `$sanitize` is available, for example, by including {@link               // 22457
 * ngSanitize} in your module's dependencies (not in core Angular). In order to use {@link ngSanitize}                 // 22458
 * in your module's dependencies, you need to include "angular-sanitize.js" in your application.                       // 22459
 *                                                                                                                     // 22460
 * You may also bypass sanitization for values you know are safe. To do so, bind to                                    // 22461
 * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example                      // 22462
 * under {@link ng.$sce#show-me-an-example-using-sce- Strict Contextual Escaping (SCE)}.                               // 22463
 *                                                                                                                     // 22464
 * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you                     // 22465
 * will have an exception (instead of an exploit.)                                                                     // 22466
 *                                                                                                                     // 22467
 * @element ANY                                                                                                        // 22468
 * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.                                     // 22469
 *                                                                                                                     // 22470
 * @example                                                                                                            // 22471
                                                                                                                       // 22472
   <example module="bindHtmlExample" deps="angular-sanitize.js">                                                       // 22473
     <file name="index.html">                                                                                          // 22474
       <div ng-controller="ExampleController">                                                                         // 22475
        <p ng-bind-html="myHTML"></p>                                                                                  // 22476
       </div>                                                                                                          // 22477
     </file>                                                                                                           // 22478
                                                                                                                       // 22479
     <file name="script.js">                                                                                           // 22480
       angular.module('bindHtmlExample', ['ngSanitize'])                                                               // 22481
         .controller('ExampleController', ['$scope', function($scope) {                                                // 22482
           $scope.myHTML =                                                                                             // 22483
              'I am an <code>HTML</code>string with ' +                                                                // 22484
              '<a href="#">links!</a> and other <em>stuff</em>';                                                       // 22485
         }]);                                                                                                          // 22486
     </file>                                                                                                           // 22487
                                                                                                                       // 22488
     <file name="protractor.js" type="protractor">                                                                     // 22489
       it('should check ng-bind-html', function() {                                                                    // 22490
         expect(element(by.binding('myHTML')).getText()).toBe(                                                         // 22491
             'I am an HTMLstring with links! and other stuff');                                                        // 22492
       });                                                                                                             // 22493
     </file>                                                                                                           // 22494
   </example>                                                                                                          // 22495
 */                                                                                                                    // 22496
var ngBindHtmlDirective = ['$sce', '$parse', '$compile', function($sce, $parse, $compile) {                            // 22497
  return {                                                                                                             // 22498
    restrict: 'A',                                                                                                     // 22499
    compile: function ngBindHtmlCompile(tElement, tAttrs) {                                                            // 22500
      var ngBindHtmlGetter = $parse(tAttrs.ngBindHtml);                                                                // 22501
      var ngBindHtmlWatch = $parse(tAttrs.ngBindHtml, function getStringValue(value) {                                 // 22502
        return (value || '').toString();                                                                               // 22503
      });                                                                                                              // 22504
      $compile.$$addBindingClass(tElement);                                                                            // 22505
                                                                                                                       // 22506
      return function ngBindHtmlLink(scope, element, attr) {                                                           // 22507
        $compile.$$addBindingInfo(element, attr.ngBindHtml);                                                           // 22508
                                                                                                                       // 22509
        scope.$watch(ngBindHtmlWatch, function ngBindHtmlWatchAction() {                                               // 22510
          // we re-evaluate the expr because we want a TrustedValueHolderType                                          // 22511
          // for $sce, not a string                                                                                    // 22512
          element.html($sce.getTrustedHtml(ngBindHtmlGetter(scope)) || '');                                            // 22513
        });                                                                                                            // 22514
      };                                                                                                               // 22515
    }                                                                                                                  // 22516
  };                                                                                                                   // 22517
}];                                                                                                                    // 22518
                                                                                                                       // 22519
/**                                                                                                                    // 22520
 * @ngdoc directive                                                                                                    // 22521
 * @name ngChange                                                                                                      // 22522
 *                                                                                                                     // 22523
 * @description                                                                                                        // 22524
 * Evaluate the given expression when the user changes the input.                                                      // 22525
 * The expression is evaluated immediately, unlike the JavaScript onchange event                                       // 22526
 * which only triggers at the end of a change (usually, when the user leaves the                                       // 22527
 * form element or presses the return key).                                                                            // 22528
 *                                                                                                                     // 22529
 * The `ngChange` expression is only evaluated when a change in the input value causes                                 // 22530
 * a new value to be committed to the model.                                                                           // 22531
 *                                                                                                                     // 22532
 * It will not be evaluated:                                                                                           // 22533
 * * if the value returned from the `$parsers` transformation pipeline has not changed                                 // 22534
 * * if the input has continued to be invalid since the model will stay `null`                                         // 22535
 * * if the model is changed programmatically and not by a change to the input value                                   // 22536
 *                                                                                                                     // 22537
 *                                                                                                                     // 22538
 * Note, this directive requires `ngModel` to be present.                                                              // 22539
 *                                                                                                                     // 22540
 * @element input                                                                                                      // 22541
 * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change                            // 22542
 * in input value.                                                                                                     // 22543
 *                                                                                                                     // 22544
 * @example                                                                                                            // 22545
 * <example name="ngChange-directive" module="changeExample">                                                          // 22546
 *   <file name="index.html">                                                                                          // 22547
 *     <script>                                                                                                        // 22548
 *       angular.module('changeExample', [])                                                                           // 22549
 *         .controller('ExampleController', ['$scope', function($scope) {                                              // 22550
 *           $scope.counter = 0;                                                                                       // 22551
 *           $scope.change = function() {                                                                              // 22552
 *             $scope.counter++;                                                                                       // 22553
 *           };                                                                                                        // 22554
 *         }]);                                                                                                        // 22555
 *     </script>                                                                                                       // 22556
 *     <div ng-controller="ExampleController">                                                                         // 22557
 *       <input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />                   // 22558
 *       <input type="checkbox" ng-model="confirmed" id="ng-change-example2" />                                        // 22559
 *       <label for="ng-change-example2">Confirmed</label><br />                                                       // 22560
 *       <tt>debug = {{confirmed}}</tt><br/>                                                                           // 22561
 *       <tt>counter = {{counter}}</tt><br/>                                                                           // 22562
 *     </div>                                                                                                          // 22563
 *   </file>                                                                                                           // 22564
 *   <file name="protractor.js" type="protractor">                                                                     // 22565
 *     var counter = element(by.binding('counter'));                                                                   // 22566
 *     var debug = element(by.binding('confirmed'));                                                                   // 22567
 *                                                                                                                     // 22568
 *     it('should evaluate the expression if changing from view', function() {                                         // 22569
 *       expect(counter.getText()).toContain('0');                                                                     // 22570
 *                                                                                                                     // 22571
 *       element(by.id('ng-change-example1')).click();                                                                 // 22572
 *                                                                                                                     // 22573
 *       expect(counter.getText()).toContain('1');                                                                     // 22574
 *       expect(debug.getText()).toContain('true');                                                                    // 22575
 *     });                                                                                                             // 22576
 *                                                                                                                     // 22577
 *     it('should not evaluate the expression if changing from model', function() {                                    // 22578
 *       element(by.id('ng-change-example2')).click();                                                                 // 22579
                                                                                                                       // 22580
 *       expect(counter.getText()).toContain('0');                                                                     // 22581
 *       expect(debug.getText()).toContain('true');                                                                    // 22582
 *     });                                                                                                             // 22583
 *   </file>                                                                                                           // 22584
 * </example>                                                                                                          // 22585
 */                                                                                                                    // 22586
var ngChangeDirective = valueFn({                                                                                      // 22587
  restrict: 'A',                                                                                                       // 22588
  require: 'ngModel',                                                                                                  // 22589
  link: function(scope, element, attr, ctrl) {                                                                         // 22590
    ctrl.$viewChangeListeners.push(function() {                                                                        // 22591
      scope.$eval(attr.ngChange);                                                                                      // 22592
    });                                                                                                                // 22593
  }                                                                                                                    // 22594
});                                                                                                                    // 22595
                                                                                                                       // 22596
function classDirective(name, selector) {                                                                              // 22597
  name = 'ngClass' + name;                                                                                             // 22598
  return ['$animate', function($animate) {                                                                             // 22599
    return {                                                                                                           // 22600
      restrict: 'AC',                                                                                                  // 22601
      link: function(scope, element, attr) {                                                                           // 22602
        var oldVal;                                                                                                    // 22603
                                                                                                                       // 22604
        scope.$watch(attr[name], ngClassWatchAction, true);                                                            // 22605
                                                                                                                       // 22606
        attr.$observe('class', function(value) {                                                                       // 22607
          ngClassWatchAction(scope.$eval(attr[name]));                                                                 // 22608
        });                                                                                                            // 22609
                                                                                                                       // 22610
                                                                                                                       // 22611
        if (name !== 'ngClass') {                                                                                      // 22612
          scope.$watch('$index', function($index, old$index) {                                                         // 22613
            // jshint bitwise: false                                                                                   // 22614
            var mod = $index & 1;                                                                                      // 22615
            if (mod !== (old$index & 1)) {                                                                             // 22616
              var classes = arrayClasses(scope.$eval(attr[name]));                                                     // 22617
              mod === selector ?                                                                                       // 22618
                addClasses(classes) :                                                                                  // 22619
                removeClasses(classes);                                                                                // 22620
            }                                                                                                          // 22621
          });                                                                                                          // 22622
        }                                                                                                              // 22623
                                                                                                                       // 22624
        function addClasses(classes) {                                                                                 // 22625
          var newClasses = digestClassCounts(classes, 1);                                                              // 22626
          attr.$addClass(newClasses);                                                                                  // 22627
        }                                                                                                              // 22628
                                                                                                                       // 22629
        function removeClasses(classes) {                                                                              // 22630
          var newClasses = digestClassCounts(classes, -1);                                                             // 22631
          attr.$removeClass(newClasses);                                                                               // 22632
        }                                                                                                              // 22633
                                                                                                                       // 22634
        function digestClassCounts(classes, count) {                                                                   // 22635
          // Use createMap() to prevent class assumptions involving property                                           // 22636
          // names in Object.prototype                                                                                 // 22637
          var classCounts = element.data('$classCounts') || createMap();                                               // 22638
          var classesToUpdate = [];                                                                                    // 22639
          forEach(classes, function(className) {                                                                       // 22640
            if (count > 0 || classCounts[className]) {                                                                 // 22641
              classCounts[className] = (classCounts[className] || 0) + count;                                          // 22642
              if (classCounts[className] === +(count > 0)) {                                                           // 22643
                classesToUpdate.push(className);                                                                       // 22644
              }                                                                                                        // 22645
            }                                                                                                          // 22646
          });                                                                                                          // 22647
          element.data('$classCounts', classCounts);                                                                   // 22648
          return classesToUpdate.join(' ');                                                                            // 22649
        }                                                                                                              // 22650
                                                                                                                       // 22651
        function updateClasses(oldClasses, newClasses) {                                                               // 22652
          var toAdd = arrayDifference(newClasses, oldClasses);                                                         // 22653
          var toRemove = arrayDifference(oldClasses, newClasses);                                                      // 22654
          toAdd = digestClassCounts(toAdd, 1);                                                                         // 22655
          toRemove = digestClassCounts(toRemove, -1);                                                                  // 22656
          if (toAdd && toAdd.length) {                                                                                 // 22657
            $animate.addClass(element, toAdd);                                                                         // 22658
          }                                                                                                            // 22659
          if (toRemove && toRemove.length) {                                                                           // 22660
            $animate.removeClass(element, toRemove);                                                                   // 22661
          }                                                                                                            // 22662
        }                                                                                                              // 22663
                                                                                                                       // 22664
        function ngClassWatchAction(newVal) {                                                                          // 22665
          if (selector === true || scope.$index % 2 === selector) {                                                    // 22666
            var newClasses = arrayClasses(newVal || []);                                                               // 22667
            if (!oldVal) {                                                                                             // 22668
              addClasses(newClasses);                                                                                  // 22669
            } else if (!equals(newVal,oldVal)) {                                                                       // 22670
              var oldClasses = arrayClasses(oldVal);                                                                   // 22671
              updateClasses(oldClasses, newClasses);                                                                   // 22672
            }                                                                                                          // 22673
          }                                                                                                            // 22674
          oldVal = shallowCopy(newVal);                                                                                // 22675
        }                                                                                                              // 22676
      }                                                                                                                // 22677
    };                                                                                                                 // 22678
                                                                                                                       // 22679
    function arrayDifference(tokens1, tokens2) {                                                                       // 22680
      var values = [];                                                                                                 // 22681
                                                                                                                       // 22682
      outer:                                                                                                           // 22683
      for (var i = 0; i < tokens1.length; i++) {                                                                       // 22684
        var token = tokens1[i];                                                                                        // 22685
        for (var j = 0; j < tokens2.length; j++) {                                                                     // 22686
          if (token == tokens2[j]) continue outer;                                                                     // 22687
        }                                                                                                              // 22688
        values.push(token);                                                                                            // 22689
      }                                                                                                                // 22690
      return values;                                                                                                   // 22691
    }                                                                                                                  // 22692
                                                                                                                       // 22693
    function arrayClasses(classVal) {                                                                                  // 22694
      var classes = [];                                                                                                // 22695
      if (isArray(classVal)) {                                                                                         // 22696
        forEach(classVal, function(v) {                                                                                // 22697
          classes = classes.concat(arrayClasses(v));                                                                   // 22698
        });                                                                                                            // 22699
        return classes;                                                                                                // 22700
      } else if (isString(classVal)) {                                                                                 // 22701
        return classVal.split(' ');                                                                                    // 22702
      } else if (isObject(classVal)) {                                                                                 // 22703
        forEach(classVal, function(v, k) {                                                                             // 22704
          if (v) {                                                                                                     // 22705
            classes = classes.concat(k.split(' '));                                                                    // 22706
          }                                                                                                            // 22707
        });                                                                                                            // 22708
        return classes;                                                                                                // 22709
      }                                                                                                                // 22710
      return classVal;                                                                                                 // 22711
    }                                                                                                                  // 22712
  }];                                                                                                                  // 22713
}                                                                                                                      // 22714
                                                                                                                       // 22715
/**                                                                                                                    // 22716
 * @ngdoc directive                                                                                                    // 22717
 * @name ngClass                                                                                                       // 22718
 * @restrict AC                                                                                                        // 22719
 *                                                                                                                     // 22720
 * @description                                                                                                        // 22721
 * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding                 // 22722
 * an expression that represents all classes to be added.                                                              // 22723
 *                                                                                                                     // 22724
 * The directive operates in three different ways, depending on which of three types the expression                    // 22725
 * evaluates to:                                                                                                       // 22726
 *                                                                                                                     // 22727
 * 1. If the expression evaluates to a string, the string should be one or more space-delimited class                  // 22728
 * names.                                                                                                              // 22729
 *                                                                                                                     // 22730
 * 2. If the expression evaluates to an object, then for each key-value pair of the                                    // 22731
 * object with a truthy value the corresponding key is used as a class name.                                           // 22732
 *                                                                                                                     // 22733
 * 3. If the expression evaluates to an array, each element of the array should either be a string as in               // 22734
 * type 1 or an object as in type 2. This means that you can mix strings and objects together in an array              // 22735
 * to give you more control over what CSS classes appear. See the code below for an example of this.                   // 22736
 *                                                                                                                     // 22737
 *                                                                                                                     // 22738
 * The directive won't add duplicate classes if a particular class was already set.                                    // 22739
 *                                                                                                                     // 22740
 * When the expression changes, the previously added classes are removed and only then are the                         // 22741
 * new classes added.                                                                                                  // 22742
 *                                                                                                                     // 22743
 * @animations                                                                                                         // 22744
 * **add** - happens just before the class is applied to the elements                                                  // 22745
 *                                                                                                                     // 22746
 * **remove** - happens just before the class is removed from the element                                              // 22747
 *                                                                                                                     // 22748
 * @element ANY                                                                                                        // 22749
 * @param {expression} ngClass {@link guide/expression Expression} to eval. The result                                 // 22750
 *   of the evaluation can be a string representing space delimited class                                              // 22751
 *   names, an array, or a map of class names to boolean values. In the case of a map, the                             // 22752
 *   names of the properties whose values are truthy will be added as css classes to the                               // 22753
 *   element.                                                                                                          // 22754
 *                                                                                                                     // 22755
 * @example Example that demonstrates basic bindings via ngClass directive.                                            // 22756
   <example>                                                                                                           // 22757
     <file name="index.html">                                                                                          // 22758
       <p ng-class="{strike: deleted, bold: important, 'has-error': error}">Map Syntax Example</p>                     // 22759
       <label>                                                                                                         // 22760
          <input type="checkbox" ng-model="deleted">                                                                   // 22761
          deleted (apply "strike" class)                                                                               // 22762
       </label><br>                                                                                                    // 22763
       <label>                                                                                                         // 22764
          <input type="checkbox" ng-model="important">                                                                 // 22765
          important (apply "bold" class)                                                                               // 22766
       </label><br>                                                                                                    // 22767
       <label>                                                                                                         // 22768
          <input type="checkbox" ng-model="error">                                                                     // 22769
          error (apply "has-error" class)                                                                              // 22770
       </label>                                                                                                        // 22771
       <hr>                                                                                                            // 22772
       <p ng-class="style">Using String Syntax</p>                                                                     // 22773
       <input type="text" ng-model="style"                                                                             // 22774
              placeholder="Type: bold strike red" aria-label="Type: bold strike red">                                  // 22775
       <hr>                                                                                                            // 22776
       <p ng-class="[style1, style2, style3]">Using Array Syntax</p>                                                   // 22777
       <input ng-model="style1"                                                                                        // 22778
              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red"><br>                      // 22779
       <input ng-model="style2"                                                                                        // 22780
              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 2"><br>                    // 22781
       <input ng-model="style3"                                                                                        // 22782
              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 3"><br>                    // 22783
       <hr>                                                                                                            // 22784
       <p ng-class="[style4, {orange: warning}]">Using Array and Map Syntax</p>                                        // 22785
       <input ng-model="style4" placeholder="Type: bold, strike" aria-label="Type: bold, strike"><br>                  // 22786
       <label><input type="checkbox" ng-model="warning"> warning (apply "orange" class)</label>                        // 22787
     </file>                                                                                                           // 22788
     <file name="style.css">                                                                                           // 22789
       .strike {                                                                                                       // 22790
           text-decoration: line-through;                                                                              // 22791
       }                                                                                                               // 22792
       .bold {                                                                                                         // 22793
           font-weight: bold;                                                                                          // 22794
       }                                                                                                               // 22795
       .red {                                                                                                          // 22796
           color: red;                                                                                                 // 22797
       }                                                                                                               // 22798
       .has-error {                                                                                                    // 22799
           color: red;                                                                                                 // 22800
           background-color: yellow;                                                                                   // 22801
       }                                                                                                               // 22802
       .orange {                                                                                                       // 22803
           color: orange;                                                                                              // 22804
       }                                                                                                               // 22805
     </file>                                                                                                           // 22806
     <file name="protractor.js" type="protractor">                                                                     // 22807
       var ps = element.all(by.css('p'));                                                                              // 22808
                                                                                                                       // 22809
       it('should let you toggle the class', function() {                                                              // 22810
                                                                                                                       // 22811
         expect(ps.first().getAttribute('class')).not.toMatch(/bold/);                                                 // 22812
         expect(ps.first().getAttribute('class')).not.toMatch(/has-error/);                                            // 22813
                                                                                                                       // 22814
         element(by.model('important')).click();                                                                       // 22815
         expect(ps.first().getAttribute('class')).toMatch(/bold/);                                                     // 22816
                                                                                                                       // 22817
         element(by.model('error')).click();                                                                           // 22818
         expect(ps.first().getAttribute('class')).toMatch(/has-error/);                                                // 22819
       });                                                                                                             // 22820
                                                                                                                       // 22821
       it('should let you toggle string example', function() {                                                         // 22822
         expect(ps.get(1).getAttribute('class')).toBe('');                                                             // 22823
         element(by.model('style')).clear();                                                                           // 22824
         element(by.model('style')).sendKeys('red');                                                                   // 22825
         expect(ps.get(1).getAttribute('class')).toBe('red');                                                          // 22826
       });                                                                                                             // 22827
                                                                                                                       // 22828
       it('array example should have 3 classes', function() {                                                          // 22829
         expect(ps.get(2).getAttribute('class')).toBe('');                                                             // 22830
         element(by.model('style1')).sendKeys('bold');                                                                 // 22831
         element(by.model('style2')).sendKeys('strike');                                                               // 22832
         element(by.model('style3')).sendKeys('red');                                                                  // 22833
         expect(ps.get(2).getAttribute('class')).toBe('bold strike red');                                              // 22834
       });                                                                                                             // 22835
                                                                                                                       // 22836
       it('array with map example should have 2 classes', function() {                                                 // 22837
         expect(ps.last().getAttribute('class')).toBe('');                                                             // 22838
         element(by.model('style4')).sendKeys('bold');                                                                 // 22839
         element(by.model('warning')).click();                                                                         // 22840
         expect(ps.last().getAttribute('class')).toBe('bold orange');                                                  // 22841
       });                                                                                                             // 22842
     </file>                                                                                                           // 22843
   </example>                                                                                                          // 22844
                                                                                                                       // 22845
   ## Animations                                                                                                       // 22846
                                                                                                                       // 22847
   The example below demonstrates how to perform animations using ngClass.                                             // 22848
                                                                                                                       // 22849
   <example module="ngAnimate" deps="angular-animate.js" animations="true">                                            // 22850
     <file name="index.html">                                                                                          // 22851
      <input id="setbtn" type="button" value="set" ng-click="myVar='my-class'">                                        // 22852
      <input id="clearbtn" type="button" value="clear" ng-click="myVar=''">                                            // 22853
      <br>                                                                                                             // 22854
      <span class="base-class" ng-class="myVar">Sample Text</span>                                                     // 22855
     </file>                                                                                                           // 22856
     <file name="style.css">                                                                                           // 22857
       .base-class {                                                                                                   // 22858
         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;                                                 // 22859
       }                                                                                                               // 22860
                                                                                                                       // 22861
       .base-class.my-class {                                                                                          // 22862
         color: red;                                                                                                   // 22863
         font-size:3em;                                                                                                // 22864
       }                                                                                                               // 22865
     </file>                                                                                                           // 22866
     <file name="protractor.js" type="protractor">                                                                     // 22867
       it('should check ng-class', function() {                                                                        // 22868
         expect(element(by.css('.base-class')).getAttribute('class')).not.                                             // 22869
           toMatch(/my-class/);                                                                                        // 22870
                                                                                                                       // 22871
         element(by.id('setbtn')).click();                                                                             // 22872
                                                                                                                       // 22873
         expect(element(by.css('.base-class')).getAttribute('class')).                                                 // 22874
           toMatch(/my-class/);                                                                                        // 22875
                                                                                                                       // 22876
         element(by.id('clearbtn')).click();                                                                           // 22877
                                                                                                                       // 22878
         expect(element(by.css('.base-class')).getAttribute('class')).not.                                             // 22879
           toMatch(/my-class/);                                                                                        // 22880
       });                                                                                                             // 22881
     </file>                                                                                                           // 22882
   </example>                                                                                                          // 22883
                                                                                                                       // 22884
                                                                                                                       // 22885
   ## ngClass and pre-existing CSS3 Transitions/Animations                                                             // 22886
   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.
   Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder
   any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure
   to view the step by step details of {@link $animate#addClass $animate.addClass} and                                 // 22890
   {@link $animate#removeClass $animate.removeClass}.                                                                  // 22891
 */                                                                                                                    // 22892
var ngClassDirective = classDirective('', true);                                                                       // 22893
                                                                                                                       // 22894
/**                                                                                                                    // 22895
 * @ngdoc directive                                                                                                    // 22896
 * @name ngClassOdd                                                                                                    // 22897
 * @restrict AC                                                                                                        // 22898
 *                                                                                                                     // 22899
 * @description                                                                                                        // 22900
 * The `ngClassOdd` and `ngClassEven` directives work exactly as                                                       // 22901
 * {@link ng.directive:ngClass ngClass}, except they work in                                                           // 22902
 * conjunction with `ngRepeat` and take effect only on odd (even) rows.                                                // 22903
 *                                                                                                                     // 22904
 * This directive can be applied only within the scope of an                                                           // 22905
 * {@link ng.directive:ngRepeat ngRepeat}.                                                                             // 22906
 *                                                                                                                     // 22907
 * @element ANY                                                                                                        // 22908
 * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result                              // 22909
 *   of the evaluation can be a string representing space delimited class names or an array.                           // 22910
 *                                                                                                                     // 22911
 * @example                                                                                                            // 22912
   <example>                                                                                                           // 22913
     <file name="index.html">                                                                                          // 22914
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">                                                           // 22915
          <li ng-repeat="name in names">                                                                               // 22916
           <span ng-class-odd="'odd'" ng-class-even="'even'">                                                          // 22917
             {{name}}                                                                                                  // 22918
           </span>                                                                                                     // 22919
          </li>                                                                                                        // 22920
        </ol>                                                                                                          // 22921
     </file>                                                                                                           // 22922
     <file name="style.css">                                                                                           // 22923
       .odd {                                                                                                          // 22924
         color: red;                                                                                                   // 22925
       }                                                                                                               // 22926
       .even {                                                                                                         // 22927
         color: blue;                                                                                                  // 22928
       }                                                                                                               // 22929
     </file>                                                                                                           // 22930
     <file name="protractor.js" type="protractor">                                                                     // 22931
       it('should check ng-class-odd and ng-class-even', function() {                                                  // 22932
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).                    // 22933
           toMatch(/odd/);                                                                                             // 22934
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).                    // 22935
           toMatch(/even/);                                                                                            // 22936
       });                                                                                                             // 22937
     </file>                                                                                                           // 22938
   </example>                                                                                                          // 22939
 */                                                                                                                    // 22940
var ngClassOddDirective = classDirective('Odd', 0);                                                                    // 22941
                                                                                                                       // 22942
/**                                                                                                                    // 22943
 * @ngdoc directive                                                                                                    // 22944
 * @name ngClassEven                                                                                                   // 22945
 * @restrict AC                                                                                                        // 22946
 *                                                                                                                     // 22947
 * @description                                                                                                        // 22948
 * The `ngClassOdd` and `ngClassEven` directives work exactly as                                                       // 22949
 * {@link ng.directive:ngClass ngClass}, except they work in                                                           // 22950
 * conjunction with `ngRepeat` and take effect only on odd (even) rows.                                                // 22951
 *                                                                                                                     // 22952
 * This directive can be applied only within the scope of an                                                           // 22953
 * {@link ng.directive:ngRepeat ngRepeat}.                                                                             // 22954
 *                                                                                                                     // 22955
 * @element ANY                                                                                                        // 22956
 * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The                                    // 22957
 *   result of the evaluation can be a string representing space delimited class names or an array.                    // 22958
 *                                                                                                                     // 22959
 * @example                                                                                                            // 22960
   <example>                                                                                                           // 22961
     <file name="index.html">                                                                                          // 22962
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">                                                           // 22963
          <li ng-repeat="name in names">                                                                               // 22964
           <span ng-class-odd="'odd'" ng-class-even="'even'">                                                          // 22965
             {{name}} &nbsp; &nbsp; &nbsp;                                                                             // 22966
           </span>                                                                                                     // 22967
          </li>                                                                                                        // 22968
        </ol>                                                                                                          // 22969
     </file>                                                                                                           // 22970
     <file name="style.css">                                                                                           // 22971
       .odd {                                                                                                          // 22972
         color: red;                                                                                                   // 22973
       }                                                                                                               // 22974
       .even {                                                                                                         // 22975
         color: blue;                                                                                                  // 22976
       }                                                                                                               // 22977
     </file>                                                                                                           // 22978
     <file name="protractor.js" type="protractor">                                                                     // 22979
       it('should check ng-class-odd and ng-class-even', function() {                                                  // 22980
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).                    // 22981
           toMatch(/odd/);                                                                                             // 22982
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).                    // 22983
           toMatch(/even/);                                                                                            // 22984
       });                                                                                                             // 22985
     </file>                                                                                                           // 22986
   </example>                                                                                                          // 22987
 */                                                                                                                    // 22988
var ngClassEvenDirective = classDirective('Even', 1);                                                                  // 22989
                                                                                                                       // 22990
/**                                                                                                                    // 22991
 * @ngdoc directive                                                                                                    // 22992
 * @name ngCloak                                                                                                       // 22993
 * @restrict AC                                                                                                        // 22994
 *                                                                                                                     // 22995
 * @description                                                                                                        // 22996
 * The `ngCloak` directive is used to prevent the Angular html template from being briefly                             // 22997
 * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this                   // 22998
 * directive to avoid the undesirable flicker effect caused by the html template display.                              // 22999
 *                                                                                                                     // 23000
 * The directive can be applied to the `<body>` element, but the preferred usage is to apply                           // 23001
 * multiple `ngCloak` directives to small portions of the page to permit progressive rendering                         // 23002
 * of the browser view.                                                                                                // 23003
 *                                                                                                                     // 23004
 * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and                         // 23005
 * `angular.min.js`.                                                                                                   // 23006
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).                 // 23007
 *                                                                                                                     // 23008
 * ```css                                                                                                              // 23009
 * [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {                                    // 23010
 *   display: none !important;                                                                                         // 23011
 * }                                                                                                                   // 23012
 * ```                                                                                                                 // 23013
 *                                                                                                                     // 23014
 * When this css rule is loaded by the browser, all html elements (including their children) that                      // 23015
 * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive                          // 23016
 * during the compilation of the template it deletes the `ngCloak` element attribute, making                           // 23017
 * the compiled element visible.                                                                                       // 23018
 *                                                                                                                     // 23019
 * For the best result, the `angular.js` script must be loaded in the head section of the html                         // 23020
 * document; alternatively, the css rule above must be included in the external stylesheet of the                      // 23021
 * application.                                                                                                        // 23022
 *                                                                                                                     // 23023
 * @element ANY                                                                                                        // 23024
 *                                                                                                                     // 23025
 * @example                                                                                                            // 23026
   <example>                                                                                                           // 23027
     <file name="index.html">                                                                                          // 23028
        <div id="template1" ng-cloak>{{ 'hello' }}</div>                                                               // 23029
        <div id="template2" class="ng-cloak">{{ 'world' }}</div>                                                       // 23030
     </file>                                                                                                           // 23031
     <file name="protractor.js" type="protractor">                                                                     // 23032
       it('should remove the template directive and css class', function() {                                           // 23033
         expect($('#template1').getAttribute('ng-cloak')).                                                             // 23034
           toBeNull();                                                                                                 // 23035
         expect($('#template2').getAttribute('ng-cloak')).                                                             // 23036
           toBeNull();                                                                                                 // 23037
       });                                                                                                             // 23038
     </file>                                                                                                           // 23039
   </example>                                                                                                          // 23040
 *                                                                                                                     // 23041
 */                                                                                                                    // 23042
var ngCloakDirective = ngDirective({                                                                                   // 23043
  compile: function(element, attr) {                                                                                   // 23044
    attr.$set('ngCloak', undefined);                                                                                   // 23045
    element.removeClass('ng-cloak');                                                                                   // 23046
  }                                                                                                                    // 23047
});                                                                                                                    // 23048
                                                                                                                       // 23049
/**                                                                                                                    // 23050
 * @ngdoc directive                                                                                                    // 23051
 * @name ngController                                                                                                  // 23052
 *                                                                                                                     // 23053
 * @description                                                                                                        // 23054
 * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular           // 23055
 * supports the principles behind the Model-View-Controller design pattern.                                            // 23056
 *                                                                                                                     // 23057
 * MVC components in angular:                                                                                          // 23058
 *                                                                                                                     // 23059
 * * Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties               // 23060
 *   are accessed through bindings.                                                                                    // 23061
 * * View — The template (HTML with data bindings) that is rendered into the View.                                     // 23062
 * * Controller — The `ngController` directive specifies a Controller class; the class contains business               // 23063
 *   logic behind the application to decorate the scope with functions and values                                      // 23064
 *                                                                                                                     // 23065
 * Note that you can also attach controllers to the DOM by declaring it in a route definition                          // 23066
 * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller                        // 23067
 * again using `ng-controller` in the template itself.  This will cause the controller to be attached                  // 23068
 * and executed twice.                                                                                                 // 23069
 *                                                                                                                     // 23070
 * @element ANY                                                                                                        // 23071
 * @scope                                                                                                              // 23072
 * @priority 500                                                                                                       // 23073
 * @param {expression} ngController Name of a constructor function registered with the current                         // 23074
 * {@link ng.$controllerProvider $controllerProvider} or an {@link guide/expression expression}                        // 23075
 * that on the current scope evaluates to a constructor function.                                                      // 23076
 *                                                                                                                     // 23077
 * The controller instance can be published into a scope property by specifying                                        // 23078
 * `ng-controller="as propertyName"`.                                                                                  // 23079
 *                                                                                                                     // 23080
 * If the current `$controllerProvider` is configured to use globals (via                                              // 23081
 * {@link ng.$controllerProvider#allowGlobals `$controllerProvider.allowGlobals()` }), this may                        // 23082
 * also be the name of a globally accessible constructor function (not recommended).                                   // 23083
 *                                                                                                                     // 23084
 * @example                                                                                                            // 23085
 * Here is a simple form for editing user contact information. Adding, removing, clearing, and                         // 23086
 * greeting are methods declared on the controller (see source tab). These methods can                                 // 23087
 * easily be called from the angular markup. Any changes to the data are automatically reflected                       // 23088
 * in the View without the need for a manual update.                                                                   // 23089
 *                                                                                                                     // 23090
 * Two different declaration styles are included below:                                                                // 23091
 *                                                                                                                     // 23092
 * * one binds methods and properties directly onto the controller using `this`:                                       // 23093
 * `ng-controller="SettingsController1 as settings"`                                                                   // 23094
 * * one injects `$scope` into the controller:                                                                         // 23095
 * `ng-controller="SettingsController2"`                                                                               // 23096
 *                                                                                                                     // 23097
 * The second option is more common in the Angular community, and is generally used in boilerplates                    // 23098
 * and in this guide. However, there are advantages to binding properties directly to the controller                   // 23099
 * and avoiding scope.                                                                                                 // 23100
 *                                                                                                                     // 23101
 * * Using `controller as` makes it obvious which controller you are accessing in the template when                    // 23102
 * multiple controllers apply to an element.                                                                           // 23103
 * * If you are writing your controllers as classes you have easier access to the properties and                       // 23104
 * methods, which will appear on the scope, from inside the controller code.                                           // 23105
 * * Since there is always a `.` in the bindings, you don't have to worry about prototypal                             // 23106
 * inheritance masking primitives.                                                                                     // 23107
 *                                                                                                                     // 23108
 * This example demonstrates the `controller as` syntax.                                                               // 23109
 *                                                                                                                     // 23110
 * <example name="ngControllerAs" module="controllerAsExample">                                                        // 23111
 *   <file name="index.html">                                                                                          // 23112
 *    <div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">                                         // 23113
 *      <label>Name: <input type="text" ng-model="settings.name"/></label>                                             // 23114
 *      <button ng-click="settings.greet()">greet</button><br/>                                                        // 23115
 *      Contact:                                                                                                       // 23116
 *      <ul>                                                                                                           // 23117
 *        <li ng-repeat="contact in settings.contacts">                                                                // 23118
 *          <select ng-model="contact.type" aria-label="Contact method" id="select_{{$index}}">                        // 23119
 *             <option>phone</option>                                                                                  // 23120
 *             <option>email</option>                                                                                  // 23121
 *          </select>                                                                                                  // 23122
 *          <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />                         // 23123
 *          <button ng-click="settings.clearContact(contact)">clear</button>                                           // 23124
 *          <button ng-click="settings.removeContact(contact)" aria-label="Remove">X</button>                          // 23125
 *        </li>                                                                                                        // 23126
 *        <li><button ng-click="settings.addContact()">add</button></li>                                               // 23127
 *     </ul>                                                                                                           // 23128
 *    </div>                                                                                                           // 23129
 *   </file>                                                                                                           // 23130
 *   <file name="app.js">                                                                                              // 23131
 *    angular.module('controllerAsExample', [])                                                                        // 23132
 *      .controller('SettingsController1', SettingsController1);                                                       // 23133
 *                                                                                                                     // 23134
 *    function SettingsController1() {                                                                                 // 23135
 *      this.name = "John Smith";                                                                                      // 23136
 *      this.contacts = [                                                                                              // 23137
 *        {type: 'phone', value: '408 555 1212'},                                                                      // 23138
 *        {type: 'email', value: 'john.smith@example.org'} ];                                                          // 23139
 *    }                                                                                                                // 23140
 *                                                                                                                     // 23141
 *    SettingsController1.prototype.greet = function() {                                                               // 23142
 *      alert(this.name);                                                                                              // 23143
 *    };                                                                                                               // 23144
 *                                                                                                                     // 23145
 *    SettingsController1.prototype.addContact = function() {                                                          // 23146
 *      this.contacts.push({type: 'email', value: 'yourname@example.org'});                                            // 23147
 *    };                                                                                                               // 23148
 *                                                                                                                     // 23149
 *    SettingsController1.prototype.removeContact = function(contactToRemove) {                                        // 23150
 *     var index = this.contacts.indexOf(contactToRemove);                                                             // 23151
 *      this.contacts.splice(index, 1);                                                                                // 23152
 *    };                                                                                                               // 23153
 *                                                                                                                     // 23154
 *    SettingsController1.prototype.clearContact = function(contact) {                                                 // 23155
 *      contact.type = 'phone';                                                                                        // 23156
 *      contact.value = '';                                                                                            // 23157
 *    };                                                                                                               // 23158
 *   </file>                                                                                                           // 23159
 *   <file name="protractor.js" type="protractor">                                                                     // 23160
 *     it('should check controller as', function() {                                                                   // 23161
 *       var container = element(by.id('ctrl-as-exmpl'));                                                              // 23162
 *         expect(container.element(by.model('settings.name'))                                                         // 23163
 *           .getAttribute('value')).toBe('John Smith');                                                               // 23164
 *                                                                                                                     // 23165
 *       var firstRepeat =                                                                                             // 23166
 *           container.element(by.repeater('contact in settings.contacts').row(0));                                    // 23167
 *       var secondRepeat =                                                                                            // 23168
 *           container.element(by.repeater('contact in settings.contacts').row(1));                                    // 23169
 *                                                                                                                     // 23170
 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))                                  // 23171
 *           .toBe('408 555 1212');                                                                                    // 23172
 *                                                                                                                     // 23173
 *       expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))                                 // 23174
 *           .toBe('john.smith@example.org');                                                                          // 23175
 *                                                                                                                     // 23176
 *       firstRepeat.element(by.buttonText('clear')).click();                                                          // 23177
 *                                                                                                                     // 23178
 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))                                  // 23179
 *           .toBe('');                                                                                                // 23180
 *                                                                                                                     // 23181
 *       container.element(by.buttonText('add')).click();                                                              // 23182
 *                                                                                                                     // 23183
 *       expect(container.element(by.repeater('contact in settings.contacts').row(2))                                  // 23184
 *           .element(by.model('contact.value'))                                                                       // 23185
 *           .getAttribute('value'))                                                                                   // 23186
 *           .toBe('yourname@example.org');                                                                            // 23187
 *     });                                                                                                             // 23188
 *   </file>                                                                                                           // 23189
 * </example>                                                                                                          // 23190
 *                                                                                                                     // 23191
 * This example demonstrates the "attach to `$scope`" style of controller.                                             // 23192
 *                                                                                                                     // 23193
 * <example name="ngController" module="controllerExample">                                                            // 23194
 *  <file name="index.html">                                                                                           // 23195
 *   <div id="ctrl-exmpl" ng-controller="SettingsController2">                                                         // 23196
 *     <label>Name: <input type="text" ng-model="name"/></label>                                                       // 23197
 *     <button ng-click="greet()">greet</button><br/>                                                                  // 23198
 *     Contact:                                                                                                        // 23199
 *     <ul>                                                                                                            // 23200
 *       <li ng-repeat="contact in contacts">                                                                          // 23201
 *         <select ng-model="contact.type" id="select_{{$index}}">                                                     // 23202
 *            <option>phone</option>                                                                                   // 23203
 *            <option>email</option>                                                                                   // 23204
 *         </select>                                                                                                   // 23205
 *         <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />                          // 23206
 *         <button ng-click="clearContact(contact)">clear</button>                                                     // 23207
 *         <button ng-click="removeContact(contact)">X</button>                                                        // 23208
 *       </li>                                                                                                         // 23209
 *       <li>[ <button ng-click="addContact()">add</button> ]</li>                                                     // 23210
 *    </ul>                                                                                                            // 23211
 *   </div>                                                                                                            // 23212
 *  </file>                                                                                                            // 23213
 *  <file name="app.js">                                                                                               // 23214
 *   angular.module('controllerExample', [])                                                                           // 23215
 *     .controller('SettingsController2', ['$scope', SettingsController2]);                                            // 23216
 *                                                                                                                     // 23217
 *   function SettingsController2($scope) {                                                                            // 23218
 *     $scope.name = "John Smith";                                                                                     // 23219
 *     $scope.contacts = [                                                                                             // 23220
 *       {type:'phone', value:'408 555 1212'},                                                                         // 23221
 *       {type:'email', value:'john.smith@example.org'} ];                                                             // 23222
 *                                                                                                                     // 23223
 *     $scope.greet = function() {                                                                                     // 23224
 *       alert($scope.name);                                                                                           // 23225
 *     };                                                                                                              // 23226
 *                                                                                                                     // 23227
 *     $scope.addContact = function() {                                                                                // 23228
 *       $scope.contacts.push({type:'email', value:'yourname@example.org'});                                           // 23229
 *     };                                                                                                              // 23230
 *                                                                                                                     // 23231
 *     $scope.removeContact = function(contactToRemove) {                                                              // 23232
 *       var index = $scope.contacts.indexOf(contactToRemove);                                                         // 23233
 *       $scope.contacts.splice(index, 1);                                                                             // 23234
 *     };                                                                                                              // 23235
 *                                                                                                                     // 23236
 *     $scope.clearContact = function(contact) {                                                                       // 23237
 *       contact.type = 'phone';                                                                                       // 23238
 *       contact.value = '';                                                                                           // 23239
 *     };                                                                                                              // 23240
 *   }                                                                                                                 // 23241
 *  </file>                                                                                                            // 23242
 *  <file name="protractor.js" type="protractor">                                                                      // 23243
 *    it('should check controller', function() {                                                                       // 23244
 *      var container = element(by.id('ctrl-exmpl'));                                                                  // 23245
 *                                                                                                                     // 23246
 *      expect(container.element(by.model('name'))                                                                     // 23247
 *          .getAttribute('value')).toBe('John Smith');                                                                // 23248
 *                                                                                                                     // 23249
 *      var firstRepeat =                                                                                              // 23250
 *          container.element(by.repeater('contact in contacts').row(0));                                              // 23251
 *      var secondRepeat =                                                                                             // 23252
 *          container.element(by.repeater('contact in contacts').row(1));                                              // 23253
 *                                                                                                                     // 23254
 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))                                   // 23255
 *          .toBe('408 555 1212');                                                                                     // 23256
 *      expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))                                  // 23257
 *          .toBe('john.smith@example.org');                                                                           // 23258
 *                                                                                                                     // 23259
 *      firstRepeat.element(by.buttonText('clear')).click();                                                           // 23260
 *                                                                                                                     // 23261
 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))                                   // 23262
 *          .toBe('');                                                                                                 // 23263
 *                                                                                                                     // 23264
 *      container.element(by.buttonText('add')).click();                                                               // 23265
 *                                                                                                                     // 23266
 *      expect(container.element(by.repeater('contact in contacts').row(2))                                            // 23267
 *          .element(by.model('contact.value'))                                                                        // 23268
 *          .getAttribute('value'))                                                                                    // 23269
 *          .toBe('yourname@example.org');                                                                             // 23270
 *    });                                                                                                              // 23271
 *  </file>                                                                                                            // 23272
 *</example>                                                                                                           // 23273
                                                                                                                       // 23274
 */                                                                                                                    // 23275
var ngControllerDirective = [function() {                                                                              // 23276
  return {                                                                                                             // 23277
    restrict: 'A',                                                                                                     // 23278
    scope: true,                                                                                                       // 23279
    controller: '@',                                                                                                   // 23280
    priority: 500                                                                                                      // 23281
  };                                                                                                                   // 23282
}];                                                                                                                    // 23283
                                                                                                                       // 23284
/**                                                                                                                    // 23285
 * @ngdoc directive                                                                                                    // 23286
 * @name ngCsp                                                                                                         // 23287
 *                                                                                                                     // 23288
 * @element html                                                                                                       // 23289
 * @description                                                                                                        // 23290
 *                                                                                                                     // 23291
 * Angular has some features that can break certain                                                                    // 23292
 * [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) rules.                               // 23293
 *                                                                                                                     // 23294
 * If you intend to implement these rules then you must tell Angular not to use these features.                        // 23295
 *                                                                                                                     // 23296
 * This is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.                   // 23297
 *                                                                                                                     // 23298
 *                                                                                                                     // 23299
 * The following rules affect Angular:                                                                                 // 23300
 *                                                                                                                     // 23301
 * * `unsafe-eval`: this rule forbids apps to use `eval` or `Function(string)` generated functions                     // 23302
 * (among other things). Angular makes use of this in the {@link $parse} service to provide a 30%                      // 23303
 * increase in the speed of evaluating Angular expressions.                                                            // 23304
 *                                                                                                                     // 23305
 * * `unsafe-inline`: this rule forbids apps from inject custom styles into the document. Angular                      // 23306
 * makes use of this to include some CSS rules (e.g. {@link ngCloak} and {@link ngHide}).                              // 23307
 * To make these directives work when a CSP rule is blocking inline styles, you must link to the                       // 23308
 * `angular-csp.css` in your HTML manually.                                                                            // 23309
 *                                                                                                                     // 23310
 * If you do not provide `ngCsp` then Angular tries to autodetect if CSP is blocking unsafe-eval                       // 23311
 * and automatically deactivates this feature in the {@link $parse} service. This autodetection,                       // 23312
 * however, triggers a CSP error to be logged in the console:                                                          // 23313
 *                                                                                                                     // 23314
 * ```                                                                                                                 // 23315
 * Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of                        // 23316
 * script in the following Content Security Policy directive: "default-src 'self'". Note that                          // 23317
 * 'script-src' was not explicitly set, so 'default-src' is used as a fallback.                                        // 23318
 * ```                                                                                                                 // 23319
 *                                                                                                                     // 23320
 * This error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`                          // 23321
 * directive on an element of the HTML document that appears before the `<script>` tag that loads                      // 23322
 * the `angular.js` file.                                                                                              // 23323
 *                                                                                                                     // 23324
 * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*                          // 23325
 *                                                                                                                     // 23326
 * You can specify which of the CSP related Angular features should be deactivated by providing                        // 23327
 * a value for the `ng-csp` attribute. The options are as follows:                                                     // 23328
 *                                                                                                                     // 23329
 * * no-inline-style: this stops Angular from injecting CSS styles into the DOM                                        // 23330
 *                                                                                                                     // 23331
 * * no-unsafe-eval: this stops Angular from optimising $parse with unsafe eval of strings                             // 23332
 *                                                                                                                     // 23333
 * You can use these values in the following combinations:                                                             // 23334
 *                                                                                                                     // 23335
 *                                                                                                                     // 23336
 * * No declaration means that Angular will assume that you can do inline styles, but it will do                       // 23337
 * a runtime check for unsafe-eval. E.g. `<body>`. This is backwardly compatible with previous versions                // 23338
 * of Angular.                                                                                                         // 23339
 *                                                                                                                     // 23340
 * * A simple `ng-csp` (or `data-ng-csp`) attribute will tell Angular to deactivate both inline                        // 23341
 * styles and unsafe eval. E.g. `<body ng-csp>`. This is backwardly compatible with previous versions                  // 23342
 * of Angular.                                                                                                         // 23343
 *                                                                                                                     // 23344
 * * Specifying only `no-unsafe-eval` tells Angular that we must not use eval, but that we can inject                  // 23345
 * inline styles. E.g. `<body ng-csp="no-unsafe-eval">`.                                                               // 23346
 *                                                                                                                     // 23347
 * * Specifying only `no-inline-style` tells Angular that we must not inject styles, but that we can                   // 23348
 * run eval - no automcatic check for unsafe eval will occur. E.g. `<body ng-csp="no-inline-style">`                   // 23349
 *                                                                                                                     // 23350
 * * Specifying both `no-unsafe-eval` and `no-inline-style` tells Angular that we must not inject                      // 23351
 * styles nor use eval, which is the same as an empty: ng-csp.                                                         // 23352
 * E.g.`<body ng-csp="no-inline-style;no-unsafe-eval">`                                                                // 23353
 *                                                                                                                     // 23354
 * @example                                                                                                            // 23355
 * This example shows how to apply the `ngCsp` directive to the `html` tag.                                            // 23356
   ```html                                                                                                             // 23357
     <!doctype html>                                                                                                   // 23358
     <html ng-app ng-csp>                                                                                              // 23359
     ...                                                                                                               // 23360
     ...                                                                                                               // 23361
     </html>                                                                                                           // 23362
   ```                                                                                                                 // 23363
  * @example                                                                                                           // 23364
      // Note: the suffix `.csp` in the example name triggers                                                          // 23365
      // csp mode in our http server!                                                                                  // 23366
      <example name="example.csp" module="cspExample" ng-csp="true">                                                   // 23367
        <file name="index.html">                                                                                       // 23368
          <div ng-controller="MainController as ctrl">                                                                 // 23369
            <div>                                                                                                      // 23370
              <button ng-click="ctrl.inc()" id="inc">Increment</button>                                                // 23371
              <span id="counter">                                                                                      // 23372
                {{ctrl.counter}}                                                                                       // 23373
              </span>                                                                                                  // 23374
            </div>                                                                                                     // 23375
                                                                                                                       // 23376
            <div>                                                                                                      // 23377
              <button ng-click="ctrl.evil()" id="evil">Evil</button>                                                   // 23378
              <span id="evilError">                                                                                    // 23379
                {{ctrl.evilError}}                                                                                     // 23380
              </span>                                                                                                  // 23381
            </div>                                                                                                     // 23382
          </div>                                                                                                       // 23383
        </file>                                                                                                        // 23384
        <file name="script.js">                                                                                        // 23385
           angular.module('cspExample', [])                                                                            // 23386
             .controller('MainController', function() {                                                                // 23387
                this.counter = 0;                                                                                      // 23388
                this.inc = function() {                                                                                // 23389
                  this.counter++;                                                                                      // 23390
                };                                                                                                     // 23391
                this.evil = function() {                                                                               // 23392
                  // jshint evil:true                                                                                  // 23393
                  try {                                                                                                // 23394
                    eval('1+2');                                                                                       // 23395
                  } catch (e) {                                                                                        // 23396
                    this.evilError = e.message;                                                                        // 23397
                  }                                                                                                    // 23398
                };                                                                                                     // 23399
              });                                                                                                      // 23400
        </file>                                                                                                        // 23401
        <file name="protractor.js" type="protractor">                                                                  // 23402
          var util, webdriver;                                                                                         // 23403
                                                                                                                       // 23404
          var incBtn = element(by.id('inc'));                                                                          // 23405
          var counter = element(by.id('counter'));                                                                     // 23406
          var evilBtn = element(by.id('evil'));                                                                        // 23407
          var evilError = element(by.id('evilError'));                                                                 // 23408
                                                                                                                       // 23409
          function getAndClearSevereErrors() {                                                                         // 23410
            return browser.manage().logs().get('browser').then(function(browserLog) {                                  // 23411
              return browserLog.filter(function(logEntry) {                                                            // 23412
                return logEntry.level.value > webdriver.logging.Level.WARNING.value;                                   // 23413
              });                                                                                                      // 23414
            });                                                                                                        // 23415
          }                                                                                                            // 23416
                                                                                                                       // 23417
          function clearErrors() {                                                                                     // 23418
            getAndClearSevereErrors();                                                                                 // 23419
          }                                                                                                            // 23420
                                                                                                                       // 23421
          function expectNoErrors() {                                                                                  // 23422
            getAndClearSevereErrors().then(function(filteredLog) {                                                     // 23423
              expect(filteredLog.length).toEqual(0);                                                                   // 23424
              if (filteredLog.length) {                                                                                // 23425
                console.log('browser console errors: ' + util.inspect(filteredLog));                                   // 23426
              }                                                                                                        // 23427
            });                                                                                                        // 23428
          }                                                                                                            // 23429
                                                                                                                       // 23430
          function expectError(regex) {                                                                                // 23431
            getAndClearSevereErrors().then(function(filteredLog) {                                                     // 23432
              var found = false;                                                                                       // 23433
              filteredLog.forEach(function(log) {                                                                      // 23434
                if (log.message.match(regex)) {                                                                        // 23435
                  found = true;                                                                                        // 23436
                }                                                                                                      // 23437
              });                                                                                                      // 23438
              if (!found) {                                                                                            // 23439
                throw new Error('expected an error that matches ' + regex);                                            // 23440
              }                                                                                                        // 23441
            });                                                                                                        // 23442
          }                                                                                                            // 23443
                                                                                                                       // 23444
          beforeEach(function() {                                                                                      // 23445
            util = require('util');                                                                                    // 23446
            webdriver = require('protractor/node_modules/selenium-webdriver');                                         // 23447
          });                                                                                                          // 23448
                                                                                                                       // 23449
          // For now, we only test on Chrome,                                                                          // 23450
          // as Safari does not load the page with Protractor's injected scripts,                                      // 23451
          // and Firefox webdriver always disables content security policy (#6358)                                     // 23452
          if (browser.params.browser !== 'chrome') {                                                                   // 23453
            return;                                                                                                    // 23454
          }                                                                                                            // 23455
                                                                                                                       // 23456
          it('should not report errors when the page is loaded', function() {                                          // 23457
            // clear errors so we are not dependent on previous tests                                                  // 23458
            clearErrors();                                                                                             // 23459
            // Need to reload the page as the page is already loaded when                                              // 23460
            // we come here                                                                                            // 23461
            browser.driver.getCurrentUrl().then(function(url) {                                                        // 23462
              browser.get(url);                                                                                        // 23463
            });                                                                                                        // 23464
            expectNoErrors();                                                                                          // 23465
          });                                                                                                          // 23466
                                                                                                                       // 23467
          it('should evaluate expressions', function() {                                                               // 23468
            expect(counter.getText()).toEqual('0');                                                                    // 23469
            incBtn.click();                                                                                            // 23470
            expect(counter.getText()).toEqual('1');                                                                    // 23471
            expectNoErrors();                                                                                          // 23472
          });                                                                                                          // 23473
                                                                                                                       // 23474
          it('should throw and report an error when using "eval"', function() {                                        // 23475
            evilBtn.click();                                                                                           // 23476
            expect(evilError.getText()).toMatch(/Content Security Policy/);                                            // 23477
            expectError(/Content Security Policy/);                                                                    // 23478
          });                                                                                                          // 23479
        </file>                                                                                                        // 23480
      </example>                                                                                                       // 23481
  */                                                                                                                   // 23482
                                                                                                                       // 23483
// ngCsp is not implemented as a proper directive any more, because we need it be processed while we                   // 23484
// bootstrap the system (before $parse is instantiated), for this reason we just have                                  // 23485
// the csp() fn that looks for the `ng-csp` attribute anywhere in the current doc                                      // 23486
                                                                                                                       // 23487
/**                                                                                                                    // 23488
 * @ngdoc directive                                                                                                    // 23489
 * @name ngClick                                                                                                       // 23490
 *                                                                                                                     // 23491
 * @description                                                                                                        // 23492
 * The ngClick directive allows you to specify custom behavior when                                                    // 23493
 * an element is clicked.                                                                                              // 23494
 *                                                                                                                     // 23495
 * @element ANY                                                                                                        // 23496
 * @priority 0                                                                                                         // 23497
 * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon                                    // 23498
 * click. ({@link guide/expression#-event- Event object is available as `$event`})                                     // 23499
 *                                                                                                                     // 23500
 * @example                                                                                                            // 23501
   <example>                                                                                                           // 23502
     <file name="index.html">                                                                                          // 23503
      <button ng-click="count = count + 1" ng-init="count=0">                                                          // 23504
        Increment                                                                                                      // 23505
      </button>                                                                                                        // 23506
      <span>                                                                                                           // 23507
        count: {{count}}                                                                                               // 23508
      </span>                                                                                                          // 23509
     </file>                                                                                                           // 23510
     <file name="protractor.js" type="protractor">                                                                     // 23511
       it('should check ng-click', function() {                                                                        // 23512
         expect(element(by.binding('count')).getText()).toMatch('0');                                                  // 23513
         element(by.css('button')).click();                                                                            // 23514
         expect(element(by.binding('count')).getText()).toMatch('1');                                                  // 23515
       });                                                                                                             // 23516
     </file>                                                                                                           // 23517
   </example>                                                                                                          // 23518
 */                                                                                                                    // 23519
/*                                                                                                                     // 23520
 * A collection of directives that allows creation of custom event handlers that are defined as                        // 23521
 * angular expressions and are compiled and executed within the current scope.                                         // 23522
 */                                                                                                                    // 23523
var ngEventDirectives = {};                                                                                            // 23524
                                                                                                                       // 23525
// For events that might fire synchronously during DOM manipulation                                                    // 23526
// we need to execute their event handlers asynchronously using $evalAsync,                                            // 23527
// so that they are not executed in an inconsistent state.                                                             // 23528
var forceAsyncEvents = {                                                                                               // 23529
  'blur': true,                                                                                                        // 23530
  'focus': true                                                                                                        // 23531
};                                                                                                                     // 23532
forEach(                                                                                                               // 23533
  'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '),
  function(eventName) {                                                                                                // 23535
    var directiveName = directiveNormalize('ng-' + eventName);                                                         // 23536
    ngEventDirectives[directiveName] = ['$parse', '$rootScope', function($parse, $rootScope) {                         // 23537
      return {                                                                                                         // 23538
        restrict: 'A',                                                                                                 // 23539
        compile: function($element, attr) {                                                                            // 23540
          // We expose the powerful $event object on the scope that provides access to the Window,                     // 23541
          // etc. that isn't protected by the fast paths in $parse.  We explicitly request better                      // 23542
          // checks at the cost of speed since event handler expressions are not executed as                           // 23543
          // frequently as regular change detection.                                                                   // 23544
          var fn = $parse(attr[directiveName], /* interceptorFn */ null, /* expensiveChecks */ true);                  // 23545
          return function ngEventHandler(scope, element) {                                                             // 23546
            element.on(eventName, function(event) {                                                                    // 23547
              var callback = function() {                                                                              // 23548
                fn(scope, {$event:event});                                                                             // 23549
              };                                                                                                       // 23550
              if (forceAsyncEvents[eventName] && $rootScope.$$phase) {                                                 // 23551
                scope.$evalAsync(callback);                                                                            // 23552
              } else {                                                                                                 // 23553
                scope.$apply(callback);                                                                                // 23554
              }                                                                                                        // 23555
            });                                                                                                        // 23556
          };                                                                                                           // 23557
        }                                                                                                              // 23558
      };                                                                                                               // 23559
    }];                                                                                                                // 23560
  }                                                                                                                    // 23561
);                                                                                                                     // 23562
                                                                                                                       // 23563
/**                                                                                                                    // 23564
 * @ngdoc directive                                                                                                    // 23565
 * @name ngDblclick                                                                                                    // 23566
 *                                                                                                                     // 23567
 * @description                                                                                                        // 23568
 * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.                               // 23569
 *                                                                                                                     // 23570
 * @element ANY                                                                                                        // 23571
 * @priority 0                                                                                                         // 23572
 * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon                                 // 23573
 * a dblclick. (The Event object is available as `$event`)                                                             // 23574
 *                                                                                                                     // 23575
 * @example                                                                                                            // 23576
   <example>                                                                                                           // 23577
     <file name="index.html">                                                                                          // 23578
      <button ng-dblclick="count = count + 1" ng-init="count=0">                                                       // 23579
        Increment (on double click)                                                                                    // 23580
      </button>                                                                                                        // 23581
      count: {{count}}                                                                                                 // 23582
     </file>                                                                                                           // 23583
   </example>                                                                                                          // 23584
 */                                                                                                                    // 23585
                                                                                                                       // 23586
                                                                                                                       // 23587
/**                                                                                                                    // 23588
 * @ngdoc directive                                                                                                    // 23589
 * @name ngMousedown                                                                                                   // 23590
 *                                                                                                                     // 23591
 * @description                                                                                                        // 23592
 * The ngMousedown directive allows you to specify custom behavior on mousedown event.                                 // 23593
 *                                                                                                                     // 23594
 * @element ANY                                                                                                        // 23595
 * @priority 0                                                                                                         // 23596
 * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon                                // 23597
 * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})                                 // 23598
 *                                                                                                                     // 23599
 * @example                                                                                                            // 23600
   <example>                                                                                                           // 23601
     <file name="index.html">                                                                                          // 23602
      <button ng-mousedown="count = count + 1" ng-init="count=0">                                                      // 23603
        Increment (on mouse down)                                                                                      // 23604
      </button>                                                                                                        // 23605
      count: {{count}}                                                                                                 // 23606
     </file>                                                                                                           // 23607
   </example>                                                                                                          // 23608
 */                                                                                                                    // 23609
                                                                                                                       // 23610
                                                                                                                       // 23611
/**                                                                                                                    // 23612
 * @ngdoc directive                                                                                                    // 23613
 * @name ngMouseup                                                                                                     // 23614
 *                                                                                                                     // 23615
 * @description                                                                                                        // 23616
 * Specify custom behavior on mouseup event.                                                                           // 23617
 *                                                                                                                     // 23618
 * @element ANY                                                                                                        // 23619
 * @priority 0                                                                                                         // 23620
 * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon                                  // 23621
 * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})                                   // 23622
 *                                                                                                                     // 23623
 * @example                                                                                                            // 23624
   <example>                                                                                                           // 23625
     <file name="index.html">                                                                                          // 23626
      <button ng-mouseup="count = count + 1" ng-init="count=0">                                                        // 23627
        Increment (on mouse up)                                                                                        // 23628
      </button>                                                                                                        // 23629
      count: {{count}}                                                                                                 // 23630
     </file>                                                                                                           // 23631
   </example>                                                                                                          // 23632
 */                                                                                                                    // 23633
                                                                                                                       // 23634
/**                                                                                                                    // 23635
 * @ngdoc directive                                                                                                    // 23636
 * @name ngMouseover                                                                                                   // 23637
 *                                                                                                                     // 23638
 * @description                                                                                                        // 23639
 * Specify custom behavior on mouseover event.                                                                         // 23640
 *                                                                                                                     // 23641
 * @element ANY                                                                                                        // 23642
 * @priority 0                                                                                                         // 23643
 * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon                                // 23644
 * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})                                 // 23645
 *                                                                                                                     // 23646
 * @example                                                                                                            // 23647
   <example>                                                                                                           // 23648
     <file name="index.html">                                                                                          // 23649
      <button ng-mouseover="count = count + 1" ng-init="count=0">                                                      // 23650
        Increment (when mouse is over)                                                                                 // 23651
      </button>                                                                                                        // 23652
      count: {{count}}                                                                                                 // 23653
     </file>                                                                                                           // 23654
   </example>                                                                                                          // 23655
 */                                                                                                                    // 23656
                                                                                                                       // 23657
                                                                                                                       // 23658
/**                                                                                                                    // 23659
 * @ngdoc directive                                                                                                    // 23660
 * @name ngMouseenter                                                                                                  // 23661
 *                                                                                                                     // 23662
 * @description                                                                                                        // 23663
 * Specify custom behavior on mouseenter event.                                                                        // 23664
 *                                                                                                                     // 23665
 * @element ANY                                                                                                        // 23666
 * @priority 0                                                                                                         // 23667
 * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon                               // 23668
 * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})                                // 23669
 *                                                                                                                     // 23670
 * @example                                                                                                            // 23671
   <example>                                                                                                           // 23672
     <file name="index.html">                                                                                          // 23673
      <button ng-mouseenter="count = count + 1" ng-init="count=0">                                                     // 23674
        Increment (when mouse enters)                                                                                  // 23675
      </button>                                                                                                        // 23676
      count: {{count}}                                                                                                 // 23677
     </file>                                                                                                           // 23678
   </example>                                                                                                          // 23679
 */                                                                                                                    // 23680
                                                                                                                       // 23681
                                                                                                                       // 23682
/**                                                                                                                    // 23683
 * @ngdoc directive                                                                                                    // 23684
 * @name ngMouseleave                                                                                                  // 23685
 *                                                                                                                     // 23686
 * @description                                                                                                        // 23687
 * Specify custom behavior on mouseleave event.                                                                        // 23688
 *                                                                                                                     // 23689
 * @element ANY                                                                                                        // 23690
 * @priority 0                                                                                                         // 23691
 * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon                               // 23692
 * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})                                // 23693
 *                                                                                                                     // 23694
 * @example                                                                                                            // 23695
   <example>                                                                                                           // 23696
     <file name="index.html">                                                                                          // 23697
      <button ng-mouseleave="count = count + 1" ng-init="count=0">                                                     // 23698
        Increment (when mouse leaves)                                                                                  // 23699
      </button>                                                                                                        // 23700
      count: {{count}}                                                                                                 // 23701
     </file>                                                                                                           // 23702
   </example>                                                                                                          // 23703
 */                                                                                                                    // 23704
                                                                                                                       // 23705
                                                                                                                       // 23706
/**                                                                                                                    // 23707
 * @ngdoc directive                                                                                                    // 23708
 * @name ngMousemove                                                                                                   // 23709
 *                                                                                                                     // 23710
 * @description                                                                                                        // 23711
 * Specify custom behavior on mousemove event.                                                                         // 23712
 *                                                                                                                     // 23713
 * @element ANY                                                                                                        // 23714
 * @priority 0                                                                                                         // 23715
 * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon                                // 23716
 * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})                                 // 23717
 *                                                                                                                     // 23718
 * @example                                                                                                            // 23719
   <example>                                                                                                           // 23720
     <file name="index.html">                                                                                          // 23721
      <button ng-mousemove="count = count + 1" ng-init="count=0">                                                      // 23722
        Increment (when mouse moves)                                                                                   // 23723
      </button>                                                                                                        // 23724
      count: {{count}}                                                                                                 // 23725
     </file>                                                                                                           // 23726
   </example>                                                                                                          // 23727
 */                                                                                                                    // 23728
                                                                                                                       // 23729
                                                                                                                       // 23730
/**                                                                                                                    // 23731
 * @ngdoc directive                                                                                                    // 23732
 * @name ngKeydown                                                                                                     // 23733
 *                                                                                                                     // 23734
 * @description                                                                                                        // 23735
 * Specify custom behavior on keydown event.                                                                           // 23736
 *                                                                                                                     // 23737
 * @element ANY                                                                                                        // 23738
 * @priority 0                                                                                                         // 23739
 * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon                                  // 23740
 * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)                  // 23741
 *                                                                                                                     // 23742
 * @example                                                                                                            // 23743
   <example>                                                                                                           // 23744
     <file name="index.html">                                                                                          // 23745
      <input ng-keydown="count = count + 1" ng-init="count=0">                                                         // 23746
      key down count: {{count}}                                                                                        // 23747
     </file>                                                                                                           // 23748
   </example>                                                                                                          // 23749
 */                                                                                                                    // 23750
                                                                                                                       // 23751
                                                                                                                       // 23752
/**                                                                                                                    // 23753
 * @ngdoc directive                                                                                                    // 23754
 * @name ngKeyup                                                                                                       // 23755
 *                                                                                                                     // 23756
 * @description                                                                                                        // 23757
 * Specify custom behavior on keyup event.                                                                             // 23758
 *                                                                                                                     // 23759
 * @element ANY                                                                                                        // 23760
 * @priority 0                                                                                                         // 23761
 * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon                                    // 23762
 * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)                    // 23763
 *                                                                                                                     // 23764
 * @example                                                                                                            // 23765
   <example>                                                                                                           // 23766
     <file name="index.html">                                                                                          // 23767
       <p>Typing in the input box below updates the key count</p>                                                      // 23768
       <input ng-keyup="count = count + 1" ng-init="count=0"> key up count: {{count}}                                  // 23769
                                                                                                                       // 23770
       <p>Typing in the input box below updates the keycode</p>                                                        // 23771
       <input ng-keyup="event=$event">                                                                                 // 23772
       <p>event keyCode: {{ event.keyCode }}</p>                                                                       // 23773
       <p>event altKey: {{ event.altKey }}</p>                                                                         // 23774
     </file>                                                                                                           // 23775
   </example>                                                                                                          // 23776
 */                                                                                                                    // 23777
                                                                                                                       // 23778
                                                                                                                       // 23779
/**                                                                                                                    // 23780
 * @ngdoc directive                                                                                                    // 23781
 * @name ngKeypress                                                                                                    // 23782
 *                                                                                                                     // 23783
 * @description                                                                                                        // 23784
 * Specify custom behavior on keypress event.                                                                          // 23785
 *                                                                                                                     // 23786
 * @element ANY                                                                                                        // 23787
 * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon                                 // 23788
 * keypress. ({@link guide/expression#-event- Event object is available as `$event`}                                   // 23789
 * and can be interrogated for keyCode, altKey, etc.)                                                                  // 23790
 *                                                                                                                     // 23791
 * @example                                                                                                            // 23792
   <example>                                                                                                           // 23793
     <file name="index.html">                                                                                          // 23794
      <input ng-keypress="count = count + 1" ng-init="count=0">                                                        // 23795
      key press count: {{count}}                                                                                       // 23796
     </file>                                                                                                           // 23797
   </example>                                                                                                          // 23798
 */                                                                                                                    // 23799
                                                                                                                       // 23800
                                                                                                                       // 23801
/**                                                                                                                    // 23802
 * @ngdoc directive                                                                                                    // 23803
 * @name ngSubmit                                                                                                      // 23804
 *                                                                                                                     // 23805
 * @description                                                                                                        // 23806
 * Enables binding angular expressions to onsubmit events.                                                             // 23807
 *                                                                                                                     // 23808
 * Additionally it prevents the default action (which for form means sending the request to the                        // 23809
 * server and reloading the current page), but only if the form does not contain `action`,                             // 23810
 * `data-action`, or `x-action` attributes.                                                                            // 23811
 *                                                                                                                     // 23812
 * <div class="alert alert-warning">                                                                                   // 23813
 * **Warning:** Be careful not to cause "double-submission" by using both the `ngClick` and                            // 23814
 * `ngSubmit` handlers together. See the                                                                               // 23815
 * {@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}                     // 23816
 * for a detailed discussion of when `ngSubmit` may be triggered.                                                      // 23817
 * </div>                                                                                                              // 23818
 *                                                                                                                     // 23819
 * @element form                                                                                                       // 23820
 * @priority 0                                                                                                         // 23821
 * @param {expression} ngSubmit {@link guide/expression Expression} to eval.                                           // 23822
 * ({@link guide/expression#-event- Event object is available as `$event`})                                            // 23823
 *                                                                                                                     // 23824
 * @example                                                                                                            // 23825
   <example module="submitExample">                                                                                    // 23826
     <file name="index.html">                                                                                          // 23827
      <script>                                                                                                         // 23828
        angular.module('submitExample', [])                                                                            // 23829
          .controller('ExampleController', ['$scope', function($scope) {                                               // 23830
            $scope.list = [];                                                                                          // 23831
            $scope.text = 'hello';                                                                                     // 23832
            $scope.submit = function() {                                                                               // 23833
              if ($scope.text) {                                                                                       // 23834
                $scope.list.push(this.text);                                                                           // 23835
                $scope.text = '';                                                                                      // 23836
              }                                                                                                        // 23837
            };                                                                                                         // 23838
          }]);                                                                                                         // 23839
      </script>                                                                                                        // 23840
      <form ng-submit="submit()" ng-controller="ExampleController">                                                    // 23841
        Enter text and hit enter:                                                                                      // 23842
        <input type="text" ng-model="text" name="text" />                                                              // 23843
        <input type="submit" id="submit" value="Submit" />                                                             // 23844
        <pre>list={{list}}</pre>                                                                                       // 23845
      </form>                                                                                                          // 23846
     </file>                                                                                                           // 23847
     <file name="protractor.js" type="protractor">                                                                     // 23848
       it('should check ng-submit', function() {                                                                       // 23849
         expect(element(by.binding('list')).getText()).toBe('list=[]');                                                // 23850
         element(by.css('#submit')).click();                                                                           // 23851
         expect(element(by.binding('list')).getText()).toContain('hello');                                             // 23852
         expect(element(by.model('text')).getAttribute('value')).toBe('');                                             // 23853
       });                                                                                                             // 23854
       it('should ignore empty strings', function() {                                                                  // 23855
         expect(element(by.binding('list')).getText()).toBe('list=[]');                                                // 23856
         element(by.css('#submit')).click();                                                                           // 23857
         element(by.css('#submit')).click();                                                                           // 23858
         expect(element(by.binding('list')).getText()).toContain('hello');                                             // 23859
        });                                                                                                            // 23860
     </file>                                                                                                           // 23861
   </example>                                                                                                          // 23862
 */                                                                                                                    // 23863
                                                                                                                       // 23864
/**                                                                                                                    // 23865
 * @ngdoc directive                                                                                                    // 23866
 * @name ngFocus                                                                                                       // 23867
 *                                                                                                                     // 23868
 * @description                                                                                                        // 23869
 * Specify custom behavior on focus event.                                                                             // 23870
 *                                                                                                                     // 23871
 * Note: As the `focus` event is executed synchronously when calling `input.focus()`                                   // 23872
 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired                                    // 23873
 * during an `$apply` to ensure a consistent state.                                                                    // 23874
 *                                                                                                                     // 23875
 * @element window, input, select, textarea, a                                                                         // 23876
 * @priority 0                                                                                                         // 23877
 * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon                                    // 23878
 * focus. ({@link guide/expression#-event- Event object is available as `$event`})                                     // 23879
 *                                                                                                                     // 23880
 * @example                                                                                                            // 23881
 * See {@link ng.directive:ngClick ngClick}                                                                            // 23882
 */                                                                                                                    // 23883
                                                                                                                       // 23884
/**                                                                                                                    // 23885
 * @ngdoc directive                                                                                                    // 23886
 * @name ngBlur                                                                                                        // 23887
 *                                                                                                                     // 23888
 * @description                                                                                                        // 23889
 * Specify custom behavior on blur event.                                                                              // 23890
 *                                                                                                                     // 23891
 * A [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when                                 // 23892
 * an element has lost focus.                                                                                          // 23893
 *                                                                                                                     // 23894
 * Note: As the `blur` event is executed synchronously also during DOM manipulations                                   // 23895
 * (e.g. removing a focussed input),                                                                                   // 23896
 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired                                    // 23897
 * during an `$apply` to ensure a consistent state.                                                                    // 23898
 *                                                                                                                     // 23899
 * @element window, input, select, textarea, a                                                                         // 23900
 * @priority 0                                                                                                         // 23901
 * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon                                     // 23902
 * blur. ({@link guide/expression#-event- Event object is available as `$event`})                                      // 23903
 *                                                                                                                     // 23904
 * @example                                                                                                            // 23905
 * See {@link ng.directive:ngClick ngClick}                                                                            // 23906
 */                                                                                                                    // 23907
                                                                                                                       // 23908
/**                                                                                                                    // 23909
 * @ngdoc directive                                                                                                    // 23910
 * @name ngCopy                                                                                                        // 23911
 *                                                                                                                     // 23912
 * @description                                                                                                        // 23913
 * Specify custom behavior on copy event.                                                                              // 23914
 *                                                                                                                     // 23915
 * @element window, input, select, textarea, a                                                                         // 23916
 * @priority 0                                                                                                         // 23917
 * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon                                     // 23918
 * copy. ({@link guide/expression#-event- Event object is available as `$event`})                                      // 23919
 *                                                                                                                     // 23920
 * @example                                                                                                            // 23921
   <example>                                                                                                           // 23922
     <file name="index.html">                                                                                          // 23923
      <input ng-copy="copied=true" ng-init="copied=false; value='copy me'" ng-model="value">                           // 23924
      copied: {{copied}}                                                                                               // 23925
     </file>                                                                                                           // 23926
   </example>                                                                                                          // 23927
 */                                                                                                                    // 23928
                                                                                                                       // 23929
/**                                                                                                                    // 23930
 * @ngdoc directive                                                                                                    // 23931
 * @name ngCut                                                                                                         // 23932
 *                                                                                                                     // 23933
 * @description                                                                                                        // 23934
 * Specify custom behavior on cut event.                                                                               // 23935
 *                                                                                                                     // 23936
 * @element window, input, select, textarea, a                                                                         // 23937
 * @priority 0                                                                                                         // 23938
 * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon                                      // 23939
 * cut. ({@link guide/expression#-event- Event object is available as `$event`})                                       // 23940
 *                                                                                                                     // 23941
 * @example                                                                                                            // 23942
   <example>                                                                                                           // 23943
     <file name="index.html">                                                                                          // 23944
      <input ng-cut="cut=true" ng-init="cut=false; value='cut me'" ng-model="value">                                   // 23945
      cut: {{cut}}                                                                                                     // 23946
     </file>                                                                                                           // 23947
   </example>                                                                                                          // 23948
 */                                                                                                                    // 23949
                                                                                                                       // 23950
/**                                                                                                                    // 23951
 * @ngdoc directive                                                                                                    // 23952
 * @name ngPaste                                                                                                       // 23953
 *                                                                                                                     // 23954
 * @description                                                                                                        // 23955
 * Specify custom behavior on paste event.                                                                             // 23956
 *                                                                                                                     // 23957
 * @element window, input, select, textarea, a                                                                         // 23958
 * @priority 0                                                                                                         // 23959
 * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon                                    // 23960
 * paste. ({@link guide/expression#-event- Event object is available as `$event`})                                     // 23961
 *                                                                                                                     // 23962
 * @example                                                                                                            // 23963
   <example>                                                                                                           // 23964
     <file name="index.html">                                                                                          // 23965
      <input ng-paste="paste=true" ng-init="paste=false" placeholder='paste here'>                                     // 23966
      pasted: {{paste}}                                                                                                // 23967
     </file>                                                                                                           // 23968
   </example>                                                                                                          // 23969
 */                                                                                                                    // 23970
                                                                                                                       // 23971
/**                                                                                                                    // 23972
 * @ngdoc directive                                                                                                    // 23973
 * @name ngIf                                                                                                          // 23974
 * @restrict A                                                                                                         // 23975
 * @multiElement                                                                                                       // 23976
 *                                                                                                                     // 23977
 * @description                                                                                                        // 23978
 * The `ngIf` directive removes or recreates a portion of the DOM tree based on an                                     // 23979
 * {expression}. If the expression assigned to `ngIf` evaluates to a false                                             // 23980
 * value then the element is removed from the DOM, otherwise a clone of the                                            // 23981
 * element is reinserted into the DOM.                                                                                 // 23982
 *                                                                                                                     // 23983
 * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the                       // 23984
 * element in the DOM rather than changing its visibility via the `display` css property.  A common                    // 23985
 * case when this difference is significant is when using css selectors that rely on an element's                      // 23986
 * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.                                // 23987
 *                                                                                                                     // 23988
 * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope                            // 23989
 * is created when the element is restored.  The scope created within `ngIf` inherits from                             // 23990
 * its parent scope using                                                                                              // 23991
 * [prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).
 * An important implication of this is if `ngModel` is used within `ngIf` to bind to                                   // 23993
 * a javascript primitive defined in the parent scope. In this case any modifications made to the                      // 23994
 * variable within the child scope will override (hide) the value in the parent scope.                                 // 23995
 *                                                                                                                     // 23996
 * Also, `ngIf` recreates elements using their compiled state. An example of this behavior                             // 23997
 * is if an element's class attribute is directly modified after it's compiled, using something like                   // 23998
 * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element                  // 23999
 * the added class will be lost because the original compiled state is used to regenerate the element.                 // 24000
 *                                                                                                                     // 24001
 * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`                          // 24002
 * and `leave` effects.                                                                                                // 24003
 *                                                                                                                     // 24004
 * @animations                                                                                                         // 24005
 * enter - happens just after the `ngIf` contents change and a new DOM element is created and injected into the `ngIf` container
 * leave - happens just before the `ngIf` contents are removed from the DOM                                            // 24007
 *                                                                                                                     // 24008
 * @element ANY                                                                                                        // 24009
 * @scope                                                                                                              // 24010
 * @priority 600                                                                                                       // 24011
 * @param {expression} ngIf If the {@link guide/expression expression} is falsy then                                   // 24012
 *     the element is removed from the DOM tree. If it is truthy a copy of the compiled                                // 24013
 *     element is added to the DOM tree.                                                                               // 24014
 *                                                                                                                     // 24015
 * @example                                                                                                            // 24016
  <example module="ngAnimate" deps="angular-animate.js" animations="true">                                             // 24017
    <file name="index.html">                                                                                           // 24018
      <label>Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /></label><br/>                // 24019
      Show when checked:                                                                                               // 24020
      <span ng-if="checked" class="animate-if">                                                                        // 24021
        This is removed when the checkbox is unchecked.                                                                // 24022
      </span>                                                                                                          // 24023
    </file>                                                                                                            // 24024
    <file name="animations.css">                                                                                       // 24025
      .animate-if {                                                                                                    // 24026
        background:white;                                                                                              // 24027
        border:1px solid black;                                                                                        // 24028
        padding:10px;                                                                                                  // 24029
      }                                                                                                                // 24030
                                                                                                                       // 24031
      .animate-if.ng-enter, .animate-if.ng-leave {                                                                     // 24032
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;                                                  // 24033
      }                                                                                                                // 24034
                                                                                                                       // 24035
      .animate-if.ng-enter,                                                                                            // 24036
      .animate-if.ng-leave.ng-leave-active {                                                                           // 24037
        opacity:0;                                                                                                     // 24038
      }                                                                                                                // 24039
                                                                                                                       // 24040
      .animate-if.ng-leave,                                                                                            // 24041
      .animate-if.ng-enter.ng-enter-active {                                                                           // 24042
        opacity:1;                                                                                                     // 24043
      }                                                                                                                // 24044
    </file>                                                                                                            // 24045
  </example>                                                                                                           // 24046
 */                                                                                                                    // 24047
var ngIfDirective = ['$animate', function($animate) {                                                                  // 24048
  return {                                                                                                             // 24049
    multiElement: true,                                                                                                // 24050
    transclude: 'element',                                                                                             // 24051
    priority: 600,                                                                                                     // 24052
    terminal: true,                                                                                                    // 24053
    restrict: 'A',                                                                                                     // 24054
    $$tlb: true,                                                                                                       // 24055
    link: function($scope, $element, $attr, ctrl, $transclude) {                                                       // 24056
        var block, childScope, previousElements;                                                                       // 24057
        $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {                                                    // 24058
                                                                                                                       // 24059
          if (value) {                                                                                                 // 24060
            if (!childScope) {                                                                                         // 24061
              $transclude(function(clone, newScope) {                                                                  // 24062
                childScope = newScope;                                                                                 // 24063
                clone[clone.length++] = document.createComment(' end ngIf: ' + $attr.ngIf + ' ');                      // 24064
                // Note: We only need the first/last node of the cloned nodes.                                         // 24065
                // However, we need to keep the reference to the jqlite wrapper as it might be changed later           // 24066
                // by a directive with templateUrl when its template arrives.                                          // 24067
                block = {                                                                                              // 24068
                  clone: clone                                                                                         // 24069
                };                                                                                                     // 24070
                $animate.enter(clone, $element.parent(), $element);                                                    // 24071
              });                                                                                                      // 24072
            }                                                                                                          // 24073
          } else {                                                                                                     // 24074
            if (previousElements) {                                                                                    // 24075
              previousElements.remove();                                                                               // 24076
              previousElements = null;                                                                                 // 24077
            }                                                                                                          // 24078
            if (childScope) {                                                                                          // 24079
              childScope.$destroy();                                                                                   // 24080
              childScope = null;                                                                                       // 24081
            }                                                                                                          // 24082
            if (block) {                                                                                               // 24083
              previousElements = getBlockNodes(block.clone);                                                           // 24084
              $animate.leave(previousElements).then(function() {                                                       // 24085
                previousElements = null;                                                                               // 24086
              });                                                                                                      // 24087
              block = null;                                                                                            // 24088
            }                                                                                                          // 24089
          }                                                                                                            // 24090
        });                                                                                                            // 24091
    }                                                                                                                  // 24092
  };                                                                                                                   // 24093
}];                                                                                                                    // 24094
                                                                                                                       // 24095
/**                                                                                                                    // 24096
 * @ngdoc directive                                                                                                    // 24097
 * @name ngInclude                                                                                                     // 24098
 * @restrict ECA                                                                                                       // 24099
 *                                                                                                                     // 24100
 * @description                                                                                                        // 24101
 * Fetches, compiles and includes an external HTML fragment.                                                           // 24102
 *                                                                                                                     // 24103
 * By default, the template URL is restricted to the same domain and protocol as the                                   // 24104
 * application document. This is done by calling {@link $sce#getTrustedResourceUrl                                     // 24105
 * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols                                // 24106
 * you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or                               // 24107
 * {@link $sce#trustAsResourceUrl wrap them} as trusted values. Refer to Angular's {@link                              // 24108
 * ng.$sce Strict Contextual Escaping}.                                                                                // 24109
 *                                                                                                                     // 24110
 * In addition, the browser's                                                                                          // 24111
 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)         // 24112
 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)                                              // 24113
 * policy may further restrict whether the template is successfully loaded.                                            // 24114
 * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`                     // 24115
 * access on some browsers.                                                                                            // 24116
 *                                                                                                                     // 24117
 * @animations                                                                                                         // 24118
 * enter - animation is used to bring new content into the browser.                                                    // 24119
 * leave - animation is used to animate existing content away.                                                         // 24120
 *                                                                                                                     // 24121
 * The enter and leave animation occur concurrently.                                                                   // 24122
 *                                                                                                                     // 24123
 * @scope                                                                                                              // 24124
 * @priority 400                                                                                                       // 24125
 *                                                                                                                     // 24126
 * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,             // 24127
 *                 make sure you wrap it in **single** quotes, e.g. `src="'myPartialTemplate.html'"`.                  // 24128
 * @param {string=} onload Expression to evaluate when a new partial is loaded.                                        // 24129
 *                                                                                                                     // 24130
 * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll                                 // 24131
 *                  $anchorScroll} to scroll the viewport after the content is loaded.                                 // 24132
 *                                                                                                                     // 24133
 *                  - If the attribute is not set, disable scrolling.                                                  // 24134
 *                  - If the attribute is set without value, enable scrolling.                                         // 24135
 *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.                     // 24136
 *                                                                                                                     // 24137
 * @example                                                                                                            // 24138
  <example module="includeExample" deps="angular-animate.js" animations="true">                                        // 24139
    <file name="index.html">                                                                                           // 24140
     <div ng-controller="ExampleController">                                                                           // 24141
       <select ng-model="template" ng-options="t.name for t in templates">                                             // 24142
        <option value="">(blank)</option>                                                                              // 24143
       </select>                                                                                                       // 24144
       url of the template: <code>{{template.url}}</code>                                                              // 24145
       <hr/>                                                                                                           // 24146
       <div class="slide-animate-container">                                                                           // 24147
         <div class="slide-animate" ng-include="template.url"></div>                                                   // 24148
       </div>                                                                                                          // 24149
     </div>                                                                                                            // 24150
    </file>                                                                                                            // 24151
    <file name="script.js">                                                                                            // 24152
      angular.module('includeExample', ['ngAnimate'])                                                                  // 24153
        .controller('ExampleController', ['$scope', function($scope) {                                                 // 24154
          $scope.templates =                                                                                           // 24155
            [ { name: 'template1.html', url: 'template1.html'},                                                        // 24156
              { name: 'template2.html', url: 'template2.html'} ];                                                      // 24157
          $scope.template = $scope.templates[0];                                                                       // 24158
        }]);                                                                                                           // 24159
     </file>                                                                                                           // 24160
    <file name="template1.html">                                                                                       // 24161
      Content of template1.html                                                                                        // 24162
    </file>                                                                                                            // 24163
    <file name="template2.html">                                                                                       // 24164
      Content of template2.html                                                                                        // 24165
    </file>                                                                                                            // 24166
    <file name="animations.css">                                                                                       // 24167
      .slide-animate-container {                                                                                       // 24168
        position:relative;                                                                                             // 24169
        background:white;                                                                                              // 24170
        border:1px solid black;                                                                                        // 24171
        height:40px;                                                                                                   // 24172
        overflow:hidden;                                                                                               // 24173
      }                                                                                                                // 24174
                                                                                                                       // 24175
      .slide-animate {                                                                                                 // 24176
        padding:10px;                                                                                                  // 24177
      }                                                                                                                // 24178
                                                                                                                       // 24179
      .slide-animate.ng-enter, .slide-animate.ng-leave {                                                               // 24180
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;                                                  // 24181
                                                                                                                       // 24182
        position:absolute;                                                                                             // 24183
        top:0;                                                                                                         // 24184
        left:0;                                                                                                        // 24185
        right:0;                                                                                                       // 24186
        bottom:0;                                                                                                      // 24187
        display:block;                                                                                                 // 24188
        padding:10px;                                                                                                  // 24189
      }                                                                                                                // 24190
                                                                                                                       // 24191
      .slide-animate.ng-enter {                                                                                        // 24192
        top:-50px;                                                                                                     // 24193
      }                                                                                                                // 24194
      .slide-animate.ng-enter.ng-enter-active {                                                                        // 24195
        top:0;                                                                                                         // 24196
      }                                                                                                                // 24197
                                                                                                                       // 24198
      .slide-animate.ng-leave {                                                                                        // 24199
        top:0;                                                                                                         // 24200
      }                                                                                                                // 24201
      .slide-animate.ng-leave.ng-leave-active {                                                                        // 24202
        top:50px;                                                                                                      // 24203
      }                                                                                                                // 24204
    </file>                                                                                                            // 24205
    <file name="protractor.js" type="protractor">                                                                      // 24206
      var templateSelect = element(by.model('template'));                                                              // 24207
      var includeElem = element(by.css('[ng-include]'));                                                               // 24208
                                                                                                                       // 24209
      it('should load template1.html', function() {                                                                    // 24210
        expect(includeElem.getText()).toMatch(/Content of template1.html/);                                            // 24211
      });                                                                                                              // 24212
                                                                                                                       // 24213
      it('should load template2.html', function() {                                                                    // 24214
        if (browser.params.browser == 'firefox') {                                                                     // 24215
          // Firefox can't handle using selects                                                                        // 24216
          // See https://github.com/angular/protractor/issues/480                                                      // 24217
          return;                                                                                                      // 24218
        }                                                                                                              // 24219
        templateSelect.click();                                                                                        // 24220
        templateSelect.all(by.css('option')).get(2).click();                                                           // 24221
        expect(includeElem.getText()).toMatch(/Content of template2.html/);                                            // 24222
      });                                                                                                              // 24223
                                                                                                                       // 24224
      it('should change to blank', function() {                                                                        // 24225
        if (browser.params.browser == 'firefox') {                                                                     // 24226
          // Firefox can't handle using selects                                                                        // 24227
          return;                                                                                                      // 24228
        }                                                                                                              // 24229
        templateSelect.click();                                                                                        // 24230
        templateSelect.all(by.css('option')).get(0).click();                                                           // 24231
        expect(includeElem.isPresent()).toBe(false);                                                                   // 24232
      });                                                                                                              // 24233
    </file>                                                                                                            // 24234
  </example>                                                                                                           // 24235
 */                                                                                                                    // 24236
                                                                                                                       // 24237
                                                                                                                       // 24238
/**                                                                                                                    // 24239
 * @ngdoc event                                                                                                        // 24240
 * @name ngInclude#$includeContentRequested                                                                            // 24241
 * @eventType emit on the scope ngInclude was declared in                                                              // 24242
 * @description                                                                                                        // 24243
 * Emitted every time the ngInclude content is requested.                                                              // 24244
 *                                                                                                                     // 24245
 * @param {Object} angularEvent Synthetic event object.                                                                // 24246
 * @param {String} src URL of content to load.                                                                         // 24247
 */                                                                                                                    // 24248
                                                                                                                       // 24249
                                                                                                                       // 24250
/**                                                                                                                    // 24251
 * @ngdoc event                                                                                                        // 24252
 * @name ngInclude#$includeContentLoaded                                                                               // 24253
 * @eventType emit on the current ngInclude scope                                                                      // 24254
 * @description                                                                                                        // 24255
 * Emitted every time the ngInclude content is reloaded.                                                               // 24256
 *                                                                                                                     // 24257
 * @param {Object} angularEvent Synthetic event object.                                                                // 24258
 * @param {String} src URL of content to load.                                                                         // 24259
 */                                                                                                                    // 24260
                                                                                                                       // 24261
                                                                                                                       // 24262
/**                                                                                                                    // 24263
 * @ngdoc event                                                                                                        // 24264
 * @name ngInclude#$includeContentError                                                                                // 24265
 * @eventType emit on the scope ngInclude was declared in                                                              // 24266
 * @description                                                                                                        // 24267
 * Emitted when a template HTTP request yields an erroneous response (status < 200 || status > 299)                    // 24268
 *                                                                                                                     // 24269
 * @param {Object} angularEvent Synthetic event object.                                                                // 24270
 * @param {String} src URL of content to load.                                                                         // 24271
 */                                                                                                                    // 24272
var ngIncludeDirective = ['$templateRequest', '$anchorScroll', '$animate',                                             // 24273
                  function($templateRequest,   $anchorScroll,   $animate) {                                            // 24274
  return {                                                                                                             // 24275
    restrict: 'ECA',                                                                                                   // 24276
    priority: 400,                                                                                                     // 24277
    terminal: true,                                                                                                    // 24278
    transclude: 'element',                                                                                             // 24279
    controller: angular.noop,                                                                                          // 24280
    compile: function(element, attr) {                                                                                 // 24281
      var srcExp = attr.ngInclude || attr.src,                                                                         // 24282
          onloadExp = attr.onload || '',                                                                               // 24283
          autoScrollExp = attr.autoscroll;                                                                             // 24284
                                                                                                                       // 24285
      return function(scope, $element, $attr, ctrl, $transclude) {                                                     // 24286
        var changeCounter = 0,                                                                                         // 24287
            currentScope,                                                                                              // 24288
            previousElement,                                                                                           // 24289
            currentElement;                                                                                            // 24290
                                                                                                                       // 24291
        var cleanupLastIncludeContent = function() {                                                                   // 24292
          if (previousElement) {                                                                                       // 24293
            previousElement.remove();                                                                                  // 24294
            previousElement = null;                                                                                    // 24295
          }                                                                                                            // 24296
          if (currentScope) {                                                                                          // 24297
            currentScope.$destroy();                                                                                   // 24298
            currentScope = null;                                                                                       // 24299
          }                                                                                                            // 24300
          if (currentElement) {                                                                                        // 24301
            $animate.leave(currentElement).then(function() {                                                           // 24302
              previousElement = null;                                                                                  // 24303
            });                                                                                                        // 24304
            previousElement = currentElement;                                                                          // 24305
            currentElement = null;                                                                                     // 24306
          }                                                                                                            // 24307
        };                                                                                                             // 24308
                                                                                                                       // 24309
        scope.$watch(srcExp, function ngIncludeWatchAction(src) {                                                      // 24310
          var afterAnimation = function() {                                                                            // 24311
            if (isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {                          // 24312
              $anchorScroll();                                                                                         // 24313
            }                                                                                                          // 24314
          };                                                                                                           // 24315
          var thisChangeId = ++changeCounter;                                                                          // 24316
                                                                                                                       // 24317
          if (src) {                                                                                                   // 24318
            //set the 2nd param to true to ignore the template request error so that the inner                         // 24319
            //contents and scope can be cleaned up.                                                                    // 24320
            $templateRequest(src, true).then(function(response) {                                                      // 24321
              if (thisChangeId !== changeCounter) return;                                                              // 24322
              var newScope = scope.$new();                                                                             // 24323
              ctrl.template = response;                                                                                // 24324
                                                                                                                       // 24325
              // Note: This will also link all children of ng-include that were contained in the original              // 24326
              // html. If that content contains controllers, ... they could pollute/change the scope.                  // 24327
              // However, using ng-include on an element with additional content does not make sense...                // 24328
              // Note: We can't remove them in the cloneAttchFn of $transclude as that                                 // 24329
              // function is called before linking the content, which would apply child                                // 24330
              // directives to non existing elements.                                                                  // 24331
              var clone = $transclude(newScope, function(clone) {                                                      // 24332
                cleanupLastIncludeContent();                                                                           // 24333
                $animate.enter(clone, null, $element).then(afterAnimation);                                            // 24334
              });                                                                                                      // 24335
                                                                                                                       // 24336
              currentScope = newScope;                                                                                 // 24337
              currentElement = clone;                                                                                  // 24338
                                                                                                                       // 24339
              currentScope.$emit('$includeContentLoaded', src);                                                        // 24340
              scope.$eval(onloadExp);                                                                                  // 24341
            }, function() {                                                                                            // 24342
              if (thisChangeId === changeCounter) {                                                                    // 24343
                cleanupLastIncludeContent();                                                                           // 24344
                scope.$emit('$includeContentError', src);                                                              // 24345
              }                                                                                                        // 24346
            });                                                                                                        // 24347
            scope.$emit('$includeContentRequested', src);                                                              // 24348
          } else {                                                                                                     // 24349
            cleanupLastIncludeContent();                                                                               // 24350
            ctrl.template = null;                                                                                      // 24351
          }                                                                                                            // 24352
        });                                                                                                            // 24353
      };                                                                                                               // 24354
    }                                                                                                                  // 24355
  };                                                                                                                   // 24356
}];                                                                                                                    // 24357
                                                                                                                       // 24358
// This directive is called during the $transclude call of the first `ngInclude` directive.                            // 24359
// It will replace and compile the content of the element with the loaded template.                                    // 24360
// We need this directive so that the element content is already filled when                                           // 24361
// the link function of another directive on the same element as ngInclude                                             // 24362
// is called.                                                                                                          // 24363
var ngIncludeFillContentDirective = ['$compile',                                                                       // 24364
  function($compile) {                                                                                                 // 24365
    return {                                                                                                           // 24366
      restrict: 'ECA',                                                                                                 // 24367
      priority: -400,                                                                                                  // 24368
      require: 'ngInclude',                                                                                            // 24369
      link: function(scope, $element, $attr, ctrl) {                                                                   // 24370
        if (/SVG/.test($element[0].toString())) {                                                                      // 24371
          // WebKit: https://bugs.webkit.org/show_bug.cgi?id=135698 --- SVG elements do not                            // 24372
          // support innerHTML, so detect this here and try to generate the contents                                   // 24373
          // specially.                                                                                                // 24374
          $element.empty();                                                                                            // 24375
          $compile(jqLiteBuildFragment(ctrl.template, document).childNodes)(scope,                                     // 24376
              function namespaceAdaptedClone(clone) {                                                                  // 24377
            $element.append(clone);                                                                                    // 24378
          }, {futureParentElement: $element});                                                                         // 24379
          return;                                                                                                      // 24380
        }                                                                                                              // 24381
                                                                                                                       // 24382
        $element.html(ctrl.template);                                                                                  // 24383
        $compile($element.contents())(scope);                                                                          // 24384
      }                                                                                                                // 24385
    };                                                                                                                 // 24386
  }];                                                                                                                  // 24387
                                                                                                                       // 24388
/**                                                                                                                    // 24389
 * @ngdoc directive                                                                                                    // 24390
 * @name ngInit                                                                                                        // 24391
 * @restrict AC                                                                                                        // 24392
 *                                                                                                                     // 24393
 * @description                                                                                                        // 24394
 * The `ngInit` directive allows you to evaluate an expression in the                                                  // 24395
 * current scope.                                                                                                      // 24396
 *                                                                                                                     // 24397
 * <div class="alert alert-danger">                                                                                    // 24398
 * This directive can be abused to add unnecessary amounts of logic into your templates.                               // 24399
 * There are only a few appropriate uses of `ngInit`, such as for aliasing special properties of                       // 24400
 * {@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below; and for injecting data via                     // 24401
 * server side scripting. Besides these few cases, you should use {@link guide/controller controllers}                 // 24402
 * rather than `ngInit` to initialize values on a scope.                                                               // 24403
 * </div>                                                                                                              // 24404
 *                                                                                                                     // 24405
 * <div class="alert alert-warning">                                                                                   // 24406
 * **Note**: If you have assignment in `ngInit` along with a {@link ng.$filter `filter`}, make                         // 24407
 * sure you have parentheses to ensure correct operator precedence:                                                    // 24408
 * <pre class="prettyprint">                                                                                           // 24409
 * `<div ng-init="test1 = ($index | toString)"></div>`                                                                 // 24410
 * </pre>                                                                                                              // 24411
 * </div>                                                                                                              // 24412
 *                                                                                                                     // 24413
 * @priority 450                                                                                                       // 24414
 *                                                                                                                     // 24415
 * @element ANY                                                                                                        // 24416
 * @param {expression} ngInit {@link guide/expression Expression} to eval.                                             // 24417
 *                                                                                                                     // 24418
 * @example                                                                                                            // 24419
   <example module="initExample">                                                                                      // 24420
     <file name="index.html">                                                                                          // 24421
   <script>                                                                                                            // 24422
     angular.module('initExample', [])                                                                                 // 24423
       .controller('ExampleController', ['$scope', function($scope) {                                                  // 24424
         $scope.list = [['a', 'b'], ['c', 'd']];                                                                       // 24425
       }]);                                                                                                            // 24426
   </script>                                                                                                           // 24427
   <div ng-controller="ExampleController">                                                                             // 24428
     <div ng-repeat="innerList in list" ng-init="outerIndex = $index">                                                 // 24429
       <div ng-repeat="value in innerList" ng-init="innerIndex = $index">                                              // 24430
          <span class="example-init">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>                      // 24431
       </div>                                                                                                          // 24432
     </div>                                                                                                            // 24433
   </div>                                                                                                              // 24434
     </file>                                                                                                           // 24435
     <file name="protractor.js" type="protractor">                                                                     // 24436
       it('should alias index positions', function() {                                                                 // 24437
         var elements = element.all(by.css('.example-init'));                                                          // 24438
         expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');                                                // 24439
         expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');                                                // 24440
         expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');                                                // 24441
         expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');                                                // 24442
       });                                                                                                             // 24443
     </file>                                                                                                           // 24444
   </example>                                                                                                          // 24445
 */                                                                                                                    // 24446
var ngInitDirective = ngDirective({                                                                                    // 24447
  priority: 450,                                                                                                       // 24448
  compile: function() {                                                                                                // 24449
    return {                                                                                                           // 24450
      pre: function(scope, element, attrs) {                                                                           // 24451
        scope.$eval(attrs.ngInit);                                                                                     // 24452
      }                                                                                                                // 24453
    };                                                                                                                 // 24454
  }                                                                                                                    // 24455
});                                                                                                                    // 24456
                                                                                                                       // 24457
/**                                                                                                                    // 24458
 * @ngdoc directive                                                                                                    // 24459
 * @name ngList                                                                                                        // 24460
 *                                                                                                                     // 24461
 * @description                                                                                                        // 24462
 * Text input that converts between a delimited string and an array of strings. The default                            // 24463
 * delimiter is a comma followed by a space - equivalent to `ng-list=", "`. You can specify a custom                   // 24464
 * delimiter as the value of the `ngList` attribute - for example, `ng-list=" | "`.                                    // 24465
 *                                                                                                                     // 24466
 * The behaviour of the directive is affected by the use of the `ngTrim` attribute.                                    // 24467
 * * If `ngTrim` is set to `"false"` then whitespace around both the separator and each                                // 24468
 *   list item is respected. This implies that the user of the directive is responsible for                            // 24469
 *   dealing with whitespace but also allows you to use whitespace as a delimiter, such as a                           // 24470
 *   tab or newline character.                                                                                         // 24471
 * * Otherwise whitespace around the delimiter is ignored when splitting (although it is respected                     // 24472
 *   when joining the list items back together) and whitespace around each list item is stripped                       // 24473
 *   before it is added to the model.                                                                                  // 24474
 *                                                                                                                     // 24475
 * ### Example with Validation                                                                                         // 24476
 *                                                                                                                     // 24477
 * <example name="ngList-directive" module="listExample">                                                              // 24478
 *   <file name="app.js">                                                                                              // 24479
 *      angular.module('listExample', [])                                                                              // 24480
 *        .controller('ExampleController', ['$scope', function($scope) {                                               // 24481
 *          $scope.names = ['morpheus', 'neo', 'trinity'];                                                             // 24482
 *        }]);                                                                                                         // 24483
 *   </file>                                                                                                           // 24484
 *   <file name="index.html">                                                                                          // 24485
 *    <form name="myForm" ng-controller="ExampleController">                                                           // 24486
 *      <label>List: <input name="namesInput" ng-model="names" ng-list required></label>                               // 24487
 *      <span role="alert">                                                                                            // 24488
 *        <span class="error" ng-show="myForm.namesInput.$error.required">                                             // 24489
 *        Required!</span>                                                                                             // 24490
 *      </span>                                                                                                        // 24491
 *      <br>                                                                                                           // 24492
 *      <tt>names = {{names}}</tt><br/>                                                                                // 24493
 *      <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>                                          // 24494
 *      <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>                                          // 24495
 *      <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                // 24496
 *      <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                            // 24497
 *     </form>                                                                                                         // 24498
 *   </file>                                                                                                           // 24499
 *   <file name="protractor.js" type="protractor">                                                                     // 24500
 *     var listInput = element(by.model('names'));                                                                     // 24501
 *     var names = element(by.exactBinding('names'));                                                                  // 24502
 *     var valid = element(by.binding('myForm.namesInput.$valid'));                                                    // 24503
 *     var error = element(by.css('span.error'));                                                                      // 24504
 *                                                                                                                     // 24505
 *     it('should initialize to model', function() {                                                                   // 24506
 *       expect(names.getText()).toContain('["morpheus","neo","trinity"]');                                            // 24507
 *       expect(valid.getText()).toContain('true');                                                                    // 24508
 *       expect(error.getCssValue('display')).toBe('none');                                                            // 24509
 *     });                                                                                                             // 24510
 *                                                                                                                     // 24511
 *     it('should be invalid if empty', function() {                                                                   // 24512
 *       listInput.clear();                                                                                            // 24513
 *       listInput.sendKeys('');                                                                                       // 24514
 *                                                                                                                     // 24515
 *       expect(names.getText()).toContain('');                                                                        // 24516
 *       expect(valid.getText()).toContain('false');                                                                   // 24517
 *       expect(error.getCssValue('display')).not.toBe('none');                                                        // 24518
 *     });                                                                                                             // 24519
 *   </file>                                                                                                           // 24520
 * </example>                                                                                                          // 24521
 *                                                                                                                     // 24522
 * ### Example - splitting on newline                                                                                  // 24523
 * <example name="ngList-directive-newlines">                                                                          // 24524
 *   <file name="index.html">                                                                                          // 24525
 *    <textarea ng-model="list" ng-list="&#10;" ng-trim="false"></textarea>                                            // 24526
 *    <pre>{{ list | json }}</pre>                                                                                     // 24527
 *   </file>                                                                                                           // 24528
 *   <file name="protractor.js" type="protractor">                                                                     // 24529
 *     it("should split the text by newlines", function() {                                                            // 24530
 *       var listInput = element(by.model('list'));                                                                    // 24531
 *       var output = element(by.binding('list | json'));                                                              // 24532
 *       listInput.sendKeys('abc\ndef\nghi');                                                                          // 24533
 *       expect(output.getText()).toContain('[\n  "abc",\n  "def",\n  "ghi"\n]');                                      // 24534
 *     });                                                                                                             // 24535
 *   </file>                                                                                                           // 24536
 * </example>                                                                                                          // 24537
 *                                                                                                                     // 24538
 * @element input                                                                                                      // 24539
 * @param {string=} ngList optional delimiter that should be used to split the value.                                  // 24540
 */                                                                                                                    // 24541
var ngListDirective = function() {                                                                                     // 24542
  return {                                                                                                             // 24543
    restrict: 'A',                                                                                                     // 24544
    priority: 100,                                                                                                     // 24545
    require: 'ngModel',                                                                                                // 24546
    link: function(scope, element, attr, ctrl) {                                                                       // 24547
      // We want to control whitespace trimming so we use this convoluted approach                                     // 24548
      // to access the ngList attribute, which doesn't pre-trim the attribute                                          // 24549
      var ngList = element.attr(attr.$attr.ngList) || ', ';                                                            // 24550
      var trimValues = attr.ngTrim !== 'false';                                                                        // 24551
      var separator = trimValues ? trim(ngList) : ngList;                                                              // 24552
                                                                                                                       // 24553
      var parse = function(viewValue) {                                                                                // 24554
        // If the viewValue is invalid (say required but empty) it will be `undefined`                                 // 24555
        if (isUndefined(viewValue)) return;                                                                            // 24556
                                                                                                                       // 24557
        var list = [];                                                                                                 // 24558
                                                                                                                       // 24559
        if (viewValue) {                                                                                               // 24560
          forEach(viewValue.split(separator), function(value) {                                                        // 24561
            if (value) list.push(trimValues ? trim(value) : value);                                                    // 24562
          });                                                                                                          // 24563
        }                                                                                                              // 24564
                                                                                                                       // 24565
        return list;                                                                                                   // 24566
      };                                                                                                               // 24567
                                                                                                                       // 24568
      ctrl.$parsers.push(parse);                                                                                       // 24569
      ctrl.$formatters.push(function(value) {                                                                          // 24570
        if (isArray(value)) {                                                                                          // 24571
          return value.join(ngList);                                                                                   // 24572
        }                                                                                                              // 24573
                                                                                                                       // 24574
        return undefined;                                                                                              // 24575
      });                                                                                                              // 24576
                                                                                                                       // 24577
      // Override the standard $isEmpty because an empty array means the input is empty.                               // 24578
      ctrl.$isEmpty = function(value) {                                                                                // 24579
        return !value || !value.length;                                                                                // 24580
      };                                                                                                               // 24581
    }                                                                                                                  // 24582
  };                                                                                                                   // 24583
};                                                                                                                     // 24584
                                                                                                                       // 24585
/* global VALID_CLASS: true,                                                                                           // 24586
  INVALID_CLASS: true,                                                                                                 // 24587
  PRISTINE_CLASS: true,                                                                                                // 24588
  DIRTY_CLASS: true,                                                                                                   // 24589
  UNTOUCHED_CLASS: true,                                                                                               // 24590
  TOUCHED_CLASS: true,                                                                                                 // 24591
*/                                                                                                                     // 24592
                                                                                                                       // 24593
var VALID_CLASS = 'ng-valid',                                                                                          // 24594
    INVALID_CLASS = 'ng-invalid',                                                                                      // 24595
    PRISTINE_CLASS = 'ng-pristine',                                                                                    // 24596
    DIRTY_CLASS = 'ng-dirty',                                                                                          // 24597
    UNTOUCHED_CLASS = 'ng-untouched',                                                                                  // 24598
    TOUCHED_CLASS = 'ng-touched',                                                                                      // 24599
    PENDING_CLASS = 'ng-pending';                                                                                      // 24600
                                                                                                                       // 24601
var ngModelMinErr = minErr('ngModel');                                                                                 // 24602
                                                                                                                       // 24603
/**                                                                                                                    // 24604
 * @ngdoc type                                                                                                         // 24605
 * @name ngModel.NgModelController                                                                                     // 24606
 *                                                                                                                     // 24607
 * @property {*} $viewValue The actual value from the control's view. For `input` elements, this is a                  // 24608
 * String. See {@link ngModel.NgModelController#$setViewValue} for information about when the $viewValue               // 24609
 * is set.                                                                                                             // 24610
 * @property {*} $modelValue The value in the model that the control is bound to.                                      // 24611
 * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever                        // 24612
       the control reads value from the DOM. The functions are called in array order, each passing                     // 24613
       its return value through to the next. The last return value is forwarded to the                                 // 24614
       {@link ngModel.NgModelController#$validators `$validators`} collection.                                         // 24615
                                                                                                                       // 24616
Parsers are used to sanitize / convert the {@link ngModel.NgModelController#$viewValue                                 // 24617
`$viewValue`}.                                                                                                         // 24618
                                                                                                                       // 24619
Returning `undefined` from a parser means a parse error occurred. In that case,                                        // 24620
no {@link ngModel.NgModelController#$validators `$validators`} will run and the `ngModel`                              // 24621
will be set to `undefined` unless {@link ngModelOptions `ngModelOptions.allowInvalid`}                                 // 24622
is set to `true`. The parse error is stored in `ngModel.$error.parse`.                                                 // 24623
                                                                                                                       // 24624
 *                                                                                                                     // 24625
 * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever                     // 24626
       the model value changes. The functions are called in reverse array order, each passing the value through to the
       next. The last return value is used as the actual DOM value.                                                    // 24628
       Used to format / convert values for display in the control.                                                     // 24629
 * ```js                                                                                                               // 24630
 * function formatter(value) {                                                                                         // 24631
 *   if (value) {                                                                                                      // 24632
 *     return value.toUpperCase();                                                                                     // 24633
 *   }                                                                                                                 // 24634
 * }                                                                                                                   // 24635
 * ngModel.$formatters.push(formatter);                                                                                // 24636
 * ```                                                                                                                 // 24637
 *                                                                                                                     // 24638
 * @property {Object.<string, function>} $validators A collection of validators that are applied                       // 24639
 *      whenever the model value changes. The key value within the object refers to the name of the                    // 24640
 *      validator while the function refers to the validation operation. The validation operation is                   // 24641
 *      provided with the model value as an argument and must return a true or false value depending                   // 24642
 *      on the response of that validation.                                                                            // 24643
 *                                                                                                                     // 24644
 * ```js                                                                                                               // 24645
 * ngModel.$validators.validCharacters = function(modelValue, viewValue) {                                             // 24646
 *   var value = modelValue || viewValue;                                                                              // 24647
 *   return /[0-9]+/.test(value) &&                                                                                    // 24648
 *          /[a-z]+/.test(value) &&                                                                                    // 24649
 *          /[A-Z]+/.test(value) &&                                                                                    // 24650
 *          /\W+/.test(value);                                                                                         // 24651
 * };                                                                                                                  // 24652
 * ```                                                                                                                 // 24653
 *                                                                                                                     // 24654
 * @property {Object.<string, function>} $asyncValidators A collection of validations that are expected to             // 24655
 *      perform an asynchronous validation (e.g. a HTTP request). The validation function that is provided             // 24656
 *      is expected to return a promise when it is run during the model validation process. Once the promise           // 24657
 *      is delivered then the validation status will be set to true when fulfilled and false when rejected.            // 24658
 *      When the asynchronous validators are triggered, each of the validators will run in parallel and the model      // 24659
 *      value will only be updated once all validators have been fulfilled. As long as an asynchronous validator       // 24660
 *      is unfulfilled, its key will be added to the controllers `$pending` property. Also, all asynchronous validators
 *      will only run once all synchronous validators have passed.                                                     // 24662
 *                                                                                                                     // 24663
 * Please note that if $http is used then it is important that the server returns a success HTTP response code         // 24664
 * in order to fulfill the validation and a status level of `4xx` in order to reject the validation.                   // 24665
 *                                                                                                                     // 24666
 * ```js                                                                                                               // 24667
 * ngModel.$asyncValidators.uniqueUsername = function(modelValue, viewValue) {                                         // 24668
 *   var value = modelValue || viewValue;                                                                              // 24669
 *                                                                                                                     // 24670
 *   // Lookup user by username                                                                                        // 24671
 *   return $http.get('/api/users/' + value).                                                                          // 24672
 *      then(function resolved() {                                                                                     // 24673
 *        //username exists, this means validation fails                                                               // 24674
 *        return $q.reject('exists');                                                                                  // 24675
 *      }, function rejected() {                                                                                       // 24676
 *        //username does not exist, therefore this validation passes                                                  // 24677
 *        return true;                                                                                                 // 24678
 *      });                                                                                                            // 24679
 * };                                                                                                                  // 24680
 * ```                                                                                                                 // 24681
 *                                                                                                                     // 24682
 * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the                        // 24683
 *     view value has changed. It is called with no arguments, and its return value is ignored.                        // 24684
 *     This can be used in place of additional $watches against the model value.                                       // 24685
 *                                                                                                                     // 24686
 * @property {Object} $error An object hash with all failing validator ids as keys.                                    // 24687
 * @property {Object} $pending An object hash with all pending validator ids as keys.                                  // 24688
 *                                                                                                                     // 24689
 * @property {boolean} $untouched True if control has not lost focus yet.                                              // 24690
 * @property {boolean} $touched True if control has lost focus.                                                        // 24691
 * @property {boolean} $pristine True if user has not interacted with the control yet.                                 // 24692
 * @property {boolean} $dirty True if user has already interacted with the control.                                    // 24693
 * @property {boolean} $valid True if there is no error.                                                               // 24694
 * @property {boolean} $invalid True if at least one error on the control.                                             // 24695
 * @property {string} $name The name attribute of the control.                                                         // 24696
 *                                                                                                                     // 24697
 * @description                                                                                                        // 24698
 *                                                                                                                     // 24699
 * `NgModelController` provides API for the {@link ngModel `ngModel`} directive.                                       // 24700
 * The controller contains services for data-binding, validation, CSS updates, and value formatting                    // 24701
 * and parsing. It purposefully does not contain any logic which deals with DOM rendering or                           // 24702
 * listening to DOM events.                                                                                            // 24703
 * Such DOM related logic should be provided by other directives which make use of                                     // 24704
 * `NgModelController` for data-binding to control elements.                                                           // 24705
 * Angular provides this DOM logic for most {@link input `input`} elements.                                            // 24706
 * At the end of this page you can find a {@link ngModel.NgModelController#custom-control-example                      // 24707
 * custom control example} that uses `ngModelController` to bind to `contenteditable` elements.                        // 24708
 *                                                                                                                     // 24709
 * @example                                                                                                            // 24710
 * ### Custom Control Example                                                                                          // 24711
 * This example shows how to use `NgModelController` with a custom control to achieve                                  // 24712
 * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)                       // 24713
 * collaborate together to achieve the desired result.                                                                 // 24714
 *                                                                                                                     // 24715
 * `contenteditable` is an HTML5 attribute, which tells the browser to let the element                                 // 24716
 * contents be edited in place by the user.                                                                            // 24717
 *                                                                                                                     // 24718
 * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}             // 24719
 * module to automatically remove "bad" content like inline event listener (e.g. `<span onclick="...">`).              // 24720
 * However, as we are using `$sce` the model can still decide to provide unsafe content if it marks                    // 24721
 * that content using the `$sce` service.                                                                              // 24722
 *                                                                                                                     // 24723
 * <example name="NgModelController" module="customControl" deps="angular-sanitize.js">                                // 24724
    <file name="style.css">                                                                                            // 24725
      [contenteditable] {                                                                                              // 24726
        border: 1px solid black;                                                                                       // 24727
        background-color: white;                                                                                       // 24728
        min-height: 20px;                                                                                              // 24729
      }                                                                                                                // 24730
                                                                                                                       // 24731
      .ng-invalid {                                                                                                    // 24732
        border: 1px solid red;                                                                                         // 24733
      }                                                                                                                // 24734
                                                                                                                       // 24735
    </file>                                                                                                            // 24736
    <file name="script.js">                                                                                            // 24737
      angular.module('customControl', ['ngSanitize']).                                                                 // 24738
        directive('contenteditable', ['$sce', function($sce) {                                                         // 24739
          return {                                                                                                     // 24740
            restrict: 'A', // only activate on element attribute                                                       // 24741
            require: '?ngModel', // get a hold of NgModelController                                                    // 24742
            link: function(scope, element, attrs, ngModel) {                                                           // 24743
              if (!ngModel) return; // do nothing if no ng-model                                                       // 24744
                                                                                                                       // 24745
              // Specify how UI should be updated                                                                      // 24746
              ngModel.$render = function() {                                                                           // 24747
                element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));                                           // 24748
              };                                                                                                       // 24749
                                                                                                                       // 24750
              // Listen for change events to enable binding                                                            // 24751
              element.on('blur keyup change', function() {                                                             // 24752
                scope.$evalAsync(read);                                                                                // 24753
              });                                                                                                      // 24754
              read(); // initialize                                                                                    // 24755
                                                                                                                       // 24756
              // Write data to the model                                                                               // 24757
              function read() {                                                                                        // 24758
                var html = element.html();                                                                             // 24759
                // When we clear the content editable the browser leaves a <br> behind                                 // 24760
                // If strip-br attribute is provided then we strip this out                                            // 24761
                if ( attrs.stripBr && html == '<br>' ) {                                                               // 24762
                  html = '';                                                                                           // 24763
                }                                                                                                      // 24764
                ngModel.$setViewValue(html);                                                                           // 24765
              }                                                                                                        // 24766
            }                                                                                                          // 24767
          };                                                                                                           // 24768
        }]);                                                                                                           // 24769
    </file>                                                                                                            // 24770
    <file name="index.html">                                                                                           // 24771
      <form name="myForm">                                                                                             // 24772
       <div contenteditable                                                                                            // 24773
            name="myWidget" ng-model="userContent"                                                                     // 24774
            strip-br="true"                                                                                            // 24775
            required>Change me!</div>                                                                                  // 24776
        <span ng-show="myForm.myWidget.$error.required">Required!</span>                                               // 24777
       <hr>                                                                                                            // 24778
       <textarea ng-model="userContent" aria-label="Dynamic textarea"></textarea>                                      // 24779
      </form>                                                                                                          // 24780
    </file>                                                                                                            // 24781
    <file name="protractor.js" type="protractor">                                                                      // 24782
    it('should data-bind and become invalid', function() {                                                             // 24783
      if (browser.params.browser == 'safari' || browser.params.browser == 'firefox') {                                 // 24784
        // SafariDriver can't handle contenteditable                                                                   // 24785
        // and Firefox driver can't clear contenteditables very well                                                   // 24786
        return;                                                                                                        // 24787
      }                                                                                                                // 24788
      var contentEditable = element(by.css('[contenteditable]'));                                                      // 24789
      var content = 'Change me!';                                                                                      // 24790
                                                                                                                       // 24791
      expect(contentEditable.getText()).toEqual(content);                                                              // 24792
                                                                                                                       // 24793
      contentEditable.clear();                                                                                         // 24794
      contentEditable.sendKeys(protractor.Key.BACK_SPACE);                                                             // 24795
      expect(contentEditable.getText()).toEqual('');                                                                   // 24796
      expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);                                    // 24797
    });                                                                                                                // 24798
    </file>                                                                                                            // 24799
 * </example>                                                                                                          // 24800
 *                                                                                                                     // 24801
 *                                                                                                                     // 24802
 */                                                                                                                    // 24803
var NgModelController = ['$scope', '$exceptionHandler', '$attrs', '$element', '$parse', '$animate', '$timeout', '$rootScope', '$q', '$interpolate',
    function($scope, $exceptionHandler, $attr, $element, $parse, $animate, $timeout, $rootScope, $q, $interpolate) {   // 24805
  this.$viewValue = Number.NaN;                                                                                        // 24806
  this.$modelValue = Number.NaN;                                                                                       // 24807
  this.$$rawModelValue = undefined; // stores the parsed modelValue / model set from scope regardless of validity.     // 24808
  this.$validators = {};                                                                                               // 24809
  this.$asyncValidators = {};                                                                                          // 24810
  this.$parsers = [];                                                                                                  // 24811
  this.$formatters = [];                                                                                               // 24812
  this.$viewChangeListeners = [];                                                                                      // 24813
  this.$untouched = true;                                                                                              // 24814
  this.$touched = false;                                                                                               // 24815
  this.$pristine = true;                                                                                               // 24816
  this.$dirty = false;                                                                                                 // 24817
  this.$valid = true;                                                                                                  // 24818
  this.$invalid = false;                                                                                               // 24819
  this.$error = {}; // keep invalid keys here                                                                          // 24820
  this.$$success = {}; // keep valid keys here                                                                         // 24821
  this.$pending = undefined; // keep pending keys here                                                                 // 24822
  this.$name = $interpolate($attr.name || '', false)($scope);                                                          // 24823
  this.$$parentForm = nullFormCtrl;                                                                                    // 24824
                                                                                                                       // 24825
  var parsedNgModel = $parse($attr.ngModel),                                                                           // 24826
      parsedNgModelAssign = parsedNgModel.assign,                                                                      // 24827
      ngModelGet = parsedNgModel,                                                                                      // 24828
      ngModelSet = parsedNgModelAssign,                                                                                // 24829
      pendingDebounce = null,                                                                                          // 24830
      parserValid,                                                                                                     // 24831
      ctrl = this;                                                                                                     // 24832
                                                                                                                       // 24833
  this.$$setOptions = function(options) {                                                                              // 24834
    ctrl.$options = options;                                                                                           // 24835
    if (options && options.getterSetter) {                                                                             // 24836
      var invokeModelGetter = $parse($attr.ngModel + '()'),                                                            // 24837
          invokeModelSetter = $parse($attr.ngModel + '($$$p)');                                                        // 24838
                                                                                                                       // 24839
      ngModelGet = function($scope) {                                                                                  // 24840
        var modelValue = parsedNgModel($scope);                                                                        // 24841
        if (isFunction(modelValue)) {                                                                                  // 24842
          modelValue = invokeModelGetter($scope);                                                                      // 24843
        }                                                                                                              // 24844
        return modelValue;                                                                                             // 24845
      };                                                                                                               // 24846
      ngModelSet = function($scope, newValue) {                                                                        // 24847
        if (isFunction(parsedNgModel($scope))) {                                                                       // 24848
          invokeModelSetter($scope, {$$$p: ctrl.$modelValue});                                                         // 24849
        } else {                                                                                                       // 24850
          parsedNgModelAssign($scope, ctrl.$modelValue);                                                               // 24851
        }                                                                                                              // 24852
      };                                                                                                               // 24853
    } else if (!parsedNgModel.assign) {                                                                                // 24854
      throw ngModelMinErr('nonassign', "Expression '{0}' is non-assignable. Element: {1}",                             // 24855
          $attr.ngModel, startingTag($element));                                                                       // 24856
    }                                                                                                                  // 24857
  };                                                                                                                   // 24858
                                                                                                                       // 24859
  /**                                                                                                                  // 24860
   * @ngdoc method                                                                                                     // 24861
   * @name ngModel.NgModelController#$render                                                                           // 24862
   *                                                                                                                   // 24863
   * @description                                                                                                      // 24864
   * Called when the view needs to be updated. It is expected that the user of the ng-model                            // 24865
   * directive will implement this method.                                                                             // 24866
   *                                                                                                                   // 24867
   * The `$render()` method is invoked in the following situations:                                                    // 24868
   *                                                                                                                   // 24869
   * * `$rollbackViewValue()` is called.  If we are rolling back the view value to the last                            // 24870
   *   committed value then `$render()` is called to update the input control.                                         // 24871
   * * The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and                   // 24872
   *   the `$viewValue` are different from last time.                                                                  // 24873
   *                                                                                                                   // 24874
   * Since `ng-model` does not do a deep watch, `$render()` is only invoked if the values of                           // 24875
   * `$modelValue` and `$viewValue` are actually different from their previous value. If `$modelValue`                 // 24876
   * or `$viewValue` are objects (rather than a string or number) then `$render()` will not be                         // 24877
   * invoked if you only change a property on the objects.                                                             // 24878
   */                                                                                                                  // 24879
  this.$render = noop;                                                                                                 // 24880
                                                                                                                       // 24881
  /**                                                                                                                  // 24882
   * @ngdoc method                                                                                                     // 24883
   * @name ngModel.NgModelController#$isEmpty                                                                          // 24884
   *                                                                                                                   // 24885
   * @description                                                                                                      // 24886
   * This is called when we need to determine if the value of an input is empty.                                       // 24887
   *                                                                                                                   // 24888
   * For instance, the required directive does this to work out if the input has data or not.                          // 24889
   *                                                                                                                   // 24890
   * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.                   // 24891
   *                                                                                                                   // 24892
   * You can override this for input directives whose concept of being empty is different from the                     // 24893
   * default. The `checkboxInputType` directive does this because in its case a value of `false`                       // 24894
   * implies empty.                                                                                                    // 24895
   *                                                                                                                   // 24896
   * @param {*} value The value of the input to check for emptiness.                                                   // 24897
   * @returns {boolean} True if `value` is "empty".                                                                    // 24898
   */                                                                                                                  // 24899
  this.$isEmpty = function(value) {                                                                                    // 24900
    return isUndefined(value) || value === '' || value === null || value !== value;                                    // 24901
  };                                                                                                                   // 24902
                                                                                                                       // 24903
  var currentValidationRunId = 0;                                                                                      // 24904
                                                                                                                       // 24905
  /**                                                                                                                  // 24906
   * @ngdoc method                                                                                                     // 24907
   * @name ngModel.NgModelController#$setValidity                                                                      // 24908
   *                                                                                                                   // 24909
   * @description                                                                                                      // 24910
   * Change the validity state, and notify the form.                                                                   // 24911
   *                                                                                                                   // 24912
   * This method can be called within $parsers/$formatters or a custom validation implementation.                      // 24913
   * However, in most cases it should be sufficient to use the `ngModel.$validators` and                               // 24914
   * `ngModel.$asyncValidators` collections which will call `$setValidity` automatically.                              // 24915
   *                                                                                                                   // 24916
   * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be assigned               // 24917
   *        to either `$error[validationErrorKey]` or `$pending[validationErrorKey]`                                   // 24918
   *        (for unfulfilled `$asyncValidators`), so that it is available for data-binding.                            // 24919
   *        The `validationErrorKey` should be in camelCase and will get converted into dash-case                      // 24920
   *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`            // 24921
   *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .                                  // 24922
   * @param {boolean} isValid Whether the current state is valid (true), invalid (false), pending (undefined),         // 24923
   *                          or skipped (null). Pending is used for unfulfilled `$asyncValidators`.                   // 24924
   *                          Skipped is used by Angular when validators do not run because of parse errors and        // 24925
   *                          when `$asyncValidators` do not run because any of the `$validators` failed.              // 24926
   */                                                                                                                  // 24927
  addSetValidityMethod({                                                                                               // 24928
    ctrl: this,                                                                                                        // 24929
    $element: $element,                                                                                                // 24930
    set: function(object, property) {                                                                                  // 24931
      object[property] = true;                                                                                         // 24932
    },                                                                                                                 // 24933
    unset: function(object, property) {                                                                                // 24934
      delete object[property];                                                                                         // 24935
    },                                                                                                                 // 24936
    $animate: $animate                                                                                                 // 24937
  });                                                                                                                  // 24938
                                                                                                                       // 24939
  /**                                                                                                                  // 24940
   * @ngdoc method                                                                                                     // 24941
   * @name ngModel.NgModelController#$setPristine                                                                      // 24942
   *                                                                                                                   // 24943
   * @description                                                                                                      // 24944
   * Sets the control to its pristine state.                                                                           // 24945
   *                                                                                                                   // 24946
   * This method can be called to remove the `ng-dirty` class and set the control to its pristine                      // 24947
   * state (`ng-pristine` class). A model is considered to be pristine when the control                                // 24948
   * has not been changed from when first compiled.                                                                    // 24949
   */                                                                                                                  // 24950
  this.$setPristine = function() {                                                                                     // 24951
    ctrl.$dirty = false;                                                                                               // 24952
    ctrl.$pristine = true;                                                                                             // 24953
    $animate.removeClass($element, DIRTY_CLASS);                                                                       // 24954
    $animate.addClass($element, PRISTINE_CLASS);                                                                       // 24955
  };                                                                                                                   // 24956
                                                                                                                       // 24957
  /**                                                                                                                  // 24958
   * @ngdoc method                                                                                                     // 24959
   * @name ngModel.NgModelController#$setDirty                                                                         // 24960
   *                                                                                                                   // 24961
   * @description                                                                                                      // 24962
   * Sets the control to its dirty state.                                                                              // 24963
   *                                                                                                                   // 24964
   * This method can be called to remove the `ng-pristine` class and set the control to its dirty                      // 24965
   * state (`ng-dirty` class). A model is considered to be dirty when the control has been changed                     // 24966
   * from when first compiled.                                                                                         // 24967
   */                                                                                                                  // 24968
  this.$setDirty = function() {                                                                                        // 24969
    ctrl.$dirty = true;                                                                                                // 24970
    ctrl.$pristine = false;                                                                                            // 24971
    $animate.removeClass($element, PRISTINE_CLASS);                                                                    // 24972
    $animate.addClass($element, DIRTY_CLASS);                                                                          // 24973
    ctrl.$$parentForm.$setDirty();                                                                                     // 24974
  };                                                                                                                   // 24975
                                                                                                                       // 24976
  /**                                                                                                                  // 24977
   * @ngdoc method                                                                                                     // 24978
   * @name ngModel.NgModelController#$setUntouched                                                                     // 24979
   *                                                                                                                   // 24980
   * @description                                                                                                      // 24981
   * Sets the control to its untouched state.                                                                          // 24982
   *                                                                                                                   // 24983
   * This method can be called to remove the `ng-touched` class and set the control to its                             // 24984
   * untouched state (`ng-untouched` class). Upon compilation, a model is set as untouched                             // 24985
   * by default, however this function can be used to restore that state if the model has                              // 24986
   * already been touched by the user.                                                                                 // 24987
   */                                                                                                                  // 24988
  this.$setUntouched = function() {                                                                                    // 24989
    ctrl.$touched = false;                                                                                             // 24990
    ctrl.$untouched = true;                                                                                            // 24991
    $animate.setClass($element, UNTOUCHED_CLASS, TOUCHED_CLASS);                                                       // 24992
  };                                                                                                                   // 24993
                                                                                                                       // 24994
  /**                                                                                                                  // 24995
   * @ngdoc method                                                                                                     // 24996
   * @name ngModel.NgModelController#$setTouched                                                                       // 24997
   *                                                                                                                   // 24998
   * @description                                                                                                      // 24999
   * Sets the control to its touched state.                                                                            // 25000
   *                                                                                                                   // 25001
   * This method can be called to remove the `ng-untouched` class and set the control to its                           // 25002
   * touched state (`ng-touched` class). A model is considered to be touched when the user has                         // 25003
   * first focused the control element and then shifted focus away from the control (blur event).                      // 25004
   */                                                                                                                  // 25005
  this.$setTouched = function() {                                                                                      // 25006
    ctrl.$touched = true;                                                                                              // 25007
    ctrl.$untouched = false;                                                                                           // 25008
    $animate.setClass($element, TOUCHED_CLASS, UNTOUCHED_CLASS);                                                       // 25009
  };                                                                                                                   // 25010
                                                                                                                       // 25011
  /**                                                                                                                  // 25012
   * @ngdoc method                                                                                                     // 25013
   * @name ngModel.NgModelController#$rollbackViewValue                                                                // 25014
   *                                                                                                                   // 25015
   * @description                                                                                                      // 25016
   * Cancel an update and reset the input element's value to prevent an update to the `$modelValue`,                   // 25017
   * which may be caused by a pending debounced event or because the input is waiting for a some                       // 25018
   * future event.                                                                                                     // 25019
   *                                                                                                                   // 25020
   * If you have an input that uses `ng-model-options` to set up debounced events or events such                       // 25021
   * as blur you can have a situation where there is a period when the `$viewValue`                                    // 25022
   * is out of synch with the ngModel's `$modelValue`.                                                                 // 25023
   *                                                                                                                   // 25024
   * In this case, you can run into difficulties if you try to update the ngModel's `$modelValue`                      // 25025
   * programmatically before these debounced/future events have resolved/occurred, because Angular's                   // 25026
   * dirty checking mechanism is not able to tell whether the model has actually changed or not.                       // 25027
   *                                                                                                                   // 25028
   * The `$rollbackViewValue()` method should be called before programmatically changing the model of an               // 25029
   * input which may have such events pending. This is important in order to make sure that the                        // 25030
   * input field will be updated with the new model value and any pending operations are cancelled.                    // 25031
   *                                                                                                                   // 25032
   * <example name="ng-model-cancel-update" module="cancel-update-example">                                            // 25033
   *   <file name="app.js">                                                                                            // 25034
   *     angular.module('cancel-update-example', [])                                                                   // 25035
   *                                                                                                                   // 25036
   *     .controller('CancelUpdateController', ['$scope', function($scope) {                                           // 25037
   *       $scope.resetWithCancel = function(e) {                                                                      // 25038
   *         if (e.keyCode == 27) {                                                                                    // 25039
   *           $scope.myForm.myInput1.$rollbackViewValue();                                                            // 25040
   *           $scope.myValue = '';                                                                                    // 25041
   *         }                                                                                                         // 25042
   *       };                                                                                                          // 25043
   *       $scope.resetWithoutCancel = function(e) {                                                                   // 25044
   *         if (e.keyCode == 27) {                                                                                    // 25045
   *           $scope.myValue = '';                                                                                    // 25046
   *         }                                                                                                         // 25047
   *       };                                                                                                          // 25048
   *     }]);                                                                                                          // 25049
   *   </file>                                                                                                         // 25050
   *   <file name="index.html">                                                                                        // 25051
   *     <div ng-controller="CancelUpdateController">                                                                  // 25052
   *       <p>Try typing something in each input.  See that the model only updates when you                            // 25053
   *          blur off the input.                                                                                      // 25054
   *        </p>                                                                                                       // 25055
   *        <p>Now see what happens if you start typing then press the Escape key</p>                                  // 25056
   *                                                                                                                   // 25057
   *       <form name="myForm" ng-model-options="{ updateOn: 'blur' }">                                                // 25058
   *         <p id="inputDescription1">With $rollbackViewValue()</p>                                                   // 25059
   *         <input name="myInput1" aria-describedby="inputDescription1" ng-model="myValue"                            // 25060
   *                ng-keydown="resetWithCancel($event)"><br/>                                                         // 25061
   *         myValue: "{{ myValue }}"                                                                                  // 25062
   *                                                                                                                   // 25063
   *         <p id="inputDescription2">Without $rollbackViewValue()</p>                                                // 25064
   *         <input name="myInput2" aria-describedby="inputDescription2" ng-model="myValue"                            // 25065
   *                ng-keydown="resetWithoutCancel($event)"><br/>                                                      // 25066
   *         myValue: "{{ myValue }}"                                                                                  // 25067
   *       </form>                                                                                                     // 25068
   *     </div>                                                                                                        // 25069
   *   </file>                                                                                                         // 25070
   * </example>                                                                                                        // 25071
   */                                                                                                                  // 25072
  this.$rollbackViewValue = function() {                                                                               // 25073
    $timeout.cancel(pendingDebounce);                                                                                  // 25074
    ctrl.$viewValue = ctrl.$$lastCommittedViewValue;                                                                   // 25075
    ctrl.$render();                                                                                                    // 25076
  };                                                                                                                   // 25077
                                                                                                                       // 25078
  /**                                                                                                                  // 25079
   * @ngdoc method                                                                                                     // 25080
   * @name ngModel.NgModelController#$validate                                                                         // 25081
   *                                                                                                                   // 25082
   * @description                                                                                                      // 25083
   * Runs each of the registered validators (first synchronous validators and then                                     // 25084
   * asynchronous validators).                                                                                         // 25085
   * If the validity changes to invalid, the model will be set to `undefined`,                                         // 25086
   * unless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.                                            // 25087
   * If the validity changes to valid, it will set the model to the last available valid                               // 25088
   * `$modelValue`, i.e. either the last parsed value or the last value set from the scope.                            // 25089
   */                                                                                                                  // 25090
  this.$validate = function() {                                                                                        // 25091
    // ignore $validate before model is initialized                                                                    // 25092
    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {                                                       // 25093
      return;                                                                                                          // 25094
    }                                                                                                                  // 25095
                                                                                                                       // 25096
    var viewValue = ctrl.$$lastCommittedViewValue;                                                                     // 25097
    // Note: we use the $$rawModelValue as $modelValue might have been                                                 // 25098
    // set to undefined during a view -> model update that found validation                                            // 25099
    // errors. We can't parse the view here, since that could change                                                   // 25100
    // the model although neither viewValue nor the model on the scope changed                                         // 25101
    var modelValue = ctrl.$$rawModelValue;                                                                             // 25102
                                                                                                                       // 25103
    var prevValid = ctrl.$valid;                                                                                       // 25104
    var prevModelValue = ctrl.$modelValue;                                                                             // 25105
                                                                                                                       // 25106
    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;                                                    // 25107
                                                                                                                       // 25108
    ctrl.$$runValidators(modelValue, viewValue, function(allValid) {                                                   // 25109
      // If there was no change in validity, don't update the model                                                    // 25110
      // This prevents changing an invalid modelValue to undefined                                                     // 25111
      if (!allowInvalid && prevValid !== allValid) {                                                                   // 25112
        // Note: Don't check ctrl.$valid here, as we could have                                                        // 25113
        // external validators (e.g. calculated on the server),                                                        // 25114
        // that just call $setValidity and need the model value                                                        // 25115
        // to calculate their validity.                                                                                // 25116
        ctrl.$modelValue = allValid ? modelValue : undefined;                                                          // 25117
                                                                                                                       // 25118
        if (ctrl.$modelValue !== prevModelValue) {                                                                     // 25119
          ctrl.$$writeModelToScope();                                                                                  // 25120
        }                                                                                                              // 25121
      }                                                                                                                // 25122
    });                                                                                                                // 25123
                                                                                                                       // 25124
  };                                                                                                                   // 25125
                                                                                                                       // 25126
  this.$$runValidators = function(modelValue, viewValue, doneCallback) {                                               // 25127
    currentValidationRunId++;                                                                                          // 25128
    var localValidationRunId = currentValidationRunId;                                                                 // 25129
                                                                                                                       // 25130
    // check parser error                                                                                              // 25131
    if (!processParseErrors()) {                                                                                       // 25132
      validationDone(false);                                                                                           // 25133
      return;                                                                                                          // 25134
    }                                                                                                                  // 25135
    if (!processSyncValidators()) {                                                                                    // 25136
      validationDone(false);                                                                                           // 25137
      return;                                                                                                          // 25138
    }                                                                                                                  // 25139
    processAsyncValidators();                                                                                          // 25140
                                                                                                                       // 25141
    function processParseErrors() {                                                                                    // 25142
      var errorKey = ctrl.$$parserName || 'parse';                                                                     // 25143
      if (isUndefined(parserValid)) {                                                                                  // 25144
        setValidity(errorKey, null);                                                                                   // 25145
      } else {                                                                                                         // 25146
        if (!parserValid) {                                                                                            // 25147
          forEach(ctrl.$validators, function(v, name) {                                                                // 25148
            setValidity(name, null);                                                                                   // 25149
          });                                                                                                          // 25150
          forEach(ctrl.$asyncValidators, function(v, name) {                                                           // 25151
            setValidity(name, null);                                                                                   // 25152
          });                                                                                                          // 25153
        }                                                                                                              // 25154
        // Set the parse error last, to prevent unsetting it, should a $validators key == parserName                   // 25155
        setValidity(errorKey, parserValid);                                                                            // 25156
        return parserValid;                                                                                            // 25157
      }                                                                                                                // 25158
      return true;                                                                                                     // 25159
    }                                                                                                                  // 25160
                                                                                                                       // 25161
    function processSyncValidators() {                                                                                 // 25162
      var syncValidatorsValid = true;                                                                                  // 25163
      forEach(ctrl.$validators, function(validator, name) {                                                            // 25164
        var result = validator(modelValue, viewValue);                                                                 // 25165
        syncValidatorsValid = syncValidatorsValid && result;                                                           // 25166
        setValidity(name, result);                                                                                     // 25167
      });                                                                                                              // 25168
      if (!syncValidatorsValid) {                                                                                      // 25169
        forEach(ctrl.$asyncValidators, function(v, name) {                                                             // 25170
          setValidity(name, null);                                                                                     // 25171
        });                                                                                                            // 25172
        return false;                                                                                                  // 25173
      }                                                                                                                // 25174
      return true;                                                                                                     // 25175
    }                                                                                                                  // 25176
                                                                                                                       // 25177
    function processAsyncValidators() {                                                                                // 25178
      var validatorPromises = [];                                                                                      // 25179
      var allValid = true;                                                                                             // 25180
      forEach(ctrl.$asyncValidators, function(validator, name) {                                                       // 25181
        var promise = validator(modelValue, viewValue);                                                                // 25182
        if (!isPromiseLike(promise)) {                                                                                 // 25183
          throw ngModelMinErr("$asyncValidators",                                                                      // 25184
            "Expected asynchronous validator to return a promise but got '{0}' instead.", promise);                    // 25185
        }                                                                                                              // 25186
        setValidity(name, undefined);                                                                                  // 25187
        validatorPromises.push(promise.then(function() {                                                               // 25188
          setValidity(name, true);                                                                                     // 25189
        }, function(error) {                                                                                           // 25190
          allValid = false;                                                                                            // 25191
          setValidity(name, false);                                                                                    // 25192
        }));                                                                                                           // 25193
      });                                                                                                              // 25194
      if (!validatorPromises.length) {                                                                                 // 25195
        validationDone(true);                                                                                          // 25196
      } else {                                                                                                         // 25197
        $q.all(validatorPromises).then(function() {                                                                    // 25198
          validationDone(allValid);                                                                                    // 25199
        }, noop);                                                                                                      // 25200
      }                                                                                                                // 25201
    }                                                                                                                  // 25202
                                                                                                                       // 25203
    function setValidity(name, isValid) {                                                                              // 25204
      if (localValidationRunId === currentValidationRunId) {                                                           // 25205
        ctrl.$setValidity(name, isValid);                                                                              // 25206
      }                                                                                                                // 25207
    }                                                                                                                  // 25208
                                                                                                                       // 25209
    function validationDone(allValid) {                                                                                // 25210
      if (localValidationRunId === currentValidationRunId) {                                                           // 25211
                                                                                                                       // 25212
        doneCallback(allValid);                                                                                        // 25213
      }                                                                                                                // 25214
    }                                                                                                                  // 25215
  };                                                                                                                   // 25216
                                                                                                                       // 25217
  /**                                                                                                                  // 25218
   * @ngdoc method                                                                                                     // 25219
   * @name ngModel.NgModelController#$commitViewValue                                                                  // 25220
   *                                                                                                                   // 25221
   * @description                                                                                                      // 25222
   * Commit a pending update to the `$modelValue`.                                                                     // 25223
   *                                                                                                                   // 25224
   * Updates may be pending by a debounced event or because the input is waiting for a some future                     // 25225
   * event defined in `ng-model-options`. this method is rarely needed as `NgModelController`                          // 25226
   * usually handles calling this in response to input events.                                                         // 25227
   */                                                                                                                  // 25228
  this.$commitViewValue = function() {                                                                                 // 25229
    var viewValue = ctrl.$viewValue;                                                                                   // 25230
                                                                                                                       // 25231
    $timeout.cancel(pendingDebounce);                                                                                  // 25232
                                                                                                                       // 25233
    // If the view value has not changed then we should just exit, except in the case where there is                   // 25234
    // a native validator on the element. In this case the validation state may have changed even though               // 25235
    // the viewValue has stayed empty.                                                                                 // 25236
    if (ctrl.$$lastCommittedViewValue === viewValue && (viewValue !== '' || !ctrl.$$hasNativeValidators)) {            // 25237
      return;                                                                                                          // 25238
    }                                                                                                                  // 25239
    ctrl.$$lastCommittedViewValue = viewValue;                                                                         // 25240
                                                                                                                       // 25241
    // change to dirty                                                                                                 // 25242
    if (ctrl.$pristine) {                                                                                              // 25243
      this.$setDirty();                                                                                                // 25244
    }                                                                                                                  // 25245
    this.$$parseAndValidate();                                                                                         // 25246
  };                                                                                                                   // 25247
                                                                                                                       // 25248
  this.$$parseAndValidate = function() {                                                                               // 25249
    var viewValue = ctrl.$$lastCommittedViewValue;                                                                     // 25250
    var modelValue = viewValue;                                                                                        // 25251
    parserValid = isUndefined(modelValue) ? undefined : true;                                                          // 25252
                                                                                                                       // 25253
    if (parserValid) {                                                                                                 // 25254
      for (var i = 0; i < ctrl.$parsers.length; i++) {                                                                 // 25255
        modelValue = ctrl.$parsers[i](modelValue);                                                                     // 25256
        if (isUndefined(modelValue)) {                                                                                 // 25257
          parserValid = false;                                                                                         // 25258
          break;                                                                                                       // 25259
        }                                                                                                              // 25260
      }                                                                                                                // 25261
    }                                                                                                                  // 25262
    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {                                                       // 25263
      // ctrl.$modelValue has not been touched yet...                                                                  // 25264
      ctrl.$modelValue = ngModelGet($scope);                                                                           // 25265
    }                                                                                                                  // 25266
    var prevModelValue = ctrl.$modelValue;                                                                             // 25267
    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;                                                    // 25268
    ctrl.$$rawModelValue = modelValue;                                                                                 // 25269
                                                                                                                       // 25270
    if (allowInvalid) {                                                                                                // 25271
      ctrl.$modelValue = modelValue;                                                                                   // 25272
      writeToModelIfNeeded();                                                                                          // 25273
    }                                                                                                                  // 25274
                                                                                                                       // 25275
    // Pass the $$lastCommittedViewValue here, because the cached viewValue might be out of date.                      // 25276
    // This can happen if e.g. $setViewValue is called from inside a parser                                            // 25277
    ctrl.$$runValidators(modelValue, ctrl.$$lastCommittedViewValue, function(allValid) {                               // 25278
      if (!allowInvalid) {                                                                                             // 25279
        // Note: Don't check ctrl.$valid here, as we could have                                                        // 25280
        // external validators (e.g. calculated on the server),                                                        // 25281
        // that just call $setValidity and need the model value                                                        // 25282
        // to calculate their validity.                                                                                // 25283
        ctrl.$modelValue = allValid ? modelValue : undefined;                                                          // 25284
        writeToModelIfNeeded();                                                                                        // 25285
      }                                                                                                                // 25286
    });                                                                                                                // 25287
                                                                                                                       // 25288
    function writeToModelIfNeeded() {                                                                                  // 25289
      if (ctrl.$modelValue !== prevModelValue) {                                                                       // 25290
        ctrl.$$writeModelToScope();                                                                                    // 25291
      }                                                                                                                // 25292
    }                                                                                                                  // 25293
  };                                                                                                                   // 25294
                                                                                                                       // 25295
  this.$$writeModelToScope = function() {                                                                              // 25296
    ngModelSet($scope, ctrl.$modelValue);                                                                              // 25297
    forEach(ctrl.$viewChangeListeners, function(listener) {                                                            // 25298
      try {                                                                                                            // 25299
        listener();                                                                                                    // 25300
      } catch (e) {                                                                                                    // 25301
        $exceptionHandler(e);                                                                                          // 25302
      }                                                                                                                // 25303
    });                                                                                                                // 25304
  };                                                                                                                   // 25305
                                                                                                                       // 25306
  /**                                                                                                                  // 25307
   * @ngdoc method                                                                                                     // 25308
   * @name ngModel.NgModelController#$setViewValue                                                                     // 25309
   *                                                                                                                   // 25310
   * @description                                                                                                      // 25311
   * Update the view value.                                                                                            // 25312
   *                                                                                                                   // 25313
   * This method should be called when a control wants to change the view value; typically,                            // 25314
   * this is done from within a DOM event handler. For example, the {@link ng.directive:input input}                   // 25315
   * directive calls it when the value of the input changes and {@link ng.directive:select select}                     // 25316
   * calls it when an option is selected.                                                                              // 25317
   *                                                                                                                   // 25318
   * When `$setViewValue` is called, the new `value` will be staged for committing through the `$parsers`              // 25319
   * and `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged             // 25320
   * value sent directly for processing, finally to be applied to `$modelValue` and then the                           // 25321
   * **expression** specified in the `ng-model` attribute. Lastly, all the registered change listeners,                // 25322
   * in the `$viewChangeListeners` list, are called.                                                                   // 25323
   *                                                                                                                   // 25324
   * In case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`                  // 25325
   * and the `default` trigger is not listed, all those actions will remain pending until one of the                   // 25326
   * `updateOn` events is triggered on the DOM element.                                                                // 25327
   * All these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}                     // 25328
   * directive is used with a custom debounce for this particular event.                                               // 25329
   * Note that a `$digest` is only triggered once the `updateOn` events are fired, or if `debounce`                    // 25330
   * is specified, once the timer runs out.                                                                            // 25331
   *                                                                                                                   // 25332
   * When used with standard inputs, the view value will always be a string (which is in some cases                    // 25333
   * parsed into another type, such as a `Date` object for `input[date]`.)                                             // 25334
   * However, custom controls might also pass objects to this method. In this case, we should make                     // 25335
   * a copy of the object before passing it to `$setViewValue`. This is because `ngModel` does not                     // 25336
   * perform a deep watch of objects, it only looks for a change of identity. If you only change                       // 25337
   * the property of the object then ngModel will not realise that the object has changed and                          // 25338
   * will not invoke the `$parsers` and `$validators` pipelines. For this reason, you should                           // 25339
   * not change properties of the copy once it has been passed to `$setViewValue`.                                     // 25340
   * Otherwise you may cause the model value on the scope to change incorrectly.                                       // 25341
   *                                                                                                                   // 25342
   * <div class="alert alert-info">                                                                                    // 25343
   * In any case, the value passed to the method should always reflect the current value                               // 25344
   * of the control. For example, if you are calling `$setViewValue` for an input element,                             // 25345
   * you should pass the input DOM value. Otherwise, the control and the scope model become                            // 25346
   * out of sync. It's also important to note that `$setViewValue` does not call `$render` or change                   // 25347
   * the control's DOM value in any way. If we want to change the control's DOM value                                  // 25348
   * programmatically, we should update the `ngModel` scope expression. Its new value will be                          // 25349
   * picked up by the model controller, which will run it through the `$formatters`, `$render` it                      // 25350
   * to update the DOM, and finally call `$validate` on it.                                                            // 25351
   * </div>                                                                                                            // 25352
   *                                                                                                                   // 25353
   * @param {*} value value from the view.                                                                             // 25354
   * @param {string} trigger Event that triggered the update.                                                          // 25355
   */                                                                                                                  // 25356
  this.$setViewValue = function(value, trigger) {                                                                      // 25357
    ctrl.$viewValue = value;                                                                                           // 25358
    if (!ctrl.$options || ctrl.$options.updateOnDefault) {                                                             // 25359
      ctrl.$$debounceViewValueCommit(trigger);                                                                         // 25360
    }                                                                                                                  // 25361
  };                                                                                                                   // 25362
                                                                                                                       // 25363
  this.$$debounceViewValueCommit = function(trigger) {                                                                 // 25364
    var debounceDelay = 0,                                                                                             // 25365
        options = ctrl.$options,                                                                                       // 25366
        debounce;                                                                                                      // 25367
                                                                                                                       // 25368
    if (options && isDefined(options.debounce)) {                                                                      // 25369
      debounce = options.debounce;                                                                                     // 25370
      if (isNumber(debounce)) {                                                                                        // 25371
        debounceDelay = debounce;                                                                                      // 25372
      } else if (isNumber(debounce[trigger])) {                                                                        // 25373
        debounceDelay = debounce[trigger];                                                                             // 25374
      } else if (isNumber(debounce['default'])) {                                                                      // 25375
        debounceDelay = debounce['default'];                                                                           // 25376
      }                                                                                                                // 25377
    }                                                                                                                  // 25378
                                                                                                                       // 25379
    $timeout.cancel(pendingDebounce);                                                                                  // 25380
    if (debounceDelay) {                                                                                               // 25381
      pendingDebounce = $timeout(function() {                                                                          // 25382
        ctrl.$commitViewValue();                                                                                       // 25383
      }, debounceDelay);                                                                                               // 25384
    } else if ($rootScope.$$phase) {                                                                                   // 25385
      ctrl.$commitViewValue();                                                                                         // 25386
    } else {                                                                                                           // 25387
      $scope.$apply(function() {                                                                                       // 25388
        ctrl.$commitViewValue();                                                                                       // 25389
      });                                                                                                              // 25390
    }                                                                                                                  // 25391
  };                                                                                                                   // 25392
                                                                                                                       // 25393
  // model -> value                                                                                                    // 25394
  // Note: we cannot use a normal scope.$watch as we want to detect the following:                                     // 25395
  // 1. scope value is 'a'                                                                                             // 25396
  // 2. user enters 'b'                                                                                                // 25397
  // 3. ng-change kicks in and reverts scope value to 'a'                                                              // 25398
  //    -> scope value did not change since the last digest as                                                         // 25399
  //       ng-change executes in apply phase                                                                           // 25400
  // 4. view should be changed back to 'a'                                                                             // 25401
  $scope.$watch(function ngModelWatch() {                                                                              // 25402
    var modelValue = ngModelGet($scope);                                                                               // 25403
                                                                                                                       // 25404
    // if scope model value and ngModel value are out of sync                                                          // 25405
    // TODO(perf): why not move this to the action fn?                                                                 // 25406
    if (modelValue !== ctrl.$modelValue &&                                                                             // 25407
       // checks for NaN is needed to allow setting the model to NaN when there's an asyncValidator                    // 25408
       (ctrl.$modelValue === ctrl.$modelValue || modelValue === modelValue)                                            // 25409
    ) {                                                                                                                // 25410
      ctrl.$modelValue = ctrl.$$rawModelValue = modelValue;                                                            // 25411
      parserValid = undefined;                                                                                         // 25412
                                                                                                                       // 25413
      var formatters = ctrl.$formatters,                                                                               // 25414
          idx = formatters.length;                                                                                     // 25415
                                                                                                                       // 25416
      var viewValue = modelValue;                                                                                      // 25417
      while (idx--) {                                                                                                  // 25418
        viewValue = formatters[idx](viewValue);                                                                        // 25419
      }                                                                                                                // 25420
      if (ctrl.$viewValue !== viewValue) {                                                                             // 25421
        ctrl.$viewValue = ctrl.$$lastCommittedViewValue = viewValue;                                                   // 25422
        ctrl.$render();                                                                                                // 25423
                                                                                                                       // 25424
        ctrl.$$runValidators(modelValue, viewValue, noop);                                                             // 25425
      }                                                                                                                // 25426
    }                                                                                                                  // 25427
                                                                                                                       // 25428
    return modelValue;                                                                                                 // 25429
  });                                                                                                                  // 25430
}];                                                                                                                    // 25431
                                                                                                                       // 25432
                                                                                                                       // 25433
/**                                                                                                                    // 25434
 * @ngdoc directive                                                                                                    // 25435
 * @name ngModel                                                                                                       // 25436
 *                                                                                                                     // 25437
 * @element input                                                                                                      // 25438
 * @priority 1                                                                                                         // 25439
 *                                                                                                                     // 25440
 * @description                                                                                                        // 25441
 * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a                         // 25442
 * property on the scope using {@link ngModel.NgModelController NgModelController},                                    // 25443
 * which is created and exposed by this directive.                                                                     // 25444
 *                                                                                                                     // 25445
 * `ngModel` is responsible for:                                                                                       // 25446
 *                                                                                                                     // 25447
 * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`                   // 25448
 *   require.                                                                                                          // 25449
 * - Providing validation behavior (i.e. required, number, email, url).                                                // 25450
 * - Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).           // 25451
 * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`, `ng-touched`, `ng-untouched`) including animations.
 * - Registering the control with its parent {@link ng.directive:form form}.                                           // 25453
 *                                                                                                                     // 25454
 * Note: `ngModel` will try to bind to the property given by evaluating the expression on the                          // 25455
 * current scope. If the property doesn't already exist on this scope, it will be created                              // 25456
 * implicitly and added to the scope.                                                                                  // 25457
 *                                                                                                                     // 25458
 * For best practices on using `ngModel`, see:                                                                         // 25459
 *                                                                                                                     // 25460
 *  - [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes)                          // 25461
 *                                                                                                                     // 25462
 * For basic examples, how to use `ngModel`, see:                                                                      // 25463
 *                                                                                                                     // 25464
 *  - {@link ng.directive:input input}                                                                                 // 25465
 *    - {@link input[text] text}                                                                                       // 25466
 *    - {@link input[checkbox] checkbox}                                                                               // 25467
 *    - {@link input[radio] radio}                                                                                     // 25468
 *    - {@link input[number] number}                                                                                   // 25469
 *    - {@link input[email] email}                                                                                     // 25470
 *    - {@link input[url] url}                                                                                         // 25471
 *    - {@link input[date] date}                                                                                       // 25472
 *    - {@link input[datetime-local] datetime-local}                                                                   // 25473
 *    - {@link input[time] time}                                                                                       // 25474
 *    - {@link input[month] month}                                                                                     // 25475
 *    - {@link input[week] week}                                                                                       // 25476
 *  - {@link ng.directive:select select}                                                                               // 25477
 *  - {@link ng.directive:textarea textarea}                                                                           // 25478
 *                                                                                                                     // 25479
 * # CSS classes                                                                                                       // 25480
 * The following CSS classes are added and removed on the associated input/select/textarea element                     // 25481
 * depending on the validity of the model.                                                                             // 25482
 *                                                                                                                     // 25483
 *  - `ng-valid`: the model is valid                                                                                   // 25484
 *  - `ng-invalid`: the model is invalid                                                                               // 25485
 *  - `ng-valid-[key]`: for each valid key added by `$setValidity`                                                     // 25486
 *  - `ng-invalid-[key]`: for each invalid key added by `$setValidity`                                                 // 25487
 *  - `ng-pristine`: the control hasn't been interacted with yet                                                       // 25488
 *  - `ng-dirty`: the control has been interacted with                                                                 // 25489
 *  - `ng-touched`: the control has been blurred                                                                       // 25490
 *  - `ng-untouched`: the control hasn't been blurred                                                                  // 25491
 *  - `ng-pending`: any `$asyncValidators` are unfulfilled                                                             // 25492
 *                                                                                                                     // 25493
 * Keep in mind that ngAnimate can detect each of these classes when added and removed.                                // 25494
 *                                                                                                                     // 25495
 * ## Animation Hooks                                                                                                  // 25496
 *                                                                                                                     // 25497
 * Animations within models are triggered when any of the associated CSS classes are added and removed                 // 25498
 * on the input element which is attached to the model. These classes are: `.ng-pristine`, `.ng-dirty`,                // 25499
 * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.              // 25500
 * The animations that are triggered within ngModel are similar to how they work in ngClass and                        // 25501
 * animations can be hooked into using CSS transitions, keyframes as well as JS animations.                            // 25502
 *                                                                                                                     // 25503
 * The following example shows a simple way to utilize CSS transitions to style an input element                       // 25504
 * that has been rendered as invalid after it has been validated:                                                      // 25505
 *                                                                                                                     // 25506
 * <pre>                                                                                                               // 25507
 * //be sure to include ngAnimate as a module to hook into more                                                        // 25508
 * //advanced animations                                                                                               // 25509
 * .my-input {                                                                                                         // 25510
 *   transition:0.5s linear all;                                                                                       // 25511
 *   background: white;                                                                                                // 25512
 * }                                                                                                                   // 25513
 * .my-input.ng-invalid {                                                                                              // 25514
 *   background: red;                                                                                                  // 25515
 *   color:white;                                                                                                      // 25516
 * }                                                                                                                   // 25517
 * </pre>                                                                                                              // 25518
 *                                                                                                                     // 25519
 * @example                                                                                                            // 25520
 * <example deps="angular-animate.js" animations="true" fixBase="true" module="inputExample">                          // 25521
     <file name="index.html">                                                                                          // 25522
       <script>                                                                                                        // 25523
        angular.module('inputExample', [])                                                                             // 25524
          .controller('ExampleController', ['$scope', function($scope) {                                               // 25525
            $scope.val = '1';                                                                                          // 25526
          }]);                                                                                                         // 25527
       </script>                                                                                                       // 25528
       <style>                                                                                                         // 25529
         .my-input {                                                                                                   // 25530
           transition:all linear 0.5s;                                                                                 // 25531
           background: transparent;                                                                                    // 25532
         }                                                                                                             // 25533
         .my-input.ng-invalid {                                                                                        // 25534
           color:white;                                                                                                // 25535
           background: red;                                                                                            // 25536
         }                                                                                                             // 25537
       </style>                                                                                                        // 25538
       <p id="inputDescription">                                                                                       // 25539
        Update input to see transitions when valid/invalid.                                                            // 25540
        Integer is a valid value.                                                                                      // 25541
       </p>                                                                                                            // 25542
       <form name="testForm" ng-controller="ExampleController">                                                        // 25543
         <input ng-model="val" ng-pattern="/^\d+$/" name="anim" class="my-input"                                       // 25544
                aria-describedby="inputDescription" />                                                                 // 25545
       </form>                                                                                                         // 25546
     </file>                                                                                                           // 25547
 * </example>                                                                                                          // 25548
 *                                                                                                                     // 25549
 * ## Binding to a getter/setter                                                                                       // 25550
 *                                                                                                                     // 25551
 * Sometimes it's helpful to bind `ngModel` to a getter/setter function.  A getter/setter is a                         // 25552
 * function that returns a representation of the model when called with zero arguments, and sets                       // 25553
 * the internal state of a model when called with an argument. It's sometimes useful to use this                       // 25554
 * for models that have an internal representation that's different from what the model exposes                        // 25555
 * to the view.                                                                                                        // 25556
 *                                                                                                                     // 25557
 * <div class="alert alert-success">                                                                                   // 25558
 * **Best Practice:** It's best to keep getters fast because Angular is likely to call them more                       // 25559
 * frequently than other parts of your code.                                                                           // 25560
 * </div>                                                                                                              // 25561
 *                                                                                                                     // 25562
 * You use this behavior by adding `ng-model-options="{ getterSetter: true }"` to an element that                      // 25563
 * has `ng-model` attached to it. You can also add `ng-model-options="{ getterSetter: true }"` to                      // 25564
 * a `<form>`, which will enable this behavior for all `<input>`s within it. See                                       // 25565
 * {@link ng.directive:ngModelOptions `ngModelOptions`} for more.                                                      // 25566
 *                                                                                                                     // 25567
 * The following example shows how to use `ngModel` with a getter/setter:                                              // 25568
 *                                                                                                                     // 25569
 * @example                                                                                                            // 25570
 * <example name="ngModel-getter-setter" module="getterSetterExample">                                                 // 25571
     <file name="index.html">                                                                                          // 25572
       <div ng-controller="ExampleController">                                                                         // 25573
         <form name="userForm">                                                                                        // 25574
           <label>Name:                                                                                                // 25575
             <input type="text" name="userName"                                                                        // 25576
                    ng-model="user.name"                                                                               // 25577
                    ng-model-options="{ getterSetter: true }" />                                                       // 25578
           </label>                                                                                                    // 25579
         </form>                                                                                                       // 25580
         <pre>user.name = <span ng-bind="user.name()"></span></pre>                                                    // 25581
       </div>                                                                                                          // 25582
     </file>                                                                                                           // 25583
     <file name="app.js">                                                                                              // 25584
       angular.module('getterSetterExample', [])                                                                       // 25585
         .controller('ExampleController', ['$scope', function($scope) {                                                // 25586
           var _name = 'Brian';                                                                                        // 25587
           $scope.user = {                                                                                             // 25588
             name: function(newName) {                                                                                 // 25589
              // Note that newName can be undefined for two reasons:                                                   // 25590
              // 1. Because it is called as a getter and thus called with no arguments                                 // 25591
              // 2. Because the property should actually be set to undefined. This happens e.g. if the                 // 25592
              //    input is invalid                                                                                   // 25593
              return arguments.length ? (_name = newName) : _name;                                                     // 25594
             }                                                                                                         // 25595
           };                                                                                                          // 25596
         }]);                                                                                                          // 25597
     </file>                                                                                                           // 25598
 * </example>                                                                                                          // 25599
 */                                                                                                                    // 25600
var ngModelDirective = ['$rootScope', function($rootScope) {                                                           // 25601
  return {                                                                                                             // 25602
    restrict: 'A',                                                                                                     // 25603
    require: ['ngModel', '^?form', '^?ngModelOptions'],                                                                // 25604
    controller: NgModelController,                                                                                     // 25605
    // Prelink needs to run before any input directive                                                                 // 25606
    // so that we can set the NgModelOptions in NgModelController                                                      // 25607
    // before anyone else uses it.                                                                                     // 25608
    priority: 1,                                                                                                       // 25609
    compile: function ngModelCompile(element) {                                                                        // 25610
      // Setup initial state of the control                                                                            // 25611
      element.addClass(PRISTINE_CLASS).addClass(UNTOUCHED_CLASS).addClass(VALID_CLASS);                                // 25612
                                                                                                                       // 25613
      return {                                                                                                         // 25614
        pre: function ngModelPreLink(scope, element, attr, ctrls) {                                                    // 25615
          var modelCtrl = ctrls[0],                                                                                    // 25616
              formCtrl = ctrls[1] || modelCtrl.$$parentForm;                                                           // 25617
                                                                                                                       // 25618
          modelCtrl.$$setOptions(ctrls[2] && ctrls[2].$options);                                                       // 25619
                                                                                                                       // 25620
          // notify others, especially parent forms                                                                    // 25621
          formCtrl.$addControl(modelCtrl);                                                                             // 25622
                                                                                                                       // 25623
          attr.$observe('name', function(newValue) {                                                                   // 25624
            if (modelCtrl.$name !== newValue) {                                                                        // 25625
              modelCtrl.$$parentForm.$$renameControl(modelCtrl, newValue);                                             // 25626
            }                                                                                                          // 25627
          });                                                                                                          // 25628
                                                                                                                       // 25629
          scope.$on('$destroy', function() {                                                                           // 25630
            modelCtrl.$$parentForm.$removeControl(modelCtrl);                                                          // 25631
          });                                                                                                          // 25632
        },                                                                                                             // 25633
        post: function ngModelPostLink(scope, element, attr, ctrls) {                                                  // 25634
          var modelCtrl = ctrls[0];                                                                                    // 25635
          if (modelCtrl.$options && modelCtrl.$options.updateOn) {                                                     // 25636
            element.on(modelCtrl.$options.updateOn, function(ev) {                                                     // 25637
              modelCtrl.$$debounceViewValueCommit(ev && ev.type);                                                      // 25638
            });                                                                                                        // 25639
          }                                                                                                            // 25640
                                                                                                                       // 25641
          element.on('blur', function(ev) {                                                                            // 25642
            if (modelCtrl.$touched) return;                                                                            // 25643
                                                                                                                       // 25644
            if ($rootScope.$$phase) {                                                                                  // 25645
              scope.$evalAsync(modelCtrl.$setTouched);                                                                 // 25646
            } else {                                                                                                   // 25647
              scope.$apply(modelCtrl.$setTouched);                                                                     // 25648
            }                                                                                                          // 25649
          });                                                                                                          // 25650
        }                                                                                                              // 25651
      };                                                                                                               // 25652
    }                                                                                                                  // 25653
  };                                                                                                                   // 25654
}];                                                                                                                    // 25655
                                                                                                                       // 25656
var DEFAULT_REGEXP = /(\s+|^)default(\s+|$)/;                                                                          // 25657
                                                                                                                       // 25658
/**                                                                                                                    // 25659
 * @ngdoc directive                                                                                                    // 25660
 * @name ngModelOptions                                                                                                // 25661
 *                                                                                                                     // 25662
 * @description                                                                                                        // 25663
 * Allows tuning how model updates are done. Using `ngModelOptions` you can specify a custom list of                   // 25664
 * events that will trigger a model update and/or a debouncing delay so that the actual update only                    // 25665
 * takes place when a timer expires; this timer will be reset after another change takes place.                        // 25666
 *                                                                                                                     // 25667
 * Given the nature of `ngModelOptions`, the value displayed inside input fields in the view might                     // 25668
 * be different from the value in the actual model. This means that if you update the model you                        // 25669
 * should also invoke {@link ngModel.NgModelController `$rollbackViewValue`} on the relevant input field in            // 25670
 * order to make sure it is synchronized with the model and that any debounced action is canceled.                     // 25671
 *                                                                                                                     // 25672
 * The easiest way to reference the control's {@link ngModel.NgModelController `$rollbackViewValue`}                   // 25673
 * method is by making sure the input is placed inside a form that has a `name` attribute. This is                     // 25674
 * important because `form` controllers are published to the related scope under the name in their                     // 25675
 * `name` attribute.                                                                                                   // 25676
 *                                                                                                                     // 25677
 * Any pending changes will take place immediately when an enclosing form is submitted via the                         // 25678
 * `submit` event. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`                   // 25679
 * to have access to the updated model.                                                                                // 25680
 *                                                                                                                     // 25681
 * `ngModelOptions` has an effect on the element it's declared on and its descendants.                                 // 25682
 *                                                                                                                     // 25683
 * @param {Object} ngModelOptions options to apply to the current model. Valid keys are:                               // 25684
 *   - `updateOn`: string specifying which event should the input be bound to. You can set several                     // 25685
 *     events using an space delimited list. There is a special event called `default` that                            // 25686
 *     matches the default events belonging of the control.                                                            // 25687
 *   - `debounce`: integer value which contains the debounce model update value in milliseconds. A                     // 25688
 *     value of 0 triggers an immediate update. If an object is supplied instead, you can specify a                    // 25689
 *     custom value for each event. For example:                                                                       // 25690
 *     `ng-model-options="{ updateOn: 'default blur', debounce: { 'default': 500, 'blur': 0 } }"`                      // 25691
 *   - `allowInvalid`: boolean value which indicates that the model can be set with values that did                    // 25692
 *     not validate correctly instead of the default behavior of setting the model to undefined.                       // 25693
 *   - `getterSetter`: boolean value which determines whether or not to treat functions bound to                       // 25694
       `ngModel` as getters/setters.                                                                                   // 25695
 *   - `timezone`: Defines the timezone to be used to read/write the `Date` instance in the model for                  // 25696
 *     `<input type="date">`, `<input type="time">`, ... . It understands UTC/GMT and the                              // 25697
 *     continental US time zone abbreviations, but for general use, use a time zone offset, for                        // 25698
 *     example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)                                         // 25699
 *     If not specified, the timezone of the browser will be used.                                                     // 25700
 *                                                                                                                     // 25701
 * @example                                                                                                            // 25702
                                                                                                                       // 25703
  The following example shows how to override immediate updates. Changes on the inputs within the                      // 25704
  form will update the model only when the control loses focus (blur event). If `escape` key is                        // 25705
  pressed while the input field is focused, the value is reset to the value in the current model.                      // 25706
                                                                                                                       // 25707
  <example name="ngModelOptions-directive-blur" module="optionsExample">                                               // 25708
    <file name="index.html">                                                                                           // 25709
      <div ng-controller="ExampleController">                                                                          // 25710
        <form name="userForm">                                                                                         // 25711
          <label>Name:                                                                                                 // 25712
            <input type="text" name="userName"                                                                         // 25713
                   ng-model="user.name"                                                                                // 25714
                   ng-model-options="{ updateOn: 'blur' }"                                                             // 25715
                   ng-keyup="cancel($event)" />                                                                        // 25716
          </label><br />                                                                                               // 25717
          <label>Other data:                                                                                           // 25718
            <input type="text" ng-model="user.data" />                                                                 // 25719
          </label><br />                                                                                               // 25720
        </form>                                                                                                        // 25721
        <pre>user.name = <span ng-bind="user.name"></span></pre>                                                       // 25722
      </div>                                                                                                           // 25723
    </file>                                                                                                            // 25724
    <file name="app.js">                                                                                               // 25725
      angular.module('optionsExample', [])                                                                             // 25726
        .controller('ExampleController', ['$scope', function($scope) {                                                 // 25727
          $scope.user = { name: 'say', data: '' };                                                                     // 25728
                                                                                                                       // 25729
          $scope.cancel = function(e) {                                                                                // 25730
            if (e.keyCode == 27) {                                                                                     // 25731
              $scope.userForm.userName.$rollbackViewValue();                                                           // 25732
            }                                                                                                          // 25733
          };                                                                                                           // 25734
        }]);                                                                                                           // 25735
    </file>                                                                                                            // 25736
    <file name="protractor.js" type="protractor">                                                                      // 25737
      var model = element(by.binding('user.name'));                                                                    // 25738
      var input = element(by.model('user.name'));                                                                      // 25739
      var other = element(by.model('user.data'));                                                                      // 25740
                                                                                                                       // 25741
      it('should allow custom events', function() {                                                                    // 25742
        input.sendKeys(' hello');                                                                                      // 25743
        input.click();                                                                                                 // 25744
        expect(model.getText()).toEqual('say');                                                                        // 25745
        other.click();                                                                                                 // 25746
        expect(model.getText()).toEqual('say hello');                                                                  // 25747
      });                                                                                                              // 25748
                                                                                                                       // 25749
      it('should $rollbackViewValue when model changes', function() {                                                  // 25750
        input.sendKeys(' hello');                                                                                      // 25751
        expect(input.getAttribute('value')).toEqual('say hello');                                                      // 25752
        input.sendKeys(protractor.Key.ESCAPE);                                                                         // 25753
        expect(input.getAttribute('value')).toEqual('say');                                                            // 25754
        other.click();                                                                                                 // 25755
        expect(model.getText()).toEqual('say');                                                                        // 25756
      });                                                                                                              // 25757
    </file>                                                                                                            // 25758
  </example>                                                                                                           // 25759
                                                                                                                       // 25760
  This one shows how to debounce model changes. Model will be updated only 1 sec after last change.                    // 25761
  If the `Clear` button is pressed, any debounced action is canceled and the value becomes empty.                      // 25762
                                                                                                                       // 25763
  <example name="ngModelOptions-directive-debounce" module="optionsExample">                                           // 25764
    <file name="index.html">                                                                                           // 25765
      <div ng-controller="ExampleController">                                                                          // 25766
        <form name="userForm">                                                                                         // 25767
          <label>Name:                                                                                                 // 25768
            <input type="text" name="userName"                                                                         // 25769
                   ng-model="user.name"                                                                                // 25770
                   ng-model-options="{ debounce: 1000 }" />                                                            // 25771
          </label>                                                                                                     // 25772
          <button ng-click="userForm.userName.$rollbackViewValue(); user.name=''">Clear</button>                       // 25773
          <br />                                                                                                       // 25774
        </form>                                                                                                        // 25775
        <pre>user.name = <span ng-bind="user.name"></span></pre>                                                       // 25776
      </div>                                                                                                           // 25777
    </file>                                                                                                            // 25778
    <file name="app.js">                                                                                               // 25779
      angular.module('optionsExample', [])                                                                             // 25780
        .controller('ExampleController', ['$scope', function($scope) {                                                 // 25781
          $scope.user = { name: 'say' };                                                                               // 25782
        }]);                                                                                                           // 25783
    </file>                                                                                                            // 25784
  </example>                                                                                                           // 25785
                                                                                                                       // 25786
  This one shows how to bind to getter/setters:                                                                        // 25787
                                                                                                                       // 25788
  <example name="ngModelOptions-directive-getter-setter" module="getterSetterExample">                                 // 25789
    <file name="index.html">                                                                                           // 25790
      <div ng-controller="ExampleController">                                                                          // 25791
        <form name="userForm">                                                                                         // 25792
          <label>Name:                                                                                                 // 25793
            <input type="text" name="userName"                                                                         // 25794
                   ng-model="user.name"                                                                                // 25795
                   ng-model-options="{ getterSetter: true }" />                                                        // 25796
          </label>                                                                                                     // 25797
        </form>                                                                                                        // 25798
        <pre>user.name = <span ng-bind="user.name()"></span></pre>                                                     // 25799
      </div>                                                                                                           // 25800
    </file>                                                                                                            // 25801
    <file name="app.js">                                                                                               // 25802
      angular.module('getterSetterExample', [])                                                                        // 25803
        .controller('ExampleController', ['$scope', function($scope) {                                                 // 25804
          var _name = 'Brian';                                                                                         // 25805
          $scope.user = {                                                                                              // 25806
            name: function(newName) {                                                                                  // 25807
              // Note that newName can be undefined for two reasons:                                                   // 25808
              // 1. Because it is called as a getter and thus called with no arguments                                 // 25809
              // 2. Because the property should actually be set to undefined. This happens e.g. if the                 // 25810
              //    input is invalid                                                                                   // 25811
              return arguments.length ? (_name = newName) : _name;                                                     // 25812
            }                                                                                                          // 25813
          };                                                                                                           // 25814
        }]);                                                                                                           // 25815
    </file>                                                                                                            // 25816
  </example>                                                                                                           // 25817
 */                                                                                                                    // 25818
var ngModelOptionsDirective = function() {                                                                             // 25819
  return {                                                                                                             // 25820
    restrict: 'A',                                                                                                     // 25821
    controller: ['$scope', '$attrs', function($scope, $attrs) {                                                        // 25822
      var that = this;                                                                                                 // 25823
      this.$options = copy($scope.$eval($attrs.ngModelOptions));                                                       // 25824
      // Allow adding/overriding bound events                                                                          // 25825
      if (isDefined(this.$options.updateOn)) {                                                                         // 25826
        this.$options.updateOnDefault = false;                                                                         // 25827
        // extract "default" pseudo-event from list of events that can trigger a model update                          // 25828
        this.$options.updateOn = trim(this.$options.updateOn.replace(DEFAULT_REGEXP, function() {                      // 25829
          that.$options.updateOnDefault = true;                                                                        // 25830
          return ' ';                                                                                                  // 25831
        }));                                                                                                           // 25832
      } else {                                                                                                         // 25833
        this.$options.updateOnDefault = true;                                                                          // 25834
      }                                                                                                                // 25835
    }]                                                                                                                 // 25836
  };                                                                                                                   // 25837
};                                                                                                                     // 25838
                                                                                                                       // 25839
                                                                                                                       // 25840
                                                                                                                       // 25841
// helper methods                                                                                                      // 25842
function addSetValidityMethod(context) {                                                                               // 25843
  var ctrl = context.ctrl,                                                                                             // 25844
      $element = context.$element,                                                                                     // 25845
      classCache = {},                                                                                                 // 25846
      set = context.set,                                                                                               // 25847
      unset = context.unset,                                                                                           // 25848
      $animate = context.$animate;                                                                                     // 25849
                                                                                                                       // 25850
  classCache[INVALID_CLASS] = !(classCache[VALID_CLASS] = $element.hasClass(VALID_CLASS));                             // 25851
                                                                                                                       // 25852
  ctrl.$setValidity = setValidity;                                                                                     // 25853
                                                                                                                       // 25854
  function setValidity(validationErrorKey, state, controller) {                                                        // 25855
    if (isUndefined(state)) {                                                                                          // 25856
      createAndSet('$pending', validationErrorKey, controller);                                                        // 25857
    } else {                                                                                                           // 25858
      unsetAndCleanup('$pending', validationErrorKey, controller);                                                     // 25859
    }                                                                                                                  // 25860
    if (!isBoolean(state)) {                                                                                           // 25861
      unset(ctrl.$error, validationErrorKey, controller);                                                              // 25862
      unset(ctrl.$$success, validationErrorKey, controller);                                                           // 25863
    } else {                                                                                                           // 25864
      if (state) {                                                                                                     // 25865
        unset(ctrl.$error, validationErrorKey, controller);                                                            // 25866
        set(ctrl.$$success, validationErrorKey, controller);                                                           // 25867
      } else {                                                                                                         // 25868
        set(ctrl.$error, validationErrorKey, controller);                                                              // 25869
        unset(ctrl.$$success, validationErrorKey, controller);                                                         // 25870
      }                                                                                                                // 25871
    }                                                                                                                  // 25872
    if (ctrl.$pending) {                                                                                               // 25873
      cachedToggleClass(PENDING_CLASS, true);                                                                          // 25874
      ctrl.$valid = ctrl.$invalid = undefined;                                                                         // 25875
      toggleValidationCss('', null);                                                                                   // 25876
    } else {                                                                                                           // 25877
      cachedToggleClass(PENDING_CLASS, false);                                                                         // 25878
      ctrl.$valid = isObjectEmpty(ctrl.$error);                                                                        // 25879
      ctrl.$invalid = !ctrl.$valid;                                                                                    // 25880
      toggleValidationCss('', ctrl.$valid);                                                                            // 25881
    }                                                                                                                  // 25882
                                                                                                                       // 25883
    // re-read the state as the set/unset methods could have                                                           // 25884
    // combined state in ctrl.$error[validationError] (used for forms),                                                // 25885
    // where setting/unsetting only increments/decrements the value,                                                   // 25886
    // and does not replace it.                                                                                        // 25887
    var combinedState;                                                                                                 // 25888
    if (ctrl.$pending && ctrl.$pending[validationErrorKey]) {                                                          // 25889
      combinedState = undefined;                                                                                       // 25890
    } else if (ctrl.$error[validationErrorKey]) {                                                                      // 25891
      combinedState = false;                                                                                           // 25892
    } else if (ctrl.$$success[validationErrorKey]) {                                                                   // 25893
      combinedState = true;                                                                                            // 25894
    } else {                                                                                                           // 25895
      combinedState = null;                                                                                            // 25896
    }                                                                                                                  // 25897
                                                                                                                       // 25898
    toggleValidationCss(validationErrorKey, combinedState);                                                            // 25899
    ctrl.$$parentForm.$setValidity(validationErrorKey, combinedState, ctrl);                                           // 25900
  }                                                                                                                    // 25901
                                                                                                                       // 25902
  function createAndSet(name, value, controller) {                                                                     // 25903
    if (!ctrl[name]) {                                                                                                 // 25904
      ctrl[name] = {};                                                                                                 // 25905
    }                                                                                                                  // 25906
    set(ctrl[name], value, controller);                                                                                // 25907
  }                                                                                                                    // 25908
                                                                                                                       // 25909
  function unsetAndCleanup(name, value, controller) {                                                                  // 25910
    if (ctrl[name]) {                                                                                                  // 25911
      unset(ctrl[name], value, controller);                                                                            // 25912
    }                                                                                                                  // 25913
    if (isObjectEmpty(ctrl[name])) {                                                                                   // 25914
      ctrl[name] = undefined;                                                                                          // 25915
    }                                                                                                                  // 25916
  }                                                                                                                    // 25917
                                                                                                                       // 25918
  function cachedToggleClass(className, switchValue) {                                                                 // 25919
    if (switchValue && !classCache[className]) {                                                                       // 25920
      $animate.addClass($element, className);                                                                          // 25921
      classCache[className] = true;                                                                                    // 25922
    } else if (!switchValue && classCache[className]) {                                                                // 25923
      $animate.removeClass($element, className);                                                                       // 25924
      classCache[className] = false;                                                                                   // 25925
    }                                                                                                                  // 25926
  }                                                                                                                    // 25927
                                                                                                                       // 25928
  function toggleValidationCss(validationErrorKey, isValid) {                                                          // 25929
    validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';                          // 25930
                                                                                                                       // 25931
    cachedToggleClass(VALID_CLASS + validationErrorKey, isValid === true);                                             // 25932
    cachedToggleClass(INVALID_CLASS + validationErrorKey, isValid === false);                                          // 25933
  }                                                                                                                    // 25934
}                                                                                                                      // 25935
                                                                                                                       // 25936
function isObjectEmpty(obj) {                                                                                          // 25937
  if (obj) {                                                                                                           // 25938
    for (var prop in obj) {                                                                                            // 25939
      if (obj.hasOwnProperty(prop)) {                                                                                  // 25940
        return false;                                                                                                  // 25941
      }                                                                                                                // 25942
    }                                                                                                                  // 25943
  }                                                                                                                    // 25944
  return true;                                                                                                         // 25945
}                                                                                                                      // 25946
                                                                                                                       // 25947
/**                                                                                                                    // 25948
 * @ngdoc directive                                                                                                    // 25949
 * @name ngNonBindable                                                                                                 // 25950
 * @restrict AC                                                                                                        // 25951
 * @priority 1000                                                                                                      // 25952
 *                                                                                                                     // 25953
 * @description                                                                                                        // 25954
 * The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current                      // 25955
 * DOM element. This is useful if the element contains what appears to be Angular directives and                       // 25956
 * bindings but which should be ignored by Angular. This could be the case if you have a site that                     // 25957
 * displays snippets of code, for instance.                                                                            // 25958
 *                                                                                                                     // 25959
 * @element ANY                                                                                                        // 25960
 *                                                                                                                     // 25961
 * @example                                                                                                            // 25962
 * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,                   // 25963
 * but the one wrapped in `ngNonBindable` is left alone.                                                               // 25964
 *                                                                                                                     // 25965
 * @example                                                                                                            // 25966
    <example>                                                                                                          // 25967
      <file name="index.html">                                                                                         // 25968
        <div>Normal: {{1 + 2}}</div>                                                                                   // 25969
        <div ng-non-bindable>Ignored: {{1 + 2}}</div>                                                                  // 25970
      </file>                                                                                                          // 25971
      <file name="protractor.js" type="protractor">                                                                    // 25972
       it('should check ng-non-bindable', function() {                                                                 // 25973
         expect(element(by.binding('1 + 2')).getText()).toContain('3');                                                // 25974
         expect(element.all(by.css('div')).last().getText()).toMatch(/1 \+ 2/);                                        // 25975
       });                                                                                                             // 25976
      </file>                                                                                                          // 25977
    </example>                                                                                                         // 25978
 */                                                                                                                    // 25979
var ngNonBindableDirective = ngDirective({ terminal: true, priority: 1000 });                                          // 25980
                                                                                                                       // 25981
/* global jqLiteRemove */                                                                                              // 25982
                                                                                                                       // 25983
var ngOptionsMinErr = minErr('ngOptions');                                                                             // 25984
                                                                                                                       // 25985
/**                                                                                                                    // 25986
 * @ngdoc directive                                                                                                    // 25987
 * @name ngOptions                                                                                                     // 25988
 * @restrict A                                                                                                         // 25989
 *                                                                                                                     // 25990
 * @description                                                                                                        // 25991
 *                                                                                                                     // 25992
 * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`                                  // 25993
 * elements for the `<select>` element using the array or object obtained by evaluating the                            // 25994
 * `ngOptions` comprehension expression.                                                                               // 25995
 *                                                                                                                     // 25996
 * In many cases, `ngRepeat` can be used on `<option>` elements instead of `ngOptions` to achieve a                    // 25997
 * similar result. However, `ngOptions` provides some benefits such as reducing memory and                             // 25998
 * increasing speed by not creating a new scope for each repeated instance, as well as providing                       // 25999
 * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the                    // 26000
 * comprehension expression. `ngOptions` should be used when the `<select>` model needs to be bound                    // 26001
 *  to a non-string value. This is because an option element can only be bound to string values at                     // 26002
 * present.                                                                                                            // 26003
 *                                                                                                                     // 26004
 * When an item in the `<select>` menu is selected, the array element or object property                               // 26005
 * represented by the selected option will be bound to the model identified by the `ngModel`                           // 26006
 * directive.                                                                                                          // 26007
 *                                                                                                                     // 26008
 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can                      // 26009
 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"                // 26010
 * option. See example below for demonstration.                                                                        // 26011
 *                                                                                                                     // 26012
 * ## Complex Models (objects or collections)                                                                          // 26013
 *                                                                                                                     // 26014
 * **Note:** By default, `ngModel` watches the model by reference, not value. This is important when                   // 26015
 * binding any input directive to a model that is an object or a collection.                                           // 26016
 *                                                                                                                     // 26017
 * Since this is a common situation for `ngOptions` the directive additionally watches the model using                 // 26018
 * `$watchCollection` when the select has the `multiple` attribute or when there is a `track by` clause in             // 26019
 * the options expression. This allows ngOptions to trigger a re-rendering of the options even if the actual           // 26020
 * object/collection has not changed identity but only a property on the object or an item in the collection           // 26021
 * changes.                                                                                                            // 26022
 *                                                                                                                     // 26023
 * Note that `$watchCollection` does a shallow comparison of the properties of the object (or the items in the collection
 * if the model is an array). This means that changing a property deeper inside the object/collection that the         // 26025
 * first level will not trigger a re-rendering.                                                                        // 26026
 *                                                                                                                     // 26027
 *                                                                                                                     // 26028
 * ## `select` **`as`**                                                                                                // 26029
 *                                                                                                                     // 26030
 * Using `select` **`as`** will bind the result of the `select` expression to the model, but                           // 26031
 * the value of the `<select>` and `<option>` html elements will be either the index (for array data sources)          // 26032
 * or property name (for object data sources) of the value within the collection. If a **`track by`** expression       // 26033
 * is used, the result of that expression will be set as the value of the `option` and `select` elements.              // 26034
 *                                                                                                                     // 26035
 *                                                                                                                     // 26036
 * ### `select` **`as`** and **`track by`**                                                                            // 26037
 *                                                                                                                     // 26038
 * <div class="alert alert-warning">                                                                                   // 26039
 * Do not use `select` **`as`** and **`track by`** in the same expression. They are not designed to work together.     // 26040
 * </div>                                                                                                              // 26041
 *                                                                                                                     // 26042
 * Consider the following example:                                                                                     // 26043
 *                                                                                                                     // 26044
 * ```html                                                                                                             // 26045
 * <select ng-options="item.subItem as item.label for item in values track by item.id" ng-model="selected"></select>   // 26046
 * ```                                                                                                                 // 26047
 *                                                                                                                     // 26048
 * ```js                                                                                                               // 26049
 * $scope.values = [{                                                                                                  // 26050
 *   id: 1,                                                                                                            // 26051
 *   label: 'aLabel',                                                                                                  // 26052
 *   subItem: { name: 'aSubItem' }                                                                                     // 26053
 * }, {                                                                                                                // 26054
 *   id: 2,                                                                                                            // 26055
 *   label: 'bLabel',                                                                                                  // 26056
 *   subItem: { name: 'bSubItem' }                                                                                     // 26057
 * }];                                                                                                                 // 26058
 *                                                                                                                     // 26059
 * $scope.selected = { name: 'aSubItem' };                                                                             // 26060
 * ```                                                                                                                 // 26061
 *                                                                                                                     // 26062
 * With the purpose of preserving the selection, the **`track by`** expression is always applied to the element        // 26063
 * of the data source (to `item` in this example). To calculate whether an element is selected, we do the              // 26064
 * following:                                                                                                          // 26065
 *                                                                                                                     // 26066
 * 1. Apply **`track by`** to the elements in the array. In the example: `[1, 2]`                                      // 26067
 * 2. Apply **`track by`** to the already selected value in `ngModel`.                                                 // 26068
 *    In the example: this is not possible as **`track by`** refers to `item.id`, but the selected                     // 26069
 *    value from `ngModel` is `{name: 'aSubItem'}`, so the **`track by`** expression is applied to                     // 26070
 *    a wrong object, the selected element can't be found, `<select>` is always reset to the "not                      // 26071
 *    selected" option.                                                                                                // 26072
 *                                                                                                                     // 26073
 *                                                                                                                     // 26074
 * @param {string} ngModel Assignable angular expression to data-bind to.                                              // 26075
 * @param {string=} name Property name of the form under which the control is published.                               // 26076
 * @param {string=} required The control is considered valid only if value is entered.                                 // 26077
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                       // 26078
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                        // 26079
 *    `required` when you want to data-bind to the `required` attribute.                                               // 26080
 * @param {comprehension_expression=} ngOptions in one of the following forms:                                         // 26081
 *                                                                                                                     // 26082
 *   * for array data sources:                                                                                         // 26083
 *     * `label` **`for`** `value` **`in`** `array`                                                                    // 26084
 *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`                                                  // 26085
 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array`                                             // 26086
 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array`                                       // 26087
 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`                  // 26088
 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`            // 26089
 *     * `label` **`for`** `value` **`in`** `array` | orderBy:`orderexpr` **`track by`** `trackexpr`                   // 26090
 *        (for including a filter with `track by`)                                                                     // 26091
 *   * for object data sources:                                                                                        // 26092
 *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`                                                   // 26093
 *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`                                 // 26094
 *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`                             // 26095
 *     * `label` **`disable when`** `disable` **`for (`**`key`**`,`** `value`**`) in`** `object`                       // 26096
 *     * `select` **`as`** `label` **`group by`** `group`                                                              // 26097
 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`                                                        // 26098
 *     * `select` **`as`** `label` **`disable when`** `disable`                                                        // 26099
 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`                                                        // 26100
 *                                                                                                                     // 26101
 * Where:                                                                                                              // 26102
 *                                                                                                                     // 26103
 *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.                         // 26104
 *   * `value`: local variable which will refer to each item in the `array` or each property value                     // 26105
 *      of `object` during iteration.                                                                                  // 26106
 *   * `key`: local variable which will refer to a property name in `object` during iteration.                         // 26107
 *   * `label`: The result of this expression will be the label for `<option>` element. The                            // 26108
 *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).                        // 26109
 *   * `select`: The result of this expression will be bound to the model of the parent `<select>`                     // 26110
 *      element. If not specified, `select` expression will default to `value`.                                        // 26111
 *   * `group`: The result of this expression will be used to group options using the `<optgroup>`                     // 26112
 *      DOM element.                                                                                                   // 26113
 *   * `disable`: The result of this expression will be used to disable the rendered `<option>`                        // 26114
 *      element. Return `true` to disable.                                                                             // 26115
 *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be                  // 26116
 *      used to identify the objects in the array. The `trackexpr` will most likely refer to the                       // 26117
 *     `value` variable (e.g. `value.propertyName`). With this the selection is preserved                              // 26118
 *      even when the options are recreated (e.g. reloaded from the server).                                           // 26119
 *                                                                                                                     // 26120
 * @example                                                                                                            // 26121
    <example module="selectExample">                                                                                   // 26122
      <file name="index.html">                                                                                         // 26123
        <script>                                                                                                       // 26124
        angular.module('selectExample', [])                                                                            // 26125
          .controller('ExampleController', ['$scope', function($scope) {                                               // 26126
            $scope.colors = [                                                                                          // 26127
              {name:'black', shade:'dark'},                                                                            // 26128
              {name:'white', shade:'light', notAnOption: true},                                                        // 26129
              {name:'red', shade:'dark'},                                                                              // 26130
              {name:'blue', shade:'dark', notAnOption: true},                                                          // 26131
              {name:'yellow', shade:'light', notAnOption: false}                                                       // 26132
            ];                                                                                                         // 26133
            $scope.myColor = $scope.colors[2]; // red                                                                  // 26134
          }]);                                                                                                         // 26135
        </script>                                                                                                      // 26136
        <div ng-controller="ExampleController">                                                                        // 26137
          <ul>                                                                                                         // 26138
            <li ng-repeat="color in colors">                                                                           // 26139
              <label>Name: <input ng-model="color.name"></label>                                                       // 26140
              <label><input type="checkbox" ng-model="color.notAnOption"> Disabled?</label>                            // 26141
              <button ng-click="colors.splice($index, 1)" aria-label="Remove">X</button>                               // 26142
            </li>                                                                                                      // 26143
            <li>                                                                                                       // 26144
              <button ng-click="colors.push({})">add</button>                                                          // 26145
            </li>                                                                                                      // 26146
          </ul>                                                                                                        // 26147
          <hr/>                                                                                                        // 26148
          <label>Color (null not allowed):                                                                             // 26149
            <select ng-model="myColor" ng-options="color.name for color in colors"></select>                           // 26150
          </label><br/>                                                                                                // 26151
          <label>Color (null allowed):                                                                                 // 26152
          <span  class="nullable">                                                                                     // 26153
            <select ng-model="myColor" ng-options="color.name for color in colors">                                    // 26154
              <option value="">-- choose color --</option>                                                             // 26155
            </select>                                                                                                  // 26156
          </span></label><br/>                                                                                         // 26157
                                                                                                                       // 26158
          <label>Color grouped by shade:                                                                               // 26159
            <select ng-model="myColor" ng-options="color.name group by color.shade for color in colors">               // 26160
            </select>                                                                                                  // 26161
          </label><br/>                                                                                                // 26162
                                                                                                                       // 26163
          <label>Color grouped by shade, with some disabled:                                                           // 26164
            <select ng-model="myColor"                                                                                 // 26165
                  ng-options="color.name group by color.shade disable when color.notAnOption for color in colors">     // 26166
            </select>                                                                                                  // 26167
          </label><br/>                                                                                                // 26168
                                                                                                                       // 26169
                                                                                                                       // 26170
                                                                                                                       // 26171
          Select <button ng-click="myColor = { name:'not in list', shade: 'other' }">bogus</button>.                   // 26172
          <br/>                                                                                                        // 26173
          <hr/>                                                                                                        // 26174
          Currently selected: {{ {selected_color:myColor} }}                                                           // 26175
          <div style="border:solid 1px black; height:20px"                                                             // 26176
               ng-style="{'background-color':myColor.name}">                                                           // 26177
          </div>                                                                                                       // 26178
        </div>                                                                                                         // 26179
      </file>                                                                                                          // 26180
      <file name="protractor.js" type="protractor">                                                                    // 26181
         it('should check ng-options', function() {                                                                    // 26182
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');                           // 26183
           element.all(by.model('myColor')).first().click();                                                           // 26184
           element.all(by.css('select[ng-model="myColor"] option')).first().click();                                   // 26185
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');                         // 26186
           element(by.css('.nullable select[ng-model="myColor"]')).click();                                            // 26187
           element.all(by.css('.nullable select[ng-model="myColor"] option')).first().click();                         // 26188
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');                          // 26189
         });                                                                                                           // 26190
      </file>                                                                                                          // 26191
    </example>                                                                                                         // 26192
 */                                                                                                                    // 26193
                                                                                                                       // 26194
// jshint maxlen: false                                                                                                // 26195
//                     //00001111111111000000000002222222222000000000000000000000333333333300000000000000000000000004444444444400000000000005555555555555550000000006666666666666660000000777777777777777000000000000000888888888800000000000000000009999999999
var NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/;
                        // 1: value expression (valueFn)                                                               // 26198
                        // 2: label expression (displayFn)                                                             // 26199
                        // 3: group by expression (groupByFn)                                                          // 26200
                        // 4: disable when expression (disableWhenFn)                                                  // 26201
                        // 5: array item variable name                                                                 // 26202
                        // 6: object item key variable name                                                            // 26203
                        // 7: object item value variable name                                                          // 26204
                        // 8: collection expression                                                                    // 26205
                        // 9: track by expression                                                                      // 26206
// jshint maxlen: 100                                                                                                  // 26207
                                                                                                                       // 26208
                                                                                                                       // 26209
var ngOptionsDirective = ['$compile', '$parse', function($compile, $parse) {                                           // 26210
                                                                                                                       // 26211
  function parseOptionsExpression(optionsExp, selectElement, scope) {                                                  // 26212
                                                                                                                       // 26213
    var match = optionsExp.match(NG_OPTIONS_REGEXP);                                                                   // 26214
    if (!(match)) {                                                                                                    // 26215
      throw ngOptionsMinErr('iexp',                                                                                    // 26216
        "Expected expression in form of " +                                                                            // 26217
        "'_select_ (as _label_)? for (_key_,)?_value_ in _collection_'" +                                              // 26218
        " but got '{0}'. Element: {1}",                                                                                // 26219
        optionsExp, startingTag(selectElement));                                                                       // 26220
    }                                                                                                                  // 26221
                                                                                                                       // 26222
    // Extract the parts from the ngOptions expression                                                                 // 26223
                                                                                                                       // 26224
    // The variable name for the value of the item in the collection                                                   // 26225
    var valueName = match[5] || match[7];                                                                              // 26226
    // The variable name for the key of the item in the collection                                                     // 26227
    var keyName = match[6];                                                                                            // 26228
                                                                                                                       // 26229
    // An expression that generates the viewValue for an option if there is a label expression                         // 26230
    var selectAs = / as /.test(match[0]) && match[1];                                                                  // 26231
    // An expression that is used to track the id of each object in the options collection                             // 26232
    var trackBy = match[9];                                                                                            // 26233
    // An expression that generates the viewValue for an option if there is no label expression                        // 26234
    var valueFn = $parse(match[2] ? match[1] : valueName);                                                             // 26235
    var selectAsFn = selectAs && $parse(selectAs);                                                                     // 26236
    var viewValueFn = selectAsFn || valueFn;                                                                           // 26237
    var trackByFn = trackBy && $parse(trackBy);                                                                        // 26238
                                                                                                                       // 26239
    // Get the value by which we are going to track the option                                                         // 26240
    // if we have a trackFn then use that (passing scope and locals)                                                   // 26241
    // otherwise just hash the given viewValue                                                                         // 26242
    var getTrackByValueFn = trackBy ?                                                                                  // 26243
                              function(value, locals) { return trackByFn(scope, locals); } :                           // 26244
                              function getHashOfValue(value) { return hashKey(value); };                               // 26245
    var getTrackByValue = function(value, key) {                                                                       // 26246
      return getTrackByValueFn(value, getLocals(value, key));                                                          // 26247
    };                                                                                                                 // 26248
                                                                                                                       // 26249
    var displayFn = $parse(match[2] || match[1]);                                                                      // 26250
    var groupByFn = $parse(match[3] || '');                                                                            // 26251
    var disableWhenFn = $parse(match[4] || '');                                                                        // 26252
    var valuesFn = $parse(match[8]);                                                                                   // 26253
                                                                                                                       // 26254
    var locals = {};                                                                                                   // 26255
    var getLocals = keyName ? function(value, key) {                                                                   // 26256
      locals[keyName] = key;                                                                                           // 26257
      locals[valueName] = value;                                                                                       // 26258
      return locals;                                                                                                   // 26259
    } : function(value) {                                                                                              // 26260
      locals[valueName] = value;                                                                                       // 26261
      return locals;                                                                                                   // 26262
    };                                                                                                                 // 26263
                                                                                                                       // 26264
                                                                                                                       // 26265
    function Option(selectValue, viewValue, label, group, disabled) {                                                  // 26266
      this.selectValue = selectValue;                                                                                  // 26267
      this.viewValue = viewValue;                                                                                      // 26268
      this.label = label;                                                                                              // 26269
      this.group = group;                                                                                              // 26270
      this.disabled = disabled;                                                                                        // 26271
    }                                                                                                                  // 26272
                                                                                                                       // 26273
    function getOptionValuesKeys(optionValues) {                                                                       // 26274
      var optionValuesKeys;                                                                                            // 26275
                                                                                                                       // 26276
      if (!keyName && isArrayLike(optionValues)) {                                                                     // 26277
        optionValuesKeys = optionValues;                                                                               // 26278
      } else {                                                                                                         // 26279
        // if object, extract keys, in enumeration order, unsorted                                                     // 26280
        optionValuesKeys = [];                                                                                         // 26281
        for (var itemKey in optionValues) {                                                                            // 26282
          if (optionValues.hasOwnProperty(itemKey) && itemKey.charAt(0) !== '$') {                                     // 26283
            optionValuesKeys.push(itemKey);                                                                            // 26284
          }                                                                                                            // 26285
        }                                                                                                              // 26286
      }                                                                                                                // 26287
      return optionValuesKeys;                                                                                         // 26288
    }                                                                                                                  // 26289
                                                                                                                       // 26290
    return {                                                                                                           // 26291
      trackBy: trackBy,                                                                                                // 26292
      getTrackByValue: getTrackByValue,                                                                                // 26293
      getWatchables: $parse(valuesFn, function(optionValues) {                                                         // 26294
        // Create a collection of things that we would like to watch (watchedArray)                                    // 26295
        // so that they can all be watched using a single $watchCollection                                             // 26296
        // that only runs the handler once if anything changes                                                         // 26297
        var watchedArray = [];                                                                                         // 26298
        optionValues = optionValues || [];                                                                             // 26299
                                                                                                                       // 26300
        var optionValuesKeys = getOptionValuesKeys(optionValues);                                                      // 26301
        var optionValuesLength = optionValuesKeys.length;                                                              // 26302
        for (var index = 0; index < optionValuesLength; index++) {                                                     // 26303
          var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];                             // 26304
          var value = optionValues[key];                                                                               // 26305
                                                                                                                       // 26306
          var locals = getLocals(optionValues[key], key);                                                              // 26307
          var selectValue = getTrackByValueFn(optionValues[key], locals);                                              // 26308
          watchedArray.push(selectValue);                                                                              // 26309
                                                                                                                       // 26310
          // Only need to watch the displayFn if there is a specific label expression                                  // 26311
          if (match[2] || match[1]) {                                                                                  // 26312
            var label = displayFn(scope, locals);                                                                      // 26313
            watchedArray.push(label);                                                                                  // 26314
          }                                                                                                            // 26315
                                                                                                                       // 26316
          // Only need to watch the disableWhenFn if there is a specific disable expression                            // 26317
          if (match[4]) {                                                                                              // 26318
            var disableWhen = disableWhenFn(scope, locals);                                                            // 26319
            watchedArray.push(disableWhen);                                                                            // 26320
          }                                                                                                            // 26321
        }                                                                                                              // 26322
        return watchedArray;                                                                                           // 26323
      }),                                                                                                              // 26324
                                                                                                                       // 26325
      getOptions: function() {                                                                                         // 26326
                                                                                                                       // 26327
        var optionItems = [];                                                                                          // 26328
        var selectValueMap = {};                                                                                       // 26329
                                                                                                                       // 26330
        // The option values were already computed in the `getWatchables` fn,                                          // 26331
        // which must have been called to trigger `getOptions`                                                         // 26332
        var optionValues = valuesFn(scope) || [];                                                                      // 26333
        var optionValuesKeys = getOptionValuesKeys(optionValues);                                                      // 26334
        var optionValuesLength = optionValuesKeys.length;                                                              // 26335
                                                                                                                       // 26336
        for (var index = 0; index < optionValuesLength; index++) {                                                     // 26337
          var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];                             // 26338
          var value = optionValues[key];                                                                               // 26339
          var locals = getLocals(value, key);                                                                          // 26340
          var viewValue = viewValueFn(scope, locals);                                                                  // 26341
          var selectValue = getTrackByValueFn(viewValue, locals);                                                      // 26342
          var label = displayFn(scope, locals);                                                                        // 26343
          var group = groupByFn(scope, locals);                                                                        // 26344
          var disabled = disableWhenFn(scope, locals);                                                                 // 26345
          var optionItem = new Option(selectValue, viewValue, label, group, disabled);                                 // 26346
                                                                                                                       // 26347
          optionItems.push(optionItem);                                                                                // 26348
          selectValueMap[selectValue] = optionItem;                                                                    // 26349
        }                                                                                                              // 26350
                                                                                                                       // 26351
        return {                                                                                                       // 26352
          items: optionItems,                                                                                          // 26353
          selectValueMap: selectValueMap,                                                                              // 26354
          getOptionFromViewValue: function(value) {                                                                    // 26355
            return selectValueMap[getTrackByValue(value)];                                                             // 26356
          },                                                                                                           // 26357
          getViewValueFromOption: function(option) {                                                                   // 26358
            // If the viewValue could be an object that may be mutated by the application,                             // 26359
            // we need to make a copy and not return the reference to the value on the option.                         // 26360
            return trackBy ? angular.copy(option.viewValue) : option.viewValue;                                        // 26361
          }                                                                                                            // 26362
        };                                                                                                             // 26363
      }                                                                                                                // 26364
    };                                                                                                                 // 26365
  }                                                                                                                    // 26366
                                                                                                                       // 26367
                                                                                                                       // 26368
  // we can't just jqLite('<option>') since jqLite is not smart enough                                                 // 26369
  // to create it in <select> and IE barfs otherwise.                                                                  // 26370
  var optionTemplate = document.createElement('option'),                                                               // 26371
      optGroupTemplate = document.createElement('optgroup');                                                           // 26372
                                                                                                                       // 26373
  return {                                                                                                             // 26374
    restrict: 'A',                                                                                                     // 26375
    terminal: true,                                                                                                    // 26376
    require: ['select', '?ngModel'],                                                                                   // 26377
    link: function(scope, selectElement, attr, ctrls) {                                                                // 26378
                                                                                                                       // 26379
      // if ngModel is not defined, we don't need to do anything                                                       // 26380
      var ngModelCtrl = ctrls[1];                                                                                      // 26381
      if (!ngModelCtrl) return;                                                                                        // 26382
                                                                                                                       // 26383
      var selectCtrl = ctrls[0];                                                                                       // 26384
      var multiple = attr.multiple;                                                                                    // 26385
                                                                                                                       // 26386
      // The emptyOption allows the application developer to provide their own custom "empty"                          // 26387
      // option when the viewValue does not match any of the option values.                                            // 26388
      var emptyOption;                                                                                                 // 26389
      for (var i = 0, children = selectElement.children(), ii = children.length; i < ii; i++) {                        // 26390
        if (children[i].value === '') {                                                                                // 26391
          emptyOption = children.eq(i);                                                                                // 26392
          break;                                                                                                       // 26393
        }                                                                                                              // 26394
      }                                                                                                                // 26395
                                                                                                                       // 26396
      var providedEmptyOption = !!emptyOption;                                                                         // 26397
                                                                                                                       // 26398
      var unknownOption = jqLite(optionTemplate.cloneNode(false));                                                     // 26399
      unknownOption.val('?');                                                                                          // 26400
                                                                                                                       // 26401
      var options;                                                                                                     // 26402
      var ngOptions = parseOptionsExpression(attr.ngOptions, selectElement, scope);                                    // 26403
                                                                                                                       // 26404
                                                                                                                       // 26405
      var renderEmptyOption = function() {                                                                             // 26406
        if (!providedEmptyOption) {                                                                                    // 26407
          selectElement.prepend(emptyOption);                                                                          // 26408
        }                                                                                                              // 26409
        selectElement.val('');                                                                                         // 26410
        emptyOption.prop('selected', true); // needed for IE                                                           // 26411
        emptyOption.attr('selected', true);                                                                            // 26412
      };                                                                                                               // 26413
                                                                                                                       // 26414
      var removeEmptyOption = function() {                                                                             // 26415
        if (!providedEmptyOption) {                                                                                    // 26416
          emptyOption.remove();                                                                                        // 26417
        }                                                                                                              // 26418
      };                                                                                                               // 26419
                                                                                                                       // 26420
                                                                                                                       // 26421
      var renderUnknownOption = function() {                                                                           // 26422
        selectElement.prepend(unknownOption);                                                                          // 26423
        selectElement.val('?');                                                                                        // 26424
        unknownOption.prop('selected', true); // needed for IE                                                         // 26425
        unknownOption.attr('selected', true);                                                                          // 26426
      };                                                                                                               // 26427
                                                                                                                       // 26428
      var removeUnknownOption = function() {                                                                           // 26429
        unknownOption.remove();                                                                                        // 26430
      };                                                                                                               // 26431
                                                                                                                       // 26432
                                                                                                                       // 26433
      // Update the controller methods for multiple selectable options                                                 // 26434
      if (!multiple) {                                                                                                 // 26435
                                                                                                                       // 26436
        selectCtrl.writeValue = function writeNgOptionsValue(value) {                                                  // 26437
          var option = options.getOptionFromViewValue(value);                                                          // 26438
                                                                                                                       // 26439
          if (option && !option.disabled) {                                                                            // 26440
            if (selectElement[0].value !== option.selectValue) {                                                       // 26441
              removeUnknownOption();                                                                                   // 26442
              removeEmptyOption();                                                                                     // 26443
                                                                                                                       // 26444
              selectElement[0].value = option.selectValue;                                                             // 26445
              option.element.selected = true;                                                                          // 26446
              option.element.setAttribute('selected', 'selected');                                                     // 26447
            }                                                                                                          // 26448
          } else {                                                                                                     // 26449
            if (value === null || providedEmptyOption) {                                                               // 26450
              removeUnknownOption();                                                                                   // 26451
              renderEmptyOption();                                                                                     // 26452
            } else {                                                                                                   // 26453
              removeEmptyOption();                                                                                     // 26454
              renderUnknownOption();                                                                                   // 26455
            }                                                                                                          // 26456
          }                                                                                                            // 26457
        };                                                                                                             // 26458
                                                                                                                       // 26459
        selectCtrl.readValue = function readNgOptionsValue() {                                                         // 26460
                                                                                                                       // 26461
          var selectedOption = options.selectValueMap[selectElement.val()];                                            // 26462
                                                                                                                       // 26463
          if (selectedOption && !selectedOption.disabled) {                                                            // 26464
            removeEmptyOption();                                                                                       // 26465
            removeUnknownOption();                                                                                     // 26466
            return options.getViewValueFromOption(selectedOption);                                                     // 26467
          }                                                                                                            // 26468
          return null;                                                                                                 // 26469
        };                                                                                                             // 26470
                                                                                                                       // 26471
        // If we are using `track by` then we must watch the tracked value on the model                                // 26472
        // since ngModel only watches for object identity change                                                       // 26473
        if (ngOptions.trackBy) {                                                                                       // 26474
          scope.$watch(                                                                                                // 26475
            function() { return ngOptions.getTrackByValue(ngModelCtrl.$viewValue); },                                  // 26476
            function() { ngModelCtrl.$render(); }                                                                      // 26477
          );                                                                                                           // 26478
        }                                                                                                              // 26479
                                                                                                                       // 26480
      } else {                                                                                                         // 26481
                                                                                                                       // 26482
        ngModelCtrl.$isEmpty = function(value) {                                                                       // 26483
          return !value || value.length === 0;                                                                         // 26484
        };                                                                                                             // 26485
                                                                                                                       // 26486
                                                                                                                       // 26487
        selectCtrl.writeValue = function writeNgOptionsMultiple(value) {                                               // 26488
          options.items.forEach(function(option) {                                                                     // 26489
            option.element.selected = false;                                                                           // 26490
          });                                                                                                          // 26491
                                                                                                                       // 26492
          if (value) {                                                                                                 // 26493
            value.forEach(function(item) {                                                                             // 26494
              var option = options.getOptionFromViewValue(item);                                                       // 26495
              if (option && !option.disabled) option.element.selected = true;                                          // 26496
            });                                                                                                        // 26497
          }                                                                                                            // 26498
        };                                                                                                             // 26499
                                                                                                                       // 26500
                                                                                                                       // 26501
        selectCtrl.readValue = function readNgOptionsMultiple() {                                                      // 26502
          var selectedValues = selectElement.val() || [],                                                              // 26503
              selections = [];                                                                                         // 26504
                                                                                                                       // 26505
          forEach(selectedValues, function(value) {                                                                    // 26506
            var option = options.selectValueMap[value];                                                                // 26507
            if (option && !option.disabled) selections.push(options.getViewValueFromOption(option));                   // 26508
          });                                                                                                          // 26509
                                                                                                                       // 26510
          return selections;                                                                                           // 26511
        };                                                                                                             // 26512
                                                                                                                       // 26513
        // If we are using `track by` then we must watch these tracked values on the model                             // 26514
        // since ngModel only watches for object identity change                                                       // 26515
        if (ngOptions.trackBy) {                                                                                       // 26516
                                                                                                                       // 26517
          scope.$watchCollection(function() {                                                                          // 26518
            if (isArray(ngModelCtrl.$viewValue)) {                                                                     // 26519
              return ngModelCtrl.$viewValue.map(function(value) {                                                      // 26520
                return ngOptions.getTrackByValue(value);                                                               // 26521
              });                                                                                                      // 26522
            }                                                                                                          // 26523
          }, function() {                                                                                              // 26524
            ngModelCtrl.$render();                                                                                     // 26525
          });                                                                                                          // 26526
                                                                                                                       // 26527
        }                                                                                                              // 26528
      }                                                                                                                // 26529
                                                                                                                       // 26530
                                                                                                                       // 26531
      if (providedEmptyOption) {                                                                                       // 26532
                                                                                                                       // 26533
        // we need to remove it before calling selectElement.empty() because otherwise IE will                         // 26534
        // remove the label from the element. wtf?                                                                     // 26535
        emptyOption.remove();                                                                                          // 26536
                                                                                                                       // 26537
        // compile the element since there might be bindings in it                                                     // 26538
        $compile(emptyOption)(scope);                                                                                  // 26539
                                                                                                                       // 26540
        // remove the class, which is added automatically because we recompile the element and it                      // 26541
        // becomes the compilation root                                                                                // 26542
        emptyOption.removeClass('ng-scope');                                                                           // 26543
      } else {                                                                                                         // 26544
        emptyOption = jqLite(optionTemplate.cloneNode(false));                                                         // 26545
      }                                                                                                                // 26546
                                                                                                                       // 26547
      // We need to do this here to ensure that the options object is defined                                          // 26548
      // when we first hit it in writeNgOptionsValue                                                                   // 26549
      updateOptions();                                                                                                 // 26550
                                                                                                                       // 26551
      // We will re-render the option elements if the option values or labels change                                   // 26552
      scope.$watchCollection(ngOptions.getWatchables, updateOptions);                                                  // 26553
                                                                                                                       // 26554
      // ------------------------------------------------------------------ //                                         // 26555
                                                                                                                       // 26556
                                                                                                                       // 26557
      function updateOptionElement(option, element) {                                                                  // 26558
        option.element = element;                                                                                      // 26559
        element.disabled = option.disabled;                                                                            // 26560
        // NOTE: The label must be set before the value, otherwise IE10/11/EDGE create unresponsive                    // 26561
        // selects in certain circumstances when multiple selects are next to each other and display                   // 26562
        // the option list in listbox style, i.e. the select is [multiple], or specifies a [size].                     // 26563
        // See https://github.com/angular/angular.js/issues/11314 for more info.                                       // 26564
        // This is unfortunately untestable with unit / e2e tests                                                      // 26565
        if (option.label !== element.label) {                                                                          // 26566
          element.label = option.label;                                                                                // 26567
          element.textContent = option.label;                                                                          // 26568
        }                                                                                                              // 26569
        if (option.value !== element.value) element.value = option.selectValue;                                        // 26570
      }                                                                                                                // 26571
                                                                                                                       // 26572
      function addOrReuseElement(parent, current, type, templateElement) {                                             // 26573
        var element;                                                                                                   // 26574
        // Check whether we can reuse the next element                                                                 // 26575
        if (current && lowercase(current.nodeName) === type) {                                                         // 26576
          // The next element is the right type so reuse it                                                            // 26577
          element = current;                                                                                           // 26578
        } else {                                                                                                       // 26579
          // The next element is not the right type so create a new one                                                // 26580
          element = templateElement.cloneNode(false);                                                                  // 26581
          if (!current) {                                                                                              // 26582
            // There are no more elements so just append it to the select                                              // 26583
            parent.appendChild(element);                                                                               // 26584
          } else {                                                                                                     // 26585
            // The next element is not a group so insert the new one                                                   // 26586
            parent.insertBefore(element, current);                                                                     // 26587
          }                                                                                                            // 26588
        }                                                                                                              // 26589
        return element;                                                                                                // 26590
      }                                                                                                                // 26591
                                                                                                                       // 26592
                                                                                                                       // 26593
      function removeExcessElements(current) {                                                                         // 26594
        var next;                                                                                                      // 26595
        while (current) {                                                                                              // 26596
          next = current.nextSibling;                                                                                  // 26597
          jqLiteRemove(current);                                                                                       // 26598
          current = next;                                                                                              // 26599
        }                                                                                                              // 26600
      }                                                                                                                // 26601
                                                                                                                       // 26602
                                                                                                                       // 26603
      function skipEmptyAndUnknownOptions(current) {                                                                   // 26604
        var emptyOption_ = emptyOption && emptyOption[0];                                                              // 26605
        var unknownOption_ = unknownOption && unknownOption[0];                                                        // 26606
                                                                                                                       // 26607
        if (emptyOption_ || unknownOption_) {                                                                          // 26608
          while (current &&                                                                                            // 26609
                (current === emptyOption_ ||                                                                           // 26610
                current === unknownOption_ ||                                                                          // 26611
                emptyOption_ && emptyOption_.nodeType === NODE_TYPE_COMMENT)) {                                        // 26612
            // Empty options might have directives that transclude                                                     // 26613
            // and insert comments (e.g. ngIf)                                                                         // 26614
            current = current.nextSibling;                                                                             // 26615
          }                                                                                                            // 26616
        }                                                                                                              // 26617
        return current;                                                                                                // 26618
      }                                                                                                                // 26619
                                                                                                                       // 26620
                                                                                                                       // 26621
      function updateOptions() {                                                                                       // 26622
                                                                                                                       // 26623
        var previousValue = options && selectCtrl.readValue();                                                         // 26624
                                                                                                                       // 26625
        options = ngOptions.getOptions();                                                                              // 26626
                                                                                                                       // 26627
        var groupMap = {};                                                                                             // 26628
        var currentElement = selectElement[0].firstChild;                                                              // 26629
                                                                                                                       // 26630
        // Ensure that the empty option is always there if it was explicitly provided                                  // 26631
        if (providedEmptyOption) {                                                                                     // 26632
          selectElement.prepend(emptyOption);                                                                          // 26633
        }                                                                                                              // 26634
                                                                                                                       // 26635
        currentElement = skipEmptyAndUnknownOptions(currentElement);                                                   // 26636
                                                                                                                       // 26637
        options.items.forEach(function updateOption(option) {                                                          // 26638
          var group;                                                                                                   // 26639
          var groupElement;                                                                                            // 26640
          var optionElement;                                                                                           // 26641
                                                                                                                       // 26642
          if (option.group) {                                                                                          // 26643
                                                                                                                       // 26644
            // This option is to live in a group                                                                       // 26645
            // See if we have already created this group                                                               // 26646
            group = groupMap[option.group];                                                                            // 26647
                                                                                                                       // 26648
            if (!group) {                                                                                              // 26649
                                                                                                                       // 26650
              // We have not already created this group                                                                // 26651
              groupElement = addOrReuseElement(selectElement[0],                                                       // 26652
                                               currentElement,                                                         // 26653
                                               'optgroup',                                                             // 26654
                                               optGroupTemplate);                                                      // 26655
              // Move to the next element                                                                              // 26656
              currentElement = groupElement.nextSibling;                                                               // 26657
                                                                                                                       // 26658
              // Update the label on the group element                                                                 // 26659
              groupElement.label = option.group;                                                                       // 26660
                                                                                                                       // 26661
              // Store it for use later                                                                                // 26662
              group = groupMap[option.group] = {                                                                       // 26663
                groupElement: groupElement,                                                                            // 26664
                currentOptionElement: groupElement.firstChild                                                          // 26665
              };                                                                                                       // 26666
                                                                                                                       // 26667
            }                                                                                                          // 26668
                                                                                                                       // 26669
            // So now we have a group for this option we add the option to the group                                   // 26670
            optionElement = addOrReuseElement(group.groupElement,                                                      // 26671
                                              group.currentOptionElement,                                              // 26672
                                              'option',                                                                // 26673
                                              optionTemplate);                                                         // 26674
            updateOptionElement(option, optionElement);                                                                // 26675
            // Move to the next element                                                                                // 26676
            group.currentOptionElement = optionElement.nextSibling;                                                    // 26677
                                                                                                                       // 26678
          } else {                                                                                                     // 26679
                                                                                                                       // 26680
            // This option is not in a group                                                                           // 26681
            optionElement = addOrReuseElement(selectElement[0],                                                        // 26682
                                              currentElement,                                                          // 26683
                                              'option',                                                                // 26684
                                              optionTemplate);                                                         // 26685
            updateOptionElement(option, optionElement);                                                                // 26686
            // Move to the next element                                                                                // 26687
            currentElement = optionElement.nextSibling;                                                                // 26688
          }                                                                                                            // 26689
        });                                                                                                            // 26690
                                                                                                                       // 26691
                                                                                                                       // 26692
        // Now remove all excess options and group                                                                     // 26693
        Object.keys(groupMap).forEach(function(key) {                                                                  // 26694
          removeExcessElements(groupMap[key].currentOptionElement);                                                    // 26695
        });                                                                                                            // 26696
        removeExcessElements(currentElement);                                                                          // 26697
                                                                                                                       // 26698
        ngModelCtrl.$render();                                                                                         // 26699
                                                                                                                       // 26700
        // Check to see if the value has changed due to the update to the options                                      // 26701
        if (!ngModelCtrl.$isEmpty(previousValue)) {                                                                    // 26702
          var nextValue = selectCtrl.readValue();                                                                      // 26703
          if (ngOptions.trackBy ? !equals(previousValue, nextValue) : previousValue !== nextValue) {                   // 26704
            ngModelCtrl.$setViewValue(nextValue);                                                                      // 26705
            ngModelCtrl.$render();                                                                                     // 26706
          }                                                                                                            // 26707
        }                                                                                                              // 26708
                                                                                                                       // 26709
      }                                                                                                                // 26710
                                                                                                                       // 26711
    }                                                                                                                  // 26712
  };                                                                                                                   // 26713
}];                                                                                                                    // 26714
                                                                                                                       // 26715
/**                                                                                                                    // 26716
 * @ngdoc directive                                                                                                    // 26717
 * @name ngPluralize                                                                                                   // 26718
 * @restrict EA                                                                                                        // 26719
 *                                                                                                                     // 26720
 * @description                                                                                                        // 26721
 * `ngPluralize` is a directive that displays messages according to en-US localization rules.                          // 26722
 * These rules are bundled with angular.js, but can be overridden                                                      // 26723
 * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive                                // 26724
 * by specifying the mappings between                                                                                  // 26725
 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)           // 26726
 * and the strings to be displayed.                                                                                    // 26727
 *                                                                                                                     // 26728
 * # Plural categories and explicit number rules                                                                       // 26729
 * There are two                                                                                                       // 26730
 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)           // 26731
 * in Angular's default en-US locale: "one" and "other".                                                               // 26732
 *                                                                                                                     // 26733
 * While a plural category may match many numbers (for example, in en-US locale, "other" can match                     // 26734
 * any number that is not 1), an explicit number rule can only match one number. For example, the                      // 26735
 * explicit number rule for "3" matches the number 3. There are examples of plural categories                          // 26736
 * and explicit number rules throughout the rest of this documentation.                                                // 26737
 *                                                                                                                     // 26738
 * # Configuring ngPluralize                                                                                           // 26739
 * You configure ngPluralize by providing 2 attributes: `count` and `when`.                                            // 26740
 * You can also provide an optional attribute, `offset`.                                                               // 26741
 *                                                                                                                     // 26742
 * The value of the `count` attribute can be either a string or an {@link guide/expression                             // 26743
 * Angular expression}; these are evaluated on the current scope for its bound value.                                  // 26744
 *                                                                                                                     // 26745
 * The `when` attribute specifies the mappings between plural categories and the actual                                // 26746
 * string to be displayed. The value of the attribute should be a JSON object.                                         // 26747
 *                                                                                                                     // 26748
 * The following example shows how to configure ngPluralize:                                                           // 26749
 *                                                                                                                     // 26750
 * ```html                                                                                                             // 26751
 * <ng-pluralize count="personCount"                                                                                   // 26752
                 when="{'0': 'Nobody is viewing.',                                                                     // 26753
 *                      'one': '1 person is viewing.',                                                                 // 26754
 *                      'other': '{} people are viewing.'}">                                                           // 26755
 * </ng-pluralize>                                                                                                     // 26756
 *```                                                                                                                  // 26757
 *                                                                                                                     // 26758
 * In the example, `"0: Nobody is viewing."` is an explicit number rule. If you did not                                // 26759
 * specify this rule, 0 would be matched to the "other" category and "0 people are viewing"                            // 26760
 * would be shown instead of "Nobody is viewing". You can specify an explicit number rule for                          // 26761
 * other numbers, for example 12, so that instead of showing "12 people are viewing", you can                          // 26762
 * show "a dozen people are viewing".                                                                                  // 26763
 *                                                                                                                     // 26764
 * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted                 // 26765
 * into pluralized strings. In the previous example, Angular will replace `{}` with                                    // 26766
 * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder                             // 26767
 * for <span ng-non-bindable>{{numberExpression}}</span>.                                                              // 26768
 *                                                                                                                     // 26769
 * If no rule is defined for a category, then an empty string is displayed and a warning is generated.                 // 26770
 * Note that some locales define more categories than `one` and `other`. For example, fr-fr defines `few` and `many`.  // 26771
 *                                                                                                                     // 26772
 * # Configuring ngPluralize with offset                                                                               // 26773
 * The `offset` attribute allows further customization of pluralized text, which can result in                         // 26774
 * a better user experience. For example, instead of the message "4 people are viewing this document",                 // 26775
 * you might display "John, Kate and 2 others are viewing this document".                                              // 26776
 * The offset attribute allows you to offset a number by any desired value.                                            // 26777
 * Let's take a look at an example:                                                                                    // 26778
 *                                                                                                                     // 26779
 * ```html                                                                                                             // 26780
 * <ng-pluralize count="personCount" offset=2                                                                          // 26781
 *               when="{'0': 'Nobody is viewing.',                                                                     // 26782
 *                      '1': '{{person1}} is viewing.',                                                                // 26783
 *                      '2': '{{person1}} and {{person2}} are viewing.',                                               // 26784
 *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',                           // 26785
 *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">                        // 26786
 * </ng-pluralize>                                                                                                     // 26787
 * ```                                                                                                                 // 26788
 *                                                                                                                     // 26789
 * Notice that we are still using two plural categories(one, other), but we added                                      // 26790
 * three explicit number rules 0, 1 and 2.                                                                             // 26791
 * When one person, perhaps John, views the document, "John is viewing" will be shown.                                 // 26792
 * When three people view the document, no explicit number rule is found, so                                           // 26793
 * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.                                    // 26794
 * In this case, plural category 'one' is matched and "John, Mary and one other person are viewing"                    // 26795
 * is shown.                                                                                                           // 26796
 *                                                                                                                     // 26797
 * Note that when you specify offsets, you must provide explicit number rules for                                      // 26798
 * numbers from 0 up to and including the offset. If you use an offset of 3, for example,                              // 26799
 * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for                  // 26800
 * plural categories "one" and "other".                                                                                // 26801
 *                                                                                                                     // 26802
 * @param {string|expression} count The variable to be bound to.                                                       // 26803
 * @param {string} when The mapping between plural category to its corresponding strings.                              // 26804
 * @param {number=} offset Offset to deduct from the total number.                                                     // 26805
 *                                                                                                                     // 26806
 * @example                                                                                                            // 26807
    <example module="pluralizeExample">                                                                                // 26808
      <file name="index.html">                                                                                         // 26809
        <script>                                                                                                       // 26810
          angular.module('pluralizeExample', [])                                                                       // 26811
            .controller('ExampleController', ['$scope', function($scope) {                                             // 26812
              $scope.person1 = 'Igor';                                                                                 // 26813
              $scope.person2 = 'Misko';                                                                                // 26814
              $scope.personCount = 1;                                                                                  // 26815
            }]);                                                                                                       // 26816
        </script>                                                                                                      // 26817
        <div ng-controller="ExampleController">                                                                        // 26818
          <label>Person 1:<input type="text" ng-model="person1" value="Igor" /></label><br/>                           // 26819
          <label>Person 2:<input type="text" ng-model="person2" value="Misko" /></label><br/>                          // 26820
          <label>Number of People:<input type="text" ng-model="personCount" value="1" /></label><br/>                  // 26821
                                                                                                                       // 26822
          <!--- Example with simple pluralization rules for en locale --->                                             // 26823
          Without Offset:                                                                                              // 26824
          <ng-pluralize count="personCount"                                                                            // 26825
                        when="{'0': 'Nobody is viewing.',                                                              // 26826
                               'one': '1 person is viewing.',                                                          // 26827
                               'other': '{} people are viewing.'}">                                                    // 26828
          </ng-pluralize><br>                                                                                          // 26829
                                                                                                                       // 26830
          <!--- Example with offset --->                                                                               // 26831
          With Offset(2):                                                                                              // 26832
          <ng-pluralize count="personCount" offset=2                                                                   // 26833
                        when="{'0': 'Nobody is viewing.',                                                              // 26834
                               '1': '{{person1}} is viewing.',                                                         // 26835
                               '2': '{{person1}} and {{person2}} are viewing.',                                        // 26836
                               'one': '{{person1}}, {{person2}} and one other person are viewing.',                    // 26837
                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">                 // 26838
          </ng-pluralize>                                                                                              // 26839
        </div>                                                                                                         // 26840
      </file>                                                                                                          // 26841
      <file name="protractor.js" type="protractor">                                                                    // 26842
        it('should show correct pluralized string', function() {                                                       // 26843
          var withoutOffset = element.all(by.css('ng-pluralize')).get(0);                                              // 26844
          var withOffset = element.all(by.css('ng-pluralize')).get(1);                                                 // 26845
          var countInput = element(by.model('personCount'));                                                           // 26846
                                                                                                                       // 26847
          expect(withoutOffset.getText()).toEqual('1 person is viewing.');                                             // 26848
          expect(withOffset.getText()).toEqual('Igor is viewing.');                                                    // 26849
                                                                                                                       // 26850
          countInput.clear();                                                                                          // 26851
          countInput.sendKeys('0');                                                                                    // 26852
                                                                                                                       // 26853
          expect(withoutOffset.getText()).toEqual('Nobody is viewing.');                                               // 26854
          expect(withOffset.getText()).toEqual('Nobody is viewing.');                                                  // 26855
                                                                                                                       // 26856
          countInput.clear();                                                                                          // 26857
          countInput.sendKeys('2');                                                                                    // 26858
                                                                                                                       // 26859
          expect(withoutOffset.getText()).toEqual('2 people are viewing.');                                            // 26860
          expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');                                         // 26861
                                                                                                                       // 26862
          countInput.clear();                                                                                          // 26863
          countInput.sendKeys('3');                                                                                    // 26864
                                                                                                                       // 26865
          expect(withoutOffset.getText()).toEqual('3 people are viewing.');                                            // 26866
          expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');                       // 26867
                                                                                                                       // 26868
          countInput.clear();                                                                                          // 26869
          countInput.sendKeys('4');                                                                                    // 26870
                                                                                                                       // 26871
          expect(withoutOffset.getText()).toEqual('4 people are viewing.');                                            // 26872
          expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');                         // 26873
        });                                                                                                            // 26874
        it('should show data-bound names', function() {                                                                // 26875
          var withOffset = element.all(by.css('ng-pluralize')).get(1);                                                 // 26876
          var personCount = element(by.model('personCount'));                                                          // 26877
          var person1 = element(by.model('person1'));                                                                  // 26878
          var person2 = element(by.model('person2'));                                                                  // 26879
          personCount.clear();                                                                                         // 26880
          personCount.sendKeys('4');                                                                                   // 26881
          person1.clear();                                                                                             // 26882
          person1.sendKeys('Di');                                                                                      // 26883
          person2.clear();                                                                                             // 26884
          person2.sendKeys('Vojta');                                                                                   // 26885
          expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');                           // 26886
        });                                                                                                            // 26887
      </file>                                                                                                          // 26888
    </example>                                                                                                         // 26889
 */                                                                                                                    // 26890
var ngPluralizeDirective = ['$locale', '$interpolate', '$log', function($locale, $interpolate, $log) {                 // 26891
  var BRACE = /{}/g,                                                                                                   // 26892
      IS_WHEN = /^when(Minus)?(.+)$/;                                                                                  // 26893
                                                                                                                       // 26894
  return {                                                                                                             // 26895
    link: function(scope, element, attr) {                                                                             // 26896
      var numberExp = attr.count,                                                                                      // 26897
          whenExp = attr.$attr.when && element.attr(attr.$attr.when), // we have {{}} in attrs                         // 26898
          offset = attr.offset || 0,                                                                                   // 26899
          whens = scope.$eval(whenExp) || {},                                                                          // 26900
          whensExpFns = {},                                                                                            // 26901
          startSymbol = $interpolate.startSymbol(),                                                                    // 26902
          endSymbol = $interpolate.endSymbol(),                                                                        // 26903
          braceReplacement = startSymbol + numberExp + '-' + offset + endSymbol,                                       // 26904
          watchRemover = angular.noop,                                                                                 // 26905
          lastCount;                                                                                                   // 26906
                                                                                                                       // 26907
      forEach(attr, function(expression, attributeName) {                                                              // 26908
        var tmpMatch = IS_WHEN.exec(attributeName);                                                                    // 26909
        if (tmpMatch) {                                                                                                // 26910
          var whenKey = (tmpMatch[1] ? '-' : '') + lowercase(tmpMatch[2]);                                             // 26911
          whens[whenKey] = element.attr(attr.$attr[attributeName]);                                                    // 26912
        }                                                                                                              // 26913
      });                                                                                                              // 26914
      forEach(whens, function(expression, key) {                                                                       // 26915
        whensExpFns[key] = $interpolate(expression.replace(BRACE, braceReplacement));                                  // 26916
                                                                                                                       // 26917
      });                                                                                                              // 26918
                                                                                                                       // 26919
      scope.$watch(numberExp, function ngPluralizeWatchAction(newVal) {                                                // 26920
        var count = parseFloat(newVal);                                                                                // 26921
        var countIsNaN = isNaN(count);                                                                                 // 26922
                                                                                                                       // 26923
        if (!countIsNaN && !(count in whens)) {                                                                        // 26924
          // If an explicit number rule such as 1, 2, 3... is defined, just use it.                                    // 26925
          // Otherwise, check it against pluralization rules in $locale service.                                       // 26926
          count = $locale.pluralCat(count - offset);                                                                   // 26927
        }                                                                                                              // 26928
                                                                                                                       // 26929
        // If both `count` and `lastCount` are NaN, we don't need to re-register a watch.                              // 26930
        // In JS `NaN !== NaN`, so we have to exlicitly check.                                                         // 26931
        if ((count !== lastCount) && !(countIsNaN && isNumber(lastCount) && isNaN(lastCount))) {                       // 26932
          watchRemover();                                                                                              // 26933
          var whenExpFn = whensExpFns[count];                                                                          // 26934
          if (isUndefined(whenExpFn)) {                                                                                // 26935
            if (newVal != null) {                                                                                      // 26936
              $log.debug("ngPluralize: no rule defined for '" + count + "' in " + whenExp);                            // 26937
            }                                                                                                          // 26938
            watchRemover = noop;                                                                                       // 26939
            updateElementText();                                                                                       // 26940
          } else {                                                                                                     // 26941
            watchRemover = scope.$watch(whenExpFn, updateElementText);                                                 // 26942
          }                                                                                                            // 26943
          lastCount = count;                                                                                           // 26944
        }                                                                                                              // 26945
      });                                                                                                              // 26946
                                                                                                                       // 26947
      function updateElementText(newText) {                                                                            // 26948
        element.text(newText || '');                                                                                   // 26949
      }                                                                                                                // 26950
    }                                                                                                                  // 26951
  };                                                                                                                   // 26952
}];                                                                                                                    // 26953
                                                                                                                       // 26954
/**                                                                                                                    // 26955
 * @ngdoc directive                                                                                                    // 26956
 * @name ngRepeat                                                                                                      // 26957
 * @multiElement                                                                                                       // 26958
 *                                                                                                                     // 26959
 * @description                                                                                                        // 26960
 * The `ngRepeat` directive instantiates a template once per item from a collection. Each template                     // 26961
 * instance gets its own scope, where the given loop variable is set to the current collection item,                   // 26962
 * and `$index` is set to the item index or key.                                                                       // 26963
 *                                                                                                                     // 26964
 * Special properties are exposed on the local scope of each template instance, including:                             // 26965
 *                                                                                                                     // 26966
 * | Variable  | Type            | Details                                                                     |       // 26967
 * |-----------|-----------------|-----------------------------------------------------------------------------|       // 26968
 * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |       // 26969
 * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |       // 26970
 * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |       // 26971
 * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |       // 26972
 * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |       // 26973
 * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |       // 26974
 *                                                                                                                     // 26975
 * <div class="alert alert-info">                                                                                      // 26976
 *   Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.                      // 26977
 *   This may be useful when, for instance, nesting ngRepeats.                                                         // 26978
 * </div>                                                                                                              // 26979
 *                                                                                                                     // 26980
 *                                                                                                                     // 26981
 * # Iterating over object properties                                                                                  // 26982
 *                                                                                                                     // 26983
 * It is possible to get `ngRepeat` to iterate over the properties of an object using the following                    // 26984
 * syntax:                                                                                                             // 26985
 *                                                                                                                     // 26986
 * ```js                                                                                                               // 26987
 * <div ng-repeat="(key, value) in myObj"> ... </div>                                                                  // 26988
 * ```                                                                                                                 // 26989
 *                                                                                                                     // 26990
 * You need to be aware that the JavaScript specification does not define the order of keys                            // 26991
 * returned for an object. (To mitigate this in Angular 1.3 the `ngRepeat` directive                                   // 26992
 * used to sort the keys alphabetically.)                                                                              // 26993
 *                                                                                                                     // 26994
 * Version 1.4 removed the alphabetic sorting. We now rely on the order returned by the browser                        // 26995
 * when running `for key in myObj`. It seems that browsers generally follow the strategy of providing                  // 26996
 * keys in the order in which they were defined, although there are exceptions when keys are deleted                   // 26997
 * and reinstated. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#Cross-browser_issues
 *                                                                                                                     // 26999
 * If this is not desired, the recommended workaround is to convert your object into an array                          // 27000
 * that is sorted into the order that you prefer before providing it to `ngRepeat`.  You could                         // 27001
 * do this with a filter such as [toArrayFilter](http://ngmodules.org/modules/angular-toArrayFilter)                   // 27002
 * or implement a `$watch` on the object yourself.                                                                     // 27003
 *                                                                                                                     // 27004
 *                                                                                                                     // 27005
 * # Tracking and Duplicates                                                                                           // 27006
 *                                                                                                                     // 27007
 * When the contents of the collection change, `ngRepeat` makes the corresponding changes to the DOM:                  // 27008
 *                                                                                                                     // 27009
 * * When an item is added, a new instance of the template is added to the DOM.                                        // 27010
 * * When an item is removed, its template instance is removed from the DOM.                                           // 27011
 * * When items are reordered, their respective templates are reordered in the DOM.                                    // 27012
 *                                                                                                                     // 27013
 * By default, `ngRepeat` does not allow duplicate items in arrays. This is because when                               // 27014
 * there are duplicates, it is not possible to maintain a one-to-one mapping between collection                        // 27015
 * items and DOM elements.                                                                                             // 27016
 *                                                                                                                     // 27017
 * If you do need to repeat duplicate items, you can substitute the default tracking behavior                          // 27018
 * with your own using the `track by` expression.                                                                      // 27019
 *                                                                                                                     // 27020
 * For example, you may track items by the index of each item in the collection, using the                             // 27021
 * special scope property `$index`:                                                                                    // 27022
 * ```html                                                                                                             // 27023
 *    <div ng-repeat="n in [42, 42, 43, 43] track by $index">                                                          // 27024
 *      {{n}}                                                                                                          // 27025
 *    </div>                                                                                                           // 27026
 * ```                                                                                                                 // 27027
 *                                                                                                                     // 27028
 * You may use arbitrary expressions in `track by`, including references to custom functions                           // 27029
 * on the scope:                                                                                                       // 27030
 * ```html                                                                                                             // 27031
 *    <div ng-repeat="n in [42, 42, 43, 43] track by myTrackingFunction(n)">                                           // 27032
 *      {{n}}                                                                                                          // 27033
 *    </div>                                                                                                           // 27034
 * ```                                                                                                                 // 27035
 *                                                                                                                     // 27036
 * If you are working with objects that have an identifier property, you can track                                     // 27037
 * by the identifier instead of the whole object. Should you reload your data later, `ngRepeat`                        // 27038
 * will not have to rebuild the DOM elements for items it has already rendered, even if the                            // 27039
 * JavaScript objects in the collection have been substituted for new ones:                                            // 27040
 * ```html                                                                                                             // 27041
 *    <div ng-repeat="model in collection track by model.id">                                                          // 27042
 *      {{model.name}}                                                                                                 // 27043
 *    </div>                                                                                                           // 27044
 * ```                                                                                                                 // 27045
 *                                                                                                                     // 27046
 * When no `track by` expression is provided, it is equivalent to tracking by the built-in                             // 27047
 * `$id` function, which tracks items by their identity:                                                               // 27048
 * ```html                                                                                                             // 27049
 *    <div ng-repeat="obj in collection track by $id(obj)">                                                            // 27050
 *      {{obj.prop}}                                                                                                   // 27051
 *    </div>                                                                                                           // 27052
 * ```                                                                                                                 // 27053
 *                                                                                                                     // 27054
 * <div class="alert alert-warning">                                                                                   // 27055
 * **Note:** `track by` must always be the last expression:                                                            // 27056
 * </div>                                                                                                              // 27057
 * ```                                                                                                                 // 27058
 * <div ng-repeat="model in collection | orderBy: 'id' as filtered_result track by model.id">                          // 27059
 *     {{model.name}}                                                                                                  // 27060
 * </div>                                                                                                              // 27061
 * ```                                                                                                                 // 27062
 *                                                                                                                     // 27063
 * # Special repeat start and end points                                                                               // 27064
 * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending
 * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.
 * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)
 * up to and including the ending HTML tag where **ng-repeat-end** is placed.                                          // 27068
 *                                                                                                                     // 27069
 * The example below makes use of this feature:                                                                        // 27070
 * ```html                                                                                                             // 27071
 *   <header ng-repeat-start="item in items">                                                                          // 27072
 *     Header {{ item }}                                                                                               // 27073
 *   </header>                                                                                                         // 27074
 *   <div class="body">                                                                                                // 27075
 *     Body {{ item }}                                                                                                 // 27076
 *   </div>                                                                                                            // 27077
 *   <footer ng-repeat-end>                                                                                            // 27078
 *     Footer {{ item }}                                                                                               // 27079
 *   </footer>                                                                                                         // 27080
 * ```                                                                                                                 // 27081
 *                                                                                                                     // 27082
 * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:    // 27083
 * ```html                                                                                                             // 27084
 *   <header>                                                                                                          // 27085
 *     Header A                                                                                                        // 27086
 *   </header>                                                                                                         // 27087
 *   <div class="body">                                                                                                // 27088
 *     Body A                                                                                                          // 27089
 *   </div>                                                                                                            // 27090
 *   <footer>                                                                                                          // 27091
 *     Footer A                                                                                                        // 27092
 *   </footer>                                                                                                         // 27093
 *   <header>                                                                                                          // 27094
 *     Header B                                                                                                        // 27095
 *   </header>                                                                                                         // 27096
 *   <div class="body">                                                                                                // 27097
 *     Body B                                                                                                          // 27098
 *   </div>                                                                                                            // 27099
 *   <footer>                                                                                                          // 27100
 *     Footer B                                                                                                        // 27101
 *   </footer>                                                                                                         // 27102
 * ```                                                                                                                 // 27103
 *                                                                                                                     // 27104
 * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such
 * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).                                        // 27106
 *                                                                                                                     // 27107
 * @animations                                                                                                         // 27108
 * **.enter** - when a new item is added to the list or when an item is revealed after a filter                        // 27109
 *                                                                                                                     // 27110
 * **.leave** - when an item is removed from the list or when an item is filtered out                                  // 27111
 *                                                                                                                     // 27112
 * **.move** - when an adjacent item is filtered out causing a reorder or when the item contents are reordered         // 27113
 *                                                                                                                     // 27114
 * @element ANY                                                                                                        // 27115
 * @scope                                                                                                              // 27116
 * @priority 1000                                                                                                      // 27117
 * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These                  // 27118
 *   formats are currently supported:                                                                                  // 27119
 *                                                                                                                     // 27120
 *   * `variable in expression` – where variable is the user defined loop variable and `expression`                    // 27121
 *     is a scope expression giving the collection to enumerate.                                                       // 27122
 *                                                                                                                     // 27123
 *     For example: `album in artist.albums`.                                                                          // 27124
 *                                                                                                                     // 27125
 *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,                     // 27126
 *     and `expression` is the scope expression giving the collection to enumerate.                                    // 27127
 *                                                                                                                     // 27128
 *     For example: `(name, age) in {'adam':10, 'amalie':12}`.                                                         // 27129
 *                                                                                                                     // 27130
 *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking expression    // 27131
 *     which can be used to associate the objects in the collection with the DOM elements. If no tracking expression   // 27132
 *     is specified, ng-repeat associates elements by identity. It is an error to have                                 // 27133
 *     more than one tracking expression value resolve to the same key. (This would mean that two distinct objects are
 *     mapped to the same DOM element, which is not possible.)                                                         // 27135
 *                                                                                                                     // 27136
 *     Note that the tracking expression must come last, after any filters, and the alias expression.                  // 27137
 *                                                                                                                     // 27138
 *     For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements
 *     will be associated by item identity in the array.                                                               // 27140
 *                                                                                                                     // 27141
 *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique     // 27142
 *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements  // 27143
 *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM        // 27144
 *     element in the same way in the DOM.                                                                             // 27145
 *                                                                                                                     // 27146
 *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
 *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`           // 27148
 *     property is same.                                                                                               // 27149
 *                                                                                                                     // 27150
 *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
 *     to items in conjunction with a tracking expression.                                                             // 27152
 *                                                                                                                     // 27153
 *   * `variable in expression as alias_expression` – You can also provide an optional alias expression which will then store the
 *     intermediate results of the repeater after the filters have been applied. Typically this is used to render a special message
 *     when a filter is active on the repeater, but the filtered result set is empty.                                  // 27156
 *                                                                                                                     // 27157
 *     For example: `item in items | filter:x as results` will store the fragment of the repeated items as `results`, but only after
 *     the items have been processed through the filter.                                                               // 27159
 *                                                                                                                     // 27160
 *     Please note that `as [variable name] is not an operator but rather a part of ngRepeat micro-syntax so it can be used only at the end
 *     (and not as operator, inside an expression).                                                                    // 27162
 *                                                                                                                     // 27163
 *     For example: `item in items | filter : x | orderBy : order | limitTo : limit as results` .                      // 27164
 *                                                                                                                     // 27165
 * @example                                                                                                            // 27166
 * This example initializes the scope to a list of names and                                                           // 27167
 * then uses `ngRepeat` to display every person:                                                                       // 27168
  <example module="ngAnimate" deps="angular-animate.js" animations="true">                                             // 27169
    <file name="index.html">                                                                                           // 27170
      <div ng-init="friends = [                                                                                        // 27171
        {name:'John', age:25, gender:'boy'},                                                                           // 27172
        {name:'Jessie', age:30, gender:'girl'},                                                                        // 27173
        {name:'Johanna', age:28, gender:'girl'},                                                                       // 27174
        {name:'Joy', age:15, gender:'girl'},                                                                           // 27175
        {name:'Mary', age:28, gender:'girl'},                                                                          // 27176
        {name:'Peter', age:95, gender:'boy'},                                                                          // 27177
        {name:'Sebastian', age:50, gender:'boy'},                                                                      // 27178
        {name:'Erika', age:27, gender:'girl'},                                                                         // 27179
        {name:'Patrick', age:40, gender:'boy'},                                                                        // 27180
        {name:'Samantha', age:60, gender:'girl'}                                                                       // 27181
      ]">                                                                                                              // 27182
        I have {{friends.length}} friends. They are:                                                                   // 27183
        <input type="search" ng-model="q" placeholder="filter friends..." aria-label="filter friends" />               // 27184
        <ul class="example-animate-container">                                                                         // 27185
          <li class="animate-repeat" ng-repeat="friend in friends | filter:q as results">                              // 27186
            [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.                                          // 27187
          </li>                                                                                                        // 27188
          <li class="animate-repeat" ng-if="results.length == 0">                                                      // 27189
            <strong>No results found...</strong>                                                                       // 27190
          </li>                                                                                                        // 27191
        </ul>                                                                                                          // 27192
      </div>                                                                                                           // 27193
    </file>                                                                                                            // 27194
    <file name="animations.css">                                                                                       // 27195
      .example-animate-container {                                                                                     // 27196
        background:white;                                                                                              // 27197
        border:1px solid black;                                                                                        // 27198
        list-style:none;                                                                                               // 27199
        margin:0;                                                                                                      // 27200
        padding:0 10px;                                                                                                // 27201
      }                                                                                                                // 27202
                                                                                                                       // 27203
      .animate-repeat {                                                                                                // 27204
        line-height:40px;                                                                                              // 27205
        list-style:none;                                                                                               // 27206
        box-sizing:border-box;                                                                                         // 27207
      }                                                                                                                // 27208
                                                                                                                       // 27209
      .animate-repeat.ng-move,                                                                                         // 27210
      .animate-repeat.ng-enter,                                                                                        // 27211
      .animate-repeat.ng-leave {                                                                                       // 27212
        transition:all linear 0.5s;                                                                                    // 27213
      }                                                                                                                // 27214
                                                                                                                       // 27215
      .animate-repeat.ng-leave.ng-leave-active,                                                                        // 27216
      .animate-repeat.ng-move,                                                                                         // 27217
      .animate-repeat.ng-enter {                                                                                       // 27218
        opacity:0;                                                                                                     // 27219
        max-height:0;                                                                                                  // 27220
      }                                                                                                                // 27221
                                                                                                                       // 27222
      .animate-repeat.ng-leave,                                                                                        // 27223
      .animate-repeat.ng-move.ng-move-active,                                                                          // 27224
      .animate-repeat.ng-enter.ng-enter-active {                                                                       // 27225
        opacity:1;                                                                                                     // 27226
        max-height:40px;                                                                                               // 27227
      }                                                                                                                // 27228
    </file>                                                                                                            // 27229
    <file name="protractor.js" type="protractor">                                                                      // 27230
      var friends = element.all(by.repeater('friend in friends'));                                                     // 27231
                                                                                                                       // 27232
      it('should render initial data set', function() {                                                                // 27233
        expect(friends.count()).toBe(10);                                                                              // 27234
        expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');                                     // 27235
        expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');                                   // 27236
        expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');                                // 27237
        expect(element(by.binding('friends.length')).getText())                                                        // 27238
            .toMatch("I have 10 friends. They are:");                                                                  // 27239
      });                                                                                                              // 27240
                                                                                                                       // 27241
       it('should update repeater when filter predicate changes', function() {                                         // 27242
         expect(friends.count()).toBe(10);                                                                             // 27243
                                                                                                                       // 27244
         element(by.model('q')).sendKeys('ma');                                                                        // 27245
                                                                                                                       // 27246
         expect(friends.count()).toBe(2);                                                                              // 27247
         expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');                                    // 27248
         expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');                                // 27249
       });                                                                                                             // 27250
      </file>                                                                                                          // 27251
    </example>                                                                                                         // 27252
 */                                                                                                                    // 27253
var ngRepeatDirective = ['$parse', '$animate', function($parse, $animate) {                                            // 27254
  var NG_REMOVED = '$$NG_REMOVED';                                                                                     // 27255
  var ngRepeatMinErr = minErr('ngRepeat');                                                                             // 27256
                                                                                                                       // 27257
  var updateScope = function(scope, index, valueIdentifier, value, keyIdentifier, key, arrayLength) {                  // 27258
    // TODO(perf): generate setters to shave off ~40ms or 1-1.5%                                                       // 27259
    scope[valueIdentifier] = value;                                                                                    // 27260
    if (keyIdentifier) scope[keyIdentifier] = key;                                                                     // 27261
    scope.$index = index;                                                                                              // 27262
    scope.$first = (index === 0);                                                                                      // 27263
    scope.$last = (index === (arrayLength - 1));                                                                       // 27264
    scope.$middle = !(scope.$first || scope.$last);                                                                    // 27265
    // jshint bitwise: false                                                                                           // 27266
    scope.$odd = !(scope.$even = (index&1) === 0);                                                                     // 27267
    // jshint bitwise: true                                                                                            // 27268
  };                                                                                                                   // 27269
                                                                                                                       // 27270
  var getBlockStart = function(block) {                                                                                // 27271
    return block.clone[0];                                                                                             // 27272
  };                                                                                                                   // 27273
                                                                                                                       // 27274
  var getBlockEnd = function(block) {                                                                                  // 27275
    return block.clone[block.clone.length - 1];                                                                        // 27276
  };                                                                                                                   // 27277
                                                                                                                       // 27278
                                                                                                                       // 27279
  return {                                                                                                             // 27280
    restrict: 'A',                                                                                                     // 27281
    multiElement: true,                                                                                                // 27282
    transclude: 'element',                                                                                             // 27283
    priority: 1000,                                                                                                    // 27284
    terminal: true,                                                                                                    // 27285
    $$tlb: true,                                                                                                       // 27286
    compile: function ngRepeatCompile($element, $attr) {                                                               // 27287
      var expression = $attr.ngRepeat;                                                                                 // 27288
      var ngRepeatEndComment = document.createComment(' end ngRepeat: ' + expression + ' ');                           // 27289
                                                                                                                       // 27290
      var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);
                                                                                                                       // 27292
      if (!match) {                                                                                                    // 27293
        throw ngRepeatMinErr('iexp', "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",
            expression);                                                                                               // 27295
      }                                                                                                                // 27296
                                                                                                                       // 27297
      var lhs = match[1];                                                                                              // 27298
      var rhs = match[2];                                                                                              // 27299
      var aliasAs = match[3];                                                                                          // 27300
      var trackByExp = match[4];                                                                                       // 27301
                                                                                                                       // 27302
      match = lhs.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/);                                     // 27303
                                                                                                                       // 27304
      if (!match) {                                                                                                    // 27305
        throw ngRepeatMinErr('iidexp', "'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",
            lhs);                                                                                                      // 27307
      }                                                                                                                // 27308
      var valueIdentifier = match[3] || match[1];                                                                      // 27309
      var keyIdentifier = match[2];                                                                                    // 27310
                                                                                                                       // 27311
      if (aliasAs && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs) ||                                                   // 27312
          /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(aliasAs))) {
        throw ngRepeatMinErr('badident', "alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",
          aliasAs);                                                                                                    // 27315
      }                                                                                                                // 27316
                                                                                                                       // 27317
      var trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn;                                          // 27318
      var hashFnLocals = {$id: hashKey};                                                                               // 27319
                                                                                                                       // 27320
      if (trackByExp) {                                                                                                // 27321
        trackByExpGetter = $parse(trackByExp);                                                                         // 27322
      } else {                                                                                                         // 27323
        trackByIdArrayFn = function(key, value) {                                                                      // 27324
          return hashKey(value);                                                                                       // 27325
        };                                                                                                             // 27326
        trackByIdObjFn = function(key) {                                                                               // 27327
          return key;                                                                                                  // 27328
        };                                                                                                             // 27329
      }                                                                                                                // 27330
                                                                                                                       // 27331
      return function ngRepeatLink($scope, $element, $attr, ctrl, $transclude) {                                       // 27332
                                                                                                                       // 27333
        if (trackByExpGetter) {                                                                                        // 27334
          trackByIdExpFn = function(key, value, index) {                                                               // 27335
            // assign key, value, and $index to the locals so that they can be used in hash functions                  // 27336
            if (keyIdentifier) hashFnLocals[keyIdentifier] = key;                                                      // 27337
            hashFnLocals[valueIdentifier] = value;                                                                     // 27338
            hashFnLocals.$index = index;                                                                               // 27339
            return trackByExpGetter($scope, hashFnLocals);                                                             // 27340
          };                                                                                                           // 27341
        }                                                                                                              // 27342
                                                                                                                       // 27343
        // Store a list of elements from previous run. This is a hash where key is the item from the                   // 27344
        // iterator, and the value is objects with following properties.                                               // 27345
        //   - scope: bound scope                                                                                      // 27346
        //   - element: previous element.                                                                              // 27347
        //   - index: position                                                                                         // 27348
        //                                                                                                             // 27349
        // We are using no-proto object so that we don't need to guard against inherited props via                     // 27350
        // hasOwnProperty.                                                                                             // 27351
        var lastBlockMap = createMap();                                                                                // 27352
                                                                                                                       // 27353
        //watch props                                                                                                  // 27354
        $scope.$watchCollection(rhs, function ngRepeatAction(collection) {                                             // 27355
          var index, length,                                                                                           // 27356
              previousNode = $element[0],     // node that cloned nodes should be inserted after                       // 27357
                                              // initialized to the comment node anchor                                // 27358
              nextNode,                                                                                                // 27359
              // Same as lastBlockMap but it has the current state. It will become the                                 // 27360
              // lastBlockMap on the next iteration.                                                                   // 27361
              nextBlockMap = createMap(),                                                                              // 27362
              collectionLength,                                                                                        // 27363
              key, value, // key/value of iteration                                                                    // 27364
              trackById,                                                                                               // 27365
              trackByIdFn,                                                                                             // 27366
              collectionKeys,                                                                                          // 27367
              block,       // last object information {scope, element, id}                                             // 27368
              nextBlockOrder,                                                                                          // 27369
              elementsToRemove;                                                                                        // 27370
                                                                                                                       // 27371
          if (aliasAs) {                                                                                               // 27372
            $scope[aliasAs] = collection;                                                                              // 27373
          }                                                                                                            // 27374
                                                                                                                       // 27375
          if (isArrayLike(collection)) {                                                                               // 27376
            collectionKeys = collection;                                                                               // 27377
            trackByIdFn = trackByIdExpFn || trackByIdArrayFn;                                                          // 27378
          } else {                                                                                                     // 27379
            trackByIdFn = trackByIdExpFn || trackByIdObjFn;                                                            // 27380
            // if object, extract keys, in enumeration order, unsorted                                                 // 27381
            collectionKeys = [];                                                                                       // 27382
            for (var itemKey in collection) {                                                                          // 27383
              if (hasOwnProperty.call(collection, itemKey) && itemKey.charAt(0) !== '$') {                             // 27384
                collectionKeys.push(itemKey);                                                                          // 27385
              }                                                                                                        // 27386
            }                                                                                                          // 27387
          }                                                                                                            // 27388
                                                                                                                       // 27389
          collectionLength = collectionKeys.length;                                                                    // 27390
          nextBlockOrder = new Array(collectionLength);                                                                // 27391
                                                                                                                       // 27392
          // locate existing items                                                                                     // 27393
          for (index = 0; index < collectionLength; index++) {                                                         // 27394
            key = (collection === collectionKeys) ? index : collectionKeys[index];                                     // 27395
            value = collection[key];                                                                                   // 27396
            trackById = trackByIdFn(key, value, index);                                                                // 27397
            if (lastBlockMap[trackById]) {                                                                             // 27398
              // found previously seen block                                                                           // 27399
              block = lastBlockMap[trackById];                                                                         // 27400
              delete lastBlockMap[trackById];                                                                          // 27401
              nextBlockMap[trackById] = block;                                                                         // 27402
              nextBlockOrder[index] = block;                                                                           // 27403
            } else if (nextBlockMap[trackById]) {                                                                      // 27404
              // if collision detected. restore lastBlockMap and throw an error                                        // 27405
              forEach(nextBlockOrder, function(block) {                                                                // 27406
                if (block && block.scope) lastBlockMap[block.id] = block;                                              // 27407
              });                                                                                                      // 27408
              throw ngRepeatMinErr('dupes',                                                                            // 27409
                  "Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",
                  expression, trackById, value);                                                                       // 27411
            } else {                                                                                                   // 27412
              // new never before seen block                                                                           // 27413
              nextBlockOrder[index] = {id: trackById, scope: undefined, clone: undefined};                             // 27414
              nextBlockMap[trackById] = true;                                                                          // 27415
            }                                                                                                          // 27416
          }                                                                                                            // 27417
                                                                                                                       // 27418
          // remove leftover items                                                                                     // 27419
          for (var blockKey in lastBlockMap) {                                                                         // 27420
            block = lastBlockMap[blockKey];                                                                            // 27421
            elementsToRemove = getBlockNodes(block.clone);                                                             // 27422
            $animate.leave(elementsToRemove);                                                                          // 27423
            if (elementsToRemove[0].parentNode) {                                                                      // 27424
              // if the element was not removed yet because of pending animation, mark it as deleted                   // 27425
              // so that we can ignore it later                                                                        // 27426
              for (index = 0, length = elementsToRemove.length; index < length; index++) {                             // 27427
                elementsToRemove[index][NG_REMOVED] = true;                                                            // 27428
              }                                                                                                        // 27429
            }                                                                                                          // 27430
            block.scope.$destroy();                                                                                    // 27431
          }                                                                                                            // 27432
                                                                                                                       // 27433
          // we are not using forEach for perf reasons (trying to avoid #call)                                         // 27434
          for (index = 0; index < collectionLength; index++) {                                                         // 27435
            key = (collection === collectionKeys) ? index : collectionKeys[index];                                     // 27436
            value = collection[key];                                                                                   // 27437
            block = nextBlockOrder[index];                                                                             // 27438
                                                                                                                       // 27439
            if (block.scope) {                                                                                         // 27440
              // if we have already seen this object, then we need to reuse the                                        // 27441
              // associated scope/element                                                                              // 27442
                                                                                                                       // 27443
              nextNode = previousNode;                                                                                 // 27444
                                                                                                                       // 27445
              // skip nodes that are already pending removal via leave animation                                       // 27446
              do {                                                                                                     // 27447
                nextNode = nextNode.nextSibling;                                                                       // 27448
              } while (nextNode && nextNode[NG_REMOVED]);                                                              // 27449
                                                                                                                       // 27450
              if (getBlockStart(block) != nextNode) {                                                                  // 27451
                // existing item which got moved                                                                       // 27452
                $animate.move(getBlockNodes(block.clone), null, jqLite(previousNode));                                 // 27453
              }                                                                                                        // 27454
              previousNode = getBlockEnd(block);                                                                       // 27455
              updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);           // 27456
            } else {                                                                                                   // 27457
              // new item which we don't know about                                                                    // 27458
              $transclude(function ngRepeatTransclude(clone, scope) {                                                  // 27459
                block.scope = scope;                                                                                   // 27460
                // http://jsperf.com/clone-vs-createcomment                                                            // 27461
                var endNode = ngRepeatEndComment.cloneNode(false);                                                     // 27462
                clone[clone.length++] = endNode;                                                                       // 27463
                                                                                                                       // 27464
                // TODO(perf): support naked previousNode in `enter` to avoid creation of jqLite wrapper?              // 27465
                $animate.enter(clone, null, jqLite(previousNode));                                                     // 27466
                previousNode = endNode;                                                                                // 27467
                // Note: We only need the first/last node of the cloned nodes.                                         // 27468
                // However, we need to keep the reference to the jqlite wrapper as it might be changed later           // 27469
                // by a directive with templateUrl when its template arrives.                                          // 27470
                block.clone = clone;                                                                                   // 27471
                nextBlockMap[block.id] = block;                                                                        // 27472
                updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);         // 27473
              });                                                                                                      // 27474
            }                                                                                                          // 27475
          }                                                                                                            // 27476
          lastBlockMap = nextBlockMap;                                                                                 // 27477
        });                                                                                                            // 27478
      };                                                                                                               // 27479
    }                                                                                                                  // 27480
  };                                                                                                                   // 27481
}];                                                                                                                    // 27482
                                                                                                                       // 27483
var NG_HIDE_CLASS = 'ng-hide';                                                                                         // 27484
var NG_HIDE_IN_PROGRESS_CLASS = 'ng-hide-animate';                                                                     // 27485
/**                                                                                                                    // 27486
 * @ngdoc directive                                                                                                    // 27487
 * @name ngShow                                                                                                        // 27488
 * @multiElement                                                                                                       // 27489
 *                                                                                                                     // 27490
 * @description                                                                                                        // 27491
 * The `ngShow` directive shows or hides the given HTML element based on the expression                                // 27492
 * provided to the `ngShow` attribute. The element is shown or hidden by removing or adding                            // 27493
 * the `.ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined                                   // 27494
 * in AngularJS and sets the display style to none (using an !important flag).                                         // 27495
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).                 // 27496
 *                                                                                                                     // 27497
 * ```html                                                                                                             // 27498
 * <!-- when $scope.myValue is truthy (element is visible) -->                                                         // 27499
 * <div ng-show="myValue"></div>                                                                                       // 27500
 *                                                                                                                     // 27501
 * <!-- when $scope.myValue is falsy (element is hidden) -->                                                           // 27502
 * <div ng-show="myValue" class="ng-hide"></div>                                                                       // 27503
 * ```                                                                                                                 // 27504
 *                                                                                                                     // 27505
 * When the `ngShow` expression evaluates to a falsy value then the `.ng-hide` CSS class is added to the class         // 27506
 * attribute on the element causing it to become hidden. When truthy, the `.ng-hide` CSS class is removed              // 27507
 * from the element causing the element not to appear hidden.                                                          // 27508
 *                                                                                                                     // 27509
 * ## Why is !important used?                                                                                          // 27510
 *                                                                                                                     // 27511
 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector   // 27512
 * can be easily overridden by heavier selectors. For example, something as simple                                     // 27513
 * as changing the display style on a HTML list item would make hidden elements appear visible.                        // 27514
 * This also becomes a bigger issue when dealing with CSS frameworks.                                                  // 27515
 *                                                                                                                     // 27516
 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector        // 27517
 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the        // 27518
 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.        // 27519
 *                                                                                                                     // 27520
 * ### Overriding `.ng-hide`                                                                                           // 27521
 *                                                                                                                     // 27522
 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change       // 27523
 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`           // 27524
 * class CSS. Note that the selector that needs to be used is actually `.ng-hide:not(.ng-hide-animate)` to cope        // 27525
 * with extra animation classes that can be added.                                                                     // 27526
 *                                                                                                                     // 27527
 * ```css                                                                                                              // 27528
 * .ng-hide:not(.ng-hide-animate) {                                                                                    // 27529
 *   /&#42; this is just another form of hiding an element &#42;/                                                      // 27530
 *   display: block!important;                                                                                         // 27531
 *   position: absolute;                                                                                               // 27532
 *   top: -9999px;                                                                                                     // 27533
 *   left: -9999px;                                                                                                    // 27534
 * }                                                                                                                   // 27535
 * ```                                                                                                                 // 27536
 *                                                                                                                     // 27537
 * By default you don't need to override in CSS anything and the animations will work around the display style.        // 27538
 *                                                                                                                     // 27539
 * ## A note about animations with `ngShow`                                                                            // 27540
 *                                                                                                                     // 27541
 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression     // 27542
 * is true and false. This system works like the animation system present with ngClass except that                     // 27543
 * you must also include the !important flag to override the display property                                          // 27544
 * so that you can perform an animation when the element is hidden during the time of the animation.                   // 27545
 *                                                                                                                     // 27546
 * ```css                                                                                                              // 27547
 * //                                                                                                                  // 27548
 * //a working example can be found at the bottom of this page                                                         // 27549
 * //                                                                                                                  // 27550
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {                                                               // 27551
 *   /&#42; this is required as of 1.3x to properly                                                                    // 27552
 *      apply all styling in a show/hide animation &#42;/                                                              // 27553
 *   transition: 0s linear all;                                                                                        // 27554
 * }                                                                                                                   // 27555
 *                                                                                                                     // 27556
 * .my-element.ng-hide-add-active,                                                                                     // 27557
 * .my-element.ng-hide-remove-active {                                                                                 // 27558
 *   /&#42; the transition is defined in the active class &#42;/                                                       // 27559
 *   transition: 1s linear all;                                                                                        // 27560
 * }                                                                                                                   // 27561
 *                                                                                                                     // 27562
 * .my-element.ng-hide-add { ... }                                                                                     // 27563
 * .my-element.ng-hide-add.ng-hide-add-active { ... }                                                                  // 27564
 * .my-element.ng-hide-remove { ... }                                                                                  // 27565
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }                                                            // 27566
 * ```                                                                                                                 // 27567
 *                                                                                                                     // 27568
 * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display                    // 27569
 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.          // 27570
 *                                                                                                                     // 27571
 * @animations                                                                                                         // 27572
 * addClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a truthy value and the just before contents are set to visible
 * removeClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a non truthy value and just before the contents are set to hidden
 *                                                                                                                     // 27575
 * @element ANY                                                                                                        // 27576
 * @param {expression} ngShow If the {@link guide/expression expression} is truthy                                     // 27577
 *     then the element is shown or hidden respectively.                                                               // 27578
 *                                                                                                                     // 27579
 * @example                                                                                                            // 27580
  <example module="ngAnimate" deps="angular-animate.js" animations="true">                                             // 27581
    <file name="index.html">                                                                                           // 27582
      Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngHide"><br/>                             // 27583
      <div>                                                                                                            // 27584
        Show:                                                                                                          // 27585
        <div class="check-element animate-show" ng-show="checked">                                                     // 27586
          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.                 // 27587
        </div>                                                                                                         // 27588
      </div>                                                                                                           // 27589
      <div>                                                                                                            // 27590
        Hide:                                                                                                          // 27591
        <div class="check-element animate-show" ng-hide="checked">                                                     // 27592
          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.                  // 27593
        </div>                                                                                                         // 27594
      </div>                                                                                                           // 27595
    </file>                                                                                                            // 27596
    <file name="glyphicons.css">                                                                                       // 27597
      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);                                                 // 27598
    </file>                                                                                                            // 27599
    <file name="animations.css">                                                                                       // 27600
      .animate-show {                                                                                                  // 27601
        line-height: 20px;                                                                                             // 27602
        opacity: 1;                                                                                                    // 27603
        padding: 10px;                                                                                                 // 27604
        border: 1px solid black;                                                                                       // 27605
        background: white;                                                                                             // 27606
      }                                                                                                                // 27607
                                                                                                                       // 27608
      .animate-show.ng-hide-add, .animate-show.ng-hide-remove {                                                        // 27609
        transition: all linear 0.5s;                                                                                   // 27610
      }                                                                                                                // 27611
                                                                                                                       // 27612
      .animate-show.ng-hide {                                                                                          // 27613
        line-height: 0;                                                                                                // 27614
        opacity: 0;                                                                                                    // 27615
        padding: 0 10px;                                                                                               // 27616
      }                                                                                                                // 27617
                                                                                                                       // 27618
      .check-element {                                                                                                 // 27619
        padding: 10px;                                                                                                 // 27620
        border: 1px solid black;                                                                                       // 27621
        background: white;                                                                                             // 27622
      }                                                                                                                // 27623
    </file>                                                                                                            // 27624
    <file name="protractor.js" type="protractor">                                                                      // 27625
      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));                                                      // 27626
      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));                                                  // 27627
                                                                                                                       // 27628
      it('should check ng-show / ng-hide', function() {                                                                // 27629
        expect(thumbsUp.isDisplayed()).toBeFalsy();                                                                    // 27630
        expect(thumbsDown.isDisplayed()).toBeTruthy();                                                                 // 27631
                                                                                                                       // 27632
        element(by.model('checked')).click();                                                                          // 27633
                                                                                                                       // 27634
        expect(thumbsUp.isDisplayed()).toBeTruthy();                                                                   // 27635
        expect(thumbsDown.isDisplayed()).toBeFalsy();                                                                  // 27636
      });                                                                                                              // 27637
    </file>                                                                                                            // 27638
  </example>                                                                                                           // 27639
 */                                                                                                                    // 27640
var ngShowDirective = ['$animate', function($animate) {                                                                // 27641
  return {                                                                                                             // 27642
    restrict: 'A',                                                                                                     // 27643
    multiElement: true,                                                                                                // 27644
    link: function(scope, element, attr) {                                                                             // 27645
      scope.$watch(attr.ngShow, function ngShowWatchAction(value) {                                                    // 27646
        // we're adding a temporary, animation-specific class for ng-hide since this way                               // 27647
        // we can control when the element is actually displayed on screen without having                              // 27648
        // to have a global/greedy CSS selector that breaks when other animations are run.                             // 27649
        // Read: https://github.com/angular/angular.js/issues/9103#issuecomment-58335845                               // 27650
        $animate[value ? 'removeClass' : 'addClass'](element, NG_HIDE_CLASS, {                                         // 27651
          tempClasses: NG_HIDE_IN_PROGRESS_CLASS                                                                       // 27652
        });                                                                                                            // 27653
      });                                                                                                              // 27654
    }                                                                                                                  // 27655
  };                                                                                                                   // 27656
}];                                                                                                                    // 27657
                                                                                                                       // 27658
                                                                                                                       // 27659
/**                                                                                                                    // 27660
 * @ngdoc directive                                                                                                    // 27661
 * @name ngHide                                                                                                        // 27662
 * @multiElement                                                                                                       // 27663
 *                                                                                                                     // 27664
 * @description                                                                                                        // 27665
 * The `ngHide` directive shows or hides the given HTML element based on the expression                                // 27666
 * provided to the `ngHide` attribute. The element is shown or hidden by removing or adding                            // 27667
 * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined                                    // 27668
 * in AngularJS and sets the display style to none (using an !important flag).                                         // 27669
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).                 // 27670
 *                                                                                                                     // 27671
 * ```html                                                                                                             // 27672
 * <!-- when $scope.myValue is truthy (element is hidden) -->                                                          // 27673
 * <div ng-hide="myValue" class="ng-hide"></div>                                                                       // 27674
 *                                                                                                                     // 27675
 * <!-- when $scope.myValue is falsy (element is visible) -->                                                          // 27676
 * <div ng-hide="myValue"></div>                                                                                       // 27677
 * ```                                                                                                                 // 27678
 *                                                                                                                     // 27679
 * When the `ngHide` expression evaluates to a truthy value then the `.ng-hide` CSS class is added to the class        // 27680
 * attribute on the element causing it to become hidden. When falsy, the `.ng-hide` CSS class is removed               // 27681
 * from the element causing the element not to appear hidden.                                                          // 27682
 *                                                                                                                     // 27683
 * ## Why is !important used?                                                                                          // 27684
 *                                                                                                                     // 27685
 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector   // 27686
 * can be easily overridden by heavier selectors. For example, something as simple                                     // 27687
 * as changing the display style on a HTML list item would make hidden elements appear visible.                        // 27688
 * This also becomes a bigger issue when dealing with CSS frameworks.                                                  // 27689
 *                                                                                                                     // 27690
 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector        // 27691
 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the        // 27692
 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.        // 27693
 *                                                                                                                     // 27694
 * ### Overriding `.ng-hide`                                                                                           // 27695
 *                                                                                                                     // 27696
 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change       // 27697
 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`           // 27698
 * class in CSS:                                                                                                       // 27699
 *                                                                                                                     // 27700
 * ```css                                                                                                              // 27701
 * .ng-hide {                                                                                                          // 27702
 *   /&#42; this is just another form of hiding an element &#42;/                                                      // 27703
 *   display: block!important;                                                                                         // 27704
 *   position: absolute;                                                                                               // 27705
 *   top: -9999px;                                                                                                     // 27706
 *   left: -9999px;                                                                                                    // 27707
 * }                                                                                                                   // 27708
 * ```                                                                                                                 // 27709
 *                                                                                                                     // 27710
 * By default you don't need to override in CSS anything and the animations will work around the display style.        // 27711
 *                                                                                                                     // 27712
 * ## A note about animations with `ngHide`                                                                            // 27713
 *                                                                                                                     // 27714
 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression     // 27715
 * is true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`     // 27716
 * CSS class is added and removed for you instead of your own CSS class.                                               // 27717
 *                                                                                                                     // 27718
 * ```css                                                                                                              // 27719
 * //                                                                                                                  // 27720
 * //a working example can be found at the bottom of this page                                                         // 27721
 * //                                                                                                                  // 27722
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {                                                               // 27723
 *   transition: 0.5s linear all;                                                                                      // 27724
 * }                                                                                                                   // 27725
 *                                                                                                                     // 27726
 * .my-element.ng-hide-add { ... }                                                                                     // 27727
 * .my-element.ng-hide-add.ng-hide-add-active { ... }                                                                  // 27728
 * .my-element.ng-hide-remove { ... }                                                                                  // 27729
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }                                                            // 27730
 * ```                                                                                                                 // 27731
 *                                                                                                                     // 27732
 * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display                    // 27733
 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.          // 27734
 *                                                                                                                     // 27735
 * @animations                                                                                                         // 27736
 * removeClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a truthy value and just before the contents are set to hidden
 * addClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a non truthy value and just before the contents are set to visible
 *                                                                                                                     // 27739
 * @element ANY                                                                                                        // 27740
 * @param {expression} ngHide If the {@link guide/expression expression} is truthy then                                // 27741
 *     the element is shown or hidden respectively.                                                                    // 27742
 *                                                                                                                     // 27743
 * @example                                                                                                            // 27744
  <example module="ngAnimate" deps="angular-animate.js" animations="true">                                             // 27745
    <file name="index.html">                                                                                           // 27746
      Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngShow"><br/>                             // 27747
      <div>                                                                                                            // 27748
        Show:                                                                                                          // 27749
        <div class="check-element animate-hide" ng-show="checked">                                                     // 27750
          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.                 // 27751
        </div>                                                                                                         // 27752
      </div>                                                                                                           // 27753
      <div>                                                                                                            // 27754
        Hide:                                                                                                          // 27755
        <div class="check-element animate-hide" ng-hide="checked">                                                     // 27756
          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.                  // 27757
        </div>                                                                                                         // 27758
      </div>                                                                                                           // 27759
    </file>                                                                                                            // 27760
    <file name="glyphicons.css">                                                                                       // 27761
      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);                                                 // 27762
    </file>                                                                                                            // 27763
    <file name="animations.css">                                                                                       // 27764
      .animate-hide {                                                                                                  // 27765
        transition: all linear 0.5s;                                                                                   // 27766
        line-height: 20px;                                                                                             // 27767
        opacity: 1;                                                                                                    // 27768
        padding: 10px;                                                                                                 // 27769
        border: 1px solid black;                                                                                       // 27770
        background: white;                                                                                             // 27771
      }                                                                                                                // 27772
                                                                                                                       // 27773
      .animate-hide.ng-hide {                                                                                          // 27774
        line-height: 0;                                                                                                // 27775
        opacity: 0;                                                                                                    // 27776
        padding: 0 10px;                                                                                               // 27777
      }                                                                                                                // 27778
                                                                                                                       // 27779
      .check-element {                                                                                                 // 27780
        padding: 10px;                                                                                                 // 27781
        border: 1px solid black;                                                                                       // 27782
        background: white;                                                                                             // 27783
      }                                                                                                                // 27784
    </file>                                                                                                            // 27785
    <file name="protractor.js" type="protractor">                                                                      // 27786
      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));                                                      // 27787
      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));                                                  // 27788
                                                                                                                       // 27789
      it('should check ng-show / ng-hide', function() {                                                                // 27790
        expect(thumbsUp.isDisplayed()).toBeFalsy();                                                                    // 27791
        expect(thumbsDown.isDisplayed()).toBeTruthy();                                                                 // 27792
                                                                                                                       // 27793
        element(by.model('checked')).click();                                                                          // 27794
                                                                                                                       // 27795
        expect(thumbsUp.isDisplayed()).toBeTruthy();                                                                   // 27796
        expect(thumbsDown.isDisplayed()).toBeFalsy();                                                                  // 27797
      });                                                                                                              // 27798
    </file>                                                                                                            // 27799
  </example>                                                                                                           // 27800
 */                                                                                                                    // 27801
var ngHideDirective = ['$animate', function($animate) {                                                                // 27802
  return {                                                                                                             // 27803
    restrict: 'A',                                                                                                     // 27804
    multiElement: true,                                                                                                // 27805
    link: function(scope, element, attr) {                                                                             // 27806
      scope.$watch(attr.ngHide, function ngHideWatchAction(value) {                                                    // 27807
        // The comment inside of the ngShowDirective explains why we add and                                           // 27808
        // remove a temporary class for the show/hide animation                                                        // 27809
        $animate[value ? 'addClass' : 'removeClass'](element,NG_HIDE_CLASS, {                                          // 27810
          tempClasses: NG_HIDE_IN_PROGRESS_CLASS                                                                       // 27811
        });                                                                                                            // 27812
      });                                                                                                              // 27813
    }                                                                                                                  // 27814
  };                                                                                                                   // 27815
}];                                                                                                                    // 27816
                                                                                                                       // 27817
/**                                                                                                                    // 27818
 * @ngdoc directive                                                                                                    // 27819
 * @name ngStyle                                                                                                       // 27820
 * @restrict AC                                                                                                        // 27821
 *                                                                                                                     // 27822
 * @description                                                                                                        // 27823
 * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.                               // 27824
 *                                                                                                                     // 27825
 * @element ANY                                                                                                        // 27826
 * @param {expression} ngStyle                                                                                         // 27827
 *                                                                                                                     // 27828
 * {@link guide/expression Expression} which evals to an                                                               // 27829
 * object whose keys are CSS style names and values are corresponding values for those CSS                             // 27830
 * keys.                                                                                                               // 27831
 *                                                                                                                     // 27832
 * Since some CSS style names are not valid keys for an object, they must be quoted.                                   // 27833
 * See the 'background-color' style in the example below.                                                              // 27834
 *                                                                                                                     // 27835
 * @example                                                                                                            // 27836
   <example>                                                                                                           // 27837
     <file name="index.html">                                                                                          // 27838
        <input type="button" value="set color" ng-click="myStyle={color:'red'}">                                       // 27839
        <input type="button" value="set background" ng-click="myStyle={'background-color':'blue'}">                    // 27840
        <input type="button" value="clear" ng-click="myStyle={}">                                                      // 27841
        <br/>                                                                                                          // 27842
        <span ng-style="myStyle">Sample Text</span>                                                                    // 27843
        <pre>myStyle={{myStyle}}</pre>                                                                                 // 27844
     </file>                                                                                                           // 27845
     <file name="style.css">                                                                                           // 27846
       span {                                                                                                          // 27847
         color: black;                                                                                                 // 27848
       }                                                                                                               // 27849
     </file>                                                                                                           // 27850
     <file name="protractor.js" type="protractor">                                                                     // 27851
       var colorSpan = element(by.css('span'));                                                                        // 27852
                                                                                                                       // 27853
       it('should check ng-style', function() {                                                                        // 27854
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');                                              // 27855
         element(by.css('input[value=\'set color\']')).click();                                                        // 27856
         expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');                                            // 27857
         element(by.css('input[value=clear]')).click();                                                                // 27858
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');                                              // 27859
       });                                                                                                             // 27860
     </file>                                                                                                           // 27861
   </example>                                                                                                          // 27862
 */                                                                                                                    // 27863
var ngStyleDirective = ngDirective(function(scope, element, attr) {                                                    // 27864
  scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {                                       // 27865
    if (oldStyles && (newStyles !== oldStyles)) {                                                                      // 27866
      forEach(oldStyles, function(val, style) { element.css(style, '');});                                             // 27867
    }                                                                                                                  // 27868
    if (newStyles) element.css(newStyles);                                                                             // 27869
  }, true);                                                                                                            // 27870
});                                                                                                                    // 27871
                                                                                                                       // 27872
/**                                                                                                                    // 27873
 * @ngdoc directive                                                                                                    // 27874
 * @name ngSwitch                                                                                                      // 27875
 * @restrict EA                                                                                                        // 27876
 *                                                                                                                     // 27877
 * @description                                                                                                        // 27878
 * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.  // 27879
 * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location
 * as specified in the template.                                                                                       // 27881
 *                                                                                                                     // 27882
 * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it       // 27883
 * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element
 * matches the value obtained from the evaluated expression. In other words, you define a container element            // 27885
 * (where you place the directive), place an expression on the **`on="..."` attribute**                                // 27886
 * (or the **`ng-switch="..."` attribute**), define any inner elements inside of the directive and place               // 27887
 * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on    // 27888
 * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default
 * attribute is displayed.                                                                                             // 27890
 *                                                                                                                     // 27891
 * <div class="alert alert-info">                                                                                      // 27892
 * Be aware that the attribute values to match against cannot be expressions. They are interpreted                     // 27893
 * as literal string values to match against.                                                                          // 27894
 * For example, **`ng-switch-when="someVal"`** will match against the string `"someVal"` not against the               // 27895
 * value of the expression `$scope.someVal`.                                                                           // 27896
 * </div>                                                                                                              // 27897
                                                                                                                       // 27898
 * @animations                                                                                                         // 27899
 * enter - happens after the ngSwitch contents change and the matched child element is placed inside the container     // 27900
 * leave - happens just after the ngSwitch contents change and just before the former contents are removed from the DOM
 *                                                                                                                     // 27902
 * @usage                                                                                                              // 27903
 *                                                                                                                     // 27904
 * ```                                                                                                                 // 27905
 * <ANY ng-switch="expression">                                                                                        // 27906
 *   <ANY ng-switch-when="matchValue1">...</ANY>                                                                       // 27907
 *   <ANY ng-switch-when="matchValue2">...</ANY>                                                                       // 27908
 *   <ANY ng-switch-default>...</ANY>                                                                                  // 27909
 * </ANY>                                                                                                              // 27910
 * ```                                                                                                                 // 27911
 *                                                                                                                     // 27912
 *                                                                                                                     // 27913
 * @scope                                                                                                              // 27914
 * @priority 1200                                                                                                      // 27915
 * @param {*} ngSwitch|on expression to match against <code>ng-switch-when</code>.                                     // 27916
 * On child elements add:                                                                                              // 27917
 *                                                                                                                     // 27918
 * * `ngSwitchWhen`: the case statement to match against. If match then this                                           // 27919
 *   case will be displayed. If the same match appears multiple times, all the                                         // 27920
 *   elements will be displayed.                                                                                       // 27921
 * * `ngSwitchDefault`: the default case when no other case match. If there                                            // 27922
 *   are multiple default cases, all of them will be displayed when no other                                           // 27923
 *   case match.                                                                                                       // 27924
 *                                                                                                                     // 27925
 *                                                                                                                     // 27926
 * @example                                                                                                            // 27927
  <example module="switchExample" deps="angular-animate.js" animations="true">                                         // 27928
    <file name="index.html">                                                                                           // 27929
      <div ng-controller="ExampleController">                                                                          // 27930
        <select ng-model="selection" ng-options="item for item in items">                                              // 27931
        </select>                                                                                                      // 27932
        <code>selection={{selection}}</code>                                                                           // 27933
        <hr/>                                                                                                          // 27934
        <div class="animate-switch-container"                                                                          // 27935
          ng-switch on="selection">                                                                                    // 27936
            <div class="animate-switch" ng-switch-when="settings">Settings Div</div>                                   // 27937
            <div class="animate-switch" ng-switch-when="home">Home Span</div>                                          // 27938
            <div class="animate-switch" ng-switch-default>default</div>                                                // 27939
        </div>                                                                                                         // 27940
      </div>                                                                                                           // 27941
    </file>                                                                                                            // 27942
    <file name="script.js">                                                                                            // 27943
      angular.module('switchExample', ['ngAnimate'])                                                                   // 27944
        .controller('ExampleController', ['$scope', function($scope) {                                                 // 27945
          $scope.items = ['settings', 'home', 'other'];                                                                // 27946
          $scope.selection = $scope.items[0];                                                                          // 27947
        }]);                                                                                                           // 27948
    </file>                                                                                                            // 27949
    <file name="animations.css">                                                                                       // 27950
      .animate-switch-container {                                                                                      // 27951
        position:relative;                                                                                             // 27952
        background:white;                                                                                              // 27953
        border:1px solid black;                                                                                        // 27954
        height:40px;                                                                                                   // 27955
        overflow:hidden;                                                                                               // 27956
      }                                                                                                                // 27957
                                                                                                                       // 27958
      .animate-switch {                                                                                                // 27959
        padding:10px;                                                                                                  // 27960
      }                                                                                                                // 27961
                                                                                                                       // 27962
      .animate-switch.ng-animate {                                                                                     // 27963
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;                                                  // 27964
                                                                                                                       // 27965
        position:absolute;                                                                                             // 27966
        top:0;                                                                                                         // 27967
        left:0;                                                                                                        // 27968
        right:0;                                                                                                       // 27969
        bottom:0;                                                                                                      // 27970
      }                                                                                                                // 27971
                                                                                                                       // 27972
      .animate-switch.ng-leave.ng-leave-active,                                                                        // 27973
      .animate-switch.ng-enter {                                                                                       // 27974
        top:-50px;                                                                                                     // 27975
      }                                                                                                                // 27976
      .animate-switch.ng-leave,                                                                                        // 27977
      .animate-switch.ng-enter.ng-enter-active {                                                                       // 27978
        top:0;                                                                                                         // 27979
      }                                                                                                                // 27980
    </file>                                                                                                            // 27981
    <file name="protractor.js" type="protractor">                                                                      // 27982
      var switchElem = element(by.css('[ng-switch]'));                                                                 // 27983
      var select = element(by.model('selection'));                                                                     // 27984
                                                                                                                       // 27985
      it('should start in settings', function() {                                                                      // 27986
        expect(switchElem.getText()).toMatch(/Settings Div/);                                                          // 27987
      });                                                                                                              // 27988
      it('should change to home', function() {                                                                         // 27989
        select.all(by.css('option')).get(1).click();                                                                   // 27990
        expect(switchElem.getText()).toMatch(/Home Span/);                                                             // 27991
      });                                                                                                              // 27992
      it('should select default', function() {                                                                         // 27993
        select.all(by.css('option')).get(2).click();                                                                   // 27994
        expect(switchElem.getText()).toMatch(/default/);                                                               // 27995
      });                                                                                                              // 27996
    </file>                                                                                                            // 27997
  </example>                                                                                                           // 27998
 */                                                                                                                    // 27999
var ngSwitchDirective = ['$animate', function($animate) {                                                              // 28000
  return {                                                                                                             // 28001
    require: 'ngSwitch',                                                                                               // 28002
                                                                                                                       // 28003
    // asks for $scope to fool the BC controller module                                                                // 28004
    controller: ['$scope', function ngSwitchController() {                                                             // 28005
     this.cases = {};                                                                                                  // 28006
    }],                                                                                                                // 28007
    link: function(scope, element, attr, ngSwitchController) {                                                         // 28008
      var watchExpr = attr.ngSwitch || attr.on,                                                                        // 28009
          selectedTranscludes = [],                                                                                    // 28010
          selectedElements = [],                                                                                       // 28011
          previousLeaveAnimations = [],                                                                                // 28012
          selectedScopes = [];                                                                                         // 28013
                                                                                                                       // 28014
      var spliceFactory = function(array, index) {                                                                     // 28015
          return function() { array.splice(index, 1); };                                                               // 28016
      };                                                                                                               // 28017
                                                                                                                       // 28018
      scope.$watch(watchExpr, function ngSwitchWatchAction(value) {                                                    // 28019
        var i, ii;                                                                                                     // 28020
        for (i = 0, ii = previousLeaveAnimations.length; i < ii; ++i) {                                                // 28021
          $animate.cancel(previousLeaveAnimations[i]);                                                                 // 28022
        }                                                                                                              // 28023
        previousLeaveAnimations.length = 0;                                                                            // 28024
                                                                                                                       // 28025
        for (i = 0, ii = selectedScopes.length; i < ii; ++i) {                                                         // 28026
          var selected = getBlockNodes(selectedElements[i].clone);                                                     // 28027
          selectedScopes[i].$destroy();                                                                                // 28028
          var promise = previousLeaveAnimations[i] = $animate.leave(selected);                                         // 28029
          promise.then(spliceFactory(previousLeaveAnimations, i));                                                     // 28030
        }                                                                                                              // 28031
                                                                                                                       // 28032
        selectedElements.length = 0;                                                                                   // 28033
        selectedScopes.length = 0;                                                                                     // 28034
                                                                                                                       // 28035
        if ((selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?'])) {          // 28036
          forEach(selectedTranscludes, function(selectedTransclude) {                                                  // 28037
            selectedTransclude.transclude(function(caseElement, selectedScope) {                                       // 28038
              selectedScopes.push(selectedScope);                                                                      // 28039
              var anchor = selectedTransclude.element;                                                                 // 28040
              caseElement[caseElement.length++] = document.createComment(' end ngSwitchWhen: ');                       // 28041
              var block = { clone: caseElement };                                                                      // 28042
                                                                                                                       // 28043
              selectedElements.push(block);                                                                            // 28044
              $animate.enter(caseElement, anchor.parent(), anchor);                                                    // 28045
            });                                                                                                        // 28046
          });                                                                                                          // 28047
        }                                                                                                              // 28048
      });                                                                                                              // 28049
    }                                                                                                                  // 28050
  };                                                                                                                   // 28051
}];                                                                                                                    // 28052
                                                                                                                       // 28053
var ngSwitchWhenDirective = ngDirective({                                                                              // 28054
  transclude: 'element',                                                                                               // 28055
  priority: 1200,                                                                                                      // 28056
  require: '^ngSwitch',                                                                                                // 28057
  multiElement: true,                                                                                                  // 28058
  link: function(scope, element, attrs, ctrl, $transclude) {                                                           // 28059
    ctrl.cases['!' + attrs.ngSwitchWhen] = (ctrl.cases['!' + attrs.ngSwitchWhen] || []);                               // 28060
    ctrl.cases['!' + attrs.ngSwitchWhen].push({ transclude: $transclude, element: element });                          // 28061
  }                                                                                                                    // 28062
});                                                                                                                    // 28063
                                                                                                                       // 28064
var ngSwitchDefaultDirective = ngDirective({                                                                           // 28065
  transclude: 'element',                                                                                               // 28066
  priority: 1200,                                                                                                      // 28067
  require: '^ngSwitch',                                                                                                // 28068
  multiElement: true,                                                                                                  // 28069
  link: function(scope, element, attr, ctrl, $transclude) {                                                            // 28070
    ctrl.cases['?'] = (ctrl.cases['?'] || []);                                                                         // 28071
    ctrl.cases['?'].push({ transclude: $transclude, element: element });                                               // 28072
   }                                                                                                                   // 28073
});                                                                                                                    // 28074
                                                                                                                       // 28075
/**                                                                                                                    // 28076
 * @ngdoc directive                                                                                                    // 28077
 * @name ngTransclude                                                                                                  // 28078
 * @restrict EAC                                                                                                       // 28079
 *                                                                                                                     // 28080
 * @description                                                                                                        // 28081
 * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.
 *                                                                                                                     // 28083
 * Any existing content of the element that this directive is placed on will be removed before the transcluded content is inserted.
 *                                                                                                                     // 28085
 * @element ANY                                                                                                        // 28086
 *                                                                                                                     // 28087
 * @example                                                                                                            // 28088
   <example module="transcludeExample">                                                                                // 28089
     <file name="index.html">                                                                                          // 28090
       <script>                                                                                                        // 28091
         angular.module('transcludeExample', [])                                                                       // 28092
          .directive('pane', function(){                                                                               // 28093
             return {                                                                                                  // 28094
               restrict: 'E',                                                                                          // 28095
               transclude: true,                                                                                       // 28096
               scope: { title:'@' },                                                                                   // 28097
               template: '<div style="border: 1px solid black;">' +                                                    // 28098
                           '<div style="background-color: gray">{{title}}</div>' +                                     // 28099
                           '<ng-transclude></ng-transclude>' +                                                         // 28100
                         '</div>'                                                                                      // 28101
             };                                                                                                        // 28102
         })                                                                                                            // 28103
         .controller('ExampleController', ['$scope', function($scope) {                                                // 28104
           $scope.title = 'Lorem Ipsum';                                                                               // 28105
           $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';                                   // 28106
         }]);                                                                                                          // 28107
       </script>                                                                                                       // 28108
       <div ng-controller="ExampleController">                                                                         // 28109
         <input ng-model="title" aria-label="title"> <br/>                                                             // 28110
         <textarea ng-model="text" aria-label="text"></textarea> <br/>                                                 // 28111
         <pane title="{{title}}">{{text}}</pane>                                                                       // 28112
       </div>                                                                                                          // 28113
     </file>                                                                                                           // 28114
     <file name="protractor.js" type="protractor">                                                                     // 28115
        it('should have transcluded', function() {                                                                     // 28116
          var titleElement = element(by.model('title'));                                                               // 28117
          titleElement.clear();                                                                                        // 28118
          titleElement.sendKeys('TITLE');                                                                              // 28119
          var textElement = element(by.model('text'));                                                                 // 28120
          textElement.clear();                                                                                         // 28121
          textElement.sendKeys('TEXT');                                                                                // 28122
          expect(element(by.binding('title')).getText()).toEqual('TITLE');                                             // 28123
          expect(element(by.binding('text')).getText()).toEqual('TEXT');                                               // 28124
        });                                                                                                            // 28125
     </file>                                                                                                           // 28126
   </example>                                                                                                          // 28127
 *                                                                                                                     // 28128
 */                                                                                                                    // 28129
var ngTranscludeDirective = ngDirective({                                                                              // 28130
  restrict: 'EAC',                                                                                                     // 28131
  link: function($scope, $element, $attrs, controller, $transclude) {                                                  // 28132
    if (!$transclude) {                                                                                                // 28133
      throw minErr('ngTransclude')('orphan',                                                                           // 28134
       'Illegal use of ngTransclude directive in the template! ' +                                                     // 28135
       'No parent directive that requires a transclusion found. ' +                                                    // 28136
       'Element: {0}',                                                                                                 // 28137
       startingTag($element));                                                                                         // 28138
    }                                                                                                                  // 28139
                                                                                                                       // 28140
    $transclude(function(clone) {                                                                                      // 28141
      $element.empty();                                                                                                // 28142
      $element.append(clone);                                                                                          // 28143
    });                                                                                                                // 28144
  }                                                                                                                    // 28145
});                                                                                                                    // 28146
                                                                                                                       // 28147
/**                                                                                                                    // 28148
 * @ngdoc directive                                                                                                    // 28149
 * @name script                                                                                                        // 28150
 * @restrict E                                                                                                         // 28151
 *                                                                                                                     // 28152
 * @description                                                                                                        // 28153
 * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the               // 28154
 * template can be used by {@link ng.directive:ngInclude `ngInclude`},                                                 // 28155
 * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the                   // 28156
 * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be               // 28157
 * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.                         // 28158
 *                                                                                                                     // 28159
 * @param {string} type Must be set to `'text/ng-template'`.                                                           // 28160
 * @param {string} id Cache name of the template.                                                                      // 28161
 *                                                                                                                     // 28162
 * @example                                                                                                            // 28163
  <example>                                                                                                            // 28164
    <file name="index.html">                                                                                           // 28165
      <script type="text/ng-template" id="/tpl.html">                                                                  // 28166
        Content of the template.                                                                                       // 28167
      </script>                                                                                                        // 28168
                                                                                                                       // 28169
      <a ng-click="currentTpl='/tpl.html'" id="tpl-link">Load inlined template</a>                                     // 28170
      <div id="tpl-content" ng-include src="currentTpl"></div>                                                         // 28171
    </file>                                                                                                            // 28172
    <file name="protractor.js" type="protractor">                                                                      // 28173
      it('should load template defined inside script tag', function() {                                                // 28174
        element(by.css('#tpl-link')).click();                                                                          // 28175
        expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);                          // 28176
      });                                                                                                              // 28177
    </file>                                                                                                            // 28178
  </example>                                                                                                           // 28179
 */                                                                                                                    // 28180
var scriptDirective = ['$templateCache', function($templateCache) {                                                    // 28181
  return {                                                                                                             // 28182
    restrict: 'E',                                                                                                     // 28183
    terminal: true,                                                                                                    // 28184
    compile: function(element, attr) {                                                                                 // 28185
      if (attr.type == 'text/ng-template') {                                                                           // 28186
        var templateUrl = attr.id,                                                                                     // 28187
            text = element[0].text;                                                                                    // 28188
                                                                                                                       // 28189
        $templateCache.put(templateUrl, text);                                                                         // 28190
      }                                                                                                                // 28191
    }                                                                                                                  // 28192
  };                                                                                                                   // 28193
}];                                                                                                                    // 28194
                                                                                                                       // 28195
var noopNgModelController = { $setViewValue: noop, $render: noop };                                                    // 28196
                                                                                                                       // 28197
/**                                                                                                                    // 28198
 * @ngdoc type                                                                                                         // 28199
 * @name  select.SelectController                                                                                      // 28200
 * @description                                                                                                        // 28201
 * The controller for the `<select>` directive. This provides support for reading                                      // 28202
 * and writing the selected value(s) of the control and also coordinates dynamically                                   // 28203
 * added `<option>` elements, perhaps by an `ngRepeat` directive.                                                      // 28204
 */                                                                                                                    // 28205
var SelectController =                                                                                                 // 28206
        ['$element', '$scope', '$attrs', function($element, $scope, $attrs) {                                          // 28207
                                                                                                                       // 28208
  var self = this,                                                                                                     // 28209
      optionsMap = new HashMap();                                                                                      // 28210
                                                                                                                       // 28211
  // If the ngModel doesn't get provided then provide a dummy noop version to prevent errors                           // 28212
  self.ngModelCtrl = noopNgModelController;                                                                            // 28213
                                                                                                                       // 28214
  // The "unknown" option is one that is prepended to the list if the viewValue                                        // 28215
  // does not match any of the options. When it is rendered the value of the unknown                                   // 28216
  // option is '? XXX ?' where XXX is the hashKey of the value that is not known.                                      // 28217
  //                                                                                                                   // 28218
  // We can't just jqLite('<option>') since jqLite is not smart enough                                                 // 28219
  // to create it in <select> and IE barfs otherwise.                                                                  // 28220
  self.unknownOption = jqLite(document.createElement('option'));                                                       // 28221
  self.renderUnknownOption = function(val) {                                                                           // 28222
    var unknownVal = '? ' + hashKey(val) + ' ?';                                                                       // 28223
    self.unknownOption.val(unknownVal);                                                                                // 28224
    $element.prepend(self.unknownOption);                                                                              // 28225
    $element.val(unknownVal);                                                                                          // 28226
  };                                                                                                                   // 28227
                                                                                                                       // 28228
  $scope.$on('$destroy', function() {                                                                                  // 28229
    // disable unknown option so that we don't do work when the whole select is being destroyed                        // 28230
    self.renderUnknownOption = noop;                                                                                   // 28231
  });                                                                                                                  // 28232
                                                                                                                       // 28233
  self.removeUnknownOption = function() {                                                                              // 28234
    if (self.unknownOption.parent()) self.unknownOption.remove();                                                      // 28235
  };                                                                                                                   // 28236
                                                                                                                       // 28237
                                                                                                                       // 28238
  // Read the value of the select control, the implementation of this changes depending                                // 28239
  // upon whether the select can have multiple values and whether ngOptions is at work.                                // 28240
  self.readValue = function readSingleValue() {                                                                        // 28241
    self.removeUnknownOption();                                                                                        // 28242
    return $element.val();                                                                                             // 28243
  };                                                                                                                   // 28244
                                                                                                                       // 28245
                                                                                                                       // 28246
  // Write the value to the select control, the implementation of this changes depending                               // 28247
  // upon whether the select can have multiple values and whether ngOptions is at work.                                // 28248
  self.writeValue = function writeSingleValue(value) {                                                                 // 28249
    if (self.hasOption(value)) {                                                                                       // 28250
      self.removeUnknownOption();                                                                                      // 28251
      $element.val(value);                                                                                             // 28252
      if (value === '') self.emptyOption.prop('selected', true); // to make IE9 happy                                  // 28253
    } else {                                                                                                           // 28254
      if (value == null && self.emptyOption) {                                                                         // 28255
        self.removeUnknownOption();                                                                                    // 28256
        $element.val('');                                                                                              // 28257
      } else {                                                                                                         // 28258
        self.renderUnknownOption(value);                                                                               // 28259
      }                                                                                                                // 28260
    }                                                                                                                  // 28261
  };                                                                                                                   // 28262
                                                                                                                       // 28263
                                                                                                                       // 28264
  // Tell the select control that an option, with the given value, has been added                                      // 28265
  self.addOption = function(value, element) {                                                                          // 28266
    assertNotHasOwnProperty(value, '"option value"');                                                                  // 28267
    if (value === '') {                                                                                                // 28268
      self.emptyOption = element;                                                                                      // 28269
    }                                                                                                                  // 28270
    var count = optionsMap.get(value) || 0;                                                                            // 28271
    optionsMap.put(value, count + 1);                                                                                  // 28272
  };                                                                                                                   // 28273
                                                                                                                       // 28274
  // Tell the select control that an option, with the given value, has been removed                                    // 28275
  self.removeOption = function(value) {                                                                                // 28276
    var count = optionsMap.get(value);                                                                                 // 28277
    if (count) {                                                                                                       // 28278
      if (count === 1) {                                                                                               // 28279
        optionsMap.remove(value);                                                                                      // 28280
        if (value === '') {                                                                                            // 28281
          self.emptyOption = undefined;                                                                                // 28282
        }                                                                                                              // 28283
      } else {                                                                                                         // 28284
        optionsMap.put(value, count - 1);                                                                              // 28285
      }                                                                                                                // 28286
    }                                                                                                                  // 28287
  };                                                                                                                   // 28288
                                                                                                                       // 28289
  // Check whether the select control has an option matching the given value                                           // 28290
  self.hasOption = function(value) {                                                                                   // 28291
    return !!optionsMap.get(value);                                                                                    // 28292
  };                                                                                                                   // 28293
}];                                                                                                                    // 28294
                                                                                                                       // 28295
/**                                                                                                                    // 28296
 * @ngdoc directive                                                                                                    // 28297
 * @name select                                                                                                        // 28298
 * @restrict E                                                                                                         // 28299
 *                                                                                                                     // 28300
 * @description                                                                                                        // 28301
 * HTML `SELECT` element with angular data-binding.                                                                    // 28302
 *                                                                                                                     // 28303
 * The `select` directive is used together with {@link ngModel `ngModel`} to provide data-binding                      // 28304
 * between the scope and the `<select>` control (including setting default values).                                    // 28305
 * Ìt also handles dynamic `<option>` elements, which can be added using the {@link ngRepeat `ngRepeat}` or            // 28306
 * {@link ngOptions `ngOptions`} directives.                                                                           // 28307
 *                                                                                                                     // 28308
 * When an item in the `<select>` menu is selected, the value of the selected option will be bound                     // 28309
 * to the model identified by the `ngModel` directive. With static or repeated options, this is                        // 28310
 * the content of the `value` attribute or the textContent of the `<option>`, if the value attribute is missing.       // 28311
 * If you want dynamic value attributes, you can use interpolation inside the value attribute.                         // 28312
 *                                                                                                                     // 28313
 * <div class="alert alert-warning">                                                                                   // 28314
 * Note that the value of a `select` directive used without `ngOptions` is always a string.                            // 28315
 * When the model needs to be bound to a non-string value, you must either explictly convert it                        // 28316
 * using a directive (see example below) or use `ngOptions` to specify the set of options.                             // 28317
 * This is because an option element can only be bound to string values at present.                                    // 28318
 * </div>                                                                                                              // 28319
 *                                                                                                                     // 28320
 * If the viewValue of `ngModel` does not match any of the options, then the control                                   // 28321
 * will automatically add an "unknown" option, which it then removes when the mismatch is resolved.                    // 28322
 *                                                                                                                     // 28323
 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can                      // 28324
 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"                // 28325
 * option. See example below for demonstration.                                                                        // 28326
 *                                                                                                                     // 28327
 * <div class="alert alert-info">                                                                                      // 28328
 * In many cases, `ngRepeat` can be used on `<option>` elements instead of {@link ng.directive:ngOptions               // 28329
 * ngOptions} to achieve a similar result. However, `ngOptions` provides some benefits, such as                        // 28330
 * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the                    // 28331
 * comprehension expression, and additionally in reducing memory and increasing speed by not creating                  // 28332
 * a new scope for each repeated instance.                                                                             // 28333
 * </div>                                                                                                              // 28334
 *                                                                                                                     // 28335
 *                                                                                                                     // 28336
 * @param {string} ngModel Assignable angular expression to data-bind to.                                              // 28337
 * @param {string=} name Property name of the form under which the control is published.                               // 28338
 * @param {string=} required Sets `required` validation error key if the value is not entered.                         // 28339
 * @param {string=} ngRequired Adds required attribute and required validation constraint to                           // 28340
 * the element when the ngRequired expression evaluates to true. Use ngRequired instead of required                    // 28341
 * when you want to data-bind to the required attribute.                                                               // 28342
 * @param {string=} ngChange Angular expression to be executed when selected option(s) changes due to user             // 28343
 *    interaction with the select element.                                                                             // 28344
 * @param {string=} ngOptions sets the options that the select is populated with and defines what is                   // 28345
 * set on the model on selection. See {@link ngOptions `ngOptions`}.                                                   // 28346
 *                                                                                                                     // 28347
 * @example                                                                                                            // 28348
 * ### Simple `select` elements with static options                                                                    // 28349
 *                                                                                                                     // 28350
 * <example name="static-select" module="staticSelect">                                                                // 28351
 * <file name="index.html">                                                                                            // 28352
 * <div ng-controller="ExampleController">                                                                             // 28353
 *   <form name="myForm">                                                                                              // 28354
 *     <label for="singleSelect"> Single select: </label><br>                                                          // 28355
 *     <select name="singleSelect" ng-model="data.singleSelect">                                                       // 28356
 *       <option value="option-1">Option 1</option>                                                                    // 28357
 *       <option value="option-2">Option 2</option>                                                                    // 28358
 *     </select><br>                                                                                                   // 28359
 *                                                                                                                     // 28360
 *     <label for="singleSelect"> Single select with "not selected" option and dynamic option values: </label><br>     // 28361
 *     <select name="singleSelect" id="singleSelect" ng-model="data.singleSelect">                                     // 28362
 *       <option value="">---Please select---</option> <!-- not selected / blank option -->                            // 28363
 *       <option value="{{data.option1}}">Option 1</option> <!-- interpolation -->                                     // 28364
 *       <option value="option-2">Option 2</option>                                                                    // 28365
 *     </select><br>                                                                                                   // 28366
 *     <button ng-click="forceUnknownOption()">Force unknown option</button><br>                                       // 28367
 *     <tt>singleSelect = {{data.singleSelect}}</tt>                                                                   // 28368
 *                                                                                                                     // 28369
 *     <hr>                                                                                                            // 28370
 *     <label for="multipleSelect"> Multiple select: </label><br>                                                      // 28371
 *     <select name="multipleSelect" id="multipleSelect" ng-model="data.multipleSelect" multiple>                      // 28372
 *       <option value="option-1">Option 1</option>                                                                    // 28373
 *       <option value="option-2">Option 2</option>                                                                    // 28374
 *       <option value="option-3">Option 3</option>                                                                    // 28375
 *     </select><br>                                                                                                   // 28376
 *     <tt>multipleSelect = {{data.multipleSelect}}</tt><br/>                                                          // 28377
 *   </form>                                                                                                           // 28378
 * </div>                                                                                                              // 28379
 * </file>                                                                                                             // 28380
 * <file name="app.js">                                                                                                // 28381
 *  angular.module('staticSelect', [])                                                                                 // 28382
 *    .controller('ExampleController', ['$scope', function($scope) {                                                   // 28383
 *      $scope.data = {                                                                                                // 28384
 *       singleSelect: null,                                                                                           // 28385
 *       multipleSelect: [],                                                                                           // 28386
 *       option1: 'option-1',                                                                                          // 28387
 *      };                                                                                                             // 28388
 *                                                                                                                     // 28389
 *      $scope.forceUnknownOption = function() {                                                                       // 28390
 *        $scope.data.singleSelect = 'nonsense';                                                                       // 28391
 *      };                                                                                                             // 28392
 *   }]);                                                                                                              // 28393
 * </file>                                                                                                             // 28394
 *</example>                                                                                                           // 28395
 *                                                                                                                     // 28396
 * ### Using `ngRepeat` to generate `select` options                                                                   // 28397
 * <example name="ngrepeat-select" module="ngrepeatSelect">                                                            // 28398
 * <file name="index.html">                                                                                            // 28399
 * <div ng-controller="ExampleController">                                                                             // 28400
 *   <form name="myForm">                                                                                              // 28401
 *     <label for="repeatSelect"> Repeat select: </label>                                                              // 28402
 *     <select name="repeatSelect" id="repeatSelect" ng-model="data.repeatSelect">                                     // 28403
 *       <option ng-repeat="option in data.availableOptions" value="{{option.id}}">{{option.name}}</option>            // 28404
 *     </select>                                                                                                       // 28405
 *   </form>                                                                                                           // 28406
 *   <hr>                                                                                                              // 28407
 *   <tt>repeatSelect = {{data.repeatSelect}}</tt><br/>                                                                // 28408
 * </div>                                                                                                              // 28409
 * </file>                                                                                                             // 28410
 * <file name="app.js">                                                                                                // 28411
 *  angular.module('ngrepeatSelect', [])                                                                               // 28412
 *    .controller('ExampleController', ['$scope', function($scope) {                                                   // 28413
 *      $scope.data = {                                                                                                // 28414
 *       repeatSelect: null,                                                                                           // 28415
 *       availableOptions: [                                                                                           // 28416
 *         {id: '1', name: 'Option A'},                                                                                // 28417
 *         {id: '2', name: 'Option B'},                                                                                // 28418
 *         {id: '3', name: 'Option C'}                                                                                 // 28419
 *       ],                                                                                                            // 28420
 *      };                                                                                                             // 28421
 *   }]);                                                                                                              // 28422
 * </file>                                                                                                             // 28423
 *</example>                                                                                                           // 28424
 *                                                                                                                     // 28425
 *                                                                                                                     // 28426
 * ### Using `select` with `ngOptions` and setting a default value                                                     // 28427
 * See the {@link ngOptions ngOptions documentation} for more `ngOptions` usage examples.                              // 28428
 *                                                                                                                     // 28429
 * <example name="select-with-default-values" module="defaultValueSelect">                                             // 28430
 * <file name="index.html">                                                                                            // 28431
 * <div ng-controller="ExampleController">                                                                             // 28432
 *   <form name="myForm">                                                                                              // 28433
 *     <label for="mySelect">Make a choice:</label>                                                                    // 28434
 *     <select name="mySelect" id="mySelect"                                                                           // 28435
 *       ng-options="option.name for option in data.availableOptions track by option.id"                               // 28436
 *       ng-model="data.selectedOption"></select>                                                                      // 28437
 *   </form>                                                                                                           // 28438
 *   <hr>                                                                                                              // 28439
 *   <tt>option = {{data.selectedOption}}</tt><br/>                                                                    // 28440
 * </div>                                                                                                              // 28441
 * </file>                                                                                                             // 28442
 * <file name="app.js">                                                                                                // 28443
 *  angular.module('defaultValueSelect', [])                                                                           // 28444
 *    .controller('ExampleController', ['$scope', function($scope) {                                                   // 28445
 *      $scope.data = {                                                                                                // 28446
 *       availableOptions: [                                                                                           // 28447
 *         {id: '1', name: 'Option A'},                                                                                // 28448
 *         {id: '2', name: 'Option B'},                                                                                // 28449
 *         {id: '3', name: 'Option C'}                                                                                 // 28450
 *       ],                                                                                                            // 28451
 *       selectedOption: {id: '3', name: 'Option C'} //This sets the default value of the select in the ui             // 28452
 *       };                                                                                                            // 28453
 *   }]);                                                                                                              // 28454
 * </file>                                                                                                             // 28455
 *</example>                                                                                                           // 28456
 *                                                                                                                     // 28457
 *                                                                                                                     // 28458
 * ### Binding `select` to a non-string value via `ngModel` parsing / formatting                                       // 28459
 *                                                                                                                     // 28460
 * <example name="select-with-non-string-options" module="nonStringSelect">                                            // 28461
 *   <file name="index.html">                                                                                          // 28462
 *     <select ng-model="model.id" convert-to-number>                                                                  // 28463
 *       <option value="0">Zero</option>                                                                               // 28464
 *       <option value="1">One</option>                                                                                // 28465
 *       <option value="2">Two</option>                                                                                // 28466
 *     </select>                                                                                                       // 28467
 *     {{ model }}                                                                                                     // 28468
 *   </file>                                                                                                           // 28469
 *   <file name="app.js">                                                                                              // 28470
 *     angular.module('nonStringSelect', [])                                                                           // 28471
 *       .run(function($rootScope) {                                                                                   // 28472
 *         $rootScope.model = { id: 2 };                                                                               // 28473
 *       })                                                                                                            // 28474
 *       .directive('convertToNumber', function() {                                                                    // 28475
 *         return {                                                                                                    // 28476
 *           require: 'ngModel',                                                                                       // 28477
 *           link: function(scope, element, attrs, ngModel) {                                                          // 28478
 *             ngModel.$parsers.push(function(val) {                                                                   // 28479
 *               return parseInt(val, 10);                                                                             // 28480
 *             });                                                                                                     // 28481
 *             ngModel.$formatters.push(function(val) {                                                                // 28482
 *               return '' + val;                                                                                      // 28483
 *             });                                                                                                     // 28484
 *           }                                                                                                         // 28485
 *         };                                                                                                          // 28486
 *       });                                                                                                           // 28487
 *   </file>                                                                                                           // 28488
 *   <file name="protractor.js" type="protractor">                                                                     // 28489
 *     it('should initialize to model', function() {                                                                   // 28490
 *       var select = element(by.css('select'));                                                                       // 28491
 *       expect(element(by.model('model.id')).$('option:checked').getText()).toEqual('Two');                           // 28492
 *     });                                                                                                             // 28493
 *   </file>                                                                                                           // 28494
 * </example>                                                                                                          // 28495
 *                                                                                                                     // 28496
 */                                                                                                                    // 28497
var selectDirective = function() {                                                                                     // 28498
                                                                                                                       // 28499
  return {                                                                                                             // 28500
    restrict: 'E',                                                                                                     // 28501
    require: ['select', '?ngModel'],                                                                                   // 28502
    controller: SelectController,                                                                                      // 28503
    link: function(scope, element, attr, ctrls) {                                                                      // 28504
                                                                                                                       // 28505
      // if ngModel is not defined, we don't need to do anything                                                       // 28506
      var ngModelCtrl = ctrls[1];                                                                                      // 28507
      if (!ngModelCtrl) return;                                                                                        // 28508
                                                                                                                       // 28509
      var selectCtrl = ctrls[0];                                                                                       // 28510
                                                                                                                       // 28511
      selectCtrl.ngModelCtrl = ngModelCtrl;                                                                            // 28512
                                                                                                                       // 28513
      // We delegate rendering to the `writeValue` method, which can be changed                                        // 28514
      // if the select can have multiple selected values or if the options are being                                   // 28515
      // generated by `ngOptions`                                                                                      // 28516
      ngModelCtrl.$render = function() {                                                                               // 28517
        selectCtrl.writeValue(ngModelCtrl.$viewValue);                                                                 // 28518
      };                                                                                                               // 28519
                                                                                                                       // 28520
      // When the selected item(s) changes we delegate getting the value of the select control                         // 28521
      // to the `readValue` method, which can be changed if the select can have multiple                               // 28522
      // selected values or if the options are being generated by `ngOptions`                                          // 28523
      element.on('change', function() {                                                                                // 28524
        scope.$apply(function() {                                                                                      // 28525
          ngModelCtrl.$setViewValue(selectCtrl.readValue());                                                           // 28526
        });                                                                                                            // 28527
      });                                                                                                              // 28528
                                                                                                                       // 28529
      // If the select allows multiple values then we need to modify how we read and write                             // 28530
      // values from and to the control; also what it means for the value to be empty and                              // 28531
      // we have to add an extra watch since ngModel doesn't work well with arrays - it                                // 28532
      // doesn't trigger rendering if only an item in the array changes.                                               // 28533
      if (attr.multiple) {                                                                                             // 28534
                                                                                                                       // 28535
        // Read value now needs to check each option to see if it is selected                                          // 28536
        selectCtrl.readValue = function readMultipleValue() {                                                          // 28537
          var array = [];                                                                                              // 28538
          forEach(element.find('option'), function(option) {                                                           // 28539
            if (option.selected) {                                                                                     // 28540
              array.push(option.value);                                                                                // 28541
            }                                                                                                          // 28542
          });                                                                                                          // 28543
          return array;                                                                                                // 28544
        };                                                                                                             // 28545
                                                                                                                       // 28546
        // Write value now needs to set the selected property of each matching option                                  // 28547
        selectCtrl.writeValue = function writeMultipleValue(value) {                                                   // 28548
          var items = new HashMap(value);                                                                              // 28549
          forEach(element.find('option'), function(option) {                                                           // 28550
            option.selected = isDefined(items.get(option.value));                                                      // 28551
          });                                                                                                          // 28552
        };                                                                                                             // 28553
                                                                                                                       // 28554
        // we have to do it on each watch since ngModel watches reference, but                                         // 28555
        // we need to work of an array, so we need to see if anything was inserted/removed                             // 28556
        var lastView, lastViewRef = NaN;                                                                               // 28557
        scope.$watch(function selectMultipleWatch() {                                                                  // 28558
          if (lastViewRef === ngModelCtrl.$viewValue && !equals(lastView, ngModelCtrl.$viewValue)) {                   // 28559
            lastView = shallowCopy(ngModelCtrl.$viewValue);                                                            // 28560
            ngModelCtrl.$render();                                                                                     // 28561
          }                                                                                                            // 28562
          lastViewRef = ngModelCtrl.$viewValue;                                                                        // 28563
        });                                                                                                            // 28564
                                                                                                                       // 28565
        // If we are a multiple select then value is now a collection                                                  // 28566
        // so the meaning of $isEmpty changes                                                                          // 28567
        ngModelCtrl.$isEmpty = function(value) {                                                                       // 28568
          return !value || value.length === 0;                                                                         // 28569
        };                                                                                                             // 28570
                                                                                                                       // 28571
      }                                                                                                                // 28572
    }                                                                                                                  // 28573
  };                                                                                                                   // 28574
};                                                                                                                     // 28575
                                                                                                                       // 28576
                                                                                                                       // 28577
// The option directive is purely designed to communicate the existence (or lack of)                                   // 28578
// of dynamically created (and destroyed) option elements to their containing select                                   // 28579
// directive via its controller.                                                                                       // 28580
var optionDirective = ['$interpolate', function($interpolate) {                                                        // 28581
                                                                                                                       // 28582
  function chromeHack(optionElement) {                                                                                 // 28583
    // Workaround for https://code.google.com/p/chromium/issues/detail?id=381459                                       // 28584
    // Adding an <option selected="selected"> element to a <select required="required"> should                         // 28585
    // automatically select the new element                                                                            // 28586
    if (optionElement[0].hasAttribute('selected')) {                                                                   // 28587
      optionElement[0].selected = true;                                                                                // 28588
    }                                                                                                                  // 28589
  }                                                                                                                    // 28590
                                                                                                                       // 28591
  return {                                                                                                             // 28592
    restrict: 'E',                                                                                                     // 28593
    priority: 100,                                                                                                     // 28594
    compile: function(element, attr) {                                                                                 // 28595
                                                                                                                       // 28596
      if (isDefined(attr.value)) {                                                                                     // 28597
        // If the value attribute is defined, check if it contains an interpolation                                    // 28598
        var valueInterpolated = $interpolate(attr.value, true);                                                        // 28599
      } else {                                                                                                         // 28600
        // If the value attribute is not defined then we fall back to the                                              // 28601
        // text content of the option element, which may be interpolated                                               // 28602
        var interpolateFn = $interpolate(element.text(), true);                                                        // 28603
        if (!interpolateFn) {                                                                                          // 28604
          attr.$set('value', element.text());                                                                          // 28605
        }                                                                                                              // 28606
      }                                                                                                                // 28607
                                                                                                                       // 28608
      return function(scope, element, attr) {                                                                          // 28609
                                                                                                                       // 28610
        // This is an optimization over using ^^ since we don't want to have to search                                 // 28611
        // all the way to the root of the DOM for every single option element                                          // 28612
        var selectCtrlName = '$selectController',                                                                      // 28613
            parent = element.parent(),                                                                                 // 28614
            selectCtrl = parent.data(selectCtrlName) ||                                                                // 28615
              parent.parent().data(selectCtrlName); // in case we are in optgroup                                      // 28616
                                                                                                                       // 28617
        function addOption(optionValue) {                                                                              // 28618
          selectCtrl.addOption(optionValue, element);                                                                  // 28619
          selectCtrl.ngModelCtrl.$render();                                                                            // 28620
          chromeHack(element);                                                                                         // 28621
        }                                                                                                              // 28622
                                                                                                                       // 28623
        // Only update trigger option updates if this is an option within a `select`                                   // 28624
        // that also has `ngModel` attached                                                                            // 28625
        if (selectCtrl && selectCtrl.ngModelCtrl) {                                                                    // 28626
                                                                                                                       // 28627
          if (valueInterpolated) {                                                                                     // 28628
            // The value attribute is interpolated                                                                     // 28629
            var oldVal;                                                                                                // 28630
            attr.$observe('value', function valueAttributeObserveAction(newVal) {                                      // 28631
              if (isDefined(oldVal)) {                                                                                 // 28632
                selectCtrl.removeOption(oldVal);                                                                       // 28633
              }                                                                                                        // 28634
              oldVal = newVal;                                                                                         // 28635
              addOption(newVal);                                                                                       // 28636
            });                                                                                                        // 28637
          } else if (interpolateFn) {                                                                                  // 28638
            // The text content is interpolated                                                                        // 28639
            scope.$watch(interpolateFn, function interpolateWatchAction(newVal, oldVal) {                              // 28640
              attr.$set('value', newVal);                                                                              // 28641
              if (oldVal !== newVal) {                                                                                 // 28642
                selectCtrl.removeOption(oldVal);                                                                       // 28643
              }                                                                                                        // 28644
              addOption(newVal);                                                                                       // 28645
            });                                                                                                        // 28646
          } else {                                                                                                     // 28647
            // The value attribute is static                                                                           // 28648
            addOption(attr.value);                                                                                     // 28649
          }                                                                                                            // 28650
                                                                                                                       // 28651
          element.on('$destroy', function() {                                                                          // 28652
            selectCtrl.removeOption(attr.value);                                                                       // 28653
            selectCtrl.ngModelCtrl.$render();                                                                          // 28654
          });                                                                                                          // 28655
        }                                                                                                              // 28656
      };                                                                                                               // 28657
    }                                                                                                                  // 28658
  };                                                                                                                   // 28659
}];                                                                                                                    // 28660
                                                                                                                       // 28661
var styleDirective = valueFn({                                                                                         // 28662
  restrict: 'E',                                                                                                       // 28663
  terminal: false                                                                                                      // 28664
});                                                                                                                    // 28665
                                                                                                                       // 28666
var requiredDirective = function() {                                                                                   // 28667
  return {                                                                                                             // 28668
    restrict: 'A',                                                                                                     // 28669
    require: '?ngModel',                                                                                               // 28670
    link: function(scope, elm, attr, ctrl) {                                                                           // 28671
      if (!ctrl) return;                                                                                               // 28672
      attr.required = true; // force truthy in case we are on non input element                                        // 28673
                                                                                                                       // 28674
      ctrl.$validators.required = function(modelValue, viewValue) {                                                    // 28675
        return !attr.required || !ctrl.$isEmpty(viewValue);                                                            // 28676
      };                                                                                                               // 28677
                                                                                                                       // 28678
      attr.$observe('required', function() {                                                                           // 28679
        ctrl.$validate();                                                                                              // 28680
      });                                                                                                              // 28681
    }                                                                                                                  // 28682
  };                                                                                                                   // 28683
};                                                                                                                     // 28684
                                                                                                                       // 28685
                                                                                                                       // 28686
var patternDirective = function() {                                                                                    // 28687
  return {                                                                                                             // 28688
    restrict: 'A',                                                                                                     // 28689
    require: '?ngModel',                                                                                               // 28690
    link: function(scope, elm, attr, ctrl) {                                                                           // 28691
      if (!ctrl) return;                                                                                               // 28692
                                                                                                                       // 28693
      var regexp, patternExp = attr.ngPattern || attr.pattern;                                                         // 28694
      attr.$observe('pattern', function(regex) {                                                                       // 28695
        if (isString(regex) && regex.length > 0) {                                                                     // 28696
          regex = new RegExp('^' + regex + '$');                                                                       // 28697
        }                                                                                                              // 28698
                                                                                                                       // 28699
        if (regex && !regex.test) {                                                                                    // 28700
          throw minErr('ngPattern')('noregexp',                                                                        // 28701
            'Expected {0} to be a RegExp but was {1}. Element: {2}', patternExp,                                       // 28702
            regex, startingTag(elm));                                                                                  // 28703
        }                                                                                                              // 28704
                                                                                                                       // 28705
        regexp = regex || undefined;                                                                                   // 28706
        ctrl.$validate();                                                                                              // 28707
      });                                                                                                              // 28708
                                                                                                                       // 28709
      ctrl.$validators.pattern = function(modelValue, viewValue) {                                                     // 28710
        // HTML5 pattern constraint validates the input value, so we validate the viewValue                            // 28711
        return ctrl.$isEmpty(viewValue) || isUndefined(regexp) || regexp.test(viewValue);                              // 28712
      };                                                                                                               // 28713
    }                                                                                                                  // 28714
  };                                                                                                                   // 28715
};                                                                                                                     // 28716
                                                                                                                       // 28717
                                                                                                                       // 28718
var maxlengthDirective = function() {                                                                                  // 28719
  return {                                                                                                             // 28720
    restrict: 'A',                                                                                                     // 28721
    require: '?ngModel',                                                                                               // 28722
    link: function(scope, elm, attr, ctrl) {                                                                           // 28723
      if (!ctrl) return;                                                                                               // 28724
                                                                                                                       // 28725
      var maxlength = -1;                                                                                              // 28726
      attr.$observe('maxlength', function(value) {                                                                     // 28727
        var intVal = toInt(value);                                                                                     // 28728
        maxlength = isNaN(intVal) ? -1 : intVal;                                                                       // 28729
        ctrl.$validate();                                                                                              // 28730
      });                                                                                                              // 28731
      ctrl.$validators.maxlength = function(modelValue, viewValue) {                                                   // 28732
        return (maxlength < 0) || ctrl.$isEmpty(viewValue) || (viewValue.length <= maxlength);                         // 28733
      };                                                                                                               // 28734
    }                                                                                                                  // 28735
  };                                                                                                                   // 28736
};                                                                                                                     // 28737
                                                                                                                       // 28738
var minlengthDirective = function() {                                                                                  // 28739
  return {                                                                                                             // 28740
    restrict: 'A',                                                                                                     // 28741
    require: '?ngModel',                                                                                               // 28742
    link: function(scope, elm, attr, ctrl) {                                                                           // 28743
      if (!ctrl) return;                                                                                               // 28744
                                                                                                                       // 28745
      var minlength = 0;                                                                                               // 28746
      attr.$observe('minlength', function(value) {                                                                     // 28747
        minlength = toInt(value) || 0;                                                                                 // 28748
        ctrl.$validate();                                                                                              // 28749
      });                                                                                                              // 28750
      ctrl.$validators.minlength = function(modelValue, viewValue) {                                                   // 28751
        return ctrl.$isEmpty(viewValue) || viewValue.length >= minlength;                                              // 28752
      };                                                                                                               // 28753
    }                                                                                                                  // 28754
  };                                                                                                                   // 28755
};                                                                                                                     // 28756
                                                                                                                       // 28757
if (window.angular.bootstrap) {                                                                                        // 28758
  //AngularJS is already loaded, so we can return here...                                                              // 28759
  console.log('WARNING: Tried to load angular more than once.');                                                       // 28760
  return;                                                                                                              // 28761
}                                                                                                                      // 28762
                                                                                                                       // 28763
//try to bind to jquery now so that one can write jqLite(document).ready()                                             // 28764
//but we will rebind on bootstrap again.                                                                               // 28765
bindJQuery();                                                                                                          // 28766
                                                                                                                       // 28767
publishExternalAPI(angular);                                                                                           // 28768
                                                                                                                       // 28769
angular.module("ngLocale", [], ["$provide", function($provide) {                                                       // 28770
var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};                // 28771
function getDecimals(n) {                                                                                              // 28772
  n = n + '';                                                                                                          // 28773
  var i = n.indexOf('.');                                                                                              // 28774
  return (i == -1) ? 0 : n.length - i - 1;                                                                             // 28775
}                                                                                                                      // 28776
                                                                                                                       // 28777
function getVF(n, opt_precision) {                                                                                     // 28778
  var v = opt_precision;                                                                                               // 28779
                                                                                                                       // 28780
  if (undefined === v) {                                                                                               // 28781
    v = Math.min(getDecimals(n), 3);                                                                                   // 28782
  }                                                                                                                    // 28783
                                                                                                                       // 28784
  var base = Math.pow(10, v);                                                                                          // 28785
  var f = ((n * base) | 0) % base;                                                                                     // 28786
  return {v: v, f: f};                                                                                                 // 28787
}                                                                                                                      // 28788
                                                                                                                       // 28789
$provide.value("$locale", {                                                                                            // 28790
  "DATETIME_FORMATS": {                                                                                                // 28791
    "AMPMS": [                                                                                                         // 28792
      "AM",                                                                                                            // 28793
      "PM"                                                                                                             // 28794
    ],                                                                                                                 // 28795
    "DAY": [                                                                                                           // 28796
      "Sunday",                                                                                                        // 28797
      "Monday",                                                                                                        // 28798
      "Tuesday",                                                                                                       // 28799
      "Wednesday",                                                                                                     // 28800
      "Thursday",                                                                                                      // 28801
      "Friday",                                                                                                        // 28802
      "Saturday"                                                                                                       // 28803
    ],                                                                                                                 // 28804
    "ERANAMES": [                                                                                                      // 28805
      "Before Christ",                                                                                                 // 28806
      "Anno Domini"                                                                                                    // 28807
    ],                                                                                                                 // 28808
    "ERAS": [                                                                                                          // 28809
      "BC",                                                                                                            // 28810
      "AD"                                                                                                             // 28811
    ],                                                                                                                 // 28812
    "FIRSTDAYOFWEEK": 6,                                                                                               // 28813
    "MONTH": [                                                                                                         // 28814
      "January",                                                                                                       // 28815
      "February",                                                                                                      // 28816
      "March",                                                                                                         // 28817
      "April",                                                                                                         // 28818
      "May",                                                                                                           // 28819
      "June",                                                                                                          // 28820
      "July",                                                                                                          // 28821
      "August",                                                                                                        // 28822
      "September",                                                                                                     // 28823
      "October",                                                                                                       // 28824
      "November",                                                                                                      // 28825
      "December"                                                                                                       // 28826
    ],                                                                                                                 // 28827
    "SHORTDAY": [                                                                                                      // 28828
      "Sun",                                                                                                           // 28829
      "Mon",                                                                                                           // 28830
      "Tue",                                                                                                           // 28831
      "Wed",                                                                                                           // 28832
      "Thu",                                                                                                           // 28833
      "Fri",                                                                                                           // 28834
      "Sat"                                                                                                            // 28835
    ],                                                                                                                 // 28836
    "SHORTMONTH": [                                                                                                    // 28837
      "Jan",                                                                                                           // 28838
      "Feb",                                                                                                           // 28839
      "Mar",                                                                                                           // 28840
      "Apr",                                                                                                           // 28841
      "May",                                                                                                           // 28842
      "Jun",                                                                                                           // 28843
      "Jul",                                                                                                           // 28844
      "Aug",                                                                                                           // 28845
      "Sep",                                                                                                           // 28846
      "Oct",                                                                                                           // 28847
      "Nov",                                                                                                           // 28848
      "Dec"                                                                                                            // 28849
    ],                                                                                                                 // 28850
    "WEEKENDRANGE": [                                                                                                  // 28851
      5,                                                                                                               // 28852
      6                                                                                                                // 28853
    ],                                                                                                                 // 28854
    "fullDate": "EEEE, MMMM d, y",                                                                                     // 28855
    "longDate": "MMMM d, y",                                                                                           // 28856
    "medium": "MMM d, y h:mm:ss a",                                                                                    // 28857
    "mediumDate": "MMM d, y",                                                                                          // 28858
    "mediumTime": "h:mm:ss a",                                                                                         // 28859
    "short": "M/d/yy h:mm a",                                                                                          // 28860
    "shortDate": "M/d/yy",                                                                                             // 28861
    "shortTime": "h:mm a"                                                                                              // 28862
  },                                                                                                                   // 28863
  "NUMBER_FORMATS": {                                                                                                  // 28864
    "CURRENCY_SYM": "$",                                                                                               // 28865
    "DECIMAL_SEP": ".",                                                                                                // 28866
    "GROUP_SEP": ",",                                                                                                  // 28867
    "PATTERNS": [                                                                                                      // 28868
      {                                                                                                                // 28869
        "gSize": 3,                                                                                                    // 28870
        "lgSize": 3,                                                                                                   // 28871
        "maxFrac": 3,                                                                                                  // 28872
        "minFrac": 0,                                                                                                  // 28873
        "minInt": 1,                                                                                                   // 28874
        "negPre": "-",                                                                                                 // 28875
        "negSuf": "",                                                                                                  // 28876
        "posPre": "",                                                                                                  // 28877
        "posSuf": ""                                                                                                   // 28878
      },                                                                                                               // 28879
      {                                                                                                                // 28880
        "gSize": 3,                                                                                                    // 28881
        "lgSize": 3,                                                                                                   // 28882
        "maxFrac": 2,                                                                                                  // 28883
        "minFrac": 2,                                                                                                  // 28884
        "minInt": 1,                                                                                                   // 28885
        "negPre": "-\u00a4",                                                                                           // 28886
        "negSuf": "",                                                                                                  // 28887
        "posPre": "\u00a4",                                                                                            // 28888
        "posSuf": ""                                                                                                   // 28889
      }                                                                                                                // 28890
    ]                                                                                                                  // 28891
  },                                                                                                                   // 28892
  "id": "en-us",                                                                                                       // 28893
  "pluralCat": function(n, opt_precision) {  var i = n | 0;  var vf = getVF(n, opt_precision);  if (i == 1 && vf.v == 0) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
});                                                                                                                    // 28895
}]);                                                                                                                   // 28896
                                                                                                                       // 28897
  jqLite(document).ready(function() {                                                                                  // 28898
    angularInit(document, bootstrap);                                                                                  // 28899
  });                                                                                                                  // 28900
                                                                                                                       // 28901
})(window, document);                                                                                                  // 28902
                                                                                                                       // 28903
!window.angular.$$csp().noInlineStyle && window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['angular:angular'] = {};

})();
