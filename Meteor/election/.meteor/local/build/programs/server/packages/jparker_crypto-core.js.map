{"version":3,"sources":["meteor://ðŸ’»app/packages/jparker_crypto-core/packages/jparker_crypto-core.js"],"names":[],"mappingsfile":"/packages/jparker_crypto-core.js","sourcesContent":["(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/jparker:crypto-core/lib/core.js                                                                     //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n/*                                                                                                              // 1\nCryptoJS v3.1.2                                                                                                 // 2\ncode.google.com/p/crypto-js                                                                                     // 3\n(c) 2009-2013 by Jeff Mott. All rights reserved.                                                                // 4\ncode.google.com/p/crypto-js/wiki/License                                                                        // 5\n*/                                                                                                              // 6\n/**                                                                                                             // 7\n * CryptoJS core components.                                                                                    // 8\n */                                                                                                             // 9\nCryptoJS = CryptoJS || (function (Math, undefined) {                                                            // 10\n    /**                                                                                                         // 11\n     * CryptoJS namespace.                                                                                      // 12\n     */                                                                                                         // 13\n    var C = {};                                                                                                 // 14\n                                                                                                                // 15\n    /**                                                                                                         // 16\n     * Library namespace.                                                                                       // 17\n     */                                                                                                         // 18\n    var C_lib = C.lib = {};                                                                                     // 19\n                                                                                                                // 20\n    /**                                                                                                         // 21\n     * Base object for prototypal inheritance.                                                                  // 22\n     */                                                                                                         // 23\n    var Base = C_lib.Base = (function () {                                                                      // 24\n        function F() {}                                                                                         // 25\n                                                                                                                // 26\n        return {                                                                                                // 27\n            /**                                                                                                 // 28\n             * Creates a new object that inherits from this object.                                             // 29\n             *                                                                                                  // 30\n             * @param {Object} overrides Properties to copy into the new object.                                // 31\n             *                                                                                                  // 32\n             * @return {Object} The new object.                                                                 // 33\n             *                                                                                                  // 34\n             * @static                                                                                          // 35\n             *                                                                                                  // 36\n             * @example                                                                                         // 37\n             *                                                                                                  // 38\n             *     var MyType = CryptoJS.lib.Base.extend({                                                      // 39\n             *         field: 'value',                                                                          // 40\n             *                                                                                                  // 41\n             *         method: function () {                                                                    // 42\n             *         }                                                                                        // 43\n             *     });                                                                                          // 44\n             */                                                                                                 // 45\n            extend: function (overrides) {                                                                      // 46\n                // Spawn                                                                                        // 47\n                F.prototype = this;                                                                             // 48\n                var subtype = new F();                                                                          // 49\n                                                                                                                // 50\n                // Augment                                                                                      // 51\n                if (overrides) {                                                                                // 52\n                    subtype.mixIn(overrides);                                                                   // 53\n                }                                                                                               // 54\n                                                                                                                // 55\n                // Create default initializer                                                                   // 56\n                if (!subtype.hasOwnProperty('init')) {                                                          // 57\n                    subtype.init = function () {                                                                // 58\n                        subtype.$super.init.apply(this, arguments);                                             // 59\n                    };                                                                                          // 60\n                }                                                                                               // 61\n                                                                                                                // 62\n                // Initializer's prototype is the subtype object                                                // 63\n                subtype.init.prototype = subtype;                                                               // 64\n                                                                                                                // 65\n                // Reference supertype                                                                          // 66\n                subtype.$super = this;                                                                          // 67\n                                                                                                                // 68\n                return subtype;                                                                                 // 69\n            },                                                                                                  // 70\n                                                                                                                // 71\n            /**                                                                                                 // 72\n             * Extends this object and runs the init method.                                                    // 73\n             * Arguments to create() will be passed to init().                                                  // 74\n             *                                                                                                  // 75\n             * @return {Object} The new object.                                                                 // 76\n             *                                                                                                  // 77\n             * @static                                                                                          // 78\n             *                                                                                                  // 79\n             * @example                                                                                         // 80\n             *                                                                                                  // 81\n             *     var instance = MyType.create();                                                              // 82\n             */                                                                                                 // 83\n            create: function () {                                                                               // 84\n                var instance = this.extend();                                                                   // 85\n                instance.init.apply(instance, arguments);                                                       // 86\n                                                                                                                // 87\n                return instance;                                                                                // 88\n            },                                                                                                  // 89\n                                                                                                                // 90\n            /**                                                                                                 // 91\n             * Initializes a newly created object.                                                              // 92\n             * Override this method to add some logic when your objects are created.                            // 93\n             *                                                                                                  // 94\n             * @example                                                                                         // 95\n             *                                                                                                  // 96\n             *     var MyType = CryptoJS.lib.Base.extend({                                                      // 97\n             *         init: function () {                                                                      // 98\n             *             // ...                                                                               // 99\n             *         }                                                                                        // 100\n             *     });                                                                                          // 101\n             */                                                                                                 // 102\n            init: function () {                                                                                 // 103\n            },                                                                                                  // 104\n                                                                                                                // 105\n            /**                                                                                                 // 106\n             * Copies properties into this object.                                                              // 107\n             *                                                                                                  // 108\n             * @param {Object} properties The properties to mix in.                                             // 109\n             *                                                                                                  // 110\n             * @example                                                                                         // 111\n             *                                                                                                  // 112\n             *     MyType.mixIn({                                                                               // 113\n             *         field: 'value'                                                                           // 114\n             *     });                                                                                          // 115\n             */                                                                                                 // 116\n            mixIn: function (properties) {                                                                      // 117\n                for (var propertyName in properties) {                                                          // 118\n                    if (properties.hasOwnProperty(propertyName)) {                                              // 119\n                        this[propertyName] = properties[propertyName];                                          // 120\n                    }                                                                                           // 121\n                }                                                                                               // 122\n                                                                                                                // 123\n                // IE won't copy toString using the loop above                                                  // 124\n                if (properties.hasOwnProperty('toString')) {                                                    // 125\n                    this.toString = properties.toString;                                                        // 126\n                }                                                                                               // 127\n            },                                                                                                  // 128\n                                                                                                                // 129\n            /**                                                                                                 // 130\n             * Creates a copy of this object.                                                                   // 131\n             *                                                                                                  // 132\n             * @return {Object} The clone.                                                                      // 133\n             *                                                                                                  // 134\n             * @example                                                                                         // 135\n             *                                                                                                  // 136\n             *     var clone = instance.clone();                                                                // 137\n             */                                                                                                 // 138\n            clone: function () {                                                                                // 139\n                return this.init.prototype.extend(this);                                                        // 140\n            }                                                                                                   // 141\n        };                                                                                                      // 142\n    }());                                                                                                       // 143\n                                                                                                                // 144\n    /**                                                                                                         // 145\n     * An array of 32-bit words.                                                                                // 146\n     *                                                                                                          // 147\n     * @property {Array} words The array of 32-bit words.                                                       // 148\n     * @property {number} sigBytes The number of significant bytes in this word array.                          // 149\n     */                                                                                                         // 150\n    var WordArray = C_lib.WordArray = Base.extend({                                                             // 151\n        /**                                                                                                     // 152\n         * Initializes a newly created word array.                                                              // 153\n         *                                                                                                      // 154\n         * @param {Array} words (Optional) An array of 32-bit words.                                            // 155\n         * @param {number} sigBytes (Optional) The number of significant bytes in the words.                    // 156\n         *                                                                                                      // 157\n         * @example                                                                                             // 158\n         *                                                                                                      // 159\n         *     var wordArray = CryptoJS.lib.WordArray.create();                                                 // 160\n         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);                         // 161\n         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);                      // 162\n         */                                                                                                     // 163\n        init: function (words, sigBytes) {                                                                      // 164\n            words = this.words = words || [];                                                                   // 165\n                                                                                                                // 166\n            if (sigBytes != undefined) {                                                                        // 167\n                this.sigBytes = sigBytes;                                                                       // 168\n            } else {                                                                                            // 169\n                this.sigBytes = words.length * 4;                                                               // 170\n            }                                                                                                   // 171\n        },                                                                                                      // 172\n                                                                                                                // 173\n        /**                                                                                                     // 174\n         * Converts this word array to a string.                                                                // 175\n         *                                                                                                      // 176\n         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex          // 177\n         *                                                                                                      // 178\n         * @return {string} The stringified word array.                                                         // 179\n         *                                                                                                      // 180\n         * @example                                                                                             // 181\n         *                                                                                                      // 182\n         *     var string = wordArray + '';                                                                     // 183\n         *     var string = wordArray.toString();                                                               // 184\n         *     var string = wordArray.toString(CryptoJS.enc.Utf8);                                              // 185\n         */                                                                                                     // 186\n        toString: function (encoder) {                                                                          // 187\n            return (encoder || Hex).stringify(this);                                                            // 188\n        },                                                                                                      // 189\n                                                                                                                // 190\n        /**                                                                                                     // 191\n         * Concatenates a word array to this word array.                                                        // 192\n         *                                                                                                      // 193\n         * @param {WordArray} wordArray The word array to append.                                               // 194\n         *                                                                                                      // 195\n         * @return {WordArray} This word array.                                                                 // 196\n         *                                                                                                      // 197\n         * @example                                                                                             // 198\n         *                                                                                                      // 199\n         *     wordArray1.concat(wordArray2);                                                                   // 200\n         */                                                                                                     // 201\n        concat: function (wordArray) {                                                                          // 202\n            // Shortcuts                                                                                        // 203\n            var thisWords = this.words;                                                                         // 204\n            var thatWords = wordArray.words;                                                                    // 205\n            var thisSigBytes = this.sigBytes;                                                                   // 206\n            var thatSigBytes = wordArray.sigBytes;                                                              // 207\n                                                                                                                // 208\n            // Clamp excess bits                                                                                // 209\n            this.clamp();                                                                                       // 210\n                                                                                                                // 211\n            // Concat                                                                                           // 212\n            if (thisSigBytes % 4) {                                                                             // 213\n                // Copy one byte at a time                                                                      // 214\n                for (var i = 0; i < thatSigBytes; i++) {                                                        // 215\n                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;                          // 216\n                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);     // 217\n                }                                                                                               // 218\n            } else if (thatWords.length > 0xffff) {                                                             // 219\n                // Copy one word at a time                                                                      // 220\n                for (var i = 0; i < thatSigBytes; i += 4) {                                                     // 221\n                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];                                   // 222\n                }                                                                                               // 223\n            } else {                                                                                            // 224\n                // Copy all words at once                                                                       // 225\n                thisWords.push.apply(thisWords, thatWords);                                                     // 226\n            }                                                                                                   // 227\n            this.sigBytes += thatSigBytes;                                                                      // 228\n                                                                                                                // 229\n            // Chainable                                                                                        // 230\n            return this;                                                                                        // 231\n        },                                                                                                      // 232\n                                                                                                                // 233\n        /**                                                                                                     // 234\n         * Removes insignificant bits.                                                                          // 235\n         *                                                                                                      // 236\n         * @example                                                                                             // 237\n         *                                                                                                      // 238\n         *     wordArray.clamp();                                                                               // 239\n         */                                                                                                     // 240\n        clamp: function () {                                                                                    // 241\n            // Shortcuts                                                                                        // 242\n            var words = this.words;                                                                             // 243\n            var sigBytes = this.sigBytes;                                                                       // 244\n                                                                                                                // 245\n            // Clamp                                                                                            // 246\n            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);                                   // 247\n            words.length = Math.ceil(sigBytes / 4);                                                             // 248\n        },                                                                                                      // 249\n                                                                                                                // 250\n        /**                                                                                                     // 251\n         * Creates a copy of this word array.                                                                   // 252\n         *                                                                                                      // 253\n         * @return {WordArray} The clone.                                                                       // 254\n         *                                                                                                      // 255\n         * @example                                                                                             // 256\n         *                                                                                                      // 257\n         *     var clone = wordArray.clone();                                                                   // 258\n         */                                                                                                     // 259\n        clone: function () {                                                                                    // 260\n            var clone = Base.clone.call(this);                                                                  // 261\n            clone.words = this.words.slice(0);                                                                  // 262\n                                                                                                                // 263\n            return clone;                                                                                       // 264\n        },                                                                                                      // 265\n                                                                                                                // 266\n        /**                                                                                                     // 267\n         * Creates a word array filled with random bytes.                                                       // 268\n         *                                                                                                      // 269\n         * @param {number} nBytes The number of random bytes to generate.                                       // 270\n         *                                                                                                      // 271\n         * @return {WordArray} The random word array.                                                           // 272\n         *                                                                                                      // 273\n         * @static                                                                                              // 274\n         *                                                                                                      // 275\n         * @example                                                                                             // 276\n         *                                                                                                      // 277\n         *     var wordArray = CryptoJS.lib.WordArray.random(16);                                               // 278\n         */                                                                                                     // 279\n        random: function (nBytes) {                                                                             // 280\n            var words = [];                                                                                     // 281\n            for (var i = 0; i < nBytes; i += 4) {                                                               // 282\n                words.push((Math.random() * 0x100000000) | 0);                                                  // 283\n            }                                                                                                   // 284\n                                                                                                                // 285\n            return new WordArray.init(words, nBytes);                                                           // 286\n        }                                                                                                       // 287\n    });                                                                                                         // 288\n                                                                                                                // 289\n    /**                                                                                                         // 290\n     * Encoder namespace.                                                                                       // 291\n     */                                                                                                         // 292\n    var C_enc = C.enc = {};                                                                                     // 293\n                                                                                                                // 294\n    /**                                                                                                         // 295\n     * Hex encoding strategy.                                                                                   // 296\n     */                                                                                                         // 297\n    var Hex = C_enc.Hex = {                                                                                     // 298\n        /**                                                                                                     // 299\n         * Converts a word array to a hex string.                                                               // 300\n         *                                                                                                      // 301\n         * @param {WordArray} wordArray The word array.                                                         // 302\n         *                                                                                                      // 303\n         * @return {string} The hex string.                                                                     // 304\n         *                                                                                                      // 305\n         * @static                                                                                              // 306\n         *                                                                                                      // 307\n         * @example                                                                                             // 308\n         *                                                                                                      // 309\n         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);                                           // 310\n         */                                                                                                     // 311\n        stringify: function (wordArray) {                                                                       // 312\n            // Shortcuts                                                                                        // 313\n            var words = wordArray.words;                                                                        // 314\n            var sigBytes = wordArray.sigBytes;                                                                  // 315\n                                                                                                                // 316\n            // Convert                                                                                          // 317\n            var hexChars = [];                                                                                  // 318\n            for (var i = 0; i < sigBytes; i++) {                                                                // 319\n                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;                                      // 320\n                hexChars.push((bite >>> 4).toString(16));                                                       // 321\n                hexChars.push((bite & 0x0f).toString(16));                                                      // 322\n            }                                                                                                   // 323\n                                                                                                                // 324\n            return hexChars.join('');                                                                           // 325\n        },                                                                                                      // 326\n                                                                                                                // 327\n        /**                                                                                                     // 328\n         * Converts a hex string to a word array.                                                               // 329\n         *                                                                                                      // 330\n         * @param {string} hexStr The hex string.                                                               // 331\n         *                                                                                                      // 332\n         * @return {WordArray} The word array.                                                                  // 333\n         *                                                                                                      // 334\n         * @static                                                                                              // 335\n         *                                                                                                      // 336\n         * @example                                                                                             // 337\n         *                                                                                                      // 338\n         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);                                               // 339\n         */                                                                                                     // 340\n        parse: function (hexStr) {                                                                              // 341\n            // Shortcut                                                                                         // 342\n            var hexStrLength = hexStr.length;                                                                   // 343\n                                                                                                                // 344\n            // Convert                                                                                          // 345\n            var words = [];                                                                                     // 346\n            for (var i = 0; i < hexStrLength; i += 2) {                                                         // 347\n                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);                      // 348\n            }                                                                                                   // 349\n                                                                                                                // 350\n            return new WordArray.init(words, hexStrLength / 2);                                                 // 351\n        }                                                                                                       // 352\n    };                                                                                                          // 353\n                                                                                                                // 354\n    /**                                                                                                         // 355\n     * Latin1 encoding strategy.                                                                                // 356\n     */                                                                                                         // 357\n    var Latin1 = C_enc.Latin1 = {                                                                               // 358\n        /**                                                                                                     // 359\n         * Converts a word array to a Latin1 string.                                                            // 360\n         *                                                                                                      // 361\n         * @param {WordArray} wordArray The word array.                                                         // 362\n         *                                                                                                      // 363\n         * @return {string} The Latin1 string.                                                                  // 364\n         *                                                                                                      // 365\n         * @static                                                                                              // 366\n         *                                                                                                      // 367\n         * @example                                                                                             // 368\n         *                                                                                                      // 369\n         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);                                     // 370\n         */                                                                                                     // 371\n        stringify: function (wordArray) {                                                                       // 372\n            // Shortcuts                                                                                        // 373\n            var words = wordArray.words;                                                                        // 374\n            var sigBytes = wordArray.sigBytes;                                                                  // 375\n                                                                                                                // 376\n            // Convert                                                                                          // 377\n            var latin1Chars = [];                                                                               // 378\n            for (var i = 0; i < sigBytes; i++) {                                                                // 379\n                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;                                      // 380\n                latin1Chars.push(String.fromCharCode(bite));                                                    // 381\n            }                                                                                                   // 382\n                                                                                                                // 383\n            return latin1Chars.join('');                                                                        // 384\n        },                                                                                                      // 385\n                                                                                                                // 386\n        /**                                                                                                     // 387\n         * Converts a Latin1 string to a word array.                                                            // 388\n         *                                                                                                      // 389\n         * @param {string} latin1Str The Latin1 string.                                                         // 390\n         *                                                                                                      // 391\n         * @return {WordArray} The word array.                                                                  // 392\n         *                                                                                                      // 393\n         * @static                                                                                              // 394\n         *                                                                                                      // 395\n         * @example                                                                                             // 396\n         *                                                                                                      // 397\n         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);                                         // 398\n         */                                                                                                     // 399\n        parse: function (latin1Str) {                                                                           // 400\n            // Shortcut                                                                                         // 401\n            var latin1StrLength = latin1Str.length;                                                             // 402\n                                                                                                                // 403\n            // Convert                                                                                          // 404\n            var words = [];                                                                                     // 405\n            for (var i = 0; i < latin1StrLength; i++) {                                                         // 406\n                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);                       // 407\n            }                                                                                                   // 408\n                                                                                                                // 409\n            return new WordArray.init(words, latin1StrLength);                                                  // 410\n        }                                                                                                       // 411\n    };                                                                                                          // 412\n                                                                                                                // 413\n    /**                                                                                                         // 414\n     * UTF-8 encoding strategy.                                                                                 // 415\n     */                                                                                                         // 416\n    var Utf8 = C_enc.Utf8 = {                                                                                   // 417\n        /**                                                                                                     // 418\n         * Converts a word array to a UTF-8 string.                                                             // 419\n         *                                                                                                      // 420\n         * @param {WordArray} wordArray The word array.                                                         // 421\n         *                                                                                                      // 422\n         * @return {string} The UTF-8 string.                                                                   // 423\n         *                                                                                                      // 424\n         * @static                                                                                              // 425\n         *                                                                                                      // 426\n         * @example                                                                                             // 427\n         *                                                                                                      // 428\n         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);                                         // 429\n         */                                                                                                     // 430\n        stringify: function (wordArray) {                                                                       // 431\n            try {                                                                                               // 432\n                return decodeURIComponent(escape(Latin1.stringify(wordArray)));                                 // 433\n            } catch (e) {                                                                                       // 434\n                throw new Error('Malformed UTF-8 data');                                                        // 435\n            }                                                                                                   // 436\n        },                                                                                                      // 437\n                                                                                                                // 438\n        /**                                                                                                     // 439\n         * Converts a UTF-8 string to a word array.                                                             // 440\n         *                                                                                                      // 441\n         * @param {string} utf8Str The UTF-8 string.                                                            // 442\n         *                                                                                                      // 443\n         * @return {WordArray} The word array.                                                                  // 444\n         *                                                                                                      // 445\n         * @static                                                                                              // 446\n         *                                                                                                      // 447\n         * @example                                                                                             // 448\n         *                                                                                                      // 449\n         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);                                             // 450\n         */                                                                                                     // 451\n        parse: function (utf8Str) {                                                                             // 452\n            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));                                         // 453\n        }                                                                                                       // 454\n    };                                                                                                          // 455\n                                                                                                                // 456\n    /**                                                                                                         // 457\n     * Abstract buffered block algorithm template.                                                              // 458\n     *                                                                                                          // 459\n     * The property blockSize must be implemented in a concrete subtype.                                        // 460\n     *                                                                                                          // 461\n     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n     */                                                                                                         // 463\n    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({                                   // 464\n        /**                                                                                                     // 465\n         * Resets this block algorithm's data buffer to its initial state.                                      // 466\n         *                                                                                                      // 467\n         * @example                                                                                             // 468\n         *                                                                                                      // 469\n         *     bufferedBlockAlgorithm.reset();                                                                  // 470\n         */                                                                                                     // 471\n        reset: function () {                                                                                    // 472\n            // Initial values                                                                                   // 473\n            this._data = new WordArray.init();                                                                  // 474\n            this._nDataBytes = 0;                                                                               // 475\n        },                                                                                                      // 476\n                                                                                                                // 477\n        /**                                                                                                     // 478\n         * Adds new data to this block algorithm's buffer.                                                      // 479\n         *                                                                                                      // 480\n         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8. // 481\n         *                                                                                                      // 482\n         * @example                                                                                             // 483\n         *                                                                                                      // 484\n         *     bufferedBlockAlgorithm._append('data');                                                          // 485\n         *     bufferedBlockAlgorithm._append(wordArray);                                                       // 486\n         */                                                                                                     // 487\n        _append: function (data) {                                                                              // 488\n            // Convert string to WordArray, else assume WordArray already                                       // 489\n            if (typeof data == 'string') {                                                                      // 490\n                data = Utf8.parse(data);                                                                        // 491\n            }                                                                                                   // 492\n                                                                                                                // 493\n            // Append                                                                                           // 494\n            this._data.concat(data);                                                                            // 495\n            this._nDataBytes += data.sigBytes;                                                                  // 496\n        },                                                                                                      // 497\n                                                                                                                // 498\n        /**                                                                                                     // 499\n         * Processes available data blocks.                                                                     // 500\n         *                                                                                                      // 501\n         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.        // 502\n         *                                                                                                      // 503\n         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.                  // 504\n         *                                                                                                      // 505\n         * @return {WordArray} The processed data.                                                              // 506\n         *                                                                                                      // 507\n         * @example                                                                                             // 508\n         *                                                                                                      // 509\n         *     var processedData = bufferedBlockAlgorithm._process();                                           // 510\n         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');                                  // 511\n         */                                                                                                     // 512\n        _process: function (doFlush) {                                                                          // 513\n            // Shortcuts                                                                                        // 514\n            var data = this._data;                                                                              // 515\n            var dataWords = data.words;                                                                         // 516\n            var dataSigBytes = data.sigBytes;                                                                   // 517\n            var blockSize = this.blockSize;                                                                     // 518\n            var blockSizeBytes = blockSize * 4;                                                                 // 519\n                                                                                                                // 520\n            // Count blocks ready                                                                               // 521\n            var nBlocksReady = dataSigBytes / blockSizeBytes;                                                   // 522\n            if (doFlush) {                                                                                      // 523\n                // Round up to include partial blocks                                                           // 524\n                nBlocksReady = Math.ceil(nBlocksReady);                                                         // 525\n            } else {                                                                                            // 526\n                // Round down to include only full blocks,                                                      // 527\n                // less the number of blocks that must remain in the buffer                                     // 528\n                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);                           // 529\n            }                                                                                                   // 530\n                                                                                                                // 531\n            // Count words ready                                                                                // 532\n            var nWordsReady = nBlocksReady * blockSize;                                                         // 533\n                                                                                                                // 534\n            // Count bytes ready                                                                                // 535\n            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);                                          // 536\n                                                                                                                // 537\n            // Process blocks                                                                                   // 538\n            if (nWordsReady) {                                                                                  // 539\n                for (var offset = 0; offset < nWordsReady; offset += blockSize) {                               // 540\n                    // Perform concrete-algorithm logic                                                         // 541\n                    this._doProcessBlock(dataWords, offset);                                                    // 542\n                }                                                                                               // 543\n                                                                                                                // 544\n                // Remove processed words                                                                       // 545\n                var processedWords = dataWords.splice(0, nWordsReady);                                          // 546\n                data.sigBytes -= nBytesReady;                                                                   // 547\n            }                                                                                                   // 548\n                                                                                                                // 549\n            // Return processed words                                                                           // 550\n            return new WordArray.init(processedWords, nBytesReady);                                             // 551\n        },                                                                                                      // 552\n                                                                                                                // 553\n        /**                                                                                                     // 554\n         * Creates a copy of this object.                                                                       // 555\n         *                                                                                                      // 556\n         * @return {Object} The clone.                                                                          // 557\n         *                                                                                                      // 558\n         * @example                                                                                             // 559\n         *                                                                                                      // 560\n         *     var clone = bufferedBlockAlgorithm.clone();                                                      // 561\n         */                                                                                                     // 562\n        clone: function () {                                                                                    // 563\n            var clone = Base.clone.call(this);                                                                  // 564\n            clone._data = this._data.clone();                                                                   // 565\n                                                                                                                // 566\n            return clone;                                                                                       // 567\n        },                                                                                                      // 568\n                                                                                                                // 569\n        _minBufferSize: 0                                                                                       // 570\n    });                                                                                                         // 571\n                                                                                                                // 572\n    /**                                                                                                         // 573\n     * Abstract hasher template.                                                                                // 574\n     *                                                                                                          // 575\n     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)  // 576\n     */                                                                                                         // 577\n    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({                                                 // 578\n        /**                                                                                                     // 579\n         * Configuration options.                                                                               // 580\n         */                                                                                                     // 581\n        cfg: Base.extend(),                                                                                     // 582\n                                                                                                                // 583\n        /**                                                                                                     // 584\n         * Initializes a newly created hasher.                                                                  // 585\n         *                                                                                                      // 586\n         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.           // 587\n         *                                                                                                      // 588\n         * @example                                                                                             // 589\n         *                                                                                                      // 590\n         *     var hasher = CryptoJS.algo.SHA256.create();                                                      // 591\n         */                                                                                                     // 592\n        init: function (cfg) {                                                                                  // 593\n            // Apply config defaults                                                                            // 594\n            this.cfg = this.cfg.extend(cfg);                                                                    // 595\n                                                                                                                // 596\n            // Set initial values                                                                               // 597\n            this.reset();                                                                                       // 598\n        },                                                                                                      // 599\n                                                                                                                // 600\n        /**                                                                                                     // 601\n         * Resets this hasher to its initial state.                                                             // 602\n         *                                                                                                      // 603\n         * @example                                                                                             // 604\n         *                                                                                                      // 605\n         *     hasher.reset();                                                                                  // 606\n         */                                                                                                     // 607\n        reset: function () {                                                                                    // 608\n            // Reset data buffer                                                                                // 609\n            BufferedBlockAlgorithm.reset.call(this);                                                            // 610\n                                                                                                                // 611\n            // Perform concrete-hasher logic                                                                    // 612\n            this._doReset();                                                                                    // 613\n        },                                                                                                      // 614\n                                                                                                                // 615\n        /**                                                                                                     // 616\n         * Updates this hasher with a message.                                                                  // 617\n         *                                                                                                      // 618\n         * @param {WordArray|string} messageUpdate The message to append.                                       // 619\n         *                                                                                                      // 620\n         * @return {Hasher} This hasher.                                                                        // 621\n         *                                                                                                      // 622\n         * @example                                                                                             // 623\n         *                                                                                                      // 624\n         *     hasher.update('message');                                                                        // 625\n         *     hasher.update(wordArray);                                                                        // 626\n         */                                                                                                     // 627\n        update: function (messageUpdate) {                                                                      // 628\n            // Append                                                                                           // 629\n            this._append(messageUpdate);                                                                        // 630\n                                                                                                                // 631\n            // Update the hash                                                                                  // 632\n            this._process();                                                                                    // 633\n                                                                                                                // 634\n            // Chainable                                                                                        // 635\n            return this;                                                                                        // 636\n        },                                                                                                      // 637\n                                                                                                                // 638\n        /**                                                                                                     // 639\n         * Finalizes the hash computation.                                                                      // 640\n         * Note that the finalize operation is effectively a destructive, read-once operation.                  // 641\n         *                                                                                                      // 642\n         * @param {WordArray|string} messageUpdate (Optional) A final message update.                           // 643\n         *                                                                                                      // 644\n         * @return {WordArray} The hash.                                                                        // 645\n         *                                                                                                      // 646\n         * @example                                                                                             // 647\n         *                                                                                                      // 648\n         *     var hash = hasher.finalize();                                                                    // 649\n         *     var hash = hasher.finalize('message');                                                           // 650\n         *     var hash = hasher.finalize(wordArray);                                                           // 651\n         */                                                                                                     // 652\n        finalize: function (messageUpdate) {                                                                    // 653\n            // Final message update                                                                             // 654\n            if (messageUpdate) {                                                                                // 655\n                this._append(messageUpdate);                                                                    // 656\n            }                                                                                                   // 657\n                                                                                                                // 658\n            // Perform concrete-hasher logic                                                                    // 659\n            var hash = this._doFinalize();                                                                      // 660\n                                                                                                                // 661\n            return hash;                                                                                        // 662\n        },                                                                                                      // 663\n                                                                                                                // 664\n        blockSize: 512/32,                                                                                      // 665\n                                                                                                                // 666\n        /**                                                                                                     // 667\n         * Creates a shortcut function to a hasher's object interface.                                          // 668\n         *                                                                                                      // 669\n         * @param {Hasher} hasher The hasher to create a helper for.                                            // 670\n         *                                                                                                      // 671\n         * @return {Function} The shortcut function.                                                            // 672\n         *                                                                                                      // 673\n         * @static                                                                                              // 674\n         *                                                                                                      // 675\n         * @example                                                                                             // 676\n         *                                                                                                      // 677\n         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);                            // 678\n         */                                                                                                     // 679\n        _createHelper: function (hasher) {                                                                      // 680\n            return function (message, cfg) {                                                                    // 681\n                return new hasher.init(cfg).finalize(message);                                                  // 682\n            };                                                                                                  // 683\n        },                                                                                                      // 684\n                                                                                                                // 685\n        /**                                                                                                     // 686\n         * Creates a shortcut function to the HMAC's object interface.                                          // 687\n         *                                                                                                      // 688\n         * @param {Hasher} hasher The hasher to use in this HMAC helper.                                        // 689\n         *                                                                                                      // 690\n         * @return {Function} The shortcut function.                                                            // 691\n         *                                                                                                      // 692\n         * @static                                                                                              // 693\n         *                                                                                                      // 694\n         * @example                                                                                             // 695\n         *                                                                                                      // 696\n         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);                    // 697\n         */                                                                                                     // 698\n        _createHmacHelper: function (hasher) {                                                                  // 699\n            return function (message, key) {                                                                    // 700\n                return new C_algo.HMAC.init(hasher, key).finalize(message);                                     // 701\n            };                                                                                                  // 702\n        }                                                                                                       // 703\n    });                                                                                                         // 704\n                                                                                                                // 705\n    /**                                                                                                         // 706\n     * Algorithm namespace.                                                                                     // 707\n     */                                                                                                         // 708\n    var C_algo = C.algo = {};                                                                                   // 709\n                                                                                                                // 710\n    return C;                                                                                                   // 711\n}(Math));                                                                                                       // 712\n                                                                                                                // 713\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}