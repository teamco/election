{"version":3,"sources":["meteor://ðŸ’»app/packages/jparker_crypto-md5/packages/jparker_crypto-md5.js"],"names":[],"mappingsfile":"/packages/jparker_crypto-md5.js","sourcesContent":["(function () {\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// packages/jparker:crypto-md5/lib/md5.js                                       //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\n/*                                                                              // 1\nCryptoJS v3.1.2                                                                 // 2\ncode.google.com/p/crypto-js                                                     // 3\n(c) 2009-2013 by Jeff Mott. All rights reserved.                                // 4\ncode.google.com/p/crypto-js/wiki/License                                        // 5\n*/                                                                              // 6\n(function (Math) {                                                              // 7\n    // Shortcuts                                                                // 8\n    var C = CryptoJS;                                                           // 9\n    var C_lib = C.lib;                                                          // 10\n    var WordArray = C_lib.WordArray;                                            // 11\n    var Hasher = C_lib.Hasher;                                                  // 12\n    var C_algo = C.algo;                                                        // 13\n                                                                                // 14\n    // Constants table                                                          // 15\n    var T = [];                                                                 // 16\n                                                                                // 17\n    // Compute constants                                                        // 18\n    (function () {                                                              // 19\n        for (var i = 0; i < 64; i++) {                                          // 20\n            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;               // 21\n        }                                                                       // 22\n    }());                                                                       // 23\n                                                                                // 24\n    /**                                                                         // 25\n     * MD5 hash algorithm.                                                      // 26\n     */                                                                         // 27\n    var MD5 = C_algo.MD5 = Hasher.extend({                                      // 28\n        _doReset: function () {                                                 // 29\n            this._hash = new WordArray.init([                                   // 30\n                0x67452301, 0xefcdab89,                                         // 31\n                0x98badcfe, 0x10325476                                          // 32\n            ]);                                                                 // 33\n        },                                                                      // 34\n                                                                                // 35\n        _doProcessBlock: function (M, offset) {                                 // 36\n            // Swap endian                                                      // 37\n            for (var i = 0; i < 16; i++) {                                      // 38\n                // Shortcuts                                                    // 39\n                var offset_i = offset + i;                                      // 40\n                var M_offset_i = M[offset_i];                                   // 41\n                                                                                // 42\n                M[offset_i] = (                                                 // 43\n                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) | // 44\n                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)   // 45\n                );                                                              // 46\n            }                                                                   // 47\n                                                                                // 48\n            // Shortcuts                                                        // 49\n            var H = this._hash.words;                                           // 50\n                                                                                // 51\n            var M_offset_0  = M[offset + 0];                                    // 52\n            var M_offset_1  = M[offset + 1];                                    // 53\n            var M_offset_2  = M[offset + 2];                                    // 54\n            var M_offset_3  = M[offset + 3];                                    // 55\n            var M_offset_4  = M[offset + 4];                                    // 56\n            var M_offset_5  = M[offset + 5];                                    // 57\n            var M_offset_6  = M[offset + 6];                                    // 58\n            var M_offset_7  = M[offset + 7];                                    // 59\n            var M_offset_8  = M[offset + 8];                                    // 60\n            var M_offset_9  = M[offset + 9];                                    // 61\n            var M_offset_10 = M[offset + 10];                                   // 62\n            var M_offset_11 = M[offset + 11];                                   // 63\n            var M_offset_12 = M[offset + 12];                                   // 64\n            var M_offset_13 = M[offset + 13];                                   // 65\n            var M_offset_14 = M[offset + 14];                                   // 66\n            var M_offset_15 = M[offset + 15];                                   // 67\n                                                                                // 68\n            // Working varialbes                                                // 69\n            var a = H[0];                                                       // 70\n            var b = H[1];                                                       // 71\n            var c = H[2];                                                       // 72\n            var d = H[3];                                                       // 73\n                                                                                // 74\n            // Computation                                                      // 75\n            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);                          // 76\n            d = FF(d, a, b, c, M_offset_1,  12, T[1]);                          // 77\n            c = FF(c, d, a, b, M_offset_2,  17, T[2]);                          // 78\n            b = FF(b, c, d, a, M_offset_3,  22, T[3]);                          // 79\n            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);                          // 80\n            d = FF(d, a, b, c, M_offset_5,  12, T[5]);                          // 81\n            c = FF(c, d, a, b, M_offset_6,  17, T[6]);                          // 82\n            b = FF(b, c, d, a, M_offset_7,  22, T[7]);                          // 83\n            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);                          // 84\n            d = FF(d, a, b, c, M_offset_9,  12, T[9]);                          // 85\n            c = FF(c, d, a, b, M_offset_10, 17, T[10]);                         // 86\n            b = FF(b, c, d, a, M_offset_11, 22, T[11]);                         // 87\n            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);                         // 88\n            d = FF(d, a, b, c, M_offset_13, 12, T[13]);                         // 89\n            c = FF(c, d, a, b, M_offset_14, 17, T[14]);                         // 90\n            b = FF(b, c, d, a, M_offset_15, 22, T[15]);                         // 91\n                                                                                // 92\n            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);                         // 93\n            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);                         // 94\n            c = GG(c, d, a, b, M_offset_11, 14, T[18]);                         // 95\n            b = GG(b, c, d, a, M_offset_0,  20, T[19]);                         // 96\n            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);                         // 97\n            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);                         // 98\n            c = GG(c, d, a, b, M_offset_15, 14, T[22]);                         // 99\n            b = GG(b, c, d, a, M_offset_4,  20, T[23]);                         // 100\n            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);                         // 101\n            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);                         // 102\n            c = GG(c, d, a, b, M_offset_3,  14, T[26]);                         // 103\n            b = GG(b, c, d, a, M_offset_8,  20, T[27]);                         // 104\n            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);                         // 105\n            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);                         // 106\n            c = GG(c, d, a, b, M_offset_7,  14, T[30]);                         // 107\n            b = GG(b, c, d, a, M_offset_12, 20, T[31]);                         // 108\n                                                                                // 109\n            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);                         // 110\n            d = HH(d, a, b, c, M_offset_8,  11, T[33]);                         // 111\n            c = HH(c, d, a, b, M_offset_11, 16, T[34]);                         // 112\n            b = HH(b, c, d, a, M_offset_14, 23, T[35]);                         // 113\n            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);                         // 114\n            d = HH(d, a, b, c, M_offset_4,  11, T[37]);                         // 115\n            c = HH(c, d, a, b, M_offset_7,  16, T[38]);                         // 116\n            b = HH(b, c, d, a, M_offset_10, 23, T[39]);                         // 117\n            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);                         // 118\n            d = HH(d, a, b, c, M_offset_0,  11, T[41]);                         // 119\n            c = HH(c, d, a, b, M_offset_3,  16, T[42]);                         // 120\n            b = HH(b, c, d, a, M_offset_6,  23, T[43]);                         // 121\n            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);                         // 122\n            d = HH(d, a, b, c, M_offset_12, 11, T[45]);                         // 123\n            c = HH(c, d, a, b, M_offset_15, 16, T[46]);                         // 124\n            b = HH(b, c, d, a, M_offset_2,  23, T[47]);                         // 125\n                                                                                // 126\n            a = II(a, b, c, d, M_offset_0,  6,  T[48]);                         // 127\n            d = II(d, a, b, c, M_offset_7,  10, T[49]);                         // 128\n            c = II(c, d, a, b, M_offset_14, 15, T[50]);                         // 129\n            b = II(b, c, d, a, M_offset_5,  21, T[51]);                         // 130\n            a = II(a, b, c, d, M_offset_12, 6,  T[52]);                         // 131\n            d = II(d, a, b, c, M_offset_3,  10, T[53]);                         // 132\n            c = II(c, d, a, b, M_offset_10, 15, T[54]);                         // 133\n            b = II(b, c, d, a, M_offset_1,  21, T[55]);                         // 134\n            a = II(a, b, c, d, M_offset_8,  6,  T[56]);                         // 135\n            d = II(d, a, b, c, M_offset_15, 10, T[57]);                         // 136\n            c = II(c, d, a, b, M_offset_6,  15, T[58]);                         // 137\n            b = II(b, c, d, a, M_offset_13, 21, T[59]);                         // 138\n            a = II(a, b, c, d, M_offset_4,  6,  T[60]);                         // 139\n            d = II(d, a, b, c, M_offset_11, 10, T[61]);                         // 140\n            c = II(c, d, a, b, M_offset_2,  15, T[62]);                         // 141\n            b = II(b, c, d, a, M_offset_9,  21, T[63]);                         // 142\n                                                                                // 143\n            // Intermediate hash value                                          // 144\n            H[0] = (H[0] + a) | 0;                                              // 145\n            H[1] = (H[1] + b) | 0;                                              // 146\n            H[2] = (H[2] + c) | 0;                                              // 147\n            H[3] = (H[3] + d) | 0;                                              // 148\n        },                                                                      // 149\n                                                                                // 150\n        _doFinalize: function () {                                              // 151\n            // Shortcuts                                                        // 152\n            var data = this._data;                                              // 153\n            var dataWords = data.words;                                         // 154\n                                                                                // 155\n            var nBitsTotal = this._nDataBytes * 8;                              // 156\n            var nBitsLeft = data.sigBytes * 8;                                  // 157\n                                                                                // 158\n            // Add padding                                                      // 159\n            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);        // 160\n                                                                                // 161\n            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);             // 162\n            var nBitsTotalL = nBitsTotal;                                       // 163\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (                 // 164\n                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |   // 165\n                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)     // 166\n            );                                                                  // 167\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (                 // 168\n                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |   // 169\n                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)     // 170\n            );                                                                  // 171\n                                                                                // 172\n            data.sigBytes = (dataWords.length + 1) * 4;                         // 173\n                                                                                // 174\n            // Hash final blocks                                                // 175\n            this._process();                                                    // 176\n                                                                                // 177\n            // Shortcuts                                                        // 178\n            var hash = this._hash;                                              // 179\n            var H = hash.words;                                                 // 180\n                                                                                // 181\n            // Swap endian                                                      // 182\n            for (var i = 0; i < 4; i++) {                                       // 183\n                // Shortcut                                                     // 184\n                var H_i = H[i];                                                 // 185\n                                                                                // 186\n                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |            // 187\n                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);             // 188\n            }                                                                   // 189\n                                                                                // 190\n            // Return final computed hash                                       // 191\n            return hash;                                                        // 192\n        },                                                                      // 193\n                                                                                // 194\n        clone: function () {                                                    // 195\n            var clone = Hasher.clone.call(this);                                // 196\n            clone._hash = this._hash.clone();                                   // 197\n                                                                                // 198\n            return clone;                                                       // 199\n        }                                                                       // 200\n    });                                                                         // 201\n                                                                                // 202\n    function FF(a, b, c, d, x, s, t) {                                          // 203\n        var n = a + ((b & c) | (~b & d)) + x + t;                               // 204\n        return ((n << s) | (n >>> (32 - s))) + b;                               // 205\n    }                                                                           // 206\n                                                                                // 207\n    function GG(a, b, c, d, x, s, t) {                                          // 208\n        var n = a + ((b & d) | (c & ~d)) + x + t;                               // 209\n        return ((n << s) | (n >>> (32 - s))) + b;                               // 210\n    }                                                                           // 211\n                                                                                // 212\n    function HH(a, b, c, d, x, s, t) {                                          // 213\n        var n = a + (b ^ c ^ d) + x + t;                                        // 214\n        return ((n << s) | (n >>> (32 - s))) + b;                               // 215\n    }                                                                           // 216\n                                                                                // 217\n    function II(a, b, c, d, x, s, t) {                                          // 218\n        var n = a + (c ^ (b | ~d)) + x + t;                                     // 219\n        return ((n << s) | (n >>> (32 - s))) + b;                               // 220\n    }                                                                           // 221\n                                                                                // 222\n    /**                                                                         // 223\n     * Shortcut function to the hasher's object interface.                      // 224\n     *                                                                          // 225\n     * @param {WordArray|string} message The message to hash.                   // 226\n     *                                                                          // 227\n     * @return {WordArray} The hash.                                            // 228\n     *                                                                          // 229\n     * @static                                                                  // 230\n     *                                                                          // 231\n     * @example                                                                 // 232\n     *                                                                          // 233\n     *     var hash = CryptoJS.MD5('message');                                  // 234\n     *     var hash = CryptoJS.MD5(wordArray);                                  // 235\n     */                                                                         // 236\n    C.MD5 = Hasher._createHelper(MD5);                                          // 237\n                                                                                // 238\n    /**                                                                         // 239\n     * Shortcut function to the HMAC's object interface.                        // 240\n     *                                                                          // 241\n     * @param {WordArray|string} message The message to hash.                   // 242\n     * @param {WordArray|string} key The secret key.                            // 243\n     *                                                                          // 244\n     * @return {WordArray} The HMAC.                                            // 245\n     *                                                                          // 246\n     * @static                                                                  // 247\n     *                                                                          // 248\n     * @example                                                                 // 249\n     *                                                                          // 250\n     *     var hmac = CryptoJS.HmacMD5(message, key);                           // 251\n     */                                                                         // 252\n    C.HmacMD5 = Hasher._createHmacHelper(MD5);                                  // 253\n}(Math));                                                                       // 254\n                                                                                // 255\n//////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}