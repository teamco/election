[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar Template = Package.templating.Template;\nvar _ = Package.underscore._;\nvar Mongo = Package.mongo.Mongo;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar Spacebars = Package.spacebars.Spacebars;\nvar HTML = Package.htmljs.HTML;\n\n/* Package-scope variables */\nvar Notifications;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/gfk_notifications/globals.js                                                                             //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n/* global Notifications:true */                                                                                      // 1\n/*jshint strict: false */                                                                                            // 2\n                                                                                                                     // 3\n//The purpose of this file is to be the one file where globals are declared.  This let's all other files use strict.\n// More info: https://github.com/meteor/meteor/issues/2437                                                           // 5\n                                                                                                                     // 6\n                                                                                                                     // 7\nNotifications = {};                                                                                                  // 8\n                                                                                                                     // 9\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/gfk_notifications/template.notifications.js                                                              //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n                                                                                                                     // 1\nTemplate.__checkName(\"notifications\");                                                                               // 2\nTemplate[\"notifications\"] = new Template(\"Template.notifications\", (function() {                                     // 3\n  var view = this;                                                                                                   // 4\n  return HTML.UL({                                                                                                   // 5\n    \"class\": \"notifications\"                                                                                         // 6\n  }, \"\\n       \", Blaze.Each(function() {                                                                            // 7\n    return Spacebars.call(view.lookup(\"notifications\"));                                                             // 8\n  }, function() {                                                                                                    // 9\n    return [ \"\\n           \", Spacebars.include(view.lookupTemplate(\"notification\")), \"\\n       \" ];                 // 10\n  }), \"\\n    \");                                                                                                     // 11\n}));                                                                                                                 // 12\n                                                                                                                     // 13\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/gfk_notifications/notifications.js                                                                       //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n/* global Notifications:true */                                                                                      // 1\n\"use strict\";                                                                                                        // 2\n                                                                                                                     // 3\nvar constructor = (function() {                                                                                      // 4\n    /***                                                                                                             // 5\n     * Creates an instance of Notifications                                                                          // 6\n     * @constructor                                                                                                  // 7\n     */                                                                                                              // 8\n    function Notifications(settings) {                                                                               // 9\n        settings = settings || {};                                                                                   // 10\n        _.defaults(settings, this.defaultSettings);                                                                  // 11\n                                                                                                                     // 12\n        this._notificationsCollection = new Mongo.Collection(null);                                                  // 13\n        this._notificationTimeout = undefined;                                                                       // 14\n        this.settings = settings;                                                                                    // 15\n    }                                                                                                                // 16\n                                                                                                                     // 17\n    /***                                                                                                             // 18\n     * Adds a notification                                                                                           // 19\n     * @param {String} title of the notification                                                                     // 20\n     * @param {String} message of the notification                                                                   // 21\n     * @param {Object}  [options={}] Options object to use for notification                                          // 22\n     * @param {String}  [options.type=defaultOptions.type] the type of the notification                              // 23\n     * @param {Boolean} [options.userCloseable=defaultOptions.userCloseable] Whether the notification is user closeable\n     * @param {Boolean} [options.clickBodyToClose=defaultOptions.clickBodyToClose] Whether the notification can be closed by clicking anywhere within its body. If turned off then the close button must clicked.\n     * @param {Function} [options.closed] Call this handler (passing data context) on notification close             // 26\n     * @param {Function} [options.timeout] No. of milliseconds to show this notification for.                        // 27\n     */                                                                                                              // 28\n    Notifications.prototype.addNotification = function (title, message, options) {                                   // 29\n        options = options || {};                                                                                     // 30\n        _.defaults(options, this.getDefaultOptions(options.type));                                                   // 31\n                                                                                                                     // 32\n        var notification = {};                                                                                       // 33\n        notification.title = title;                                                                                  // 34\n        notification.message = message;                                                                              // 35\n        notification.type = options.type;                                                                            // 36\n        notification.userCloseable = options.userCloseable;                                                          // 37\n        notification.clickBodyToClose = options.clickBodyToClose;                                                    // 38\n        notification.closed = options.closed;                                                                        // 39\n                                                                                                                     // 40\n        if (options.timeout) {                                                                                       // 41\n            notification.expires = new Date().getTime() + options.timeout;                                           // 42\n        }                                                                                                            // 43\n                                                                                                                     // 44\n        return this._add(notification);                                                                              // 45\n    };                                                                                                               // 46\n                                                                                                                     // 47\n    /***                                                                                                             // 48\n     * Wraps addNotification, sets type to error                                                                     // 49\n     * @param {String} title of the notification                                                                     // 50\n     * @param {String} message of the notification                                                                   // 51\n     * @param {Object}  [options={}] Options object to use for notification                                          // 52\n     * @param {Boolean} [options.userCloseable=defaultOptions.userCloseable] Whether the notification is user closeable\n     * @param {Function} [options.closed] Call this handler (passing data context) on notification close             // 54\n     * @returns {*}                                                                                                  // 55\n     */                                                                                                              // 56\n    Notifications.prototype.error = function (title, message, options) {                                             // 57\n        options = options || {};                                                                                     // 58\n        options.type = this.TYPES.ERROR;                                                                             // 59\n        return this.addNotification(title, message, options);                                                        // 60\n    };                                                                                                               // 61\n                                                                                                                     // 62\n    /***                                                                                                             // 63\n     * Wraps addNotification, sets type to warning                                                                   // 64\n     * @param {String} title of the notification                                                                     // 65\n     * @param {String} message of the notification                                                                   // 66\n     * @param {Object}  [options={}] Options object to use for notification                                          // 67\n     * @param {Boolean} [options.userCloseable=defaultOptions.userCloseable] Whether the notification is user closeable\n     * @param {Function} [options.closed] Call this handler (passing data context) on notification close             // 69\n     * @returns {*}                                                                                                  // 70\n     */                                                                                                              // 71\n    Notifications.prototype.warn = function (title, message, options) {                                              // 72\n        options = options || {};                                                                                     // 73\n        options.type = this.TYPES.WARNING;                                                                           // 74\n        return this.addNotification(title, message, options);                                                        // 75\n    };                                                                                                               // 76\n                                                                                                                     // 77\n    /***                                                                                                             // 78\n     * Wraps addNotification, sets type to info                                                                      // 79\n     * @param {String} title of the notification                                                                     // 80\n     * @param {String} message of the notification                                                                   // 81\n     * @param {Object}  [options={}] Options object to use for notification                                          // 82\n     * @param {Boolean} [options.userCloseable=defaultOptions.userCloseable] Whether the notification is user closeable\n     * @param {Function} [options.closed] Call this handler (passing data context) on notification close             // 84\n     * @returns {*}                                                                                                  // 85\n     */                                                                                                              // 86\n    Notifications.prototype.info = function (title, message, options) {                                              // 87\n        options = options || {};                                                                                     // 88\n        options.type = this.TYPES.INFO;                                                                              // 89\n        return this.addNotification(title, message, options);                                                        // 90\n    };                                                                                                               // 91\n                                                                                                                     // 92\n    /***                                                                                                             // 93\n     * Wraps addNotification, sets type to success                                                                   // 94\n     * @param {String} title of the notification                                                                     // 95\n     * @param {String} message of the notification                                                                   // 96\n     * @param {Object}  [options={}] Options object to use for notification                                          // 97\n     * @param {Boolean} [options.userCloseable=defaultOptions.userCloseable] Whether the notification is user closeable\n     * @param {Function} [options.closed] Call this handler (passing data context) on notification close             // 99\n     * @returns {*}                                                                                                  // 100\n     */                                                                                                              // 101\n    Notifications.prototype.success = function (title, message, options) {                                           // 102\n        options = options || {};                                                                                     // 103\n        options.type = this.TYPES.SUCCESS;                                                                           // 104\n        return this.addNotification(title, message, options);                                                        // 105\n    };                                                                                                               // 106\n                                                                                                                     // 107\n    /***                                                                                                             // 108\n     * Returns the NotificationsCollection Meteor.Collection                                                         // 109\n     * @returns {object} NotificationsCollection                                                                     // 110\n     * @private                                                                                                      // 111\n     */                                                                                                              // 112\n    Notifications.prototype._getNotificationsCollection = function () {                                              // 113\n        return this._notificationsCollection;                                                                        // 114\n    };                                                                                                               // 115\n                                                                                                                     // 116\n    /***                                                                                                             // 117\n     * Does the actual add to the collection. And creates a Timeout if necessary.                                    // 118\n     * @param {object} notification the object to be inserted into the collection                                    // 119\n     * @private                                                                                                      // 120\n     */                                                                                                              // 121\n    Notifications.prototype._add = function (notification) {                                                         // 122\n        var notificationsCollection = this._getNotificationsCollection();                                            // 123\n        var firstExpiration = this._getFirstExpiredTimestamp();                                                      // 124\n        var notificationID = notificationsCollection.insert(notification);                                           // 125\n                                                                                                                     // 126\n        if (notification.expires) {                                                                                  // 127\n            if (this._notificationTimeout) {                                                                         // 128\n                if (firstExpiration > notification.expires) {                                                        // 129\n                    Meteor.clearTimeout(this._notificationTimeout);                                                  // 130\n                    this._notificationTimeout = undefined;                                                           // 131\n                }                                                                                                    // 132\n            }                                                                                                        // 133\n                                                                                                                     // 134\n            if (!this._notificationTimeout) {                                                                        // 135\n                this._createTimeout();                                                                               // 136\n            }                                                                                                        // 137\n        }                                                                                                            // 138\n                                                                                                                     // 139\n        return notificationID;                                                                                       // 140\n    };                                                                                                               // 141\n                                                                                                                     // 142\n    /***                                                                                                             // 143\n     * Returns the timestamp of the notification from the notificationsCollection that is first to expire            // 144\n     * @returns {string} first to expire timestamp                                                                   // 145\n     * @private                                                                                                      // 146\n     */                                                                                                              // 147\n    Notifications.prototype._getFirstExpiredTimestamp = function () {                                                // 148\n        var notificationsCollection = this._getNotificationsCollection();                                            // 149\n                                                                                                                     // 150\n        var firstNotification = notificationsCollection.findOne({expires: {$gt: 0}}, {sort:[['expires', 'asc']]}, { reactive: false });\n        var firstExpiredTimestamp = firstNotification ? firstNotification.expires : 0;                               // 152\n                                                                                                                     // 153\n        return firstExpiredTimestamp;                                                                                // 154\n    };                                                                                                               // 155\n                                                                                                                     // 156\n    /***                                                                                                             // 157\n     * creates a timeout for the first to expire notification.                                                       // 158\n     * @private                                                                                                      // 159\n     */                                                                                                              // 160\n    Notifications.prototype._createTimeout = function () {                                                           // 161\n        var self = this;                                                                                             // 162\n        var firstExpiration = this._getFirstExpiredTimestamp();                                                      // 163\n                                                                                                                     // 164\n        if (firstExpiration) {                                                                                       // 165\n            this._notificationTimeout = Meteor.setTimeout(function () {                                              // 166\n                self.remove({expires: {$lte: firstExpiration}});                                                     // 167\n                self._createTimeout();                                                                               // 168\n            }, firstExpiration - new Date().getTime());                                                              // 169\n        } else {                                                                                                     // 170\n            this._notificationTimeout = undefined;                                                                   // 171\n        }                                                                                                            // 172\n    };                                                                                                               // 173\n                                                                                                                     // 174\n    /***                                                                                                             // 175\n     * gets the proper notification defaults based on type                                                           // 176\n     * @param {String} notificationType the type of the notification for which to get the defaultOptions             // 177\n     */                                                                                                              // 178\n    Notifications.prototype.getDefaultOptions = function (notificationType) {                                        // 179\n        return this.defaultOptionsByType[notificationType] || this.defaultOptions;                                   // 180\n    };                                                                                                               // 181\n                                                                                                                     // 182\n                                                                                                                     // 183\n    /***                                                                                                             // 184\n     * Gets the class containing the color for the notification                                                      // 185\n     * @param {String} notificationType                                                                              // 186\n     * @returns {string} classname to use for the notification                                                       // 187\n     */                                                                                                              // 188\n    Notifications.prototype.getNotificationClass = function (notificationType) {                                     // 189\n        var notificationClass;                                                                                       // 190\n                                                                                                                     // 191\n        _.each(this.TYPES,  function (value, key) {                                                                  // 192\n            if(value === notificationType) {                                                                         // 193\n                notificationClass = key.toLowerCase();                                                               // 194\n            }                                                                                                        // 195\n        });                                                                                                          // 196\n                                                                                                                     // 197\n        return notificationClass;                                                                                    // 198\n    };                                                                                                               // 199\n                                                                                                                     // 200\n    /***                                                                                                             // 201\n     * Removes the notifications matching the selector                                                               // 202\n     * @param selector                                                                                               // 203\n     */                                                                                                              // 204\n    Notifications.prototype.remove = function (selector) {                                                           // 205\n        this._getNotificationsCollection().remove(selector);                                                         // 206\n                                                                                                                     // 207\n        if (this._notificationTimeout) {                                                                             // 208\n            Meteor.clearTimeout(this._notificationTimeout);                                                          // 209\n            this._notificationTimeout = undefined;                                                                   // 210\n            this._createTimeout();                                                                                   // 211\n        }                                                                                                            // 212\n    };                                                                                                               // 213\n                                                                                                                     // 214\n    /***                                                                                                             // 215\n     * Stores constants for the different notification types                                                         // 216\n     * @type {{ERROR: number, WARNING: number, INFO: number, SUCCESS: number}}                                       // 217\n     */                                                                                                              // 218\n    Notifications.prototype.TYPES = {                                                                                // 219\n        'ERROR': 1,                                                                                                  // 220\n        'WARNING': 2,                                                                                                // 221\n        'INFO': 3,                                                                                                   // 222\n        'SUCCESS': 4                                                                                                 // 223\n    };                                                                                                               // 224\n                                                                                                                     // 225\n    /***                                                                                                             // 226\n     * Object with the default options for the notifications                                                         // 227\n     * @type {{type: number, userCloseable: boolean, timeout: number, closed: function}}                             // 228\n     */                                                                                                              // 229\n    Notifications.prototype.defaultOptions = {                                                                       // 230\n        type: Notifications.prototype.TYPES.INFO,                                                                    // 231\n        userCloseable: true,                                                                                         // 232\n        clickBodyToClose: true,                                                                                      // 233\n        timeout: 0                                                                                                   // 234\n    };                                                                                                               // 235\n                                                                                                                     // 236\n    /***                                                                                                             // 237\n     * Object with the default options for the notifications for specific types                                      // 238\n     * @type {{type: number, userCloseable: boolean, timeout: number, closed: function}}                             // 239\n     */                                                                                                              // 240\n    Notifications.prototype.defaultOptionsByType = {};                                                               // 241\n                                                                                                                     // 242\n                                                                                                                     // 243\n    Notifications.prototype.defaultSettings = {                                                                      // 244\n        hideAnimationProperties: {                                                                                   // 245\n            height: 0,                                                                                               // 246\n            opacity: 0,                                                                                              // 247\n            paddingTop: 0,                                                                                           // 248\n            paddingBottom: 0,                                                                                        // 249\n            marginTop: 0                                                                                             // 250\n        },                                                                                                           // 251\n        animationSpeed: 400                                                                                          // 252\n    };                                                                                                               // 253\n                                                                                                                     // 254\n    return Notifications;                                                                                            // 255\n})();                                                                                                                // 256\n                                                                                                                     // 257\nNotifications = new constructor();                                                                                   // 258\n                                                                                                                     // 259\nTemplate.notifications.helpers({                                                                                     // 260\n    notifications: function() {                                                                                      // 261\n        return Notifications._getNotificationsCollection().find();                                                   // 262\n    }                                                                                                                // 263\n});                                                                                                                  // 264\n                                                                                                                     // 265\nTemplate.notifications.rendered = function () {                                                                      // 266\n    this.firstNode._uihooks = {                                                                                      // 267\n        insertElement: function (node, next) {                                                                       // 268\n            var settings = Notifications.settings;                                                                   // 269\n            $(node)                                                                                                  // 270\n                .addClass('notificationHidden')                                                                      // 271\n                .insertBefore(next)                                                                                  // 272\n                .fadeIn({duration: settings.animationSpeed})                                                         // 273\n                .promise()                                                                                           // 274\n                .done(function () {                                                                                  // 275\n                    $(this).removeClass('notificationHidden');                                                       // 276\n                });                                                                                                  // 277\n        },                                                                                                           // 278\n        removeElement: function (node) {                                                                             // 279\n            var settings = Notifications.settings;                                                                   // 280\n            $(node).animate(settings.hideAnimationProperties, {                                                      // 281\n                duration: settings.animationSpeed,                                                                   // 282\n                complete: function () {                                                                              // 283\n                    $(node).remove();                                                                                // 284\n                }});                                                                                                 // 285\n        }                                                                                                            // 286\n    };                                                                                                               // 287\n};                                                                                                                   // 288\n                                                                                                                     // 289\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/gfk_notifications/template.notification.js                                                               //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n                                                                                                                     // 1\nTemplate.__checkName(\"notification\");                                                                                // 2\nTemplate[\"notification\"] = new Template(\"Template.notification\", (function() {                                       // 3\n  var view = this;                                                                                                   // 4\n  return HTML.LI({                                                                                                   // 5\n    \"class\": function() {                                                                                            // 6\n      return [ \"notification \", Spacebars.mustache(view.lookup(\"notificationColor\"), view.lookup(\"type\")), \" \", Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"userCloseable\"));                                                         // 8\n      }, function() {                                                                                                // 9\n        return \"closeable\";                                                                                          // 10\n      }) ];                                                                                                          // 11\n    }                                                                                                                // 12\n  }, \"\\n         \", HTML.DIV({                                                                                       // 13\n    \"class\": \"title\"                                                                                                 // 14\n  }, Blaze.View(\"lookup:title\", function() {                                                                         // 15\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"title\")));                                              // 16\n  })), \"\\n         \", HTML.DIV({                                                                                     // 17\n    \"class\": \"message\"                                                                                               // 18\n  }, Blaze.View(\"lookup:message\", function() {                                                                       // 19\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"message\")));                                            // 20\n  })), \"\\n         \", Blaze.If(function() {                                                                          // 21\n    return Spacebars.call(view.lookup(\"userCloseable\"));                                                             // 22\n  }, function() {                                                                                                    // 23\n    return [ \"\\n                 \", HTML.DIV({                                                                       // 24\n      \"class\": \"closeButton\"                                                                                         // 25\n    }, HTML.CharRef({                                                                                                // 26\n      html: \"&times;\",                                                                                               // 27\n      str: \"×\"                                                                                                       // 28\n    })), \"\\n         \" ];                                                                                            // 29\n  }), \"\\n     \");                                                                                                    // 30\n}));                                                                                                                 // 31\n                                                                                                                     // 32\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/gfk_notifications/notification.js                                                                        //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n'use strict';                                                                                                        // 1\n                                                                                                                     // 2\nTemplate.notification.helpers({                                                                                      // 3\n    notificationColor: function(notificationType) {                                                                  // 4\n        return Notifications.getNotificationClass(notificationType);                                                 // 5\n    }                                                                                                                // 6\n});                                                                                                                  // 7\n                                                                                                                     // 8\nTemplate.notification.events = {                                                                                     // 9\n    'click': function (event) {                                                                                      // 10\n        if (this.userCloseable || this.expires < new Date()) {                                                       // 11\n            // must the user click the close button?                                                                 // 12\n            if (!this.clickBodyToClose && 0 > event.target.className.indexOf('closeButton')) {                       // 13\n                return;                                                                                              // 14\n            }                                                                                                        // 15\n                                                                                                                     // 16\n            Notifications.remove(this._id);                                                                          // 17\n            if (this.closed) {                                                                                       // 18\n              this.closed(this);                                                                                     // 19\n            }                                                                                                        // 20\n        }                                                                                                            // 21\n    }                                                                                                                // 22\n};                                                                                                                   // 23\n                                                                                                                     // 24\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['gfk:notifications'] = {\n  Notifications: Notifications\n};\n\n})();\n","servePath":"/packages/gfk_notifications.js","sourceMap":{"version":3,"sources":["/packages/gfk_notifications/globals.js","/packages/gfk_notifications/template.notifications.js","/packages/gfk_notifications/notifications.js","/packages/gfk_notifications/template.notification.js","/packages/gfk_notifications/notification.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yH;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0H;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;AChSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0H;;;;;;;;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0H","file":"/packages/gfk_notifications.js","sourcesContent":["/* global Notifications:true */\n/*jshint strict: false */\n\n//The purpose of this file is to be the one file where globals are declared.  This let's all other files use strict.\n// More info: https://github.com/meteor/meteor/issues/2437\n\n\nNotifications = {};\n","\nTemplate.__checkName(\"notifications\");\nTemplate[\"notifications\"] = new Template(\"Template.notifications\", (function() {\n  var view = this;\n  return HTML.UL({\n    \"class\": \"notifications\"\n  }, \"\\n       \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"notifications\"));\n  }, function() {\n    return [ \"\\n           \", Spacebars.include(view.lookupTemplate(\"notification\")), \"\\n       \" ];\n  }), \"\\n    \");\n}));\n","/* global Notifications:true */\n\"use strict\";\n\nvar constructor = (function() {\n    /***\n     * Creates an instance of Notifications\n     * @constructor\n     */\n    function Notifications(settings) {\n        settings = settings || {};\n        _.defaults(settings, this.defaultSettings);\n\n        this._notificationsCollection = new Mongo.Collection(null);\n        this._notificationTimeout = undefined;\n        this.settings = settings;\n    }\n\n    /***\n     * Adds a notification\n     * @param {String} title of the notification\n     * @param {String} message of the notification\n     * @param {Object}  [options={}] Options object to use for notification\n     * @param {String}  [options.type=defaultOptions.type] the type of the notification\n     * @param {Boolean} [options.userCloseable=defaultOptions.userCloseable] Whether the notification is user closeable\n     * @param {Boolean} [options.clickBodyToClose=defaultOptions.clickBodyToClose] Whether the notification can be closed by clicking anywhere within its body. If turned off then the close button must clicked.\n     * @param {Function} [options.closed] Call this handler (passing data context) on notification close\n     * @param {Function} [options.timeout] No. of milliseconds to show this notification for.\n     */\n    Notifications.prototype.addNotification = function (title, message, options) {\n        options = options || {};\n        _.defaults(options, this.getDefaultOptions(options.type));\n\n        var notification = {};\n        notification.title = title;\n        notification.message = message;\n        notification.type = options.type;\n        notification.userCloseable = options.userCloseable;\n        notification.clickBodyToClose = options.clickBodyToClose;\n        notification.closed = options.closed;\n\n        if (options.timeout) {\n            notification.expires = new Date().getTime() + options.timeout;\n        }\n\n        return this._add(notification);\n    };\n\n    /***\n     * Wraps addNotification, sets type to error\n     * @param {String} title of the notification\n     * @param {String} message of the notification\n     * @param {Object}  [options={}] Options object to use for notification\n     * @param {Boolean} [options.userCloseable=defaultOptions.userCloseable] Whether the notification is user closeable\n     * @param {Function} [options.closed] Call this handler (passing data context) on notification close\n     * @returns {*}\n     */\n    Notifications.prototype.error = function (title, message, options) {\n        options = options || {};\n        options.type = this.TYPES.ERROR;\n        return this.addNotification(title, message, options);\n    };\n\n    /***\n     * Wraps addNotification, sets type to warning\n     * @param {String} title of the notification\n     * @param {String} message of the notification\n     * @param {Object}  [options={}] Options object to use for notification\n     * @param {Boolean} [options.userCloseable=defaultOptions.userCloseable] Whether the notification is user closeable\n     * @param {Function} [options.closed] Call this handler (passing data context) on notification close\n     * @returns {*}\n     */\n    Notifications.prototype.warn = function (title, message, options) {\n        options = options || {};\n        options.type = this.TYPES.WARNING;\n        return this.addNotification(title, message, options);\n    };\n\n    /***\n     * Wraps addNotification, sets type to info\n     * @param {String} title of the notification\n     * @param {String} message of the notification\n     * @param {Object}  [options={}] Options object to use for notification\n     * @param {Boolean} [options.userCloseable=defaultOptions.userCloseable] Whether the notification is user closeable\n     * @param {Function} [options.closed] Call this handler (passing data context) on notification close\n     * @returns {*}\n     */\n    Notifications.prototype.info = function (title, message, options) {\n        options = options || {};\n        options.type = this.TYPES.INFO;\n        return this.addNotification(title, message, options);\n    };\n\n    /***\n     * Wraps addNotification, sets type to success\n     * @param {String} title of the notification\n     * @param {String} message of the notification\n     * @param {Object}  [options={}] Options object to use for notification\n     * @param {Boolean} [options.userCloseable=defaultOptions.userCloseable] Whether the notification is user closeable\n     * @param {Function} [options.closed] Call this handler (passing data context) on notification close\n     * @returns {*}\n     */\n    Notifications.prototype.success = function (title, message, options) {\n        options = options || {};\n        options.type = this.TYPES.SUCCESS;\n        return this.addNotification(title, message, options);\n    };\n\n    /***\n     * Returns the NotificationsCollection Meteor.Collection\n     * @returns {object} NotificationsCollection\n     * @private\n     */\n    Notifications.prototype._getNotificationsCollection = function () {\n        return this._notificationsCollection;\n    };\n\n    /***\n     * Does the actual add to the collection. And creates a Timeout if necessary.\n     * @param {object} notification the object to be inserted into the collection\n     * @private\n     */\n    Notifications.prototype._add = function (notification) {\n        var notificationsCollection = this._getNotificationsCollection();\n        var firstExpiration = this._getFirstExpiredTimestamp();\n        var notificationID = notificationsCollection.insert(notification);\n\n        if (notification.expires) {\n            if (this._notificationTimeout) {\n                if (firstExpiration > notification.expires) {\n                    Meteor.clearTimeout(this._notificationTimeout);\n                    this._notificationTimeout = undefined;\n                }\n            }\n\n            if (!this._notificationTimeout) {\n                this._createTimeout();\n            }\n        }\n\n        return notificationID;\n    };\n\n    /***\n     * Returns the timestamp of the notification from the notificationsCollection that is first to expire\n     * @returns {string} first to expire timestamp\n     * @private\n     */\n    Notifications.prototype._getFirstExpiredTimestamp = function () {\n        var notificationsCollection = this._getNotificationsCollection();\n\n        var firstNotification = notificationsCollection.findOne({expires: {$gt: 0}}, {sort:[['expires', 'asc']]}, { reactive: false });\n        var firstExpiredTimestamp = firstNotification ? firstNotification.expires : 0;\n\n        return firstExpiredTimestamp;\n    };\n\n    /***\n     * creates a timeout for the first to expire notification.\n     * @private\n     */\n    Notifications.prototype._createTimeout = function () {\n        var self = this;\n        var firstExpiration = this._getFirstExpiredTimestamp();\n\n        if (firstExpiration) {\n            this._notificationTimeout = Meteor.setTimeout(function () {\n                self.remove({expires: {$lte: firstExpiration}});\n                self._createTimeout();\n            }, firstExpiration - new Date().getTime());\n        } else {\n            this._notificationTimeout = undefined;\n        }\n    };\n\n    /***\n     * gets the proper notification defaults based on type\n     * @param {String} notificationType the type of the notification for which to get the defaultOptions\n     */\n    Notifications.prototype.getDefaultOptions = function (notificationType) {\n        return this.defaultOptionsByType[notificationType] || this.defaultOptions;\n    };\n\n\n    /***\n     * Gets the class containing the color for the notification\n     * @param {String} notificationType\n     * @returns {string} classname to use for the notification\n     */\n    Notifications.prototype.getNotificationClass = function (notificationType) {\n        var notificationClass;\n\n        _.each(this.TYPES,  function (value, key) {\n            if(value === notificationType) {\n                notificationClass = key.toLowerCase();\n            }\n        });\n\n        return notificationClass;\n    };\n\n    /***\n     * Removes the notifications matching the selector\n     * @param selector\n     */\n    Notifications.prototype.remove = function (selector) {\n        this._getNotificationsCollection().remove(selector);\n\n        if (this._notificationTimeout) {\n            Meteor.clearTimeout(this._notificationTimeout);\n            this._notificationTimeout = undefined;\n            this._createTimeout();\n        }\n    };\n\n    /***\n     * Stores constants for the different notification types\n     * @type {{ERROR: number, WARNING: number, INFO: number, SUCCESS: number}}\n     */\n    Notifications.prototype.TYPES = {\n        'ERROR': 1,\n        'WARNING': 2,\n        'INFO': 3,\n        'SUCCESS': 4\n    };\n\n    /***\n     * Object with the default options for the notifications\n     * @type {{type: number, userCloseable: boolean, timeout: number, closed: function}}\n     */\n    Notifications.prototype.defaultOptions = {\n        type: Notifications.prototype.TYPES.INFO,\n        userCloseable: true,\n        clickBodyToClose: true,\n        timeout: 0\n    };\n\n    /***\n     * Object with the default options for the notifications for specific types\n     * @type {{type: number, userCloseable: boolean, timeout: number, closed: function}}\n     */\n    Notifications.prototype.defaultOptionsByType = {};\n\n\n    Notifications.prototype.defaultSettings = {\n        hideAnimationProperties: {\n            height: 0,\n            opacity: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n            marginTop: 0\n        },\n        animationSpeed: 400\n    };\n\n    return Notifications;\n})();\n\nNotifications = new constructor();\n\nTemplate.notifications.helpers({\n    notifications: function() {\n        return Notifications._getNotificationsCollection().find();\n    }\n});\n\nTemplate.notifications.rendered = function () {\n    this.firstNode._uihooks = {\n        insertElement: function (node, next) {\n            var settings = Notifications.settings;\n            $(node)\n                .addClass('notificationHidden')\n                .insertBefore(next)\n                .fadeIn({duration: settings.animationSpeed})\n                .promise()\n                .done(function () {\n                    $(this).removeClass('notificationHidden');\n                });\n        },\n        removeElement: function (node) {\n            var settings = Notifications.settings;\n            $(node).animate(settings.hideAnimationProperties, {\n                duration: settings.animationSpeed,\n                complete: function () {\n                    $(node).remove();\n                }});\n        }\n    };\n};\n","\nTemplate.__checkName(\"notification\");\nTemplate[\"notification\"] = new Template(\"Template.notification\", (function() {\n  var view = this;\n  return HTML.LI({\n    \"class\": function() {\n      return [ \"notification \", Spacebars.mustache(view.lookup(\"notificationColor\"), view.lookup(\"type\")), \" \", Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"userCloseable\"));\n      }, function() {\n        return \"closeable\";\n      }) ];\n    }\n  }, \"\\n         \", HTML.DIV({\n    \"class\": \"title\"\n  }, Blaze.View(\"lookup:title\", function() {\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"title\")));\n  })), \"\\n         \", HTML.DIV({\n    \"class\": \"message\"\n  }, Blaze.View(\"lookup:message\", function() {\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"message\")));\n  })), \"\\n         \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"userCloseable\"));\n  }, function() {\n    return [ \"\\n                 \", HTML.DIV({\n      \"class\": \"closeButton\"\n    }, HTML.CharRef({\n      html: \"&times;\",\n      str: \"×\"\n    })), \"\\n         \" ];\n  }), \"\\n     \");\n}));\n","'use strict';\n\nTemplate.notification.helpers({\n    notificationColor: function(notificationType) {\n        return Notifications.getNotificationClass(notificationType);\n    }\n});\n\nTemplate.notification.events = {\n    'click': function (event) {\n        if (this.userCloseable || this.expires < new Date()) {\n            // must the user click the close button?\n            if (!this.clickBodyToClose && 0 > event.target.className.indexOf('closeButton')) {\n                return;\n            }\n\n            Notifications.remove(this._id);\n            if (this.closed) {\n              this.closed(this);\n            }\n        }\n    }\n};\n"]}}]