//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var moment = Package['momentjs:moment'].moment;
var Template = Package.templating.Template;
var Blaze = Package.blaze.Blaze;
var UI = Package.blaze.UI;
var Handlebars = Package.blaze.Handlebars;
var Spacebars = Package.spacebars.Spacebars;
var HTML = Package.htmljs.HTML;

(function(){

///////////////////////////////////////////////////////////////////////
//                                                                   //
// packages/rzymek_fullcalendar/packages/rzymek_fullcalendar.js      //
//                                                                   //
///////////////////////////////////////////////////////////////////////
                                                                     //
(function () {                                                       // 1
                                                                     // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rzymek:fullcalendar/fullcalendar/dist/fullcalendar.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*!                                                                                                                    // 1
 * FullCalendar v2.3.1                                                                                                 // 2
 * Docs & License: http://fullcalendar.io/                                                                             // 3
 * (c) 2015 Adam Shaw                                                                                                  // 4
 */                                                                                                                    // 5
                                                                                                                       // 6
(function(factory) {                                                                                                   // 7
	if (typeof define === 'function' && define.amd) {                                                                     // 8
		define([ 'jquery', 'moment' ], factory);                                                                             // 9
	}                                                                                                                     // 10
	else if (typeof exports === 'object') { // Node/CommonJS                                                              // 11
		module.exports = factory(require('jquery'), require('moment'));                                                      // 12
	}                                                                                                                     // 13
	else {                                                                                                                // 14
		factory(jQuery, moment);                                                                                             // 15
	}                                                                                                                     // 16
})(function($, moment) {                                                                                               // 17
                                                                                                                       // 18
;;                                                                                                                     // 19
                                                                                                                       // 20
var fc = $.fullCalendar = { version: "2.3.1" };                                                                        // 21
var fcViews = fc.views = {};                                                                                           // 22
                                                                                                                       // 23
                                                                                                                       // 24
$.fn.fullCalendar = function(options) {                                                                                // 25
	var args = Array.prototype.slice.call(arguments, 1); // for a possible method call                                    // 26
	var res = this; // what this function will return (this jQuery object by default)                                     // 27
                                                                                                                       // 28
	this.each(function(i, _element) { // loop each DOM element involved                                                   // 29
		var element = $(_element);                                                                                           // 30
		var calendar = element.data('fullCalendar'); // get the existing calendar object (if any)                            // 31
		var singleRes; // the returned value of this single method call                                                      // 32
                                                                                                                       // 33
		// a method call                                                                                                     // 34
		if (typeof options === 'string') {                                                                                   // 35
			if (calendar && $.isFunction(calendar[options])) {                                                                  // 36
				singleRes = calendar[options].apply(calendar, args);                                                               // 37
				if (!i) {                                                                                                          // 38
					res = singleRes; // record the first method call result                                                           // 39
				}                                                                                                                  // 40
				if (options === 'destroy') { // for the destroy method, must remove Calendar object data                           // 41
					element.removeData('fullCalendar');                                                                               // 42
				}                                                                                                                  // 43
			}                                                                                                                   // 44
		}                                                                                                                    // 45
		// a new calendar initialization                                                                                     // 46
		else if (!calendar) { // don't initialize twice                                                                      // 47
			calendar = new fc.CalendarBase(element, options);                                                                   // 48
			element.data('fullCalendar', calendar);                                                                             // 49
			calendar.render();                                                                                                  // 50
		}                                                                                                                    // 51
	});                                                                                                                   // 52
	                                                                                                                      // 53
	return res;                                                                                                           // 54
};                                                                                                                     // 55
                                                                                                                       // 56
                                                                                                                       // 57
var complexOptions = [ // names of options that are objects whose properties should be combined                        // 58
	'header',                                                                                                             // 59
	'buttonText',                                                                                                         // 60
	'buttonIcons',                                                                                                        // 61
	'themeButtonIcons'                                                                                                    // 62
];                                                                                                                     // 63
                                                                                                                       // 64
                                                                                                                       // 65
// Recursively combines all passed-in option-hash arguments into a new single option-hash.                             // 66
// Given option-hashes are ordered from lowest to highest priority.                                                    // 67
function mergeOptions() {                                                                                              // 68
	var chain = Array.prototype.slice.call(arguments); // convert to a real array                                         // 69
	var complexVals = {}; // hash for each complex option's combined values                                               // 70
	var i, name;                                                                                                          // 71
	var combinedVal;                                                                                                      // 72
	var j;                                                                                                                // 73
	var val;                                                                                                              // 74
                                                                                                                       // 75
	// for each complex option, loop through each option-hash and accumulate the combined values                          // 76
	for (i = 0; i < complexOptions.length; i++) {                                                                         // 77
		name = complexOptions[i];                                                                                            // 78
		combinedVal = null; // an object holding the merge of all the values                                                 // 79
                                                                                                                       // 80
		for (j = 0; j < chain.length; j++) {                                                                                 // 81
			val = chain[j][name];                                                                                               // 82
                                                                                                                       // 83
			if ($.isPlainObject(val)) {                                                                                         // 84
				combinedVal = $.extend(combinedVal || {}, val); // merge new properties                                            // 85
			}                                                                                                                   // 86
			else if (val != null) { // a non-null non-undefined atomic option                                                   // 87
				combinedVal = null; // signal to use the atomic value                                                              // 88
			}                                                                                                                   // 89
		}                                                                                                                    // 90
                                                                                                                       // 91
		// if not null, the final value was a combination of other objects. record it                                        // 92
		if (combinedVal !== null) {                                                                                          // 93
			complexVals[name] = combinedVal;                                                                                    // 94
		}                                                                                                                    // 95
	}                                                                                                                     // 96
                                                                                                                       // 97
	chain.unshift({}); // $.extend will mutate this with the result                                                       // 98
	chain.push(complexVals); // computed complex values are applied last                                                  // 99
	return $.extend.apply($, chain); // combine                                                                           // 100
}                                                                                                                      // 101
                                                                                                                       // 102
                                                                                                                       // 103
// Given options specified for the calendar's constructor, massages any legacy options into a non-legacy form.         // 104
// Converts View-Option-Hashes into the View-Specific-Options format.                                                  // 105
function massageOverrides(input) {                                                                                     // 106
	var overrides = { views: input.views || {} }; // the output. ensure a `views` hash                                    // 107
	var subObj;                                                                                                           // 108
                                                                                                                       // 109
	// iterate through all option override properties (except `views`)                                                    // 110
	$.each(input, function(name, val) {                                                                                   // 111
		if (name != 'views') {                                                                                               // 112
                                                                                                                       // 113
			// could the value be a legacy View-Option-Hash?                                                                    // 114
			if (                                                                                                                // 115
				$.isPlainObject(val) &&                                                                                            // 116
				!/(time|duration|interval)$/i.test(name) && // exclude duration options. might be given as objects                 // 117
				$.inArray(name, complexOptions) == -1 // complex options aren't allowed to be View-Option-Hashes                   // 118
			) {                                                                                                                 // 119
				subObj = null;                                                                                                     // 120
                                                                                                                       // 121
				// iterate through the properties of this possible View-Option-Hash value                                          // 122
				$.each(val, function(subName, subVal) {                                                                            // 123
                                                                                                                       // 124
					// is the property targeting a view?                                                                              // 125
					if (/^(month|week|day|default|basic(Week|Day)?|agenda(Week|Day)?)$/.test(subName)) {                              // 126
						if (!overrides.views[subName]) { // ensure the view-target entry exists                                          // 127
							overrides.views[subName] = {};                                                                                  // 128
						}                                                                                                                // 129
						overrides.views[subName][name] = subVal; // record the value in the `views` object                               // 130
					}                                                                                                                 // 131
					else { // a non-View-Option-Hash property                                                                         // 132
						if (!subObj) {                                                                                                   // 133
							subObj = {};                                                                                                    // 134
						}                                                                                                                // 135
						subObj[subName] = subVal; // accumulate these unrelated values for later                                         // 136
					}                                                                                                                 // 137
				});                                                                                                                // 138
                                                                                                                       // 139
				if (subObj) { // non-View-Option-Hash properties? transfer them as-is                                              // 140
					overrides[name] = subObj;                                                                                         // 141
				}                                                                                                                  // 142
			}                                                                                                                   // 143
			else {                                                                                                              // 144
				overrides[name] = val; // transfer normal options as-is                                                            // 145
			}                                                                                                                   // 146
		}                                                                                                                    // 147
	});                                                                                                                   // 148
                                                                                                                       // 149
	return overrides;                                                                                                     // 150
}                                                                                                                      // 151
                                                                                                                       // 152
;;                                                                                                                     // 153
                                                                                                                       // 154
// exports                                                                                                             // 155
fc.intersectionToSeg = intersectionToSeg;                                                                              // 156
fc.applyAll = applyAll;                                                                                                // 157
fc.debounce = debounce;                                                                                                // 158
fc.isInt = isInt;                                                                                                      // 159
fc.htmlEscape = htmlEscape;                                                                                            // 160
fc.cssToStr = cssToStr;                                                                                                // 161
fc.proxy = proxy;                                                                                                      // 162
                                                                                                                       // 163
                                                                                                                       // 164
/* FullCalendar-specific DOM Utilities                                                                                 // 165
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 167
                                                                                                                       // 168
// Given the scrollbar widths of some other container, create borders/margins on rowEls in order to match the left     // 169
// and right space that was offset by the scrollbars. A 1-pixel border first, then margin beyond that.                 // 170
function compensateScroll(rowEls, scrollbarWidths) {                                                                   // 171
	if (scrollbarWidths.left) {                                                                                           // 172
		rowEls.css({                                                                                                         // 173
			'border-left-width': 1,                                                                                             // 174
			'margin-left': scrollbarWidths.left - 1                                                                             // 175
		});                                                                                                                  // 176
	}                                                                                                                     // 177
	if (scrollbarWidths.right) {                                                                                          // 178
		rowEls.css({                                                                                                         // 179
			'border-right-width': 1,                                                                                            // 180
			'margin-right': scrollbarWidths.right - 1                                                                           // 181
		});                                                                                                                  // 182
	}                                                                                                                     // 183
}                                                                                                                      // 184
                                                                                                                       // 185
                                                                                                                       // 186
// Undoes compensateScroll and restores all borders/margins                                                            // 187
function uncompensateScroll(rowEls) {                                                                                  // 188
	rowEls.css({                                                                                                          // 189
		'margin-left': '',                                                                                                   // 190
		'margin-right': '',                                                                                                  // 191
		'border-left-width': '',                                                                                             // 192
		'border-right-width': ''                                                                                             // 193
	});                                                                                                                   // 194
}                                                                                                                      // 195
                                                                                                                       // 196
                                                                                                                       // 197
// Make the mouse cursor express that an event is not allowed in the current area                                      // 198
function disableCursor() {                                                                                             // 199
	$('body').addClass('fc-not-allowed');                                                                                 // 200
}                                                                                                                      // 201
                                                                                                                       // 202
                                                                                                                       // 203
// Returns the mouse cursor to its original look                                                                       // 204
function enableCursor() {                                                                                              // 205
	$('body').removeClass('fc-not-allowed');                                                                              // 206
}                                                                                                                      // 207
                                                                                                                       // 208
                                                                                                                       // 209
// Given a total available height to fill, have `els` (essentially child rows) expand to accomodate.                   // 210
// By default, all elements that are shorter than the recommended height are expanded uniformly, not considering       // 211
// any other els that are already too tall. if `shouldRedistribute` is on, it considers these tall rows and            // 212
// reduces the available height.                                                                                       // 213
function distributeHeight(els, availableHeight, shouldRedistribute) {                                                  // 214
                                                                                                                       // 215
	// *FLOORING NOTE*: we floor in certain places because zoom can give inaccurate floating-point dimensions,            // 216
	// and it is better to be shorter than taller, to avoid creating unnecessary scrollbars.                              // 217
                                                                                                                       // 218
	var minOffset1 = Math.floor(availableHeight / els.length); // for non-last element                                    // 219
	var minOffset2 = Math.floor(availableHeight - minOffset1 * (els.length - 1)); // for last element *FLOORING NOTE*     // 220
	var flexEls = []; // elements that are allowed to expand. array of DOM nodes                                          // 221
	var flexOffsets = []; // amount of vertical space it takes up                                                         // 222
	var flexHeights = []; // actual css height                                                                            // 223
	var usedHeight = 0;                                                                                                   // 224
                                                                                                                       // 225
	undistributeHeight(els); // give all elements their natural height                                                    // 226
                                                                                                                       // 227
	// find elements that are below the recommended height (expandable).                                                  // 228
	// important to query for heights in a single first pass (to avoid reflow oscillation).                               // 229
	els.each(function(i, el) {                                                                                            // 230
		var minOffset = i === els.length - 1 ? minOffset2 : minOffset1;                                                      // 231
		var naturalOffset = $(el).outerHeight(true);                                                                         // 232
                                                                                                                       // 233
		if (naturalOffset < minOffset) {                                                                                     // 234
			flexEls.push(el);                                                                                                   // 235
			flexOffsets.push(naturalOffset);                                                                                    // 236
			flexHeights.push($(el).height());                                                                                   // 237
		}                                                                                                                    // 238
		else {                                                                                                               // 239
			// this element stretches past recommended height (non-expandable). mark the space as occupied.                     // 240
			usedHeight += naturalOffset;                                                                                        // 241
		}                                                                                                                    // 242
	});                                                                                                                   // 243
                                                                                                                       // 244
	// readjust the recommended height to only consider the height available to non-maxed-out rows.                       // 245
	if (shouldRedistribute) {                                                                                             // 246
		availableHeight -= usedHeight;                                                                                       // 247
		minOffset1 = Math.floor(availableHeight / flexEls.length);                                                           // 248
		minOffset2 = Math.floor(availableHeight - minOffset1 * (flexEls.length - 1)); // *FLOORING NOTE*                     // 249
	}                                                                                                                     // 250
                                                                                                                       // 251
	// assign heights to all expandable elements                                                                          // 252
	$(flexEls).each(function(i, el) {                                                                                     // 253
		var minOffset = i === flexEls.length - 1 ? minOffset2 : minOffset1;                                                  // 254
		var naturalOffset = flexOffsets[i];                                                                                  // 255
		var naturalHeight = flexHeights[i];                                                                                  // 256
		var newHeight = minOffset - (naturalOffset - naturalHeight); // subtract the margin/padding                          // 257
                                                                                                                       // 258
		if (naturalOffset < minOffset) { // we check this again because redistribution might have changed things             // 259
			$(el).height(newHeight);                                                                                            // 260
		}                                                                                                                    // 261
	});                                                                                                                   // 262
}                                                                                                                      // 263
                                                                                                                       // 264
                                                                                                                       // 265
// Undoes distrubuteHeight, restoring all els to their natural height                                                  // 266
function undistributeHeight(els) {                                                                                     // 267
	els.height('');                                                                                                       // 268
}                                                                                                                      // 269
                                                                                                                       // 270
                                                                                                                       // 271
// Given `els`, a jQuery set of <td> cells, find the cell with the largest natural width and set the widths of all the // 272
// cells to be that width.                                                                                             // 273
// PREREQUISITE: if you want a cell to take up width, it needs to have a single inner element w/ display:inline        // 274
function matchCellWidths(els) {                                                                                        // 275
	var maxInnerWidth = 0;                                                                                                // 276
                                                                                                                       // 277
	els.find('> *').each(function(i, innerEl) {                                                                           // 278
		var innerWidth = $(innerEl).outerWidth();                                                                            // 279
		if (innerWidth > maxInnerWidth) {                                                                                    // 280
			maxInnerWidth = innerWidth;                                                                                         // 281
		}                                                                                                                    // 282
	});                                                                                                                   // 283
                                                                                                                       // 284
	maxInnerWidth++; // sometimes not accurate of width the text needs to stay on one line. insurance                     // 285
                                                                                                                       // 286
	els.width(maxInnerWidth);                                                                                             // 287
                                                                                                                       // 288
	return maxInnerWidth;                                                                                                 // 289
}                                                                                                                      // 290
                                                                                                                       // 291
                                                                                                                       // 292
// Turns a container element into a scroller if its contents is taller than the allotted height.                       // 293
// Returns true if the element is now a scroller, false otherwise.                                                     // 294
// NOTE: this method is best because it takes weird zooming dimensions into account                                    // 295
function setPotentialScroller(containerEl, height) {                                                                   // 296
	containerEl.height(height).addClass('fc-scroller');                                                                   // 297
                                                                                                                       // 298
	// are scrollbars needed?                                                                                             // 299
	if (containerEl[0].scrollHeight - 1 > containerEl[0].clientHeight) { // !!! -1 because IE is often off-by-one :(      // 300
		return true;                                                                                                         // 301
	}                                                                                                                     // 302
                                                                                                                       // 303
	unsetScroller(containerEl); // undo                                                                                   // 304
	return false;                                                                                                         // 305
}                                                                                                                      // 306
                                                                                                                       // 307
                                                                                                                       // 308
// Takes an element that might have been a scroller, and turns it back into a normal element.                          // 309
function unsetScroller(containerEl) {                                                                                  // 310
	containerEl.height('').removeClass('fc-scroller');                                                                    // 311
}                                                                                                                      // 312
                                                                                                                       // 313
                                                                                                                       // 314
/* General DOM Utilities                                                                                               // 315
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 317
fc.getClientRect = getClientRect;                                                                                      // 318
fc.getContentRect = getContentRect;                                                                                    // 319
fc.getScrollbarWidths = getScrollbarWidths;                                                                            // 320
                                                                                                                       // 321
                                                                                                                       // 322
// borrowed from https://github.com/jquery/jquery-ui/blob/1.11.0/ui/core.js#L51                                        // 323
function getScrollParent(el) {                                                                                         // 324
	var position = el.css('position'),                                                                                    // 325
		scrollParent = el.parents().filter(function() {                                                                      // 326
			var parent = $(this);                                                                                               // 327
			return (/(auto|scroll)/).test(                                                                                      // 328
				parent.css('overflow') + parent.css('overflow-y') + parent.css('overflow-x')                                       // 329
			);                                                                                                                  // 330
		}).eq(0);                                                                                                            // 331
                                                                                                                       // 332
	return position === 'fixed' || !scrollParent.length ? $(el[0].ownerDocument || document) : scrollParent;              // 333
}                                                                                                                      // 334
                                                                                                                       // 335
                                                                                                                       // 336
// Queries the outer bounding area of a jQuery element.                                                                // 337
// Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).                    // 338
function getOuterRect(el) {                                                                                            // 339
	var offset = el.offset();                                                                                             // 340
                                                                                                                       // 341
	return {                                                                                                              // 342
		left: offset.left,                                                                                                   // 343
		right: offset.left + el.outerWidth(),                                                                                // 344
		top: offset.top,                                                                                                     // 345
		bottom: offset.top + el.outerHeight()                                                                                // 346
	};                                                                                                                    // 347
}                                                                                                                      // 348
                                                                                                                       // 349
                                                                                                                       // 350
// Queries the area within the margin/border/scrollbars of a jQuery element. Does not go within the padding.           // 351
// Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).                    // 352
// NOTE: should use clientLeft/clientTop, but very unreliable cross-browser.                                           // 353
function getClientRect(el) {                                                                                           // 354
	var offset = el.offset();                                                                                             // 355
	var scrollbarWidths = getScrollbarWidths(el);                                                                         // 356
	var left = offset.left + getCssFloat(el, 'border-left-width') + scrollbarWidths.left;                                 // 357
	var top = offset.top + getCssFloat(el, 'border-top-width') + scrollbarWidths.top;                                     // 358
                                                                                                                       // 359
	return {                                                                                                              // 360
		left: left,                                                                                                          // 361
		right: left + el[0].clientWidth, // clientWidth includes padding but NOT scrollbars                                  // 362
		top: top,                                                                                                            // 363
		bottom: top + el[0].clientHeight // clientHeight includes padding but NOT scrollbars                                 // 364
	};                                                                                                                    // 365
}                                                                                                                      // 366
                                                                                                                       // 367
                                                                                                                       // 368
// Queries the area within the margin/border/padding of a jQuery element. Assumed not to have scrollbars.              // 369
// Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).                    // 370
function getContentRect(el) {                                                                                          // 371
	var offset = el.offset(); // just outside of border, margin not included                                              // 372
	var left = offset.left + getCssFloat(el, 'border-left-width') + getCssFloat(el, 'padding-left');                      // 373
	var top = offset.top + getCssFloat(el, 'border-top-width') + getCssFloat(el, 'padding-top');                          // 374
                                                                                                                       // 375
	return {                                                                                                              // 376
		left: left,                                                                                                          // 377
		right: left + el.width(),                                                                                            // 378
		top: top,                                                                                                            // 379
		bottom: top + el.height()                                                                                            // 380
	};                                                                                                                    // 381
}                                                                                                                      // 382
                                                                                                                       // 383
                                                                                                                       // 384
// Returns the computed left/right/top/bottom scrollbar widths for the given jQuery element.                           // 385
// NOTE: should use clientLeft/clientTop, but very unreliable cross-browser.                                           // 386
function getScrollbarWidths(el) {                                                                                      // 387
	var leftRightWidth = el.innerWidth() - el[0].clientWidth; // the paddings cancel out, leaving the scrollbars          // 388
	var widths = {                                                                                                        // 389
		left: 0,                                                                                                             // 390
		right: 0,                                                                                                            // 391
		top: 0,                                                                                                              // 392
		bottom: el.innerHeight() - el[0].clientHeight // the paddings cancel out, leaving the bottom scrollbar               // 393
	};                                                                                                                    // 394
                                                                                                                       // 395
	if (getIsLeftRtlScrollbars() && el.css('direction') == 'rtl') { // is the scrollbar on the left side?                 // 396
		widths.left = leftRightWidth;                                                                                        // 397
	}                                                                                                                     // 398
	else {                                                                                                                // 399
		widths.right = leftRightWidth;                                                                                       // 400
	}                                                                                                                     // 401
                                                                                                                       // 402
	return widths;                                                                                                        // 403
}                                                                                                                      // 404
                                                                                                                       // 405
                                                                                                                       // 406
// Logic for determining if, when the element is right-to-left, the scrollbar appears on the left side                 // 407
                                                                                                                       // 408
var _isLeftRtlScrollbars = null;                                                                                       // 409
                                                                                                                       // 410
function getIsLeftRtlScrollbars() { // responsible for caching the computation                                         // 411
	if (_isLeftRtlScrollbars === null) {                                                                                  // 412
		_isLeftRtlScrollbars = computeIsLeftRtlScrollbars();                                                                 // 413
	}                                                                                                                     // 414
	return _isLeftRtlScrollbars;                                                                                          // 415
}                                                                                                                      // 416
                                                                                                                       // 417
function computeIsLeftRtlScrollbars() { // creates an offscreen test element, then removes it                          // 418
	var el = $('<div><div/></div>')                                                                                       // 419
		.css({                                                                                                               // 420
			position: 'absolute',                                                                                               // 421
			top: -1000,                                                                                                         // 422
			left: 0,                                                                                                            // 423
			border: 0,                                                                                                          // 424
			padding: 0,                                                                                                         // 425
			overflow: 'scroll',                                                                                                 // 426
			direction: 'rtl'                                                                                                    // 427
		})                                                                                                                   // 428
		.appendTo('body');                                                                                                   // 429
	var innerEl = el.children();                                                                                          // 430
	var res = innerEl.offset().left > el.offset().left; // is the inner div shifted to accommodate a left scrollbar?      // 431
	el.remove();                                                                                                          // 432
	return res;                                                                                                           // 433
}                                                                                                                      // 434
                                                                                                                       // 435
                                                                                                                       // 436
// Retrieves a jQuery element's computed CSS value as a floating-point number.                                         // 437
// If the queried value is non-numeric (ex: IE can return "medium" for border width), will just return zero.           // 438
function getCssFloat(el, prop) {                                                                                       // 439
	return parseFloat(el.css(prop)) || 0;                                                                                 // 440
}                                                                                                                      // 441
                                                                                                                       // 442
                                                                                                                       // 443
// Returns a boolean whether this was a left mouse click and no ctrl key (which means right click on Mac)              // 444
function isPrimaryMouseButton(ev) {                                                                                    // 445
	return ev.which == 1 && !ev.ctrlKey;                                                                                  // 446
}                                                                                                                      // 447
                                                                                                                       // 448
                                                                                                                       // 449
/* Geometry                                                                                                            // 450
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 452
                                                                                                                       // 453
// Returns a new rectangle that is the intersection of the two rectangles. If they don't intersect, returns false      // 454
function intersectRects(rect1, rect2) {                                                                                // 455
	var res = {                                                                                                           // 456
		left: Math.max(rect1.left, rect2.left),                                                                              // 457
		right: Math.min(rect1.right, rect2.right),                                                                           // 458
		top: Math.max(rect1.top, rect2.top),                                                                                 // 459
		bottom: Math.min(rect1.bottom, rect2.bottom)                                                                         // 460
	};                                                                                                                    // 461
                                                                                                                       // 462
	if (res.left < res.right && res.top < res.bottom) {                                                                   // 463
		return res;                                                                                                          // 464
	}                                                                                                                     // 465
	return false;                                                                                                         // 466
}                                                                                                                      // 467
                                                                                                                       // 468
                                                                                                                       // 469
// Returns a new point that will have been moved to reside within the given rectangle                                  // 470
function constrainPoint(point, rect) {                                                                                 // 471
	return {                                                                                                              // 472
		left: Math.min(Math.max(point.left, rect.left), rect.right),                                                         // 473
		top: Math.min(Math.max(point.top, rect.top), rect.bottom)                                                            // 474
	};                                                                                                                    // 475
}                                                                                                                      // 476
                                                                                                                       // 477
                                                                                                                       // 478
// Returns a point that is the center of the given rectangle                                                           // 479
function getRectCenter(rect) {                                                                                         // 480
	return {                                                                                                              // 481
		left: (rect.left + rect.right) / 2,                                                                                  // 482
		top: (rect.top + rect.bottom) / 2                                                                                    // 483
	};                                                                                                                    // 484
}                                                                                                                      // 485
                                                                                                                       // 486
                                                                                                                       // 487
// Subtracts point2's coordinates from point1's coordinates, returning a delta                                         // 488
function diffPoints(point1, point2) {                                                                                  // 489
	return {                                                                                                              // 490
		left: point1.left - point2.left,                                                                                     // 491
		top: point1.top - point2.top                                                                                         // 492
	};                                                                                                                    // 493
}                                                                                                                      // 494
                                                                                                                       // 495
                                                                                                                       // 496
/* FullCalendar-specific Misc Utilities                                                                                // 497
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 499
                                                                                                                       // 500
// Creates a basic segment with the intersection of the two ranges. Returns undefined if no intersection.              // 501
// Expects all dates to be normalized to the same timezone beforehand.                                                 // 502
// TODO: move to date section?                                                                                         // 503
function intersectionToSeg(subjectRange, constraintRange) {                                                            // 504
	var subjectStart = subjectRange.start;                                                                                // 505
	var subjectEnd = subjectRange.end;                                                                                    // 506
	var constraintStart = constraintRange.start;                                                                          // 507
	var constraintEnd = constraintRange.end;                                                                              // 508
	var segStart, segEnd;                                                                                                 // 509
	var isStart, isEnd;                                                                                                   // 510
                                                                                                                       // 511
	if (subjectEnd > constraintStart && subjectStart < constraintEnd) { // in bounds at all?                              // 512
                                                                                                                       // 513
		if (subjectStart >= constraintStart) {                                                                               // 514
			segStart = subjectStart.clone();                                                                                    // 515
			isStart = true;                                                                                                     // 516
		}                                                                                                                    // 517
		else {                                                                                                               // 518
			segStart = constraintStart.clone();                                                                                 // 519
			isStart =  false;                                                                                                   // 520
		}                                                                                                                    // 521
                                                                                                                       // 522
		if (subjectEnd <= constraintEnd) {                                                                                   // 523
			segEnd = subjectEnd.clone();                                                                                        // 524
			isEnd = true;                                                                                                       // 525
		}                                                                                                                    // 526
		else {                                                                                                               // 527
			segEnd = constraintEnd.clone();                                                                                     // 528
			isEnd = false;                                                                                                      // 529
		}                                                                                                                    // 530
                                                                                                                       // 531
		return {                                                                                                             // 532
			start: segStart,                                                                                                    // 533
			end: segEnd,                                                                                                        // 534
			isStart: isStart,                                                                                                   // 535
			isEnd: isEnd                                                                                                        // 536
		};                                                                                                                   // 537
	}                                                                                                                     // 538
}                                                                                                                      // 539
                                                                                                                       // 540
                                                                                                                       // 541
/* Date Utilities                                                                                                      // 542
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 544
fc.computeIntervalUnit = computeIntervalUnit;                                                                          // 545
fc.durationHasTime = durationHasTime;                                                                                  // 546
                                                                                                                       // 547
var dayIDs = [ 'sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat' ];                                                      // 548
var intervalUnits = [ 'year', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond' ];                     // 549
                                                                                                                       // 550
                                                                                                                       // 551
// Diffs the two moments into a Duration where full-days are recorded first, then the remaining time.                  // 552
// Moments will have their timezones normalized.                                                                       // 553
function diffDayTime(a, b) {                                                                                           // 554
	return moment.duration({                                                                                              // 555
		days: a.clone().stripTime().diff(b.clone().stripTime(), 'days'),                                                     // 556
		ms: a.time() - b.time() // time-of-day from day start. disregards timezone                                           // 557
	});                                                                                                                   // 558
}                                                                                                                      // 559
                                                                                                                       // 560
                                                                                                                       // 561
// Diffs the two moments via their start-of-day (regardless of timezone). Produces whole-day durations.                // 562
function diffDay(a, b) {                                                                                               // 563
	return moment.duration({                                                                                              // 564
		days: a.clone().stripTime().diff(b.clone().stripTime(), 'days')                                                      // 565
	});                                                                                                                   // 566
}                                                                                                                      // 567
                                                                                                                       // 568
                                                                                                                       // 569
// Diffs two moments, producing a duration, made of a whole-unit-increment of the given unit. Uses rounding.           // 570
function diffByUnit(a, b, unit) {                                                                                      // 571
	return moment.duration(                                                                                               // 572
		Math.round(a.diff(b, unit, true)), // returnFloat=true                                                               // 573
		unit                                                                                                                 // 574
	);                                                                                                                    // 575
}                                                                                                                      // 576
                                                                                                                       // 577
                                                                                                                       // 578
// Computes the unit name of the largest whole-unit period of time.                                                    // 579
// For example, 48 hours will be "days" whereas 49 hours will be "hours".                                              // 580
// Accepts start/end, a range object, or an original duration object.                                                  // 581
function computeIntervalUnit(start, end) {                                                                             // 582
	var i, unit;                                                                                                          // 583
	var val;                                                                                                              // 584
                                                                                                                       // 585
	for (i = 0; i < intervalUnits.length; i++) {                                                                          // 586
		unit = intervalUnits[i];                                                                                             // 587
		val = computeRangeAs(unit, start, end);                                                                              // 588
                                                                                                                       // 589
		if (val >= 1 && isInt(val)) {                                                                                        // 590
			break;                                                                                                              // 591
		}                                                                                                                    // 592
	}                                                                                                                     // 593
                                                                                                                       // 594
	return unit; // will be "milliseconds" if nothing else matches                                                        // 595
}                                                                                                                      // 596
                                                                                                                       // 597
                                                                                                                       // 598
// Computes the number of units (like "hours") in the given range.                                                     // 599
// Range can be a {start,end} object, separate start/end args, or a Duration.                                          // 600
// Results are based on Moment's .as() and .diff() methods, so results can depend on internal handling                 // 601
// of month-diffing logic (which tends to vary from version to version).                                               // 602
function computeRangeAs(unit, start, end) {                                                                            // 603
                                                                                                                       // 604
	if (end != null) { // given start, end                                                                                // 605
		return end.diff(start, unit, true);                                                                                  // 606
	}                                                                                                                     // 607
	else if (moment.isDuration(start)) { // given duration                                                                // 608
		return start.as(unit);                                                                                               // 609
	}                                                                                                                     // 610
	else { // given { start, end } range object                                                                           // 611
		return start.end.diff(start.start, unit, true);                                                                      // 612
	}                                                                                                                     // 613
}                                                                                                                      // 614
                                                                                                                       // 615
                                                                                                                       // 616
// Returns a boolean about whether the given duration has any time parts (hours/minutes/seconds/ms)                    // 617
function durationHasTime(dur) {                                                                                        // 618
	return Boolean(dur.hours() || dur.minutes() || dur.seconds() || dur.milliseconds());                                  // 619
}                                                                                                                      // 620
                                                                                                                       // 621
                                                                                                                       // 622
function isNativeDate(input) {                                                                                         // 623
	return  Object.prototype.toString.call(input) === '[object Date]' || input instanceof Date;                           // 624
}                                                                                                                      // 625
                                                                                                                       // 626
                                                                                                                       // 627
// Returns a boolean about whether the given input is a time string, like "06:40:00" or "06:00"                        // 628
function isTimeString(str) {                                                                                           // 629
	return /^\d+\:\d+(?:\:\d+\.?(?:\d{3})?)?$/.test(str);                                                                 // 630
}                                                                                                                      // 631
                                                                                                                       // 632
                                                                                                                       // 633
/* General Utilities                                                                                                   // 634
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 636
var hasOwnPropMethod = {}.hasOwnProperty;                                                                              // 637
                                                                                                                       // 638
                                                                                                                       // 639
// Create an object that has the given prototype. Just like Object.create                                              // 640
function createObject(proto) {                                                                                         // 641
	var f = function() {};                                                                                                // 642
	f.prototype = proto;                                                                                                  // 643
	return new f();                                                                                                       // 644
}                                                                                                                      // 645
                                                                                                                       // 646
                                                                                                                       // 647
function copyOwnProps(src, dest) {                                                                                     // 648
	for (var name in src) {                                                                                               // 649
		if (hasOwnProp(src, name)) {                                                                                         // 650
			dest[name] = src[name];                                                                                             // 651
		}                                                                                                                    // 652
	}                                                                                                                     // 653
}                                                                                                                      // 654
                                                                                                                       // 655
                                                                                                                       // 656
// Copies over certain methods with the same names as Object.prototype methods. Overcomes an IE<=8 bug:                // 657
// https://developer.mozilla.org/en-US/docs/ECMAScript_DontEnum_attribute#JScript_DontEnum_Bug                         // 658
function copyNativeMethods(src, dest) {                                                                                // 659
	var names = [ 'constructor', 'toString', 'valueOf' ];                                                                 // 660
	var i, name;                                                                                                          // 661
                                                                                                                       // 662
	for (i = 0; i < names.length; i++) {                                                                                  // 663
		name = names[i];                                                                                                     // 664
                                                                                                                       // 665
		if (src[name] !== Object.prototype[name]) {                                                                          // 666
			dest[name] = src[name];                                                                                             // 667
		}                                                                                                                    // 668
	}                                                                                                                     // 669
}                                                                                                                      // 670
                                                                                                                       // 671
                                                                                                                       // 672
function hasOwnProp(obj, name) {                                                                                       // 673
	return hasOwnPropMethod.call(obj, name);                                                                              // 674
}                                                                                                                      // 675
                                                                                                                       // 676
                                                                                                                       // 677
// Is the given value a non-object non-function value?                                                                 // 678
function isAtomic(val) {                                                                                               // 679
	return /undefined|null|boolean|number|string/.test($.type(val));                                                      // 680
}                                                                                                                      // 681
                                                                                                                       // 682
                                                                                                                       // 683
function applyAll(functions, thisObj, args) {                                                                          // 684
	if ($.isFunction(functions)) {                                                                                        // 685
		functions = [ functions ];                                                                                           // 686
	}                                                                                                                     // 687
	if (functions) {                                                                                                      // 688
		var i;                                                                                                               // 689
		var ret;                                                                                                             // 690
		for (i=0; i<functions.length; i++) {                                                                                 // 691
			ret = functions[i].apply(thisObj, args) || ret;                                                                     // 692
		}                                                                                                                    // 693
		return ret;                                                                                                          // 694
	}                                                                                                                     // 695
}                                                                                                                      // 696
                                                                                                                       // 697
                                                                                                                       // 698
function firstDefined() {                                                                                              // 699
	for (var i=0; i<arguments.length; i++) {                                                                              // 700
		if (arguments[i] !== undefined) {                                                                                    // 701
			return arguments[i];                                                                                                // 702
		}                                                                                                                    // 703
	}                                                                                                                     // 704
}                                                                                                                      // 705
                                                                                                                       // 706
                                                                                                                       // 707
function htmlEscape(s) {                                                                                               // 708
	return (s + '').replace(/&/g, '&amp;')                                                                                // 709
		.replace(/</g, '&lt;')                                                                                               // 710
		.replace(/>/g, '&gt;')                                                                                               // 711
		.replace(/'/g, '&#039;')                                                                                             // 712
		.replace(/"/g, '&quot;')                                                                                             // 713
		.replace(/\n/g, '<br />');                                                                                           // 714
}                                                                                                                      // 715
                                                                                                                       // 716
                                                                                                                       // 717
function stripHtmlEntities(text) {                                                                                     // 718
	return text.replace(/&.*?;/g, '');                                                                                    // 719
}                                                                                                                      // 720
                                                                                                                       // 721
                                                                                                                       // 722
// Given a hash of CSS properties, returns a string of CSS.                                                            // 723
// Uses property names as-is (no camel-case conversion). Will not make statements for null/undefined values.           // 724
function cssToStr(cssProps) {                                                                                          // 725
	var statements = [];                                                                                                  // 726
                                                                                                                       // 727
	$.each(cssProps, function(name, val) {                                                                                // 728
		if (val != null) {                                                                                                   // 729
			statements.push(name + ':' + val);                                                                                  // 730
		}                                                                                                                    // 731
	});                                                                                                                   // 732
                                                                                                                       // 733
	return statements.join(';');                                                                                          // 734
}                                                                                                                      // 735
                                                                                                                       // 736
                                                                                                                       // 737
function capitaliseFirstLetter(str) {                                                                                  // 738
	return str.charAt(0).toUpperCase() + str.slice(1);                                                                    // 739
}                                                                                                                      // 740
                                                                                                                       // 741
                                                                                                                       // 742
function compareNumbers(a, b) { // for .sort()                                                                         // 743
	return a - b;                                                                                                         // 744
}                                                                                                                      // 745
                                                                                                                       // 746
                                                                                                                       // 747
function isInt(n) {                                                                                                    // 748
	return n % 1 === 0;                                                                                                   // 749
}                                                                                                                      // 750
                                                                                                                       // 751
                                                                                                                       // 752
// Returns a method bound to the given object context.                                                                 // 753
// Just like one of the jQuery.proxy signatures, but without the undesired behavior of treating the same method with   // 754
// different contexts as identical when binding/unbinding events.                                                      // 755
function proxy(obj, methodName) {                                                                                      // 756
	var method = obj[methodName];                                                                                         // 757
                                                                                                                       // 758
	return function() {                                                                                                   // 759
		return method.apply(obj, arguments);                                                                                 // 760
	};                                                                                                                    // 761
}                                                                                                                      // 762
                                                                                                                       // 763
                                                                                                                       // 764
// Returns a function, that, as long as it continues to be invoked, will not                                           // 765
// be triggered. The function will be called after it stops being called for                                           // 766
// N milliseconds.                                                                                                     // 767
// https://github.com/jashkenas/underscore/blob/1.6.0/underscore.js#L714                                               // 768
function debounce(func, wait) {                                                                                        // 769
	var timeoutId;                                                                                                        // 770
	var args;                                                                                                             // 771
	var context;                                                                                                          // 772
	var timestamp; // of most recent call                                                                                 // 773
	var later = function() {                                                                                              // 774
		var last = +new Date() - timestamp;                                                                                  // 775
		if (last < wait && last > 0) {                                                                                       // 776
			timeoutId = setTimeout(later, wait - last);                                                                         // 777
		}                                                                                                                    // 778
		else {                                                                                                               // 779
			timeoutId = null;                                                                                                   // 780
			func.apply(context, args);                                                                                          // 781
			if (!timeoutId) {                                                                                                   // 782
				context = args = null;                                                                                             // 783
			}                                                                                                                   // 784
		}                                                                                                                    // 785
	};                                                                                                                    // 786
                                                                                                                       // 787
	return function() {                                                                                                   // 788
		context = this;                                                                                                      // 789
		args = arguments;                                                                                                    // 790
		timestamp = +new Date();                                                                                             // 791
		if (!timeoutId) {                                                                                                    // 792
			timeoutId = setTimeout(later, wait);                                                                                // 793
		}                                                                                                                    // 794
	};                                                                                                                    // 795
}                                                                                                                      // 796
                                                                                                                       // 797
;;                                                                                                                     // 798
                                                                                                                       // 799
var ambigDateOfMonthRegex = /^\s*\d{4}-\d\d$/;                                                                         // 800
var ambigTimeOrZoneRegex =                                                                                             // 801
	/^\s*\d{4}-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?)?$/;                     // 802
var newMomentProto = moment.fn; // where we will attach our new methods                                                // 803
var oldMomentProto = $.extend({}, newMomentProto); // copy of original moment methods                                  // 804
var allowValueOptimization;                                                                                            // 805
var setUTCValues; // function defined below                                                                            // 806
var setLocalValues; // function defined below                                                                          // 807
                                                                                                                       // 808
                                                                                                                       // 809
// Creating                                                                                                            // 810
// -------------------------------------------------------------------------------------------------                   // 811
                                                                                                                       // 812
// Creates a new moment, similar to the vanilla moment(...) constructor, but with                                      // 813
// extra features (ambiguous time, enhanced formatting). When given an existing moment,                                // 814
// it will function as a clone (and retain the zone of the moment). Anything else will                                 // 815
// result in a moment in the local zone.                                                                               // 816
fc.moment = function() {                                                                                               // 817
	return makeMoment(arguments);                                                                                         // 818
};                                                                                                                     // 819
                                                                                                                       // 820
// Sames as fc.moment, but forces the resulting moment to be in the UTC timezone.                                      // 821
fc.moment.utc = function() {                                                                                           // 822
	var mom = makeMoment(arguments, true);                                                                                // 823
                                                                                                                       // 824
	// Force it into UTC because makeMoment doesn't guarantee it                                                          // 825
	// (if given a pre-existing moment for example)                                                                       // 826
	if (mom.hasTime()) { // don't give ambiguously-timed moments a UTC zone                                               // 827
		mom.utc();                                                                                                           // 828
	}                                                                                                                     // 829
                                                                                                                       // 830
	return mom;                                                                                                           // 831
};                                                                                                                     // 832
                                                                                                                       // 833
// Same as fc.moment, but when given an ISO8601 string, the timezone offset is preserved.                              // 834
// ISO8601 strings with no timezone offset will become ambiguously zoned.                                              // 835
fc.moment.parseZone = function() {                                                                                     // 836
	return makeMoment(arguments, true, true);                                                                             // 837
};                                                                                                                     // 838
                                                                                                                       // 839
// Builds an enhanced moment from args. When given an existing moment, it clones. When given a                         // 840
// native Date, or called with no arguments (the current time), the resulting moment will be local.                    // 841
// Anything else needs to be "parsed" (a string or an array), and will be affected by:                                 // 842
//    parseAsUTC - if there is no zone information, should we parse the input in UTC?                                  // 843
//    parseZone - if there is zone information, should we force the zone of the moment?                                // 844
function makeMoment(args, parseAsUTC, parseZone) {                                                                     // 845
	var input = args[0];                                                                                                  // 846
	var isSingleString = args.length == 1 && typeof input === 'string';                                                   // 847
	var isAmbigTime;                                                                                                      // 848
	var isAmbigZone;                                                                                                      // 849
	var ambigMatch;                                                                                                       // 850
	var mom;                                                                                                              // 851
                                                                                                                       // 852
	if (moment.isMoment(input)) {                                                                                         // 853
		mom = moment.apply(null, args); // clone it                                                                          // 854
		transferAmbigs(input, mom); // the ambig flags weren't transfered with the clone                                     // 855
	}                                                                                                                     // 856
	else if (isNativeDate(input) || input === undefined) {                                                                // 857
		mom = moment.apply(null, args); // will be local                                                                     // 858
	}                                                                                                                     // 859
	else { // "parsing" is required                                                                                       // 860
		isAmbigTime = false;                                                                                                 // 861
		isAmbigZone = false;                                                                                                 // 862
                                                                                                                       // 863
		if (isSingleString) {                                                                                                // 864
			if (ambigDateOfMonthRegex.test(input)) {                                                                            // 865
				// accept strings like '2014-05', but convert to the first of the month                                            // 866
				input += '-01';                                                                                                    // 867
				args = [ input ]; // for when we pass it on to moment's constructor                                                // 868
				isAmbigTime = true;                                                                                                // 869
				isAmbigZone = true;                                                                                                // 870
			}                                                                                                                   // 871
			else if ((ambigMatch = ambigTimeOrZoneRegex.exec(input))) {                                                         // 872
				isAmbigTime = !ambigMatch[5]; // no time part?                                                                     // 873
				isAmbigZone = true;                                                                                                // 874
			}                                                                                                                   // 875
		}                                                                                                                    // 876
		else if ($.isArray(input)) {                                                                                         // 877
			// arrays have no timezone information, so assume ambiguous zone                                                    // 878
			isAmbigZone = true;                                                                                                 // 879
		}                                                                                                                    // 880
		// otherwise, probably a string with a format                                                                        // 881
                                                                                                                       // 882
		if (parseAsUTC || isAmbigTime) {                                                                                     // 883
			mom = moment.utc.apply(moment, args);                                                                               // 884
		}                                                                                                                    // 885
		else {                                                                                                               // 886
			mom = moment.apply(null, args);                                                                                     // 887
		}                                                                                                                    // 888
                                                                                                                       // 889
		if (isAmbigTime) {                                                                                                   // 890
			mom._ambigTime = true;                                                                                              // 891
			mom._ambigZone = true; // ambiguous time always means ambiguous zone                                                // 892
		}                                                                                                                    // 893
		else if (parseZone) { // let's record the inputted zone somehow                                                      // 894
			if (isAmbigZone) {                                                                                                  // 895
				mom._ambigZone = true;                                                                                             // 896
			}                                                                                                                   // 897
			else if (isSingleString) {                                                                                          // 898
				if (mom.utcOffset) {                                                                                               // 899
					mom.utcOffset(input); // if not a valid zone, will assign UTC                                                     // 900
				}                                                                                                                  // 901
				else {                                                                                                             // 902
					mom.zone(input); // for moment-pre-2.9                                                                            // 903
				}                                                                                                                  // 904
			}                                                                                                                   // 905
		}                                                                                                                    // 906
	}                                                                                                                     // 907
                                                                                                                       // 908
	mom._fullCalendar = true; // flag for extended functionality                                                          // 909
                                                                                                                       // 910
	return mom;                                                                                                           // 911
}                                                                                                                      // 912
                                                                                                                       // 913
                                                                                                                       // 914
// A clone method that works with the flags related to our enhanced functionality.                                     // 915
// In the future, use moment.momentProperties                                                                          // 916
newMomentProto.clone = function() {                                                                                    // 917
	var mom = oldMomentProto.clone.apply(this, arguments);                                                                // 918
                                                                                                                       // 919
	// these flags weren't transfered with the clone                                                                      // 920
	transferAmbigs(this, mom);                                                                                            // 921
	if (this._fullCalendar) {                                                                                             // 922
		mom._fullCalendar = true;                                                                                            // 923
	}                                                                                                                     // 924
                                                                                                                       // 925
	return mom;                                                                                                           // 926
};                                                                                                                     // 927
                                                                                                                       // 928
                                                                                                                       // 929
// Week Number                                                                                                         // 930
// -------------------------------------------------------------------------------------------------                   // 931
                                                                                                                       // 932
                                                                                                                       // 933
// Returns the week number, considering the locale's custom week number calcuation                                     // 934
// `weeks` is an alias for `week`                                                                                      // 935
newMomentProto.week = newMomentProto.weeks = function(input) {                                                         // 936
	var weekCalc = (this._locale || this._lang) // works pre-moment-2.8                                                   // 937
		._fullCalendar_weekCalc;                                                                                             // 938
                                                                                                                       // 939
	if (input == null && typeof weekCalc === 'function') { // custom function only works for getter                       // 940
		return weekCalc(this);                                                                                               // 941
	}                                                                                                                     // 942
	else if (weekCalc === 'ISO') {                                                                                        // 943
		return oldMomentProto.isoWeek.apply(this, arguments); // ISO getter/setter                                           // 944
	}                                                                                                                     // 945
                                                                                                                       // 946
	return oldMomentProto.week.apply(this, arguments); // local getter/setter                                             // 947
};                                                                                                                     // 948
                                                                                                                       // 949
                                                                                                                       // 950
// Time-of-day                                                                                                         // 951
// -------------------------------------------------------------------------------------------------                   // 952
                                                                                                                       // 953
// GETTER                                                                                                              // 954
// Returns a Duration with the hours/minutes/seconds/ms values of the moment.                                          // 955
// If the moment has an ambiguous time, a duration of 00:00 will be returned.                                          // 956
//                                                                                                                     // 957
// SETTER                                                                                                              // 958
// You can supply a Duration, a Moment, or a Duration-like argument.                                                   // 959
// When setting the time, and the moment has an ambiguous time, it then becomes unambiguous.                           // 960
newMomentProto.time = function(time) {                                                                                 // 961
                                                                                                                       // 962
	// Fallback to the original method (if there is one) if this moment wasn't created via FullCalendar.                  // 963
	// `time` is a generic enough method name where this precaution is necessary to avoid collisions w/ other plugins.    // 964
	if (!this._fullCalendar) {                                                                                            // 965
		return oldMomentProto.time.apply(this, arguments);                                                                   // 966
	}                                                                                                                     // 967
                                                                                                                       // 968
	if (time == null) { // getter                                                                                         // 969
		return moment.duration({                                                                                             // 970
			hours: this.hours(),                                                                                                // 971
			minutes: this.minutes(),                                                                                            // 972
			seconds: this.seconds(),                                                                                            // 973
			milliseconds: this.milliseconds()                                                                                   // 974
		});                                                                                                                  // 975
	}                                                                                                                     // 976
	else { // setter                                                                                                      // 977
                                                                                                                       // 978
		this._ambigTime = false; // mark that the moment now has a time                                                      // 979
                                                                                                                       // 980
		if (!moment.isDuration(time) && !moment.isMoment(time)) {                                                            // 981
			time = moment.duration(time);                                                                                       // 982
		}                                                                                                                    // 983
                                                                                                                       // 984
		// The day value should cause overflow (so 24 hours becomes 00:00:00 of next day).                                   // 985
		// Only for Duration times, not Moment times.                                                                        // 986
		var dayHours = 0;                                                                                                    // 987
		if (moment.isDuration(time)) {                                                                                       // 988
			dayHours = Math.floor(time.asDays()) * 24;                                                                          // 989
		}                                                                                                                    // 990
                                                                                                                       // 991
		// We need to set the individual fields.                                                                             // 992
		// Can't use startOf('day') then add duration. In case of DST at start of day.                                       // 993
		return this.hours(dayHours + time.hours())                                                                           // 994
			.minutes(time.minutes())                                                                                            // 995
			.seconds(time.seconds())                                                                                            // 996
			.milliseconds(time.milliseconds());                                                                                 // 997
	}                                                                                                                     // 998
};                                                                                                                     // 999
                                                                                                                       // 1000
// Converts the moment to UTC, stripping out its time-of-day and timezone offset,                                      // 1001
// but preserving its YMD. A moment with a stripped time will display no time                                          // 1002
// nor timezone offset when .format() is called.                                                                       // 1003
newMomentProto.stripTime = function() {                                                                                // 1004
	var a;                                                                                                                // 1005
                                                                                                                       // 1006
	if (!this._ambigTime) {                                                                                               // 1007
                                                                                                                       // 1008
		// get the values before any conversion happens                                                                      // 1009
		a = this.toArray(); // array of y/m/d/h/m/s/ms                                                                       // 1010
                                                                                                                       // 1011
		// TODO: use keepLocalTime in the future                                                                             // 1012
		this.utc(); // set the internal UTC flag (will clear the ambig flags)                                                // 1013
		setUTCValues(this, a.slice(0, 3)); // set the year/month/date. time will be zero                                     // 1014
                                                                                                                       // 1015
		// Mark the time as ambiguous. This needs to happen after the .utc() call, which might call .utcOffset(),            // 1016
		// which clears all ambig flags. Same with setUTCValues with moment-timezone.                                        // 1017
		this._ambigTime = true;                                                                                              // 1018
		this._ambigZone = true; // if ambiguous time, also ambiguous timezone offset                                         // 1019
	}                                                                                                                     // 1020
                                                                                                                       // 1021
	return this; // for chaining                                                                                          // 1022
};                                                                                                                     // 1023
                                                                                                                       // 1024
// Returns if the moment has a non-ambiguous time (boolean)                                                            // 1025
newMomentProto.hasTime = function() {                                                                                  // 1026
	return !this._ambigTime;                                                                                              // 1027
};                                                                                                                     // 1028
                                                                                                                       // 1029
                                                                                                                       // 1030
// Timezone                                                                                                            // 1031
// -------------------------------------------------------------------------------------------------                   // 1032
                                                                                                                       // 1033
// Converts the moment to UTC, stripping out its timezone offset, but preserving its                                   // 1034
// YMD and time-of-day. A moment with a stripped timezone offset will display no                                       // 1035
// timezone offset when .format() is called.                                                                           // 1036
// TODO: look into Moment's keepLocalTime functionality                                                                // 1037
newMomentProto.stripZone = function() {                                                                                // 1038
	var a, wasAmbigTime;                                                                                                  // 1039
                                                                                                                       // 1040
	if (!this._ambigZone) {                                                                                               // 1041
                                                                                                                       // 1042
		// get the values before any conversion happens                                                                      // 1043
		a = this.toArray(); // array of y/m/d/h/m/s/ms                                                                       // 1044
		wasAmbigTime = this._ambigTime;                                                                                      // 1045
                                                                                                                       // 1046
		this.utc(); // set the internal UTC flag (might clear the ambig flags, depending on Moment internals)                // 1047
		setUTCValues(this, a); // will set the year/month/date/hours/minutes/seconds/ms                                      // 1048
                                                                                                                       // 1049
		// the above call to .utc()/.utcOffset() unfortunately might clear the ambig flags, so restore                       // 1050
		this._ambigTime = wasAmbigTime || false;                                                                             // 1051
                                                                                                                       // 1052
		// Mark the zone as ambiguous. This needs to happen after the .utc() call, which might call .utcOffset(),            // 1053
		// which clears the ambig flags. Same with setUTCValues with moment-timezone.                                        // 1054
		this._ambigZone = true;                                                                                              // 1055
	}                                                                                                                     // 1056
                                                                                                                       // 1057
	return this; // for chaining                                                                                          // 1058
};                                                                                                                     // 1059
                                                                                                                       // 1060
// Returns of the moment has a non-ambiguous timezone offset (boolean)                                                 // 1061
newMomentProto.hasZone = function() {                                                                                  // 1062
	return !this._ambigZone;                                                                                              // 1063
};                                                                                                                     // 1064
                                                                                                                       // 1065
                                                                                                                       // 1066
// this method implicitly marks a zone                                                                                 // 1067
newMomentProto.local = function() {                                                                                    // 1068
	var a = this.toArray(); // year,month,date,hours,minutes,seconds,ms as an array                                       // 1069
	var wasAmbigZone = this._ambigZone;                                                                                   // 1070
                                                                                                                       // 1071
	oldMomentProto.local.apply(this, arguments);                                                                          // 1072
                                                                                                                       // 1073
	// ensure non-ambiguous                                                                                               // 1074
	// this probably already happened via local() -> utcOffset(), but don't rely on Moment's internals                    // 1075
	this._ambigTime = false;                                                                                              // 1076
	this._ambigZone = false;                                                                                              // 1077
                                                                                                                       // 1078
	if (wasAmbigZone) {                                                                                                   // 1079
		// If the moment was ambiguously zoned, the date fields were stored as UTC.                                          // 1080
		// We want to preserve these, but in local time.                                                                     // 1081
		// TODO: look into Moment's keepLocalTime functionality                                                              // 1082
		setLocalValues(this, a);                                                                                             // 1083
	}                                                                                                                     // 1084
                                                                                                                       // 1085
	return this; // for chaining                                                                                          // 1086
};                                                                                                                     // 1087
                                                                                                                       // 1088
                                                                                                                       // 1089
// implicitly marks a zone                                                                                             // 1090
newMomentProto.utc = function() {                                                                                      // 1091
	oldMomentProto.utc.apply(this, arguments);                                                                            // 1092
                                                                                                                       // 1093
	// ensure non-ambiguous                                                                                               // 1094
	// this probably already happened via utc() -> utcOffset(), but don't rely on Moment's internals                      // 1095
	this._ambigTime = false;                                                                                              // 1096
	this._ambigZone = false;                                                                                              // 1097
                                                                                                                       // 1098
	return this;                                                                                                          // 1099
};                                                                                                                     // 1100
                                                                                                                       // 1101
                                                                                                                       // 1102
// methods for arbitrarily manipulating timezone offset.                                                               // 1103
// should clear time/zone ambiguity when called.                                                                       // 1104
$.each([                                                                                                               // 1105
	'zone', // only in moment-pre-2.9. deprecated afterwards                                                              // 1106
	'utcOffset'                                                                                                           // 1107
], function(i, name) {                                                                                                 // 1108
	if (oldMomentProto[name]) { // original method exists?                                                                // 1109
                                                                                                                       // 1110
		// this method implicitly marks a zone (will probably get called upon .utc() and .local())                           // 1111
		newMomentProto[name] = function(tzo) {                                                                               // 1112
                                                                                                                       // 1113
			if (tzo != null) { // setter                                                                                        // 1114
				// these assignments needs to happen before the original zone method is called.                                    // 1115
				// I forget why, something to do with a browser crash.                                                             // 1116
				this._ambigTime = false;                                                                                           // 1117
				this._ambigZone = false;                                                                                           // 1118
			}                                                                                                                   // 1119
                                                                                                                       // 1120
			return oldMomentProto[name].apply(this, arguments);                                                                 // 1121
		};                                                                                                                   // 1122
	}                                                                                                                     // 1123
});                                                                                                                    // 1124
                                                                                                                       // 1125
                                                                                                                       // 1126
// Formatting                                                                                                          // 1127
// -------------------------------------------------------------------------------------------------                   // 1128
                                                                                                                       // 1129
newMomentProto.format = function() {                                                                                   // 1130
	if (this._fullCalendar && arguments[0]) { // an enhanced moment? and a format string provided?                        // 1131
		return formatDate(this, arguments[0]); // our extended formatting                                                    // 1132
	}                                                                                                                     // 1133
	if (this._ambigTime) {                                                                                                // 1134
		return oldMomentFormat(this, 'YYYY-MM-DD');                                                                          // 1135
	}                                                                                                                     // 1136
	if (this._ambigZone) {                                                                                                // 1137
		return oldMomentFormat(this, 'YYYY-MM-DD[T]HH:mm:ss');                                                               // 1138
	}                                                                                                                     // 1139
	return oldMomentProto.format.apply(this, arguments);                                                                  // 1140
};                                                                                                                     // 1141
                                                                                                                       // 1142
newMomentProto.toISOString = function() {                                                                              // 1143
	if (this._ambigTime) {                                                                                                // 1144
		return oldMomentFormat(this, 'YYYY-MM-DD');                                                                          // 1145
	}                                                                                                                     // 1146
	if (this._ambigZone) {                                                                                                // 1147
		return oldMomentFormat(this, 'YYYY-MM-DD[T]HH:mm:ss');                                                               // 1148
	}                                                                                                                     // 1149
	return oldMomentProto.toISOString.apply(this, arguments);                                                             // 1150
};                                                                                                                     // 1151
                                                                                                                       // 1152
                                                                                                                       // 1153
// Querying                                                                                                            // 1154
// -------------------------------------------------------------------------------------------------                   // 1155
                                                                                                                       // 1156
// Is the moment within the specified range? `end` is exclusive.                                                       // 1157
// FYI, this method is not a standard Moment method, so always do our enhanced logic.                                  // 1158
newMomentProto.isWithin = function(start, end) {                                                                       // 1159
	var a = commonlyAmbiguate([ this, start, end ]);                                                                      // 1160
	return a[0] >= a[1] && a[0] < a[2];                                                                                   // 1161
};                                                                                                                     // 1162
                                                                                                                       // 1163
// When isSame is called with units, timezone ambiguity is normalized before the comparison happens.                   // 1164
// If no units specified, the two moments must be identically the same, with matching ambig flags.                     // 1165
newMomentProto.isSame = function(input, units) {                                                                       // 1166
	var a;                                                                                                                // 1167
                                                                                                                       // 1168
	// only do custom logic if this is an enhanced moment                                                                 // 1169
	if (!this._fullCalendar) {                                                                                            // 1170
		return oldMomentProto.isSame.apply(this, arguments);                                                                 // 1171
	}                                                                                                                     // 1172
                                                                                                                       // 1173
	if (units) {                                                                                                          // 1174
		a = commonlyAmbiguate([ this, input ], true); // normalize timezones but don't erase times                           // 1175
		return oldMomentProto.isSame.call(a[0], a[1], units);                                                                // 1176
	}                                                                                                                     // 1177
	else {                                                                                                                // 1178
		input = fc.moment.parseZone(input); // normalize input                                                               // 1179
		return oldMomentProto.isSame.call(this, input) &&                                                                    // 1180
			Boolean(this._ambigTime) === Boolean(input._ambigTime) &&                                                           // 1181
			Boolean(this._ambigZone) === Boolean(input._ambigZone);                                                             // 1182
	}                                                                                                                     // 1183
};                                                                                                                     // 1184
                                                                                                                       // 1185
// Make these query methods work with ambiguous moments                                                                // 1186
$.each([                                                                                                               // 1187
	'isBefore',                                                                                                           // 1188
	'isAfter'                                                                                                             // 1189
], function(i, methodName) {                                                                                           // 1190
	newMomentProto[methodName] = function(input, units) {                                                                 // 1191
		var a;                                                                                                               // 1192
                                                                                                                       // 1193
		// only do custom logic if this is an enhanced moment                                                                // 1194
		if (!this._fullCalendar) {                                                                                           // 1195
			return oldMomentProto[methodName].apply(this, arguments);                                                           // 1196
		}                                                                                                                    // 1197
                                                                                                                       // 1198
		a = commonlyAmbiguate([ this, input ]);                                                                              // 1199
		return oldMomentProto[methodName].call(a[0], a[1], units);                                                           // 1200
	};                                                                                                                    // 1201
});                                                                                                                    // 1202
                                                                                                                       // 1203
                                                                                                                       // 1204
// Misc Internals                                                                                                      // 1205
// -------------------------------------------------------------------------------------------------                   // 1206
                                                                                                                       // 1207
// given an array of moment-like inputs, return a parallel array w/ moments similarly ambiguated.                      // 1208
// for example, of one moment has ambig time, but not others, all moments will have their time stripped.               // 1209
// set `preserveTime` to `true` to keep times, but only normalize zone ambiguity.                                      // 1210
// returns the original moments if no modifications are necessary.                                                     // 1211
function commonlyAmbiguate(inputs, preserveTime) {                                                                     // 1212
	var anyAmbigTime = false;                                                                                             // 1213
	var anyAmbigZone = false;                                                                                             // 1214
	var len = inputs.length;                                                                                              // 1215
	var moms = [];                                                                                                        // 1216
	var i, mom;                                                                                                           // 1217
                                                                                                                       // 1218
	// parse inputs into real moments and query their ambig flags                                                         // 1219
	for (i = 0; i < len; i++) {                                                                                           // 1220
		mom = inputs[i];                                                                                                     // 1221
		if (!moment.isMoment(mom)) {                                                                                         // 1222
			mom = fc.moment.parseZone(mom);                                                                                     // 1223
		}                                                                                                                    // 1224
		anyAmbigTime = anyAmbigTime || mom._ambigTime;                                                                       // 1225
		anyAmbigZone = anyAmbigZone || mom._ambigZone;                                                                       // 1226
		moms.push(mom);                                                                                                      // 1227
	}                                                                                                                     // 1228
                                                                                                                       // 1229
	// strip each moment down to lowest common ambiguity                                                                  // 1230
	// use clones to avoid modifying the original moments                                                                 // 1231
	for (i = 0; i < len; i++) {                                                                                           // 1232
		mom = moms[i];                                                                                                       // 1233
		if (!preserveTime && anyAmbigTime && !mom._ambigTime) {                                                              // 1234
			moms[i] = mom.clone().stripTime();                                                                                  // 1235
		}                                                                                                                    // 1236
		else if (anyAmbigZone && !mom._ambigZone) {                                                                          // 1237
			moms[i] = mom.clone().stripZone();                                                                                  // 1238
		}                                                                                                                    // 1239
	}                                                                                                                     // 1240
                                                                                                                       // 1241
	return moms;                                                                                                          // 1242
}                                                                                                                      // 1243
                                                                                                                       // 1244
// Transfers all the flags related to ambiguous time/zone from the `src` moment to the `dest` moment                   // 1245
// TODO: look into moment.momentProperties for this.                                                                   // 1246
function transferAmbigs(src, dest) {                                                                                   // 1247
	if (src._ambigTime) {                                                                                                 // 1248
		dest._ambigTime = true;                                                                                              // 1249
	}                                                                                                                     // 1250
	else if (dest._ambigTime) {                                                                                           // 1251
		dest._ambigTime = false;                                                                                             // 1252
	}                                                                                                                     // 1253
                                                                                                                       // 1254
	if (src._ambigZone) {                                                                                                 // 1255
		dest._ambigZone = true;                                                                                              // 1256
	}                                                                                                                     // 1257
	else if (dest._ambigZone) {                                                                                           // 1258
		dest._ambigZone = false;                                                                                             // 1259
	}                                                                                                                     // 1260
}                                                                                                                      // 1261
                                                                                                                       // 1262
                                                                                                                       // 1263
// Sets the year/month/date/etc values of the moment from the given array.                                             // 1264
// Inefficient because it calls each individual setter.                                                                // 1265
function setMomentValues(mom, a) {                                                                                     // 1266
	mom.year(a[0] || 0)                                                                                                   // 1267
		.month(a[1] || 0)                                                                                                    // 1268
		.date(a[2] || 0)                                                                                                     // 1269
		.hours(a[3] || 0)                                                                                                    // 1270
		.minutes(a[4] || 0)                                                                                                  // 1271
		.seconds(a[5] || 0)                                                                                                  // 1272
		.milliseconds(a[6] || 0);                                                                                            // 1273
}                                                                                                                      // 1274
                                                                                                                       // 1275
// Can we set the moment's internal date directly?                                                                     // 1276
allowValueOptimization = '_d' in moment() && 'updateOffset' in moment;                                                 // 1277
                                                                                                                       // 1278
// Utility function. Accepts a moment and an array of the UTC year/month/date/etc values to set.                       // 1279
// Assumes the given moment is already in UTC mode.                                                                    // 1280
setUTCValues = allowValueOptimization ? function(mom, a) {                                                             // 1281
	// simlate what moment's accessors do                                                                                 // 1282
	mom._d.setTime(Date.UTC.apply(Date, a));                                                                              // 1283
	moment.updateOffset(mom, false); // keepTime=false                                                                    // 1284
} : setMomentValues;                                                                                                   // 1285
                                                                                                                       // 1286
// Utility function. Accepts a moment and an array of the local year/month/date/etc values to set.                     // 1287
// Assumes the given moment is already in local mode.                                                                  // 1288
setLocalValues = allowValueOptimization ? function(mom, a) {                                                           // 1289
	// simlate what moment's accessors do                                                                                 // 1290
	mom._d.setTime(+new Date( // FYI, there is now way to apply an array of args to a constructor                         // 1291
		a[0] || 0,                                                                                                           // 1292
		a[1] || 0,                                                                                                           // 1293
		a[2] || 0,                                                                                                           // 1294
		a[3] || 0,                                                                                                           // 1295
		a[4] || 0,                                                                                                           // 1296
		a[5] || 0,                                                                                                           // 1297
		a[6] || 0                                                                                                            // 1298
	));                                                                                                                   // 1299
	moment.updateOffset(mom, false); // keepTime=false                                                                    // 1300
} : setMomentValues;                                                                                                   // 1301
                                                                                                                       // 1302
;;                                                                                                                     // 1303
                                                                                                                       // 1304
// Single Date Formatting                                                                                              // 1305
// -------------------------------------------------------------------------------------------------                   // 1306
                                                                                                                       // 1307
                                                                                                                       // 1308
// call this if you want Moment's original format method to be used                                                    // 1309
function oldMomentFormat(mom, formatStr) {                                                                             // 1310
	return oldMomentProto.format.call(mom, formatStr); // oldMomentProto defined in moment-ext.js                         // 1311
}                                                                                                                      // 1312
                                                                                                                       // 1313
                                                                                                                       // 1314
// Formats `date` with a Moment formatting string, but allow our non-zero areas and                                    // 1315
// additional token.                                                                                                   // 1316
function formatDate(date, formatStr) {                                                                                 // 1317
	return formatDateWithChunks(date, getFormatStringChunks(formatStr));                                                  // 1318
}                                                                                                                      // 1319
                                                                                                                       // 1320
                                                                                                                       // 1321
function formatDateWithChunks(date, chunks) {                                                                          // 1322
	var s = '';                                                                                                           // 1323
	var i;                                                                                                                // 1324
                                                                                                                       // 1325
	for (i=0; i<chunks.length; i++) {                                                                                     // 1326
		s += formatDateWithChunk(date, chunks[i]);                                                                           // 1327
	}                                                                                                                     // 1328
                                                                                                                       // 1329
	return s;                                                                                                             // 1330
}                                                                                                                      // 1331
                                                                                                                       // 1332
                                                                                                                       // 1333
// addition formatting tokens we want recognized                                                                       // 1334
var tokenOverrides = {                                                                                                 // 1335
	t: function(date) { // "a" or "p"                                                                                     // 1336
		return oldMomentFormat(date, 'a').charAt(0);                                                                         // 1337
	},                                                                                                                    // 1338
	T: function(date) { // "A" or "P"                                                                                     // 1339
		return oldMomentFormat(date, 'A').charAt(0);                                                                         // 1340
	}                                                                                                                     // 1341
};                                                                                                                     // 1342
                                                                                                                       // 1343
                                                                                                                       // 1344
function formatDateWithChunk(date, chunk) {                                                                            // 1345
	var token;                                                                                                            // 1346
	var maybeStr;                                                                                                         // 1347
                                                                                                                       // 1348
	if (typeof chunk === 'string') { // a literal string                                                                  // 1349
		return chunk;                                                                                                        // 1350
	}                                                                                                                     // 1351
	else if ((token = chunk.token)) { // a token, like "YYYY"                                                             // 1352
		if (tokenOverrides[token]) {                                                                                         // 1353
			return tokenOverrides[token](date); // use our custom token                                                         // 1354
		}                                                                                                                    // 1355
		return oldMomentFormat(date, token);                                                                                 // 1356
	}                                                                                                                     // 1357
	else if (chunk.maybe) { // a grouping of other chunks that must be non-zero                                           // 1358
		maybeStr = formatDateWithChunks(date, chunk.maybe);                                                                  // 1359
		if (maybeStr.match(/[1-9]/)) {                                                                                       // 1360
			return maybeStr;                                                                                                    // 1361
		}                                                                                                                    // 1362
	}                                                                                                                     // 1363
                                                                                                                       // 1364
	return '';                                                                                                            // 1365
}                                                                                                                      // 1366
                                                                                                                       // 1367
                                                                                                                       // 1368
// Date Range Formatting                                                                                               // 1369
// -------------------------------------------------------------------------------------------------                   // 1370
// TODO: make it work with timezone offset                                                                             // 1371
                                                                                                                       // 1372
// Using a formatting string meant for a single date, generate a range string, like                                    // 1373
// "Sep 2 - 9 2013", that intelligently inserts a separator where the dates differ.                                    // 1374
// If the dates are the same as far as the format string is concerned, just return a single                            // 1375
// rendering of one date, without any separator.                                                                       // 1376
function formatRange(date1, date2, formatStr, separator, isRTL) {                                                      // 1377
	var localeData;                                                                                                       // 1378
                                                                                                                       // 1379
	date1 = fc.moment.parseZone(date1);                                                                                   // 1380
	date2 = fc.moment.parseZone(date2);                                                                                   // 1381
                                                                                                                       // 1382
	localeData = (date1.localeData || date1.lang).call(date1); // works with moment-pre-2.8                               // 1383
                                                                                                                       // 1384
	// Expand localized format strings, like "LL" -> "MMMM D YYYY"                                                        // 1385
	formatStr = localeData.longDateFormat(formatStr) || formatStr;                                                        // 1386
	// BTW, this is not important for `formatDate` because it is impossible to put custom tokens                          // 1387
	// or non-zero areas in Moment's localized format strings.                                                            // 1388
                                                                                                                       // 1389
	separator = separator || ' - ';                                                                                       // 1390
                                                                                                                       // 1391
	return formatRangeWithChunks(                                                                                         // 1392
		date1,                                                                                                               // 1393
		date2,                                                                                                               // 1394
		getFormatStringChunks(formatStr),                                                                                    // 1395
		separator,                                                                                                           // 1396
		isRTL                                                                                                                // 1397
	);                                                                                                                    // 1398
}                                                                                                                      // 1399
fc.formatRange = formatRange; // expose                                                                                // 1400
                                                                                                                       // 1401
                                                                                                                       // 1402
function formatRangeWithChunks(date1, date2, chunks, separator, isRTL) {                                               // 1403
	var chunkStr; // the rendering of the chunk                                                                           // 1404
	var leftI;                                                                                                            // 1405
	var leftStr = '';                                                                                                     // 1406
	var rightI;                                                                                                           // 1407
	var rightStr = '';                                                                                                    // 1408
	var middleI;                                                                                                          // 1409
	var middleStr1 = '';                                                                                                  // 1410
	var middleStr2 = '';                                                                                                  // 1411
	var middleStr = '';                                                                                                   // 1412
                                                                                                                       // 1413
	// Start at the leftmost side of the formatting string and continue until you hit a token                             // 1414
	// that is not the same between dates.                                                                                // 1415
	for (leftI=0; leftI<chunks.length; leftI++) {                                                                         // 1416
		chunkStr = formatSimilarChunk(date1, date2, chunks[leftI]);                                                          // 1417
		if (chunkStr === false) {                                                                                            // 1418
			break;                                                                                                              // 1419
		}                                                                                                                    // 1420
		leftStr += chunkStr;                                                                                                 // 1421
	}                                                                                                                     // 1422
                                                                                                                       // 1423
	// Similarly, start at the rightmost side of the formatting string and move left                                      // 1424
	for (rightI=chunks.length-1; rightI>leftI; rightI--) {                                                                // 1425
		chunkStr = formatSimilarChunk(date1, date2, chunks[rightI]);                                                         // 1426
		if (chunkStr === false) {                                                                                            // 1427
			break;                                                                                                              // 1428
		}                                                                                                                    // 1429
		rightStr = chunkStr + rightStr;                                                                                      // 1430
	}                                                                                                                     // 1431
                                                                                                                       // 1432
	// The area in the middle is different for both of the dates.                                                         // 1433
	// Collect them distinctly so we can jam them together later.                                                         // 1434
	for (middleI=leftI; middleI<=rightI; middleI++) {                                                                     // 1435
		middleStr1 += formatDateWithChunk(date1, chunks[middleI]);                                                           // 1436
		middleStr2 += formatDateWithChunk(date2, chunks[middleI]);                                                           // 1437
	}                                                                                                                     // 1438
                                                                                                                       // 1439
	if (middleStr1 || middleStr2) {                                                                                       // 1440
		if (isRTL) {                                                                                                         // 1441
			middleStr = middleStr2 + separator + middleStr1;                                                                    // 1442
		}                                                                                                                    // 1443
		else {                                                                                                               // 1444
			middleStr = middleStr1 + separator + middleStr2;                                                                    // 1445
		}                                                                                                                    // 1446
	}                                                                                                                     // 1447
                                                                                                                       // 1448
	return leftStr + middleStr + rightStr;                                                                                // 1449
}                                                                                                                      // 1450
                                                                                                                       // 1451
                                                                                                                       // 1452
var similarUnitMap = {                                                                                                 // 1453
	Y: 'year',                                                                                                            // 1454
	M: 'month',                                                                                                           // 1455
	D: 'day', // day of month                                                                                             // 1456
	d: 'day', // day of week                                                                                              // 1457
	// prevents a separator between anything time-related...                                                              // 1458
	A: 'second', // AM/PM                                                                                                 // 1459
	a: 'second', // am/pm                                                                                                 // 1460
	T: 'second', // A/P                                                                                                   // 1461
	t: 'second', // a/p                                                                                                   // 1462
	H: 'second', // hour (24)                                                                                             // 1463
	h: 'second', // hour (12)                                                                                             // 1464
	m: 'second', // minute                                                                                                // 1465
	s: 'second' // second                                                                                                 // 1466
};                                                                                                                     // 1467
// TODO: week maybe?                                                                                                   // 1468
                                                                                                                       // 1469
                                                                                                                       // 1470
// Given a formatting chunk, and given that both dates are similar in the regard the                                   // 1471
// formatting chunk is concerned, format date1 against `chunk`. Otherwise, return `false`.                             // 1472
function formatSimilarChunk(date1, date2, chunk) {                                                                     // 1473
	var token;                                                                                                            // 1474
	var unit;                                                                                                             // 1475
                                                                                                                       // 1476
	if (typeof chunk === 'string') { // a literal string                                                                  // 1477
		return chunk;                                                                                                        // 1478
	}                                                                                                                     // 1479
	else if ((token = chunk.token)) {                                                                                     // 1480
		unit = similarUnitMap[token.charAt(0)];                                                                              // 1481
		// are the dates the same for this unit of measurement?                                                              // 1482
		if (unit && date1.isSame(date2, unit)) {                                                                             // 1483
			return oldMomentFormat(date1, token); // would be the same if we used `date2`                                       // 1484
			// BTW, don't support custom tokens                                                                                 // 1485
		}                                                                                                                    // 1486
	}                                                                                                                     // 1487
                                                                                                                       // 1488
	return false; // the chunk is NOT the same for the two dates                                                          // 1489
	// BTW, don't support splitting on non-zero areas                                                                     // 1490
}                                                                                                                      // 1491
                                                                                                                       // 1492
                                                                                                                       // 1493
// Chunking Utils                                                                                                      // 1494
// -------------------------------------------------------------------------------------------------                   // 1495
                                                                                                                       // 1496
                                                                                                                       // 1497
var formatStringChunkCache = {};                                                                                       // 1498
                                                                                                                       // 1499
                                                                                                                       // 1500
function getFormatStringChunks(formatStr) {                                                                            // 1501
	if (formatStr in formatStringChunkCache) {                                                                            // 1502
		return formatStringChunkCache[formatStr];                                                                            // 1503
	}                                                                                                                     // 1504
	return (formatStringChunkCache[formatStr] = chunkFormatString(formatStr));                                            // 1505
}                                                                                                                      // 1506
                                                                                                                       // 1507
                                                                                                                       // 1508
// Break the formatting string into an array of chunks                                                                 // 1509
function chunkFormatString(formatStr) {                                                                                // 1510
	var chunks = [];                                                                                                      // 1511
	var chunker = /\[([^\]]*)\]|\(([^\)]*)\)|(LTS|LT|(\w)\4*o?)|([^\w\[\(]+)/g; // TODO: more descrimination              // 1512
	var match;                                                                                                            // 1513
                                                                                                                       // 1514
	while ((match = chunker.exec(formatStr))) {                                                                           // 1515
		if (match[1]) { // a literal string inside [ ... ]                                                                   // 1516
			chunks.push(match[1]);                                                                                              // 1517
		}                                                                                                                    // 1518
		else if (match[2]) { // non-zero formatting inside ( ... )                                                           // 1519
			chunks.push({ maybe: chunkFormatString(match[2]) });                                                                // 1520
		}                                                                                                                    // 1521
		else if (match[3]) { // a formatting token                                                                           // 1522
			chunks.push({ token: match[3] });                                                                                   // 1523
		}                                                                                                                    // 1524
		else if (match[5]) { // an unenclosed literal string                                                                 // 1525
			chunks.push(match[5]);                                                                                              // 1526
		}                                                                                                                    // 1527
	}                                                                                                                     // 1528
                                                                                                                       // 1529
	return chunks;                                                                                                        // 1530
}                                                                                                                      // 1531
                                                                                                                       // 1532
;;                                                                                                                     // 1533
                                                                                                                       // 1534
fc.Class = Class; // export                                                                                            // 1535
                                                                                                                       // 1536
// class that all other classes will inherit from                                                                      // 1537
function Class() { }                                                                                                   // 1538
                                                                                                                       // 1539
// called upon a class to create a subclass                                                                            // 1540
Class.extend = function(members) {                                                                                     // 1541
	var superClass = this;                                                                                                // 1542
	var subClass;                                                                                                         // 1543
                                                                                                                       // 1544
	members = members || {};                                                                                              // 1545
                                                                                                                       // 1546
	// ensure a constructor for the subclass, forwarding all arguments to the super-constructor if it doesn't exist       // 1547
	if (hasOwnProp(members, 'constructor')) {                                                                             // 1548
		subClass = members.constructor;                                                                                      // 1549
	}                                                                                                                     // 1550
	if (typeof subClass !== 'function') {                                                                                 // 1551
		subClass = members.constructor = function() {                                                                        // 1552
			superClass.apply(this, arguments);                                                                                  // 1553
		};                                                                                                                   // 1554
	}                                                                                                                     // 1555
                                                                                                                       // 1556
	// build the base prototype for the subclass, which is an new object chained to the superclass's prototype            // 1557
	subClass.prototype = createObject(superClass.prototype);                                                              // 1558
                                                                                                                       // 1559
	// copy each member variable/method onto the the subclass's prototype                                                 // 1560
	copyOwnProps(members, subClass.prototype);                                                                            // 1561
	copyNativeMethods(members, subClass.prototype); // hack for IE8                                                       // 1562
                                                                                                                       // 1563
	// copy over all class variables/methods to the subclass, such as `extend` and `mixin`                                // 1564
	copyOwnProps(superClass, subClass);                                                                                   // 1565
                                                                                                                       // 1566
	return subClass;                                                                                                      // 1567
};                                                                                                                     // 1568
                                                                                                                       // 1569
// adds new member variables/methods to the class's prototype.                                                         // 1570
// can be called with another class, or a plain object hash containing new members.                                    // 1571
Class.mixin = function(members) {                                                                                      // 1572
	copyOwnProps(members.prototype || members, this.prototype);                                                           // 1573
};                                                                                                                     // 1574
;;                                                                                                                     // 1575
                                                                                                                       // 1576
/* A rectangular panel that is absolutely positioned over other content                                                // 1577
------------------------------------------------------------------------------------------------------------------------
Options:                                                                                                               // 1579
	- className (string)                                                                                                  // 1580
	- content (HTML string or jQuery element set)                                                                         // 1581
	- parentEl                                                                                                            // 1582
	- top                                                                                                                 // 1583
	- left                                                                                                                // 1584
	- right (the x coord of where the right edge should be. not a "CSS" right)                                            // 1585
	- autoHide (boolean)                                                                                                  // 1586
	- show (callback)                                                                                                     // 1587
	- hide (callback)                                                                                                     // 1588
*/                                                                                                                     // 1589
                                                                                                                       // 1590
var Popover = Class.extend({                                                                                           // 1591
                                                                                                                       // 1592
	isHidden: true,                                                                                                       // 1593
	options: null,                                                                                                        // 1594
	el: null, // the container element for the popover. generated by this object                                          // 1595
	documentMousedownProxy: null, // document mousedown handler bound to `this`                                           // 1596
	margin: 10, // the space required between the popover and the edges of the scroll container                           // 1597
                                                                                                                       // 1598
                                                                                                                       // 1599
	constructor: function(options) {                                                                                      // 1600
		this.options = options || {};                                                                                        // 1601
	},                                                                                                                    // 1602
                                                                                                                       // 1603
                                                                                                                       // 1604
	// Shows the popover on the specified position. Renders it if not already                                             // 1605
	show: function() {                                                                                                    // 1606
		if (this.isHidden) {                                                                                                 // 1607
			if (!this.el) {                                                                                                     // 1608
				this.render();                                                                                                     // 1609
			}                                                                                                                   // 1610
			this.el.show();                                                                                                     // 1611
			this.position();                                                                                                    // 1612
			this.isHidden = false;                                                                                              // 1613
			this.trigger('show');                                                                                               // 1614
		}                                                                                                                    // 1615
	},                                                                                                                    // 1616
                                                                                                                       // 1617
                                                                                                                       // 1618
	// Hides the popover, through CSS, but does not remove it from the DOM                                                // 1619
	hide: function() {                                                                                                    // 1620
		if (!this.isHidden) {                                                                                                // 1621
			this.el.hide();                                                                                                     // 1622
			this.isHidden = true;                                                                                               // 1623
			this.trigger('hide');                                                                                               // 1624
		}                                                                                                                    // 1625
	},                                                                                                                    // 1626
                                                                                                                       // 1627
                                                                                                                       // 1628
	// Creates `this.el` and renders content inside of it                                                                 // 1629
	render: function() {                                                                                                  // 1630
		var _this = this;                                                                                                    // 1631
		var options = this.options;                                                                                          // 1632
                                                                                                                       // 1633
		this.el = $('<div class="fc-popover"/>')                                                                             // 1634
			.addClass(options.className || '')                                                                                  // 1635
			.css({                                                                                                              // 1636
				// position initially to the top left to avoid creating scrollbars                                                 // 1637
				top: 0,                                                                                                            // 1638
				left: 0                                                                                                            // 1639
			})                                                                                                                  // 1640
			.append(options.content)                                                                                            // 1641
			.appendTo(options.parentEl);                                                                                        // 1642
                                                                                                                       // 1643
		// when a click happens on anything inside with a 'fc-close' className, hide the popover                             // 1644
		this.el.on('click', '.fc-close', function() {                                                                        // 1645
			_this.hide();                                                                                                       // 1646
		});                                                                                                                  // 1647
                                                                                                                       // 1648
		if (options.autoHide) {                                                                                              // 1649
			$(document).on('mousedown', this.documentMousedownProxy = proxy(this, 'documentMousedown'));                        // 1650
		}                                                                                                                    // 1651
	},                                                                                                                    // 1652
                                                                                                                       // 1653
                                                                                                                       // 1654
	// Triggered when the user clicks *anywhere* in the document, for the autoHide feature                                // 1655
	documentMousedown: function(ev) {                                                                                     // 1656
		// only hide the popover if the click happened outside the popover                                                   // 1657
		if (this.el && !$(ev.target).closest(this.el).length) {                                                              // 1658
			this.hide();                                                                                                        // 1659
		}                                                                                                                    // 1660
	},                                                                                                                    // 1661
                                                                                                                       // 1662
                                                                                                                       // 1663
	// Hides and unregisters any handlers                                                                                 // 1664
	destroy: function() {                                                                                                 // 1665
		this.hide();                                                                                                         // 1666
                                                                                                                       // 1667
		if (this.el) {                                                                                                       // 1668
			this.el.remove();                                                                                                   // 1669
			this.el = null;                                                                                                     // 1670
		}                                                                                                                    // 1671
                                                                                                                       // 1672
		$(document).off('mousedown', this.documentMousedownProxy);                                                           // 1673
	},                                                                                                                    // 1674
                                                                                                                       // 1675
                                                                                                                       // 1676
	// Positions the popover optimally, using the top/left/right options                                                  // 1677
	position: function() {                                                                                                // 1678
		var options = this.options;                                                                                          // 1679
		var origin = this.el.offsetParent().offset();                                                                        // 1680
		var width = this.el.outerWidth();                                                                                    // 1681
		var height = this.el.outerHeight();                                                                                  // 1682
		var windowEl = $(window);                                                                                            // 1683
		var viewportEl = getScrollParent(this.el);                                                                           // 1684
		var viewportTop;                                                                                                     // 1685
		var viewportLeft;                                                                                                    // 1686
		var viewportOffset;                                                                                                  // 1687
		var top; // the "position" (not "offset") values for the popover                                                     // 1688
		var left; //                                                                                                         // 1689
                                                                                                                       // 1690
		// compute top and left                                                                                              // 1691
		top = options.top || 0;                                                                                              // 1692
		if (options.left !== undefined) {                                                                                    // 1693
			left = options.left;                                                                                                // 1694
		}                                                                                                                    // 1695
		else if (options.right !== undefined) {                                                                              // 1696
			left = options.right - width; // derive the left value from the right value                                         // 1697
		}                                                                                                                    // 1698
		else {                                                                                                               // 1699
			left = 0;                                                                                                           // 1700
		}                                                                                                                    // 1701
                                                                                                                       // 1702
		if (viewportEl.is(window) || viewportEl.is(document)) { // normalize getScrollParent's result                        // 1703
			viewportEl = windowEl;                                                                                              // 1704
			viewportTop = 0; // the window is always at the top left                                                            // 1705
			viewportLeft = 0; // (and .offset() won't work if called here)                                                      // 1706
		}                                                                                                                    // 1707
		else {                                                                                                               // 1708
			viewportOffset = viewportEl.offset();                                                                               // 1709
			viewportTop = viewportOffset.top;                                                                                   // 1710
			viewportLeft = viewportOffset.left;                                                                                 // 1711
		}                                                                                                                    // 1712
                                                                                                                       // 1713
		// if the window is scrolled, it causes the visible area to be further down                                          // 1714
		viewportTop += windowEl.scrollTop();                                                                                 // 1715
		viewportLeft += windowEl.scrollLeft();                                                                               // 1716
                                                                                                                       // 1717
		// constrain to the view port. if constrained by two edges, give precedence to top/left                              // 1718
		if (options.viewportConstrain !== false) {                                                                           // 1719
			top = Math.min(top, viewportTop + viewportEl.outerHeight() - height - this.margin);                                 // 1720
			top = Math.max(top, viewportTop + this.margin);                                                                     // 1721
			left = Math.min(left, viewportLeft + viewportEl.outerWidth() - width - this.margin);                                // 1722
			left = Math.max(left, viewportLeft + this.margin);                                                                  // 1723
		}                                                                                                                    // 1724
                                                                                                                       // 1725
		this.el.css({                                                                                                        // 1726
			top: top - origin.top,                                                                                              // 1727
			left: left - origin.left                                                                                            // 1728
		});                                                                                                                  // 1729
	},                                                                                                                    // 1730
                                                                                                                       // 1731
                                                                                                                       // 1732
	// Triggers a callback. Calls a function in the option hash of the same name.                                         // 1733
	// Arguments beyond the first `name` are forwarded on.                                                                // 1734
	// TODO: better code reuse for this. Repeat code                                                                      // 1735
	trigger: function(name) {                                                                                             // 1736
		if (this.options[name]) {                                                                                            // 1737
			this.options[name].apply(this, Array.prototype.slice.call(arguments, 1));                                           // 1738
		}                                                                                                                    // 1739
	}                                                                                                                     // 1740
                                                                                                                       // 1741
});                                                                                                                    // 1742
                                                                                                                       // 1743
;;                                                                                                                     // 1744
                                                                                                                       // 1745
/* A "coordinate map" converts pixel coordinates into an associated cell, which has an associated date                 // 1746
------------------------------------------------------------------------------------------------------------------------
Common interface:                                                                                                      // 1748
                                                                                                                       // 1749
	CoordMap.prototype = {                                                                                                // 1750
		build: function() {},                                                                                                // 1751
		getCell: function(x, y) {}                                                                                           // 1752
	};                                                                                                                    // 1753
                                                                                                                       // 1754
*/                                                                                                                     // 1755
                                                                                                                       // 1756
/* Coordinate map for a grid component                                                                                 // 1757
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 1759
var GridCoordMap = Class.extend({                                                                                      // 1760
                                                                                                                       // 1761
	grid: null, // reference to the Grid                                                                                  // 1762
	rowCoords: null, // array of {top,bottom} objects                                                                     // 1763
	colCoords: null, // array of {left,right} objects                                                                     // 1764
                                                                                                                       // 1765
	containerEl: null, // container element that all coordinates are constrained to. optionally assigned                  // 1766
	bounds: null,                                                                                                         // 1767
                                                                                                                       // 1768
                                                                                                                       // 1769
	constructor: function(grid) {                                                                                         // 1770
		this.grid = grid;                                                                                                    // 1771
	},                                                                                                                    // 1772
                                                                                                                       // 1773
                                                                                                                       // 1774
	// Queries the grid for the coordinates of all the cells                                                              // 1775
	build: function() {                                                                                                   // 1776
		this.rowCoords = this.grid.computeRowCoords();                                                                       // 1777
		this.colCoords = this.grid.computeColCoords();                                                                       // 1778
		this.computeBounds();                                                                                                // 1779
	},                                                                                                                    // 1780
                                                                                                                       // 1781
                                                                                                                       // 1782
	// Clears the coordinates data to free up memory                                                                      // 1783
	clear: function() {                                                                                                   // 1784
		this.rowCoords = null;                                                                                               // 1785
		this.colCoords = null;                                                                                               // 1786
	},                                                                                                                    // 1787
                                                                                                                       // 1788
                                                                                                                       // 1789
	// Given a coordinate of the document, gets the associated cell. If no cell is underneath, returns null               // 1790
	getCell: function(x, y) {                                                                                             // 1791
		var rowCoords = this.rowCoords;                                                                                      // 1792
		var rowCnt = rowCoords.length;                                                                                       // 1793
		var colCoords = this.colCoords;                                                                                      // 1794
		var colCnt = colCoords.length;                                                                                       // 1795
		var hitRow = null;                                                                                                   // 1796
		var hitCol = null;                                                                                                   // 1797
		var i, coords;                                                                                                       // 1798
		var cell;                                                                                                            // 1799
                                                                                                                       // 1800
		if (this.inBounds(x, y)) {                                                                                           // 1801
                                                                                                                       // 1802
			for (i = 0; i < rowCnt; i++) {                                                                                      // 1803
				coords = rowCoords[i];                                                                                             // 1804
				if (y >= coords.top && y < coords.bottom) {                                                                        // 1805
					hitRow = i;                                                                                                       // 1806
					break;                                                                                                            // 1807
				}                                                                                                                  // 1808
			}                                                                                                                   // 1809
                                                                                                                       // 1810
			for (i = 0; i < colCnt; i++) {                                                                                      // 1811
				coords = colCoords[i];                                                                                             // 1812
				if (x >= coords.left && x < coords.right) {                                                                        // 1813
					hitCol = i;                                                                                                       // 1814
					break;                                                                                                            // 1815
				}                                                                                                                  // 1816
			}                                                                                                                   // 1817
                                                                                                                       // 1818
			if (hitRow !== null && hitCol !== null) {                                                                           // 1819
                                                                                                                       // 1820
				cell = this.grid.getCell(hitRow, hitCol); // expected to return a fresh object we can modify                       // 1821
				cell.grid = this.grid; // for CellDragListener's isCellsEqual. dragging between grids                              // 1822
                                                                                                                       // 1823
				// make the coordinates available on the cell object                                                               // 1824
				$.extend(cell, rowCoords[hitRow], colCoords[hitCol]);                                                              // 1825
                                                                                                                       // 1826
				return cell;                                                                                                       // 1827
			}                                                                                                                   // 1828
		}                                                                                                                    // 1829
                                                                                                                       // 1830
		return null;                                                                                                         // 1831
	},                                                                                                                    // 1832
                                                                                                                       // 1833
                                                                                                                       // 1834
	// If there is a containerEl, compute the bounds into min/max values                                                  // 1835
	computeBounds: function() {                                                                                           // 1836
		this.bounds = this.containerEl ?                                                                                     // 1837
			getClientRect(this.containerEl) : // area within scrollbars                                                         // 1838
			null;                                                                                                               // 1839
	},                                                                                                                    // 1840
                                                                                                                       // 1841
                                                                                                                       // 1842
	// Determines if the given coordinates are in bounds. If no `containerEl`, always true                                // 1843
	inBounds: function(x, y) {                                                                                            // 1844
		var bounds = this.bounds;                                                                                            // 1845
                                                                                                                       // 1846
		if (bounds) {                                                                                                        // 1847
			return x >= bounds.left && x < bounds.right && y >= bounds.top && y < bounds.bottom;                                // 1848
		}                                                                                                                    // 1849
                                                                                                                       // 1850
		return true;                                                                                                         // 1851
	}                                                                                                                     // 1852
                                                                                                                       // 1853
});                                                                                                                    // 1854
                                                                                                                       // 1855
                                                                                                                       // 1856
/* Coordinate map that is a combination of multiple other coordinate maps                                              // 1857
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 1859
var ComboCoordMap = Class.extend({                                                                                     // 1860
                                                                                                                       // 1861
	coordMaps: null, // an array of CoordMaps                                                                             // 1862
                                                                                                                       // 1863
                                                                                                                       // 1864
	constructor: function(coordMaps) {                                                                                    // 1865
		this.coordMaps = coordMaps;                                                                                          // 1866
	},                                                                                                                    // 1867
                                                                                                                       // 1868
                                                                                                                       // 1869
	// Builds all coordMaps                                                                                               // 1870
	build: function() {                                                                                                   // 1871
		var coordMaps = this.coordMaps;                                                                                      // 1872
		var i;                                                                                                               // 1873
                                                                                                                       // 1874
		for (i = 0; i < coordMaps.length; i++) {                                                                             // 1875
			coordMaps[i].build();                                                                                               // 1876
		}                                                                                                                    // 1877
	},                                                                                                                    // 1878
                                                                                                                       // 1879
                                                                                                                       // 1880
	// Queries all coordMaps for the cell underneath the given coordinates, returning the first result                    // 1881
	getCell: function(x, y) {                                                                                             // 1882
		var coordMaps = this.coordMaps;                                                                                      // 1883
		var cell = null;                                                                                                     // 1884
		var i;                                                                                                               // 1885
                                                                                                                       // 1886
		for (i = 0; i < coordMaps.length && !cell; i++) {                                                                    // 1887
			cell = coordMaps[i].getCell(x, y);                                                                                  // 1888
		}                                                                                                                    // 1889
                                                                                                                       // 1890
		return cell;                                                                                                         // 1891
	},                                                                                                                    // 1892
                                                                                                                       // 1893
                                                                                                                       // 1894
	// Clears all coordMaps                                                                                               // 1895
	clear: function() {                                                                                                   // 1896
		var coordMaps = this.coordMaps;                                                                                      // 1897
		var i;                                                                                                               // 1898
                                                                                                                       // 1899
		for (i = 0; i < coordMaps.length; i++) {                                                                             // 1900
			coordMaps[i].clear();                                                                                               // 1901
		}                                                                                                                    // 1902
	}                                                                                                                     // 1903
                                                                                                                       // 1904
});                                                                                                                    // 1905
                                                                                                                       // 1906
;;                                                                                                                     // 1907
                                                                                                                       // 1908
/* Tracks a drag's mouse movement, firing various handlers                                                             // 1909
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 1911
var DragListener = fc.DragListener = Class.extend({                                                                    // 1912
                                                                                                                       // 1913
	options: null,                                                                                                        // 1914
                                                                                                                       // 1915
	isListening: false,                                                                                                   // 1916
	isDragging: false,                                                                                                    // 1917
                                                                                                                       // 1918
	// coordinates of the initial mousedown                                                                               // 1919
	originX: null,                                                                                                        // 1920
	originY: null,                                                                                                        // 1921
                                                                                                                       // 1922
	// handler attached to the document, bound to the DragListener's `this`                                               // 1923
	mousemoveProxy: null,                                                                                                 // 1924
	mouseupProxy: null,                                                                                                   // 1925
                                                                                                                       // 1926
	// for IE8 bug-fighting behavior, for now                                                                             // 1927
	subjectEl: null, // the element being draged. optional                                                                // 1928
	subjectHref: null,                                                                                                    // 1929
                                                                                                                       // 1930
	scrollEl: null,                                                                                                       // 1931
	scrollBounds: null, // { top, bottom, left, right }                                                                   // 1932
	scrollTopVel: null, // pixels per second                                                                              // 1933
	scrollLeftVel: null, // pixels per second                                                                             // 1934
	scrollIntervalId: null, // ID of setTimeout for scrolling animation loop                                              // 1935
	scrollHandlerProxy: null, // this-scoped function for handling when scrollEl is scrolled                              // 1936
                                                                                                                       // 1937
	scrollSensitivity: 30, // pixels from edge for scrolling to start                                                     // 1938
	scrollSpeed: 200, // pixels per second, at maximum speed                                                              // 1939
	scrollIntervalMs: 50, // millisecond wait between scroll increment                                                    // 1940
                                                                                                                       // 1941
                                                                                                                       // 1942
	constructor: function(options) {                                                                                      // 1943
		options = options || {};                                                                                             // 1944
		this.options = options;                                                                                              // 1945
		this.subjectEl = options.subjectEl;                                                                                  // 1946
	},                                                                                                                    // 1947
                                                                                                                       // 1948
                                                                                                                       // 1949
	// Call this when the user does a mousedown. Will probably lead to startListening                                     // 1950
	mousedown: function(ev) {                                                                                             // 1951
		if (isPrimaryMouseButton(ev)) {                                                                                      // 1952
                                                                                                                       // 1953
			ev.preventDefault(); // prevents native selection in most browsers                                                  // 1954
                                                                                                                       // 1955
			this.startListening(ev);                                                                                            // 1956
                                                                                                                       // 1957
			// start the drag immediately if there is no minimum distance for a drag start                                      // 1958
			if (!this.options.distance) {                                                                                       // 1959
				this.startDrag(ev);                                                                                                // 1960
			}                                                                                                                   // 1961
		}                                                                                                                    // 1962
	},                                                                                                                    // 1963
                                                                                                                       // 1964
                                                                                                                       // 1965
	// Call this to start tracking mouse movements                                                                        // 1966
	startListening: function(ev) {                                                                                        // 1967
		var scrollParent;                                                                                                    // 1968
                                                                                                                       // 1969
		if (!this.isListening) {                                                                                             // 1970
                                                                                                                       // 1971
			// grab scroll container and attach handler                                                                         // 1972
			if (ev && this.options.scroll) {                                                                                    // 1973
				scrollParent = getScrollParent($(ev.target));                                                                      // 1974
				if (!scrollParent.is(window) && !scrollParent.is(document)) {                                                      // 1975
					this.scrollEl = scrollParent;                                                                                     // 1976
                                                                                                                       // 1977
					// scope to `this`, and use `debounce` to make sure rapid calls don't happen                                      // 1978
					this.scrollHandlerProxy = debounce(proxy(this, 'scrollHandler'), 100);                                            // 1979
					this.scrollEl.on('scroll', this.scrollHandlerProxy);                                                              // 1980
				}                                                                                                                  // 1981
			}                                                                                                                   // 1982
                                                                                                                       // 1983
			$(document)                                                                                                         // 1984
				.on('mousemove', this.mousemoveProxy = proxy(this, 'mousemove'))                                                   // 1985
				.on('mouseup', this.mouseupProxy = proxy(this, 'mouseup'))                                                         // 1986
				.on('selectstart', this.preventDefault); // prevents native selection in IE<=8                                     // 1987
                                                                                                                       // 1988
			if (ev) {                                                                                                           // 1989
				this.originX = ev.pageX;                                                                                           // 1990
				this.originY = ev.pageY;                                                                                           // 1991
			}                                                                                                                   // 1992
			else {                                                                                                              // 1993
				// if no starting information was given, origin will be the topleft corner of the screen.                          // 1994
				// if so, dx/dy in the future will be the absolute coordinates.                                                    // 1995
				this.originX = 0;                                                                                                  // 1996
				this.originY = 0;                                                                                                  // 1997
			}                                                                                                                   // 1998
                                                                                                                       // 1999
			this.isListening = true;                                                                                            // 2000
			this.listenStart(ev);                                                                                               // 2001
		}                                                                                                                    // 2002
	},                                                                                                                    // 2003
                                                                                                                       // 2004
                                                                                                                       // 2005
	// Called when drag listening has started (but a real drag has not necessarily began)                                 // 2006
	listenStart: function(ev) {                                                                                           // 2007
		this.trigger('listenStart', ev);                                                                                     // 2008
	},                                                                                                                    // 2009
                                                                                                                       // 2010
                                                                                                                       // 2011
	// Called when the user moves the mouse                                                                               // 2012
	mousemove: function(ev) {                                                                                             // 2013
		var dx = ev.pageX - this.originX;                                                                                    // 2014
		var dy = ev.pageY - this.originY;                                                                                    // 2015
		var minDistance;                                                                                                     // 2016
		var distanceSq; // current distance from the origin, squared                                                         // 2017
                                                                                                                       // 2018
		if (!this.isDragging) { // if not already dragging...                                                                // 2019
			// then start the drag if the minimum distance criteria is met                                                      // 2020
			minDistance = this.options.distance || 1;                                                                           // 2021
			distanceSq = dx * dx + dy * dy;                                                                                     // 2022
			if (distanceSq >= minDistance * minDistance) { // use pythagorean theorem                                           // 2023
				this.startDrag(ev);                                                                                                // 2024
			}                                                                                                                   // 2025
		}                                                                                                                    // 2026
                                                                                                                       // 2027
		if (this.isDragging) {                                                                                               // 2028
			this.drag(dx, dy, ev); // report a drag, even if this mousemove initiated the drag                                  // 2029
		}                                                                                                                    // 2030
	},                                                                                                                    // 2031
                                                                                                                       // 2032
                                                                                                                       // 2033
	// Call this to initiate a legitimate drag.                                                                           // 2034
	// This function is called internally from this class, but can also be called explicitly from outside                 // 2035
	startDrag: function(ev) {                                                                                             // 2036
                                                                                                                       // 2037
		if (!this.isListening) { // startDrag must have manually initiated                                                   // 2038
			this.startListening();                                                                                              // 2039
		}                                                                                                                    // 2040
                                                                                                                       // 2041
		if (!this.isDragging) {                                                                                              // 2042
			this.isDragging = true;                                                                                             // 2043
			this.dragStart(ev);                                                                                                 // 2044
		}                                                                                                                    // 2045
	},                                                                                                                    // 2046
                                                                                                                       // 2047
                                                                                                                       // 2048
	// Called when the actual drag has started (went beyond minDistance)                                                  // 2049
	dragStart: function(ev) {                                                                                             // 2050
		var subjectEl = this.subjectEl;                                                                                      // 2051
                                                                                                                       // 2052
		this.trigger('dragStart', ev);                                                                                       // 2053
                                                                                                                       // 2054
		// remove a mousedown'd <a>'s href so it is not visited (IE8 bug)                                                    // 2055
		if ((this.subjectHref = subjectEl ? subjectEl.attr('href') : null)) {                                                // 2056
			subjectEl.removeAttr('href');                                                                                       // 2057
		}                                                                                                                    // 2058
	},                                                                                                                    // 2059
                                                                                                                       // 2060
                                                                                                                       // 2061
	// Called while the mouse is being moved and when we know a legitimate drag is taking place                           // 2062
	drag: function(dx, dy, ev) {                                                                                          // 2063
		this.trigger('drag', dx, dy, ev);                                                                                    // 2064
		this.updateScroll(ev); // will possibly cause scrolling                                                              // 2065
	},                                                                                                                    // 2066
                                                                                                                       // 2067
                                                                                                                       // 2068
	// Called when the user does a mouseup                                                                                // 2069
	mouseup: function(ev) {                                                                                               // 2070
		this.stopListening(ev);                                                                                              // 2071
	},                                                                                                                    // 2072
                                                                                                                       // 2073
                                                                                                                       // 2074
	// Called when the drag is over. Will not cause listening to stop however.                                            // 2075
	// A concluding 'cellOut' event will NOT be triggered.                                                                // 2076
	stopDrag: function(ev) {                                                                                              // 2077
		if (this.isDragging) {                                                                                               // 2078
			this.stopScrolling();                                                                                               // 2079
			this.dragStop(ev);                                                                                                  // 2080
			this.isDragging = false;                                                                                            // 2081
		}                                                                                                                    // 2082
	},                                                                                                                    // 2083
                                                                                                                       // 2084
                                                                                                                       // 2085
	// Called when dragging has been stopped                                                                              // 2086
	dragStop: function(ev) {                                                                                              // 2087
		var _this = this;                                                                                                    // 2088
                                                                                                                       // 2089
		this.trigger('dragStop', ev);                                                                                        // 2090
                                                                                                                       // 2091
		// restore a mousedown'd <a>'s href (for IE8 bug)                                                                    // 2092
		setTimeout(function() { // must be outside of the click's execution                                                  // 2093
			if (_this.subjectHref) {                                                                                            // 2094
				_this.subjectEl.attr('href', _this.subjectHref);                                                                   // 2095
			}                                                                                                                   // 2096
		}, 0);                                                                                                               // 2097
	},                                                                                                                    // 2098
                                                                                                                       // 2099
                                                                                                                       // 2100
	// Call this to stop listening to the user's mouse events                                                             // 2101
	stopListening: function(ev) {                                                                                         // 2102
		this.stopDrag(ev); // if there's a current drag, kill it                                                             // 2103
                                                                                                                       // 2104
		if (this.isListening) {                                                                                              // 2105
                                                                                                                       // 2106
			// remove the scroll handler if there is a scrollEl                                                                 // 2107
			if (this.scrollEl) {                                                                                                // 2108
				this.scrollEl.off('scroll', this.scrollHandlerProxy);                                                              // 2109
				this.scrollHandlerProxy = null;                                                                                    // 2110
			}                                                                                                                   // 2111
                                                                                                                       // 2112
			$(document)                                                                                                         // 2113
				.off('mousemove', this.mousemoveProxy)                                                                             // 2114
				.off('mouseup', this.mouseupProxy)                                                                                 // 2115
				.off('selectstart', this.preventDefault);                                                                          // 2116
                                                                                                                       // 2117
			this.mousemoveProxy = null;                                                                                         // 2118
			this.mouseupProxy = null;                                                                                           // 2119
                                                                                                                       // 2120
			this.isListening = false;                                                                                           // 2121
			this.listenStop(ev);                                                                                                // 2122
		}                                                                                                                    // 2123
	},                                                                                                                    // 2124
                                                                                                                       // 2125
                                                                                                                       // 2126
	// Called when drag listening has stopped                                                                             // 2127
	listenStop: function(ev) {                                                                                            // 2128
		this.trigger('listenStop', ev);                                                                                      // 2129
	},                                                                                                                    // 2130
                                                                                                                       // 2131
                                                                                                                       // 2132
	// Triggers a callback. Calls a function in the option hash of the same name.                                         // 2133
	// Arguments beyond the first `name` are forwarded on.                                                                // 2134
	trigger: function(name) {                                                                                             // 2135
		if (this.options[name]) {                                                                                            // 2136
			this.options[name].apply(this, Array.prototype.slice.call(arguments, 1));                                           // 2137
		}                                                                                                                    // 2138
	},                                                                                                                    // 2139
                                                                                                                       // 2140
                                                                                                                       // 2141
	// Stops a given mouse event from doing it's native browser action. In our case, text selection.                      // 2142
	preventDefault: function(ev) {                                                                                        // 2143
		ev.preventDefault();                                                                                                 // 2144
	},                                                                                                                    // 2145
                                                                                                                       // 2146
                                                                                                                       // 2147
	/* Scrolling                                                                                                          // 2148
	------------------------------------------------------------------------------------------------------------------*/  // 2149
                                                                                                                       // 2150
                                                                                                                       // 2151
	// Computes and stores the bounding rectangle of scrollEl                                                             // 2152
	computeScrollBounds: function() {                                                                                     // 2153
		var el = this.scrollEl;                                                                                              // 2154
                                                                                                                       // 2155
		this.scrollBounds = el ? getOuterRect(el) : null;                                                                    // 2156
			// TODO: use getClientRect in future. but prevents auto scrolling when on top of scrollbars                         // 2157
	},                                                                                                                    // 2158
                                                                                                                       // 2159
                                                                                                                       // 2160
	// Called when the dragging is in progress and scrolling should be updated                                            // 2161
	updateScroll: function(ev) {                                                                                          // 2162
		var sensitivity = this.scrollSensitivity;                                                                            // 2163
		var bounds = this.scrollBounds;                                                                                      // 2164
		var topCloseness, bottomCloseness;                                                                                   // 2165
		var leftCloseness, rightCloseness;                                                                                   // 2166
		var topVel = 0;                                                                                                      // 2167
		var leftVel = 0;                                                                                                     // 2168
                                                                                                                       // 2169
		if (bounds) { // only scroll if scrollEl exists                                                                      // 2170
                                                                                                                       // 2171
			// compute closeness to edges. valid range is from 0.0 - 1.0                                                        // 2172
			topCloseness = (sensitivity - (ev.pageY - bounds.top)) / sensitivity;                                               // 2173
			bottomCloseness = (sensitivity - (bounds.bottom - ev.pageY)) / sensitivity;                                         // 2174
			leftCloseness = (sensitivity - (ev.pageX - bounds.left)) / sensitivity;                                             // 2175
			rightCloseness = (sensitivity - (bounds.right - ev.pageX)) / sensitivity;                                           // 2176
                                                                                                                       // 2177
			// translate vertical closeness into velocity.                                                                      // 2178
			// mouse must be completely in bounds for velocity to happen.                                                       // 2179
			if (topCloseness >= 0 && topCloseness <= 1) {                                                                       // 2180
				topVel = topCloseness * this.scrollSpeed * -1; // negative. for scrolling up                                       // 2181
			}                                                                                                                   // 2182
			else if (bottomCloseness >= 0 && bottomCloseness <= 1) {                                                            // 2183
				topVel = bottomCloseness * this.scrollSpeed;                                                                       // 2184
			}                                                                                                                   // 2185
                                                                                                                       // 2186
			// translate horizontal closeness into velocity                                                                     // 2187
			if (leftCloseness >= 0 && leftCloseness <= 1) {                                                                     // 2188
				leftVel = leftCloseness * this.scrollSpeed * -1; // negative. for scrolling left                                   // 2189
			}                                                                                                                   // 2190
			else if (rightCloseness >= 0 && rightCloseness <= 1) {                                                              // 2191
				leftVel = rightCloseness * this.scrollSpeed;                                                                       // 2192
			}                                                                                                                   // 2193
		}                                                                                                                    // 2194
                                                                                                                       // 2195
		this.setScrollVel(topVel, leftVel);                                                                                  // 2196
	},                                                                                                                    // 2197
                                                                                                                       // 2198
                                                                                                                       // 2199
	// Sets the speed-of-scrolling for the scrollEl                                                                       // 2200
	setScrollVel: function(topVel, leftVel) {                                                                             // 2201
                                                                                                                       // 2202
		this.scrollTopVel = topVel;                                                                                          // 2203
		this.scrollLeftVel = leftVel;                                                                                        // 2204
                                                                                                                       // 2205
		this.constrainScrollVel(); // massages into realistic values                                                         // 2206
                                                                                                                       // 2207
		// if there is non-zero velocity, and an animation loop hasn't already started, then START                           // 2208
		if ((this.scrollTopVel || this.scrollLeftVel) && !this.scrollIntervalId) {                                           // 2209
			this.scrollIntervalId = setInterval(                                                                                // 2210
				proxy(this, 'scrollIntervalFunc'), // scope to `this`                                                              // 2211
				this.scrollIntervalMs                                                                                              // 2212
			);                                                                                                                  // 2213
		}                                                                                                                    // 2214
	},                                                                                                                    // 2215
                                                                                                                       // 2216
                                                                                                                       // 2217
	// Forces scrollTopVel and scrollLeftVel to be zero if scrolling has already gone all the way                         // 2218
	constrainScrollVel: function() {                                                                                      // 2219
		var el = this.scrollEl;                                                                                              // 2220
                                                                                                                       // 2221
		if (this.scrollTopVel < 0) { // scrolling up?                                                                        // 2222
			if (el.scrollTop() <= 0) { // already scrolled all the way up?                                                      // 2223
				this.scrollTopVel = 0;                                                                                             // 2224
			}                                                                                                                   // 2225
		}                                                                                                                    // 2226
		else if (this.scrollTopVel > 0) { // scrolling down?                                                                 // 2227
			if (el.scrollTop() + el[0].clientHeight >= el[0].scrollHeight) { // already scrolled all the way down?              // 2228
				this.scrollTopVel = 0;                                                                                             // 2229
			}                                                                                                                   // 2230
		}                                                                                                                    // 2231
                                                                                                                       // 2232
		if (this.scrollLeftVel < 0) { // scrolling left?                                                                     // 2233
			if (el.scrollLeft() <= 0) { // already scrolled all the left?                                                       // 2234
				this.scrollLeftVel = 0;                                                                                            // 2235
			}                                                                                                                   // 2236
		}                                                                                                                    // 2237
		else if (this.scrollLeftVel > 0) { // scrolling right?                                                               // 2238
			if (el.scrollLeft() + el[0].clientWidth >= el[0].scrollWidth) { // already scrolled all the way right?              // 2239
				this.scrollLeftVel = 0;                                                                                            // 2240
			}                                                                                                                   // 2241
		}                                                                                                                    // 2242
	},                                                                                                                    // 2243
                                                                                                                       // 2244
                                                                                                                       // 2245
	// This function gets called during every iteration of the scrolling animation loop                                   // 2246
	scrollIntervalFunc: function() {                                                                                      // 2247
		var el = this.scrollEl;                                                                                              // 2248
		var frac = this.scrollIntervalMs / 1000; // considering animation frequency, what the vel should be mult'd by        // 2249
                                                                                                                       // 2250
		// change the value of scrollEl's scroll                                                                             // 2251
		if (this.scrollTopVel) {                                                                                             // 2252
			el.scrollTop(el.scrollTop() + this.scrollTopVel * frac);                                                            // 2253
		}                                                                                                                    // 2254
		if (this.scrollLeftVel) {                                                                                            // 2255
			el.scrollLeft(el.scrollLeft() + this.scrollLeftVel * frac);                                                         // 2256
		}                                                                                                                    // 2257
                                                                                                                       // 2258
		this.constrainScrollVel(); // since the scroll values changed, recompute the velocities                              // 2259
                                                                                                                       // 2260
		// if scrolled all the way, which causes the vels to be zero, stop the animation loop                                // 2261
		if (!this.scrollTopVel && !this.scrollLeftVel) {                                                                     // 2262
			this.stopScrolling();                                                                                               // 2263
		}                                                                                                                    // 2264
	},                                                                                                                    // 2265
                                                                                                                       // 2266
                                                                                                                       // 2267
	// Kills any existing scrolling animation loop                                                                        // 2268
	stopScrolling: function() {                                                                                           // 2269
		if (this.scrollIntervalId) {                                                                                         // 2270
			clearInterval(this.scrollIntervalId);                                                                               // 2271
			this.scrollIntervalId = null;                                                                                       // 2272
                                                                                                                       // 2273
			// when all done with scrolling, recompute positions since they probably changed                                    // 2274
			this.scrollStop();                                                                                                  // 2275
		}                                                                                                                    // 2276
	},                                                                                                                    // 2277
                                                                                                                       // 2278
                                                                                                                       // 2279
	// Get called when the scrollEl is scrolled (NOTE: this is delayed via debounce)                                      // 2280
	scrollHandler: function() {                                                                                           // 2281
		// recompute all coordinates, but *only* if this is *not* part of our scrolling animation                            // 2282
		if (!this.scrollIntervalId) {                                                                                        // 2283
			this.scrollStop();                                                                                                  // 2284
		}                                                                                                                    // 2285
	},                                                                                                                    // 2286
                                                                                                                       // 2287
                                                                                                                       // 2288
	// Called when scrolling has stopped, whether through auto scroll, or the user scrolling                              // 2289
	scrollStop: function() {                                                                                              // 2290
	}                                                                                                                     // 2291
                                                                                                                       // 2292
});                                                                                                                    // 2293
                                                                                                                       // 2294
;;                                                                                                                     // 2295
                                                                                                                       // 2296
/* Tracks mouse movements over a CoordMap and raises events about which cell the mouse is over.                        // 2297
------------------------------------------------------------------------------------------------------------------------
options:                                                                                                               // 2299
- subjectEl                                                                                                            // 2300
- subjectCenter                                                                                                        // 2301
*/                                                                                                                     // 2302
                                                                                                                       // 2303
var CellDragListener = DragListener.extend({                                                                           // 2304
                                                                                                                       // 2305
	coordMap: null, // converts coordinates to date cells                                                                 // 2306
	origCell: null, // the cell the mouse was over when listening started                                                 // 2307
	cell: null, // the cell the mouse is over                                                                             // 2308
	coordAdjust: null, // delta that will be added to the mouse coordinates when computing collisions                     // 2309
                                                                                                                       // 2310
                                                                                                                       // 2311
	constructor: function(coordMap, options) {                                                                            // 2312
		DragListener.prototype.constructor.call(this, options); // call the super-constructor                                // 2313
                                                                                                                       // 2314
		this.coordMap = coordMap;                                                                                            // 2315
	},                                                                                                                    // 2316
                                                                                                                       // 2317
                                                                                                                       // 2318
	// Called when drag listening starts (but a real drag has not necessarily began).                                     // 2319
	// ev might be undefined if dragging was started manually.                                                            // 2320
	listenStart: function(ev) {                                                                                           // 2321
		var subjectEl = this.subjectEl;                                                                                      // 2322
		var subjectRect;                                                                                                     // 2323
		var origPoint;                                                                                                       // 2324
		var point;                                                                                                           // 2325
                                                                                                                       // 2326
		DragListener.prototype.listenStart.apply(this, arguments); // call the super-method                                  // 2327
                                                                                                                       // 2328
		this.computeCoords();                                                                                                // 2329
                                                                                                                       // 2330
		if (ev) {                                                                                                            // 2331
			origPoint = { left: ev.pageX, top: ev.pageY };                                                                      // 2332
			point = origPoint;                                                                                                  // 2333
                                                                                                                       // 2334
			// constrain the point to bounds of the element being dragged                                                       // 2335
			if (subjectEl) {                                                                                                    // 2336
				subjectRect = getOuterRect(subjectEl); // used for centering as well                                               // 2337
				point = constrainPoint(point, subjectRect);                                                                        // 2338
			}                                                                                                                   // 2339
                                                                                                                       // 2340
			this.origCell = this.getCell(point.left, point.top);                                                                // 2341
                                                                                                                       // 2342
			// treat the center of the subject as the collision point?                                                          // 2343
			if (subjectEl && this.options.subjectCenter) {                                                                      // 2344
                                                                                                                       // 2345
				// only consider the area the subject overlaps the cell. best for large subjects                                   // 2346
				if (this.origCell) {                                                                                               // 2347
					subjectRect = intersectRects(this.origCell, subjectRect) ||                                                       // 2348
						subjectRect; // in case there is no intersection                                                                 // 2349
				}                                                                                                                  // 2350
                                                                                                                       // 2351
				point = getRectCenter(subjectRect);                                                                                // 2352
			}                                                                                                                   // 2353
                                                                                                                       // 2354
			this.coordAdjust = diffPoints(point, origPoint); // point - origPoint                                               // 2355
		}                                                                                                                    // 2356
		else {                                                                                                               // 2357
			this.origCell = null;                                                                                               // 2358
			this.coordAdjust = null;                                                                                            // 2359
		}                                                                                                                    // 2360
	},                                                                                                                    // 2361
                                                                                                                       // 2362
                                                                                                                       // 2363
	// Recomputes the drag-critical positions of elements                                                                 // 2364
	computeCoords: function() {                                                                                           // 2365
		this.coordMap.build();                                                                                               // 2366
		this.computeScrollBounds();                                                                                          // 2367
	},                                                                                                                    // 2368
                                                                                                                       // 2369
                                                                                                                       // 2370
	// Called when the actual drag has started                                                                            // 2371
	dragStart: function(ev) {                                                                                             // 2372
		var cell;                                                                                                            // 2373
                                                                                                                       // 2374
		DragListener.prototype.dragStart.apply(this, arguments); // call the super-method                                    // 2375
                                                                                                                       // 2376
		cell = this.getCell(ev.pageX, ev.pageY); // might be different from this.origCell if the min-distance is large       // 2377
                                                                                                                       // 2378
		// report the initial cell the mouse is over                                                                         // 2379
		// especially important if no min-distance and drag starts immediately                                               // 2380
		if (cell) {                                                                                                          // 2381
			this.cellOver(cell);                                                                                                // 2382
		}                                                                                                                    // 2383
	},                                                                                                                    // 2384
                                                                                                                       // 2385
                                                                                                                       // 2386
	// Called when the drag moves                                                                                         // 2387
	drag: function(dx, dy, ev) {                                                                                          // 2388
		var cell;                                                                                                            // 2389
                                                                                                                       // 2390
		DragListener.prototype.drag.apply(this, arguments); // call the super-method                                         // 2391
                                                                                                                       // 2392
		cell = this.getCell(ev.pageX, ev.pageY);                                                                             // 2393
                                                                                                                       // 2394
		if (!isCellsEqual(cell, this.cell)) { // a different cell than before?                                               // 2395
			if (this.cell) {                                                                                                    // 2396
				this.cellOut();                                                                                                    // 2397
			}                                                                                                                   // 2398
			if (cell) {                                                                                                         // 2399
				this.cellOver(cell);                                                                                               // 2400
			}                                                                                                                   // 2401
		}                                                                                                                    // 2402
	},                                                                                                                    // 2403
                                                                                                                       // 2404
                                                                                                                       // 2405
	// Called when dragging has been stopped                                                                              // 2406
	dragStop: function() {                                                                                                // 2407
		this.cellDone();                                                                                                     // 2408
		DragListener.prototype.dragStop.apply(this, arguments); // call the super-method                                     // 2409
	},                                                                                                                    // 2410
                                                                                                                       // 2411
                                                                                                                       // 2412
	// Called when a the mouse has just moved over a new cell                                                             // 2413
	cellOver: function(cell) {                                                                                            // 2414
		this.cell = cell;                                                                                                    // 2415
		this.trigger('cellOver', cell, isCellsEqual(cell, this.origCell), this.origCell);                                    // 2416
	},                                                                                                                    // 2417
                                                                                                                       // 2418
                                                                                                                       // 2419
	// Called when the mouse has just moved out of a cell                                                                 // 2420
	cellOut: function() {                                                                                                 // 2421
		if (this.cell) {                                                                                                     // 2422
			this.trigger('cellOut', this.cell);                                                                                 // 2423
			this.cellDone();                                                                                                    // 2424
			this.cell = null;                                                                                                   // 2425
		}                                                                                                                    // 2426
	},                                                                                                                    // 2427
                                                                                                                       // 2428
                                                                                                                       // 2429
	// Called after a cellOut. Also called before a dragStop                                                              // 2430
	cellDone: function() {                                                                                                // 2431
		if (this.cell) {                                                                                                     // 2432
			this.trigger('cellDone', this.cell);                                                                                // 2433
		}                                                                                                                    // 2434
	},                                                                                                                    // 2435
                                                                                                                       // 2436
                                                                                                                       // 2437
	// Called when drag listening has stopped                                                                             // 2438
	listenStop: function() {                                                                                              // 2439
		DragListener.prototype.listenStop.apply(this, arguments); // call the super-method                                   // 2440
                                                                                                                       // 2441
		this.origCell = this.cell = null;                                                                                    // 2442
		this.coordMap.clear();                                                                                               // 2443
	},                                                                                                                    // 2444
                                                                                                                       // 2445
                                                                                                                       // 2446
	// Called when scrolling has stopped, whether through auto scroll, or the user scrolling                              // 2447
	scrollStop: function() {                                                                                              // 2448
		DragListener.prototype.scrollStop.apply(this, arguments); // call the super-method                                   // 2449
                                                                                                                       // 2450
		this.computeCoords(); // cells' absolute positions will be in new places. recompute                                  // 2451
	},                                                                                                                    // 2452
                                                                                                                       // 2453
                                                                                                                       // 2454
	// Gets the cell underneath the coordinates for the given mouse event                                                 // 2455
	getCell: function(left, top) {                                                                                        // 2456
                                                                                                                       // 2457
		if (this.coordAdjust) {                                                                                              // 2458
			left += this.coordAdjust.left;                                                                                      // 2459
			top += this.coordAdjust.top;                                                                                        // 2460
		}                                                                                                                    // 2461
                                                                                                                       // 2462
		return this.coordMap.getCell(left, top);                                                                             // 2463
	}                                                                                                                     // 2464
                                                                                                                       // 2465
});                                                                                                                    // 2466
                                                                                                                       // 2467
                                                                                                                       // 2468
// Returns `true` if the cells are identically equal. `false` otherwise.                                               // 2469
// They must have the same row, col, and be from the same grid.                                                        // 2470
// Two null values will be considered equal, as two "out of the grid" states are the same.                             // 2471
function isCellsEqual(cell1, cell2) {                                                                                  // 2472
                                                                                                                       // 2473
	if (!cell1 && !cell2) {                                                                                               // 2474
		return true;                                                                                                         // 2475
	}                                                                                                                     // 2476
                                                                                                                       // 2477
	if (cell1 && cell2) {                                                                                                 // 2478
		return cell1.grid === cell2.grid &&                                                                                  // 2479
			cell1.row === cell2.row &&                                                                                          // 2480
			cell1.col === cell2.col;                                                                                            // 2481
	}                                                                                                                     // 2482
                                                                                                                       // 2483
	return false;                                                                                                         // 2484
}                                                                                                                      // 2485
                                                                                                                       // 2486
;;                                                                                                                     // 2487
                                                                                                                       // 2488
/* Creates a clone of an element and lets it track the mouse as it moves                                               // 2489
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 2491
var MouseFollower = Class.extend({                                                                                     // 2492
                                                                                                                       // 2493
	options: null,                                                                                                        // 2494
                                                                                                                       // 2495
	sourceEl: null, // the element that will be cloned and made to look like it is dragging                               // 2496
	el: null, // the clone of `sourceEl` that will track the mouse                                                        // 2497
	parentEl: null, // the element that `el` (the clone) will be attached to                                              // 2498
                                                                                                                       // 2499
	// the initial position of el, relative to the offset parent. made to match the initial offset of sourceEl            // 2500
	top0: null,                                                                                                           // 2501
	left0: null,                                                                                                          // 2502
                                                                                                                       // 2503
	// the initial position of the mouse                                                                                  // 2504
	mouseY0: null,                                                                                                        // 2505
	mouseX0: null,                                                                                                        // 2506
                                                                                                                       // 2507
	// the number of pixels the mouse has moved from its initial position                                                 // 2508
	topDelta: null,                                                                                                       // 2509
	leftDelta: null,                                                                                                      // 2510
                                                                                                                       // 2511
	mousemoveProxy: null, // document mousemove handler, bound to the MouseFollower's `this`                              // 2512
                                                                                                                       // 2513
	isFollowing: false,                                                                                                   // 2514
	isHidden: false,                                                                                                      // 2515
	isAnimating: false, // doing the revert animation?                                                                    // 2516
                                                                                                                       // 2517
	constructor: function(sourceEl, options) {                                                                            // 2518
		this.options = options = options || {};                                                                              // 2519
		this.sourceEl = sourceEl;                                                                                            // 2520
		this.parentEl = options.parentEl ? $(options.parentEl) : sourceEl.parent(); // default to sourceEl's parent          // 2521
	},                                                                                                                    // 2522
                                                                                                                       // 2523
                                                                                                                       // 2524
	// Causes the element to start following the mouse                                                                    // 2525
	start: function(ev) {                                                                                                 // 2526
		if (!this.isFollowing) {                                                                                             // 2527
			this.isFollowing = true;                                                                                            // 2528
                                                                                                                       // 2529
			this.mouseY0 = ev.pageY;                                                                                            // 2530
			this.mouseX0 = ev.pageX;                                                                                            // 2531
			this.topDelta = 0;                                                                                                  // 2532
			this.leftDelta = 0;                                                                                                 // 2533
                                                                                                                       // 2534
			if (!this.isHidden) {                                                                                               // 2535
				this.updatePosition();                                                                                             // 2536
			}                                                                                                                   // 2537
                                                                                                                       // 2538
			$(document).on('mousemove', this.mousemoveProxy = proxy(this, 'mousemove'));                                        // 2539
		}                                                                                                                    // 2540
	},                                                                                                                    // 2541
                                                                                                                       // 2542
                                                                                                                       // 2543
	// Causes the element to stop following the mouse. If shouldRevert is true, will animate back to original position.   // 2544
	// `callback` gets invoked when the animation is complete. If no animation, it is invoked immediately.                // 2545
	stop: function(shouldRevert, callback) {                                                                              // 2546
		var _this = this;                                                                                                    // 2547
		var revertDuration = this.options.revertDuration;                                                                    // 2548
                                                                                                                       // 2549
		function complete() {                                                                                                // 2550
			this.isAnimating = false;                                                                                           // 2551
			_this.destroyEl();                                                                                                  // 2552
                                                                                                                       // 2553
			this.top0 = this.left0 = null; // reset state for future updatePosition calls                                       // 2554
                                                                                                                       // 2555
			if (callback) {                                                                                                     // 2556
				callback();                                                                                                        // 2557
			}                                                                                                                   // 2558
		}                                                                                                                    // 2559
                                                                                                                       // 2560
		if (this.isFollowing && !this.isAnimating) { // disallow more than one stop animation at a time                      // 2561
			this.isFollowing = false;                                                                                           // 2562
                                                                                                                       // 2563
			$(document).off('mousemove', this.mousemoveProxy);                                                                  // 2564
                                                                                                                       // 2565
			if (shouldRevert && revertDuration && !this.isHidden) { // do a revert animation?                                   // 2566
				this.isAnimating = true;                                                                                           // 2567
				this.el.animate({                                                                                                  // 2568
					top: this.top0,                                                                                                   // 2569
					left: this.left0                                                                                                  // 2570
				}, {                                                                                                               // 2571
					duration: revertDuration,                                                                                         // 2572
					complete: complete                                                                                                // 2573
				});                                                                                                                // 2574
			}                                                                                                                   // 2575
			else {                                                                                                              // 2576
				complete();                                                                                                        // 2577
			}                                                                                                                   // 2578
		}                                                                                                                    // 2579
	},                                                                                                                    // 2580
                                                                                                                       // 2581
                                                                                                                       // 2582
	// Gets the tracking element. Create it if necessary                                                                  // 2583
	getEl: function() {                                                                                                   // 2584
		var el = this.el;                                                                                                    // 2585
                                                                                                                       // 2586
		if (!el) {                                                                                                           // 2587
			this.sourceEl.width(); // hack to force IE8 to compute correct bounding box                                         // 2588
			el = this.el = this.sourceEl.clone()                                                                                // 2589
				.css({                                                                                                             // 2590
					position: 'absolute',                                                                                             // 2591
					visibility: '', // in case original element was hidden (commonly through hideEvents())                            // 2592
					display: this.isHidden ? 'none' : '', // for when initially hidden                                                // 2593
					margin: 0,                                                                                                        // 2594
					right: 'auto', // erase and set width instead                                                                     // 2595
					bottom: 'auto', // erase and set height instead                                                                   // 2596
					width: this.sourceEl.width(), // explicit height in case there was a 'right' value                                // 2597
					height: this.sourceEl.height(), // explicit width in case there was a 'bottom' value                              // 2598
					opacity: this.options.opacity || '',                                                                              // 2599
					zIndex: this.options.zIndex                                                                                       // 2600
				})                                                                                                                 // 2601
				.appendTo(this.parentEl);                                                                                          // 2602
		}                                                                                                                    // 2603
                                                                                                                       // 2604
		return el;                                                                                                           // 2605
	},                                                                                                                    // 2606
                                                                                                                       // 2607
                                                                                                                       // 2608
	// Removes the tracking element if it has already been created                                                        // 2609
	destroyEl: function() {                                                                                               // 2610
		if (this.el) {                                                                                                       // 2611
			this.el.remove();                                                                                                   // 2612
			this.el = null;                                                                                                     // 2613
		}                                                                                                                    // 2614
	},                                                                                                                    // 2615
                                                                                                                       // 2616
                                                                                                                       // 2617
	// Update the CSS position of the tracking element                                                                    // 2618
	updatePosition: function() {                                                                                          // 2619
		var sourceOffset;                                                                                                    // 2620
		var origin;                                                                                                          // 2621
                                                                                                                       // 2622
		this.getEl(); // ensure this.el                                                                                      // 2623
                                                                                                                       // 2624
		// make sure origin info was computed                                                                                // 2625
		if (this.top0 === null) {                                                                                            // 2626
			this.sourceEl.width(); // hack to force IE8 to compute correct bounding box                                         // 2627
			sourceOffset = this.sourceEl.offset();                                                                              // 2628
			origin = this.el.offsetParent().offset();                                                                           // 2629
			this.top0 = sourceOffset.top - origin.top;                                                                          // 2630
			this.left0 = sourceOffset.left - origin.left;                                                                       // 2631
		}                                                                                                                    // 2632
                                                                                                                       // 2633
		this.el.css({                                                                                                        // 2634
			top: this.top0 + this.topDelta,                                                                                     // 2635
			left: this.left0 + this.leftDelta                                                                                   // 2636
		});                                                                                                                  // 2637
	},                                                                                                                    // 2638
                                                                                                                       // 2639
                                                                                                                       // 2640
	// Gets called when the user moves the mouse                                                                          // 2641
	mousemove: function(ev) {                                                                                             // 2642
		this.topDelta = ev.pageY - this.mouseY0;                                                                             // 2643
		this.leftDelta = ev.pageX - this.mouseX0;                                                                            // 2644
                                                                                                                       // 2645
		if (!this.isHidden) {                                                                                                // 2646
			this.updatePosition();                                                                                              // 2647
		}                                                                                                                    // 2648
	},                                                                                                                    // 2649
                                                                                                                       // 2650
                                                                                                                       // 2651
	// Temporarily makes the tracking element invisible. Can be called before following starts                            // 2652
	hide: function() {                                                                                                    // 2653
		if (!this.isHidden) {                                                                                                // 2654
			this.isHidden = true;                                                                                               // 2655
			if (this.el) {                                                                                                      // 2656
				this.el.hide();                                                                                                    // 2657
			}                                                                                                                   // 2658
		}                                                                                                                    // 2659
	},                                                                                                                    // 2660
                                                                                                                       // 2661
                                                                                                                       // 2662
	// Show the tracking element after it has been temporarily hidden                                                     // 2663
	show: function() {                                                                                                    // 2664
		if (this.isHidden) {                                                                                                 // 2665
			this.isHidden = false;                                                                                              // 2666
			this.updatePosition();                                                                                              // 2667
			this.getEl().show();                                                                                                // 2668
		}                                                                                                                    // 2669
	}                                                                                                                     // 2670
                                                                                                                       // 2671
});                                                                                                                    // 2672
                                                                                                                       // 2673
;;                                                                                                                     // 2674
                                                                                                                       // 2675
/* A utility class for rendering <tr> rows.                                                                            // 2676
----------------------------------------------------------------------------------------------------------------------*/
// It leverages methods of the subclass and the View to determine custom rendering behavior for each row "type"        // 2678
// (such as highlight rows, day rows, helper rows, etc).                                                               // 2679
                                                                                                                       // 2680
var RowRenderer = Class.extend({                                                                                       // 2681
                                                                                                                       // 2682
	view: null, // a View object                                                                                          // 2683
	isRTL: null, // shortcut to the view's isRTL option                                                                   // 2684
	cellHtml: '<td/>', // plain default HTML used for a cell when no other is available                                   // 2685
                                                                                                                       // 2686
                                                                                                                       // 2687
	constructor: function(view) {                                                                                         // 2688
		this.view = view;                                                                                                    // 2689
		this.isRTL = view.opt('isRTL');                                                                                      // 2690
	},                                                                                                                    // 2691
                                                                                                                       // 2692
                                                                                                                       // 2693
	// Renders the HTML for a row, leveraging custom cell-HTML-renderers based on the `rowType`.                          // 2694
	// Also applies the "intro" and "outro" cells, which are specified by the subclass and views.                         // 2695
	// `row` is an optional row number.                                                                                   // 2696
	rowHtml: function(rowType, row) {                                                                                     // 2697
		var renderCell = this.getHtmlRenderer('cell', rowType);                                                              // 2698
		var rowCellHtml = '';                                                                                                // 2699
		var col;                                                                                                             // 2700
		var cell;                                                                                                            // 2701
                                                                                                                       // 2702
		row = row || 0;                                                                                                      // 2703
                                                                                                                       // 2704
		for (col = 0; col < this.colCnt; col++) {                                                                            // 2705
			cell = this.getCell(row, col);                                                                                      // 2706
			rowCellHtml += renderCell(cell);                                                                                    // 2707
		}                                                                                                                    // 2708
                                                                                                                       // 2709
		rowCellHtml = this.bookendCells(rowCellHtml, rowType, row); // apply intro and outro                                 // 2710
                                                                                                                       // 2711
		return '<tr>' + rowCellHtml + '</tr>';                                                                               // 2712
	},                                                                                                                    // 2713
                                                                                                                       // 2714
                                                                                                                       // 2715
	// Applies the "intro" and "outro" HTML to the given cells.                                                           // 2716
	// Intro means the leftmost cell when the calendar is LTR and the rightmost cell when RTL. Vice-versa for outro.      // 2717
	// `cells` can be an HTML string of <td>'s or a jQuery <tr> element                                                   // 2718
	// `row` is an optional row number.                                                                                   // 2719
	bookendCells: function(cells, rowType, row) {                                                                         // 2720
		var intro = this.getHtmlRenderer('intro', rowType)(row || 0);                                                        // 2721
		var outro = this.getHtmlRenderer('outro', rowType)(row || 0);                                                        // 2722
		var prependHtml = this.isRTL ? outro : intro;                                                                        // 2723
		var appendHtml = this.isRTL ? intro : outro;                                                                         // 2724
                                                                                                                       // 2725
		if (typeof cells === 'string') {                                                                                     // 2726
			return prependHtml + cells + appendHtml;                                                                            // 2727
		}                                                                                                                    // 2728
		else { // a jQuery <tr> element                                                                                      // 2729
			return cells.prepend(prependHtml).append(appendHtml);                                                               // 2730
		}                                                                                                                    // 2731
	},                                                                                                                    // 2732
                                                                                                                       // 2733
                                                                                                                       // 2734
	// Returns an HTML-rendering function given a specific `rendererName` (like cell, intro, or outro) and a specific     // 2735
	// `rowType` (like day, eventSkeleton, helperSkeleton), which is optional.                                            // 2736
	// If a renderer for the specific rowType doesn't exist, it will fall back to a generic renderer.                     // 2737
	// We will query the View object first for any custom rendering functions, then the methods of the subclass.          // 2738
	getHtmlRenderer: function(rendererName, rowType) {                                                                    // 2739
		var view = this.view;                                                                                                // 2740
		var generalName; // like "cellHtml"                                                                                  // 2741
		var specificName; // like "dayCellHtml". based on rowType                                                            // 2742
		var provider; // either the View or the RowRenderer subclass, whichever provided the method                          // 2743
		var renderer;                                                                                                        // 2744
                                                                                                                       // 2745
		generalName = rendererName + 'Html';                                                                                 // 2746
		if (rowType) {                                                                                                       // 2747
			specificName = rowType + capitaliseFirstLetter(rendererName) + 'Html';                                              // 2748
		}                                                                                                                    // 2749
                                                                                                                       // 2750
		if (specificName && (renderer = view[specificName])) {                                                               // 2751
			provider = view;                                                                                                    // 2752
		}                                                                                                                    // 2753
		else if (specificName && (renderer = this[specificName])) {                                                          // 2754
			provider = this;                                                                                                    // 2755
		}                                                                                                                    // 2756
		else if ((renderer = view[generalName])) {                                                                           // 2757
			provider = view;                                                                                                    // 2758
		}                                                                                                                    // 2759
		else if ((renderer = this[generalName])) {                                                                           // 2760
			provider = this;                                                                                                    // 2761
		}                                                                                                                    // 2762
                                                                                                                       // 2763
		if (typeof renderer === 'function') {                                                                                // 2764
			return function() {                                                                                                 // 2765
				return renderer.apply(provider, arguments) || ''; // use correct `this` and always return a string                 // 2766
			};                                                                                                                  // 2767
		}                                                                                                                    // 2768
                                                                                                                       // 2769
		// the rendered can be a plain string as well. if not specified, always an empty string.                             // 2770
		return function() {                                                                                                  // 2771
			return renderer || '';                                                                                              // 2772
		};                                                                                                                   // 2773
	}                                                                                                                     // 2774
                                                                                                                       // 2775
});                                                                                                                    // 2776
                                                                                                                       // 2777
;;                                                                                                                     // 2778
                                                                                                                       // 2779
/* An abstract class comprised of a "grid" of cells that each represent a specific datetime                            // 2780
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 2782
var Grid = fc.Grid = RowRenderer.extend({                                                                              // 2783
                                                                                                                       // 2784
	start: null, // the date of the first cell                                                                            // 2785
	end: null, // the date after the last cell                                                                            // 2786
                                                                                                                       // 2787
	rowCnt: 0, // number of rows                                                                                          // 2788
	colCnt: 0, // number of cols                                                                                          // 2789
	rowData: null, // array of objects, holding misc data for each row                                                    // 2790
	colData: null, // array of objects, holding misc data for each column                                                 // 2791
                                                                                                                       // 2792
	el: null, // the containing element                                                                                   // 2793
	coordMap: null, // a GridCoordMap that converts pixel values to datetimes                                             // 2794
	elsByFill: null, // a hash of jQuery element sets used for rendering each fill. Keyed by fill name.                   // 2795
                                                                                                                       // 2796
	externalDragStartProxy: null, // binds the Grid's scope to externalDragStart (in DayGrid.events)                      // 2797
                                                                                                                       // 2798
	// derived from options                                                                                               // 2799
	colHeadFormat: null, // TODO: move to another class. not applicable to all Grids                                      // 2800
	eventTimeFormat: null,                                                                                                // 2801
	displayEventTime: null,                                                                                               // 2802
	displayEventEnd: null,                                                                                                // 2803
                                                                                                                       // 2804
	// if all cells are the same length of time, the duration they all share. optional.                                   // 2805
	// when defined, allows the computeCellRange shortcut, as well as improved resizing behavior.                         // 2806
	cellDuration: null,                                                                                                   // 2807
                                                                                                                       // 2808
	// if defined, holds the unit identified (ex: "year" or "month") that determines the level of granularity             // 2809
	// of the date cells. if not defined, assumes to be day and time granularity.                                         // 2810
	largeUnit: null,                                                                                                      // 2811
                                                                                                                       // 2812
                                                                                                                       // 2813
	constructor: function() {                                                                                             // 2814
		RowRenderer.apply(this, arguments); // call the super-constructor                                                    // 2815
                                                                                                                       // 2816
		this.coordMap = new GridCoordMap(this);                                                                              // 2817
		this.elsByFill = {};                                                                                                 // 2818
		this.externalDragStartProxy = proxy(this, 'externalDragStart');                                                      // 2819
	},                                                                                                                    // 2820
                                                                                                                       // 2821
                                                                                                                       // 2822
	/* Options                                                                                                            // 2823
	------------------------------------------------------------------------------------------------------------------*/  // 2824
                                                                                                                       // 2825
                                                                                                                       // 2826
	// Generates the format string used for the text in column headers, if not explicitly defined by 'columnFormat'       // 2827
	// TODO: move to another class. not applicable to all Grids                                                           // 2828
	computeColHeadFormat: function() {                                                                                    // 2829
		// subclasses must implement if they want to use headHtml()                                                          // 2830
	},                                                                                                                    // 2831
                                                                                                                       // 2832
                                                                                                                       // 2833
	// Generates the format string used for event time text, if not explicitly defined by 'timeFormat'                    // 2834
	computeEventTimeFormat: function() {                                                                                  // 2835
		return this.view.opt('smallTimeFormat');                                                                             // 2836
	},                                                                                                                    // 2837
                                                                                                                       // 2838
                                                                                                                       // 2839
	// Determines whether events should have their end times displayed, if not explicitly defined by 'displayEventTime'.  // 2840
	// Only applies to non-all-day events.                                                                                // 2841
	computeDisplayEventTime: function() {                                                                                 // 2842
		return true;                                                                                                         // 2843
	},                                                                                                                    // 2844
                                                                                                                       // 2845
                                                                                                                       // 2846
	// Determines whether events should have their end times displayed, if not explicitly defined by 'displayEventEnd'    // 2847
	computeDisplayEventEnd: function() {                                                                                  // 2848
		return true;                                                                                                         // 2849
	},                                                                                                                    // 2850
                                                                                                                       // 2851
                                                                                                                       // 2852
	/* Dates                                                                                                              // 2853
	------------------------------------------------------------------------------------------------------------------*/  // 2854
                                                                                                                       // 2855
                                                                                                                       // 2856
	// Tells the grid about what period of time to display. Grid will subsequently compute dates for cell system.         // 2857
	setRange: function(range) {                                                                                           // 2858
		var view = this.view;                                                                                                // 2859
		var displayEventTime;                                                                                                // 2860
		var displayEventEnd;                                                                                                 // 2861
                                                                                                                       // 2862
		this.start = range.start.clone();                                                                                    // 2863
		this.end = range.end.clone();                                                                                        // 2864
                                                                                                                       // 2865
		this.rowData = [];                                                                                                   // 2866
		this.colData = [];                                                                                                   // 2867
		this.updateCells();                                                                                                  // 2868
                                                                                                                       // 2869
		// Populate option-derived settings. Look for override first, then compute if necessary.                             // 2870
		this.colHeadFormat = view.opt('columnFormat') || this.computeColHeadFormat();                                        // 2871
                                                                                                                       // 2872
		this.eventTimeFormat =                                                                                               // 2873
			view.opt('eventTimeFormat') ||                                                                                      // 2874
			view.opt('timeFormat') || // deprecated                                                                             // 2875
			this.computeEventTimeFormat();                                                                                      // 2876
                                                                                                                       // 2877
		displayEventTime = view.opt('displayEventTime');                                                                     // 2878
		if (displayEventTime == null) {                                                                                      // 2879
			displayEventTime = this.computeDisplayEventTime(); // might be based off of range                                   // 2880
		}                                                                                                                    // 2881
                                                                                                                       // 2882
		displayEventEnd = view.opt('displayEventEnd');                                                                       // 2883
		if (displayEventEnd == null) {                                                                                       // 2884
			displayEventEnd = this.computeDisplayEventEnd(); // might be based off of range                                     // 2885
		}                                                                                                                    // 2886
                                                                                                                       // 2887
		this.displayEventTime = displayEventTime;                                                                            // 2888
		this.displayEventEnd = displayEventEnd;                                                                              // 2889
	},                                                                                                                    // 2890
                                                                                                                       // 2891
                                                                                                                       // 2892
	// Responsible for setting rowCnt/colCnt and any other row/col data                                                   // 2893
	updateCells: function() {                                                                                             // 2894
		// subclasses must implement                                                                                         // 2895
	},                                                                                                                    // 2896
                                                                                                                       // 2897
                                                                                                                       // 2898
	// Converts a range with an inclusive `start` and an exclusive `end` into an array of segment objects                 // 2899
	rangeToSegs: function(range) {                                                                                        // 2900
		// subclasses must implement                                                                                         // 2901
	},                                                                                                                    // 2902
                                                                                                                       // 2903
                                                                                                                       // 2904
	// Diffs the two dates, returning a duration, based on granularity of the grid                                        // 2905
	diffDates: function(a, b) {                                                                                           // 2906
		if (this.largeUnit) {                                                                                                // 2907
			return diffByUnit(a, b, this.largeUnit);                                                                            // 2908
		}                                                                                                                    // 2909
		else {                                                                                                               // 2910
			return diffDayTime(a, b);                                                                                           // 2911
		}                                                                                                                    // 2912
	},                                                                                                                    // 2913
                                                                                                                       // 2914
                                                                                                                       // 2915
	/* Cells                                                                                                              // 2916
	------------------------------------------------------------------------------------------------------------------*/  // 2917
	// NOTE: columns are ordered left-to-right                                                                            // 2918
                                                                                                                       // 2919
                                                                                                                       // 2920
	// Gets an object containing row/col number, misc data, and range information about the cell.                         // 2921
	// Accepts row/col values, an object with row/col properties, or a single-number offset from the first cell.          // 2922
	getCell: function(row, col) {                                                                                         // 2923
		var cell;                                                                                                            // 2924
                                                                                                                       // 2925
		if (col == null) {                                                                                                   // 2926
			if (typeof row === 'number') { // a single-number offset                                                            // 2927
				col = row % this.colCnt;                                                                                           // 2928
				row = Math.floor(row / this.colCnt);                                                                               // 2929
			}                                                                                                                   // 2930
			else { // an object with row/col properties                                                                         // 2931
				col = row.col;                                                                                                     // 2932
				row = row.row;                                                                                                     // 2933
			}                                                                                                                   // 2934
		}                                                                                                                    // 2935
                                                                                                                       // 2936
		cell = { row: row, col: col };                                                                                       // 2937
                                                                                                                       // 2938
		$.extend(cell, this.getRowData(row), this.getColData(col));                                                          // 2939
		$.extend(cell, this.computeCellRange(cell));                                                                         // 2940
                                                                                                                       // 2941
		return cell;                                                                                                         // 2942
	},                                                                                                                    // 2943
                                                                                                                       // 2944
                                                                                                                       // 2945
	// Given a cell object with index and misc data, generates a range object                                             // 2946
	// If the grid is leveraging cellDuration, this doesn't need to be defined. Only computeCellDate does.                // 2947
	// If being overridden, should return a range with reference-free date copies.                                        // 2948
	computeCellRange: function(cell) {                                                                                    // 2949
		var date = this.computeCellDate(cell);                                                                               // 2950
                                                                                                                       // 2951
		return {                                                                                                             // 2952
			start: date,                                                                                                        // 2953
			end: date.clone().add(this.cellDuration)                                                                            // 2954
		};                                                                                                                   // 2955
	},                                                                                                                    // 2956
                                                                                                                       // 2957
                                                                                                                       // 2958
	// Given a cell, returns its start date. Should return a reference-free date copy.                                    // 2959
	computeCellDate: function(cell) {                                                                                     // 2960
		// subclasses can implement                                                                                          // 2961
	},                                                                                                                    // 2962
                                                                                                                       // 2963
                                                                                                                       // 2964
	// Retrieves misc data about the given row                                                                            // 2965
	getRowData: function(row) {                                                                                           // 2966
		return this.rowData[row] || {};                                                                                      // 2967
	},                                                                                                                    // 2968
                                                                                                                       // 2969
                                                                                                                       // 2970
	// Retrieves misc data baout the given column                                                                         // 2971
	getColData: function(col) {                                                                                           // 2972
		return this.colData[col] || {};                                                                                      // 2973
	},                                                                                                                    // 2974
                                                                                                                       // 2975
                                                                                                                       // 2976
	// Retrieves the element representing the given row                                                                   // 2977
	getRowEl: function(row) {                                                                                             // 2978
		// subclasses should implement if leveraging the default getCellDayEl() or computeRowCoords()                        // 2979
	},                                                                                                                    // 2980
                                                                                                                       // 2981
                                                                                                                       // 2982
	// Retrieves the element representing the given column                                                                // 2983
	getColEl: function(col) {                                                                                             // 2984
		// subclasses should implement if leveraging the default getCellDayEl() or computeColCoords()                        // 2985
	},                                                                                                                    // 2986
                                                                                                                       // 2987
                                                                                                                       // 2988
	// Given a cell object, returns the element that represents the cell's whole-day                                      // 2989
	getCellDayEl: function(cell) {                                                                                        // 2990
		return this.getColEl(cell.col) || this.getRowEl(cell.row);                                                           // 2991
	},                                                                                                                    // 2992
                                                                                                                       // 2993
                                                                                                                       // 2994
	/* Cell Coordinates                                                                                                   // 2995
	------------------------------------------------------------------------------------------------------------------*/  // 2996
                                                                                                                       // 2997
                                                                                                                       // 2998
	// Computes the top/bottom coordinates of all rows.                                                                   // 2999
	// By default, queries the dimensions of the element provided by getRowEl().                                          // 3000
	computeRowCoords: function() {                                                                                        // 3001
		var items = [];                                                                                                      // 3002
		var i, el;                                                                                                           // 3003
		var top;                                                                                                             // 3004
                                                                                                                       // 3005
		for (i = 0; i < this.rowCnt; i++) {                                                                                  // 3006
			el = this.getRowEl(i);                                                                                              // 3007
			top = el.offset().top;                                                                                              // 3008
			items.push({                                                                                                        // 3009
				top: top,                                                                                                          // 3010
				bottom: top + el.outerHeight()                                                                                     // 3011
			});                                                                                                                 // 3012
		}                                                                                                                    // 3013
                                                                                                                       // 3014
		return items;                                                                                                        // 3015
	},                                                                                                                    // 3016
                                                                                                                       // 3017
                                                                                                                       // 3018
	// Computes the left/right coordinates of all rows.                                                                   // 3019
	// By default, queries the dimensions of the element provided by getColEl(). Columns can be LTR or RTL.               // 3020
	computeColCoords: function() {                                                                                        // 3021
		var items = [];                                                                                                      // 3022
		var i, el;                                                                                                           // 3023
		var left;                                                                                                            // 3024
                                                                                                                       // 3025
		for (i = 0; i < this.colCnt; i++) {                                                                                  // 3026
			el = this.getColEl(i);                                                                                              // 3027
			left = el.offset().left;                                                                                            // 3028
			items.push({                                                                                                        // 3029
				left: left,                                                                                                        // 3030
				right: left + el.outerWidth()                                                                                      // 3031
			});                                                                                                                 // 3032
		}                                                                                                                    // 3033
                                                                                                                       // 3034
		return items;                                                                                                        // 3035
	},                                                                                                                    // 3036
                                                                                                                       // 3037
                                                                                                                       // 3038
	/* Rendering                                                                                                          // 3039
	------------------------------------------------------------------------------------------------------------------*/  // 3040
                                                                                                                       // 3041
                                                                                                                       // 3042
	// Sets the container element that the grid should render inside of.                                                  // 3043
	// Does other DOM-related initializations.                                                                            // 3044
	setElement: function(el) {                                                                                            // 3045
		var _this = this;                                                                                                    // 3046
                                                                                                                       // 3047
		this.el = el;                                                                                                        // 3048
                                                                                                                       // 3049
		// attach a handler to the grid's root element.                                                                      // 3050
		// jQuery will take care of unregistering them when removeElement gets called.                                       // 3051
		el.on('mousedown', function(ev) {                                                                                    // 3052
			if (                                                                                                                // 3053
				!$(ev.target).is('.fc-event-container *, .fc-more') && // not an an event element, or "more.." link                // 3054
				!$(ev.target).closest('.fc-popover').length // not on a popover (like the "more.." events one)                     // 3055
			) {                                                                                                                 // 3056
				_this.dayMousedown(ev);                                                                                            // 3057
			}                                                                                                                   // 3058
		});                                                                                                                  // 3059
                                                                                                                       // 3060
		// attach event-element-related handlers. in Grid.events                                                             // 3061
		// same garbage collection note as above.                                                                            // 3062
		this.bindSegHandlers();                                                                                              // 3063
                                                                                                                       // 3064
		this.bindGlobalHandlers();                                                                                           // 3065
	},                                                                                                                    // 3066
                                                                                                                       // 3067
                                                                                                                       // 3068
	// Removes the grid's container element from the DOM. Undoes any other DOM-related attachments.                       // 3069
	// DOES NOT remove any content before hand (doens't clear events or call destroyDates), unlike View                   // 3070
	removeElement: function() {                                                                                           // 3071
		this.unbindGlobalHandlers();                                                                                         // 3072
                                                                                                                       // 3073
		this.el.remove();                                                                                                    // 3074
                                                                                                                       // 3075
		// NOTE: we don't null-out this.el for the same reasons we don't do it within View::removeElement                    // 3076
	},                                                                                                                    // 3077
                                                                                                                       // 3078
                                                                                                                       // 3079
	// Renders the basic structure of grid view before any content is rendered                                            // 3080
	renderSkeleton: function() {                                                                                          // 3081
		// subclasses should implement                                                                                       // 3082
	},                                                                                                                    // 3083
                                                                                                                       // 3084
                                                                                                                       // 3085
	// Renders the grid's date-related content (like cells that represent days/times).                                    // 3086
	// Assumes setRange has already been called and the skeleton has already been rendered.                               // 3087
	renderDates: function() {                                                                                             // 3088
		// subclasses should implement                                                                                       // 3089
	},                                                                                                                    // 3090
                                                                                                                       // 3091
                                                                                                                       // 3092
	// Unrenders the grid's date-related content                                                                          // 3093
	destroyDates: function() {                                                                                            // 3094
		// subclasses should implement                                                                                       // 3095
	},                                                                                                                    // 3096
                                                                                                                       // 3097
                                                                                                                       // 3098
	/* Handlers                                                                                                           // 3099
	------------------------------------------------------------------------------------------------------------------*/  // 3100
                                                                                                                       // 3101
                                                                                                                       // 3102
	// Binds DOM handlers to elements that reside outside the grid, such as the document                                  // 3103
	bindGlobalHandlers: function() {                                                                                      // 3104
		$(document).on('dragstart sortstart', this.externalDragStartProxy); // jqui                                          // 3105
	},                                                                                                                    // 3106
                                                                                                                       // 3107
                                                                                                                       // 3108
	// Unbinds DOM handlers from elements that reside outside the grid                                                    // 3109
	unbindGlobalHandlers: function() {                                                                                    // 3110
		$(document).off('dragstart sortstart', this.externalDragStartProxy); // jqui                                         // 3111
	},                                                                                                                    // 3112
                                                                                                                       // 3113
                                                                                                                       // 3114
	// Process a mousedown on an element that represents a day. For day clicking and selecting.                           // 3115
	dayMousedown: function(ev) {                                                                                          // 3116
		var _this = this;                                                                                                    // 3117
		var view = this.view;                                                                                                // 3118
		var isSelectable = view.opt('selectable');                                                                           // 3119
		var dayClickCell; // null if invalid dayClick                                                                        // 3120
		var selectionRange; // null if invalid selection                                                                     // 3121
                                                                                                                       // 3122
		// this listener tracks a mousedown on a day element, and a subsequent drag.                                         // 3123
		// if the drag ends on the same day, it is a 'dayClick'.                                                             // 3124
		// if 'selectable' is enabled, this listener also detects selections.                                                // 3125
		var dragListener = new CellDragListener(this.coordMap, {                                                             // 3126
			//distance: 5, // needs more work if we want dayClick to fire correctly                                             // 3127
			scroll: view.opt('dragScroll'),                                                                                     // 3128
			dragStart: function() {                                                                                             // 3129
				view.unselect(); // since we could be rendering a new selection, we want to clear any old one                      // 3130
			},                                                                                                                  // 3131
			cellOver: function(cell, isOrig, origCell) {                                                                        // 3132
				if (origCell) { // click needs to have started on a cell                                                           // 3133
					dayClickCell = isOrig ? cell : null; // single-cell selection is a day click                                      // 3134
					if (isSelectable) {                                                                                               // 3135
						selectionRange = _this.computeSelection(origCell, cell);                                                         // 3136
						if (selectionRange) {                                                                                            // 3137
							_this.renderSelection(selectionRange);                                                                          // 3138
						}                                                                                                                // 3139
						else {                                                                                                           // 3140
							disableCursor();                                                                                                // 3141
						}                                                                                                                // 3142
					}                                                                                                                 // 3143
				}                                                                                                                  // 3144
			},                                                                                                                  // 3145
			cellOut: function(cell) {                                                                                           // 3146
				dayClickCell = null;                                                                                               // 3147
				selectionRange = null;                                                                                             // 3148
				_this.destroySelection();                                                                                          // 3149
				enableCursor();                                                                                                    // 3150
			},                                                                                                                  // 3151
			listenStop: function(ev) {                                                                                          // 3152
				if (dayClickCell) {                                                                                                // 3153
					view.trigger('dayClick', _this.getCellDayEl(dayClickCell), dayClickCell.start, ev);                               // 3154
				}                                                                                                                  // 3155
				if (selectionRange) {                                                                                              // 3156
					// the selection will already have been rendered. just report it                                                  // 3157
					view.reportSelection(selectionRange, ev);                                                                         // 3158
				}                                                                                                                  // 3159
				enableCursor();                                                                                                    // 3160
			}                                                                                                                   // 3161
		});                                                                                                                  // 3162
                                                                                                                       // 3163
		dragListener.mousedown(ev); // start listening, which will eventually initiate a dragStart                           // 3164
	},                                                                                                                    // 3165
                                                                                                                       // 3166
                                                                                                                       // 3167
	/* Event Helper                                                                                                       // 3168
	------------------------------------------------------------------------------------------------------------------*/  // 3169
	// TODO: should probably move this to Grid.events, like we did event dragging / resizing                              // 3170
                                                                                                                       // 3171
                                                                                                                       // 3172
	// Renders a mock event over the given range                                                                          // 3173
	renderRangeHelper: function(range, sourceSeg) {                                                                       // 3174
		var fakeEvent = this.fabricateHelperEvent(range, sourceSeg);                                                         // 3175
                                                                                                                       // 3176
		this.renderHelper(fakeEvent, sourceSeg); // do the actual rendering                                                  // 3177
	},                                                                                                                    // 3178
                                                                                                                       // 3179
                                                                                                                       // 3180
	// Builds a fake event given a date range it should cover, and a segment is should be inspired from.                  // 3181
	// The range's end can be null, in which case the mock event that is rendered will have a null end time.              // 3182
	// `sourceSeg` is the internal segment object involved in the drag. If null, something external is dragging.          // 3183
	fabricateHelperEvent: function(range, sourceSeg) {                                                                    // 3184
		var fakeEvent = sourceSeg ? createObject(sourceSeg.event) : {}; // mask the original event object if possible        // 3185
                                                                                                                       // 3186
		fakeEvent.start = range.start.clone();                                                                               // 3187
		fakeEvent.end = range.end ? range.end.clone() : null;                                                                // 3188
		fakeEvent.allDay = null; // force it to be freshly computed by normalizeEventRange                                   // 3189
		this.view.calendar.normalizeEventRange(fakeEvent);                                                                   // 3190
                                                                                                                       // 3191
		// this extra className will be useful for differentiating real events from mock events in CSS                       // 3192
		fakeEvent.className = (fakeEvent.className || []).concat('fc-helper');                                               // 3193
                                                                                                                       // 3194
		// if something external is being dragged in, don't render a resizer                                                 // 3195
		if (!sourceSeg) {                                                                                                    // 3196
			fakeEvent.editable = false;                                                                                         // 3197
		}                                                                                                                    // 3198
                                                                                                                       // 3199
		return fakeEvent;                                                                                                    // 3200
	},                                                                                                                    // 3201
                                                                                                                       // 3202
                                                                                                                       // 3203
	// Renders a mock event                                                                                               // 3204
	renderHelper: function(event, sourceSeg) {                                                                            // 3205
		// subclasses must implement                                                                                         // 3206
	},                                                                                                                    // 3207
                                                                                                                       // 3208
                                                                                                                       // 3209
	// Unrenders a mock event                                                                                             // 3210
	destroyHelper: function() {                                                                                           // 3211
		// subclasses must implement                                                                                         // 3212
	},                                                                                                                    // 3213
                                                                                                                       // 3214
                                                                                                                       // 3215
	/* Selection                                                                                                          // 3216
	------------------------------------------------------------------------------------------------------------------*/  // 3217
                                                                                                                       // 3218
                                                                                                                       // 3219
	// Renders a visual indication of a selection. Will highlight by default but can be overridden by subclasses.         // 3220
	renderSelection: function(range) {                                                                                    // 3221
		this.renderHighlight(range);                                                                                         // 3222
	},                                                                                                                    // 3223
                                                                                                                       // 3224
                                                                                                                       // 3225
	// Unrenders any visual indications of a selection. Will unrender a highlight by default.                             // 3226
	destroySelection: function() {                                                                                        // 3227
		this.destroyHighlight();                                                                                             // 3228
	},                                                                                                                    // 3229
                                                                                                                       // 3230
                                                                                                                       // 3231
	// Given the first and last cells of a selection, returns a range object.                                             // 3232
	// Will return something falsy if the selection is invalid (when outside of selectionConstraint for example).         // 3233
	// Subclasses can override and provide additional data in the range object. Will be passed to renderSelection().      // 3234
	computeSelection: function(firstCell, lastCell) {                                                                     // 3235
		var dates = [                                                                                                        // 3236
			firstCell.start,                                                                                                    // 3237
			firstCell.end,                                                                                                      // 3238
			lastCell.start,                                                                                                     // 3239
			lastCell.end                                                                                                        // 3240
		];                                                                                                                   // 3241
		var range;                                                                                                           // 3242
                                                                                                                       // 3243
		dates.sort(compareNumbers); // sorts chronologically. works with Moments                                             // 3244
                                                                                                                       // 3245
		range = {                                                                                                            // 3246
			start: dates[0].clone(),                                                                                            // 3247
			end: dates[3].clone()                                                                                               // 3248
		};                                                                                                                   // 3249
                                                                                                                       // 3250
		if (!this.view.calendar.isSelectionRangeAllowed(range)) {                                                            // 3251
			return null;                                                                                                        // 3252
		}                                                                                                                    // 3253
                                                                                                                       // 3254
		return range;                                                                                                        // 3255
	},                                                                                                                    // 3256
                                                                                                                       // 3257
                                                                                                                       // 3258
	/* Highlight                                                                                                          // 3259
	------------------------------------------------------------------------------------------------------------------*/  // 3260
                                                                                                                       // 3261
                                                                                                                       // 3262
	// Renders an emphasis on the given date range. `start` is inclusive. `end` is exclusive.                             // 3263
	renderHighlight: function(range) {                                                                                    // 3264
		this.renderFill('highlight', this.rangeToSegs(range));                                                               // 3265
	},                                                                                                                    // 3266
                                                                                                                       // 3267
                                                                                                                       // 3268
	// Unrenders the emphasis on a date range                                                                             // 3269
	destroyHighlight: function() {                                                                                        // 3270
		this.destroyFill('highlight');                                                                                       // 3271
	},                                                                                                                    // 3272
                                                                                                                       // 3273
                                                                                                                       // 3274
	// Generates an array of classNames for rendering the highlight. Used by the fill system.                             // 3275
	highlightSegClasses: function() {                                                                                     // 3276
		return [ 'fc-highlight' ];                                                                                           // 3277
	},                                                                                                                    // 3278
                                                                                                                       // 3279
                                                                                                                       // 3280
	/* Fill System (highlight, background events, business hours)                                                         // 3281
	------------------------------------------------------------------------------------------------------------------*/  // 3282
                                                                                                                       // 3283
                                                                                                                       // 3284
	// Renders a set of rectangles over the given segments of time.                                                       // 3285
	// Returns a subset of segs, the segs that were actually rendered.                                                    // 3286
	// Responsible for populating this.elsByFill. TODO: better API for expressing this requirement                        // 3287
	renderFill: function(type, segs) {                                                                                    // 3288
		// subclasses must implement                                                                                         // 3289
	},                                                                                                                    // 3290
                                                                                                                       // 3291
                                                                                                                       // 3292
	// Unrenders a specific type of fill that is currently rendered on the grid                                           // 3293
	destroyFill: function(type) {                                                                                         // 3294
		var el = this.elsByFill[type];                                                                                       // 3295
                                                                                                                       // 3296
		if (el) {                                                                                                            // 3297
			el.remove();                                                                                                        // 3298
			delete this.elsByFill[type];                                                                                        // 3299
		}                                                                                                                    // 3300
	},                                                                                                                    // 3301
                                                                                                                       // 3302
                                                                                                                       // 3303
	// Renders and assigns an `el` property for each fill segment. Generic enough to work with different types.           // 3304
	// Only returns segments that successfully rendered.                                                                  // 3305
	// To be harnessed by renderFill (implemented by subclasses).                                                         // 3306
	// Analagous to renderFgSegEls.                                                                                       // 3307
	renderFillSegEls: function(type, segs) {                                                                              // 3308
		var _this = this;                                                                                                    // 3309
		var segElMethod = this[type + 'SegEl'];                                                                              // 3310
		var html = '';                                                                                                       // 3311
		var renderedSegs = [];                                                                                               // 3312
		var i;                                                                                                               // 3313
                                                                                                                       // 3314
		if (segs.length) {                                                                                                   // 3315
                                                                                                                       // 3316
			// build a large concatenation of segment HTML                                                                      // 3317
			for (i = 0; i < segs.length; i++) {                                                                                 // 3318
				html += this.fillSegHtml(type, segs[i]);                                                                           // 3319
			}                                                                                                                   // 3320
                                                                                                                       // 3321
			// Grab individual elements from the combined HTML string. Use each as the default rendering.                       // 3322
			// Then, compute the 'el' for each segment.                                                                         // 3323
			$(html).each(function(i, node) {                                                                                    // 3324
				var seg = segs[i];                                                                                                 // 3325
				var el = $(node);                                                                                                  // 3326
                                                                                                                       // 3327
				// allow custom filter methods per-type                                                                            // 3328
				if (segElMethod) {                                                                                                 // 3329
					el = segElMethod.call(_this, seg, el);                                                                            // 3330
				}                                                                                                                  // 3331
                                                                                                                       // 3332
				if (el) { // custom filters did not cancel the render                                                              // 3333
					el = $(el); // allow custom filter to return raw DOM node                                                         // 3334
                                                                                                                       // 3335
					// correct element type? (would be bad if a non-TD were inserted into a table for example)                        // 3336
					if (el.is(_this.fillSegTag)) {                                                                                    // 3337
						seg.el = el;                                                                                                     // 3338
						renderedSegs.push(seg);                                                                                          // 3339
					}                                                                                                                 // 3340
				}                                                                                                                  // 3341
			});                                                                                                                 // 3342
		}                                                                                                                    // 3343
                                                                                                                       // 3344
		return renderedSegs;                                                                                                 // 3345
	},                                                                                                                    // 3346
                                                                                                                       // 3347
                                                                                                                       // 3348
	fillSegTag: 'div', // subclasses can override                                                                         // 3349
                                                                                                                       // 3350
                                                                                                                       // 3351
	// Builds the HTML needed for one fill segment. Generic enought o work with different types.                          // 3352
	fillSegHtml: function(type, seg) {                                                                                    // 3353
                                                                                                                       // 3354
		// custom hooks per-type                                                                                             // 3355
		var classesMethod = this[type + 'SegClasses'];                                                                       // 3356
		var cssMethod = this[type + 'SegCss'];                                                                               // 3357
                                                                                                                       // 3358
		var classes = classesMethod ? classesMethod.call(this, seg) : [];                                                    // 3359
		var css = cssToStr(cssMethod ? cssMethod.call(this, seg) : {});                                                      // 3360
                                                                                                                       // 3361
		return '<' + this.fillSegTag +                                                                                       // 3362
			(classes.length ? ' class="' + classes.join(' ') + '"' : '') +                                                      // 3363
			(css ? ' style="' + css + '"' : '') +                                                                               // 3364
			' />';                                                                                                              // 3365
	},                                                                                                                    // 3366
                                                                                                                       // 3367
                                                                                                                       // 3368
	/* Generic rendering utilities for subclasses                                                                         // 3369
	------------------------------------------------------------------------------------------------------------------*/  // 3370
                                                                                                                       // 3371
                                                                                                                       // 3372
	// Renders a day-of-week header row.                                                                                  // 3373
	// TODO: move to another class. not applicable to all Grids                                                           // 3374
	headHtml: function() {                                                                                                // 3375
		return '' +                                                                                                          // 3376
			'<div class="fc-row ' + this.view.widgetHeaderClass + '">' +                                                        // 3377
				'<table>' +                                                                                                        // 3378
					'<thead>' +                                                                                                       // 3379
						this.rowHtml('head') + // leverages RowRenderer                                                                  // 3380
					'</thead>' +                                                                                                      // 3381
				'</table>' +                                                                                                       // 3382
			'</div>';                                                                                                           // 3383
	},                                                                                                                    // 3384
                                                                                                                       // 3385
                                                                                                                       // 3386
	// Used by the `headHtml` method, via RowRenderer, for rendering the HTML of a day-of-week header cell                // 3387
	// TODO: move to another class. not applicable to all Grids                                                           // 3388
	headCellHtml: function(cell) {                                                                                        // 3389
		var view = this.view;                                                                                                // 3390
		var date = cell.start;                                                                                               // 3391
                                                                                                                       // 3392
		return '' +                                                                                                          // 3393
			'<th class="fc-day-header ' + view.widgetHeaderClass + ' fc-' + dayIDs[date.day()] + '">' +                         // 3394
				htmlEscape(date.format(this.colHeadFormat)) +                                                                      // 3395
			'</th>';                                                                                                            // 3396
	},                                                                                                                    // 3397
                                                                                                                       // 3398
                                                                                                                       // 3399
	// Renders the HTML for a single-day background cell                                                                  // 3400
	bgCellHtml: function(cell) {                                                                                          // 3401
		var view = this.view;                                                                                                // 3402
		var date = cell.start;                                                                                               // 3403
		var classes = this.getDayClasses(date);                                                                              // 3404
                                                                                                                       // 3405
		classes.unshift('fc-day', view.widgetContentClass);                                                                  // 3406
                                                                                                                       // 3407
		return '<td class="' + classes.join(' ') + '"' +                                                                     // 3408
			' data-date="' + date.format('YYYY-MM-DD') + '"' + // if date has a time, won't format it                           // 3409
			'></td>';                                                                                                           // 3410
	},                                                                                                                    // 3411
                                                                                                                       // 3412
                                                                                                                       // 3413
	// Computes HTML classNames for a single-day cell                                                                     // 3414
	getDayClasses: function(date) {                                                                                       // 3415
		var view = this.view;                                                                                                // 3416
		var today = view.calendar.getNow().stripTime();                                                                      // 3417
		var classes = [ 'fc-' + dayIDs[date.day()] ];                                                                        // 3418
                                                                                                                       // 3419
		if (                                                                                                                 // 3420
			view.intervalDuration.as('months') == 1 &&                                                                          // 3421
			date.month() != view.intervalStart.month()                                                                          // 3422
		) {                                                                                                                  // 3423
			classes.push('fc-other-month');                                                                                     // 3424
		}                                                                                                                    // 3425
                                                                                                                       // 3426
		if (date.isSame(today, 'day')) {                                                                                     // 3427
			classes.push(                                                                                                       // 3428
				'fc-today',                                                                                                        // 3429
				view.highlightStateClass                                                                                           // 3430
			);                                                                                                                  // 3431
		}                                                                                                                    // 3432
		else if (date < today) {                                                                                             // 3433
			classes.push('fc-past');                                                                                            // 3434
		}                                                                                                                    // 3435
		else {                                                                                                               // 3436
			classes.push('fc-future');                                                                                          // 3437
		}                                                                                                                    // 3438
                                                                                                                       // 3439
		return classes;                                                                                                      // 3440
	}                                                                                                                     // 3441
                                                                                                                       // 3442
});                                                                                                                    // 3443
                                                                                                                       // 3444
;;                                                                                                                     // 3445
                                                                                                                       // 3446
/* Event-rendering and event-interaction methods for the abstract Grid class                                           // 3447
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 3449
Grid.mixin({                                                                                                           // 3450
                                                                                                                       // 3451
	mousedOverSeg: null, // the segment object the user's mouse is over. null if over nothing                             // 3452
	isDraggingSeg: false, // is a segment being dragged? boolean                                                          // 3453
	isResizingSeg: false, // is a segment being resized? boolean                                                          // 3454
	isDraggingExternal: false, // jqui-dragging an external element? boolean                                              // 3455
	segs: null, // the event segments currently rendered in the grid                                                      // 3456
                                                                                                                       // 3457
                                                                                                                       // 3458
	// Renders the given events onto the grid                                                                             // 3459
	renderEvents: function(events) {                                                                                      // 3460
		var segs = this.eventsToSegs(events);                                                                                // 3461
		var bgSegs = [];                                                                                                     // 3462
		var fgSegs = [];                                                                                                     // 3463
		var i, seg;                                                                                                          // 3464
                                                                                                                       // 3465
		for (i = 0; i < segs.length; i++) {                                                                                  // 3466
			seg = segs[i];                                                                                                      // 3467
                                                                                                                       // 3468
			if (isBgEvent(seg.event)) {                                                                                         // 3469
				bgSegs.push(seg);                                                                                                  // 3470
			}                                                                                                                   // 3471
			else {                                                                                                              // 3472
				fgSegs.push(seg);                                                                                                  // 3473
			}                                                                                                                   // 3474
		}                                                                                                                    // 3475
                                                                                                                       // 3476
		// Render each different type of segment.                                                                            // 3477
		// Each function may return a subset of the segs, segs that were actually rendered.                                  // 3478
		bgSegs = this.renderBgSegs(bgSegs) || bgSegs;                                                                        // 3479
		fgSegs = this.renderFgSegs(fgSegs) || fgSegs;                                                                        // 3480
                                                                                                                       // 3481
		this.segs = bgSegs.concat(fgSegs);                                                                                   // 3482
	},                                                                                                                    // 3483
                                                                                                                       // 3484
                                                                                                                       // 3485
	// Unrenders all events currently rendered on the grid                                                                // 3486
	destroyEvents: function() {                                                                                           // 3487
		this.triggerSegMouseout(); // trigger an eventMouseout if user's mouse is over an event                              // 3488
                                                                                                                       // 3489
		this.destroyFgSegs();                                                                                                // 3490
		this.destroyBgSegs();                                                                                                // 3491
                                                                                                                       // 3492
		this.segs = null;                                                                                                    // 3493
	},                                                                                                                    // 3494
                                                                                                                       // 3495
                                                                                                                       // 3496
	// Retrieves all rendered segment objects currently rendered on the grid                                              // 3497
	getEventSegs: function() {                                                                                            // 3498
		return this.segs || [];                                                                                              // 3499
	},                                                                                                                    // 3500
                                                                                                                       // 3501
                                                                                                                       // 3502
	/* Foreground Segment Rendering                                                                                       // 3503
	------------------------------------------------------------------------------------------------------------------*/  // 3504
                                                                                                                       // 3505
                                                                                                                       // 3506
	// Renders foreground event segments onto the grid. May return a subset of segs that were rendered.                   // 3507
	renderFgSegs: function(segs) {                                                                                        // 3508
		// subclasses must implement                                                                                         // 3509
	},                                                                                                                    // 3510
                                                                                                                       // 3511
                                                                                                                       // 3512
	// Unrenders all currently rendered foreground segments                                                               // 3513
	destroyFgSegs: function() {                                                                                           // 3514
		// subclasses must implement                                                                                         // 3515
	},                                                                                                                    // 3516
                                                                                                                       // 3517
                                                                                                                       // 3518
	// Renders and assigns an `el` property for each foreground event segment.                                            // 3519
	// Only returns segments that successfully rendered.                                                                  // 3520
	// A utility that subclasses may use.                                                                                 // 3521
	renderFgSegEls: function(segs, disableResizing) {                                                                     // 3522
		var view = this.view;                                                                                                // 3523
		var html = '';                                                                                                       // 3524
		var renderedSegs = [];                                                                                               // 3525
		var i;                                                                                                               // 3526
                                                                                                                       // 3527
		if (segs.length) { // don't build an empty html string                                                               // 3528
                                                                                                                       // 3529
			// build a large concatenation of event segment HTML                                                                // 3530
			for (i = 0; i < segs.length; i++) {                                                                                 // 3531
				html += this.fgSegHtml(segs[i], disableResizing);                                                                  // 3532
			}                                                                                                                   // 3533
                                                                                                                       // 3534
			// Grab individual elements from the combined HTML string. Use each as the default rendering.                       // 3535
			// Then, compute the 'el' for each segment. An el might be null if the eventRender callback returned false.         // 3536
			$(html).each(function(i, node) {                                                                                    // 3537
				var seg = segs[i];                                                                                                 // 3538
				var el = view.resolveEventEl(seg.event, $(node));                                                                  // 3539
                                                                                                                       // 3540
				if (el) {                                                                                                          // 3541
					el.data('fc-seg', seg); // used by handlers                                                                       // 3542
					seg.el = el;                                                                                                      // 3543
					renderedSegs.push(seg);                                                                                           // 3544
				}                                                                                                                  // 3545
			});                                                                                                                 // 3546
		}                                                                                                                    // 3547
                                                                                                                       // 3548
		return renderedSegs;                                                                                                 // 3549
	},                                                                                                                    // 3550
                                                                                                                       // 3551
                                                                                                                       // 3552
	// Generates the HTML for the default rendering of a foreground event segment. Used by renderFgSegEls()               // 3553
	fgSegHtml: function(seg, disableResizing) {                                                                           // 3554
		// subclasses should implement                                                                                       // 3555
	},                                                                                                                    // 3556
                                                                                                                       // 3557
                                                                                                                       // 3558
	/* Background Segment Rendering                                                                                       // 3559
	------------------------------------------------------------------------------------------------------------------*/  // 3560
                                                                                                                       // 3561
                                                                                                                       // 3562
	// Renders the given background event segments onto the grid.                                                         // 3563
	// Returns a subset of the segs that were actually rendered.                                                          // 3564
	renderBgSegs: function(segs) {                                                                                        // 3565
		return this.renderFill('bgEvent', segs);                                                                             // 3566
	},                                                                                                                    // 3567
                                                                                                                       // 3568
                                                                                                                       // 3569
	// Unrenders all the currently rendered background event segments                                                     // 3570
	destroyBgSegs: function() {                                                                                           // 3571
		this.destroyFill('bgEvent');                                                                                         // 3572
	},                                                                                                                    // 3573
                                                                                                                       // 3574
                                                                                                                       // 3575
	// Renders a background event element, given the default rendering. Called by the fill system.                        // 3576
	bgEventSegEl: function(seg, el) {                                                                                     // 3577
		return this.view.resolveEventEl(seg.event, el); // will filter through eventRender                                   // 3578
	},                                                                                                                    // 3579
                                                                                                                       // 3580
                                                                                                                       // 3581
	// Generates an array of classNames to be used for the default rendering of a background event.                       // 3582
	// Called by the fill system.                                                                                         // 3583
	bgEventSegClasses: function(seg) {                                                                                    // 3584
		var event = seg.event;                                                                                               // 3585
		var source = event.source || {};                                                                                     // 3586
                                                                                                                       // 3587
		return [ 'fc-bgevent' ].concat(                                                                                      // 3588
			event.className,                                                                                                    // 3589
			source.className || []                                                                                              // 3590
		);                                                                                                                   // 3591
	},                                                                                                                    // 3592
                                                                                                                       // 3593
                                                                                                                       // 3594
	// Generates a semicolon-separated CSS string to be used for the default rendering of a background event.             // 3595
	// Called by the fill system.                                                                                         // 3596
	// TODO: consolidate with getEventSkinCss?                                                                            // 3597
	bgEventSegCss: function(seg) {                                                                                        // 3598
		var view = this.view;                                                                                                // 3599
		var event = seg.event;                                                                                               // 3600
		var source = event.source || {};                                                                                     // 3601
                                                                                                                       // 3602
		return {                                                                                                             // 3603
			'background-color':                                                                                                 // 3604
				event.backgroundColor ||                                                                                           // 3605
				event.color ||                                                                                                     // 3606
				source.backgroundColor ||                                                                                          // 3607
				source.color ||                                                                                                    // 3608
				view.opt('eventBackgroundColor') ||                                                                                // 3609
				view.opt('eventColor')                                                                                             // 3610
		};                                                                                                                   // 3611
	},                                                                                                                    // 3612
                                                                                                                       // 3613
                                                                                                                       // 3614
	// Generates an array of classNames to be used for the rendering business hours overlay. Called by the fill system.   // 3615
	businessHoursSegClasses: function(seg) {                                                                              // 3616
		return [ 'fc-nonbusiness', 'fc-bgevent' ];                                                                           // 3617
	},                                                                                                                    // 3618
                                                                                                                       // 3619
                                                                                                                       // 3620
	/* Handlers                                                                                                           // 3621
	------------------------------------------------------------------------------------------------------------------*/  // 3622
                                                                                                                       // 3623
                                                                                                                       // 3624
	// Attaches event-element-related handlers to the container element and leverage bubbling                             // 3625
	bindSegHandlers: function() {                                                                                         // 3626
		var _this = this;                                                                                                    // 3627
		var view = this.view;                                                                                                // 3628
                                                                                                                       // 3629
		$.each(                                                                                                              // 3630
			{                                                                                                                   // 3631
				mouseenter: function(seg, ev) {                                                                                    // 3632
					_this.triggerSegMouseover(seg, ev);                                                                               // 3633
				},                                                                                                                 // 3634
				mouseleave: function(seg, ev) {                                                                                    // 3635
					_this.triggerSegMouseout(seg, ev);                                                                                // 3636
				},                                                                                                                 // 3637
				click: function(seg, ev) {                                                                                         // 3638
					return view.trigger('eventClick', this, seg.event, ev); // can return `false` to cancel                           // 3639
				},                                                                                                                 // 3640
				mousedown: function(seg, ev) {                                                                                     // 3641
					if ($(ev.target).is('.fc-resizer') && view.isEventResizable(seg.event)) {                                         // 3642
						_this.segResizeMousedown(seg, ev, $(ev.target).is('.fc-start-resizer'));                                         // 3643
					}                                                                                                                 // 3644
					else if (view.isEventDraggable(seg.event)) {                                                                      // 3645
						_this.segDragMousedown(seg, ev);                                                                                 // 3646
					}                                                                                                                 // 3647
				}                                                                                                                  // 3648
			},                                                                                                                  // 3649
			function(name, func) {                                                                                              // 3650
				// attach the handler to the container element and only listen for real event elements via bubbling                // 3651
				_this.el.on(name, '.fc-event-container > *', function(ev) {                                                        // 3652
					var seg = $(this).data('fc-seg'); // grab segment data. put there by View::renderEvents                           // 3653
                                                                                                                       // 3654
					// only call the handlers if there is not a drag/resize in progress                                               // 3655
					if (seg && !_this.isDraggingSeg && !_this.isResizingSeg) {                                                        // 3656
						return func.call(this, seg, ev); // `this` will be the event element                                             // 3657
					}                                                                                                                 // 3658
				});                                                                                                                // 3659
			}                                                                                                                   // 3660
		);                                                                                                                   // 3661
	},                                                                                                                    // 3662
                                                                                                                       // 3663
                                                                                                                       // 3664
	// Updates internal state and triggers handlers for when an event element is moused over                              // 3665
	triggerSegMouseover: function(seg, ev) {                                                                              // 3666
		if (!this.mousedOverSeg) {                                                                                           // 3667
			this.mousedOverSeg = seg;                                                                                           // 3668
			this.view.trigger('eventMouseover', seg.el[0], seg.event, ev);                                                      // 3669
		}                                                                                                                    // 3670
	},                                                                                                                    // 3671
                                                                                                                       // 3672
                                                                                                                       // 3673
	// Updates internal state and triggers handlers for when an event element is moused out.                              // 3674
	// Can be given no arguments, in which case it will mouseout the segment that was previously moused over.             // 3675
	triggerSegMouseout: function(seg, ev) {                                                                               // 3676
		ev = ev || {}; // if given no args, make a mock mouse event                                                          // 3677
                                                                                                                       // 3678
		if (this.mousedOverSeg) {                                                                                            // 3679
			seg = seg || this.mousedOverSeg; // if given no args, use the currently moused-over segment                         // 3680
			this.mousedOverSeg = null;                                                                                          // 3681
			this.view.trigger('eventMouseout', seg.el[0], seg.event, ev);                                                       // 3682
		}                                                                                                                    // 3683
	},                                                                                                                    // 3684
                                                                                                                       // 3685
                                                                                                                       // 3686
	/* Event Dragging                                                                                                     // 3687
	------------------------------------------------------------------------------------------------------------------*/  // 3688
                                                                                                                       // 3689
                                                                                                                       // 3690
	// Called when the user does a mousedown on an event, which might lead to dragging.                                   // 3691
	// Generic enough to work with any type of Grid.                                                                      // 3692
	segDragMousedown: function(seg, ev) {                                                                                 // 3693
		var _this = this;                                                                                                    // 3694
		var view = this.view;                                                                                                // 3695
		var calendar = view.calendar;                                                                                        // 3696
		var el = seg.el;                                                                                                     // 3697
		var event = seg.event;                                                                                               // 3698
		var dropLocation;                                                                                                    // 3699
                                                                                                                       // 3700
		// A clone of the original element that will move with the mouse                                                     // 3701
		var mouseFollower = new MouseFollower(seg.el, {                                                                      // 3702
			parentEl: view.el,                                                                                                  // 3703
			opacity: view.opt('dragOpacity'),                                                                                   // 3704
			revertDuration: view.opt('dragRevertDuration'),                                                                     // 3705
			zIndex: 2 // one above the .fc-view                                                                                 // 3706
		});                                                                                                                  // 3707
                                                                                                                       // 3708
		// Tracks mouse movement over the *view's* coordinate map. Allows dragging and dropping between subcomponents        // 3709
		// of the view.                                                                                                      // 3710
		var dragListener = new CellDragListener(view.coordMap, {                                                             // 3711
			distance: 5,                                                                                                        // 3712
			scroll: view.opt('dragScroll'),                                                                                     // 3713
			subjectEl: el,                                                                                                      // 3714
			subjectCenter: true,                                                                                                // 3715
			listenStart: function(ev) {                                                                                         // 3716
				mouseFollower.hide(); // don't show until we know this is a real drag                                              // 3717
				mouseFollower.start(ev);                                                                                           // 3718
			},                                                                                                                  // 3719
			dragStart: function(ev) {                                                                                           // 3720
				_this.triggerSegMouseout(seg, ev); // ensure a mouseout on the manipulated event has been reported                 // 3721
				_this.segDragStart(seg, ev);                                                                                       // 3722
				view.hideEvent(event); // hide all event segments. our mouseFollower will take over                                // 3723
			},                                                                                                                  // 3724
			cellOver: function(cell, isOrig, origCell) {                                                                        // 3725
                                                                                                                       // 3726
				// starting cell could be forced (DayGrid.limit)                                                                   // 3727
				if (seg.cell) {                                                                                                    // 3728
					origCell = seg.cell;                                                                                              // 3729
				}                                                                                                                  // 3730
                                                                                                                       // 3731
				dropLocation = _this.computeEventDrop(origCell, cell, event);                                                      // 3732
                                                                                                                       // 3733
				if (dropLocation && !calendar.isEventRangeAllowed(dropLocation, event)) {                                          // 3734
					disableCursor();                                                                                                  // 3735
					dropLocation = null;                                                                                              // 3736
				}                                                                                                                  // 3737
                                                                                                                       // 3738
				// if a valid drop location, have the subclass render a visual indication                                          // 3739
				if (dropLocation && view.renderDrag(dropLocation, seg)) {                                                          // 3740
					mouseFollower.hide(); // if the subclass is already using a mock event "helper", hide our own                     // 3741
				}                                                                                                                  // 3742
				else {                                                                                                             // 3743
					mouseFollower.show(); // otherwise, have the helper follow the mouse (no snapping)                                // 3744
				}                                                                                                                  // 3745
                                                                                                                       // 3746
				if (isOrig) {                                                                                                      // 3747
					dropLocation = null; // needs to have moved cells to be a valid drop                                              // 3748
				}                                                                                                                  // 3749
			},                                                                                                                  // 3750
			cellOut: function() { // called before mouse moves to a different cell OR moved out of all cells                    // 3751
				view.destroyDrag(); // unrender whatever was done in renderDrag                                                    // 3752
				mouseFollower.show(); // show in case we are moving out of all cells                                               // 3753
				dropLocation = null;                                                                                               // 3754
			},                                                                                                                  // 3755
			cellDone: function() { // Called after a cellOut OR before a dragStop                                               // 3756
				enableCursor();                                                                                                    // 3757
			},                                                                                                                  // 3758
			dragStop: function(ev) {                                                                                            // 3759
				// do revert animation if hasn't changed. calls a callback when finished (whether animation or not)                // 3760
				mouseFollower.stop(!dropLocation, function() {                                                                     // 3761
					view.destroyDrag();                                                                                               // 3762
					view.showEvent(event);                                                                                            // 3763
					_this.segDragStop(seg, ev);                                                                                       // 3764
                                                                                                                       // 3765
					if (dropLocation) {                                                                                               // 3766
						view.reportEventDrop(event, dropLocation, this.largeUnit, el, ev);                                               // 3767
					}                                                                                                                 // 3768
				});                                                                                                                // 3769
			},                                                                                                                  // 3770
			listenStop: function() {                                                                                            // 3771
				mouseFollower.stop(); // put in listenStop in case there was a mousedown but the drag never started                // 3772
			}                                                                                                                   // 3773
		});                                                                                                                  // 3774
                                                                                                                       // 3775
		dragListener.mousedown(ev); // start listening, which will eventually lead to a dragStart                            // 3776
	},                                                                                                                    // 3777
                                                                                                                       // 3778
                                                                                                                       // 3779
	// Called before event segment dragging starts                                                                        // 3780
	segDragStart: function(seg, ev) {                                                                                     // 3781
		this.isDraggingSeg = true;                                                                                           // 3782
		this.view.trigger('eventDragStart', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy                    // 3783
	},                                                                                                                    // 3784
                                                                                                                       // 3785
                                                                                                                       // 3786
	// Called after event segment dragging stops                                                                          // 3787
	segDragStop: function(seg, ev) {                                                                                      // 3788
		this.isDraggingSeg = false;                                                                                          // 3789
		this.view.trigger('eventDragStop', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy                     // 3790
	},                                                                                                                    // 3791
                                                                                                                       // 3792
                                                                                                                       // 3793
	// Given the cell an event drag began, and the cell event was dropped, calculates the new start/end/allDay            // 3794
	// values for the event. Subclasses may override and set additional properties to be used by renderDrag.              // 3795
	// A falsy returned value indicates an invalid drop.                                                                  // 3796
	computeEventDrop: function(startCell, endCell, event) {                                                               // 3797
		var calendar = this.view.calendar;                                                                                   // 3798
		var dragStart = startCell.start;                                                                                     // 3799
		var dragEnd = endCell.start;                                                                                         // 3800
		var delta;                                                                                                           // 3801
		var dropLocation;                                                                                                    // 3802
                                                                                                                       // 3803
		if (dragStart.hasTime() === dragEnd.hasTime()) {                                                                     // 3804
			delta = this.diffDates(dragEnd, dragStart);                                                                         // 3805
                                                                                                                       // 3806
			// if an all-day event was in a timed area and it was dragged to a different time,                                  // 3807
			// guarantee an end and adjust start/end to have times                                                              // 3808
			if (event.allDay && durationHasTime(delta)) {                                                                       // 3809
				dropLocation = {                                                                                                   // 3810
					start: event.start.clone(),                                                                                       // 3811
					end: calendar.getEventEnd(event), // will be an ambig day                                                         // 3812
					allDay: false // for normalizeEventRangeTimes                                                                     // 3813
				};                                                                                                                 // 3814
				calendar.normalizeEventRangeTimes(dropLocation);                                                                   // 3815
			}                                                                                                                   // 3816
			// othewise, work off existing values                                                                               // 3817
			else {                                                                                                              // 3818
				dropLocation = {                                                                                                   // 3819
					start: event.start.clone(),                                                                                       // 3820
					end: event.end ? event.end.clone() : null,                                                                        // 3821
					allDay: event.allDay // keep it the same                                                                          // 3822
				};                                                                                                                 // 3823
			}                                                                                                                   // 3824
                                                                                                                       // 3825
			dropLocation.start.add(delta);                                                                                      // 3826
			if (dropLocation.end) {                                                                                             // 3827
				dropLocation.end.add(delta);                                                                                       // 3828
			}                                                                                                                   // 3829
		}                                                                                                                    // 3830
		else {                                                                                                               // 3831
			// if switching from day <-> timed, start should be reset to the dropped date, and the end cleared                  // 3832
			dropLocation = {                                                                                                    // 3833
				start: dragEnd.clone(),                                                                                            // 3834
				end: null, // end should be cleared                                                                                // 3835
				allDay: !dragEnd.hasTime()                                                                                         // 3836
			};                                                                                                                  // 3837
		}                                                                                                                    // 3838
                                                                                                                       // 3839
		return dropLocation;                                                                                                 // 3840
	},                                                                                                                    // 3841
                                                                                                                       // 3842
                                                                                                                       // 3843
	// Utility for apply dragOpacity to a jQuery set                                                                      // 3844
	applyDragOpacity: function(els) {                                                                                     // 3845
		var opacity = this.view.opt('dragOpacity');                                                                          // 3846
                                                                                                                       // 3847
		if (opacity != null) {                                                                                               // 3848
			els.each(function(i, node) {                                                                                        // 3849
				// Don't use jQuery (will set an IE filter), do it the old fashioned way.                                          // 3850
				// In IE8, a helper element will disappears if there's a filter.                                                   // 3851
				node.style.opacity = opacity;                                                                                      // 3852
			});                                                                                                                 // 3853
		}                                                                                                                    // 3854
	},                                                                                                                    // 3855
                                                                                                                       // 3856
                                                                                                                       // 3857
	/* External Element Dragging                                                                                          // 3858
	------------------------------------------------------------------------------------------------------------------*/  // 3859
                                                                                                                       // 3860
                                                                                                                       // 3861
	// Called when a jQuery UI drag is initiated anywhere in the DOM                                                      // 3862
	externalDragStart: function(ev, ui) {                                                                                 // 3863
		var view = this.view;                                                                                                // 3864
		var el;                                                                                                              // 3865
		var accept;                                                                                                          // 3866
                                                                                                                       // 3867
		if (view.opt('droppable')) { // only listen if this setting is on                                                    // 3868
			el = $((ui ? ui.item : null) || ev.target);                                                                         // 3869
                                                                                                                       // 3870
			// Test that the dragged element passes the dropAccept selector or filter function.                                 // 3871
			// FYI, the default is "*" (matches all)                                                                            // 3872
			accept = view.opt('dropAccept');                                                                                    // 3873
			if ($.isFunction(accept) ? accept.call(el[0], el) : el.is(accept)) {                                                // 3874
				if (!this.isDraggingExternal) { // prevent double-listening if fired twice                                         // 3875
					this.listenToExternalDrag(el, ev, ui);                                                                            // 3876
				}                                                                                                                  // 3877
			}                                                                                                                   // 3878
		}                                                                                                                    // 3879
	},                                                                                                                    // 3880
                                                                                                                       // 3881
                                                                                                                       // 3882
	// Called when a jQuery UI drag starts and it needs to be monitored for cell dropping                                 // 3883
	listenToExternalDrag: function(el, ev, ui) {                                                                          // 3884
		var _this = this;                                                                                                    // 3885
		var meta = getDraggedElMeta(el); // extra data about event drop, including possible event to create                  // 3886
		var dragListener;                                                                                                    // 3887
		var dropLocation; // a null value signals an unsuccessful drag                                                       // 3888
                                                                                                                       // 3889
		// listener that tracks mouse movement over date-associated pixel regions                                            // 3890
		dragListener = new CellDragListener(this.coordMap, {                                                                 // 3891
			listenStart: function() {                                                                                           // 3892
				_this.isDraggingExternal = true;                                                                                   // 3893
			},                                                                                                                  // 3894
			cellOver: function(cell) {                                                                                          // 3895
				dropLocation = _this.computeExternalDrop(cell, meta);                                                              // 3896
				if (dropLocation) {                                                                                                // 3897
					_this.renderDrag(dropLocation); // called without a seg parameter                                                 // 3898
				}                                                                                                                  // 3899
				else { // invalid drop cell                                                                                        // 3900
					disableCursor();                                                                                                  // 3901
				}                                                                                                                  // 3902
			},                                                                                                                  // 3903
			cellOut: function() {                                                                                               // 3904
				dropLocation = null; // signal unsuccessful                                                                        // 3905
				_this.destroyDrag();                                                                                               // 3906
				enableCursor();                                                                                                    // 3907
			},                                                                                                                  // 3908
			dragStop: function() {                                                                                              // 3909
				_this.destroyDrag();                                                                                               // 3910
				enableCursor();                                                                                                    // 3911
                                                                                                                       // 3912
				if (dropLocation) { // element was dropped on a valid date/time cell                                               // 3913
					_this.view.reportExternalDrop(meta, dropLocation, el, ev, ui);                                                    // 3914
				}                                                                                                                  // 3915
			},                                                                                                                  // 3916
			listenStop: function() {                                                                                            // 3917
				_this.isDraggingExternal = false;                                                                                  // 3918
			}                                                                                                                   // 3919
		});                                                                                                                  // 3920
                                                                                                                       // 3921
		dragListener.startDrag(ev); // start listening immediately                                                           // 3922
	},                                                                                                                    // 3923
                                                                                                                       // 3924
                                                                                                                       // 3925
	// Given a cell to be dropped upon, and misc data associated with the jqui drag (guaranteed to be a plain object),    // 3926
	// returns start/end dates for the event that would result from the hypothetical drop. end might be null.             // 3927
	// Returning a null value signals an invalid drop cell.                                                               // 3928
	computeExternalDrop: function(cell, meta) {                                                                           // 3929
		var dropLocation = {                                                                                                 // 3930
			start: cell.start.clone(),                                                                                          // 3931
			end: null                                                                                                           // 3932
		};                                                                                                                   // 3933
                                                                                                                       // 3934
		// if dropped on an all-day cell, and element's metadata specified a time, set it                                    // 3935
		if (meta.startTime && !dropLocation.start.hasTime()) {                                                               // 3936
			dropLocation.start.time(meta.startTime);                                                                            // 3937
		}                                                                                                                    // 3938
                                                                                                                       // 3939
		if (meta.duration) {                                                                                                 // 3940
			dropLocation.end = dropLocation.start.clone().add(meta.duration);                                                   // 3941
		}                                                                                                                    // 3942
                                                                                                                       // 3943
		if (!this.view.calendar.isExternalDropRangeAllowed(dropLocation, meta.eventProps)) {                                 // 3944
			return null;                                                                                                        // 3945
		}                                                                                                                    // 3946
                                                                                                                       // 3947
		return dropLocation;                                                                                                 // 3948
	},                                                                                                                    // 3949
                                                                                                                       // 3950
                                                                                                                       // 3951
                                                                                                                       // 3952
	/* Drag Rendering (for both events and an external elements)                                                          // 3953
	------------------------------------------------------------------------------------------------------------------*/  // 3954
                                                                                                                       // 3955
                                                                                                                       // 3956
	// Renders a visual indication of an event or external element being dragged.                                         // 3957
	// `dropLocation` contains hypothetical start/end/allDay values the event would have if dropped. end can be null.     // 3958
	// `seg` is the internal segment object that is being dragged. If dragging an external element, `seg` is null.        // 3959
	// A truthy returned value indicates this method has rendered a helper element.                                       // 3960
	renderDrag: function(dropLocation, seg) {                                                                             // 3961
		// subclasses must implement                                                                                         // 3962
	},                                                                                                                    // 3963
                                                                                                                       // 3964
                                                                                                                       // 3965
	// Unrenders a visual indication of an event or external element being dragged                                        // 3966
	destroyDrag: function() {                                                                                             // 3967
		// subclasses must implement                                                                                         // 3968
	},                                                                                                                    // 3969
                                                                                                                       // 3970
                                                                                                                       // 3971
	/* Resizing                                                                                                           // 3972
	------------------------------------------------------------------------------------------------------------------*/  // 3973
                                                                                                                       // 3974
                                                                                                                       // 3975
	// Called when the user does a mousedown on an event's resizer, which might lead to resizing.                         // 3976
	// Generic enough to work with any type of Grid.                                                                      // 3977
	segResizeMousedown: function(seg, ev, isStart) {                                                                      // 3978
		var _this = this;                                                                                                    // 3979
		var view = this.view;                                                                                                // 3980
		var calendar = view.calendar;                                                                                        // 3981
		var el = seg.el;                                                                                                     // 3982
		var event = seg.event;                                                                                               // 3983
		var eventEnd = calendar.getEventEnd(event);                                                                          // 3984
		var dragListener;                                                                                                    // 3985
		var resizeLocation; // falsy if invalid resize                                                                       // 3986
                                                                                                                       // 3987
		// Tracks mouse movement over the *grid's* coordinate map                                                            // 3988
		dragListener = new CellDragListener(this.coordMap, {                                                                 // 3989
			distance: 5,                                                                                                        // 3990
			scroll: view.opt('dragScroll'),                                                                                     // 3991
			subjectEl: el,                                                                                                      // 3992
			dragStart: function(ev) {                                                                                           // 3993
				_this.triggerSegMouseout(seg, ev); // ensure a mouseout on the manipulated event has been reported                 // 3994
				_this.segResizeStart(seg, ev);                                                                                     // 3995
			},                                                                                                                  // 3996
			cellOver: function(cell, isOrig, origCell) {                                                                        // 3997
				resizeLocation = isStart ?                                                                                         // 3998
					_this.computeEventStartResize(origCell, cell, event) :                                                            // 3999
					_this.computeEventEndResize(origCell, cell, event);                                                               // 4000
                                                                                                                       // 4001
				if (resizeLocation) {                                                                                              // 4002
					if (!calendar.isEventRangeAllowed(resizeLocation, event)) {                                                       // 4003
						disableCursor();                                                                                                 // 4004
						resizeLocation = null;                                                                                           // 4005
					}                                                                                                                 // 4006
					// no change? (TODO: how does this work with timezones?)                                                          // 4007
					else if (resizeLocation.start.isSame(event.start) && resizeLocation.end.isSame(eventEnd)) {                       // 4008
						resizeLocation = null;                                                                                           // 4009
					}                                                                                                                 // 4010
				}                                                                                                                  // 4011
                                                                                                                       // 4012
				if (resizeLocation) {                                                                                              // 4013
					view.hideEvent(event);                                                                                            // 4014
					_this.renderEventResize(resizeLocation, seg);                                                                     // 4015
				}                                                                                                                  // 4016
			},                                                                                                                  // 4017
			cellOut: function() { // called before mouse moves to a different cell OR moved out of all cells                    // 4018
				resizeLocation = null;                                                                                             // 4019
			},                                                                                                                  // 4020
			cellDone: function() { // resets the rendering to show the original event                                           // 4021
				_this.destroyEventResize();                                                                                        // 4022
				view.showEvent(event);                                                                                             // 4023
				enableCursor();                                                                                                    // 4024
			},                                                                                                                  // 4025
			dragStop: function(ev) {                                                                                            // 4026
				_this.segResizeStop(seg, ev);                                                                                      // 4027
                                                                                                                       // 4028
				if (resizeLocation) { // valid date to resize to?                                                                  // 4029
					view.reportEventResize(event, resizeLocation, this.largeUnit, el, ev);                                            // 4030
				}                                                                                                                  // 4031
			}                                                                                                                   // 4032
		});                                                                                                                  // 4033
                                                                                                                       // 4034
		dragListener.mousedown(ev); // start listening, which will eventually lead to a dragStart                            // 4035
	},                                                                                                                    // 4036
                                                                                                                       // 4037
                                                                                                                       // 4038
	// Called before event segment resizing starts                                                                        // 4039
	segResizeStart: function(seg, ev) {                                                                                   // 4040
		this.isResizingSeg = true;                                                                                           // 4041
		this.view.trigger('eventResizeStart', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy                  // 4042
	},                                                                                                                    // 4043
                                                                                                                       // 4044
                                                                                                                       // 4045
	// Called after event segment resizing stops                                                                          // 4046
	segResizeStop: function(seg, ev) {                                                                                    // 4047
		this.isResizingSeg = false;                                                                                          // 4048
		this.view.trigger('eventResizeStop', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy                   // 4049
	},                                                                                                                    // 4050
                                                                                                                       // 4051
                                                                                                                       // 4052
	// Returns new date-information for an event segment being resized from its start                                     // 4053
	computeEventStartResize: function(startCell, endCell, event) {                                                        // 4054
		return this.computeEventResize('start', startCell, endCell, event);                                                  // 4055
	},                                                                                                                    // 4056
                                                                                                                       // 4057
                                                                                                                       // 4058
	// Returns new date-information for an event segment being resized from its end                                       // 4059
	computeEventEndResize: function(startCell, endCell, event) {                                                          // 4060
		return this.computeEventResize('end', startCell, endCell, event);                                                    // 4061
	},                                                                                                                    // 4062
                                                                                                                       // 4063
                                                                                                                       // 4064
	// Returns new date-information for an event segment being resized from its start OR end                              // 4065
	// `type` is either 'start' or 'end'                                                                                  // 4066
	computeEventResize: function(type, startCell, endCell, event) {                                                       // 4067
		var calendar = this.view.calendar;                                                                                   // 4068
		var delta = this.diffDates(endCell[type], startCell[type]);                                                          // 4069
		var range;                                                                                                           // 4070
		var defaultDuration;                                                                                                 // 4071
                                                                                                                       // 4072
		// build original values to work from, guaranteeing a start and end                                                  // 4073
		range = {                                                                                                            // 4074
			start: event.start.clone(),                                                                                         // 4075
			end: calendar.getEventEnd(event),                                                                                   // 4076
			allDay: event.allDay                                                                                                // 4077
		};                                                                                                                   // 4078
                                                                                                                       // 4079
		// if an all-day event was in a timed area and was resized to a time, adjust start/end to have times                 // 4080
		if (range.allDay && durationHasTime(delta)) {                                                                        // 4081
			range.allDay = false;                                                                                               // 4082
			calendar.normalizeEventRangeTimes(range);                                                                           // 4083
		}                                                                                                                    // 4084
                                                                                                                       // 4085
		range[type].add(delta); // apply delta to start or end                                                               // 4086
                                                                                                                       // 4087
		// if the event was compressed too small, find a new reasonable duration for it                                      // 4088
		if (!range.start.isBefore(range.end)) {                                                                              // 4089
                                                                                                                       // 4090
			defaultDuration = event.allDay ?                                                                                    // 4091
				calendar.defaultAllDayEventDuration :                                                                              // 4092
				calendar.defaultTimedEventDuration;                                                                                // 4093
                                                                                                                       // 4094
			// between the cell's duration and the event's default duration, use the smaller of the two.                        // 4095
			// example: if year-length slots, and compressed to one slot, we don't want the event to be a year long             // 4096
			if (this.cellDuration && this.cellDuration < defaultDuration) {                                                     // 4097
				defaultDuration = this.cellDuration;                                                                               // 4098
			}                                                                                                                   // 4099
                                                                                                                       // 4100
			if (type == 'start') { // resizing the start?                                                                       // 4101
				range.start = range.end.clone().subtract(defaultDuration);                                                         // 4102
			}                                                                                                                   // 4103
			else { // resizing the end?                                                                                         // 4104
				range.end = range.start.clone().add(defaultDuration);                                                              // 4105
			}                                                                                                                   // 4106
		}                                                                                                                    // 4107
                                                                                                                       // 4108
		return range;                                                                                                        // 4109
	},                                                                                                                    // 4110
                                                                                                                       // 4111
                                                                                                                       // 4112
	// Renders a visual indication of an event being resized.                                                             // 4113
	// `range` has the updated dates of the event. `seg` is the original segment object involved in the drag.             // 4114
	renderEventResize: function(range, seg) {                                                                             // 4115
		// subclasses must implement                                                                                         // 4116
	},                                                                                                                    // 4117
                                                                                                                       // 4118
                                                                                                                       // 4119
	// Unrenders a visual indication of an event being resized.                                                           // 4120
	destroyEventResize: function() {                                                                                      // 4121
		// subclasses must implement                                                                                         // 4122
	},                                                                                                                    // 4123
                                                                                                                       // 4124
                                                                                                                       // 4125
	/* Rendering Utils                                                                                                    // 4126
	------------------------------------------------------------------------------------------------------------------*/  // 4127
                                                                                                                       // 4128
                                                                                                                       // 4129
	// Compute the text that should be displayed on an event's element.                                                   // 4130
	// `range` can be the Event object itself, or something range-like, with at least a `start`.                          // 4131
	// If event times are disabled, or the event has no time, will return a blank string.                                 // 4132
	// If not specified, formatStr will default to the eventTimeFormat setting,                                           // 4133
	// and displayEnd will default to the displayEventEnd setting.                                                        // 4134
	getEventTimeText: function(range, formatStr, displayEnd) {                                                            // 4135
                                                                                                                       // 4136
		if (formatStr == null) {                                                                                             // 4137
			formatStr = this.eventTimeFormat;                                                                                   // 4138
		}                                                                                                                    // 4139
                                                                                                                       // 4140
		if (displayEnd == null) {                                                                                            // 4141
			displayEnd = this.displayEventEnd;                                                                                  // 4142
		}                                                                                                                    // 4143
                                                                                                                       // 4144
		if (this.displayEventTime && range.start.hasTime()) {                                                                // 4145
			if (displayEnd && range.end) {                                                                                      // 4146
				return this.view.formatRange(range, formatStr);                                                                    // 4147
			}                                                                                                                   // 4148
			else {                                                                                                              // 4149
				return range.start.format(formatStr);                                                                              // 4150
			}                                                                                                                   // 4151
		}                                                                                                                    // 4152
                                                                                                                       // 4153
		return '';                                                                                                           // 4154
	},                                                                                                                    // 4155
                                                                                                                       // 4156
                                                                                                                       // 4157
	// Generic utility for generating the HTML classNames for an event segment's element                                  // 4158
	getSegClasses: function(seg, isDraggable, isResizable) {                                                              // 4159
		var event = seg.event;                                                                                               // 4160
		var classes = [                                                                                                      // 4161
			'fc-event',                                                                                                         // 4162
			seg.isStart ? 'fc-start' : 'fc-not-start',                                                                          // 4163
			seg.isEnd ? 'fc-end' : 'fc-not-end'                                                                                 // 4164
		].concat(                                                                                                            // 4165
			event.className,                                                                                                    // 4166
			event.source ? event.source.className : []                                                                          // 4167
		);                                                                                                                   // 4168
                                                                                                                       // 4169
		if (isDraggable) {                                                                                                   // 4170
			classes.push('fc-draggable');                                                                                       // 4171
		}                                                                                                                    // 4172
		if (isResizable) {                                                                                                   // 4173
			classes.push('fc-resizable');                                                                                       // 4174
		}                                                                                                                    // 4175
                                                                                                                       // 4176
		return classes;                                                                                                      // 4177
	},                                                                                                                    // 4178
                                                                                                                       // 4179
                                                                                                                       // 4180
	// Utility for generating event skin-related CSS properties                                                           // 4181
	getEventSkinCss: function(event) {                                                                                    // 4182
		var view = this.view;                                                                                                // 4183
		var source = event.source || {};                                                                                     // 4184
		var eventColor = event.color;                                                                                        // 4185
		var sourceColor = source.color;                                                                                      // 4186
		var optionColor = view.opt('eventColor');                                                                            // 4187
                                                                                                                       // 4188
		return {                                                                                                             // 4189
			'background-color':                                                                                                 // 4190
				event.backgroundColor ||                                                                                           // 4191
				eventColor ||                                                                                                      // 4192
				source.backgroundColor ||                                                                                          // 4193
				sourceColor ||                                                                                                     // 4194
				view.opt('eventBackgroundColor') ||                                                                                // 4195
				optionColor,                                                                                                       // 4196
			'border-color':                                                                                                     // 4197
				event.borderColor ||                                                                                               // 4198
				eventColor ||                                                                                                      // 4199
				source.borderColor ||                                                                                              // 4200
				sourceColor ||                                                                                                     // 4201
				view.opt('eventBorderColor') ||                                                                                    // 4202
				optionColor,                                                                                                       // 4203
			color:                                                                                                              // 4204
				event.textColor ||                                                                                                 // 4205
				source.textColor ||                                                                                                // 4206
				view.opt('eventTextColor')                                                                                         // 4207
		};                                                                                                                   // 4208
	},                                                                                                                    // 4209
                                                                                                                       // 4210
                                                                                                                       // 4211
	/* Converting events -> ranges -> segs                                                                                // 4212
	------------------------------------------------------------------------------------------------------------------*/  // 4213
                                                                                                                       // 4214
                                                                                                                       // 4215
	// Converts an array of event objects into an array of event segment objects.                                         // 4216
	// A custom `rangeToSegsFunc` may be given for arbitrarily slicing up events.                                         // 4217
	// Doesn't guarantee an order for the resulting array.                                                                // 4218
	eventsToSegs: function(events, rangeToSegsFunc) {                                                                     // 4219
		var eventRanges = this.eventsToRanges(events);                                                                       // 4220
		var segs = [];                                                                                                       // 4221
		var i;                                                                                                               // 4222
                                                                                                                       // 4223
		for (i = 0; i < eventRanges.length; i++) {                                                                           // 4224
			segs.push.apply(                                                                                                    // 4225
				segs,                                                                                                              // 4226
				this.eventRangeToSegs(eventRanges[i], rangeToSegsFunc)                                                             // 4227
			);                                                                                                                  // 4228
		}                                                                                                                    // 4229
                                                                                                                       // 4230
		return segs;                                                                                                         // 4231
	},                                                                                                                    // 4232
                                                                                                                       // 4233
                                                                                                                       // 4234
	// Converts an array of events into an array of "range" objects.                                                      // 4235
	// A "range" object is a plain object with start/end properties denoting the time it covers. Also an event property.  // 4236
	// For "normal" events, this will be identical to the event's start/end, but for "inverse-background" events,         // 4237
	// will create an array of ranges that span the time *not* covered by the given event.                                // 4238
	// Doesn't guarantee an order for the resulting array.                                                                // 4239
	eventsToRanges: function(events) {                                                                                    // 4240
		var _this = this;                                                                                                    // 4241
		var eventsById = groupEventsById(events);                                                                            // 4242
		var ranges = [];                                                                                                     // 4243
                                                                                                                       // 4244
		// group by ID so that related inverse-background events can be rendered together                                    // 4245
		$.each(eventsById, function(id, eventGroup) {                                                                        // 4246
			if (eventGroup.length) {                                                                                            // 4247
				ranges.push.apply(                                                                                                 // 4248
					ranges,                                                                                                           // 4249
					isInverseBgEvent(eventGroup[0]) ?                                                                                 // 4250
						_this.eventsToInverseRanges(eventGroup) :                                                                        // 4251
						_this.eventsToNormalRanges(eventGroup)                                                                           // 4252
				);                                                                                                                 // 4253
			}                                                                                                                   // 4254
		});                                                                                                                  // 4255
                                                                                                                       // 4256
		return ranges;                                                                                                       // 4257
	},                                                                                                                    // 4258
                                                                                                                       // 4259
                                                                                                                       // 4260
	// Converts an array of "normal" events (not inverted rendering) into a parallel array of ranges                      // 4261
	eventsToNormalRanges: function(events) {                                                                              // 4262
		var calendar = this.view.calendar;                                                                                   // 4263
		var ranges = [];                                                                                                     // 4264
		var i, event;                                                                                                        // 4265
		var eventStart, eventEnd;                                                                                            // 4266
                                                                                                                       // 4267
		for (i = 0; i < events.length; i++) {                                                                                // 4268
			event = events[i];                                                                                                  // 4269
                                                                                                                       // 4270
			// make copies and normalize by stripping timezone                                                                  // 4271
			eventStart = event.start.clone().stripZone();                                                                       // 4272
			eventEnd = calendar.getEventEnd(event).stripZone();                                                                 // 4273
                                                                                                                       // 4274
			ranges.push({                                                                                                       // 4275
				event: event,                                                                                                      // 4276
				start: eventStart,                                                                                                 // 4277
				end: eventEnd,                                                                                                     // 4278
				eventStartMS: +eventStart,                                                                                         // 4279
				eventDurationMS: eventEnd - eventStart                                                                             // 4280
			});                                                                                                                 // 4281
		}                                                                                                                    // 4282
                                                                                                                       // 4283
		return ranges;                                                                                                       // 4284
	},                                                                                                                    // 4285
                                                                                                                       // 4286
                                                                                                                       // 4287
	// Converts an array of events, with inverse-background rendering, into an array of range objects.                    // 4288
	// The range objects will cover all the time NOT covered by the events.                                               // 4289
	eventsToInverseRanges: function(events) {                                                                             // 4290
		var view = this.view;                                                                                                // 4291
		var viewStart = view.start.clone().stripZone(); // normalize timezone                                                // 4292
		var viewEnd = view.end.clone().stripZone(); // normalize timezone                                                    // 4293
		var normalRanges = this.eventsToNormalRanges(events); // will give us normalized dates we can use w/o copies         // 4294
		var inverseRanges = [];                                                                                              // 4295
		var event0 = events[0]; // assign this to each range's `.event`                                                      // 4296
		var start = viewStart; // the end of the previous range. the start of the new range                                  // 4297
		var i, normalRange;                                                                                                  // 4298
                                                                                                                       // 4299
		// ranges need to be in order. required for our date-walking algorithm                                               // 4300
		normalRanges.sort(compareNormalRanges);                                                                              // 4301
                                                                                                                       // 4302
		for (i = 0; i < normalRanges.length; i++) {                                                                          // 4303
			normalRange = normalRanges[i];                                                                                      // 4304
                                                                                                                       // 4305
			// add the span of time before the event (if there is any)                                                          // 4306
			if (normalRange.start > start) { // compare millisecond time (skip any ambig logic)                                 // 4307
				inverseRanges.push({                                                                                               // 4308
					event: event0,                                                                                                    // 4309
					start: start,                                                                                                     // 4310
					end: normalRange.start                                                                                            // 4311
				});                                                                                                                // 4312
			}                                                                                                                   // 4313
                                                                                                                       // 4314
			start = normalRange.end;                                                                                            // 4315
		}                                                                                                                    // 4316
                                                                                                                       // 4317
		// add the span of time after the last event (if there is any)                                                       // 4318
		if (start < viewEnd) { // compare millisecond time (skip any ambig logic)                                            // 4319
			inverseRanges.push({                                                                                                // 4320
				event: event0,                                                                                                     // 4321
				start: start,                                                                                                      // 4322
				end: viewEnd                                                                                                       // 4323
			});                                                                                                                 // 4324
		}                                                                                                                    // 4325
                                                                                                                       // 4326
		return inverseRanges;                                                                                                // 4327
	},                                                                                                                    // 4328
                                                                                                                       // 4329
                                                                                                                       // 4330
	// Slices the given event range into one or more segment objects.                                                     // 4331
	// A `rangeToSegsFunc` custom slicing function can be given.                                                          // 4332
	eventRangeToSegs: function(eventRange, rangeToSegsFunc) {                                                             // 4333
		var segs;                                                                                                            // 4334
		var i, seg;                                                                                                          // 4335
                                                                                                                       // 4336
		if (rangeToSegsFunc) {                                                                                               // 4337
			segs = rangeToSegsFunc(eventRange);                                                                                 // 4338
		}                                                                                                                    // 4339
		else {                                                                                                               // 4340
			segs = this.rangeToSegs(eventRange); // defined by the subclass                                                     // 4341
		}                                                                                                                    // 4342
                                                                                                                       // 4343
		for (i = 0; i < segs.length; i++) {                                                                                  // 4344
			seg = segs[i];                                                                                                      // 4345
			seg.event = eventRange.event;                                                                                       // 4346
			seg.eventStartMS = eventRange.eventStartMS;                                                                         // 4347
			seg.eventDurationMS = eventRange.eventDurationMS;                                                                   // 4348
		}                                                                                                                    // 4349
                                                                                                                       // 4350
		return segs;                                                                                                         // 4351
	}                                                                                                                     // 4352
                                                                                                                       // 4353
});                                                                                                                    // 4354
                                                                                                                       // 4355
                                                                                                                       // 4356
/* Utilities                                                                                                           // 4357
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 4359
                                                                                                                       // 4360
function isBgEvent(event) { // returns true if background OR inverse-background                                        // 4361
	var rendering = getEventRendering(event);                                                                             // 4362
	return rendering === 'background' || rendering === 'inverse-background';                                              // 4363
}                                                                                                                      // 4364
                                                                                                                       // 4365
                                                                                                                       // 4366
function isInverseBgEvent(event) {                                                                                     // 4367
	return getEventRendering(event) === 'inverse-background';                                                             // 4368
}                                                                                                                      // 4369
                                                                                                                       // 4370
                                                                                                                       // 4371
function getEventRendering(event) {                                                                                    // 4372
	return firstDefined((event.source || {}).rendering, event.rendering);                                                 // 4373
}                                                                                                                      // 4374
                                                                                                                       // 4375
                                                                                                                       // 4376
function groupEventsById(events) {                                                                                     // 4377
	var eventsById = {};                                                                                                  // 4378
	var i, event;                                                                                                         // 4379
                                                                                                                       // 4380
	for (i = 0; i < events.length; i++) {                                                                                 // 4381
		event = events[i];                                                                                                   // 4382
		(eventsById[event._id] || (eventsById[event._id] = [])).push(event);                                                 // 4383
	}                                                                                                                     // 4384
                                                                                                                       // 4385
	return eventsById;                                                                                                    // 4386
}                                                                                                                      // 4387
                                                                                                                       // 4388
                                                                                                                       // 4389
// A cmp function for determining which non-inverted "ranges" (see above) happen earlier                               // 4390
function compareNormalRanges(range1, range2) {                                                                         // 4391
	return range1.eventStartMS - range2.eventStartMS; // earlier ranges go first                                          // 4392
}                                                                                                                      // 4393
                                                                                                                       // 4394
                                                                                                                       // 4395
// A cmp function for determining which segments should take visual priority                                           // 4396
// DOES NOT WORK ON INVERTED BACKGROUND EVENTS because they have no eventStartMS/eventDurationMS                       // 4397
function compareSegs(seg1, seg2) {                                                                                     // 4398
	return seg1.eventStartMS - seg2.eventStartMS || // earlier events go first                                            // 4399
		seg2.eventDurationMS - seg1.eventDurationMS || // tie? longer events go first                                        // 4400
		seg2.event.allDay - seg1.event.allDay || // tie? put all-day events first (booleans cast to 0/1)                     // 4401
		(seg1.event.title || '').localeCompare(seg2.event.title); // tie? alphabetically by title                            // 4402
}                                                                                                                      // 4403
                                                                                                                       // 4404
fc.compareSegs = compareSegs; // export                                                                                // 4405
                                                                                                                       // 4406
                                                                                                                       // 4407
/* External-Dragging-Element Data                                                                                      // 4408
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 4410
// Require all HTML5 data-* attributes used by FullCalendar to have this prefix.                                       // 4411
// A value of '' will query attributes like data-event. A value of 'fc' will query attributes like data-fc-event.      // 4412
fc.dataAttrPrefix = '';                                                                                                // 4413
                                                                                                                       // 4414
// Given a jQuery element that might represent a dragged FullCalendar event, returns an intermediate data structure    // 4415
// to be used for Event Object creation.                                                                               // 4416
// A defined `.eventProps`, even when empty, indicates that an event should be created.                                // 4417
function getDraggedElMeta(el) {                                                                                        // 4418
	var prefix = fc.dataAttrPrefix;                                                                                       // 4419
	var eventProps; // properties for creating the event, not related to date/time                                        // 4420
	var startTime; // a Duration                                                                                          // 4421
	var duration;                                                                                                         // 4422
	var stick;                                                                                                            // 4423
                                                                                                                       // 4424
	if (prefix) { prefix += '-'; }                                                                                        // 4425
	eventProps = el.data(prefix + 'event') || null;                                                                       // 4426
                                                                                                                       // 4427
	if (eventProps) {                                                                                                     // 4428
		if (typeof eventProps === 'object') {                                                                                // 4429
			eventProps = $.extend({}, eventProps); // make a copy                                                               // 4430
		}                                                                                                                    // 4431
		else { // something like 1 or true. still signal event creation                                                      // 4432
			eventProps = {};                                                                                                    // 4433
		}                                                                                                                    // 4434
                                                                                                                       // 4435
		// pluck special-cased date/time properties                                                                          // 4436
		startTime = eventProps.start;                                                                                        // 4437
		if (startTime == null) { startTime = eventProps.time; } // accept 'time' as well                                     // 4438
		duration = eventProps.duration;                                                                                      // 4439
		stick = eventProps.stick;                                                                                            // 4440
		delete eventProps.start;                                                                                             // 4441
		delete eventProps.time;                                                                                              // 4442
		delete eventProps.duration;                                                                                          // 4443
		delete eventProps.stick;                                                                                             // 4444
	}                                                                                                                     // 4445
                                                                                                                       // 4446
	// fallback to standalone attribute values for each of the date/time properties                                       // 4447
	if (startTime == null) { startTime = el.data(prefix + 'start'); }                                                     // 4448
	if (startTime == null) { startTime = el.data(prefix + 'time'); } // accept 'time' as well                             // 4449
	if (duration == null) { duration = el.data(prefix + 'duration'); }                                                    // 4450
	if (stick == null) { stick = el.data(prefix + 'stick'); }                                                             // 4451
                                                                                                                       // 4452
	// massage into correct data types                                                                                    // 4453
	startTime = startTime != null ? moment.duration(startTime) : null;                                                    // 4454
	duration = duration != null ? moment.duration(duration) : null;                                                       // 4455
	stick = Boolean(stick);                                                                                               // 4456
                                                                                                                       // 4457
	return { eventProps: eventProps, startTime: startTime, duration: duration, stick: stick };                            // 4458
}                                                                                                                      // 4459
                                                                                                                       // 4460
                                                                                                                       // 4461
;;                                                                                                                     // 4462
                                                                                                                       // 4463
/* A component that renders a grid of whole-days that runs horizontally. There can be multiple rows, one per week.     // 4464
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 4466
var DayGrid = Grid.extend({                                                                                            // 4467
                                                                                                                       // 4468
	numbersVisible: false, // should render a row for day/week numbers? set by outside view. TODO: make internal          // 4469
	bottomCoordPadding: 0, // hack for extending the hit area for the last row of the coordinate grid                     // 4470
	breakOnWeeks: null, // should create a new row for each week? set by outside view                                     // 4471
                                                                                                                       // 4472
	cellDates: null, // flat chronological array of each cell's dates                                                     // 4473
	dayToCellOffsets: null, // maps days offsets from grid's start date, to cell offsets                                  // 4474
                                                                                                                       // 4475
	rowEls: null, // set of fake row elements                                                                             // 4476
	dayEls: null, // set of whole-day elements comprising the row's background                                            // 4477
	helperEls: null, // set of cell skeleton elements for rendering the mock event "helper"                               // 4478
                                                                                                                       // 4479
                                                                                                                       // 4480
	constructor: function() {                                                                                             // 4481
		Grid.apply(this, arguments);                                                                                         // 4482
                                                                                                                       // 4483
		this.cellDuration = moment.duration(1, 'day'); // for Grid system                                                    // 4484
	},                                                                                                                    // 4485
                                                                                                                       // 4486
                                                                                                                       // 4487
	// Renders the rows and columns into the component's `this.el`, which should already be assigned.                     // 4488
	// isRigid determins whether the individual rows should ignore the contents and be a constant height.                 // 4489
	// Relies on the view's colCnt and rowCnt. In the future, this component should probably be self-sufficient.          // 4490
	renderDates: function(isRigid) {                                                                                      // 4491
		var view = this.view;                                                                                                // 4492
		var rowCnt = this.rowCnt;                                                                                            // 4493
		var colCnt = this.colCnt;                                                                                            // 4494
		var cellCnt = rowCnt * colCnt;                                                                                       // 4495
		var html = '';                                                                                                       // 4496
		var row;                                                                                                             // 4497
		var i, cell;                                                                                                         // 4498
                                                                                                                       // 4499
		for (row = 0; row < rowCnt; row++) {                                                                                 // 4500
			html += this.dayRowHtml(row, isRigid);                                                                              // 4501
		}                                                                                                                    // 4502
		this.el.html(html);                                                                                                  // 4503
                                                                                                                       // 4504
		this.rowEls = this.el.find('.fc-row');                                                                               // 4505
		this.dayEls = this.el.find('.fc-day');                                                                               // 4506
                                                                                                                       // 4507
		// trigger dayRender with each cell's element                                                                        // 4508
		for (i = 0; i < cellCnt; i++) {                                                                                      // 4509
			cell = this.getCell(i);                                                                                             // 4510
			view.trigger('dayRender', null, cell.start, this.dayEls.eq(i));                                                     // 4511
		}                                                                                                                    // 4512
	},                                                                                                                    // 4513
                                                                                                                       // 4514
                                                                                                                       // 4515
	destroyDates: function() {                                                                                            // 4516
		this.destroySegPopover();                                                                                            // 4517
	},                                                                                                                    // 4518
                                                                                                                       // 4519
                                                                                                                       // 4520
	renderBusinessHours: function() {                                                                                     // 4521
		var events = this.view.calendar.getBusinessHoursEvents(true); // wholeDay=true                                       // 4522
		var segs = this.eventsToSegs(events);                                                                                // 4523
                                                                                                                       // 4524
		this.renderFill('businessHours', segs, 'bgevent');                                                                   // 4525
	},                                                                                                                    // 4526
                                                                                                                       // 4527
                                                                                                                       // 4528
	// Generates the HTML for a single row. `row` is the row number.                                                      // 4529
	dayRowHtml: function(row, isRigid) {                                                                                  // 4530
		var view = this.view;                                                                                                // 4531
		var classes = [ 'fc-row', 'fc-week', view.widgetContentClass ];                                                      // 4532
                                                                                                                       // 4533
		if (isRigid) {                                                                                                       // 4534
			classes.push('fc-rigid');                                                                                           // 4535
		}                                                                                                                    // 4536
                                                                                                                       // 4537
		return '' +                                                                                                          // 4538
			'<div class="' + classes.join(' ') + '">' +                                                                         // 4539
				'<div class="fc-bg">' +                                                                                            // 4540
					'<table>' +                                                                                                       // 4541
						this.rowHtml('day', row) + // leverages RowRenderer. calls dayCellHtml()                                         // 4542
					'</table>' +                                                                                                      // 4543
				'</div>' +                                                                                                         // 4544
				'<div class="fc-content-skeleton">' +                                                                              // 4545
					'<table>' +                                                                                                       // 4546
						(this.numbersVisible ?                                                                                           // 4547
							'<thead>' +                                                                                                     // 4548
								this.rowHtml('number', row) + // leverages RowRenderer. View will define render method                         // 4549
							'</thead>' :                                                                                                    // 4550
							''                                                                                                              // 4551
							) +                                                                                                             // 4552
					'</table>' +                                                                                                      // 4553
				'</div>' +                                                                                                         // 4554
			'</div>';                                                                                                           // 4555
	},                                                                                                                    // 4556
                                                                                                                       // 4557
                                                                                                                       // 4558
	// Renders the HTML for a whole-day cell. Will eventually end up in the day-row's background.                         // 4559
	// We go through a 'day' row type instead of just doing a 'bg' row type so that the View can do custom rendering      // 4560
	// specifically for whole-day rows, whereas a 'bg' might also be used for other purposes (TimeGrid bg for example).   // 4561
	dayCellHtml: function(cell) {                                                                                         // 4562
		return this.bgCellHtml(cell);                                                                                        // 4563
	},                                                                                                                    // 4564
                                                                                                                       // 4565
                                                                                                                       // 4566
	/* Options                                                                                                            // 4567
	------------------------------------------------------------------------------------------------------------------*/  // 4568
                                                                                                                       // 4569
                                                                                                                       // 4570
	// Computes a default column header formatting string if `colFormat` is not explicitly defined                        // 4571
	computeColHeadFormat: function() {                                                                                    // 4572
		if (this.rowCnt > 1) { // more than one week row. day numbers will be in each cell                                   // 4573
			return 'ddd'; // "Sat"                                                                                              // 4574
		}                                                                                                                    // 4575
		else if (this.colCnt > 1) { // multiple days, so full single date string WON'T be in title text                      // 4576
			return this.view.opt('dayOfMonthFormat'); // "Sat 12/10"                                                            // 4577
		}                                                                                                                    // 4578
		else { // single day, so full single date string will probably be in title text                                      // 4579
			return 'dddd'; // "Saturday"                                                                                        // 4580
		}                                                                                                                    // 4581
	},                                                                                                                    // 4582
                                                                                                                       // 4583
                                                                                                                       // 4584
	// Computes a default event time formatting string if `timeFormat` is not explicitly defined                          // 4585
	computeEventTimeFormat: function() {                                                                                  // 4586
		return this.view.opt('extraSmallTimeFormat'); // like "6p" or "6:30p"                                                // 4587
	},                                                                                                                    // 4588
                                                                                                                       // 4589
                                                                                                                       // 4590
	// Computes a default `displayEventEnd` value if one is not expliclty defined                                         // 4591
	computeDisplayEventEnd: function() {                                                                                  // 4592
		return this.colCnt == 1; // we'll likely have space if there's only one day                                          // 4593
	},                                                                                                                    // 4594
                                                                                                                       // 4595
                                                                                                                       // 4596
	/* Cell System                                                                                                        // 4597
	------------------------------------------------------------------------------------------------------------------*/  // 4598
                                                                                                                       // 4599
                                                                                                                       // 4600
	// Initializes row/col information                                                                                    // 4601
	updateCells: function() {                                                                                             // 4602
		var cellDates;                                                                                                       // 4603
		var firstDay;                                                                                                        // 4604
		var rowCnt;                                                                                                          // 4605
		var colCnt;                                                                                                          // 4606
                                                                                                                       // 4607
		this.updateCellDates(); // populates cellDates and dayToCellOffsets                                                  // 4608
		cellDates = this.cellDates;                                                                                          // 4609
                                                                                                                       // 4610
		if (this.breakOnWeeks) {                                                                                             // 4611
			// count columns until the day-of-week repeats                                                                      // 4612
			firstDay = cellDates[0].day();                                                                                      // 4613
			for (colCnt = 1; colCnt < cellDates.length; colCnt++) {                                                             // 4614
				if (cellDates[colCnt].day() == firstDay) {                                                                         // 4615
					break;                                                                                                            // 4616
				}                                                                                                                  // 4617
			}                                                                                                                   // 4618
			rowCnt = Math.ceil(cellDates.length / colCnt);                                                                      // 4619
		}                                                                                                                    // 4620
		else {                                                                                                               // 4621
			rowCnt = 1;                                                                                                         // 4622
			colCnt = cellDates.length;                                                                                          // 4623
		}                                                                                                                    // 4624
                                                                                                                       // 4625
		this.rowCnt = rowCnt;                                                                                                // 4626
		this.colCnt = colCnt;                                                                                                // 4627
	},                                                                                                                    // 4628
                                                                                                                       // 4629
                                                                                                                       // 4630
	// Populates cellDates and dayToCellOffsets                                                                           // 4631
	updateCellDates: function() {                                                                                         // 4632
		var view = this.view;                                                                                                // 4633
		var date = this.start.clone();                                                                                       // 4634
		var dates = [];                                                                                                      // 4635
		var offset = -1;                                                                                                     // 4636
		var offsets = [];                                                                                                    // 4637
                                                                                                                       // 4638
		while (date.isBefore(this.end)) { // loop each day from start to end                                                 // 4639
			if (view.isHiddenDay(date)) {                                                                                       // 4640
				offsets.push(offset + 0.5); // mark that it's between offsets                                                      // 4641
			}                                                                                                                   // 4642
			else {                                                                                                              // 4643
				offset++;                                                                                                          // 4644
				offsets.push(offset);                                                                                              // 4645
				dates.push(date.clone());                                                                                          // 4646
			}                                                                                                                   // 4647
			date.add(1, 'days');                                                                                                // 4648
		}                                                                                                                    // 4649
                                                                                                                       // 4650
		this.cellDates = dates;                                                                                              // 4651
		this.dayToCellOffsets = offsets;                                                                                     // 4652
	},                                                                                                                    // 4653
                                                                                                                       // 4654
                                                                                                                       // 4655
	// Given a cell object, generates its start date. Returns a reference-free copy.                                      // 4656
	computeCellDate: function(cell) {                                                                                     // 4657
		var colCnt = this.colCnt;                                                                                            // 4658
		var index = cell.row * colCnt + (this.isRTL ? colCnt - cell.col - 1 : cell.col);                                     // 4659
                                                                                                                       // 4660
		return this.cellDates[index].clone();                                                                                // 4661
	},                                                                                                                    // 4662
                                                                                                                       // 4663
                                                                                                                       // 4664
	// Retrieves the element representing the given row                                                                   // 4665
	getRowEl: function(row) {                                                                                             // 4666
		return this.rowEls.eq(row);                                                                                          // 4667
	},                                                                                                                    // 4668
                                                                                                                       // 4669
                                                                                                                       // 4670
	// Retrieves the element representing the given column                                                                // 4671
	getColEl: function(col) {                                                                                             // 4672
		return this.dayEls.eq(col);                                                                                          // 4673
	},                                                                                                                    // 4674
                                                                                                                       // 4675
                                                                                                                       // 4676
	// Gets the whole-day element associated with the cell                                                                // 4677
	getCellDayEl: function(cell) {                                                                                        // 4678
		return this.dayEls.eq(cell.row * this.colCnt + cell.col);                                                            // 4679
	},                                                                                                                    // 4680
                                                                                                                       // 4681
                                                                                                                       // 4682
	// Overrides Grid's method for when row coordinates are computed                                                      // 4683
	computeRowCoords: function() {                                                                                        // 4684
		var rowCoords = Grid.prototype.computeRowCoords.call(this); // call the super-method                                 // 4685
                                                                                                                       // 4686
		// hack for extending last row (used by AgendaView)                                                                  // 4687
		rowCoords[rowCoords.length - 1].bottom += this.bottomCoordPadding;                                                   // 4688
                                                                                                                       // 4689
		return rowCoords;                                                                                                    // 4690
	},                                                                                                                    // 4691
                                                                                                                       // 4692
                                                                                                                       // 4693
	/* Dates                                                                                                              // 4694
	------------------------------------------------------------------------------------------------------------------*/  // 4695
                                                                                                                       // 4696
                                                                                                                       // 4697
	// Slices up a date range by row into an array of segments                                                            // 4698
	rangeToSegs: function(range) {                                                                                        // 4699
		var isRTL = this.isRTL;                                                                                              // 4700
		var rowCnt = this.rowCnt;                                                                                            // 4701
		var colCnt = this.colCnt;                                                                                            // 4702
		var segs = [];                                                                                                       // 4703
		var first, last; // inclusive cell-offset range for given range                                                      // 4704
		var row;                                                                                                             // 4705
		var rowFirst, rowLast; // inclusive cell-offset range for current row                                                // 4706
		var isStart, isEnd;                                                                                                  // 4707
		var segFirst, segLast; // inclusive cell-offset range for segment                                                    // 4708
		var seg;                                                                                                             // 4709
                                                                                                                       // 4710
		range = this.view.computeDayRange(range); // make whole-day range, considering nextDayThreshold                      // 4711
		first = this.dateToCellOffset(range.start);                                                                          // 4712
		last = this.dateToCellOffset(range.end.subtract(1, 'days')); // offset of inclusive end date                         // 4713
                                                                                                                       // 4714
		for (row = 0; row < rowCnt; row++) {                                                                                 // 4715
			rowFirst = row * colCnt;                                                                                            // 4716
			rowLast = rowFirst + colCnt - 1;                                                                                    // 4717
                                                                                                                       // 4718
			// intersect segment's offset range with the row's                                                                  // 4719
			segFirst = Math.max(rowFirst, first);                                                                               // 4720
			segLast = Math.min(rowLast, last);                                                                                  // 4721
                                                                                                                       // 4722
			// deal with in-between indices                                                                                     // 4723
			segFirst = Math.ceil(segFirst); // in-between starts round to next cell                                             // 4724
			segLast = Math.floor(segLast); // in-between ends round to prev cell                                                // 4725
                                                                                                                       // 4726
			if (segFirst <= segLast) { // was there any intersection with the current row?                                      // 4727
                                                                                                                       // 4728
				// must be matching integers to be the segment's start/end                                                         // 4729
				isStart = segFirst === first;                                                                                      // 4730
				isEnd = segLast === last;                                                                                          // 4731
                                                                                                                       // 4732
				// translate offsets to be relative to start-of-row                                                                // 4733
				segFirst -= rowFirst;                                                                                              // 4734
				segLast -= rowFirst;                                                                                               // 4735
                                                                                                                       // 4736
				seg = { row: row, isStart: isStart, isEnd: isEnd };                                                                // 4737
				if (isRTL) {                                                                                                       // 4738
					seg.leftCol = colCnt - segLast - 1;                                                                               // 4739
					seg.rightCol = colCnt - segFirst - 1;                                                                             // 4740
				}                                                                                                                  // 4741
				else {                                                                                                             // 4742
					seg.leftCol = segFirst;                                                                                           // 4743
					seg.rightCol = segLast;                                                                                           // 4744
				}                                                                                                                  // 4745
				segs.push(seg);                                                                                                    // 4746
			}                                                                                                                   // 4747
		}                                                                                                                    // 4748
                                                                                                                       // 4749
		return segs;                                                                                                         // 4750
	},                                                                                                                    // 4751
                                                                                                                       // 4752
                                                                                                                       // 4753
	// Given a date, returns its chronolocial cell-offset from the first cell of the grid.                                // 4754
	// If the date lies between cells (because of hiddenDays), returns a floating-point value between offsets.            // 4755
	// If before the first offset, returns a negative number.                                                             // 4756
	// If after the last offset, returns an offset past the last cell offset.                                             // 4757
	// Only works for *start* dates of cells. Will not work for exclusive end dates for cells.                            // 4758
	dateToCellOffset: function(date) {                                                                                    // 4759
		var offsets = this.dayToCellOffsets;                                                                                 // 4760
		var day = date.diff(this.start, 'days');                                                                             // 4761
                                                                                                                       // 4762
		if (day < 0) {                                                                                                       // 4763
			return offsets[0] - 1;                                                                                              // 4764
		}                                                                                                                    // 4765
		else if (day >= offsets.length) {                                                                                    // 4766
			return offsets[offsets.length - 1] + 1;                                                                             // 4767
		}                                                                                                                    // 4768
		else {                                                                                                               // 4769
			return offsets[day];                                                                                                // 4770
		}                                                                                                                    // 4771
	},                                                                                                                    // 4772
                                                                                                                       // 4773
                                                                                                                       // 4774
	/* Event Drag Visualization                                                                                           // 4775
	------------------------------------------------------------------------------------------------------------------*/  // 4776
	// TODO: move to DayGrid.event, similar to what we did with Grid's drag methods                                       // 4777
                                                                                                                       // 4778
                                                                                                                       // 4779
	// Renders a visual indication of an event or external element being dragged.                                         // 4780
	// The dropLocation's end can be null. seg can be null. See Grid::renderDrag for more info.                           // 4781
	renderDrag: function(dropLocation, seg) {                                                                             // 4782
                                                                                                                       // 4783
		// always render a highlight underneath                                                                              // 4784
		this.renderHighlight(                                                                                                // 4785
			this.view.calendar.ensureVisibleEventRange(dropLocation) // needs to be a proper range                              // 4786
		);                                                                                                                   // 4787
                                                                                                                       // 4788
		// if a segment from the same calendar but another component is being dragged, render a helper event                 // 4789
		if (seg && !seg.el.closest(this.el).length) {                                                                        // 4790
                                                                                                                       // 4791
			this.renderRangeHelper(dropLocation, seg);                                                                          // 4792
			this.applyDragOpacity(this.helperEls);                                                                              // 4793
                                                                                                                       // 4794
			return true; // a helper has been rendered                                                                          // 4795
		}                                                                                                                    // 4796
	},                                                                                                                    // 4797
                                                                                                                       // 4798
                                                                                                                       // 4799
	// Unrenders any visual indication of a hovering event                                                                // 4800
	destroyDrag: function() {                                                                                             // 4801
		this.destroyHighlight();                                                                                             // 4802
		this.destroyHelper();                                                                                                // 4803
	},                                                                                                                    // 4804
                                                                                                                       // 4805
                                                                                                                       // 4806
	/* Event Resize Visualization                                                                                         // 4807
	------------------------------------------------------------------------------------------------------------------*/  // 4808
                                                                                                                       // 4809
                                                                                                                       // 4810
	// Renders a visual indication of an event being resized                                                              // 4811
	renderEventResize: function(range, seg) {                                                                             // 4812
		this.renderHighlight(range);                                                                                         // 4813
		this.renderRangeHelper(range, seg);                                                                                  // 4814
	},                                                                                                                    // 4815
                                                                                                                       // 4816
                                                                                                                       // 4817
	// Unrenders a visual indication of an event being resized                                                            // 4818
	destroyEventResize: function() {                                                                                      // 4819
		this.destroyHighlight();                                                                                             // 4820
		this.destroyHelper();                                                                                                // 4821
	},                                                                                                                    // 4822
                                                                                                                       // 4823
                                                                                                                       // 4824
	/* Event Helper                                                                                                       // 4825
	------------------------------------------------------------------------------------------------------------------*/  // 4826
                                                                                                                       // 4827
                                                                                                                       // 4828
	// Renders a mock "helper" event. `sourceSeg` is the associated internal segment object. It can be null.              // 4829
	renderHelper: function(event, sourceSeg) {                                                                            // 4830
		var helperNodes = [];                                                                                                // 4831
		var segs = this.eventsToSegs([ event ]);                                                                             // 4832
		var rowStructs;                                                                                                      // 4833
                                                                                                                       // 4834
		segs = this.renderFgSegEls(segs); // assigns each seg's el and returns a subset of segs that were rendered           // 4835
		rowStructs = this.renderSegRows(segs);                                                                               // 4836
                                                                                                                       // 4837
		// inject each new event skeleton into each associated row                                                           // 4838
		this.rowEls.each(function(row, rowNode) {                                                                            // 4839
			var rowEl = $(rowNode); // the .fc-row                                                                              // 4840
			var skeletonEl = $('<div class="fc-helper-skeleton"><table/></div>'); // will be absolutely positioned              // 4841
			var skeletonTop;                                                                                                    // 4842
                                                                                                                       // 4843
			// If there is an original segment, match the top position. Otherwise, put it at the row's top level                // 4844
			if (sourceSeg && sourceSeg.row === row) {                                                                           // 4845
				skeletonTop = sourceSeg.el.position().top;                                                                         // 4846
			}                                                                                                                   // 4847
			else {                                                                                                              // 4848
				skeletonTop = rowEl.find('.fc-content-skeleton tbody').position().top;                                             // 4849
			}                                                                                                                   // 4850
                                                                                                                       // 4851
			skeletonEl.css('top', skeletonTop)                                                                                  // 4852
				.find('table')                                                                                                     // 4853
					.append(rowStructs[row].tbodyEl);                                                                                 // 4854
                                                                                                                       // 4855
			rowEl.append(skeletonEl);                                                                                           // 4856
			helperNodes.push(skeletonEl[0]);                                                                                    // 4857
		});                                                                                                                  // 4858
                                                                                                                       // 4859
		this.helperEls = $(helperNodes); // array -> jQuery set                                                              // 4860
	},                                                                                                                    // 4861
                                                                                                                       // 4862
                                                                                                                       // 4863
	// Unrenders any visual indication of a mock helper event                                                             // 4864
	destroyHelper: function() {                                                                                           // 4865
		if (this.helperEls) {                                                                                                // 4866
			this.helperEls.remove();                                                                                            // 4867
			this.helperEls = null;                                                                                              // 4868
		}                                                                                                                    // 4869
	},                                                                                                                    // 4870
                                                                                                                       // 4871
                                                                                                                       // 4872
	/* Fill System (highlight, background events, business hours)                                                         // 4873
	------------------------------------------------------------------------------------------------------------------*/  // 4874
                                                                                                                       // 4875
                                                                                                                       // 4876
	fillSegTag: 'td', // override the default tag name                                                                    // 4877
                                                                                                                       // 4878
                                                                                                                       // 4879
	// Renders a set of rectangles over the given segments of days.                                                       // 4880
	// Only returns segments that successfully rendered.                                                                  // 4881
	renderFill: function(type, segs, className) {                                                                         // 4882
		var nodes = [];                                                                                                      // 4883
		var i, seg;                                                                                                          // 4884
		var skeletonEl;                                                                                                      // 4885
                                                                                                                       // 4886
		segs = this.renderFillSegEls(type, segs); // assignes `.el` to each seg. returns successfully rendered segs          // 4887
                                                                                                                       // 4888
		for (i = 0; i < segs.length; i++) {                                                                                  // 4889
			seg = segs[i];                                                                                                      // 4890
			skeletonEl = this.renderFillRow(type, seg, className);                                                              // 4891
			this.rowEls.eq(seg.row).append(skeletonEl);                                                                         // 4892
			nodes.push(skeletonEl[0]);                                                                                          // 4893
		}                                                                                                                    // 4894
                                                                                                                       // 4895
		this.elsByFill[type] = $(nodes);                                                                                     // 4896
                                                                                                                       // 4897
		return segs;                                                                                                         // 4898
	},                                                                                                                    // 4899
                                                                                                                       // 4900
                                                                                                                       // 4901
	// Generates the HTML needed for one row of a fill. Requires the seg's el to be rendered.                             // 4902
	renderFillRow: function(type, seg, className) {                                                                       // 4903
		var colCnt = this.colCnt;                                                                                            // 4904
		var startCol = seg.leftCol;                                                                                          // 4905
		var endCol = seg.rightCol + 1;                                                                                       // 4906
		var skeletonEl;                                                                                                      // 4907
		var trEl;                                                                                                            // 4908
                                                                                                                       // 4909
		className = className || type.toLowerCase();                                                                         // 4910
                                                                                                                       // 4911
		skeletonEl = $(                                                                                                      // 4912
			'<div class="fc-' + className + '-skeleton">' +                                                                     // 4913
				'<table><tr/></table>' +                                                                                           // 4914
			'</div>'                                                                                                            // 4915
		);                                                                                                                   // 4916
		trEl = skeletonEl.find('tr');                                                                                        // 4917
                                                                                                                       // 4918
		if (startCol > 0) {                                                                                                  // 4919
			trEl.append('<td colspan="' + startCol + '"/>');                                                                    // 4920
		}                                                                                                                    // 4921
                                                                                                                       // 4922
		trEl.append(                                                                                                         // 4923
			seg.el.attr('colspan', endCol - startCol)                                                                           // 4924
		);                                                                                                                   // 4925
                                                                                                                       // 4926
		if (endCol < colCnt) {                                                                                               // 4927
			trEl.append('<td colspan="' + (colCnt - endCol) + '"/>');                                                           // 4928
		}                                                                                                                    // 4929
                                                                                                                       // 4930
		this.bookendCells(trEl, type);                                                                                       // 4931
                                                                                                                       // 4932
		return skeletonEl;                                                                                                   // 4933
	}                                                                                                                     // 4934
                                                                                                                       // 4935
});                                                                                                                    // 4936
                                                                                                                       // 4937
;;                                                                                                                     // 4938
                                                                                                                       // 4939
/* Event-rendering methods for the DayGrid class                                                                       // 4940
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 4942
DayGrid.mixin({                                                                                                        // 4943
                                                                                                                       // 4944
	rowStructs: null, // an array of objects, each holding information about a row's foreground event-rendering           // 4945
                                                                                                                       // 4946
                                                                                                                       // 4947
	// Unrenders all events currently rendered on the grid                                                                // 4948
	destroyEvents: function() {                                                                                           // 4949
		this.destroySegPopover(); // removes the "more.." events popover                                                     // 4950
		Grid.prototype.destroyEvents.apply(this, arguments); // calls the super-method                                       // 4951
	},                                                                                                                    // 4952
                                                                                                                       // 4953
                                                                                                                       // 4954
	// Retrieves all rendered segment objects currently rendered on the grid                                              // 4955
	getEventSegs: function() {                                                                                            // 4956
		return Grid.prototype.getEventSegs.call(this) // get the segments from the super-method                              // 4957
			.concat(this.popoverSegs || []); // append the segments from the "more..." popover                                  // 4958
	},                                                                                                                    // 4959
                                                                                                                       // 4960
                                                                                                                       // 4961
	// Renders the given background event segments onto the grid                                                          // 4962
	renderBgSegs: function(segs) {                                                                                        // 4963
                                                                                                                       // 4964
		// don't render timed background events                                                                              // 4965
		var allDaySegs = $.grep(segs, function(seg) {                                                                        // 4966
			return seg.event.allDay;                                                                                            // 4967
		});                                                                                                                  // 4968
                                                                                                                       // 4969
		return Grid.prototype.renderBgSegs.call(this, allDaySegs); // call the super-method                                  // 4970
	},                                                                                                                    // 4971
                                                                                                                       // 4972
                                                                                                                       // 4973
	// Renders the given foreground event segments onto the grid                                                          // 4974
	renderFgSegs: function(segs) {                                                                                        // 4975
		var rowStructs;                                                                                                      // 4976
                                                                                                                       // 4977
		// render an `.el` on each seg                                                                                       // 4978
		// returns a subset of the segs. segs that were actually rendered                                                    // 4979
		segs = this.renderFgSegEls(segs);                                                                                    // 4980
                                                                                                                       // 4981
		rowStructs = this.rowStructs = this.renderSegRows(segs);                                                             // 4982
                                                                                                                       // 4983
		// append to each row's content skeleton                                                                             // 4984
		this.rowEls.each(function(i, rowNode) {                                                                              // 4985
			$(rowNode).find('.fc-content-skeleton > table').append(                                                             // 4986
				rowStructs[i].tbodyEl                                                                                              // 4987
			);                                                                                                                  // 4988
		});                                                                                                                  // 4989
                                                                                                                       // 4990
		return segs; // return only the segs that were actually rendered                                                     // 4991
	},                                                                                                                    // 4992
                                                                                                                       // 4993
                                                                                                                       // 4994
	// Unrenders all currently rendered foreground event segments                                                         // 4995
	destroyFgSegs: function() {                                                                                           // 4996
		var rowStructs = this.rowStructs || [];                                                                              // 4997
		var rowStruct;                                                                                                       // 4998
                                                                                                                       // 4999
		while ((rowStruct = rowStructs.pop())) {                                                                             // 5000
			rowStruct.tbodyEl.remove();                                                                                         // 5001
		}                                                                                                                    // 5002
                                                                                                                       // 5003
		this.rowStructs = null;                                                                                              // 5004
	},                                                                                                                    // 5005
                                                                                                                       // 5006
                                                                                                                       // 5007
	// Uses the given events array to generate <tbody> elements that should be appended to each row's content skeleton.   // 5008
	// Returns an array of rowStruct objects (see the bottom of `renderSegRow`).                                          // 5009
	// PRECONDITION: each segment shoud already have a rendered and assigned `.el`                                        // 5010
	renderSegRows: function(segs) {                                                                                       // 5011
		var rowStructs = [];                                                                                                 // 5012
		var segRows;                                                                                                         // 5013
		var row;                                                                                                             // 5014
                                                                                                                       // 5015
		segRows = this.groupSegRows(segs); // group into nested arrays                                                       // 5016
                                                                                                                       // 5017
		// iterate each row of segment groupings                                                                             // 5018
		for (row = 0; row < segRows.length; row++) {                                                                         // 5019
			rowStructs.push(                                                                                                    // 5020
				this.renderSegRow(row, segRows[row])                                                                               // 5021
			);                                                                                                                  // 5022
		}                                                                                                                    // 5023
                                                                                                                       // 5024
		return rowStructs;                                                                                                   // 5025
	},                                                                                                                    // 5026
                                                                                                                       // 5027
                                                                                                                       // 5028
	// Builds the HTML to be used for the default element for an individual segment                                       // 5029
	fgSegHtml: function(seg, disableResizing) {                                                                           // 5030
		var view = this.view;                                                                                                // 5031
		var event = seg.event;                                                                                               // 5032
		var isDraggable = view.isEventDraggable(event);                                                                      // 5033
		var isResizableFromStart = !disableResizing && event.allDay &&                                                       // 5034
			seg.isStart && view.isEventResizableFromStart(event);                                                               // 5035
		var isResizableFromEnd = !disableResizing && event.allDay &&                                                         // 5036
			seg.isEnd && view.isEventResizableFromEnd(event);                                                                   // 5037
		var classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd);                      // 5038
		var skinCss = cssToStr(this.getEventSkinCss(event));                                                                 // 5039
		var timeHtml = '';                                                                                                   // 5040
		var timeText;                                                                                                        // 5041
		var titleHtml;                                                                                                       // 5042
                                                                                                                       // 5043
		classes.unshift('fc-day-grid-event', 'fc-h-event');                                                                  // 5044
                                                                                                                       // 5045
		// Only display a timed events time if it is the starting segment                                                    // 5046
		if (seg.isStart) {                                                                                                   // 5047
			timeText = this.getEventTimeText(event);                                                                            // 5048
			if (timeText) {                                                                                                     // 5049
				timeHtml = '<span class="fc-time">' + htmlEscape(timeText) + '</span>';                                            // 5050
			}                                                                                                                   // 5051
		}                                                                                                                    // 5052
                                                                                                                       // 5053
		titleHtml =                                                                                                          // 5054
			'<span class="fc-title">' +                                                                                         // 5055
				(htmlEscape(event.title || '') || '&nbsp;') + // we always want one line of height                                 // 5056
			'</span>';                                                                                                          // 5057
		                                                                                                                     // 5058
		return '<a class="' + classes.join(' ') + '"' +                                                                      // 5059
				(event.url ?                                                                                                       // 5060
					' href="' + htmlEscape(event.url) + '"' :                                                                         // 5061
					''                                                                                                                // 5062
					) +                                                                                                               // 5063
				(skinCss ?                                                                                                         // 5064
					' style="' + skinCss + '"' :                                                                                      // 5065
					''                                                                                                                // 5066
					) +                                                                                                               // 5067
			'>' +                                                                                                               // 5068
				'<div class="fc-content">' +                                                                                       // 5069
					(this.isRTL ?                                                                                                     // 5070
						titleHtml + ' ' + timeHtml : // put a natural space in between                                                   // 5071
						timeHtml + ' ' + titleHtml   //                                                                                  // 5072
						) +                                                                                                              // 5073
				'</div>' +                                                                                                         // 5074
				(isResizableFromStart ?                                                                                            // 5075
					'<div class="fc-resizer fc-start-resizer" />' :                                                                   // 5076
					''                                                                                                                // 5077
					) +                                                                                                               // 5078
				(isResizableFromEnd ?                                                                                              // 5079
					'<div class="fc-resizer fc-end-resizer" />' :                                                                     // 5080
					''                                                                                                                // 5081
					) +                                                                                                               // 5082
			'</a>';                                                                                                             // 5083
	},                                                                                                                    // 5084
                                                                                                                       // 5085
                                                                                                                       // 5086
	// Given a row # and an array of segments all in the same row, render a <tbody> element, a skeleton that contains     // 5087
	// the segments. Returns object with a bunch of internal data about how the render was calculated.                    // 5088
	// NOTE: modifies rowSegs                                                                                             // 5089
	renderSegRow: function(row, rowSegs) {                                                                                // 5090
		var colCnt = this.colCnt;                                                                                            // 5091
		var segLevels = this.buildSegLevels(rowSegs); // group into sub-arrays of levels                                     // 5092
		var levelCnt = Math.max(1, segLevels.length); // ensure at least one level                                           // 5093
		var tbody = $('<tbody/>');                                                                                           // 5094
		var segMatrix = []; // lookup for which segments are rendered into which level+col cells                             // 5095
		var cellMatrix = []; // lookup for all <td> elements of the level+col matrix                                         // 5096
		var loneCellMatrix = []; // lookup for <td> elements that only take up a single column                               // 5097
		var i, levelSegs;                                                                                                    // 5098
		var col;                                                                                                             // 5099
		var tr;                                                                                                              // 5100
		var j, seg;                                                                                                          // 5101
		var td;                                                                                                              // 5102
                                                                                                                       // 5103
		// populates empty cells from the current column (`col`) to `endCol`                                                 // 5104
		function emptyCellsUntil(endCol) {                                                                                   // 5105
			while (col < endCol) {                                                                                              // 5106
				// try to grab a cell from the level above and extend its rowspan. otherwise, create a fresh cell                  // 5107
				td = (loneCellMatrix[i - 1] || [])[col];                                                                           // 5108
				if (td) {                                                                                                          // 5109
					td.attr(                                                                                                          // 5110
						'rowspan',                                                                                                       // 5111
						parseInt(td.attr('rowspan') || 1, 10) + 1                                                                        // 5112
					);                                                                                                                // 5113
				}                                                                                                                  // 5114
				else {                                                                                                             // 5115
					td = $('<td/>');                                                                                                  // 5116
					tr.append(td);                                                                                                    // 5117
				}                                                                                                                  // 5118
				cellMatrix[i][col] = td;                                                                                           // 5119
				loneCellMatrix[i][col] = td;                                                                                       // 5120
				col++;                                                                                                             // 5121
			}                                                                                                                   // 5122
		}                                                                                                                    // 5123
                                                                                                                       // 5124
		for (i = 0; i < levelCnt; i++) { // iterate through all levels                                                       // 5125
			levelSegs = segLevels[i];                                                                                           // 5126
			col = 0;                                                                                                            // 5127
			tr = $('<tr/>');                                                                                                    // 5128
                                                                                                                       // 5129
			segMatrix.push([]);                                                                                                 // 5130
			cellMatrix.push([]);                                                                                                // 5131
			loneCellMatrix.push([]);                                                                                            // 5132
                                                                                                                       // 5133
			// levelCnt might be 1 even though there are no actual levels. protect against this.                                // 5134
			// this single empty row is useful for styling.                                                                     // 5135
			if (levelSegs) {                                                                                                    // 5136
				for (j = 0; j < levelSegs.length; j++) { // iterate through segments in level                                      // 5137
					seg = levelSegs[j];                                                                                               // 5138
                                                                                                                       // 5139
					emptyCellsUntil(seg.leftCol);                                                                                     // 5140
                                                                                                                       // 5141
					// create a container that occupies or more columns. append the event element.                                    // 5142
					td = $('<td class="fc-event-container"/>').append(seg.el);                                                        // 5143
					if (seg.leftCol != seg.rightCol) {                                                                                // 5144
						td.attr('colspan', seg.rightCol - seg.leftCol + 1);                                                              // 5145
					}                                                                                                                 // 5146
					else { // a single-column segment                                                                                 // 5147
						loneCellMatrix[i][col] = td;                                                                                     // 5148
					}                                                                                                                 // 5149
                                                                                                                       // 5150
					while (col <= seg.rightCol) {                                                                                     // 5151
						cellMatrix[i][col] = td;                                                                                         // 5152
						segMatrix[i][col] = seg;                                                                                         // 5153
						col++;                                                                                                           // 5154
					}                                                                                                                 // 5155
                                                                                                                       // 5156
					tr.append(td);                                                                                                    // 5157
				}                                                                                                                  // 5158
			}                                                                                                                   // 5159
                                                                                                                       // 5160
			emptyCellsUntil(colCnt); // finish off the row                                                                      // 5161
			this.bookendCells(tr, 'eventSkeleton');                                                                             // 5162
			tbody.append(tr);                                                                                                   // 5163
		}                                                                                                                    // 5164
                                                                                                                       // 5165
		return { // a "rowStruct"                                                                                            // 5166
			row: row, // the row number                                                                                         // 5167
			tbodyEl: tbody,                                                                                                     // 5168
			cellMatrix: cellMatrix,                                                                                             // 5169
			segMatrix: segMatrix,                                                                                               // 5170
			segLevels: segLevels,                                                                                               // 5171
			segs: rowSegs                                                                                                       // 5172
		};                                                                                                                   // 5173
	},                                                                                                                    // 5174
                                                                                                                       // 5175
                                                                                                                       // 5176
	// Stacks a flat array of segments, which are all assumed to be in the same row, into subarrays of vertical levels.   // 5177
	// NOTE: modifies segs                                                                                                // 5178
	buildSegLevels: function(segs) {                                                                                      // 5179
		var levels = [];                                                                                                     // 5180
		var i, seg;                                                                                                          // 5181
		var j;                                                                                                               // 5182
                                                                                                                       // 5183
		// Give preference to elements with certain criteria, so they have                                                   // 5184
		// a chance to be closer to the top.                                                                                 // 5185
		segs.sort(compareSegs);                                                                                              // 5186
		                                                                                                                     // 5187
		for (i = 0; i < segs.length; i++) {                                                                                  // 5188
			seg = segs[i];                                                                                                      // 5189
                                                                                                                       // 5190
			// loop through levels, starting with the topmost, until the segment doesn't collide with other segments            // 5191
			for (j = 0; j < levels.length; j++) {                                                                               // 5192
				if (!isDaySegCollision(seg, levels[j])) {                                                                          // 5193
					break;                                                                                                            // 5194
				}                                                                                                                  // 5195
			}                                                                                                                   // 5196
			// `j` now holds the desired subrow index                                                                           // 5197
			seg.level = j;                                                                                                      // 5198
                                                                                                                       // 5199
			// create new level array if needed and append segment                                                              // 5200
			(levels[j] || (levels[j] = [])).push(seg);                                                                          // 5201
		}                                                                                                                    // 5202
                                                                                                                       // 5203
		// order segments left-to-right. very important if calendar is RTL                                                   // 5204
		for (j = 0; j < levels.length; j++) {                                                                                // 5205
			levels[j].sort(compareDaySegCols);                                                                                  // 5206
		}                                                                                                                    // 5207
                                                                                                                       // 5208
		return levels;                                                                                                       // 5209
	},                                                                                                                    // 5210
                                                                                                                       // 5211
                                                                                                                       // 5212
	// Given a flat array of segments, return an array of sub-arrays, grouped by each segment's row                       // 5213
	groupSegRows: function(segs) {                                                                                        // 5214
		var segRows = [];                                                                                                    // 5215
		var i;                                                                                                               // 5216
                                                                                                                       // 5217
		for (i = 0; i < this.rowCnt; i++) {                                                                                  // 5218
			segRows.push([]);                                                                                                   // 5219
		}                                                                                                                    // 5220
                                                                                                                       // 5221
		for (i = 0; i < segs.length; i++) {                                                                                  // 5222
			segRows[segs[i].row].push(segs[i]);                                                                                 // 5223
		}                                                                                                                    // 5224
                                                                                                                       // 5225
		return segRows;                                                                                                      // 5226
	}                                                                                                                     // 5227
                                                                                                                       // 5228
});                                                                                                                    // 5229
                                                                                                                       // 5230
                                                                                                                       // 5231
// Computes whether two segments' columns collide. They are assumed to be in the same row.                             // 5232
function isDaySegCollision(seg, otherSegs) {                                                                           // 5233
	var i, otherSeg;                                                                                                      // 5234
                                                                                                                       // 5235
	for (i = 0; i < otherSegs.length; i++) {                                                                              // 5236
		otherSeg = otherSegs[i];                                                                                             // 5237
                                                                                                                       // 5238
		if (                                                                                                                 // 5239
			otherSeg.leftCol <= seg.rightCol &&                                                                                 // 5240
			otherSeg.rightCol >= seg.leftCol                                                                                    // 5241
		) {                                                                                                                  // 5242
			return true;                                                                                                        // 5243
		}                                                                                                                    // 5244
	}                                                                                                                     // 5245
                                                                                                                       // 5246
	return false;                                                                                                         // 5247
}                                                                                                                      // 5248
                                                                                                                       // 5249
                                                                                                                       // 5250
// A cmp function for determining the leftmost event                                                                   // 5251
function compareDaySegCols(a, b) {                                                                                     // 5252
	return a.leftCol - b.leftCol;                                                                                         // 5253
}                                                                                                                      // 5254
                                                                                                                       // 5255
;;                                                                                                                     // 5256
                                                                                                                       // 5257
/* Methods relate to limiting the number events for a given day on a DayGrid                                           // 5258
----------------------------------------------------------------------------------------------------------------------*/
// NOTE: all the segs being passed around in here are foreground segs                                                  // 5260
                                                                                                                       // 5261
DayGrid.mixin({                                                                                                        // 5262
                                                                                                                       // 5263
	segPopover: null, // the Popover that holds events that can't fit in a cell. null when not visible                    // 5264
	popoverSegs: null, // an array of segment objects that the segPopover holds. null when not visible                    // 5265
                                                                                                                       // 5266
                                                                                                                       // 5267
	destroySegPopover: function() {                                                                                       // 5268
		if (this.segPopover) {                                                                                               // 5269
			this.segPopover.hide(); // will trigger destruction of `segPopover` and `popoverSegs`                               // 5270
		}                                                                                                                    // 5271
	},                                                                                                                    // 5272
                                                                                                                       // 5273
                                                                                                                       // 5274
	// Limits the number of "levels" (vertically stacking layers of events) for each row of the grid.                     // 5275
	// `levelLimit` can be false (don't limit), a number, or true (should be computed).                                   // 5276
	limitRows: function(levelLimit) {                                                                                     // 5277
		var rowStructs = this.rowStructs || [];                                                                              // 5278
		var row; // row #                                                                                                    // 5279
		var rowLevelLimit;                                                                                                   // 5280
                                                                                                                       // 5281
		for (row = 0; row < rowStructs.length; row++) {                                                                      // 5282
			this.unlimitRow(row);                                                                                               // 5283
                                                                                                                       // 5284
			if (!levelLimit) {                                                                                                  // 5285
				rowLevelLimit = false;                                                                                             // 5286
			}                                                                                                                   // 5287
			else if (typeof levelLimit === 'number') {                                                                          // 5288
				rowLevelLimit = levelLimit;                                                                                        // 5289
			}                                                                                                                   // 5290
			else {                                                                                                              // 5291
				rowLevelLimit = this.computeRowLevelLimit(row);                                                                    // 5292
			}                                                                                                                   // 5293
                                                                                                                       // 5294
			if (rowLevelLimit !== false) {                                                                                      // 5295
				this.limitRow(row, rowLevelLimit);                                                                                 // 5296
			}                                                                                                                   // 5297
		}                                                                                                                    // 5298
	},                                                                                                                    // 5299
                                                                                                                       // 5300
                                                                                                                       // 5301
	// Computes the number of levels a row will accomodate without going outside its bounds.                              // 5302
	// Assumes the row is "rigid" (maintains a constant height regardless of what is inside).                             // 5303
	// `row` is the row number.                                                                                           // 5304
	computeRowLevelLimit: function(row) {                                                                                 // 5305
		var rowEl = this.rowEls.eq(row); // the containing "fake" row div                                                    // 5306
		var rowHeight = rowEl.height(); // TODO: cache somehow?                                                              // 5307
		var trEls = this.rowStructs[row].tbodyEl.children();                                                                 // 5308
		var i, trEl;                                                                                                         // 5309
		var trHeight;                                                                                                        // 5310
                                                                                                                       // 5311
		function iterInnerHeights(i, childNode) {                                                                            // 5312
			trHeight = Math.max(trHeight, $(childNode).outerHeight());                                                          // 5313
		}                                                                                                                    // 5314
                                                                                                                       // 5315
		// Reveal one level <tr> at a time and stop when we find one out of bounds                                           // 5316
		for (i = 0; i < trEls.length; i++) {                                                                                 // 5317
			trEl = trEls.eq(i).removeClass('fc-limited'); // reset to original state (reveal)                                   // 5318
                                                                                                                       // 5319
			// with rowspans>1 and IE8, trEl.outerHeight() would return the height of the largest cell,                         // 5320
			// so instead, find the tallest inner content element.                                                              // 5321
			trHeight = 0;                                                                                                       // 5322
			trEl.find('> td > :first-child').each(iterInnerHeights);                                                            // 5323
                                                                                                                       // 5324
			if (trEl.position().top + trHeight > rowHeight) {                                                                   // 5325
				return i;                                                                                                          // 5326
			}                                                                                                                   // 5327
		}                                                                                                                    // 5328
                                                                                                                       // 5329
		return false; // should not limit at all                                                                             // 5330
	},                                                                                                                    // 5331
                                                                                                                       // 5332
                                                                                                                       // 5333
	// Limits the given grid row to the maximum number of levels and injects "more" links if necessary.                   // 5334
	// `row` is the row number.                                                                                           // 5335
	// `levelLimit` is a number for the maximum (inclusive) number of levels allowed.                                     // 5336
	limitRow: function(row, levelLimit) {                                                                                 // 5337
		var _this = this;                                                                                                    // 5338
		var rowStruct = this.rowStructs[row];                                                                                // 5339
		var moreNodes = []; // array of "more" <a> links and <td> DOM nodes                                                  // 5340
		var col = 0; // col #, left-to-right (not chronologically)                                                           // 5341
		var cell;                                                                                                            // 5342
		var levelSegs; // array of segment objects in the last allowable level, ordered left-to-right                        // 5343
		var cellMatrix; // a matrix (by level, then column) of all <td> jQuery elements in the row                           // 5344
		var limitedNodes; // array of temporarily hidden level <tr> and segment <td> DOM nodes                               // 5345
		var i, seg;                                                                                                          // 5346
		var segsBelow; // array of segment objects below `seg` in the current `col`                                          // 5347
		var totalSegsBelow; // total number of segments below `seg` in any of the columns `seg` occupies                     // 5348
		var colSegsBelow; // array of segment arrays, below seg, one for each column (offset from segs's first column)       // 5349
		var td, rowspan;                                                                                                     // 5350
		var segMoreNodes; // array of "more" <td> cells that will stand-in for the current seg's cell                        // 5351
		var j;                                                                                                               // 5352
		var moreTd, moreWrap, moreLink;                                                                                      // 5353
                                                                                                                       // 5354
		// Iterates through empty level cells and places "more" links inside if need be                                      // 5355
		function emptyCellsUntil(endCol) { // goes from current `col` to `endCol`                                            // 5356
			while (col < endCol) {                                                                                              // 5357
				cell = _this.getCell(row, col);                                                                                    // 5358
				segsBelow = _this.getCellSegs(cell, levelLimit);                                                                   // 5359
				if (segsBelow.length) {                                                                                            // 5360
					td = cellMatrix[levelLimit - 1][col];                                                                             // 5361
					moreLink = _this.renderMoreLink(cell, segsBelow);                                                                 // 5362
					moreWrap = $('<div/>').append(moreLink);                                                                          // 5363
					td.append(moreWrap);                                                                                              // 5364
					moreNodes.push(moreWrap[0]);                                                                                      // 5365
				}                                                                                                                  // 5366
				col++;                                                                                                             // 5367
			}                                                                                                                   // 5368
		}                                                                                                                    // 5369
                                                                                                                       // 5370
		if (levelLimit && levelLimit < rowStruct.segLevels.length) { // is it actually over the limit?                       // 5371
			levelSegs = rowStruct.segLevels[levelLimit - 1];                                                                    // 5372
			cellMatrix = rowStruct.cellMatrix;                                                                                  // 5373
                                                                                                                       // 5374
			limitedNodes = rowStruct.tbodyEl.children().slice(levelLimit) // get level <tr> elements past the limit             // 5375
				.addClass('fc-limited').get(); // hide elements and get a simple DOM-nodes array                                   // 5376
                                                                                                                       // 5377
			// iterate though segments in the last allowable level                                                              // 5378
			for (i = 0; i < levelSegs.length; i++) {                                                                            // 5379
				seg = levelSegs[i];                                                                                                // 5380
				emptyCellsUntil(seg.leftCol); // process empty cells before the segment                                            // 5381
                                                                                                                       // 5382
				// determine *all* segments below `seg` that occupy the same columns                                               // 5383
				colSegsBelow = [];                                                                                                 // 5384
				totalSegsBelow = 0;                                                                                                // 5385
				while (col <= seg.rightCol) {                                                                                      // 5386
					cell = this.getCell(row, col);                                                                                    // 5387
					segsBelow = this.getCellSegs(cell, levelLimit);                                                                   // 5388
					colSegsBelow.push(segsBelow);                                                                                     // 5389
					totalSegsBelow += segsBelow.length;                                                                               // 5390
					col++;                                                                                                            // 5391
				}                                                                                                                  // 5392
                                                                                                                       // 5393
				if (totalSegsBelow) { // do we need to replace this segment with one or many "more" links?                         // 5394
					td = cellMatrix[levelLimit - 1][seg.leftCol]; // the segment's parent cell                                        // 5395
					rowspan = td.attr('rowspan') || 1;                                                                                // 5396
					segMoreNodes = [];                                                                                                // 5397
                                                                                                                       // 5398
					// make a replacement <td> for each column the segment occupies. will be one for each colspan                     // 5399
					for (j = 0; j < colSegsBelow.length; j++) {                                                                       // 5400
						moreTd = $('<td class="fc-more-cell"/>').attr('rowspan', rowspan);                                               // 5401
						segsBelow = colSegsBelow[j];                                                                                     // 5402
						cell = this.getCell(row, seg.leftCol + j);                                                                       // 5403
						moreLink = this.renderMoreLink(cell, [ seg ].concat(segsBelow)); // count seg as hidden too                      // 5404
						moreWrap = $('<div/>').append(moreLink);                                                                         // 5405
						moreTd.append(moreWrap);                                                                                         // 5406
						segMoreNodes.push(moreTd[0]);                                                                                    // 5407
						moreNodes.push(moreTd[0]);                                                                                       // 5408
					}                                                                                                                 // 5409
                                                                                                                       // 5410
					td.addClass('fc-limited').after($(segMoreNodes)); // hide original <td> and inject replacements                   // 5411
					limitedNodes.push(td[0]);                                                                                         // 5412
				}                                                                                                                  // 5413
			}                                                                                                                   // 5414
                                                                                                                       // 5415
			emptyCellsUntil(this.colCnt); // finish off the level                                                               // 5416
			rowStruct.moreEls = $(moreNodes); // for easy undoing later                                                         // 5417
			rowStruct.limitedEls = $(limitedNodes); // for easy undoing later                                                   // 5418
		}                                                                                                                    // 5419
	},                                                                                                                    // 5420
                                                                                                                       // 5421
                                                                                                                       // 5422
	// Reveals all levels and removes all "more"-related elements for a grid's row.                                       // 5423
	// `row` is a row number.                                                                                             // 5424
	unlimitRow: function(row) {                                                                                           // 5425
		var rowStruct = this.rowStructs[row];                                                                                // 5426
                                                                                                                       // 5427
		if (rowStruct.moreEls) {                                                                                             // 5428
			rowStruct.moreEls.remove();                                                                                         // 5429
			rowStruct.moreEls = null;                                                                                           // 5430
		}                                                                                                                    // 5431
                                                                                                                       // 5432
		if (rowStruct.limitedEls) {                                                                                          // 5433
			rowStruct.limitedEls.removeClass('fc-limited');                                                                     // 5434
			rowStruct.limitedEls = null;                                                                                        // 5435
		}                                                                                                                    // 5436
	},                                                                                                                    // 5437
                                                                                                                       // 5438
                                                                                                                       // 5439
	// Renders an <a> element that represents hidden event element for a cell.                                            // 5440
	// Responsible for attaching click handler as well.                                                                   // 5441
	renderMoreLink: function(cell, hiddenSegs) {                                                                          // 5442
		var _this = this;                                                                                                    // 5443
		var view = this.view;                                                                                                // 5444
                                                                                                                       // 5445
		return $('<a class="fc-more"/>')                                                                                     // 5446
			.text(                                                                                                              // 5447
				this.getMoreLinkText(hiddenSegs.length)                                                                            // 5448
			)                                                                                                                   // 5449
			.on('click', function(ev) {                                                                                         // 5450
				var clickOption = view.opt('eventLimitClick');                                                                     // 5451
				var date = cell.start;                                                                                             // 5452
				var moreEl = $(this);                                                                                              // 5453
				var dayEl = _this.getCellDayEl(cell);                                                                              // 5454
				var allSegs = _this.getCellSegs(cell);                                                                             // 5455
                                                                                                                       // 5456
				// rescope the segments to be within the cell's date                                                               // 5457
				var reslicedAllSegs = _this.resliceDaySegs(allSegs, date);                                                         // 5458
				var reslicedHiddenSegs = _this.resliceDaySegs(hiddenSegs, date);                                                   // 5459
                                                                                                                       // 5460
				if (typeof clickOption === 'function') {                                                                           // 5461
					// the returned value can be an atomic option                                                                     // 5462
					clickOption = view.trigger('eventLimitClick', null, {                                                             // 5463
						date: date,                                                                                                      // 5464
						dayEl: dayEl,                                                                                                    // 5465
						moreEl: moreEl,                                                                                                  // 5466
						segs: reslicedAllSegs,                                                                                           // 5467
						hiddenSegs: reslicedHiddenSegs                                                                                   // 5468
					}, ev);                                                                                                           // 5469
				}                                                                                                                  // 5470
                                                                                                                       // 5471
				if (clickOption === 'popover') {                                                                                   // 5472
					_this.showSegPopover(cell, moreEl, reslicedAllSegs);                                                              // 5473
				}                                                                                                                  // 5474
				else if (typeof clickOption === 'string') { // a view name                                                         // 5475
					view.calendar.zoomTo(date, clickOption);                                                                          // 5476
				}                                                                                                                  // 5477
			});                                                                                                                 // 5478
	},                                                                                                                    // 5479
                                                                                                                       // 5480
                                                                                                                       // 5481
	// Reveals the popover that displays all events within a cell                                                         // 5482
	showSegPopover: function(cell, moreLink, segs) {                                                                      // 5483
		var _this = this;                                                                                                    // 5484
		var view = this.view;                                                                                                // 5485
		var moreWrap = moreLink.parent(); // the <div> wrapper around the <a>                                                // 5486
		var topEl; // the element we want to match the top coordinate of                                                     // 5487
		var options;                                                                                                         // 5488
                                                                                                                       // 5489
		if (this.rowCnt == 1) {                                                                                              // 5490
			topEl = view.el; // will cause the popover to cover any sort of header                                              // 5491
		}                                                                                                                    // 5492
		else {                                                                                                               // 5493
			topEl = this.rowEls.eq(cell.row); // will align with top of row                                                     // 5494
		}                                                                                                                    // 5495
                                                                                                                       // 5496
		options = {                                                                                                          // 5497
			className: 'fc-more-popover',                                                                                       // 5498
			content: this.renderSegPopoverContent(cell, segs),                                                                  // 5499
			parentEl: this.el,                                                                                                  // 5500
			top: topEl.offset().top,                                                                                            // 5501
			autoHide: true, // when the user clicks elsewhere, hide the popover                                                 // 5502
			viewportConstrain: view.opt('popoverViewportConstrain'),                                                            // 5503
			hide: function() {                                                                                                  // 5504
				// destroy everything when the popover is hidden                                                                   // 5505
				_this.segPopover.destroy();                                                                                        // 5506
				_this.segPopover = null;                                                                                           // 5507
				_this.popoverSegs = null;                                                                                          // 5508
			}                                                                                                                   // 5509
		};                                                                                                                   // 5510
                                                                                                                       // 5511
		// Determine horizontal coordinate.                                                                                  // 5512
		// We use the moreWrap instead of the <td> to avoid border confusion.                                                // 5513
		if (this.isRTL) {                                                                                                    // 5514
			options.right = moreWrap.offset().left + moreWrap.outerWidth() + 1; // +1 to be over cell border                    // 5515
		}                                                                                                                    // 5516
		else {                                                                                                               // 5517
			options.left = moreWrap.offset().left - 1; // -1 to be over cell border                                             // 5518
		}                                                                                                                    // 5519
                                                                                                                       // 5520
		this.segPopover = new Popover(options);                                                                              // 5521
		this.segPopover.show();                                                                                              // 5522
	},                                                                                                                    // 5523
                                                                                                                       // 5524
                                                                                                                       // 5525
	// Builds the inner DOM contents of the segment popover                                                               // 5526
	renderSegPopoverContent: function(cell, segs) {                                                                       // 5527
		var view = this.view;                                                                                                // 5528
		var isTheme = view.opt('theme');                                                                                     // 5529
		var title = cell.start.format(view.opt('dayPopoverFormat'));                                                         // 5530
		var content = $(                                                                                                     // 5531
			'<div class="fc-header ' + view.widgetHeaderClass + '">' +                                                          // 5532
				'<span class="fc-close ' +                                                                                         // 5533
					(isTheme ? 'ui-icon ui-icon-closethick' : 'fc-icon fc-icon-x') +                                                  // 5534
				'"></span>' +                                                                                                      // 5535
				'<span class="fc-title">' +                                                                                        // 5536
					htmlEscape(title) +                                                                                               // 5537
				'</span>' +                                                                                                        // 5538
				'<div class="fc-clear"/>' +                                                                                        // 5539
			'</div>' +                                                                                                          // 5540
			'<div class="fc-body ' + view.widgetContentClass + '">' +                                                           // 5541
				'<div class="fc-event-container"></div>' +                                                                         // 5542
			'</div>'                                                                                                            // 5543
		);                                                                                                                   // 5544
		var segContainer = content.find('.fc-event-container');                                                              // 5545
		var i;                                                                                                               // 5546
                                                                                                                       // 5547
		// render each seg's `el` and only return the visible segs                                                           // 5548
		segs = this.renderFgSegEls(segs, true); // disableResizing=true                                                      // 5549
		this.popoverSegs = segs;                                                                                             // 5550
                                                                                                                       // 5551
		for (i = 0; i < segs.length; i++) {                                                                                  // 5552
                                                                                                                       // 5553
			// because segments in the popover are not part of a grid coordinate system, provide a hint to any                  // 5554
			// grids that want to do drag-n-drop about which cell it came from                                                  // 5555
			segs[i].cell = cell;                                                                                                // 5556
                                                                                                                       // 5557
			segContainer.append(segs[i].el);                                                                                    // 5558
		}                                                                                                                    // 5559
                                                                                                                       // 5560
		return content;                                                                                                      // 5561
	},                                                                                                                    // 5562
                                                                                                                       // 5563
                                                                                                                       // 5564
	// Given the events within an array of segment objects, reslice them to be in a single day                            // 5565
	resliceDaySegs: function(segs, dayDate) {                                                                             // 5566
                                                                                                                       // 5567
		// build an array of the original events                                                                             // 5568
		var events = $.map(segs, function(seg) {                                                                             // 5569
			return seg.event;                                                                                                   // 5570
		});                                                                                                                  // 5571
                                                                                                                       // 5572
		var dayStart = dayDate.clone().stripTime();                                                                          // 5573
		var dayEnd = dayStart.clone().add(1, 'days');                                                                        // 5574
		var dayRange = { start: dayStart, end: dayEnd };                                                                     // 5575
                                                                                                                       // 5576
		// slice the events with a custom slicing function                                                                   // 5577
		segs = this.eventsToSegs(                                                                                            // 5578
			events,                                                                                                             // 5579
			function(range) {                                                                                                   // 5580
				var seg = intersectionToSeg(range, dayRange); // undefind if no intersection                                       // 5581
				return seg ? [ seg ] : []; // must return an array of segments                                                     // 5582
			}                                                                                                                   // 5583
		);                                                                                                                   // 5584
                                                                                                                       // 5585
		// force an order because eventsToSegs doesn't guarantee one                                                         // 5586
		segs.sort(compareSegs);                                                                                              // 5587
                                                                                                                       // 5588
		return segs;                                                                                                         // 5589
	},                                                                                                                    // 5590
                                                                                                                       // 5591
                                                                                                                       // 5592
	// Generates the text that should be inside a "more" link, given the number of events it represents                   // 5593
	getMoreLinkText: function(num) {                                                                                      // 5594
		var opt = this.view.opt('eventLimitText');                                                                           // 5595
                                                                                                                       // 5596
		if (typeof opt === 'function') {                                                                                     // 5597
			return opt(num);                                                                                                    // 5598
		}                                                                                                                    // 5599
		else {                                                                                                               // 5600
			return '+' + num + ' ' + opt;                                                                                       // 5601
		}                                                                                                                    // 5602
	},                                                                                                                    // 5603
                                                                                                                       // 5604
                                                                                                                       // 5605
	// Returns segments within a given cell.                                                                              // 5606
	// If `startLevel` is specified, returns only events including and below that level. Otherwise returns all segs.      // 5607
	getCellSegs: function(cell, startLevel) {                                                                             // 5608
		var segMatrix = this.rowStructs[cell.row].segMatrix;                                                                 // 5609
		var level = startLevel || 0;                                                                                         // 5610
		var segs = [];                                                                                                       // 5611
		var seg;                                                                                                             // 5612
                                                                                                                       // 5613
		while (level < segMatrix.length) {                                                                                   // 5614
			seg = segMatrix[level][cell.col];                                                                                   // 5615
			if (seg) {                                                                                                          // 5616
				segs.push(seg);                                                                                                    // 5617
			}                                                                                                                   // 5618
			level++;                                                                                                            // 5619
		}                                                                                                                    // 5620
                                                                                                                       // 5621
		return segs;                                                                                                         // 5622
	}                                                                                                                     // 5623
                                                                                                                       // 5624
});                                                                                                                    // 5625
                                                                                                                       // 5626
;;                                                                                                                     // 5627
                                                                                                                       // 5628
/* A component that renders one or more columns of vertical time slots                                                 // 5629
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 5631
var TimeGrid = Grid.extend({                                                                                           // 5632
                                                                                                                       // 5633
	slotDuration: null, // duration of a "slot", a distinct time segment on given day, visualized by lines                // 5634
	snapDuration: null, // granularity of time for dragging and selecting                                                 // 5635
                                                                                                                       // 5636
	minTime: null, // Duration object that denotes the first visible time of any given day                                // 5637
	maxTime: null, // Duration object that denotes the exclusive visible end time of any given day                        // 5638
                                                                                                                       // 5639
	axisFormat: null, // formatting string for times running along vertical axis                                          // 5640
                                                                                                                       // 5641
	dayEls: null, // cells elements in the day-row background                                                             // 5642
	slatEls: null, // elements running horizontally across all columns                                                    // 5643
                                                                                                                       // 5644
	slatTops: null, // an array of top positions, relative to the container. last item holds bottom of last slot          // 5645
                                                                                                                       // 5646
	helperEl: null, // cell skeleton element for rendering the mock event "helper"                                        // 5647
                                                                                                                       // 5648
	businessHourSegs: null,                                                                                               // 5649
                                                                                                                       // 5650
                                                                                                                       // 5651
	constructor: function() {                                                                                             // 5652
		Grid.apply(this, arguments); // call the super-constructor                                                           // 5653
		this.processOptions();                                                                                               // 5654
	},                                                                                                                    // 5655
                                                                                                                       // 5656
                                                                                                                       // 5657
	// Renders the time grid into `this.el`, which should already be assigned.                                            // 5658
	// Relies on the view's colCnt. In the future, this component should probably be self-sufficient.                     // 5659
	renderDates: function() {                                                                                             // 5660
		this.el.html(this.renderHtml());                                                                                     // 5661
		this.dayEls = this.el.find('.fc-day');                                                                               // 5662
		this.slatEls = this.el.find('.fc-slats tr');                                                                         // 5663
	},                                                                                                                    // 5664
                                                                                                                       // 5665
                                                                                                                       // 5666
	renderBusinessHours: function() {                                                                                     // 5667
		var events = this.view.calendar.getBusinessHoursEvents();                                                            // 5668
		this.businessHourSegs = this.renderFill('businessHours', this.eventsToSegs(events), 'bgevent');                      // 5669
	},                                                                                                                    // 5670
                                                                                                                       // 5671
                                                                                                                       // 5672
	// Renders the basic HTML skeleton for the grid                                                                       // 5673
	renderHtml: function() {                                                                                              // 5674
		return '' +                                                                                                          // 5675
			'<div class="fc-bg">' +                                                                                             // 5676
				'<table>' +                                                                                                        // 5677
					this.rowHtml('slotBg') + // leverages RowRenderer, which will call slotBgCellHtml                                 // 5678
				'</table>' +                                                                                                       // 5679
			'</div>' +                                                                                                          // 5680
			'<div class="fc-slats">' +                                                                                          // 5681
				'<table>' +                                                                                                        // 5682
					this.slatRowHtml() +                                                                                              // 5683
				'</table>' +                                                                                                       // 5684
			'</div>';                                                                                                           // 5685
	},                                                                                                                    // 5686
                                                                                                                       // 5687
                                                                                                                       // 5688
	// Renders the HTML for a vertical background cell behind the slots.                                                  // 5689
	// This method is distinct from 'bg' because we wanted a new `rowType` so the View could customize the rendering.     // 5690
	slotBgCellHtml: function(cell) {                                                                                      // 5691
		return this.bgCellHtml(cell);                                                                                        // 5692
	},                                                                                                                    // 5693
                                                                                                                       // 5694
                                                                                                                       // 5695
	// Generates the HTML for the horizontal "slats" that run width-wise. Has a time axis on a side. Depends on RTL.      // 5696
	slatRowHtml: function() {                                                                                             // 5697
		var view = this.view;                                                                                                // 5698
		var isRTL = this.isRTL;                                                                                              // 5699
		var html = '';                                                                                                       // 5700
		var slotNormal = this.slotDuration.asMinutes() % 15 === 0;                                                           // 5701
		var slotTime = moment.duration(+this.minTime); // wish there was .clone() for durations                              // 5702
		var slotDate; // will be on the view's first day, but we only care about its time                                    // 5703
		var minutes;                                                                                                         // 5704
		var axisHtml;                                                                                                        // 5705
                                                                                                                       // 5706
		// Calculate the time for each slot                                                                                  // 5707
		while (slotTime < this.maxTime) {                                                                                    // 5708
			slotDate = this.start.clone().time(slotTime); // will be in UTC but that's good. to avoid DST issues                // 5709
			minutes = slotDate.minutes();                                                                                       // 5710
                                                                                                                       // 5711
			axisHtml =                                                                                                          // 5712
				'<td class="fc-axis fc-time ' + view.widgetContentClass + '" ' + view.axisStyleAttr() + '>' +                      // 5713
					((!slotNormal || !minutes) ? // if irregular slot duration, or on the hour, then display the time                 // 5714
						'<span>' + // for matchCellWidths                                                                                // 5715
							htmlEscape(slotDate.format(this.axisFormat)) +                                                                  // 5716
						'</span>' :                                                                                                      // 5717
						''                                                                                                               // 5718
						) +                                                                                                              // 5719
				'</td>';                                                                                                           // 5720
                                                                                                                       // 5721
			html +=                                                                                                             // 5722
				'<tr ' + (!minutes ? '' : 'class="fc-minor"') + '>' +                                                              // 5723
					(!isRTL ? axisHtml : '') +                                                                                        // 5724
					'<td class="' + view.widgetContentClass + '"/>' +                                                                 // 5725
					(isRTL ? axisHtml : '') +                                                                                         // 5726
				"</tr>";                                                                                                           // 5727
                                                                                                                       // 5728
			slotTime.add(this.slotDuration);                                                                                    // 5729
		}                                                                                                                    // 5730
                                                                                                                       // 5731
		return html;                                                                                                         // 5732
	},                                                                                                                    // 5733
                                                                                                                       // 5734
                                                                                                                       // 5735
	/* Options                                                                                                            // 5736
	------------------------------------------------------------------------------------------------------------------*/  // 5737
                                                                                                                       // 5738
                                                                                                                       // 5739
	// Parses various options into properties of this object                                                              // 5740
	processOptions: function() {                                                                                          // 5741
		var view = this.view;                                                                                                // 5742
		var slotDuration = view.opt('slotDuration');                                                                         // 5743
		var snapDuration = view.opt('snapDuration');                                                                         // 5744
                                                                                                                       // 5745
		slotDuration = moment.duration(slotDuration);                                                                        // 5746
		snapDuration = snapDuration ? moment.duration(snapDuration) : slotDuration;                                          // 5747
                                                                                                                       // 5748
		this.slotDuration = slotDuration;                                                                                    // 5749
		this.snapDuration = snapDuration;                                                                                    // 5750
		this.cellDuration = snapDuration; // for Grid system                                                                 // 5751
                                                                                                                       // 5752
		this.minTime = moment.duration(view.opt('minTime'));                                                                 // 5753
		this.maxTime = moment.duration(view.opt('maxTime'));                                                                 // 5754
                                                                                                                       // 5755
		this.axisFormat = view.opt('axisFormat') || view.opt('smallTimeFormat');                                             // 5756
	},                                                                                                                    // 5757
                                                                                                                       // 5758
                                                                                                                       // 5759
	// Computes a default column header formatting string if `colFormat` is not explicitly defined                        // 5760
	computeColHeadFormat: function() {                                                                                    // 5761
		if (this.colCnt > 1) { // multiple days, so full single date string WON'T be in title text                           // 5762
			return this.view.opt('dayOfMonthFormat'); // "Sat 12/10"                                                            // 5763
		}                                                                                                                    // 5764
		else { // single day, so full single date string will probably be in title text                                      // 5765
			return 'dddd'; // "Saturday"                                                                                        // 5766
		}                                                                                                                    // 5767
	},                                                                                                                    // 5768
                                                                                                                       // 5769
                                                                                                                       // 5770
	// Computes a default event time formatting string if `timeFormat` is not explicitly defined                          // 5771
	computeEventTimeFormat: function() {                                                                                  // 5772
		return this.view.opt('noMeridiemTimeFormat'); // like "6:30" (no AM/PM)                                              // 5773
	},                                                                                                                    // 5774
                                                                                                                       // 5775
                                                                                                                       // 5776
	// Computes a default `displayEventEnd` value if one is not expliclty defined                                         // 5777
	computeDisplayEventEnd: function() {                                                                                  // 5778
		return true;                                                                                                         // 5779
	},                                                                                                                    // 5780
                                                                                                                       // 5781
                                                                                                                       // 5782
	/* Cell System                                                                                                        // 5783
	------------------------------------------------------------------------------------------------------------------*/  // 5784
                                                                                                                       // 5785
                                                                                                                       // 5786
	// Initializes row/col information                                                                                    // 5787
	updateCells: function() {                                                                                             // 5788
		var view = this.view;                                                                                                // 5789
		var colData = [];                                                                                                    // 5790
		var date;                                                                                                            // 5791
                                                                                                                       // 5792
		date = this.start.clone();                                                                                           // 5793
		while (date.isBefore(this.end)) {                                                                                    // 5794
			colData.push({                                                                                                      // 5795
				day: date.clone()                                                                                                  // 5796
			});                                                                                                                 // 5797
			date.add(1, 'day');                                                                                                 // 5798
			date = view.skipHiddenDays(date);                                                                                   // 5799
		}                                                                                                                    // 5800
                                                                                                                       // 5801
		if (this.isRTL) {                                                                                                    // 5802
			colData.reverse();                                                                                                  // 5803
		}                                                                                                                    // 5804
                                                                                                                       // 5805
		this.colData = colData;                                                                                              // 5806
		this.colCnt = colData.length;                                                                                        // 5807
		this.rowCnt = Math.ceil((this.maxTime - this.minTime) / this.snapDuration); // # of vertical snaps                   // 5808
	},                                                                                                                    // 5809
                                                                                                                       // 5810
                                                                                                                       // 5811
	// Given a cell object, generates its start date. Returns a reference-free copy.                                      // 5812
	computeCellDate: function(cell) {                                                                                     // 5813
		var time = this.computeSnapTime(cell.row);                                                                           // 5814
                                                                                                                       // 5815
		return this.view.calendar.rezoneDate(cell.day).time(time);                                                           // 5816
	},                                                                                                                    // 5817
                                                                                                                       // 5818
                                                                                                                       // 5819
	// Retrieves the element representing the given column                                                                // 5820
	getColEl: function(col) {                                                                                             // 5821
		return this.dayEls.eq(col);                                                                                          // 5822
	},                                                                                                                    // 5823
                                                                                                                       // 5824
                                                                                                                       // 5825
	/* Dates                                                                                                              // 5826
	------------------------------------------------------------------------------------------------------------------*/  // 5827
                                                                                                                       // 5828
                                                                                                                       // 5829
	// Given a row number of the grid, representing a "snap", returns a time (Duration) from its start-of-day             // 5830
	computeSnapTime: function(row) {                                                                                      // 5831
		return moment.duration(this.minTime + this.snapDuration * row);                                                      // 5832
	},                                                                                                                    // 5833
                                                                                                                       // 5834
                                                                                                                       // 5835
	// Slices up a date range by column into an array of segments                                                         // 5836
	rangeToSegs: function(range) {                                                                                        // 5837
		var colCnt = this.colCnt;                                                                                            // 5838
		var segs = [];                                                                                                       // 5839
		var seg;                                                                                                             // 5840
		var col;                                                                                                             // 5841
		var colDate;                                                                                                         // 5842
		var colRange;                                                                                                        // 5843
                                                                                                                       // 5844
		// normalize :(                                                                                                      // 5845
		range = {                                                                                                            // 5846
			start: range.start.clone().stripZone(),                                                                             // 5847
			end: range.end.clone().stripZone()                                                                                  // 5848
		};                                                                                                                   // 5849
                                                                                                                       // 5850
		for (col = 0; col < colCnt; col++) {                                                                                 // 5851
			colDate = this.colData[col].day; // will be ambig time/timezone                                                     // 5852
			colRange = {                                                                                                        // 5853
				start: colDate.clone().time(this.minTime),                                                                         // 5854
				end: colDate.clone().time(this.maxTime)                                                                            // 5855
			};                                                                                                                  // 5856
			seg = intersectionToSeg(range, colRange); // both will be ambig timezone                                            // 5857
			if (seg) {                                                                                                          // 5858
				seg.col = col;                                                                                                     // 5859
				segs.push(seg);                                                                                                    // 5860
			}                                                                                                                   // 5861
		}                                                                                                                    // 5862
                                                                                                                       // 5863
		return segs;                                                                                                         // 5864
	},                                                                                                                    // 5865
                                                                                                                       // 5866
                                                                                                                       // 5867
	/* Coordinates                                                                                                        // 5868
	------------------------------------------------------------------------------------------------------------------*/  // 5869
                                                                                                                       // 5870
                                                                                                                       // 5871
	updateSize: function(isResize) { // NOT a standard Grid method                                                        // 5872
		this.computeSlatTops();                                                                                              // 5873
                                                                                                                       // 5874
		if (isResize) {                                                                                                      // 5875
			this.updateSegVerticals();                                                                                          // 5876
		}                                                                                                                    // 5877
	},                                                                                                                    // 5878
                                                                                                                       // 5879
                                                                                                                       // 5880
	// Computes the top/bottom coordinates of each "snap" rows                                                            // 5881
	computeRowCoords: function() {                                                                                        // 5882
		var originTop = this.el.offset().top;                                                                                // 5883
		var items = [];                                                                                                      // 5884
		var i;                                                                                                               // 5885
		var item;                                                                                                            // 5886
                                                                                                                       // 5887
		for (i = 0; i < this.rowCnt; i++) {                                                                                  // 5888
			item = {                                                                                                            // 5889
				top: originTop + this.computeTimeTop(this.computeSnapTime(i))                                                      // 5890
			};                                                                                                                  // 5891
			if (i > 0) {                                                                                                        // 5892
				items[i - 1].bottom = item.top;                                                                                    // 5893
			}                                                                                                                   // 5894
			items.push(item);                                                                                                   // 5895
		}                                                                                                                    // 5896
		item.bottom = item.top + this.computeTimeTop(this.computeSnapTime(i));                                               // 5897
                                                                                                                       // 5898
		return items;                                                                                                        // 5899
	},                                                                                                                    // 5900
                                                                                                                       // 5901
                                                                                                                       // 5902
	// Computes the top coordinate, relative to the bounds of the grid, of the given date.                                // 5903
	// A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.                                // 5904
	computeDateTop: function(date, startOfDayDate) {                                                                      // 5905
		return this.computeTimeTop(                                                                                          // 5906
			moment.duration(                                                                                                    // 5907
				date.clone().stripZone() - startOfDayDate.clone().stripTime()                                                      // 5908
			)                                                                                                                   // 5909
		);                                                                                                                   // 5910
	},                                                                                                                    // 5911
                                                                                                                       // 5912
                                                                                                                       // 5913
	// Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).                   // 5914
	computeTimeTop: function(time) {                                                                                      // 5915
		var slatCoverage = (time - this.minTime) / this.slotDuration; // floating-point value of # of slots covered          // 5916
		var slatIndex;                                                                                                       // 5917
		var slatRemainder;                                                                                                   // 5918
		var slatTop;                                                                                                         // 5919
		var slatBottom;                                                                                                      // 5920
                                                                                                                       // 5921
		// constrain. because minTime/maxTime might be customized                                                            // 5922
		slatCoverage = Math.max(0, slatCoverage);                                                                            // 5923
		slatCoverage = Math.min(this.slatEls.length, slatCoverage);                                                          // 5924
                                                                                                                       // 5925
		slatIndex = Math.floor(slatCoverage); // an integer index of the furthest whole slot                                 // 5926
		slatRemainder = slatCoverage - slatIndex;                                                                            // 5927
		slatTop = this.slatTops[slatIndex]; // the top position of the furthest whole slot                                   // 5928
                                                                                                                       // 5929
		if (slatRemainder) { // time spans part-way into the slot                                                            // 5930
			slatBottom = this.slatTops[slatIndex + 1];                                                                          // 5931
			return slatTop + (slatBottom - slatTop) * slatRemainder; // part-way between slots                                  // 5932
		}                                                                                                                    // 5933
		else {                                                                                                               // 5934
			return slatTop;                                                                                                     // 5935
		}                                                                                                                    // 5936
	},                                                                                                                    // 5937
                                                                                                                       // 5938
                                                                                                                       // 5939
	// Queries each `slatEl` for its position relative to the grid's container and stores it in `slatTops`.               // 5940
	// Includes the the bottom of the last slat as the last item in the array.                                            // 5941
	computeSlatTops: function() {                                                                                         // 5942
		var tops = [];                                                                                                       // 5943
		var top;                                                                                                             // 5944
                                                                                                                       // 5945
		this.slatEls.each(function(i, node) {                                                                                // 5946
			top = $(node).position().top;                                                                                       // 5947
			tops.push(top);                                                                                                     // 5948
		});                                                                                                                  // 5949
                                                                                                                       // 5950
		tops.push(top + this.slatEls.last().outerHeight()); // bottom of the last slat                                       // 5951
                                                                                                                       // 5952
		this.slatTops = tops;                                                                                                // 5953
	},                                                                                                                    // 5954
                                                                                                                       // 5955
                                                                                                                       // 5956
	/* Event Drag Visualization                                                                                           // 5957
	------------------------------------------------------------------------------------------------------------------*/  // 5958
                                                                                                                       // 5959
                                                                                                                       // 5960
	// Renders a visual indication of an event being dragged over the specified date(s).                                  // 5961
	// dropLocation's end might be null, as well as `seg`. See Grid::renderDrag for more info.                            // 5962
	// A returned value of `true` signals that a mock "helper" event has been rendered.                                   // 5963
	renderDrag: function(dropLocation, seg) {                                                                             // 5964
                                                                                                                       // 5965
		if (seg) { // if there is event information for this drag, render a helper event                                     // 5966
			this.renderRangeHelper(dropLocation, seg);                                                                          // 5967
			this.applyDragOpacity(this.helperEl);                                                                               // 5968
                                                                                                                       // 5969
			return true; // signal that a helper has been rendered                                                              // 5970
		}                                                                                                                    // 5971
		else {                                                                                                               // 5972
			// otherwise, just render a highlight                                                                               // 5973
			this.renderHighlight(                                                                                               // 5974
				this.view.calendar.ensureVisibleEventRange(dropLocation) // needs to be a proper range                             // 5975
			);                                                                                                                  // 5976
		}                                                                                                                    // 5977
	},                                                                                                                    // 5978
                                                                                                                       // 5979
                                                                                                                       // 5980
	// Unrenders any visual indication of an event being dragged                                                          // 5981
	destroyDrag: function() {                                                                                             // 5982
		this.destroyHelper();                                                                                                // 5983
		this.destroyHighlight();                                                                                             // 5984
	},                                                                                                                    // 5985
                                                                                                                       // 5986
                                                                                                                       // 5987
	/* Event Resize Visualization                                                                                         // 5988
	------------------------------------------------------------------------------------------------------------------*/  // 5989
                                                                                                                       // 5990
                                                                                                                       // 5991
	// Renders a visual indication of an event being resized                                                              // 5992
	renderEventResize: function(range, seg) {                                                                             // 5993
		this.renderRangeHelper(range, seg);                                                                                  // 5994
	},                                                                                                                    // 5995
                                                                                                                       // 5996
                                                                                                                       // 5997
	// Unrenders any visual indication of an event being resized                                                          // 5998
	destroyEventResize: function() {                                                                                      // 5999
		this.destroyHelper();                                                                                                // 6000
	},                                                                                                                    // 6001
                                                                                                                       // 6002
                                                                                                                       // 6003
	/* Event Helper                                                                                                       // 6004
	------------------------------------------------------------------------------------------------------------------*/  // 6005
                                                                                                                       // 6006
                                                                                                                       // 6007
	// Renders a mock "helper" event. `sourceSeg` is the original segment object and might be null (an external drag)     // 6008
	renderHelper: function(event, sourceSeg) {                                                                            // 6009
		var segs = this.eventsToSegs([ event ]);                                                                             // 6010
		var tableEl;                                                                                                         // 6011
		var i, seg;                                                                                                          // 6012
		var sourceEl;                                                                                                        // 6013
                                                                                                                       // 6014
		segs = this.renderFgSegEls(segs); // assigns each seg's el and returns a subset of segs that were rendered           // 6015
		tableEl = this.renderSegTable(segs);                                                                                 // 6016
                                                                                                                       // 6017
		// Try to make the segment that is in the same row as sourceSeg look the same                                        // 6018
		for (i = 0; i < segs.length; i++) {                                                                                  // 6019
			seg = segs[i];                                                                                                      // 6020
			if (sourceSeg && sourceSeg.col === seg.col) {                                                                       // 6021
				sourceEl = sourceSeg.el;                                                                                           // 6022
				seg.el.css({                                                                                                       // 6023
					left: sourceEl.css('left'),                                                                                       // 6024
					right: sourceEl.css('right'),                                                                                     // 6025
					'margin-left': sourceEl.css('margin-left'),                                                                       // 6026
					'margin-right': sourceEl.css('margin-right')                                                                      // 6027
				});                                                                                                                // 6028
			}                                                                                                                   // 6029
		}                                                                                                                    // 6030
                                                                                                                       // 6031
		this.helperEl = $('<div class="fc-helper-skeleton"/>')                                                               // 6032
			.append(tableEl)                                                                                                    // 6033
				.appendTo(this.el);                                                                                                // 6034
	},                                                                                                                    // 6035
                                                                                                                       // 6036
                                                                                                                       // 6037
	// Unrenders any mock helper event                                                                                    // 6038
	destroyHelper: function() {                                                                                           // 6039
		if (this.helperEl) {                                                                                                 // 6040
			this.helperEl.remove();                                                                                             // 6041
			this.helperEl = null;                                                                                               // 6042
		}                                                                                                                    // 6043
	},                                                                                                                    // 6044
                                                                                                                       // 6045
                                                                                                                       // 6046
	/* Selection                                                                                                          // 6047
	------------------------------------------------------------------------------------------------------------------*/  // 6048
                                                                                                                       // 6049
                                                                                                                       // 6050
	// Renders a visual indication of a selection. Overrides the default, which was to simply render a highlight.         // 6051
	renderSelection: function(range) {                                                                                    // 6052
		if (this.view.opt('selectHelper')) { // this setting signals that a mock helper event should be rendered             // 6053
			this.renderRangeHelper(range);                                                                                      // 6054
		}                                                                                                                    // 6055
		else {                                                                                                               // 6056
			this.renderHighlight(range);                                                                                        // 6057
		}                                                                                                                    // 6058
	},                                                                                                                    // 6059
                                                                                                                       // 6060
                                                                                                                       // 6061
	// Unrenders any visual indication of a selection                                                                     // 6062
	destroySelection: function() {                                                                                        // 6063
		this.destroyHelper();                                                                                                // 6064
		this.destroyHighlight();                                                                                             // 6065
	},                                                                                                                    // 6066
                                                                                                                       // 6067
                                                                                                                       // 6068
	/* Fill System (highlight, background events, business hours)                                                         // 6069
	------------------------------------------------------------------------------------------------------------------*/  // 6070
                                                                                                                       // 6071
                                                                                                                       // 6072
	// Renders a set of rectangles over the given time segments.                                                          // 6073
	// Only returns segments that successfully rendered.                                                                  // 6074
	renderFill: function(type, segs, className) {                                                                         // 6075
		var segCols;                                                                                                         // 6076
		var skeletonEl;                                                                                                      // 6077
		var trEl;                                                                                                            // 6078
		var col, colSegs;                                                                                                    // 6079
		var tdEl;                                                                                                            // 6080
		var containerEl;                                                                                                     // 6081
		var dayDate;                                                                                                         // 6082
		var i, seg;                                                                                                          // 6083
                                                                                                                       // 6084
		if (segs.length) {                                                                                                   // 6085
                                                                                                                       // 6086
			segs = this.renderFillSegEls(type, segs); // assignes `.el` to each seg. returns successfully rendered segs         // 6087
			segCols = this.groupSegCols(segs); // group into sub-arrays, and assigns 'col' to each seg                          // 6088
                                                                                                                       // 6089
			className = className || type.toLowerCase();                                                                        // 6090
			skeletonEl = $(                                                                                                     // 6091
				'<div class="fc-' + className + '-skeleton">' +                                                                    // 6092
					'<table><tr/></table>' +                                                                                          // 6093
				'</div>'                                                                                                           // 6094
			);                                                                                                                  // 6095
			trEl = skeletonEl.find('tr');                                                                                       // 6096
                                                                                                                       // 6097
			for (col = 0; col < segCols.length; col++) {                                                                        // 6098
				colSegs = segCols[col];                                                                                            // 6099
				tdEl = $('<td/>').appendTo(trEl);                                                                                  // 6100
                                                                                                                       // 6101
				if (colSegs.length) {                                                                                              // 6102
					containerEl = $('<div class="fc-' + className + '-container"/>').appendTo(tdEl);                                  // 6103
					dayDate = this.colData[col].day;                                                                                  // 6104
                                                                                                                       // 6105
					for (i = 0; i < colSegs.length; i++) {                                                                            // 6106
						seg = colSegs[i];                                                                                                // 6107
						containerEl.append(                                                                                              // 6108
							seg.el.css({                                                                                                    // 6109
								top: this.computeDateTop(seg.start, dayDate),                                                                  // 6110
								bottom: -this.computeDateTop(seg.end, dayDate) // the y position of the bottom edge                            // 6111
							})                                                                                                              // 6112
						);                                                                                                               // 6113
					}                                                                                                                 // 6114
				}                                                                                                                  // 6115
			}                                                                                                                   // 6116
                                                                                                                       // 6117
			this.bookendCells(trEl, type);                                                                                      // 6118
                                                                                                                       // 6119
			this.el.append(skeletonEl);                                                                                         // 6120
			this.elsByFill[type] = skeletonEl;                                                                                  // 6121
		}                                                                                                                    // 6122
                                                                                                                       // 6123
		return segs;                                                                                                         // 6124
	}                                                                                                                     // 6125
                                                                                                                       // 6126
});                                                                                                                    // 6127
                                                                                                                       // 6128
;;                                                                                                                     // 6129
                                                                                                                       // 6130
/* Event-rendering methods for the TimeGrid class                                                                      // 6131
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 6133
TimeGrid.mixin({                                                                                                       // 6134
                                                                                                                       // 6135
	eventSkeletonEl: null, // has cells with event-containers, which contain absolutely positioned event elements         // 6136
                                                                                                                       // 6137
                                                                                                                       // 6138
	// Renders the given foreground event segments onto the grid                                                          // 6139
	renderFgSegs: function(segs) {                                                                                        // 6140
		segs = this.renderFgSegEls(segs); // returns a subset of the segs. segs that were actually rendered                  // 6141
                                                                                                                       // 6142
		this.el.append(                                                                                                      // 6143
			this.eventSkeletonEl = $('<div class="fc-content-skeleton"/>')                                                      // 6144
				.append(this.renderSegTable(segs))                                                                                 // 6145
		);                                                                                                                   // 6146
                                                                                                                       // 6147
		return segs; // return only the segs that were actually rendered                                                     // 6148
	},                                                                                                                    // 6149
                                                                                                                       // 6150
                                                                                                                       // 6151
	// Unrenders all currently rendered foreground event segments                                                         // 6152
	destroyFgSegs: function(segs) {                                                                                       // 6153
		if (this.eventSkeletonEl) {                                                                                          // 6154
			this.eventSkeletonEl.remove();                                                                                      // 6155
			this.eventSkeletonEl = null;                                                                                        // 6156
		}                                                                                                                    // 6157
	},                                                                                                                    // 6158
                                                                                                                       // 6159
                                                                                                                       // 6160
	// Renders and returns the <table> portion of the event-skeleton.                                                     // 6161
	// Returns an object with properties 'tbodyEl' and 'segs'.                                                            // 6162
	renderSegTable: function(segs) {                                                                                      // 6163
		var tableEl = $('<table><tr/></table>');                                                                             // 6164
		var trEl = tableEl.find('tr');                                                                                       // 6165
		var segCols;                                                                                                         // 6166
		var i, seg;                                                                                                          // 6167
		var col, colSegs;                                                                                                    // 6168
		var containerEl;                                                                                                     // 6169
                                                                                                                       // 6170
		segCols = this.groupSegCols(segs); // group into sub-arrays, and assigns 'col' to each seg                           // 6171
                                                                                                                       // 6172
		this.computeSegVerticals(segs); // compute and assign top/bottom                                                     // 6173
                                                                                                                       // 6174
		for (col = 0; col < segCols.length; col++) { // iterate each column grouping                                         // 6175
			colSegs = segCols[col];                                                                                             // 6176
			placeSlotSegs(colSegs); // compute horizontal coordinates, z-index's, and reorder the array                         // 6177
                                                                                                                       // 6178
			containerEl = $('<div class="fc-event-container"/>');                                                               // 6179
                                                                                                                       // 6180
			// assign positioning CSS and insert into container                                                                 // 6181
			for (i = 0; i < colSegs.length; i++) {                                                                              // 6182
				seg = colSegs[i];                                                                                                  // 6183
				seg.el.css(this.generateSegPositionCss(seg));                                                                      // 6184
                                                                                                                       // 6185
				// if the height is short, add a className for alternate styling                                                   // 6186
				if (seg.bottom - seg.top < 30) {                                                                                   // 6187
					seg.el.addClass('fc-short');                                                                                      // 6188
				}                                                                                                                  // 6189
                                                                                                                       // 6190
				containerEl.append(seg.el);                                                                                        // 6191
			}                                                                                                                   // 6192
                                                                                                                       // 6193
			trEl.append($('<td/>').append(containerEl));                                                                        // 6194
		}                                                                                                                    // 6195
                                                                                                                       // 6196
		this.bookendCells(trEl, 'eventSkeleton');                                                                            // 6197
                                                                                                                       // 6198
		return tableEl;                                                                                                      // 6199
	},                                                                                                                    // 6200
                                                                                                                       // 6201
                                                                                                                       // 6202
	// Refreshes the CSS top/bottom coordinates for each segment element. Probably after a window resize/zoom.            // 6203
	// Repositions business hours segs too, so not just for events. Maybe shouldn't be here.                              // 6204
	updateSegVerticals: function() {                                                                                      // 6205
		var allSegs = (this.segs || []).concat(this.businessHourSegs || []);                                                 // 6206
		var i;                                                                                                               // 6207
                                                                                                                       // 6208
		this.computeSegVerticals(allSegs);                                                                                   // 6209
                                                                                                                       // 6210
		for (i = 0; i < allSegs.length; i++) {                                                                               // 6211
			allSegs[i].el.css(                                                                                                  // 6212
				this.generateSegVerticalCss(allSegs[i])                                                                            // 6213
			);                                                                                                                  // 6214
		}                                                                                                                    // 6215
	},                                                                                                                    // 6216
                                                                                                                       // 6217
                                                                                                                       // 6218
	// For each segment in an array, computes and assigns its top and bottom properties                                   // 6219
	computeSegVerticals: function(segs) {                                                                                 // 6220
		var i, seg;                                                                                                          // 6221
                                                                                                                       // 6222
		for (i = 0; i < segs.length; i++) {                                                                                  // 6223
			seg = segs[i];                                                                                                      // 6224
			seg.top = this.computeDateTop(seg.start, seg.start);                                                                // 6225
			seg.bottom = this.computeDateTop(seg.end, seg.start);                                                               // 6226
		}                                                                                                                    // 6227
	},                                                                                                                    // 6228
                                                                                                                       // 6229
                                                                                                                       // 6230
	// Renders the HTML for a single event segment's default rendering                                                    // 6231
	fgSegHtml: function(seg, disableResizing) {                                                                           // 6232
		var view = this.view;                                                                                                // 6233
		var event = seg.event;                                                                                               // 6234
		var isDraggable = view.isEventDraggable(event);                                                                      // 6235
		var isResizableFromStart = !disableResizing && seg.isStart && view.isEventResizableFromStart(event);                 // 6236
		var isResizableFromEnd = !disableResizing && seg.isEnd && view.isEventResizableFromEnd(event);                       // 6237
		var classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd);                      // 6238
		var skinCss = cssToStr(this.getEventSkinCss(event));                                                                 // 6239
		var timeText;                                                                                                        // 6240
		var fullTimeText; // more verbose time text. for the print stylesheet                                                // 6241
		var startTimeText; // just the start time text                                                                       // 6242
                                                                                                                       // 6243
		classes.unshift('fc-time-grid-event', 'fc-v-event');                                                                 // 6244
                                                                                                                       // 6245
		if (view.isMultiDayEvent(event)) { // if the event appears to span more than one day...                              // 6246
			// Don't display time text on segments that run entirely through a day.                                             // 6247
			// That would appear as midnight-midnight and would look dumb.                                                      // 6248
			// Otherwise, display the time text for the *segment's* times (like 6pm-midnight or midnight-10am)                  // 6249
			if (seg.isStart || seg.isEnd) {                                                                                     // 6250
				timeText = this.getEventTimeText(seg);                                                                             // 6251
				fullTimeText = this.getEventTimeText(seg, 'LT');                                                                   // 6252
				startTimeText = this.getEventTimeText(seg, null, false); // displayEnd=false                                       // 6253
			}                                                                                                                   // 6254
		} else {                                                                                                             // 6255
			// Display the normal time text for the *event's* times                                                             // 6256
			timeText = this.getEventTimeText(event);                                                                            // 6257
			fullTimeText = this.getEventTimeText(event, 'LT');                                                                  // 6258
			startTimeText = this.getEventTimeText(event, null, false); // displayEnd=false                                      // 6259
		}                                                                                                                    // 6260
                                                                                                                       // 6261
		return '<a class="' + classes.join(' ') + '"' +                                                                      // 6262
			(event.url ?                                                                                                        // 6263
				' href="' + htmlEscape(event.url) + '"' :                                                                          // 6264
				''                                                                                                                 // 6265
				) +                                                                                                                // 6266
			(skinCss ?                                                                                                          // 6267
				' style="' + skinCss + '"' :                                                                                       // 6268
				''                                                                                                                 // 6269
				) +                                                                                                                // 6270
			'>' +                                                                                                               // 6271
				'<div class="fc-content">' +                                                                                       // 6272
					(timeText ?                                                                                                       // 6273
						'<div class="fc-time"' +                                                                                         // 6274
						' data-start="' + htmlEscape(startTimeText) + '"' +                                                              // 6275
						' data-full="' + htmlEscape(fullTimeText) + '"' +                                                                // 6276
						'>' +                                                                                                            // 6277
							'<span>' + htmlEscape(timeText) + '</span>' +                                                                   // 6278
						'</div>' :                                                                                                       // 6279
						''                                                                                                               // 6280
						) +                                                                                                              // 6281
					(event.title ?                                                                                                    // 6282
						'<div class="fc-title">' +                                                                                       // 6283
							htmlEscape(event.title) +                                                                                       // 6284
						'</div>' :                                                                                                       // 6285
						''                                                                                                               // 6286
						) +                                                                                                              // 6287
				'</div>' +                                                                                                         // 6288
				'<div class="fc-bg"/>' +                                                                                           // 6289
				/* TODO: write CSS for this                                                                                        // 6290
				(isResizableFromStart ?                                                                                            // 6291
					'<div class="fc-resizer fc-start-resizer" />' :                                                                   // 6292
					''                                                                                                                // 6293
					) +                                                                                                               // 6294
				*/                                                                                                                 // 6295
				(isResizableFromEnd ?                                                                                              // 6296
					'<div class="fc-resizer fc-end-resizer" />' :                                                                     // 6297
					''                                                                                                                // 6298
					) +                                                                                                               // 6299
			'</a>';                                                                                                             // 6300
	},                                                                                                                    // 6301
                                                                                                                       // 6302
                                                                                                                       // 6303
	// Generates an object with CSS properties/values that should be applied to an event segment element.                 // 6304
	// Contains important positioning-related properties that should be applied to any event element, customized or not.  // 6305
	generateSegPositionCss: function(seg) {                                                                               // 6306
		var shouldOverlap = this.view.opt('slotEventOverlap');                                                               // 6307
		var backwardCoord = seg.backwardCoord; // the left side if LTR. the right side if RTL. floating-point                // 6308
		var forwardCoord = seg.forwardCoord; // the right side if LTR. the left side if RTL. floating-point                  // 6309
		var props = this.generateSegVerticalCss(seg); // get top/bottom first                                                // 6310
		var left; // amount of space from left edge, a fraction of the total width                                           // 6311
		var right; // amount of space from right edge, a fraction of the total width                                         // 6312
                                                                                                                       // 6313
		if (shouldOverlap) {                                                                                                 // 6314
			// double the width, but don't go beyond the maximum forward coordinate (1.0)                                       // 6315
			forwardCoord = Math.min(1, backwardCoord + (forwardCoord - backwardCoord) * 2);                                     // 6316
		}                                                                                                                    // 6317
                                                                                                                       // 6318
		if (this.isRTL) {                                                                                                    // 6319
			left = 1 - forwardCoord;                                                                                            // 6320
			right = backwardCoord;                                                                                              // 6321
		}                                                                                                                    // 6322
		else {                                                                                                               // 6323
			left = backwardCoord;                                                                                               // 6324
			right = 1 - forwardCoord;                                                                                           // 6325
		}                                                                                                                    // 6326
                                                                                                                       // 6327
		props.zIndex = seg.level + 1; // convert from 0-base to 1-based                                                      // 6328
		props.left = left * 100 + '%';                                                                                       // 6329
		props.right = right * 100 + '%';                                                                                     // 6330
                                                                                                                       // 6331
		if (shouldOverlap && seg.forwardPressure) {                                                                          // 6332
			// add padding to the edge so that forward stacked events don't cover the resizer's icon                            // 6333
			props[this.isRTL ? 'marginLeft' : 'marginRight'] = 10 * 2; // 10 is a guesstimate of the icon's width               // 6334
		}                                                                                                                    // 6335
                                                                                                                       // 6336
		return props;                                                                                                        // 6337
	},                                                                                                                    // 6338
                                                                                                                       // 6339
                                                                                                                       // 6340
	// Generates an object with CSS properties for the top/bottom coordinates of a segment element                        // 6341
	generateSegVerticalCss: function(seg) {                                                                               // 6342
		return {                                                                                                             // 6343
			top: seg.top,                                                                                                       // 6344
			bottom: -seg.bottom // flipped because needs to be space beyond bottom edge of event container                      // 6345
		};                                                                                                                   // 6346
	},                                                                                                                    // 6347
                                                                                                                       // 6348
                                                                                                                       // 6349
	// Given a flat array of segments, return an array of sub-arrays, grouped by each segment's col                       // 6350
	groupSegCols: function(segs) {                                                                                        // 6351
		var segCols = [];                                                                                                    // 6352
		var i;                                                                                                               // 6353
                                                                                                                       // 6354
		for (i = 0; i < this.colCnt; i++) {                                                                                  // 6355
			segCols.push([]);                                                                                                   // 6356
		}                                                                                                                    // 6357
                                                                                                                       // 6358
		for (i = 0; i < segs.length; i++) {                                                                                  // 6359
			segCols[segs[i].col].push(segs[i]);                                                                                 // 6360
		}                                                                                                                    // 6361
                                                                                                                       // 6362
		return segCols;                                                                                                      // 6363
	}                                                                                                                     // 6364
                                                                                                                       // 6365
});                                                                                                                    // 6366
                                                                                                                       // 6367
                                                                                                                       // 6368
// Given an array of segments that are all in the same column, sets the backwardCoord and forwardCoord on each.        // 6369
// NOTE: Also reorders the given array by date!                                                                        // 6370
function placeSlotSegs(segs) {                                                                                         // 6371
	var levels;                                                                                                           // 6372
	var level0;                                                                                                           // 6373
	var i;                                                                                                                // 6374
                                                                                                                       // 6375
	segs.sort(compareSegs); // order by date                                                                              // 6376
	levels = buildSlotSegLevels(segs);                                                                                    // 6377
	computeForwardSlotSegs(levels);                                                                                       // 6378
                                                                                                                       // 6379
	if ((level0 = levels[0])) {                                                                                           // 6380
                                                                                                                       // 6381
		for (i = 0; i < level0.length; i++) {                                                                                // 6382
			computeSlotSegPressures(level0[i]);                                                                                 // 6383
		}                                                                                                                    // 6384
                                                                                                                       // 6385
		for (i = 0; i < level0.length; i++) {                                                                                // 6386
			computeSlotSegCoords(level0[i], 0, 0);                                                                              // 6387
		}                                                                                                                    // 6388
	}                                                                                                                     // 6389
}                                                                                                                      // 6390
                                                                                                                       // 6391
                                                                                                                       // 6392
// Builds an array of segments "levels". The first level will be the leftmost tier of segments if the calendar is      // 6393
// left-to-right, or the rightmost if the calendar is right-to-left. Assumes the segments are already ordered by date. // 6394
function buildSlotSegLevels(segs) {                                                                                    // 6395
	var levels = [];                                                                                                      // 6396
	var i, seg;                                                                                                           // 6397
	var j;                                                                                                                // 6398
                                                                                                                       // 6399
	for (i=0; i<segs.length; i++) {                                                                                       // 6400
		seg = segs[i];                                                                                                       // 6401
                                                                                                                       // 6402
		// go through all the levels and stop on the first level where there are no collisions                               // 6403
		for (j=0; j<levels.length; j++) {                                                                                    // 6404
			if (!computeSlotSegCollisions(seg, levels[j]).length) {                                                             // 6405
				break;                                                                                                             // 6406
			}                                                                                                                   // 6407
		}                                                                                                                    // 6408
                                                                                                                       // 6409
		seg.level = j;                                                                                                       // 6410
                                                                                                                       // 6411
		(levels[j] || (levels[j] = [])).push(seg);                                                                           // 6412
	}                                                                                                                     // 6413
                                                                                                                       // 6414
	return levels;                                                                                                        // 6415
}                                                                                                                      // 6416
                                                                                                                       // 6417
                                                                                                                       // 6418
// For every segment, figure out the other segments that are in subsequent                                             // 6419
// levels that also occupy the same vertical space. Accumulate in seg.forwardSegs                                      // 6420
function computeForwardSlotSegs(levels) {                                                                              // 6421
	var i, level;                                                                                                         // 6422
	var j, seg;                                                                                                           // 6423
	var k;                                                                                                                // 6424
                                                                                                                       // 6425
	for (i=0; i<levels.length; i++) {                                                                                     // 6426
		level = levels[i];                                                                                                   // 6427
                                                                                                                       // 6428
		for (j=0; j<level.length; j++) {                                                                                     // 6429
			seg = level[j];                                                                                                     // 6430
                                                                                                                       // 6431
			seg.forwardSegs = [];                                                                                               // 6432
			for (k=i+1; k<levels.length; k++) {                                                                                 // 6433
				computeSlotSegCollisions(seg, levels[k], seg.forwardSegs);                                                         // 6434
			}                                                                                                                   // 6435
		}                                                                                                                    // 6436
	}                                                                                                                     // 6437
}                                                                                                                      // 6438
                                                                                                                       // 6439
                                                                                                                       // 6440
// Figure out which path forward (via seg.forwardSegs) results in the longest path until                               // 6441
// the furthest edge is reached. The number of segments in this path will be seg.forwardPressure                       // 6442
function computeSlotSegPressures(seg) {                                                                                // 6443
	var forwardSegs = seg.forwardSegs;                                                                                    // 6444
	var forwardPressure = 0;                                                                                              // 6445
	var i, forwardSeg;                                                                                                    // 6446
                                                                                                                       // 6447
	if (seg.forwardPressure === undefined) { // not already computed                                                      // 6448
                                                                                                                       // 6449
		for (i=0; i<forwardSegs.length; i++) {                                                                               // 6450
			forwardSeg = forwardSegs[i];                                                                                        // 6451
                                                                                                                       // 6452
			// figure out the child's maximum forward path                                                                      // 6453
			computeSlotSegPressures(forwardSeg);                                                                                // 6454
                                                                                                                       // 6455
			// either use the existing maximum, or use the child's forward pressure                                             // 6456
			// plus one (for the forwardSeg itself)                                                                             // 6457
			forwardPressure = Math.max(                                                                                         // 6458
				forwardPressure,                                                                                                   // 6459
				1 + forwardSeg.forwardPressure                                                                                     // 6460
			);                                                                                                                  // 6461
		}                                                                                                                    // 6462
                                                                                                                       // 6463
		seg.forwardPressure = forwardPressure;                                                                               // 6464
	}                                                                                                                     // 6465
}                                                                                                                      // 6466
                                                                                                                       // 6467
                                                                                                                       // 6468
// Calculate seg.forwardCoord and seg.backwardCoord for the segment, where both values range                           // 6469
// from 0 to 1. If the calendar is left-to-right, the seg.backwardCoord maps to "left" and                             // 6470
// seg.forwardCoord maps to "right" (via percentage). Vice-versa if the calendar is right-to-left.                     // 6471
//                                                                                                                     // 6472
// The segment might be part of a "series", which means consecutive segments with the same pressure                    // 6473
// who's width is unknown until an edge has been hit. `seriesBackwardPressure` is the number of                        // 6474
// segments behind this one in the current series, and `seriesBackwardCoord` is the starting                           // 6475
// coordinate of the first segment in the series.                                                                      // 6476
function computeSlotSegCoords(seg, seriesBackwardPressure, seriesBackwardCoord) {                                      // 6477
	var forwardSegs = seg.forwardSegs;                                                                                    // 6478
	var i;                                                                                                                // 6479
                                                                                                                       // 6480
	if (seg.forwardCoord === undefined) { // not already computed                                                         // 6481
                                                                                                                       // 6482
		if (!forwardSegs.length) {                                                                                           // 6483
                                                                                                                       // 6484
			// if there are no forward segments, this segment should butt up against the edge                                   // 6485
			seg.forwardCoord = 1;                                                                                               // 6486
		}                                                                                                                    // 6487
		else {                                                                                                               // 6488
                                                                                                                       // 6489
			// sort highest pressure first                                                                                      // 6490
			forwardSegs.sort(compareForwardSlotSegs);                                                                           // 6491
                                                                                                                       // 6492
			// this segment's forwardCoord will be calculated from the backwardCoord of the                                     // 6493
			// highest-pressure forward segment.                                                                                // 6494
			computeSlotSegCoords(forwardSegs[0], seriesBackwardPressure + 1, seriesBackwardCoord);                              // 6495
			seg.forwardCoord = forwardSegs[0].backwardCoord;                                                                    // 6496
		}                                                                                                                    // 6497
                                                                                                                       // 6498
		// calculate the backwardCoord from the forwardCoord. consider the series                                            // 6499
		seg.backwardCoord = seg.forwardCoord -                                                                               // 6500
			(seg.forwardCoord - seriesBackwardCoord) / // available width for series                                            // 6501
			(seriesBackwardPressure + 1); // # of segments in the series                                                        // 6502
                                                                                                                       // 6503
		// use this segment's coordinates to computed the coordinates of the less-pressurized                                // 6504
		// forward segments                                                                                                  // 6505
		for (i=0; i<forwardSegs.length; i++) {                                                                               // 6506
			computeSlotSegCoords(forwardSegs[i], 0, seg.forwardCoord);                                                          // 6507
		}                                                                                                                    // 6508
	}                                                                                                                     // 6509
}                                                                                                                      // 6510
                                                                                                                       // 6511
                                                                                                                       // 6512
// Find all the segments in `otherSegs` that vertically collide with `seg`.                                            // 6513
// Append into an optionally-supplied `results` array and return.                                                      // 6514
function computeSlotSegCollisions(seg, otherSegs, results) {                                                           // 6515
	results = results || [];                                                                                              // 6516
                                                                                                                       // 6517
	for (var i=0; i<otherSegs.length; i++) {                                                                              // 6518
		if (isSlotSegCollision(seg, otherSegs[i])) {                                                                         // 6519
			results.push(otherSegs[i]);                                                                                         // 6520
		}                                                                                                                    // 6521
	}                                                                                                                     // 6522
                                                                                                                       // 6523
	return results;                                                                                                       // 6524
}                                                                                                                      // 6525
                                                                                                                       // 6526
                                                                                                                       // 6527
// Do these segments occupy the same vertical space?                                                                   // 6528
function isSlotSegCollision(seg1, seg2) {                                                                              // 6529
	return seg1.bottom > seg2.top && seg1.top < seg2.bottom;                                                              // 6530
}                                                                                                                      // 6531
                                                                                                                       // 6532
                                                                                                                       // 6533
// A cmp function for determining which forward segment to rely on more when computing coordinates.                    // 6534
function compareForwardSlotSegs(seg1, seg2) {                                                                          // 6535
	// put higher-pressure first                                                                                          // 6536
	return seg2.forwardPressure - seg1.forwardPressure ||                                                                 // 6537
		// put segments that are closer to initial edge first (and favor ones with no coords yet)                            // 6538
		(seg1.backwardCoord || 0) - (seg2.backwardCoord || 0) ||                                                             // 6539
		// do normal sorting...                                                                                              // 6540
		compareSegs(seg1, seg2);                                                                                             // 6541
}                                                                                                                      // 6542
                                                                                                                       // 6543
;;                                                                                                                     // 6544
                                                                                                                       // 6545
/* An abstract class from which other views inherit from                                                               // 6546
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 6548
var View = fc.View = Class.extend({                                                                                    // 6549
                                                                                                                       // 6550
	type: null, // subclass' view name (string)                                                                           // 6551
	name: null, // deprecated. use `type` instead                                                                         // 6552
	title: null, // the text that will be displayed in the header's title                                                 // 6553
                                                                                                                       // 6554
	calendar: null, // owner Calendar object                                                                              // 6555
	options: null, // hash containing all options. already merged with view-specific-options                              // 6556
	coordMap: null, // a CoordMap object for converting pixel regions to dates                                            // 6557
	el: null, // the view's containing element. set by Calendar                                                           // 6558
                                                                                                                       // 6559
	isDisplayed: false,                                                                                                   // 6560
	isSkeletonRendered: false,                                                                                            // 6561
	isEventsRendered: false,                                                                                              // 6562
                                                                                                                       // 6563
	// range the view is actually displaying (moments)                                                                    // 6564
	start: null,                                                                                                          // 6565
	end: null, // exclusive                                                                                               // 6566
                                                                                                                       // 6567
	// range the view is formally responsible for (moments)                                                               // 6568
	// may be different from start/end. for example, a month view might have 1st-31st, excluding padded dates             // 6569
	intervalStart: null,                                                                                                  // 6570
	intervalEnd: null, // exclusive                                                                                       // 6571
	intervalDuration: null,                                                                                               // 6572
	intervalUnit: null, // name of largest unit being displayed, like "month" or "week"                                   // 6573
                                                                                                                       // 6574
	isSelected: false, // boolean whether a range of time is user-selected or not                                         // 6575
                                                                                                                       // 6576
	// subclasses can optionally use a scroll container                                                                   // 6577
	scrollerEl: null, // the element that will most likely scroll when content is too tall                                // 6578
	scrollTop: null, // cached vertical scroll value                                                                      // 6579
                                                                                                                       // 6580
	// classNames styled by jqui themes                                                                                   // 6581
	widgetHeaderClass: null,                                                                                              // 6582
	widgetContentClass: null,                                                                                             // 6583
	highlightStateClass: null,                                                                                            // 6584
                                                                                                                       // 6585
	// for date utils, computed from options                                                                              // 6586
	nextDayThreshold: null,                                                                                               // 6587
	isHiddenDayHash: null,                                                                                                // 6588
                                                                                                                       // 6589
	// document handlers, bound to `this` object                                                                          // 6590
	documentMousedownProxy: null, // TODO: doesn't work with touch                                                        // 6591
                                                                                                                       // 6592
                                                                                                                       // 6593
	constructor: function(calendar, type, options, intervalDuration) {                                                    // 6594
                                                                                                                       // 6595
		this.calendar = calendar;                                                                                            // 6596
		this.type = this.name = type; // .name is deprecated                                                                 // 6597
		this.options = options;                                                                                              // 6598
		this.intervalDuration = intervalDuration || moment.duration(1, 'day');                                               // 6599
                                                                                                                       // 6600
		this.nextDayThreshold = moment.duration(this.opt('nextDayThreshold'));                                               // 6601
		this.initThemingProps();                                                                                             // 6602
		this.initHiddenDays();                                                                                               // 6603
                                                                                                                       // 6604
		this.documentMousedownProxy = proxy(this, 'documentMousedown');                                                      // 6605
                                                                                                                       // 6606
		this.initialize();                                                                                                   // 6607
	},                                                                                                                    // 6608
                                                                                                                       // 6609
                                                                                                                       // 6610
	// A good place for subclasses to initialize member variables                                                         // 6611
	initialize: function() {                                                                                              // 6612
		// subclasses can implement                                                                                          // 6613
	},                                                                                                                    // 6614
                                                                                                                       // 6615
                                                                                                                       // 6616
	// Retrieves an option with the given name                                                                            // 6617
	opt: function(name) {                                                                                                 // 6618
		return this.options[name];                                                                                           // 6619
	},                                                                                                                    // 6620
                                                                                                                       // 6621
                                                                                                                       // 6622
	// Triggers handlers that are view-related. Modifies args before passing to calendar.                                 // 6623
	trigger: function(name, thisObj) { // arguments beyond thisObj are passed along                                       // 6624
		var calendar = this.calendar;                                                                                        // 6625
                                                                                                                       // 6626
		return calendar.trigger.apply(                                                                                       // 6627
			calendar,                                                                                                           // 6628
			[name, thisObj || this].concat(                                                                                     // 6629
				Array.prototype.slice.call(arguments, 2), // arguments beyond thisObj                                              // 6630
				[ this ] // always make the last argument a reference to the view. TODO: deprecate                                 // 6631
			)                                                                                                                   // 6632
		);                                                                                                                   // 6633
	},                                                                                                                    // 6634
                                                                                                                       // 6635
                                                                                                                       // 6636
	/* Dates                                                                                                              // 6637
	------------------------------------------------------------------------------------------------------------------*/  // 6638
                                                                                                                       // 6639
                                                                                                                       // 6640
	// Updates all internal dates to center around the given current date                                                 // 6641
	setDate: function(date) {                                                                                             // 6642
		this.setRange(this.computeRange(date));                                                                              // 6643
	},                                                                                                                    // 6644
                                                                                                                       // 6645
                                                                                                                       // 6646
	// Updates all internal dates for displaying the given range.                                                         // 6647
	// Expects all values to be normalized (like what computeRange does).                                                 // 6648
	setRange: function(range) {                                                                                           // 6649
		$.extend(this, range);                                                                                               // 6650
		this.updateTitle();                                                                                                  // 6651
	},                                                                                                                    // 6652
                                                                                                                       // 6653
                                                                                                                       // 6654
	// Given a single current date, produce information about what range to display.                                      // 6655
	// Subclasses can override. Must return all properties.                                                               // 6656
	computeRange: function(date) {                                                                                        // 6657
		var intervalUnit = computeIntervalUnit(this.intervalDuration);                                                       // 6658
		var intervalStart = date.clone().startOf(intervalUnit);                                                              // 6659
		var intervalEnd = intervalStart.clone().add(this.intervalDuration);                                                  // 6660
		var start, end;                                                                                                      // 6661
                                                                                                                       // 6662
		// normalize the range's time-ambiguity                                                                              // 6663
		if (/year|month|week|day/.test(intervalUnit)) { // whole-days?                                                       // 6664
			intervalStart.stripTime();                                                                                          // 6665
			intervalEnd.stripTime();                                                                                            // 6666
		}                                                                                                                    // 6667
		else { // needs to have a time?                                                                                      // 6668
			if (!intervalStart.hasTime()) {                                                                                     // 6669
				intervalStart = this.calendar.rezoneDate(intervalStart); // convert to current timezone, with 00:00                // 6670
			}                                                                                                                   // 6671
			if (!intervalEnd.hasTime()) {                                                                                       // 6672
				intervalEnd = this.calendar.rezoneDate(intervalEnd); // convert to current timezone, with 00:00                    // 6673
			}                                                                                                                   // 6674
		}                                                                                                                    // 6675
                                                                                                                       // 6676
		start = intervalStart.clone();                                                                                       // 6677
		start = this.skipHiddenDays(start);                                                                                  // 6678
		end = intervalEnd.clone();                                                                                           // 6679
		end = this.skipHiddenDays(end, -1, true); // exclusively move backwards                                              // 6680
                                                                                                                       // 6681
		return {                                                                                                             // 6682
			intervalUnit: intervalUnit,                                                                                         // 6683
			intervalStart: intervalStart,                                                                                       // 6684
			intervalEnd: intervalEnd,                                                                                           // 6685
			start: start,                                                                                                       // 6686
			end: end                                                                                                            // 6687
		};                                                                                                                   // 6688
	},                                                                                                                    // 6689
                                                                                                                       // 6690
                                                                                                                       // 6691
	// Computes the new date when the user hits the prev button, given the current date                                   // 6692
	computePrevDate: function(date) {                                                                                     // 6693
		return this.massageCurrentDate(                                                                                      // 6694
			date.clone().startOf(this.intervalUnit).subtract(this.intervalDuration), -1                                         // 6695
		);                                                                                                                   // 6696
	},                                                                                                                    // 6697
                                                                                                                       // 6698
                                                                                                                       // 6699
	// Computes the new date when the user hits the next button, given the current date                                   // 6700
	computeNextDate: function(date) {                                                                                     // 6701
		return this.massageCurrentDate(                                                                                      // 6702
			date.clone().startOf(this.intervalUnit).add(this.intervalDuration)                                                  // 6703
		);                                                                                                                   // 6704
	},                                                                                                                    // 6705
                                                                                                                       // 6706
                                                                                                                       // 6707
	// Given an arbitrarily calculated current date of the calendar, returns a date that is ensured to be completely      // 6708
	// visible. `direction` is optional and indicates which direction the current date was being                          // 6709
	// incremented or decremented (1 or -1).                                                                              // 6710
	massageCurrentDate: function(date, direction) {                                                                       // 6711
		if (this.intervalDuration.as('days') <= 1) { // if the view displays a single day or smaller                         // 6712
			if (this.isHiddenDay(date)) {                                                                                       // 6713
				date = this.skipHiddenDays(date, direction);                                                                       // 6714
				date.startOf('day');                                                                                               // 6715
			}                                                                                                                   // 6716
		}                                                                                                                    // 6717
                                                                                                                       // 6718
		return date;                                                                                                         // 6719
	},                                                                                                                    // 6720
                                                                                                                       // 6721
                                                                                                                       // 6722
	/* Title and Date Formatting                                                                                          // 6723
	------------------------------------------------------------------------------------------------------------------*/  // 6724
                                                                                                                       // 6725
                                                                                                                       // 6726
	// Sets the view's title property to the most updated computed value                                                  // 6727
	updateTitle: function() {                                                                                             // 6728
		this.title = this.computeTitle();                                                                                    // 6729
	},                                                                                                                    // 6730
                                                                                                                       // 6731
                                                                                                                       // 6732
	// Computes what the title at the top of the calendar should be for this view                                         // 6733
	computeTitle: function() {                                                                                            // 6734
		return this.formatRange(                                                                                             // 6735
			{ start: this.intervalStart, end: this.intervalEnd },                                                               // 6736
			this.opt('titleFormat') || this.computeTitleFormat(),                                                               // 6737
			this.opt('titleRangeSeparator')                                                                                     // 6738
		);                                                                                                                   // 6739
	},                                                                                                                    // 6740
                                                                                                                       // 6741
                                                                                                                       // 6742
	// Generates the format string that should be used to generate the title for the current date range.                  // 6743
	// Attempts to compute the most appropriate format if not explicitly specified with `titleFormat`.                    // 6744
	computeTitleFormat: function() {                                                                                      // 6745
		if (this.intervalUnit == 'year') {                                                                                   // 6746
			return 'YYYY';                                                                                                      // 6747
		}                                                                                                                    // 6748
		else if (this.intervalUnit == 'month') {                                                                             // 6749
			return this.opt('monthYearFormat'); // like "September 2014"                                                        // 6750
		}                                                                                                                    // 6751
		else if (this.intervalDuration.as('days') > 1) {                                                                     // 6752
			return 'll'; // multi-day range. shorter, like "Sep 9 - 10 2014"                                                    // 6753
		}                                                                                                                    // 6754
		else {                                                                                                               // 6755
			return 'LL'; // one day. longer, like "September 9 2014"                                                            // 6756
		}                                                                                                                    // 6757
	},                                                                                                                    // 6758
                                                                                                                       // 6759
                                                                                                                       // 6760
	// Utility for formatting a range. Accepts a range object, formatting string, and optional separator.                 // 6761
	// Displays all-day ranges naturally, with an inclusive end. Takes the current isRTL into account.                    // 6762
	formatRange: function(range, formatStr, separator) {                                                                  // 6763
		var end = range.end;                                                                                                 // 6764
                                                                                                                       // 6765
		if (!end.hasTime()) { // all-day?                                                                                    // 6766
			end = end.clone().subtract(1); // convert to inclusive. last ms of previous day                                     // 6767
		}                                                                                                                    // 6768
                                                                                                                       // 6769
		return formatRange(range.start, end, formatStr, separator, this.opt('isRTL'));                                       // 6770
	},                                                                                                                    // 6771
                                                                                                                       // 6772
                                                                                                                       // 6773
	/* Rendering                                                                                                          // 6774
	------------------------------------------------------------------------------------------------------------------*/  // 6775
                                                                                                                       // 6776
                                                                                                                       // 6777
	// Sets the container element that the view should render inside of.                                                  // 6778
	// Does other DOM-related initializations.                                                                            // 6779
	setElement: function(el) {                                                                                            // 6780
		this.el = el;                                                                                                        // 6781
		this.bindGlobalHandlers();                                                                                           // 6782
	},                                                                                                                    // 6783
                                                                                                                       // 6784
                                                                                                                       // 6785
	// Removes the view's container element from the DOM, clearing any content beforehand.                                // 6786
	// Undoes any other DOM-related attachments.                                                                          // 6787
	removeElement: function() {                                                                                           // 6788
		this.clear(); // clears all content                                                                                  // 6789
                                                                                                                       // 6790
		// clean up the skeleton                                                                                             // 6791
		if (this.isSkeletonRendered) {                                                                                       // 6792
			this.destroySkeleton();                                                                                             // 6793
			this.isSkeletonRendered = false;                                                                                    // 6794
		}                                                                                                                    // 6795
                                                                                                                       // 6796
		this.unbindGlobalHandlers();                                                                                         // 6797
                                                                                                                       // 6798
		this.el.remove();                                                                                                    // 6799
                                                                                                                       // 6800
		// NOTE: don't null-out this.el in case the View was destroyed within an API callback.                               // 6801
		// We don't null-out the View's other jQuery element references upon destroy, so why should we kill this.el?         // 6802
	},                                                                                                                    // 6803
                                                                                                                       // 6804
                                                                                                                       // 6805
	// Does everything necessary to display the view centered around the given date.                                      // 6806
	// Does every type of rendering EXCEPT rendering events.                                                              // 6807
	display: function(date) {                                                                                             // 6808
		var scrollState = null;                                                                                              // 6809
                                                                                                                       // 6810
		if (this.isDisplayed) {                                                                                              // 6811
			scrollState = this.queryScroll();                                                                                   // 6812
		}                                                                                                                    // 6813
                                                                                                                       // 6814
		this.clear(); // clear the old content                                                                               // 6815
		this.setDate(date);                                                                                                  // 6816
		this.render();                                                                                                       // 6817
		this.updateSize();                                                                                                   // 6818
		this.renderBusinessHours(); // might need coordinates, so should go after updateSize()                               // 6819
		this.isDisplayed = true;                                                                                             // 6820
                                                                                                                       // 6821
		scrollState = this.computeInitialScroll(scrollState);                                                                // 6822
		this.forceScroll(scrollState);                                                                                       // 6823
                                                                                                                       // 6824
		this.triggerRender();                                                                                                // 6825
	},                                                                                                                    // 6826
                                                                                                                       // 6827
                                                                                                                       // 6828
	// Does everything necessary to clear the content of the view.                                                        // 6829
	// Clears dates and events. Does not clear the skeleton.                                                              // 6830
	clear: function() { // clears the view of *content* but not the skeleton                                              // 6831
		if (this.isDisplayed) {                                                                                              // 6832
			this.unselect();                                                                                                    // 6833
			this.clearEvents();                                                                                                 // 6834
			this.triggerDestroy();                                                                                              // 6835
			this.destroyBusinessHours();                                                                                        // 6836
			this.destroy();                                                                                                     // 6837
			this.isDisplayed = false;                                                                                           // 6838
		}                                                                                                                    // 6839
	},                                                                                                                    // 6840
                                                                                                                       // 6841
                                                                                                                       // 6842
	// Renders the view's date-related content, rendering the view's non-content skeleton if necessary                    // 6843
	render: function() {                                                                                                  // 6844
		if (!this.isSkeletonRendered) {                                                                                      // 6845
			this.renderSkeleton();                                                                                              // 6846
			this.isSkeletonRendered = true;                                                                                     // 6847
		}                                                                                                                    // 6848
		this.renderDates();                                                                                                  // 6849
	},                                                                                                                    // 6850
                                                                                                                       // 6851
                                                                                                                       // 6852
	// Unrenders the view's date-related content.                                                                         // 6853
	// Call this instead of destroyDates directly in case the View subclass wants to use a render/destroy pattern         // 6854
	// where both the skeleton and the content always get rendered/unrendered together.                                   // 6855
	destroy: function() {                                                                                                 // 6856
		this.destroyDates();                                                                                                 // 6857
	},                                                                                                                    // 6858
                                                                                                                       // 6859
                                                                                                                       // 6860
	// Renders the basic structure of the view before any content is rendered                                             // 6861
	renderSkeleton: function() {                                                                                          // 6862
		// subclasses should implement                                                                                       // 6863
	},                                                                                                                    // 6864
                                                                                                                       // 6865
                                                                                                                       // 6866
	// Unrenders the basic structure of the view                                                                          // 6867
	destroySkeleton: function() {                                                                                         // 6868
		// subclasses should implement                                                                                       // 6869
	},                                                                                                                    // 6870
                                                                                                                       // 6871
                                                                                                                       // 6872
	// Renders the view's date-related content (like cells that represent days/times).                                    // 6873
	// Assumes setRange has already been called and the skeleton has already been rendered.                               // 6874
	renderDates: function() {                                                                                             // 6875
		// subclasses should implement                                                                                       // 6876
	},                                                                                                                    // 6877
                                                                                                                       // 6878
                                                                                                                       // 6879
	// Unrenders the view's date-related content                                                                          // 6880
	destroyDates: function() {                                                                                            // 6881
		// subclasses should override                                                                                        // 6882
	},                                                                                                                    // 6883
                                                                                                                       // 6884
                                                                                                                       // 6885
	// Renders business-hours onto the view. Assumes updateSize has already been called.                                  // 6886
	renderBusinessHours: function() {                                                                                     // 6887
		// subclasses should implement                                                                                       // 6888
	},                                                                                                                    // 6889
                                                                                                                       // 6890
                                                                                                                       // 6891
	// Unrenders previously-rendered business-hours                                                                       // 6892
	destroyBusinessHours: function() {                                                                                    // 6893
		// subclasses should implement                                                                                       // 6894
	},                                                                                                                    // 6895
                                                                                                                       // 6896
                                                                                                                       // 6897
	// Signals that the view's content has been rendered                                                                  // 6898
	triggerRender: function() {                                                                                           // 6899
		this.trigger('viewRender', this, this, this.el);                                                                     // 6900
	},                                                                                                                    // 6901
                                                                                                                       // 6902
                                                                                                                       // 6903
	// Signals that the view's content is about to be unrendered                                                          // 6904
	triggerDestroy: function() {                                                                                          // 6905
		this.trigger('viewDestroy', this, this, this.el);                                                                    // 6906
	},                                                                                                                    // 6907
                                                                                                                       // 6908
                                                                                                                       // 6909
	// Binds DOM handlers to elements that reside outside the view container, such as the document                        // 6910
	bindGlobalHandlers: function() {                                                                                      // 6911
		$(document).on('mousedown', this.documentMousedownProxy);                                                            // 6912
	},                                                                                                                    // 6913
                                                                                                                       // 6914
                                                                                                                       // 6915
	// Unbinds DOM handlers from elements that reside outside the view container                                          // 6916
	unbindGlobalHandlers: function() {                                                                                    // 6917
		$(document).off('mousedown', this.documentMousedownProxy);                                                           // 6918
	},                                                                                                                    // 6919
                                                                                                                       // 6920
                                                                                                                       // 6921
	// Initializes internal variables related to theming                                                                  // 6922
	initThemingProps: function() {                                                                                        // 6923
		var tm = this.opt('theme') ? 'ui' : 'fc';                                                                            // 6924
                                                                                                                       // 6925
		this.widgetHeaderClass = tm + '-widget-header';                                                                      // 6926
		this.widgetContentClass = tm + '-widget-content';                                                                    // 6927
		this.highlightStateClass = tm + '-state-highlight';                                                                  // 6928
	},                                                                                                                    // 6929
                                                                                                                       // 6930
                                                                                                                       // 6931
	/* Dimensions                                                                                                         // 6932
	------------------------------------------------------------------------------------------------------------------*/  // 6933
                                                                                                                       // 6934
                                                                                                                       // 6935
	// Refreshes anything dependant upon sizing of the container element of the grid                                      // 6936
	updateSize: function(isResize) {                                                                                      // 6937
		var scrollState;                                                                                                     // 6938
                                                                                                                       // 6939
		if (isResize) {                                                                                                      // 6940
			scrollState = this.queryScroll();                                                                                   // 6941
		}                                                                                                                    // 6942
                                                                                                                       // 6943
		this.updateHeight();                                                                                                 // 6944
		this.updateWidth();                                                                                                  // 6945
                                                                                                                       // 6946
		if (isResize) {                                                                                                      // 6947
			this.setScroll(scrollState);                                                                                        // 6948
		}                                                                                                                    // 6949
	},                                                                                                                    // 6950
                                                                                                                       // 6951
                                                                                                                       // 6952
	// Refreshes the horizontal dimensions of the calendar                                                                // 6953
	updateWidth: function() {                                                                                             // 6954
		// subclasses should implement                                                                                       // 6955
	},                                                                                                                    // 6956
                                                                                                                       // 6957
                                                                                                                       // 6958
	// Refreshes the vertical dimensions of the calendar                                                                  // 6959
	updateHeight: function() {                                                                                            // 6960
		var calendar = this.calendar; // we poll the calendar for height information                                         // 6961
                                                                                                                       // 6962
		this.setHeight(                                                                                                      // 6963
			calendar.getSuggestedViewHeight(),                                                                                  // 6964
			calendar.isHeightAuto()                                                                                             // 6965
		);                                                                                                                   // 6966
	},                                                                                                                    // 6967
                                                                                                                       // 6968
                                                                                                                       // 6969
	// Updates the vertical dimensions of the calendar to the specified height.                                           // 6970
	// if `isAuto` is set to true, height becomes merely a suggestion and the view should use its "natural" height.       // 6971
	setHeight: function(height, isAuto) {                                                                                 // 6972
		// subclasses should implement                                                                                       // 6973
	},                                                                                                                    // 6974
                                                                                                                       // 6975
                                                                                                                       // 6976
	/* Scroller                                                                                                           // 6977
	------------------------------------------------------------------------------------------------------------------*/  // 6978
                                                                                                                       // 6979
                                                                                                                       // 6980
	// Given the total height of the view, return the number of pixels that should be used for the scroller.              // 6981
	// Utility for subclasses.                                                                                            // 6982
	computeScrollerHeight: function(totalHeight) {                                                                        // 6983
		var scrollerEl = this.scrollerEl;                                                                                    // 6984
		var both;                                                                                                            // 6985
		var otherHeight; // cumulative height of everything that is not the scrollerEl in the view (header+borders)          // 6986
                                                                                                                       // 6987
		both = this.el.add(scrollerEl);                                                                                      // 6988
                                                                                                                       // 6989
		// fuckin IE8/9/10/11 sometimes returns 0 for dimensions. this weird hack was the only thing that worked             // 6990
		both.css({                                                                                                           // 6991
			position: 'relative', // cause a reflow, which will force fresh dimension recalculation                             // 6992
			left: -1 // ensure reflow in case the el was already relative. negative is less likely to cause new scroll          // 6993
		});                                                                                                                  // 6994
		otherHeight = this.el.outerHeight() - scrollerEl.height(); // grab the dimensions                                    // 6995
		both.css({ position: '', left: '' }); // undo hack                                                                   // 6996
                                                                                                                       // 6997
		return totalHeight - otherHeight;                                                                                    // 6998
	},                                                                                                                    // 6999
                                                                                                                       // 7000
                                                                                                                       // 7001
	// Computes the initial pre-configured scroll state prior to allowing the user to change it.                          // 7002
	// Given the scroll state from the previous rendering. If first time rendering, given null.                           // 7003
	computeInitialScroll: function(previousScrollState) {                                                                 // 7004
		return 0;                                                                                                            // 7005
	},                                                                                                                    // 7006
                                                                                                                       // 7007
                                                                                                                       // 7008
	// Retrieves the view's current natural scroll state. Can return an arbitrary format.                                 // 7009
	queryScroll: function() {                                                                                             // 7010
		if (this.scrollerEl) {                                                                                               // 7011
			return this.scrollerEl.scrollTop(); // operates on scrollerEl by default                                            // 7012
		}                                                                                                                    // 7013
	},                                                                                                                    // 7014
                                                                                                                       // 7015
                                                                                                                       // 7016
	// Sets the view's scroll state. Will accept the same format computeInitialScroll and queryScroll produce.            // 7017
	setScroll: function(scrollState) {                                                                                    // 7018
		if (this.scrollerEl) {                                                                                               // 7019
			return this.scrollerEl.scrollTop(scrollState); // operates on scrollerEl by default                                 // 7020
		}                                                                                                                    // 7021
	},                                                                                                                    // 7022
                                                                                                                       // 7023
                                                                                                                       // 7024
	// Sets the scroll state, making sure to overcome any predefined scroll value the browser has in mind                 // 7025
	forceScroll: function(scrollState) {                                                                                  // 7026
		var _this = this;                                                                                                    // 7027
                                                                                                                       // 7028
		this.setScroll(scrollState);                                                                                         // 7029
		setTimeout(function() {                                                                                              // 7030
			_this.setScroll(scrollState);                                                                                       // 7031
		}, 0);                                                                                                               // 7032
	},                                                                                                                    // 7033
                                                                                                                       // 7034
                                                                                                                       // 7035
	/* Event Elements / Segments                                                                                          // 7036
	------------------------------------------------------------------------------------------------------------------*/  // 7037
                                                                                                                       // 7038
                                                                                                                       // 7039
	// Does everything necessary to display the given events onto the current view                                        // 7040
	displayEvents: function(events) {                                                                                     // 7041
		var scrollState = this.queryScroll();                                                                                // 7042
                                                                                                                       // 7043
		this.clearEvents();                                                                                                  // 7044
		this.renderEvents(events);                                                                                           // 7045
		this.isEventsRendered = true;                                                                                        // 7046
		this.setScroll(scrollState);                                                                                         // 7047
		this.triggerEventRender();                                                                                           // 7048
	},                                                                                                                    // 7049
                                                                                                                       // 7050
                                                                                                                       // 7051
	// Does everything necessary to clear the view's currently-rendered events                                            // 7052
	clearEvents: function() {                                                                                             // 7053
		if (this.isEventsRendered) {                                                                                         // 7054
			this.triggerEventDestroy();                                                                                         // 7055
			this.destroyEvents();                                                                                               // 7056
			this.isEventsRendered = false;                                                                                      // 7057
		}                                                                                                                    // 7058
	},                                                                                                                    // 7059
                                                                                                                       // 7060
                                                                                                                       // 7061
	// Renders the events onto the view.                                                                                  // 7062
	renderEvents: function(events) {                                                                                      // 7063
		// subclasses should implement                                                                                       // 7064
	},                                                                                                                    // 7065
                                                                                                                       // 7066
                                                                                                                       // 7067
	// Removes event elements from the view.                                                                              // 7068
	destroyEvents: function() {                                                                                           // 7069
		// subclasses should implement                                                                                       // 7070
	},                                                                                                                    // 7071
                                                                                                                       // 7072
                                                                                                                       // 7073
	// Signals that all events have been rendered                                                                         // 7074
	triggerEventRender: function() {                                                                                      // 7075
		this.renderedEventSegEach(function(seg) {                                                                            // 7076
			this.trigger('eventAfterRender', seg.event, seg.event, seg.el);                                                     // 7077
		});                                                                                                                  // 7078
		this.trigger('eventAfterAllRender');                                                                                 // 7079
	},                                                                                                                    // 7080
                                                                                                                       // 7081
                                                                                                                       // 7082
	// Signals that all event elements are about to be removed                                                            // 7083
	triggerEventDestroy: function() {                                                                                     // 7084
		this.renderedEventSegEach(function(seg) {                                                                            // 7085
			this.trigger('eventDestroy', seg.event, seg.event, seg.el);                                                         // 7086
		});                                                                                                                  // 7087
	},                                                                                                                    // 7088
                                                                                                                       // 7089
                                                                                                                       // 7090
	// Given an event and the default element used for rendering, returns the element that should actually be used.       // 7091
	// Basically runs events and elements through the eventRender hook.                                                   // 7092
	resolveEventEl: function(event, el) {                                                                                 // 7093
		var custom = this.trigger('eventRender', event, event, el);                                                          // 7094
                                                                                                                       // 7095
		if (custom === false) { // means don't render at all                                                                 // 7096
			el = null;                                                                                                          // 7097
		}                                                                                                                    // 7098
		else if (custom && custom !== true) {                                                                                // 7099
			el = $(custom);                                                                                                     // 7100
		}                                                                                                                    // 7101
                                                                                                                       // 7102
		return el;                                                                                                           // 7103
	},                                                                                                                    // 7104
                                                                                                                       // 7105
                                                                                                                       // 7106
	// Hides all rendered event segments linked to the given event                                                        // 7107
	showEvent: function(event) {                                                                                          // 7108
		this.renderedEventSegEach(function(seg) {                                                                            // 7109
			seg.el.css('visibility', '');                                                                                       // 7110
		}, event);                                                                                                           // 7111
	},                                                                                                                    // 7112
                                                                                                                       // 7113
                                                                                                                       // 7114
	// Shows all rendered event segments linked to the given event                                                        // 7115
	hideEvent: function(event) {                                                                                          // 7116
		this.renderedEventSegEach(function(seg) {                                                                            // 7117
			seg.el.css('visibility', 'hidden');                                                                                 // 7118
		}, event);                                                                                                           // 7119
	},                                                                                                                    // 7120
                                                                                                                       // 7121
                                                                                                                       // 7122
	// Iterates through event segments that have been rendered (have an el). Goes through all by default.                 // 7123
	// If the optional `event` argument is specified, only iterates through segments linked to that event.                // 7124
	// The `this` value of the callback function will be the view.                                                        // 7125
	renderedEventSegEach: function(func, event) {                                                                         // 7126
		var segs = this.getEventSegs();                                                                                      // 7127
		var i;                                                                                                               // 7128
                                                                                                                       // 7129
		for (i = 0; i < segs.length; i++) {                                                                                  // 7130
			if (!event || segs[i].event._id === event._id) {                                                                    // 7131
				if (segs[i].el) {                                                                                                  // 7132
					func.call(this, segs[i]);                                                                                         // 7133
				}                                                                                                                  // 7134
			}                                                                                                                   // 7135
		}                                                                                                                    // 7136
	},                                                                                                                    // 7137
                                                                                                                       // 7138
                                                                                                                       // 7139
	// Retrieves all the rendered segment objects for the view                                                            // 7140
	getEventSegs: function() {                                                                                            // 7141
		// subclasses must implement                                                                                         // 7142
		return [];                                                                                                           // 7143
	},                                                                                                                    // 7144
                                                                                                                       // 7145
                                                                                                                       // 7146
	/* Event Drag-n-Drop                                                                                                  // 7147
	------------------------------------------------------------------------------------------------------------------*/  // 7148
                                                                                                                       // 7149
                                                                                                                       // 7150
	// Computes if the given event is allowed to be dragged by the user                                                   // 7151
	isEventDraggable: function(event) {                                                                                   // 7152
		var source = event.source || {};                                                                                     // 7153
                                                                                                                       // 7154
		return firstDefined(                                                                                                 // 7155
			event.startEditable,                                                                                                // 7156
			source.startEditable,                                                                                               // 7157
			this.opt('eventStartEditable'),                                                                                     // 7158
			event.editable,                                                                                                     // 7159
			source.editable,                                                                                                    // 7160
			this.opt('editable')                                                                                                // 7161
		);                                                                                                                   // 7162
	},                                                                                                                    // 7163
                                                                                                                       // 7164
                                                                                                                       // 7165
	// Must be called when an event in the view is dropped onto new location.                                             // 7166
	// `dropLocation` is an object that contains the new start/end/allDay values for the event.                           // 7167
	reportEventDrop: function(event, dropLocation, largeUnit, el, ev) {                                                   // 7168
		var calendar = this.calendar;                                                                                        // 7169
		var mutateResult = calendar.mutateEvent(event, dropLocation, largeUnit);                                             // 7170
		var undoFunc = function() {                                                                                          // 7171
			mutateResult.undo();                                                                                                // 7172
			calendar.reportEventChange();                                                                                       // 7173
		};                                                                                                                   // 7174
                                                                                                                       // 7175
		this.triggerEventDrop(event, mutateResult.dateDelta, undoFunc, el, ev);                                              // 7176
		calendar.reportEventChange(); // will rerender events                                                                // 7177
	},                                                                                                                    // 7178
                                                                                                                       // 7179
                                                                                                                       // 7180
	// Triggers event-drop handlers that have subscribed via the API                                                      // 7181
	triggerEventDrop: function(event, dateDelta, undoFunc, el, ev) {                                                      // 7182
		this.trigger('eventDrop', el[0], event, dateDelta, undoFunc, ev, {}); // {} = jqui dummy                             // 7183
	},                                                                                                                    // 7184
                                                                                                                       // 7185
                                                                                                                       // 7186
	/* External Element Drag-n-Drop                                                                                       // 7187
	------------------------------------------------------------------------------------------------------------------*/  // 7188
                                                                                                                       // 7189
                                                                                                                       // 7190
	// Must be called when an external element, via jQuery UI, has been dropped onto the calendar.                        // 7191
	// `meta` is the parsed data that has been embedded into the dragging event.                                          // 7192
	// `dropLocation` is an object that contains the new start/end/allDay values for the event.                           // 7193
	reportExternalDrop: function(meta, dropLocation, el, ev, ui) {                                                        // 7194
		var eventProps = meta.eventProps;                                                                                    // 7195
		var eventInput;                                                                                                      // 7196
		var event;                                                                                                           // 7197
                                                                                                                       // 7198
		// Try to build an event object and render it. TODO: decouple the two                                                // 7199
		if (eventProps) {                                                                                                    // 7200
			eventInput = $.extend({}, eventProps, dropLocation);                                                                // 7201
			event = this.calendar.renderEvent(eventInput, meta.stick)[0]; // renderEvent returns an array                       // 7202
		}                                                                                                                    // 7203
                                                                                                                       // 7204
		this.triggerExternalDrop(event, dropLocation, el, ev, ui);                                                           // 7205
	},                                                                                                                    // 7206
                                                                                                                       // 7207
                                                                                                                       // 7208
	// Triggers external-drop handlers that have subscribed via the API                                                   // 7209
	triggerExternalDrop: function(event, dropLocation, el, ev, ui) {                                                      // 7210
                                                                                                                       // 7211
		// trigger 'drop' regardless of whether element represents an event                                                  // 7212
		this.trigger('drop', el[0], dropLocation.start, ev, ui);                                                             // 7213
                                                                                                                       // 7214
		if (event) {                                                                                                         // 7215
			this.trigger('eventReceive', null, event); // signal an external event landed                                       // 7216
		}                                                                                                                    // 7217
	},                                                                                                                    // 7218
                                                                                                                       // 7219
                                                                                                                       // 7220
	/* Drag-n-Drop Rendering (for both events and external elements)                                                      // 7221
	------------------------------------------------------------------------------------------------------------------*/  // 7222
                                                                                                                       // 7223
                                                                                                                       // 7224
	// Renders a visual indication of a event or external-element drag over the given drop zone.                          // 7225
	// If an external-element, seg will be `null`                                                                         // 7226
	renderDrag: function(dropLocation, seg) {                                                                             // 7227
		// subclasses must implement                                                                                         // 7228
	},                                                                                                                    // 7229
                                                                                                                       // 7230
                                                                                                                       // 7231
	// Unrenders a visual indication of an event or external-element being dragged.                                       // 7232
	destroyDrag: function() {                                                                                             // 7233
		// subclasses must implement                                                                                         // 7234
	},                                                                                                                    // 7235
                                                                                                                       // 7236
                                                                                                                       // 7237
	/* Event Resizing                                                                                                     // 7238
	------------------------------------------------------------------------------------------------------------------*/  // 7239
                                                                                                                       // 7240
                                                                                                                       // 7241
	// Computes if the given event is allowed to be resized from its starting edge                                        // 7242
	isEventResizableFromStart: function(event) {                                                                          // 7243
		return this.opt('eventResizableFromStart') && this.isEventResizable(event);                                          // 7244
	},                                                                                                                    // 7245
                                                                                                                       // 7246
                                                                                                                       // 7247
	// Computes if the given event is allowed to be resized from its ending edge                                          // 7248
	isEventResizableFromEnd: function(event) {                                                                            // 7249
		return this.isEventResizable(event);                                                                                 // 7250
	},                                                                                                                    // 7251
                                                                                                                       // 7252
                                                                                                                       // 7253
	// Computes if the given event is allowed to be resized by the user at all                                            // 7254
	isEventResizable: function(event) {                                                                                   // 7255
		var source = event.source || {};                                                                                     // 7256
                                                                                                                       // 7257
		return firstDefined(                                                                                                 // 7258
			event.durationEditable,                                                                                             // 7259
			source.durationEditable,                                                                                            // 7260
			this.opt('eventDurationEditable'),                                                                                  // 7261
			event.editable,                                                                                                     // 7262
			source.editable,                                                                                                    // 7263
			this.opt('editable')                                                                                                // 7264
		);                                                                                                                   // 7265
	},                                                                                                                    // 7266
                                                                                                                       // 7267
                                                                                                                       // 7268
	// Must be called when an event in the view has been resized to a new length                                          // 7269
	reportEventResize: function(event, resizeLocation, largeUnit, el, ev) {                                               // 7270
		var calendar = this.calendar;                                                                                        // 7271
		var mutateResult = calendar.mutateEvent(event, resizeLocation, largeUnit);                                           // 7272
		var undoFunc = function() {                                                                                          // 7273
			mutateResult.undo();                                                                                                // 7274
			calendar.reportEventChange();                                                                                       // 7275
		};                                                                                                                   // 7276
                                                                                                                       // 7277
		this.triggerEventResize(event, mutateResult.durationDelta, undoFunc, el, ev);                                        // 7278
		calendar.reportEventChange(); // will rerender events                                                                // 7279
	},                                                                                                                    // 7280
                                                                                                                       // 7281
                                                                                                                       // 7282
	// Triggers event-resize handlers that have subscribed via the API                                                    // 7283
	triggerEventResize: function(event, durationDelta, undoFunc, el, ev) {                                                // 7284
		this.trigger('eventResize', el[0], event, durationDelta, undoFunc, ev, {}); // {} = jqui dummy                       // 7285
	},                                                                                                                    // 7286
                                                                                                                       // 7287
                                                                                                                       // 7288
	/* Selection                                                                                                          // 7289
	------------------------------------------------------------------------------------------------------------------*/  // 7290
                                                                                                                       // 7291
                                                                                                                       // 7292
	// Selects a date range on the view. `start` and `end` are both Moments.                                              // 7293
	// `ev` is the native mouse event that begin the interaction.                                                         // 7294
	select: function(range, ev) {                                                                                         // 7295
		this.unselect(ev);                                                                                                   // 7296
		this.renderSelection(range);                                                                                         // 7297
		this.reportSelection(range, ev);                                                                                     // 7298
	},                                                                                                                    // 7299
                                                                                                                       // 7300
                                                                                                                       // 7301
	// Renders a visual indication of the selection                                                                       // 7302
	renderSelection: function(range) {                                                                                    // 7303
		// subclasses should implement                                                                                       // 7304
	},                                                                                                                    // 7305
                                                                                                                       // 7306
                                                                                                                       // 7307
	// Called when a new selection is made. Updates internal state and triggers handlers.                                 // 7308
	reportSelection: function(range, ev) {                                                                                // 7309
		this.isSelected = true;                                                                                              // 7310
		this.trigger('select', null, range.start, range.end, ev);                                                            // 7311
	},                                                                                                                    // 7312
                                                                                                                       // 7313
                                                                                                                       // 7314
	// Undoes a selection. updates in the internal state and triggers handlers.                                           // 7315
	// `ev` is the native mouse event that began the interaction.                                                         // 7316
	unselect: function(ev) {                                                                                              // 7317
		if (this.isSelected) {                                                                                               // 7318
			this.isSelected = false;                                                                                            // 7319
			this.destroySelection();                                                                                            // 7320
			this.trigger('unselect', null, ev);                                                                                 // 7321
		}                                                                                                                    // 7322
	},                                                                                                                    // 7323
                                                                                                                       // 7324
                                                                                                                       // 7325
	// Unrenders a visual indication of selection                                                                         // 7326
	destroySelection: function() {                                                                                        // 7327
		// subclasses should implement                                                                                       // 7328
	},                                                                                                                    // 7329
                                                                                                                       // 7330
                                                                                                                       // 7331
	// Handler for unselecting when the user clicks something and the 'unselectAuto' setting is on                        // 7332
	documentMousedown: function(ev) {                                                                                     // 7333
		var ignore;                                                                                                          // 7334
                                                                                                                       // 7335
		// is there a selection, and has the user made a proper left click?                                                  // 7336
		if (this.isSelected && this.opt('unselectAuto') && isPrimaryMouseButton(ev)) {                                       // 7337
                                                                                                                       // 7338
			// only unselect if the clicked element is not identical to or inside of an 'unselectCancel' element                // 7339
			ignore = this.opt('unselectCancel');                                                                                // 7340
			if (!ignore || !$(ev.target).closest(ignore).length) {                                                              // 7341
				this.unselect(ev);                                                                                                 // 7342
			}                                                                                                                   // 7343
		}                                                                                                                    // 7344
	},                                                                                                                    // 7345
                                                                                                                       // 7346
                                                                                                                       // 7347
	/* Date Utils                                                                                                         // 7348
	------------------------------------------------------------------------------------------------------------------*/  // 7349
                                                                                                                       // 7350
                                                                                                                       // 7351
	// Initializes internal variables related to calculating hidden days-of-week                                          // 7352
	initHiddenDays: function() {                                                                                          // 7353
		var hiddenDays = this.opt('hiddenDays') || []; // array of day-of-week indices that are hidden                       // 7354
		var isHiddenDayHash = []; // is the day-of-week hidden? (hash with day-of-week-index -> bool)                        // 7355
		var dayCnt = 0;                                                                                                      // 7356
		var i;                                                                                                               // 7357
                                                                                                                       // 7358
		if (this.opt('weekends') === false) {                                                                                // 7359
			hiddenDays.push(0, 6); // 0=sunday, 6=saturday                                                                      // 7360
		}                                                                                                                    // 7361
                                                                                                                       // 7362
		for (i = 0; i < 7; i++) {                                                                                            // 7363
			if (                                                                                                                // 7364
				!(isHiddenDayHash[i] = $.inArray(i, hiddenDays) !== -1)                                                            // 7365
			) {                                                                                                                 // 7366
				dayCnt++;                                                                                                          // 7367
			}                                                                                                                   // 7368
		}                                                                                                                    // 7369
                                                                                                                       // 7370
		if (!dayCnt) {                                                                                                       // 7371
			throw 'invalid hiddenDays'; // all days were hidden? bad.                                                           // 7372
		}                                                                                                                    // 7373
                                                                                                                       // 7374
		this.isHiddenDayHash = isHiddenDayHash;                                                                              // 7375
	},                                                                                                                    // 7376
                                                                                                                       // 7377
                                                                                                                       // 7378
	// Is the current day hidden?                                                                                         // 7379
	// `day` is a day-of-week index (0-6), or a Moment                                                                    // 7380
	isHiddenDay: function(day) {                                                                                          // 7381
		if (moment.isMoment(day)) {                                                                                          // 7382
			day = day.day();                                                                                                    // 7383
		}                                                                                                                    // 7384
		return this.isHiddenDayHash[day];                                                                                    // 7385
	},                                                                                                                    // 7386
                                                                                                                       // 7387
                                                                                                                       // 7388
	// Incrementing the current day until it is no longer a hidden day, returning a copy.                                 // 7389
	// If the initial value of `date` is not a hidden day, don't do anything.                                             // 7390
	// Pass `isExclusive` as `true` if you are dealing with an end date.                                                  // 7391
	// `inc` defaults to `1` (increment one day forward each time)                                                        // 7392
	skipHiddenDays: function(date, inc, isExclusive) {                                                                    // 7393
		var out = date.clone();                                                                                              // 7394
		inc = inc || 1;                                                                                                      // 7395
		while (                                                                                                              // 7396
			this.isHiddenDayHash[(out.day() + (isExclusive ? inc : 0) + 7) % 7]                                                 // 7397
		) {                                                                                                                  // 7398
			out.add(inc, 'days');                                                                                               // 7399
		}                                                                                                                    // 7400
		return out;                                                                                                          // 7401
	},                                                                                                                    // 7402
                                                                                                                       // 7403
                                                                                                                       // 7404
	// Returns the date range of the full days the given range visually appears to occupy.                                // 7405
	// Returns a new range object.                                                                                        // 7406
	computeDayRange: function(range) {                                                                                    // 7407
		var startDay = range.start.clone().stripTime(); // the beginning of the day the range starts                         // 7408
		var end = range.end;                                                                                                 // 7409
		var endDay = null;                                                                                                   // 7410
		var endTimeMS;                                                                                                       // 7411
                                                                                                                       // 7412
		if (end) {                                                                                                           // 7413
			endDay = end.clone().stripTime(); // the beginning of the day the range exclusively ends                            // 7414
			endTimeMS = +end.time(); // # of milliseconds into `endDay`                                                         // 7415
                                                                                                                       // 7416
			// If the end time is actually inclusively part of the next day and is equal to or                                  // 7417
			// beyond the next day threshold, adjust the end to be the exclusive end of `endDay`.                               // 7418
			// Otherwise, leaving it as inclusive will cause it to exclude `endDay`.                                            // 7419
			if (endTimeMS && endTimeMS >= this.nextDayThreshold) {                                                              // 7420
				endDay.add(1, 'days');                                                                                             // 7421
			}                                                                                                                   // 7422
		}                                                                                                                    // 7423
                                                                                                                       // 7424
		// If no end was specified, or if it is within `startDay` but not past nextDayThreshold,                             // 7425
		// assign the default duration of one day.                                                                           // 7426
		if (!end || endDay <= startDay) {                                                                                    // 7427
			endDay = startDay.clone().add(1, 'days');                                                                           // 7428
		}                                                                                                                    // 7429
                                                                                                                       // 7430
		return { start: startDay, end: endDay };                                                                             // 7431
	},                                                                                                                    // 7432
                                                                                                                       // 7433
                                                                                                                       // 7434
	// Does the given event visually appear to occupy more than one day?                                                  // 7435
	isMultiDayEvent: function(event) {                                                                                    // 7436
		var range = this.computeDayRange(event); // event is range-ish                                                       // 7437
                                                                                                                       // 7438
		return range.end.diff(range.start, 'days') > 1;                                                                      // 7439
	}                                                                                                                     // 7440
                                                                                                                       // 7441
});                                                                                                                    // 7442
                                                                                                                       // 7443
;;                                                                                                                     // 7444
                                                                                                                       // 7445
var Calendar = fc.Calendar = fc.CalendarBase = Class.extend({                                                          // 7446
                                                                                                                       // 7447
	dirDefaults: null, // option defaults related to LTR or RTL                                                           // 7448
	langDefaults: null, // option defaults related to current locale                                                      // 7449
	overrides: null, // option overrides given to the fullCalendar constructor                                            // 7450
	options: null, // all defaults combined with overrides                                                                // 7451
	viewSpecCache: null, // cache of view definitions                                                                     // 7452
	view: null, // current View object                                                                                    // 7453
	header: null,                                                                                                         // 7454
                                                                                                                       // 7455
                                                                                                                       // 7456
	// a lot of this class' OOP logic is scoped within this constructor function,                                         // 7457
	// but in the future, write individual methods on the prototype.                                                      // 7458
	constructor: Calendar_constructor,                                                                                    // 7459
                                                                                                                       // 7460
                                                                                                                       // 7461
	// Initializes `this.options` and other important options-related objects                                             // 7462
	initOptions: function(overrides) {                                                                                    // 7463
		var lang, langDefaults;                                                                                              // 7464
		var isRTL, dirDefaults;                                                                                              // 7465
                                                                                                                       // 7466
		// converts legacy options into non-legacy ones.                                                                     // 7467
		// in the future, when this is removed, don't use `overrides` reference. make a copy.                                // 7468
		overrides = massageOverrides(overrides);                                                                             // 7469
                                                                                                                       // 7470
		lang = overrides.lang;                                                                                               // 7471
		langDefaults = langOptionHash[lang];                                                                                 // 7472
		if (!langDefaults) {                                                                                                 // 7473
			lang = Calendar.defaults.lang;                                                                                      // 7474
			langDefaults = langOptionHash[lang] || {};                                                                          // 7475
		}                                                                                                                    // 7476
                                                                                                                       // 7477
		isRTL = firstDefined(                                                                                                // 7478
			overrides.isRTL,                                                                                                    // 7479
			langDefaults.isRTL,                                                                                                 // 7480
			Calendar.defaults.isRTL                                                                                             // 7481
		);                                                                                                                   // 7482
		dirDefaults = isRTL ? Calendar.rtlDefaults : {};                                                                     // 7483
                                                                                                                       // 7484
		this.dirDefaults = dirDefaults;                                                                                      // 7485
		this.langDefaults = langDefaults;                                                                                    // 7486
		this.overrides = overrides;                                                                                          // 7487
		this.options = mergeOptions( // merge defaults and overrides. lowest to highest precedence                           // 7488
			Calendar.defaults, // global defaults                                                                               // 7489
			dirDefaults,                                                                                                        // 7490
			langDefaults,                                                                                                       // 7491
			overrides                                                                                                           // 7492
		);                                                                                                                   // 7493
		populateInstanceComputableOptions(this.options);                                                                     // 7494
                                                                                                                       // 7495
		this.viewSpecCache = {}; // somewhat unrelated                                                                       // 7496
	},                                                                                                                    // 7497
                                                                                                                       // 7498
                                                                                                                       // 7499
	// Gets information about how to create a view. Will use a cache.                                                     // 7500
	getViewSpec: function(viewType) {                                                                                     // 7501
		var cache = this.viewSpecCache;                                                                                      // 7502
                                                                                                                       // 7503
		return cache[viewType] || (cache[viewType] = this.buildViewSpec(viewType));                                          // 7504
	},                                                                                                                    // 7505
                                                                                                                       // 7506
                                                                                                                       // 7507
	// Given a duration singular unit, like "week" or "day", finds a matching view spec.                                  // 7508
	// Preference is given to views that have corresponding buttons.                                                      // 7509
	getUnitViewSpec: function(unit) {                                                                                     // 7510
		var viewTypes;                                                                                                       // 7511
		var i;                                                                                                               // 7512
		var spec;                                                                                                            // 7513
                                                                                                                       // 7514
		if ($.inArray(unit, intervalUnits) != -1) {                                                                          // 7515
                                                                                                                       // 7516
			// put views that have buttons first. there will be duplicates, but oh well                                         // 7517
			viewTypes = this.header.getViewsWithButtons();                                                                      // 7518
			$.each(fc.views, function(viewType) { // all views                                                                  // 7519
				viewTypes.push(viewType);                                                                                          // 7520
			});                                                                                                                 // 7521
                                                                                                                       // 7522
			for (i = 0; i < viewTypes.length; i++) {                                                                            // 7523
				spec = this.getViewSpec(viewTypes[i]);                                                                             // 7524
				if (spec) {                                                                                                        // 7525
					if (spec.singleUnit == unit) {                                                                                    // 7526
						return spec;                                                                                                     // 7527
					}                                                                                                                 // 7528
				}                                                                                                                  // 7529
			}                                                                                                                   // 7530
		}                                                                                                                    // 7531
	},                                                                                                                    // 7532
                                                                                                                       // 7533
                                                                                                                       // 7534
	// Builds an object with information on how to create a given view                                                    // 7535
	buildViewSpec: function(requestedViewType) {                                                                          // 7536
		var viewOverrides = this.overrides.views || {};                                                                      // 7537
		var defaultsChain = []; // for the view. lowest to highest priority                                                  // 7538
		var overridesChain = []; // for the view. lowest to highest priority                                                 // 7539
		var viewType = requestedViewType;                                                                                    // 7540
		var viewClass;                                                                                                       // 7541
		var defaults; // for the view                                                                                        // 7542
		var overrides; // for the view                                                                                       // 7543
		var duration;                                                                                                        // 7544
		var unit;                                                                                                            // 7545
		var spec;                                                                                                            // 7546
                                                                                                                       // 7547
		// iterate from the specific view definition to a more general one until we hit an actual View class                 // 7548
		while (viewType && !viewClass) {                                                                                     // 7549
			defaults = fcViews[viewType] || {};                                                                                 // 7550
			overrides = viewOverrides[viewType] || {};                                                                          // 7551
			duration = duration || overrides.duration || defaults.duration;                                                     // 7552
			viewType = overrides.type || defaults.type; // for next iteration                                                   // 7553
                                                                                                                       // 7554
			if (typeof defaults === 'function') { // a class                                                                    // 7555
				viewClass = defaults;                                                                                              // 7556
				defaultsChain.unshift(viewClass.defaults || {});                                                                   // 7557
			}                                                                                                                   // 7558
			else { // an options object                                                                                         // 7559
				defaultsChain.unshift(defaults);                                                                                   // 7560
			}                                                                                                                   // 7561
			overridesChain.unshift(overrides);                                                                                  // 7562
		}                                                                                                                    // 7563
                                                                                                                       // 7564
		if (viewClass) {                                                                                                     // 7565
			spec = { 'class': viewClass, type: requestedViewType };                                                             // 7566
                                                                                                                       // 7567
			if (duration) {                                                                                                     // 7568
				duration = moment.duration(duration);                                                                              // 7569
				if (!duration.valueOf()) { // invalid?                                                                             // 7570
					duration = null;                                                                                                  // 7571
				}                                                                                                                  // 7572
			}                                                                                                                   // 7573
			if (duration) {                                                                                                     // 7574
				spec.duration = duration;                                                                                          // 7575
				unit = computeIntervalUnit(duration);                                                                              // 7576
                                                                                                                       // 7577
				// view is a single-unit duration, like "week" or "day"                                                            // 7578
				// incorporate options for this. lowest priority                                                                   // 7579
				if (duration.as(unit) === 1) {                                                                                     // 7580
					spec.singleUnit = unit;                                                                                           // 7581
					overridesChain.unshift(viewOverrides[unit] || {});                                                                // 7582
				}                                                                                                                  // 7583
			}                                                                                                                   // 7584
                                                                                                                       // 7585
			// collapse into single objects                                                                                     // 7586
			spec.defaults = mergeOptions.apply(null, defaultsChain);                                                            // 7587
			spec.overrides = mergeOptions.apply(null, overridesChain);                                                          // 7588
                                                                                                                       // 7589
			this.buildViewSpecOptions(spec);                                                                                    // 7590
			this.buildViewSpecButtonText(spec, requestedViewType);                                                              // 7591
                                                                                                                       // 7592
			return spec;                                                                                                        // 7593
		}                                                                                                                    // 7594
	},                                                                                                                    // 7595
                                                                                                                       // 7596
                                                                                                                       // 7597
	// Builds and assigns a view spec's options object from its already-assigned defaults and overrides                   // 7598
	buildViewSpecOptions: function(spec) {                                                                                // 7599
		spec.options = mergeOptions( // lowest to highest priority                                                           // 7600
			Calendar.defaults, // global defaults                                                                               // 7601
			spec.defaults, // view's defaults (from ViewSubclass.defaults)                                                      // 7602
			this.dirDefaults,                                                                                                   // 7603
			this.langDefaults, // locale and dir take precedence over view's defaults!                                          // 7604
			this.overrides, // calendar's overrides (options given to constructor)                                              // 7605
			spec.overrides // view's overrides (view-specific options)                                                          // 7606
		);                                                                                                                   // 7607
		populateInstanceComputableOptions(spec.options);                                                                     // 7608
	},                                                                                                                    // 7609
                                                                                                                       // 7610
                                                                                                                       // 7611
	// Computes and assigns a view spec's buttonText-related options                                                      // 7612
	buildViewSpecButtonText: function(spec, requestedViewType) {                                                          // 7613
                                                                                                                       // 7614
		// given an options object with a possible `buttonText` hash, lookup the buttonText for the                          // 7615
		// requested view, falling back to a generic unit entry like "week" or "day"                                         // 7616
		function queryButtonText(options) {                                                                                  // 7617
			var buttonText = options.buttonText || {};                                                                          // 7618
			return buttonText[requestedViewType] ||                                                                             // 7619
				(spec.singleUnit ? buttonText[spec.singleUnit] : null);                                                            // 7620
		}                                                                                                                    // 7621
                                                                                                                       // 7622
		// highest to lowest priority                                                                                        // 7623
		spec.buttonTextOverride =                                                                                            // 7624
			queryButtonText(this.overrides) || // constructor-specified buttonText lookup hash takes precedence                 // 7625
			spec.overrides.buttonText; // `buttonText` for view-specific options is a string                                    // 7626
                                                                                                                       // 7627
		// highest to lowest priority. mirrors buildViewSpecOptions                                                          // 7628
		spec.buttonTextDefault =                                                                                             // 7629
			queryButtonText(this.langDefaults) ||                                                                               // 7630
			queryButtonText(this.dirDefaults) ||                                                                                // 7631
			spec.defaults.buttonText || // a single string. from ViewSubclass.defaults                                          // 7632
			queryButtonText(Calendar.defaults) ||                                                                               // 7633
			(spec.duration ? this.humanizeDuration(spec.duration) : null) || // like "3 days"                                   // 7634
			requestedViewType; // fall back to given view name                                                                  // 7635
	},                                                                                                                    // 7636
                                                                                                                       // 7637
                                                                                                                       // 7638
	// Given a view name for a custom view or a standard view, creates a ready-to-go View object                          // 7639
	instantiateView: function(viewType) {                                                                                 // 7640
		var spec = this.getViewSpec(viewType);                                                                               // 7641
                                                                                                                       // 7642
		return new spec['class'](this, viewType, spec.options, spec.duration);                                               // 7643
	},                                                                                                                    // 7644
                                                                                                                       // 7645
                                                                                                                       // 7646
	// Returns a boolean about whether the view is okay to instantiate at some point                                      // 7647
	isValidViewType: function(viewType) {                                                                                 // 7648
		return Boolean(this.getViewSpec(viewType));                                                                          // 7649
	}                                                                                                                     // 7650
                                                                                                                       // 7651
});                                                                                                                    // 7652
                                                                                                                       // 7653
                                                                                                                       // 7654
function Calendar_constructor(element, overrides) {                                                                    // 7655
	var t = this;                                                                                                         // 7656
                                                                                                                       // 7657
                                                                                                                       // 7658
	t.initOptions(overrides || {});                                                                                       // 7659
	var options = this.options;                                                                                           // 7660
                                                                                                                       // 7661
	                                                                                                                      // 7662
	// Exports                                                                                                            // 7663
	// -----------------------------------------------------------------------------------                                // 7664
                                                                                                                       // 7665
	t.render = render;                                                                                                    // 7666
	t.destroy = destroy;                                                                                                  // 7667
	t.refetchEvents = refetchEvents;                                                                                      // 7668
	t.reportEvents = reportEvents;                                                                                        // 7669
	t.reportEventChange = reportEventChange;                                                                              // 7670
	t.rerenderEvents = renderEvents; // `renderEvents` serves as a rerender. an API method                                // 7671
	t.changeView = renderView; // `renderView` will switch to another view                                                // 7672
	t.select = select;                                                                                                    // 7673
	t.unselect = unselect;                                                                                                // 7674
	t.prev = prev;                                                                                                        // 7675
	t.next = next;                                                                                                        // 7676
	t.prevYear = prevYear;                                                                                                // 7677
	t.nextYear = nextYear;                                                                                                // 7678
	t.today = today;                                                                                                      // 7679
	t.gotoDate = gotoDate;                                                                                                // 7680
	t.incrementDate = incrementDate;                                                                                      // 7681
	t.zoomTo = zoomTo;                                                                                                    // 7682
	t.getDate = getDate;                                                                                                  // 7683
	t.getCalendar = getCalendar;                                                                                          // 7684
	t.getView = getView;                                                                                                  // 7685
	t.option = option;                                                                                                    // 7686
	t.trigger = trigger;                                                                                                  // 7687
                                                                                                                       // 7688
                                                                                                                       // 7689
                                                                                                                       // 7690
	// Language-data Internals                                                                                            // 7691
	// -----------------------------------------------------------------------------------                                // 7692
	// Apply overrides to the current language's data                                                                     // 7693
                                                                                                                       // 7694
                                                                                                                       // 7695
	var localeData = createObject( // make a cheap copy                                                                   // 7696
		getMomentLocaleData(options.lang) // will fall back to en                                                            // 7697
	);                                                                                                                    // 7698
                                                                                                                       // 7699
	if (options.monthNames) {                                                                                             // 7700
		localeData._months = options.monthNames;                                                                             // 7701
	}                                                                                                                     // 7702
	if (options.monthNamesShort) {                                                                                        // 7703
		localeData._monthsShort = options.monthNamesShort;                                                                   // 7704
	}                                                                                                                     // 7705
	if (options.dayNames) {                                                                                               // 7706
		localeData._weekdays = options.dayNames;                                                                             // 7707
	}                                                                                                                     // 7708
	if (options.dayNamesShort) {                                                                                          // 7709
		localeData._weekdaysShort = options.dayNamesShort;                                                                   // 7710
	}                                                                                                                     // 7711
	if (options.firstDay != null) {                                                                                       // 7712
		var _week = createObject(localeData._week); // _week: { dow: # }                                                     // 7713
		_week.dow = options.firstDay;                                                                                        // 7714
		localeData._week = _week;                                                                                            // 7715
	}                                                                                                                     // 7716
                                                                                                                       // 7717
	// assign a normalized value, to be used by our .week() moment extension                                              // 7718
	localeData._fullCalendar_weekCalc = (function(weekCalc) {                                                             // 7719
		if (typeof weekCalc === 'function') {                                                                                // 7720
			return weekCalc;                                                                                                    // 7721
		}                                                                                                                    // 7722
		else if (weekCalc === 'local') {                                                                                     // 7723
			return weekCalc;                                                                                                    // 7724
		}                                                                                                                    // 7725
		else if (weekCalc === 'iso' || weekCalc === 'ISO') {                                                                 // 7726
			return 'ISO';                                                                                                       // 7727
		}                                                                                                                    // 7728
	})(options.weekNumberCalculation);                                                                                    // 7729
                                                                                                                       // 7730
                                                                                                                       // 7731
                                                                                                                       // 7732
	// Calendar-specific Date Utilities                                                                                   // 7733
	// -----------------------------------------------------------------------------------                                // 7734
                                                                                                                       // 7735
                                                                                                                       // 7736
	t.defaultAllDayEventDuration = moment.duration(options.defaultAllDayEventDuration);                                   // 7737
	t.defaultTimedEventDuration = moment.duration(options.defaultTimedEventDuration);                                     // 7738
                                                                                                                       // 7739
                                                                                                                       // 7740
	// Builds a moment using the settings of the current calendar: timezone and language.                                 // 7741
	// Accepts anything the vanilla moment() constructor accepts.                                                         // 7742
	t.moment = function() {                                                                                               // 7743
		var mom;                                                                                                             // 7744
                                                                                                                       // 7745
		if (options.timezone === 'local') {                                                                                  // 7746
			mom = fc.moment.apply(null, arguments);                                                                             // 7747
                                                                                                                       // 7748
			// Force the moment to be local, because fc.moment doesn't guarantee it.                                            // 7749
			if (mom.hasTime()) { // don't give ambiguously-timed moments a local zone                                           // 7750
				mom.local();                                                                                                       // 7751
			}                                                                                                                   // 7752
		}                                                                                                                    // 7753
		else if (options.timezone === 'UTC') {                                                                               // 7754
			mom = fc.moment.utc.apply(null, arguments); // process as UTC                                                       // 7755
		}                                                                                                                    // 7756
		else {                                                                                                               // 7757
			mom = fc.moment.parseZone.apply(null, arguments); // let the input decide the zone                                  // 7758
		}                                                                                                                    // 7759
                                                                                                                       // 7760
		if ('_locale' in mom) { // moment 2.8 and above                                                                      // 7761
			mom._locale = localeData;                                                                                           // 7762
		}                                                                                                                    // 7763
		else { // pre-moment-2.8                                                                                             // 7764
			mom._lang = localeData;                                                                                             // 7765
		}                                                                                                                    // 7766
                                                                                                                       // 7767
		return mom;                                                                                                          // 7768
	};                                                                                                                    // 7769
                                                                                                                       // 7770
                                                                                                                       // 7771
	// Returns a boolean about whether or not the calendar knows how to calculate                                         // 7772
	// the timezone offset of arbitrary dates in the current timezone.                                                    // 7773
	t.getIsAmbigTimezone = function() {                                                                                   // 7774
		return options.timezone !== 'local' && options.timezone !== 'UTC';                                                   // 7775
	};                                                                                                                    // 7776
                                                                                                                       // 7777
                                                                                                                       // 7778
	// Returns a copy of the given date in the current timezone of it is ambiguously zoned.                               // 7779
	// This will also give the date an unambiguous time.                                                                  // 7780
	t.rezoneDate = function(date) {                                                                                       // 7781
		return t.moment(date.toArray());                                                                                     // 7782
	};                                                                                                                    // 7783
                                                                                                                       // 7784
                                                                                                                       // 7785
	// Returns a moment for the current date, as defined by the client's computer,                                        // 7786
	// or overridden by the `now` option.                                                                                 // 7787
	t.getNow = function() {                                                                                               // 7788
		var now = options.now;                                                                                               // 7789
		if (typeof now === 'function') {                                                                                     // 7790
			now = now();                                                                                                        // 7791
		}                                                                                                                    // 7792
		return t.moment(now);                                                                                                // 7793
	};                                                                                                                    // 7794
                                                                                                                       // 7795
                                                                                                                       // 7796
	// Get an event's normalized end date. If not present, calculate it from the defaults.                                // 7797
	t.getEventEnd = function(event) {                                                                                     // 7798
		if (event.end) {                                                                                                     // 7799
			return event.end.clone();                                                                                           // 7800
		}                                                                                                                    // 7801
		else {                                                                                                               // 7802
			return t.getDefaultEventEnd(event.allDay, event.start);                                                             // 7803
		}                                                                                                                    // 7804
	};                                                                                                                    // 7805
                                                                                                                       // 7806
                                                                                                                       // 7807
	// Given an event's allDay status and start date, return swhat its fallback end date should be.                       // 7808
	t.getDefaultEventEnd = function(allDay, start) { // TODO: rename to computeDefaultEventEnd                            // 7809
		var end = start.clone();                                                                                             // 7810
                                                                                                                       // 7811
		if (allDay) {                                                                                                        // 7812
			end.stripTime().add(t.defaultAllDayEventDuration);                                                                  // 7813
		}                                                                                                                    // 7814
		else {                                                                                                               // 7815
			end.add(t.defaultTimedEventDuration);                                                                               // 7816
		}                                                                                                                    // 7817
                                                                                                                       // 7818
		if (t.getIsAmbigTimezone()) {                                                                                        // 7819
			end.stripZone(); // we don't know what the tzo should be                                                            // 7820
		}                                                                                                                    // 7821
                                                                                                                       // 7822
		return end;                                                                                                          // 7823
	};                                                                                                                    // 7824
                                                                                                                       // 7825
                                                                                                                       // 7826
	// Produces a human-readable string for the given duration.                                                           // 7827
	// Side-effect: changes the locale of the given duration.                                                             // 7828
	t.humanizeDuration = function(duration) {                                                                             // 7829
		return (duration.locale || duration.lang).call(duration, options.lang) // works moment-pre-2.8                       // 7830
			.humanize();                                                                                                        // 7831
	};                                                                                                                    // 7832
                                                                                                                       // 7833
                                                                                                                       // 7834
	                                                                                                                      // 7835
	// Imports                                                                                                            // 7836
	// -----------------------------------------------------------------------------------                                // 7837
                                                                                                                       // 7838
                                                                                                                       // 7839
	EventManager.call(t, options);                                                                                        // 7840
	var isFetchNeeded = t.isFetchNeeded;                                                                                  // 7841
	var fetchEvents = t.fetchEvents;                                                                                      // 7842
                                                                                                                       // 7843
                                                                                                                       // 7844
                                                                                                                       // 7845
	// Locals                                                                                                             // 7846
	// -----------------------------------------------------------------------------------                                // 7847
                                                                                                                       // 7848
                                                                                                                       // 7849
	var _element = element[0];                                                                                            // 7850
	var header;                                                                                                           // 7851
	var headerElement;                                                                                                    // 7852
	var content;                                                                                                          // 7853
	var tm; // for making theme classes                                                                                   // 7854
	var currentView; // NOTE: keep this in sync with this.view                                                            // 7855
	var viewsByType = {}; // holds all instantiated view instances, current or not                                        // 7856
	var suggestedViewHeight;                                                                                              // 7857
	var windowResizeProxy; // wraps the windowResize function                                                             // 7858
	var ignoreWindowResize = 0;                                                                                           // 7859
	var date;                                                                                                             // 7860
	var events = [];                                                                                                      // 7861
	                                                                                                                      // 7862
	                                                                                                                      // 7863
	                                                                                                                      // 7864
	// Main Rendering                                                                                                     // 7865
	// -----------------------------------------------------------------------------------                                // 7866
                                                                                                                       // 7867
                                                                                                                       // 7868
	if (options.defaultDate != null) {                                                                                    // 7869
		date = t.moment(options.defaultDate);                                                                                // 7870
	}                                                                                                                     // 7871
	else {                                                                                                                // 7872
		date = t.getNow();                                                                                                   // 7873
	}                                                                                                                     // 7874
	                                                                                                                      // 7875
	                                                                                                                      // 7876
	function render() {                                                                                                   // 7877
		if (!content) {                                                                                                      // 7878
			initialRender();                                                                                                    // 7879
		}                                                                                                                    // 7880
		else if (elementVisible()) {                                                                                         // 7881
			// mainly for the public API                                                                                        // 7882
			calcSize();                                                                                                         // 7883
			renderView();                                                                                                       // 7884
		}                                                                                                                    // 7885
	}                                                                                                                     // 7886
	                                                                                                                      // 7887
	                                                                                                                      // 7888
	function initialRender() {                                                                                            // 7889
		tm = options.theme ? 'ui' : 'fc';                                                                                    // 7890
		element.addClass('fc');                                                                                              // 7891
                                                                                                                       // 7892
		if (options.isRTL) {                                                                                                 // 7893
			element.addClass('fc-rtl');                                                                                         // 7894
		}                                                                                                                    // 7895
		else {                                                                                                               // 7896
			element.addClass('fc-ltr');                                                                                         // 7897
		}                                                                                                                    // 7898
                                                                                                                       // 7899
		if (options.theme) {                                                                                                 // 7900
			element.addClass('ui-widget');                                                                                      // 7901
		}                                                                                                                    // 7902
		else {                                                                                                               // 7903
			element.addClass('fc-unthemed');                                                                                    // 7904
		}                                                                                                                    // 7905
                                                                                                                       // 7906
		content = $("<div class='fc-view-container'/>").prependTo(element);                                                  // 7907
                                                                                                                       // 7908
		header = t.header = new Header(t, options);                                                                          // 7909
		headerElement = header.render();                                                                                     // 7910
		if (headerElement) {                                                                                                 // 7911
			element.prepend(headerElement);                                                                                     // 7912
		}                                                                                                                    // 7913
                                                                                                                       // 7914
		renderView(options.defaultView);                                                                                     // 7915
                                                                                                                       // 7916
		if (options.handleWindowResize) {                                                                                    // 7917
			windowResizeProxy = debounce(windowResize, options.windowResizeDelay); // prevents rapid calls                      // 7918
			$(window).resize(windowResizeProxy);                                                                                // 7919
		}                                                                                                                    // 7920
	}                                                                                                                     // 7921
	                                                                                                                      // 7922
	                                                                                                                      // 7923
	function destroy() {                                                                                                  // 7924
                                                                                                                       // 7925
		if (currentView) {                                                                                                   // 7926
			currentView.removeElement();                                                                                        // 7927
                                                                                                                       // 7928
			// NOTE: don't null-out currentView/t.view in case API methods are called after destroy.                            // 7929
			// It is still the "current" view, just not rendered.                                                               // 7930
		}                                                                                                                    // 7931
                                                                                                                       // 7932
		header.destroy();                                                                                                    // 7933
		content.remove();                                                                                                    // 7934
		element.removeClass('fc fc-ltr fc-rtl fc-unthemed ui-widget');                                                       // 7935
                                                                                                                       // 7936
		if (windowResizeProxy) {                                                                                             // 7937
			$(window).unbind('resize', windowResizeProxy);                                                                      // 7938
		}                                                                                                                    // 7939
	}                                                                                                                     // 7940
	                                                                                                                      // 7941
	                                                                                                                      // 7942
	function elementVisible() {                                                                                           // 7943
		return element.is(':visible');                                                                                       // 7944
	}                                                                                                                     // 7945
	                                                                                                                      // 7946
	                                                                                                                      // 7947
                                                                                                                       // 7948
	// View Rendering                                                                                                     // 7949
	// -----------------------------------------------------------------------------------                                // 7950
                                                                                                                       // 7951
                                                                                                                       // 7952
	// Renders a view because of a date change, view-type change, or for the first time.                                  // 7953
	// If not given a viewType, keep the current view but render different dates.                                         // 7954
	function renderView(viewType) {                                                                                       // 7955
		ignoreWindowResize++;                                                                                                // 7956
                                                                                                                       // 7957
		// if viewType is changing, destroy the old view                                                                     // 7958
		if (currentView && viewType && currentView.type !== viewType) {                                                      // 7959
			header.deactivateButton(currentView.type);                                                                          // 7960
			freezeContentHeight(); // prevent a scroll jump when view element is removed                                        // 7961
			currentView.removeElement();                                                                                        // 7962
			currentView = t.view = null;                                                                                        // 7963
		}                                                                                                                    // 7964
                                                                                                                       // 7965
		// if viewType changed, or the view was never created, create a fresh view                                           // 7966
		if (!currentView && viewType) {                                                                                      // 7967
			currentView = t.view =                                                                                              // 7968
				viewsByType[viewType] ||                                                                                           // 7969
				(viewsByType[viewType] = t.instantiateView(viewType));                                                             // 7970
                                                                                                                       // 7971
			currentView.setElement(                                                                                             // 7972
				$("<div class='fc-view fc-" + viewType + "-view' />").appendTo(content)                                            // 7973
			);                                                                                                                  // 7974
			header.activateButton(viewType);                                                                                    // 7975
		}                                                                                                                    // 7976
                                                                                                                       // 7977
		if (currentView) {                                                                                                   // 7978
                                                                                                                       // 7979
			// in case the view should render a period of time that is completely hidden                                        // 7980
			date = currentView.massageCurrentDate(date);                                                                        // 7981
                                                                                                                       // 7982
			// render or rerender the view                                                                                      // 7983
			if (                                                                                                                // 7984
				!currentView.isDisplayed ||                                                                                        // 7985
				!date.isWithin(currentView.intervalStart, currentView.intervalEnd) // implicit date window change                  // 7986
			) {                                                                                                                 // 7987
				if (elementVisible()) {                                                                                            // 7988
                                                                                                                       // 7989
					freezeContentHeight();                                                                                            // 7990
					currentView.display(date);                                                                                        // 7991
					unfreezeContentHeight();                                                                                          // 7992
                                                                                                                       // 7993
					// need to do this after View::render, so dates are calculated                                                    // 7994
					updateHeaderTitle();                                                                                              // 7995
					updateTodayButton();                                                                                              // 7996
                                                                                                                       // 7997
					getAndRenderEvents();                                                                                             // 7998
				}                                                                                                                  // 7999
			}                                                                                                                   // 8000
		}                                                                                                                    // 8001
                                                                                                                       // 8002
		unfreezeContentHeight(); // undo any lone freezeContentHeight calls                                                  // 8003
		ignoreWindowResize--;                                                                                                // 8004
	}                                                                                                                     // 8005
                                                                                                                       // 8006
	                                                                                                                      // 8007
                                                                                                                       // 8008
	// Resizing                                                                                                           // 8009
	// -----------------------------------------------------------------------------------                                // 8010
                                                                                                                       // 8011
                                                                                                                       // 8012
	t.getSuggestedViewHeight = function() {                                                                               // 8013
		if (suggestedViewHeight === undefined) {                                                                             // 8014
			calcSize();                                                                                                         // 8015
		}                                                                                                                    // 8016
		return suggestedViewHeight;                                                                                          // 8017
	};                                                                                                                    // 8018
                                                                                                                       // 8019
                                                                                                                       // 8020
	t.isHeightAuto = function() {                                                                                         // 8021
		return options.contentHeight === 'auto' || options.height === 'auto';                                                // 8022
	};                                                                                                                    // 8023
	                                                                                                                      // 8024
	                                                                                                                      // 8025
	function updateSize(shouldRecalc) {                                                                                   // 8026
		if (elementVisible()) {                                                                                              // 8027
                                                                                                                       // 8028
			if (shouldRecalc) {                                                                                                 // 8029
				_calcSize();                                                                                                       // 8030
			}                                                                                                                   // 8031
                                                                                                                       // 8032
			ignoreWindowResize++;                                                                                               // 8033
			currentView.updateSize(true); // isResize=true. will poll getSuggestedViewHeight() and isHeightAuto()               // 8034
			ignoreWindowResize--;                                                                                               // 8035
                                                                                                                       // 8036
			return true; // signal success                                                                                      // 8037
		}                                                                                                                    // 8038
	}                                                                                                                     // 8039
                                                                                                                       // 8040
                                                                                                                       // 8041
	function calcSize() {                                                                                                 // 8042
		if (elementVisible()) {                                                                                              // 8043
			_calcSize();                                                                                                        // 8044
		}                                                                                                                    // 8045
	}                                                                                                                     // 8046
	                                                                                                                      // 8047
	                                                                                                                      // 8048
	function _calcSize() { // assumes elementVisible                                                                      // 8049
		if (typeof options.contentHeight === 'number') { // exists and not 'auto'                                            // 8050
			suggestedViewHeight = options.contentHeight;                                                                        // 8051
		}                                                                                                                    // 8052
		else if (typeof options.height === 'number') { // exists and not 'auto'                                              // 8053
			suggestedViewHeight = options.height - (headerElement ? headerElement.outerHeight(true) : 0);                       // 8054
		}                                                                                                                    // 8055
		else {                                                                                                               // 8056
			suggestedViewHeight = Math.round(content.width() / Math.max(options.aspectRatio, .5));                              // 8057
		}                                                                                                                    // 8058
	}                                                                                                                     // 8059
	                                                                                                                      // 8060
	                                                                                                                      // 8061
	function windowResize(ev) {                                                                                           // 8062
		if (                                                                                                                 // 8063
			!ignoreWindowResize &&                                                                                              // 8064
			ev.target === window && // so we don't process jqui "resize" events that have bubbled up                            // 8065
			currentView.start // view has already been rendered                                                                 // 8066
		) {                                                                                                                  // 8067
			if (updateSize(true)) {                                                                                             // 8068
				currentView.trigger('windowResize', _element);                                                                     // 8069
			}                                                                                                                   // 8070
		}                                                                                                                    // 8071
	}                                                                                                                     // 8072
	                                                                                                                      // 8073
	                                                                                                                      // 8074
	                                                                                                                      // 8075
	/* Event Fetching/Rendering                                                                                           // 8076
	-----------------------------------------------------------------------------*/                                       // 8077
	// TODO: going forward, most of this stuff should be directly handled by the view                                     // 8078
                                                                                                                       // 8079
                                                                                                                       // 8080
	function refetchEvents() { // can be called as an API method                                                          // 8081
		destroyEvents(); // so that events are cleared before user starts waiting for AJAX                                   // 8082
		fetchAndRenderEvents();                                                                                              // 8083
	}                                                                                                                     // 8084
                                                                                                                       // 8085
                                                                                                                       // 8086
	function renderEvents() { // destroys old events if previously rendered                                               // 8087
		if (elementVisible()) {                                                                                              // 8088
			freezeContentHeight();                                                                                              // 8089
			currentView.displayEvents(events);                                                                                  // 8090
			unfreezeContentHeight();                                                                                            // 8091
		}                                                                                                                    // 8092
	}                                                                                                                     // 8093
                                                                                                                       // 8094
                                                                                                                       // 8095
	function destroyEvents() {                                                                                            // 8096
		freezeContentHeight();                                                                                               // 8097
		currentView.clearEvents();                                                                                           // 8098
		unfreezeContentHeight();                                                                                             // 8099
	}                                                                                                                     // 8100
	                                                                                                                      // 8101
                                                                                                                       // 8102
	function getAndRenderEvents() {                                                                                       // 8103
		if (!options.lazyFetching || isFetchNeeded(currentView.start, currentView.end)) {                                    // 8104
			fetchAndRenderEvents();                                                                                             // 8105
		}                                                                                                                    // 8106
		else {                                                                                                               // 8107
			renderEvents();                                                                                                     // 8108
		}                                                                                                                    // 8109
	}                                                                                                                     // 8110
                                                                                                                       // 8111
                                                                                                                       // 8112
	function fetchAndRenderEvents() {                                                                                     // 8113
		fetchEvents(currentView.start, currentView.end);                                                                     // 8114
			// ... will call reportEvents                                                                                       // 8115
			// ... which will call renderEvents                                                                                 // 8116
	}                                                                                                                     // 8117
                                                                                                                       // 8118
	                                                                                                                      // 8119
	// called when event data arrives                                                                                     // 8120
	function reportEvents(_events) {                                                                                      // 8121
		events = _events;                                                                                                    // 8122
		renderEvents();                                                                                                      // 8123
	}                                                                                                                     // 8124
                                                                                                                       // 8125
                                                                                                                       // 8126
	// called when a single event's data has been changed                                                                 // 8127
	function reportEventChange() {                                                                                        // 8128
		renderEvents();                                                                                                      // 8129
	}                                                                                                                     // 8130
                                                                                                                       // 8131
                                                                                                                       // 8132
                                                                                                                       // 8133
	/* Header Updating                                                                                                    // 8134
	-----------------------------------------------------------------------------*/                                       // 8135
                                                                                                                       // 8136
                                                                                                                       // 8137
	function updateHeaderTitle() {                                                                                        // 8138
		header.updateTitle(currentView.title);                                                                               // 8139
	}                                                                                                                     // 8140
                                                                                                                       // 8141
                                                                                                                       // 8142
	function updateTodayButton() {                                                                                        // 8143
		var now = t.getNow();                                                                                                // 8144
		if (now.isWithin(currentView.intervalStart, currentView.intervalEnd)) {                                              // 8145
			header.disableButton('today');                                                                                      // 8146
		}                                                                                                                    // 8147
		else {                                                                                                               // 8148
			header.enableButton('today');                                                                                       // 8149
		}                                                                                                                    // 8150
	}                                                                                                                     // 8151
	                                                                                                                      // 8152
                                                                                                                       // 8153
                                                                                                                       // 8154
	/* Selection                                                                                                          // 8155
	-----------------------------------------------------------------------------*/                                       // 8156
	                                                                                                                      // 8157
                                                                                                                       // 8158
	function select(start, end) {                                                                                         // 8159
                                                                                                                       // 8160
		start = t.moment(start);                                                                                             // 8161
		if (end) {                                                                                                           // 8162
			end = t.moment(end);                                                                                                // 8163
		}                                                                                                                    // 8164
		else if (start.hasTime()) {                                                                                          // 8165
			end = start.clone().add(t.defaultTimedEventDuration);                                                               // 8166
		}                                                                                                                    // 8167
		else {                                                                                                               // 8168
			end = start.clone().add(t.defaultAllDayEventDuration);                                                              // 8169
		}                                                                                                                    // 8170
                                                                                                                       // 8171
		currentView.select({ start: start, end: end }); // accepts a range                                                   // 8172
	}                                                                                                                     // 8173
	                                                                                                                      // 8174
                                                                                                                       // 8175
	function unselect() { // safe to be called before renderView                                                          // 8176
		if (currentView) {                                                                                                   // 8177
			currentView.unselect();                                                                                             // 8178
		}                                                                                                                    // 8179
	}                                                                                                                     // 8180
	                                                                                                                      // 8181
	                                                                                                                      // 8182
	                                                                                                                      // 8183
	/* Date                                                                                                               // 8184
	-----------------------------------------------------------------------------*/                                       // 8185
	                                                                                                                      // 8186
	                                                                                                                      // 8187
	function prev() {                                                                                                     // 8188
		date = currentView.computePrevDate(date);                                                                            // 8189
		renderView();                                                                                                        // 8190
	}                                                                                                                     // 8191
	                                                                                                                      // 8192
	                                                                                                                      // 8193
	function next() {                                                                                                     // 8194
		date = currentView.computeNextDate(date);                                                                            // 8195
		renderView();                                                                                                        // 8196
	}                                                                                                                     // 8197
	                                                                                                                      // 8198
	                                                                                                                      // 8199
	function prevYear() {                                                                                                 // 8200
		date.add(-1, 'years');                                                                                               // 8201
		renderView();                                                                                                        // 8202
	}                                                                                                                     // 8203
	                                                                                                                      // 8204
	                                                                                                                      // 8205
	function nextYear() {                                                                                                 // 8206
		date.add(1, 'years');                                                                                                // 8207
		renderView();                                                                                                        // 8208
	}                                                                                                                     // 8209
	                                                                                                                      // 8210
	                                                                                                                      // 8211
	function today() {                                                                                                    // 8212
		date = t.getNow();                                                                                                   // 8213
		renderView();                                                                                                        // 8214
	}                                                                                                                     // 8215
	                                                                                                                      // 8216
	                                                                                                                      // 8217
	function gotoDate(dateInput) {                                                                                        // 8218
		date = t.moment(dateInput);                                                                                          // 8219
		renderView();                                                                                                        // 8220
	}                                                                                                                     // 8221
	                                                                                                                      // 8222
	                                                                                                                      // 8223
	function incrementDate(delta) {                                                                                       // 8224
		date.add(moment.duration(delta));                                                                                    // 8225
		renderView();                                                                                                        // 8226
	}                                                                                                                     // 8227
                                                                                                                       // 8228
                                                                                                                       // 8229
	// Forces navigation to a view for the given date.                                                                    // 8230
	// `viewType` can be a specific view name or a generic one like "week" or "day".                                      // 8231
	function zoomTo(newDate, viewType) {                                                                                  // 8232
		var spec;                                                                                                            // 8233
                                                                                                                       // 8234
		viewType = viewType || 'day'; // day is default zoom                                                                 // 8235
		spec = t.getViewSpec(viewType) || t.getUnitViewSpec(viewType);                                                       // 8236
                                                                                                                       // 8237
		date = newDate;                                                                                                      // 8238
		renderView(spec ? spec.type : null);                                                                                 // 8239
	}                                                                                                                     // 8240
	                                                                                                                      // 8241
	                                                                                                                      // 8242
	function getDate() {                                                                                                  // 8243
		return date.clone();                                                                                                 // 8244
	}                                                                                                                     // 8245
                                                                                                                       // 8246
                                                                                                                       // 8247
                                                                                                                       // 8248
	/* Height "Freezing"                                                                                                  // 8249
	-----------------------------------------------------------------------------*/                                       // 8250
	// TODO: move this into the view                                                                                      // 8251
                                                                                                                       // 8252
                                                                                                                       // 8253
	function freezeContentHeight() {                                                                                      // 8254
		content.css({                                                                                                        // 8255
			width: '100%',                                                                                                      // 8256
			height: content.height(),                                                                                           // 8257
			overflow: 'hidden'                                                                                                  // 8258
		});                                                                                                                  // 8259
	}                                                                                                                     // 8260
                                                                                                                       // 8261
                                                                                                                       // 8262
	function unfreezeContentHeight() {                                                                                    // 8263
		content.css({                                                                                                        // 8264
			width: '',                                                                                                          // 8265
			height: '',                                                                                                         // 8266
			overflow: ''                                                                                                        // 8267
		});                                                                                                                  // 8268
	}                                                                                                                     // 8269
	                                                                                                                      // 8270
	                                                                                                                      // 8271
	                                                                                                                      // 8272
	/* Misc                                                                                                               // 8273
	-----------------------------------------------------------------------------*/                                       // 8274
	                                                                                                                      // 8275
                                                                                                                       // 8276
	function getCalendar() {                                                                                              // 8277
		return t;                                                                                                            // 8278
	}                                                                                                                     // 8279
                                                                                                                       // 8280
	                                                                                                                      // 8281
	function getView() {                                                                                                  // 8282
		return currentView;                                                                                                  // 8283
	}                                                                                                                     // 8284
	                                                                                                                      // 8285
	                                                                                                                      // 8286
	function option(name, value) {                                                                                        // 8287
		if (value === undefined) {                                                                                           // 8288
			return options[name];                                                                                               // 8289
		}                                                                                                                    // 8290
		if (name == 'height' || name == 'contentHeight' || name == 'aspectRatio') {                                          // 8291
			options[name] = value;                                                                                              // 8292
			updateSize(true); // true = allow recalculation of height                                                           // 8293
		}                                                                                                                    // 8294
	}                                                                                                                     // 8295
	                                                                                                                      // 8296
	                                                                                                                      // 8297
	function trigger(name, thisObj) {                                                                                     // 8298
		if (options[name]) {                                                                                                 // 8299
			return options[name].apply(                                                                                         // 8300
				thisObj || _element,                                                                                               // 8301
				Array.prototype.slice.call(arguments, 2)                                                                           // 8302
			);                                                                                                                  // 8303
		}                                                                                                                    // 8304
	}                                                                                                                     // 8305
                                                                                                                       // 8306
}                                                                                                                      // 8307
                                                                                                                       // 8308
;;                                                                                                                     // 8309
                                                                                                                       // 8310
Calendar.defaults = {                                                                                                  // 8311
                                                                                                                       // 8312
	titleRangeSeparator: ' \u2014 ', // emphasized dash                                                                   // 8313
	monthYearFormat: 'MMMM YYYY', // required for en. other languages rely on datepicker computable option                // 8314
                                                                                                                       // 8315
	defaultTimedEventDuration: '02:00:00',                                                                                // 8316
	defaultAllDayEventDuration: { days: 1 },                                                                              // 8317
	forceEventDuration: false,                                                                                            // 8318
	nextDayThreshold: '09:00:00', // 9am                                                                                  // 8319
                                                                                                                       // 8320
	// display                                                                                                            // 8321
	defaultView: 'month',                                                                                                 // 8322
	aspectRatio: 1.35,                                                                                                    // 8323
	header: {                                                                                                             // 8324
		left: 'title',                                                                                                       // 8325
		center: '',                                                                                                          // 8326
		right: 'today prev,next'                                                                                             // 8327
	},                                                                                                                    // 8328
	weekends: true,                                                                                                       // 8329
	weekNumbers: false,                                                                                                   // 8330
                                                                                                                       // 8331
	weekNumberTitle: 'W',                                                                                                 // 8332
	weekNumberCalculation: 'local',                                                                                       // 8333
	                                                                                                                      // 8334
	//editable: false,                                                                                                    // 8335
	                                                                                                                      // 8336
	// event ajax                                                                                                         // 8337
	lazyFetching: true,                                                                                                   // 8338
	startParam: 'start',                                                                                                  // 8339
	endParam: 'end',                                                                                                      // 8340
	timezoneParam: 'timezone',                                                                                            // 8341
                                                                                                                       // 8342
	timezone: false,                                                                                                      // 8343
                                                                                                                       // 8344
	//allDayDefault: undefined,                                                                                           // 8345
                                                                                                                       // 8346
	// locale                                                                                                             // 8347
	isRTL: false,                                                                                                         // 8348
	buttonText: {                                                                                                         // 8349
		prev: "prev",                                                                                                        // 8350
		next: "next",                                                                                                        // 8351
		prevYear: "prev year",                                                                                               // 8352
		nextYear: "next year",                                                                                               // 8353
		year: 'year', // TODO: locale files need to specify this                                                             // 8354
		today: 'today',                                                                                                      // 8355
		month: 'month',                                                                                                      // 8356
		week: 'week',                                                                                                        // 8357
		day: 'day'                                                                                                           // 8358
	},                                                                                                                    // 8359
                                                                                                                       // 8360
	buttonIcons: {                                                                                                        // 8361
		prev: 'left-single-arrow',                                                                                           // 8362
		next: 'right-single-arrow',                                                                                          // 8363
		prevYear: 'left-double-arrow',                                                                                       // 8364
		nextYear: 'right-double-arrow'                                                                                       // 8365
	},                                                                                                                    // 8366
	                                                                                                                      // 8367
	// jquery-ui theming                                                                                                  // 8368
	theme: false,                                                                                                         // 8369
	themeButtonIcons: {                                                                                                   // 8370
		prev: 'circle-triangle-w',                                                                                           // 8371
		next: 'circle-triangle-e',                                                                                           // 8372
		prevYear: 'seek-prev',                                                                                               // 8373
		nextYear: 'seek-next'                                                                                                // 8374
	},                                                                                                                    // 8375
                                                                                                                       // 8376
	//eventResizableFromStart: false,                                                                                     // 8377
	dragOpacity: .75,                                                                                                     // 8378
	dragRevertDuration: 500,                                                                                              // 8379
	dragScroll: true,                                                                                                     // 8380
	                                                                                                                      // 8381
	//selectable: false,                                                                                                  // 8382
	unselectAuto: true,                                                                                                   // 8383
	                                                                                                                      // 8384
	dropAccept: '*',                                                                                                      // 8385
                                                                                                                       // 8386
	eventLimit: false,                                                                                                    // 8387
	eventLimitText: 'more',                                                                                               // 8388
	eventLimitClick: 'popover',                                                                                           // 8389
	dayPopoverFormat: 'LL',                                                                                               // 8390
	                                                                                                                      // 8391
	handleWindowResize: true,                                                                                             // 8392
	windowResizeDelay: 200 // milliseconds before an updateSize happens                                                   // 8393
	                                                                                                                      // 8394
};                                                                                                                     // 8395
                                                                                                                       // 8396
                                                                                                                       // 8397
Calendar.englishDefaults = { // used by lang.js                                                                        // 8398
	dayPopoverFormat: 'dddd, MMMM D'                                                                                      // 8399
};                                                                                                                     // 8400
                                                                                                                       // 8401
                                                                                                                       // 8402
Calendar.rtlDefaults = { // right-to-left defaults                                                                     // 8403
	header: { // TODO: smarter solution (first/center/last ?)                                                             // 8404
		left: 'next,prev today',                                                                                             // 8405
		center: '',                                                                                                          // 8406
		right: 'title'                                                                                                       // 8407
	},                                                                                                                    // 8408
	buttonIcons: {                                                                                                        // 8409
		prev: 'right-single-arrow',                                                                                          // 8410
		next: 'left-single-arrow',                                                                                           // 8411
		prevYear: 'right-double-arrow',                                                                                      // 8412
		nextYear: 'left-double-arrow'                                                                                        // 8413
	},                                                                                                                    // 8414
	themeButtonIcons: {                                                                                                   // 8415
		prev: 'circle-triangle-e',                                                                                           // 8416
		next: 'circle-triangle-w',                                                                                           // 8417
		nextYear: 'seek-prev',                                                                                               // 8418
		prevYear: 'seek-next'                                                                                                // 8419
	}                                                                                                                     // 8420
};                                                                                                                     // 8421
                                                                                                                       // 8422
;;                                                                                                                     // 8423
                                                                                                                       // 8424
var langOptionHash = fc.langs = {}; // initialize and expose                                                           // 8425
                                                                                                                       // 8426
                                                                                                                       // 8427
// TODO: document the structure and ordering of a FullCalendar lang file                                               // 8428
// TODO: rename everything "lang" to "locale", like what the moment project did                                        // 8429
                                                                                                                       // 8430
                                                                                                                       // 8431
// Initialize jQuery UI datepicker translations while using some of the translations                                   // 8432
// Will set this as the default language for datepicker.                                                               // 8433
fc.datepickerLang = function(langCode, dpLangCode, dpOptions) {                                                        // 8434
                                                                                                                       // 8435
	// get the FullCalendar internal option hash for this language. create if necessary                                   // 8436
	var fcOptions = langOptionHash[langCode] || (langOptionHash[langCode] = {});                                          // 8437
                                                                                                                       // 8438
	// transfer some simple options from datepicker to fc                                                                 // 8439
	fcOptions.isRTL = dpOptions.isRTL;                                                                                    // 8440
	fcOptions.weekNumberTitle = dpOptions.weekHeader;                                                                     // 8441
                                                                                                                       // 8442
	// compute some more complex options from datepicker                                                                  // 8443
	$.each(dpComputableOptions, function(name, func) {                                                                    // 8444
		fcOptions[name] = func(dpOptions);                                                                                   // 8445
	});                                                                                                                   // 8446
                                                                                                                       // 8447
	// is jQuery UI Datepicker is on the page?                                                                            // 8448
	if ($.datepicker) {                                                                                                   // 8449
                                                                                                                       // 8450
		// Register the language data.                                                                                       // 8451
		// FullCalendar and MomentJS use language codes like "pt-br" but Datepicker                                          // 8452
		// does it like "pt-BR" or if it doesn't have the language, maybe just "pt".                                         // 8453
		// Make an alias so the language can be referenced either way.                                                       // 8454
		$.datepicker.regional[dpLangCode] =                                                                                  // 8455
			$.datepicker.regional[langCode] = // alias                                                                          // 8456
				dpOptions;                                                                                                         // 8457
                                                                                                                       // 8458
		// Alias 'en' to the default language data. Do this every time.                                                      // 8459
		$.datepicker.regional.en = $.datepicker.regional[''];                                                                // 8460
                                                                                                                       // 8461
		// Set as Datepicker's global defaults.                                                                              // 8462
		$.datepicker.setDefaults(dpOptions);                                                                                 // 8463
	}                                                                                                                     // 8464
};                                                                                                                     // 8465
                                                                                                                       // 8466
                                                                                                                       // 8467
// Sets FullCalendar-specific translations. Will set the language as the global default.                               // 8468
fc.lang = function(langCode, newFcOptions) {                                                                           // 8469
	var fcOptions;                                                                                                        // 8470
	var momOptions;                                                                                                       // 8471
                                                                                                                       // 8472
	// get the FullCalendar internal option hash for this language. create if necessary                                   // 8473
	fcOptions = langOptionHash[langCode] || (langOptionHash[langCode] = {});                                              // 8474
                                                                                                                       // 8475
	// provided new options for this language? merge them in                                                              // 8476
	if (newFcOptions) {                                                                                                   // 8477
		fcOptions = langOptionHash[langCode] = mergeOptions(fcOptions, newFcOptions);                                        // 8478
	}                                                                                                                     // 8479
                                                                                                                       // 8480
	// compute language options that weren't defined.                                                                     // 8481
	// always do this. newFcOptions can be undefined when initializing from i18n file,                                    // 8482
	// so no way to tell if this is an initialization or a default-setting.                                               // 8483
	momOptions = getMomentLocaleData(langCode); // will fall back to en                                                   // 8484
	$.each(momComputableOptions, function(name, func) {                                                                   // 8485
		if (fcOptions[name] == null) {                                                                                       // 8486
			fcOptions[name] = func(momOptions, fcOptions);                                                                      // 8487
		}                                                                                                                    // 8488
	});                                                                                                                   // 8489
                                                                                                                       // 8490
	// set it as the default language for FullCalendar                                                                    // 8491
	Calendar.defaults.lang = langCode;                                                                                    // 8492
};                                                                                                                     // 8493
                                                                                                                       // 8494
                                                                                                                       // 8495
// NOTE: can't guarantee any of these computations will run because not every language has datepicker                  // 8496
// configs, so make sure there are English fallbacks for these in the defaults file.                                   // 8497
var dpComputableOptions = {                                                                                            // 8498
                                                                                                                       // 8499
	buttonText: function(dpOptions) {                                                                                     // 8500
		return {                                                                                                             // 8501
			// the translations sometimes wrongly contain HTML entities                                                         // 8502
			prev: stripHtmlEntities(dpOptions.prevText),                                                                        // 8503
			next: stripHtmlEntities(dpOptions.nextText),                                                                        // 8504
			today: stripHtmlEntities(dpOptions.currentText)                                                                     // 8505
		};                                                                                                                   // 8506
	},                                                                                                                    // 8507
                                                                                                                       // 8508
	// Produces format strings like "MMMM YYYY" -> "September 2014"                                                       // 8509
	monthYearFormat: function(dpOptions) {                                                                                // 8510
		return dpOptions.showMonthAfterYear ?                                                                                // 8511
			'YYYY[' + dpOptions.yearSuffix + '] MMMM' :                                                                         // 8512
			'MMMM YYYY[' + dpOptions.yearSuffix + ']';                                                                          // 8513
	}                                                                                                                     // 8514
                                                                                                                       // 8515
};                                                                                                                     // 8516
                                                                                                                       // 8517
var momComputableOptions = {                                                                                           // 8518
                                                                                                                       // 8519
	// Produces format strings like "ddd M/D" -> "Fri 9/15"                                                               // 8520
	dayOfMonthFormat: function(momOptions, fcOptions) {                                                                   // 8521
		var format = momOptions.longDateFormat('l'); // for the format like "M/D/YYYY"                                       // 8522
                                                                                                                       // 8523
		// strip the year off the edge, as well as other misc non-whitespace chars                                           // 8524
		format = format.replace(/^Y+[^\w\s]*|[^\w\s]*Y+$/g, '');                                                             // 8525
                                                                                                                       // 8526
		if (fcOptions.isRTL) {                                                                                               // 8527
			format += ' ddd'; // for RTL, add day-of-week to end                                                                // 8528
		}                                                                                                                    // 8529
		else {                                                                                                               // 8530
			format = 'ddd ' + format; // for LTR, add day-of-week to beginning                                                  // 8531
		}                                                                                                                    // 8532
		return format;                                                                                                       // 8533
	},                                                                                                                    // 8534
                                                                                                                       // 8535
	// Produces format strings like "h:mma" -> "6:00pm"                                                                   // 8536
	mediumTimeFormat: function(momOptions) { // can't be called `timeFormat` because collides with option                 // 8537
		return momOptions.longDateFormat('LT')                                                                               // 8538
			.replace(/\s*a$/i, 'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand                          // 8539
	},                                                                                                                    // 8540
                                                                                                                       // 8541
	// Produces format strings like "h(:mm)a" -> "6pm" / "6:30pm"                                                         // 8542
	smallTimeFormat: function(momOptions) {                                                                               // 8543
		return momOptions.longDateFormat('LT')                                                                               // 8544
			.replace(':mm', '(:mm)')                                                                                            // 8545
			.replace(/(\Wmm)$/, '($1)') // like above, but for foreign langs                                                    // 8546
			.replace(/\s*a$/i, 'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand                          // 8547
	},                                                                                                                    // 8548
                                                                                                                       // 8549
	// Produces format strings like "h(:mm)t" -> "6p" / "6:30p"                                                           // 8550
	extraSmallTimeFormat: function(momOptions) {                                                                          // 8551
		return momOptions.longDateFormat('LT')                                                                               // 8552
			.replace(':mm', '(:mm)')                                                                                            // 8553
			.replace(/(\Wmm)$/, '($1)') // like above, but for foreign langs                                                    // 8554
			.replace(/\s*a$/i, 't'); // convert to AM/PM/am/pm to lowercase one-letter. remove any spaces beforehand            // 8555
	},                                                                                                                    // 8556
                                                                                                                       // 8557
	// Produces format strings like "ha" / "H" -> "6pm" / "18"                                                            // 8558
	hourFormat: function(momOptions) {                                                                                    // 8559
		return momOptions.longDateFormat('LT')                                                                               // 8560
			.replace(':mm', '')                                                                                                 // 8561
			.replace(/(\Wmm)$/, '') // like above, but for foreign langs                                                        // 8562
			.replace(/\s*a$/i, 'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand                          // 8563
	},                                                                                                                    // 8564
                                                                                                                       // 8565
	// Produces format strings like "h:mm" -> "6:30" (with no AM/PM)                                                      // 8566
	noMeridiemTimeFormat: function(momOptions) {                                                                          // 8567
		return momOptions.longDateFormat('LT')                                                                               // 8568
			.replace(/\s*a$/i, ''); // remove trailing AM/PM                                                                    // 8569
	}                                                                                                                     // 8570
                                                                                                                       // 8571
};                                                                                                                     // 8572
                                                                                                                       // 8573
                                                                                                                       // 8574
// options that should be computed off live calendar options (considers override options)                              // 8575
var instanceComputableOptions = { // TODO: best place for this? related to lang?                                       // 8576
                                                                                                                       // 8577
	// Produces format strings for results like "Mo 16"                                                                   // 8578
	smallDayDateFormat: function(options) {                                                                               // 8579
		return options.isRTL ?                                                                                               // 8580
			'D dd' :                                                                                                            // 8581
			'dd D';                                                                                                             // 8582
	},                                                                                                                    // 8583
                                                                                                                       // 8584
	// Produces format strings for results like "Wk 5"                                                                    // 8585
	weekFormat: function(options) {                                                                                       // 8586
		return options.isRTL ?                                                                                               // 8587
			'w[ ' + options.weekNumberTitle + ']' :                                                                             // 8588
			'[' + options.weekNumberTitle + ' ]w';                                                                              // 8589
	},                                                                                                                    // 8590
                                                                                                                       // 8591
	// Produces format strings for results like "Wk5"                                                                     // 8592
	smallWeekFormat: function(options) {                                                                                  // 8593
		return options.isRTL ?                                                                                               // 8594
			'w[' + options.weekNumberTitle + ']' :                                                                              // 8595
			'[' + options.weekNumberTitle + ']w';                                                                               // 8596
	}                                                                                                                     // 8597
                                                                                                                       // 8598
};                                                                                                                     // 8599
                                                                                                                       // 8600
function populateInstanceComputableOptions(options) {                                                                  // 8601
	$.each(instanceComputableOptions, function(name, func) {                                                              // 8602
		if (options[name] == null) {                                                                                         // 8603
			options[name] = func(options);                                                                                      // 8604
		}                                                                                                                    // 8605
	});                                                                                                                   // 8606
}                                                                                                                      // 8607
                                                                                                                       // 8608
                                                                                                                       // 8609
// Returns moment's internal locale data. If doesn't exist, returns English.                                           // 8610
// Works with moment-pre-2.8                                                                                           // 8611
function getMomentLocaleData(langCode) {                                                                               // 8612
	var func = moment.localeData || moment.langData;                                                                      // 8613
	return func.call(moment, langCode) ||                                                                                 // 8614
		func.call(moment, 'en'); // the newer localData could return null, so fall back to en                                // 8615
}                                                                                                                      // 8616
                                                                                                                       // 8617
                                                                                                                       // 8618
// Initialize English by forcing computation of moment-derived options.                                                // 8619
// Also, sets it as the default.                                                                                       // 8620
fc.lang('en', Calendar.englishDefaults);                                                                               // 8621
                                                                                                                       // 8622
;;                                                                                                                     // 8623
                                                                                                                       // 8624
/* Top toolbar area with buttons and title                                                                             // 8625
----------------------------------------------------------------------------------------------------------------------*/
// TODO: rename all header-related things to "toolbar"                                                                 // 8627
                                                                                                                       // 8628
function Header(calendar, options) {                                                                                   // 8629
	var t = this;                                                                                                         // 8630
	                                                                                                                      // 8631
	// exports                                                                                                            // 8632
	t.render = render;                                                                                                    // 8633
	t.destroy = destroy;                                                                                                  // 8634
	t.updateTitle = updateTitle;                                                                                          // 8635
	t.activateButton = activateButton;                                                                                    // 8636
	t.deactivateButton = deactivateButton;                                                                                // 8637
	t.disableButton = disableButton;                                                                                      // 8638
	t.enableButton = enableButton;                                                                                        // 8639
	t.getViewsWithButtons = getViewsWithButtons;                                                                          // 8640
	                                                                                                                      // 8641
	// locals                                                                                                             // 8642
	var el = $();                                                                                                         // 8643
	var viewsWithButtons = [];                                                                                            // 8644
	var tm;                                                                                                               // 8645
                                                                                                                       // 8646
                                                                                                                       // 8647
	function render() {                                                                                                   // 8648
		var sections = options.header;                                                                                       // 8649
                                                                                                                       // 8650
		tm = options.theme ? 'ui' : 'fc';                                                                                    // 8651
                                                                                                                       // 8652
		if (sections) {                                                                                                      // 8653
			el = $("<div class='fc-toolbar'/>")                                                                                 // 8654
				.append(renderSection('left'))                                                                                     // 8655
				.append(renderSection('right'))                                                                                    // 8656
				.append(renderSection('center'))                                                                                   // 8657
				.append('<div class="fc-clear"/>');                                                                                // 8658
                                                                                                                       // 8659
			return el;                                                                                                          // 8660
		}                                                                                                                    // 8661
	}                                                                                                                     // 8662
	                                                                                                                      // 8663
	                                                                                                                      // 8664
	function destroy() {                                                                                                  // 8665
		el.remove();                                                                                                         // 8666
	}                                                                                                                     // 8667
	                                                                                                                      // 8668
	                                                                                                                      // 8669
	function renderSection(position) {                                                                                    // 8670
		var sectionEl = $('<div class="fc-' + position + '"/>');                                                             // 8671
		var buttonStr = options.header[position];                                                                            // 8672
                                                                                                                       // 8673
		if (buttonStr) {                                                                                                     // 8674
			$.each(buttonStr.split(' '), function(i) {                                                                          // 8675
				var groupChildren = $();                                                                                           // 8676
				var isOnlyButtons = true;                                                                                          // 8677
				var groupEl;                                                                                                       // 8678
                                                                                                                       // 8679
				$.each(this.split(','), function(j, buttonName) {                                                                  // 8680
					var viewSpec;                                                                                                     // 8681
					var buttonClick;                                                                                                  // 8682
					var overrideText; // text explicitly set by calendar's constructor options. overcomes icons                       // 8683
					var defaultText;                                                                                                  // 8684
					var themeIcon;                                                                                                    // 8685
					var normalIcon;                                                                                                   // 8686
					var innerHtml;                                                                                                    // 8687
					var classes;                                                                                                      // 8688
					var button;                                                                                                       // 8689
                                                                                                                       // 8690
					if (buttonName == 'title') {                                                                                      // 8691
						groupChildren = groupChildren.add($('<h2>&nbsp;</h2>')); // we always want it to take up height                  // 8692
						isOnlyButtons = false;                                                                                           // 8693
					}                                                                                                                 // 8694
					else {                                                                                                            // 8695
						viewSpec = calendar.getViewSpec(buttonName);                                                                     // 8696
                                                                                                                       // 8697
						if (viewSpec) {                                                                                                  // 8698
							buttonClick = function() {                                                                                      // 8699
								calendar.changeView(buttonName);                                                                               // 8700
							};                                                                                                              // 8701
							viewsWithButtons.push(buttonName);                                                                              // 8702
							overrideText = viewSpec.buttonTextOverride;                                                                     // 8703
							defaultText = viewSpec.buttonTextDefault;                                                                       // 8704
						}                                                                                                                // 8705
						else if (calendar[buttonName]) { // a calendar method                                                            // 8706
							buttonClick = function() {                                                                                      // 8707
								calendar[buttonName]();                                                                                        // 8708
							};                                                                                                              // 8709
							overrideText = (calendar.overrides.buttonText || {})[buttonName];                                               // 8710
							defaultText = options.buttonText[buttonName]; // everything else is considered default                          // 8711
						}                                                                                                                // 8712
                                                                                                                       // 8713
						if (buttonClick) {                                                                                               // 8714
                                                                                                                       // 8715
							themeIcon = options.themeButtonIcons[buttonName];                                                               // 8716
							normalIcon = options.buttonIcons[buttonName];                                                                   // 8717
                                                                                                                       // 8718
							if (overrideText) {                                                                                             // 8719
								innerHtml = htmlEscape(overrideText);                                                                          // 8720
							}                                                                                                               // 8721
							else if (themeIcon && options.theme) {                                                                          // 8722
								innerHtml = "<span class='ui-icon ui-icon-" + themeIcon + "'></span>";                                         // 8723
							}                                                                                                               // 8724
							else if (normalIcon && !options.theme) {                                                                        // 8725
								innerHtml = "<span class='fc-icon fc-icon-" + normalIcon + "'></span>";                                        // 8726
							}                                                                                                               // 8727
							else {                                                                                                          // 8728
								innerHtml = htmlEscape(defaultText);                                                                           // 8729
							}                                                                                                               // 8730
                                                                                                                       // 8731
							classes = [                                                                                                     // 8732
								'fc-' + buttonName + '-button',                                                                                // 8733
								tm + '-button',                                                                                                // 8734
								tm + '-state-default'                                                                                          // 8735
							];                                                                                                              // 8736
                                                                                                                       // 8737
							button = $( // type="button" so that it doesn't submit a form                                                   // 8738
								'<button type="button" class="' + classes.join(' ') + '">' +                                                   // 8739
									innerHtml +                                                                                                   // 8740
								'</button>'                                                                                                    // 8741
								)                                                                                                              // 8742
								.click(function() {                                                                                            // 8743
									// don't process clicks for disabled buttons                                                                  // 8744
									if (!button.hasClass(tm + '-state-disabled')) {                                                               // 8745
                                                                                                                       // 8746
										buttonClick();                                                                                               // 8747
                                                                                                                       // 8748
										// after the click action, if the button becomes the "active" tab, or disabled,                              // 8749
										// it should never have a hover class, so remove it now.                                                     // 8750
										if (                                                                                                         // 8751
											button.hasClass(tm + '-state-active') ||                                                                    // 8752
											button.hasClass(tm + '-state-disabled')                                                                     // 8753
										) {                                                                                                          // 8754
											button.removeClass(tm + '-state-hover');                                                                    // 8755
										}                                                                                                            // 8756
									}                                                                                                             // 8757
								})                                                                                                             // 8758
								.mousedown(function() {                                                                                        // 8759
									// the *down* effect (mouse pressed in).                                                                      // 8760
									// only on buttons that are not the "active" tab, or disabled                                                 // 8761
									button                                                                                                        // 8762
										.not('.' + tm + '-state-active')                                                                             // 8763
										.not('.' + tm + '-state-disabled')                                                                           // 8764
										.addClass(tm + '-state-down');                                                                               // 8765
								})                                                                                                             // 8766
								.mouseup(function() {                                                                                          // 8767
									// undo the *down* effect                                                                                     // 8768
									button.removeClass(tm + '-state-down');                                                                       // 8769
								})                                                                                                             // 8770
								.hover(                                                                                                        // 8771
									function() {                                                                                                  // 8772
										// the *hover* effect.                                                                                       // 8773
										// only on buttons that are not the "active" tab, or disabled                                                // 8774
										button                                                                                                       // 8775
											.not('.' + tm + '-state-active')                                                                            // 8776
											.not('.' + tm + '-state-disabled')                                                                          // 8777
											.addClass(tm + '-state-hover');                                                                             // 8778
									},                                                                                                            // 8779
									function() {                                                                                                  // 8780
										// undo the *hover* effect                                                                                   // 8781
										button                                                                                                       // 8782
											.removeClass(tm + '-state-hover')                                                                           // 8783
											.removeClass(tm + '-state-down'); // if mouseleave happens before mouseup                                   // 8784
									}                                                                                                             // 8785
								);                                                                                                             // 8786
                                                                                                                       // 8787
							groupChildren = groupChildren.add(button);                                                                      // 8788
						}                                                                                                                // 8789
					}                                                                                                                 // 8790
				});                                                                                                                // 8791
                                                                                                                       // 8792
				if (isOnlyButtons) {                                                                                               // 8793
					groupChildren                                                                                                     // 8794
						.first().addClass(tm + '-corner-left').end()                                                                     // 8795
						.last().addClass(tm + '-corner-right').end();                                                                    // 8796
				}                                                                                                                  // 8797
                                                                                                                       // 8798
				if (groupChildren.length > 1) {                                                                                    // 8799
					groupEl = $('<div/>');                                                                                            // 8800
					if (isOnlyButtons) {                                                                                              // 8801
						groupEl.addClass('fc-button-group');                                                                             // 8802
					}                                                                                                                 // 8803
					groupEl.append(groupChildren);                                                                                    // 8804
					sectionEl.append(groupEl);                                                                                        // 8805
				}                                                                                                                  // 8806
				else {                                                                                                             // 8807
					sectionEl.append(groupChildren); // 1 or 0 children                                                               // 8808
				}                                                                                                                  // 8809
			});                                                                                                                 // 8810
		}                                                                                                                    // 8811
                                                                                                                       // 8812
		return sectionEl;                                                                                                    // 8813
	}                                                                                                                     // 8814
	                                                                                                                      // 8815
	                                                                                                                      // 8816
	function updateTitle(text) {                                                                                          // 8817
		el.find('h2').text(text);                                                                                            // 8818
	}                                                                                                                     // 8819
	                                                                                                                      // 8820
	                                                                                                                      // 8821
	function activateButton(buttonName) {                                                                                 // 8822
		el.find('.fc-' + buttonName + '-button')                                                                             // 8823
			.addClass(tm + '-state-active');                                                                                    // 8824
	}                                                                                                                     // 8825
	                                                                                                                      // 8826
	                                                                                                                      // 8827
	function deactivateButton(buttonName) {                                                                               // 8828
		el.find('.fc-' + buttonName + '-button')                                                                             // 8829
			.removeClass(tm + '-state-active');                                                                                 // 8830
	}                                                                                                                     // 8831
	                                                                                                                      // 8832
	                                                                                                                      // 8833
	function disableButton(buttonName) {                                                                                  // 8834
		el.find('.fc-' + buttonName + '-button')                                                                             // 8835
			.attr('disabled', 'disabled')                                                                                       // 8836
			.addClass(tm + '-state-disabled');                                                                                  // 8837
	}                                                                                                                     // 8838
	                                                                                                                      // 8839
	                                                                                                                      // 8840
	function enableButton(buttonName) {                                                                                   // 8841
		el.find('.fc-' + buttonName + '-button')                                                                             // 8842
			.removeAttr('disabled')                                                                                             // 8843
			.removeClass(tm + '-state-disabled');                                                                               // 8844
	}                                                                                                                     // 8845
                                                                                                                       // 8846
                                                                                                                       // 8847
	function getViewsWithButtons() {                                                                                      // 8848
		return viewsWithButtons;                                                                                             // 8849
	}                                                                                                                     // 8850
                                                                                                                       // 8851
}                                                                                                                      // 8852
                                                                                                                       // 8853
;;                                                                                                                     // 8854
                                                                                                                       // 8855
fc.sourceNormalizers = [];                                                                                             // 8856
fc.sourceFetchers = [];                                                                                                // 8857
                                                                                                                       // 8858
var ajaxDefaults = {                                                                                                   // 8859
	dataType: 'json',                                                                                                     // 8860
	cache: false                                                                                                          // 8861
};                                                                                                                     // 8862
                                                                                                                       // 8863
var eventGUID = 1;                                                                                                     // 8864
                                                                                                                       // 8865
                                                                                                                       // 8866
function EventManager(options) { // assumed to be a calendar                                                           // 8867
	var t = this;                                                                                                         // 8868
	                                                                                                                      // 8869
	                                                                                                                      // 8870
	// exports                                                                                                            // 8871
	t.isFetchNeeded = isFetchNeeded;                                                                                      // 8872
	t.fetchEvents = fetchEvents;                                                                                          // 8873
	t.addEventSource = addEventSource;                                                                                    // 8874
	t.removeEventSource = removeEventSource;                                                                              // 8875
	t.updateEvent = updateEvent;                                                                                          // 8876
	t.renderEvent = renderEvent;                                                                                          // 8877
	t.removeEvents = removeEvents;                                                                                        // 8878
	t.clientEvents = clientEvents;                                                                                        // 8879
	t.mutateEvent = mutateEvent;                                                                                          // 8880
	t.normalizeEventRange = normalizeEventRange;                                                                          // 8881
	t.normalizeEventRangeTimes = normalizeEventRangeTimes;                                                                // 8882
	t.ensureVisibleEventRange = ensureVisibleEventRange;                                                                  // 8883
	                                                                                                                      // 8884
	                                                                                                                      // 8885
	// imports                                                                                                            // 8886
	var trigger = t.trigger;                                                                                              // 8887
	var getView = t.getView;                                                                                              // 8888
	var reportEvents = t.reportEvents;                                                                                    // 8889
	                                                                                                                      // 8890
	                                                                                                                      // 8891
	// locals                                                                                                             // 8892
	var stickySource = { events: [] };                                                                                    // 8893
	var sources = [ stickySource ];                                                                                       // 8894
	var rangeStart, rangeEnd;                                                                                             // 8895
	var currentFetchID = 0;                                                                                               // 8896
	var pendingSourceCnt = 0;                                                                                             // 8897
	var loadingLevel = 0;                                                                                                 // 8898
	var cache = []; // holds events that have already been expanded                                                       // 8899
                                                                                                                       // 8900
                                                                                                                       // 8901
	$.each(                                                                                                               // 8902
		(options.events ? [ options.events ] : []).concat(options.eventSources || []),                                       // 8903
		function(i, sourceInput) {                                                                                           // 8904
			var source = buildEventSource(sourceInput);                                                                         // 8905
			if (source) {                                                                                                       // 8906
				sources.push(source);                                                                                              // 8907
			}                                                                                                                   // 8908
		}                                                                                                                    // 8909
	);                                                                                                                    // 8910
	                                                                                                                      // 8911
	                                                                                                                      // 8912
	                                                                                                                      // 8913
	/* Fetching                                                                                                           // 8914
	-----------------------------------------------------------------------------*/                                       // 8915
	                                                                                                                      // 8916
	                                                                                                                      // 8917
	function isFetchNeeded(start, end) {                                                                                  // 8918
		return !rangeStart || // nothing has been fetched yet?                                                               // 8919
			// or, a part of the new range is outside of the old range? (after normalizing)                                     // 8920
			start.clone().stripZone() < rangeStart.clone().stripZone() ||                                                       // 8921
			end.clone().stripZone() > rangeEnd.clone().stripZone();                                                             // 8922
	}                                                                                                                     // 8923
	                                                                                                                      // 8924
	                                                                                                                      // 8925
	function fetchEvents(start, end) {                                                                                    // 8926
		rangeStart = start;                                                                                                  // 8927
		rangeEnd = end;                                                                                                      // 8928
		cache = [];                                                                                                          // 8929
		var fetchID = ++currentFetchID;                                                                                      // 8930
		var len = sources.length;                                                                                            // 8931
		pendingSourceCnt = len;                                                                                              // 8932
		for (var i=0; i<len; i++) {                                                                                          // 8933
			fetchEventSource(sources[i], fetchID);                                                                              // 8934
		}                                                                                                                    // 8935
	}                                                                                                                     // 8936
	                                                                                                                      // 8937
	                                                                                                                      // 8938
	function fetchEventSource(source, fetchID) {                                                                          // 8939
		_fetchEventSource(source, function(eventInputs) {                                                                    // 8940
			var isArraySource = $.isArray(source.events);                                                                       // 8941
			var i, eventInput;                                                                                                  // 8942
			var abstractEvent;                                                                                                  // 8943
                                                                                                                       // 8944
			if (fetchID == currentFetchID) {                                                                                    // 8945
                                                                                                                       // 8946
				if (eventInputs) {                                                                                                 // 8947
					for (i = 0; i < eventInputs.length; i++) {                                                                        // 8948
						eventInput = eventInputs[i];                                                                                     // 8949
                                                                                                                       // 8950
						if (isArraySource) { // array sources have already been convert to Event Objects                                 // 8951
							abstractEvent = eventInput;                                                                                     // 8952
						}                                                                                                                // 8953
						else {                                                                                                           // 8954
							abstractEvent = buildEventFromInput(eventInput, source);                                                        // 8955
						}                                                                                                                // 8956
                                                                                                                       // 8957
						if (abstractEvent) { // not false (an invalid event)                                                             // 8958
							cache.push.apply(                                                                                               // 8959
								cache,                                                                                                         // 8960
								expandEvent(abstractEvent) // add individual expanded events to the cache                                      // 8961
							);                                                                                                              // 8962
						}                                                                                                                // 8963
					}                                                                                                                 // 8964
				}                                                                                                                  // 8965
                                                                                                                       // 8966
				pendingSourceCnt--;                                                                                                // 8967
				if (!pendingSourceCnt) {                                                                                           // 8968
					reportEvents(cache);                                                                                              // 8969
				}                                                                                                                  // 8970
			}                                                                                                                   // 8971
		});                                                                                                                  // 8972
	}                                                                                                                     // 8973
	                                                                                                                      // 8974
	                                                                                                                      // 8975
	function _fetchEventSource(source, callback) {                                                                        // 8976
		var i;                                                                                                               // 8977
		var fetchers = fc.sourceFetchers;                                                                                    // 8978
		var res;                                                                                                             // 8979
                                                                                                                       // 8980
		for (i=0; i<fetchers.length; i++) {                                                                                  // 8981
			res = fetchers[i].call(                                                                                             // 8982
				t, // this, the Calendar object                                                                                    // 8983
				source,                                                                                                            // 8984
				rangeStart.clone(),                                                                                                // 8985
				rangeEnd.clone(),                                                                                                  // 8986
				options.timezone,                                                                                                  // 8987
				callback                                                                                                           // 8988
			);                                                                                                                  // 8989
                                                                                                                       // 8990
			if (res === true) {                                                                                                 // 8991
				// the fetcher is in charge. made its own async request                                                            // 8992
				return;                                                                                                            // 8993
			}                                                                                                                   // 8994
			else if (typeof res == 'object') {                                                                                  // 8995
				// the fetcher returned a new source. process it                                                                   // 8996
				_fetchEventSource(res, callback);                                                                                  // 8997
				return;                                                                                                            // 8998
			}                                                                                                                   // 8999
		}                                                                                                                    // 9000
                                                                                                                       // 9001
		var events = source.events;                                                                                          // 9002
		if (events) {                                                                                                        // 9003
			if ($.isFunction(events)) {                                                                                         // 9004
				pushLoading();                                                                                                     // 9005
				events.call(                                                                                                       // 9006
					t, // this, the Calendar object                                                                                   // 9007
					rangeStart.clone(),                                                                                               // 9008
					rangeEnd.clone(),                                                                                                 // 9009
					options.timezone,                                                                                                 // 9010
					function(events) {                                                                                                // 9011
						callback(events);                                                                                                // 9012
						popLoading();                                                                                                    // 9013
					}                                                                                                                 // 9014
				);                                                                                                                 // 9015
			}                                                                                                                   // 9016
			else if ($.isArray(events)) {                                                                                       // 9017
				callback(events);                                                                                                  // 9018
			}                                                                                                                   // 9019
			else {                                                                                                              // 9020
				callback();                                                                                                        // 9021
			}                                                                                                                   // 9022
		}else{                                                                                                               // 9023
			var url = source.url;                                                                                               // 9024
			if (url) {                                                                                                          // 9025
				var success = source.success;                                                                                      // 9026
				var error = source.error;                                                                                          // 9027
				var complete = source.complete;                                                                                    // 9028
                                                                                                                       // 9029
				// retrieve any outbound GET/POST $.ajax data from the options                                                     // 9030
				var customData;                                                                                                    // 9031
				if ($.isFunction(source.data)) {                                                                                   // 9032
					// supplied as a function that returns a key/value object                                                         // 9033
					customData = source.data();                                                                                       // 9034
				}                                                                                                                  // 9035
				else {                                                                                                             // 9036
					// supplied as a straight key/value object                                                                        // 9037
					customData = source.data;                                                                                         // 9038
				}                                                                                                                  // 9039
                                                                                                                       // 9040
				// use a copy of the custom data so we can modify the parameters                                                   // 9041
				// and not affect the passed-in object.                                                                            // 9042
				var data = $.extend({}, customData || {});                                                                         // 9043
                                                                                                                       // 9044
				var startParam = firstDefined(source.startParam, options.startParam);                                              // 9045
				var endParam = firstDefined(source.endParam, options.endParam);                                                    // 9046
				var timezoneParam = firstDefined(source.timezoneParam, options.timezoneParam);                                     // 9047
                                                                                                                       // 9048
				if (startParam) {                                                                                                  // 9049
					data[startParam] = rangeStart.format();                                                                           // 9050
				}                                                                                                                  // 9051
				if (endParam) {                                                                                                    // 9052
					data[endParam] = rangeEnd.format();                                                                               // 9053
				}                                                                                                                  // 9054
				if (options.timezone && options.timezone != 'local') {                                                             // 9055
					data[timezoneParam] = options.timezone;                                                                           // 9056
				}                                                                                                                  // 9057
                                                                                                                       // 9058
				pushLoading();                                                                                                     // 9059
				$.ajax($.extend({}, ajaxDefaults, source, {                                                                        // 9060
					data: data,                                                                                                       // 9061
					success: function(events) {                                                                                       // 9062
						events = events || [];                                                                                           // 9063
						var res = applyAll(success, this, arguments);                                                                    // 9064
						if ($.isArray(res)) {                                                                                            // 9065
							events = res;                                                                                                   // 9066
						}                                                                                                                // 9067
						callback(events);                                                                                                // 9068
					},                                                                                                                // 9069
					error: function() {                                                                                               // 9070
						applyAll(error, this, arguments);                                                                                // 9071
						callback();                                                                                                      // 9072
					},                                                                                                                // 9073
					complete: function() {                                                                                            // 9074
						applyAll(complete, this, arguments);                                                                             // 9075
						popLoading();                                                                                                    // 9076
					}                                                                                                                 // 9077
				}));                                                                                                               // 9078
			}else{                                                                                                              // 9079
				callback();                                                                                                        // 9080
			}                                                                                                                   // 9081
		}                                                                                                                    // 9082
	}                                                                                                                     // 9083
	                                                                                                                      // 9084
	                                                                                                                      // 9085
	                                                                                                                      // 9086
	/* Sources                                                                                                            // 9087
	-----------------------------------------------------------------------------*/                                       // 9088
	                                                                                                                      // 9089
                                                                                                                       // 9090
	function addEventSource(sourceInput) {                                                                                // 9091
		var source = buildEventSource(sourceInput);                                                                          // 9092
		if (source) {                                                                                                        // 9093
			sources.push(source);                                                                                               // 9094
			pendingSourceCnt++;                                                                                                 // 9095
			fetchEventSource(source, currentFetchID); // will eventually call reportEvents                                      // 9096
		}                                                                                                                    // 9097
	}                                                                                                                     // 9098
                                                                                                                       // 9099
                                                                                                                       // 9100
	function buildEventSource(sourceInput) { // will return undefined if invalid source                                   // 9101
		var normalizers = fc.sourceNormalizers;                                                                              // 9102
		var source;                                                                                                          // 9103
		var i;                                                                                                               // 9104
                                                                                                                       // 9105
		if ($.isFunction(sourceInput) || $.isArray(sourceInput)) {                                                           // 9106
			source = { events: sourceInput };                                                                                   // 9107
		}                                                                                                                    // 9108
		else if (typeof sourceInput === 'string') {                                                                          // 9109
			source = { url: sourceInput };                                                                                      // 9110
		}                                                                                                                    // 9111
		else if (typeof sourceInput === 'object') {                                                                          // 9112
			source = $.extend({}, sourceInput); // shallow copy                                                                 // 9113
		}                                                                                                                    // 9114
                                                                                                                       // 9115
		if (source) {                                                                                                        // 9116
                                                                                                                       // 9117
			// TODO: repeat code, same code for event classNames                                                                // 9118
			if (source.className) {                                                                                             // 9119
				if (typeof source.className === 'string') {                                                                        // 9120
					source.className = source.className.split(/\s+/);                                                                 // 9121
				}                                                                                                                  // 9122
				// otherwise, assumed to be an array                                                                               // 9123
			}                                                                                                                   // 9124
			else {                                                                                                              // 9125
				source.className = [];                                                                                             // 9126
			}                                                                                                                   // 9127
                                                                                                                       // 9128
			// for array sources, we convert to standard Event Objects up front                                                 // 9129
			if ($.isArray(source.events)) {                                                                                     // 9130
				source.origArray = source.events; // for removeEventSource                                                         // 9131
				source.events = $.map(source.events, function(eventInput) {                                                        // 9132
					return buildEventFromInput(eventInput, source);                                                                   // 9133
				});                                                                                                                // 9134
			}                                                                                                                   // 9135
                                                                                                                       // 9136
			for (i=0; i<normalizers.length; i++) {                                                                              // 9137
				normalizers[i].call(t, source);                                                                                    // 9138
			}                                                                                                                   // 9139
                                                                                                                       // 9140
			return source;                                                                                                      // 9141
		}                                                                                                                    // 9142
	}                                                                                                                     // 9143
                                                                                                                       // 9144
                                                                                                                       // 9145
	function removeEventSource(source) {                                                                                  // 9146
		sources = $.grep(sources, function(src) {                                                                            // 9147
			return !isSourcesEqual(src, source);                                                                                // 9148
		});                                                                                                                  // 9149
		// remove all client events from that source                                                                         // 9150
		cache = $.grep(cache, function(e) {                                                                                  // 9151
			return !isSourcesEqual(e.source, source);                                                                           // 9152
		});                                                                                                                  // 9153
		reportEvents(cache);                                                                                                 // 9154
	}                                                                                                                     // 9155
                                                                                                                       // 9156
                                                                                                                       // 9157
	function isSourcesEqual(source1, source2) {                                                                           // 9158
		return source1 && source2 && getSourcePrimitive(source1) == getSourcePrimitive(source2);                             // 9159
	}                                                                                                                     // 9160
                                                                                                                       // 9161
                                                                                                                       // 9162
	function getSourcePrimitive(source) {                                                                                 // 9163
		return (                                                                                                             // 9164
			(typeof source === 'object') ? // a normalized event source?                                                        // 9165
				(source.origArray || source.googleCalendarId || source.url || source.events) : // get the primitive                // 9166
				null                                                                                                               // 9167
		) ||                                                                                                                 // 9168
		source; // the given argument *is* the primitive                                                                     // 9169
	}                                                                                                                     // 9170
	                                                                                                                      // 9171
	                                                                                                                      // 9172
	                                                                                                                      // 9173
	/* Manipulation                                                                                                       // 9174
	-----------------------------------------------------------------------------*/                                       // 9175
                                                                                                                       // 9176
                                                                                                                       // 9177
	// Only ever called from the externally-facing API                                                                    // 9178
	function updateEvent(event) {                                                                                         // 9179
                                                                                                                       // 9180
		// massage start/end values, even if date string values                                                              // 9181
		event.start = t.moment(event.start);                                                                                 // 9182
		if (event.end) {                                                                                                     // 9183
			event.end = t.moment(event.end);                                                                                    // 9184
		}                                                                                                                    // 9185
		else {                                                                                                               // 9186
			event.end = null;                                                                                                   // 9187
		}                                                                                                                    // 9188
                                                                                                                       // 9189
		mutateEvent(event, getMiscEventProps(event)); // will handle start/end/allDay normalization                          // 9190
		reportEvents(cache); // reports event modifications (so we can redraw)                                               // 9191
	}                                                                                                                     // 9192
                                                                                                                       // 9193
                                                                                                                       // 9194
	// Returns a hash of misc event properties that should be copied over to related events.                              // 9195
	function getMiscEventProps(event) {                                                                                   // 9196
		var props = {};                                                                                                      // 9197
                                                                                                                       // 9198
		$.each(event, function(name, val) {                                                                                  // 9199
			if (isMiscEventPropName(name)) {                                                                                    // 9200
				if (val !== undefined && isAtomic(val)) { // a defined non-object                                                  // 9201
					props[name] = val;                                                                                                // 9202
				}                                                                                                                  // 9203
			}                                                                                                                   // 9204
		});                                                                                                                  // 9205
                                                                                                                       // 9206
		return props;                                                                                                        // 9207
	}                                                                                                                     // 9208
                                                                                                                       // 9209
	// non-date-related, non-id-related, non-secret                                                                       // 9210
	function isMiscEventPropName(name) {                                                                                  // 9211
		return !/^_|^(id|allDay|start|end)$/.test(name);                                                                     // 9212
	}                                                                                                                     // 9213
                                                                                                                       // 9214
	                                                                                                                      // 9215
	// returns the expanded events that were created                                                                      // 9216
	function renderEvent(eventInput, stick) {                                                                             // 9217
		var abstractEvent = buildEventFromInput(eventInput);                                                                 // 9218
		var events;                                                                                                          // 9219
		var i, event;                                                                                                        // 9220
                                                                                                                       // 9221
		if (abstractEvent) { // not false (a valid input)                                                                    // 9222
			events = expandEvent(abstractEvent);                                                                                // 9223
                                                                                                                       // 9224
			for (i = 0; i < events.length; i++) {                                                                               // 9225
				event = events[i];                                                                                                 // 9226
                                                                                                                       // 9227
				if (!event.source) {                                                                                               // 9228
					if (stick) {                                                                                                      // 9229
						stickySource.events.push(event);                                                                                 // 9230
						event.source = stickySource;                                                                                     // 9231
					}                                                                                                                 // 9232
					cache.push(event);                                                                                                // 9233
				}                                                                                                                  // 9234
			}                                                                                                                   // 9235
                                                                                                                       // 9236
			reportEvents(cache);                                                                                                // 9237
                                                                                                                       // 9238
			return events;                                                                                                      // 9239
		}                                                                                                                    // 9240
                                                                                                                       // 9241
		return [];                                                                                                           // 9242
	}                                                                                                                     // 9243
	                                                                                                                      // 9244
	                                                                                                                      // 9245
	function removeEvents(filter) {                                                                                       // 9246
		var eventID;                                                                                                         // 9247
		var i;                                                                                                               // 9248
                                                                                                                       // 9249
		if (filter == null) { // null or undefined. remove all events                                                        // 9250
			filter = function() { return true; }; // will always match                                                          // 9251
		}                                                                                                                    // 9252
		else if (!$.isFunction(filter)) { // an event ID                                                                     // 9253
			eventID = filter + '';                                                                                              // 9254
			filter = function(event) {                                                                                          // 9255
				return event._id == eventID;                                                                                       // 9256
			};                                                                                                                  // 9257
		}                                                                                                                    // 9258
                                                                                                                       // 9259
		// Purge event(s) from our local cache                                                                               // 9260
		cache = $.grep(cache, filter, true); // inverse=true                                                                 // 9261
                                                                                                                       // 9262
		// Remove events from array sources.                                                                                 // 9263
		// This works because they have been converted to official Event Objects up front.                                   // 9264
		// (and as a result, event._id has been calculated).                                                                 // 9265
		for (i=0; i<sources.length; i++) {                                                                                   // 9266
			if ($.isArray(sources[i].events)) {                                                                                 // 9267
				sources[i].events = $.grep(sources[i].events, filter, true);                                                       // 9268
			}                                                                                                                   // 9269
		}                                                                                                                    // 9270
                                                                                                                       // 9271
		reportEvents(cache);                                                                                                 // 9272
	}                                                                                                                     // 9273
	                                                                                                                      // 9274
	                                                                                                                      // 9275
	function clientEvents(filter) {                                                                                       // 9276
		if ($.isFunction(filter)) {                                                                                          // 9277
			return $.grep(cache, filter);                                                                                       // 9278
		}                                                                                                                    // 9279
		else if (filter != null) { // not null, not undefined. an event ID                                                   // 9280
			filter += '';                                                                                                       // 9281
			return $.grep(cache, function(e) {                                                                                  // 9282
				return e._id == filter;                                                                                            // 9283
			});                                                                                                                 // 9284
		}                                                                                                                    // 9285
		return cache; // else, return all                                                                                    // 9286
	}                                                                                                                     // 9287
	                                                                                                                      // 9288
	                                                                                                                      // 9289
	                                                                                                                      // 9290
	/* Loading State                                                                                                      // 9291
	-----------------------------------------------------------------------------*/                                       // 9292
	                                                                                                                      // 9293
	                                                                                                                      // 9294
	function pushLoading() {                                                                                              // 9295
		if (!(loadingLevel++)) {                                                                                             // 9296
			trigger('loading', null, true, getView());                                                                          // 9297
		}                                                                                                                    // 9298
	}                                                                                                                     // 9299
	                                                                                                                      // 9300
	                                                                                                                      // 9301
	function popLoading() {                                                                                               // 9302
		if (!(--loadingLevel)) {                                                                                             // 9303
			trigger('loading', null, false, getView());                                                                         // 9304
		}                                                                                                                    // 9305
	}                                                                                                                     // 9306
	                                                                                                                      // 9307
	                                                                                                                      // 9308
	                                                                                                                      // 9309
	/* Event Normalization                                                                                                // 9310
	-----------------------------------------------------------------------------*/                                       // 9311
                                                                                                                       // 9312
                                                                                                                       // 9313
	// Given a raw object with key/value properties, returns an "abstract" Event object.                                  // 9314
	// An "abstract" event is an event that, if recurring, will not have been expanded yet.                               // 9315
	// Will return `false` when input is invalid.                                                                         // 9316
	// `source` is optional                                                                                               // 9317
	function buildEventFromInput(input, source) {                                                                         // 9318
		var out = {};                                                                                                        // 9319
		var start, end;                                                                                                      // 9320
		var allDay;                                                                                                          // 9321
                                                                                                                       // 9322
		if (options.eventDataTransform) {                                                                                    // 9323
			input = options.eventDataTransform(input);                                                                          // 9324
		}                                                                                                                    // 9325
		if (source && source.eventDataTransform) {                                                                           // 9326
			input = source.eventDataTransform(input);                                                                           // 9327
		}                                                                                                                    // 9328
                                                                                                                       // 9329
		// Copy all properties over to the resulting object.                                                                 // 9330
		// The special-case properties will be copied over afterwards.                                                       // 9331
		$.extend(out, input);                                                                                                // 9332
                                                                                                                       // 9333
		if (source) {                                                                                                        // 9334
			out.source = source;                                                                                                // 9335
		}                                                                                                                    // 9336
                                                                                                                       // 9337
		out._id = input._id || (input.id === undefined ? '_fc' + eventGUID++ : input.id + '');                               // 9338
                                                                                                                       // 9339
		if (input.className) {                                                                                               // 9340
			if (typeof input.className == 'string') {                                                                           // 9341
				out.className = input.className.split(/\s+/);                                                                      // 9342
			}                                                                                                                   // 9343
			else { // assumed to be an array                                                                                    // 9344
				out.className = input.className;                                                                                   // 9345
			}                                                                                                                   // 9346
		}                                                                                                                    // 9347
		else {                                                                                                               // 9348
			out.className = [];                                                                                                 // 9349
		}                                                                                                                    // 9350
                                                                                                                       // 9351
		start = input.start || input.date; // "date" is an alias for "start"                                                 // 9352
		end = input.end;                                                                                                     // 9353
                                                                                                                       // 9354
		// parse as a time (Duration) if applicable                                                                          // 9355
		if (isTimeString(start)) {                                                                                           // 9356
			start = moment.duration(start);                                                                                     // 9357
		}                                                                                                                    // 9358
		if (isTimeString(end)) {                                                                                             // 9359
			end = moment.duration(end);                                                                                         // 9360
		}                                                                                                                    // 9361
                                                                                                                       // 9362
		if (input.dow || moment.isDuration(start) || moment.isDuration(end)) {                                               // 9363
                                                                                                                       // 9364
			// the event is "abstract" (recurring) so don't calculate exact start/end dates just yet                            // 9365
			out.start = start ? moment.duration(start) : null; // will be a Duration or null                                    // 9366
			out.end = end ? moment.duration(end) : null; // will be a Duration or null                                          // 9367
			out._recurring = true; // our internal marker                                                                       // 9368
		}                                                                                                                    // 9369
		else {                                                                                                               // 9370
                                                                                                                       // 9371
			if (start) {                                                                                                        // 9372
				start = t.moment(start);                                                                                           // 9373
				if (!start.isValid()) {                                                                                            // 9374
					return false;                                                                                                     // 9375
				}                                                                                                                  // 9376
			}                                                                                                                   // 9377
                                                                                                                       // 9378
			if (end) {                                                                                                          // 9379
				end = t.moment(end);                                                                                               // 9380
				if (!end.isValid()) {                                                                                              // 9381
					end = null; // let defaults take over                                                                             // 9382
				}                                                                                                                  // 9383
			}                                                                                                                   // 9384
                                                                                                                       // 9385
			allDay = input.allDay;                                                                                              // 9386
			if (allDay === undefined) { // still undefined? fallback to default                                                 // 9387
				allDay = firstDefined(                                                                                             // 9388
					source ? source.allDayDefault : undefined,                                                                        // 9389
					options.allDayDefault                                                                                             // 9390
				);                                                                                                                 // 9391
				// still undefined? normalizeEventRange will calculate it                                                          // 9392
			}                                                                                                                   // 9393
                                                                                                                       // 9394
			assignDatesToEvent(start, end, allDay, out);                                                                        // 9395
		}                                                                                                                    // 9396
                                                                                                                       // 9397
		return out;                                                                                                          // 9398
	}                                                                                                                     // 9399
                                                                                                                       // 9400
                                                                                                                       // 9401
	// Normalizes and assigns the given dates to the given partially-formed event object.                                 // 9402
	// NOTE: mutates the given start/end moments. does not make a copy.                                                   // 9403
	function assignDatesToEvent(start, end, allDay, event) {                                                              // 9404
		event.start = start;                                                                                                 // 9405
		event.end = end;                                                                                                     // 9406
		event.allDay = allDay;                                                                                               // 9407
		normalizeEventRange(event);                                                                                          // 9408
		backupEventDates(event);                                                                                             // 9409
	}                                                                                                                     // 9410
                                                                                                                       // 9411
                                                                                                                       // 9412
	// Ensures proper values for allDay/start/end. Accepts an Event object, or a plain object with event-ish properties.  // 9413
	// NOTE: Will modify the given object.                                                                                // 9414
	function normalizeEventRange(props) {                                                                                 // 9415
                                                                                                                       // 9416
		normalizeEventRangeTimes(props);                                                                                     // 9417
                                                                                                                       // 9418
		if (props.end && !props.end.isAfter(props.start)) {                                                                  // 9419
			props.end = null;                                                                                                   // 9420
		}                                                                                                                    // 9421
                                                                                                                       // 9422
		if (!props.end) {                                                                                                    // 9423
			if (options.forceEventDuration) {                                                                                   // 9424
				props.end = t.getDefaultEventEnd(props.allDay, props.start);                                                       // 9425
			}                                                                                                                   // 9426
			else {                                                                                                              // 9427
				props.end = null;                                                                                                  // 9428
			}                                                                                                                   // 9429
		}                                                                                                                    // 9430
	}                                                                                                                     // 9431
                                                                                                                       // 9432
                                                                                                                       // 9433
	// Ensures the allDay property exists and the timeliness of the start/end dates are consistent                        // 9434
	function normalizeEventRangeTimes(range) {                                                                            // 9435
		if (range.allDay == null) {                                                                                          // 9436
			range.allDay = !(range.start.hasTime() || (range.end && range.end.hasTime()));                                      // 9437
		}                                                                                                                    // 9438
                                                                                                                       // 9439
		if (range.allDay) {                                                                                                  // 9440
			range.start.stripTime();                                                                                            // 9441
			if (range.end) {                                                                                                    // 9442
				// TODO: consider nextDayThreshold here? If so, will require a lot of testing and adjustment                       // 9443
				range.end.stripTime();                                                                                             // 9444
			}                                                                                                                   // 9445
		}                                                                                                                    // 9446
		else {                                                                                                               // 9447
			if (!range.start.hasTime()) {                                                                                       // 9448
				range.start = t.rezoneDate(range.start); // will assign a 00:00 time                                               // 9449
			}                                                                                                                   // 9450
			if (range.end && !range.end.hasTime()) {                                                                            // 9451
				range.end = t.rezoneDate(range.end); // will assign a 00:00 time                                                   // 9452
			}                                                                                                                   // 9453
		}                                                                                                                    // 9454
	}                                                                                                                     // 9455
                                                                                                                       // 9456
                                                                                                                       // 9457
	// If `range` is a proper range with a start and end, returns the original object.                                    // 9458
	// If missing an end, computes a new range with an end, computing it as if it were an event.                          // 9459
	// TODO: make this a part of the event -> eventRange system                                                           // 9460
	function ensureVisibleEventRange(range) {                                                                             // 9461
		var allDay;                                                                                                          // 9462
                                                                                                                       // 9463
		if (!range.end) {                                                                                                    // 9464
                                                                                                                       // 9465
			allDay = range.allDay; // range might be more event-ish than we think                                               // 9466
			if (allDay == null) {                                                                                               // 9467
				allDay = !range.start.hasTime();                                                                                   // 9468
			}                                                                                                                   // 9469
                                                                                                                       // 9470
			range = $.extend({}, range); // make a copy, copying over other misc properties                                     // 9471
			range.end = t.getDefaultEventEnd(allDay, range.start);                                                              // 9472
		}                                                                                                                    // 9473
		return range;                                                                                                        // 9474
	}                                                                                                                     // 9475
                                                                                                                       // 9476
                                                                                                                       // 9477
	// If the given event is a recurring event, break it down into an array of individual instances.                      // 9478
	// If not a recurring event, return an array with the single original event.                                          // 9479
	// If given a falsy input (probably because of a failed buildEventFromInput call), returns an empty array.            // 9480
	// HACK: can override the recurring window by providing custom rangeStart/rangeEnd (for businessHours).               // 9481
	function expandEvent(abstractEvent, _rangeStart, _rangeEnd) {                                                         // 9482
		var events = [];                                                                                                     // 9483
		var dowHash;                                                                                                         // 9484
		var dow;                                                                                                             // 9485
		var i;                                                                                                               // 9486
		var date;                                                                                                            // 9487
		var startTime, endTime;                                                                                              // 9488
		var start, end;                                                                                                      // 9489
		var event;                                                                                                           // 9490
                                                                                                                       // 9491
		_rangeStart = _rangeStart || rangeStart;                                                                             // 9492
		_rangeEnd = _rangeEnd || rangeEnd;                                                                                   // 9493
                                                                                                                       // 9494
		if (abstractEvent) {                                                                                                 // 9495
			if (abstractEvent._recurring) {                                                                                     // 9496
                                                                                                                       // 9497
				// make a boolean hash as to whether the event occurs on each day-of-week                                          // 9498
				if ((dow = abstractEvent.dow)) {                                                                                   // 9499
					dowHash = {};                                                                                                     // 9500
					for (i = 0; i < dow.length; i++) {                                                                                // 9501
						dowHash[dow[i]] = true;                                                                                          // 9502
					}                                                                                                                 // 9503
				}                                                                                                                  // 9504
                                                                                                                       // 9505
				// iterate through every day in the current range                                                                  // 9506
				date = _rangeStart.clone().stripTime(); // holds the date of the current day                                       // 9507
				while (date.isBefore(_rangeEnd)) {                                                                                 // 9508
                                                                                                                       // 9509
					if (!dowHash || dowHash[date.day()]) { // if everyday, or this particular day-of-week                             // 9510
                                                                                                                       // 9511
						startTime = abstractEvent.start; // the stored start and end properties are times (Durations)                    // 9512
						endTime = abstractEvent.end; // "                                                                                // 9513
						start = date.clone();                                                                                            // 9514
						end = null;                                                                                                      // 9515
                                                                                                                       // 9516
						if (startTime) {                                                                                                 // 9517
							start = start.time(startTime);                                                                                  // 9518
						}                                                                                                                // 9519
						if (endTime) {                                                                                                   // 9520
							end = date.clone().time(endTime);                                                                               // 9521
						}                                                                                                                // 9522
                                                                                                                       // 9523
						event = $.extend({}, abstractEvent); // make a copy of the original                                              // 9524
						assignDatesToEvent(                                                                                              // 9525
							start, end,                                                                                                     // 9526
							!startTime && !endTime, // allDay?                                                                              // 9527
							event                                                                                                           // 9528
						);                                                                                                               // 9529
						events.push(event);                                                                                              // 9530
					}                                                                                                                 // 9531
                                                                                                                       // 9532
					date.add(1, 'days');                                                                                              // 9533
				}                                                                                                                  // 9534
			}                                                                                                                   // 9535
			else {                                                                                                              // 9536
				events.push(abstractEvent); // return the original event. will be a one-item array                                 // 9537
			}                                                                                                                   // 9538
		}                                                                                                                    // 9539
                                                                                                                       // 9540
		return events;                                                                                                       // 9541
	}                                                                                                                     // 9542
                                                                                                                       // 9543
                                                                                                                       // 9544
                                                                                                                       // 9545
	/* Event Modification Math                                                                                            // 9546
	-----------------------------------------------------------------------------------------*/                           // 9547
                                                                                                                       // 9548
                                                                                                                       // 9549
	// Modifies an event and all related events by applying the given properties.                                         // 9550
	// Special date-diffing logic is used for manipulation of dates.                                                      // 9551
	// If `props` does not contain start/end dates, the updated values are assumed to be the event's current start/end.   // 9552
	// All date comparisons are done against the event's pristine _start and _end dates.                                  // 9553
	// Returns an object with delta information and a function to undo all operations.                                    // 9554
	// For making computations in a granularity greater than day/time, specify largeUnit.                                 // 9555
	// NOTE: The given `newProps` might be mutated for normalization purposes.                                            // 9556
	function mutateEvent(event, newProps, largeUnit) {                                                                    // 9557
		var miscProps = {};                                                                                                  // 9558
		var oldProps;                                                                                                        // 9559
		var clearEnd;                                                                                                        // 9560
		var startDelta;                                                                                                      // 9561
		var endDelta;                                                                                                        // 9562
		var durationDelta;                                                                                                   // 9563
		var undoFunc;                                                                                                        // 9564
                                                                                                                       // 9565
		// diffs the dates in the appropriate way, returning a duration                                                      // 9566
		function diffDates(date1, date0) { // date1 - date0                                                                  // 9567
			if (largeUnit) {                                                                                                    // 9568
				return diffByUnit(date1, date0, largeUnit);                                                                        // 9569
			}                                                                                                                   // 9570
			else if (newProps.allDay) {                                                                                         // 9571
				return diffDay(date1, date0);                                                                                      // 9572
			}                                                                                                                   // 9573
			else {                                                                                                              // 9574
				return diffDayTime(date1, date0);                                                                                  // 9575
			}                                                                                                                   // 9576
		}                                                                                                                    // 9577
                                                                                                                       // 9578
		newProps = newProps || {};                                                                                           // 9579
                                                                                                                       // 9580
		// normalize new date-related properties                                                                             // 9581
		if (!newProps.start) {                                                                                               // 9582
			newProps.start = event.start.clone();                                                                               // 9583
		}                                                                                                                    // 9584
		if (newProps.end === undefined) {                                                                                    // 9585
			newProps.end = event.end ? event.end.clone() : null;                                                                // 9586
		}                                                                                                                    // 9587
		if (newProps.allDay == null) { // is null or undefined?                                                              // 9588
			newProps.allDay = event.allDay;                                                                                     // 9589
		}                                                                                                                    // 9590
		normalizeEventRange(newProps);                                                                                       // 9591
                                                                                                                       // 9592
		// create normalized versions of the original props to compare against                                               // 9593
		// need a real end value, for diffing                                                                                // 9594
		oldProps = {                                                                                                         // 9595
			start: event._start.clone(),                                                                                        // 9596
			end: event._end ? event._end.clone() : t.getDefaultEventEnd(event._allDay, event._start),                           // 9597
			allDay: newProps.allDay // normalize the dates in the same regard as the new properties                             // 9598
		};                                                                                                                   // 9599
		normalizeEventRange(oldProps);                                                                                       // 9600
                                                                                                                       // 9601
		// need to clear the end date if explicitly changed to null                                                          // 9602
		clearEnd = event._end !== null && newProps.end === null;                                                             // 9603
                                                                                                                       // 9604
		// compute the delta for moving the start date                                                                       // 9605
		startDelta = diffDates(newProps.start, oldProps.start);                                                              // 9606
                                                                                                                       // 9607
		// compute the delta for moving the end date                                                                         // 9608
		if (newProps.end) {                                                                                                  // 9609
			endDelta = diffDates(newProps.end, oldProps.end);                                                                   // 9610
			durationDelta = endDelta.subtract(startDelta);                                                                      // 9611
		}                                                                                                                    // 9612
		else {                                                                                                               // 9613
			durationDelta = null;                                                                                               // 9614
		}                                                                                                                    // 9615
                                                                                                                       // 9616
		// gather all non-date-related properties                                                                            // 9617
		$.each(newProps, function(name, val) {                                                                               // 9618
			if (isMiscEventPropName(name)) {                                                                                    // 9619
				if (val !== undefined) {                                                                                           // 9620
					miscProps[name] = val;                                                                                            // 9621
				}                                                                                                                  // 9622
			}                                                                                                                   // 9623
		});                                                                                                                  // 9624
                                                                                                                       // 9625
		// apply the operations to the event and all related events                                                          // 9626
		undoFunc = mutateEvents(                                                                                             // 9627
			clientEvents(event._id), // get events with this ID                                                                 // 9628
			clearEnd,                                                                                                           // 9629
			newProps.allDay,                                                                                                    // 9630
			startDelta,                                                                                                         // 9631
			durationDelta,                                                                                                      // 9632
			miscProps                                                                                                           // 9633
		);                                                                                                                   // 9634
                                                                                                                       // 9635
		return {                                                                                                             // 9636
			dateDelta: startDelta,                                                                                              // 9637
			durationDelta: durationDelta,                                                                                       // 9638
			undo: undoFunc                                                                                                      // 9639
		};                                                                                                                   // 9640
	}                                                                                                                     // 9641
                                                                                                                       // 9642
                                                                                                                       // 9643
	// Modifies an array of events in the following ways (operations are in order):                                       // 9644
	// - clear the event's `end`                                                                                          // 9645
	// - convert the event to allDay                                                                                      // 9646
	// - add `dateDelta` to the start and end                                                                             // 9647
	// - add `durationDelta` to the event's duration                                                                      // 9648
	// - assign `miscProps` to the event                                                                                  // 9649
	//                                                                                                                    // 9650
	// Returns a function that can be called to undo all the operations.                                                  // 9651
	//                                                                                                                    // 9652
	// TODO: don't use so many closures. possible memory issues when lots of events with same ID.                         // 9653
	//                                                                                                                    // 9654
	function mutateEvents(events, clearEnd, allDay, dateDelta, durationDelta, miscProps) {                                // 9655
		var isAmbigTimezone = t.getIsAmbigTimezone();                                                                        // 9656
		var undoFunctions = [];                                                                                              // 9657
                                                                                                                       // 9658
		// normalize zero-length deltas to be null                                                                           // 9659
		if (dateDelta && !dateDelta.valueOf()) { dateDelta = null; }                                                         // 9660
		if (durationDelta && !durationDelta.valueOf()) { durationDelta = null; }                                             // 9661
                                                                                                                       // 9662
		$.each(events, function(i, event) {                                                                                  // 9663
			var oldProps;                                                                                                       // 9664
			var newProps;                                                                                                       // 9665
                                                                                                                       // 9666
			// build an object holding all the old values, both date-related and misc.                                          // 9667
			// for the undo function.                                                                                           // 9668
			oldProps = {                                                                                                        // 9669
				start: event.start.clone(),                                                                                        // 9670
				end: event.end ? event.end.clone() : null,                                                                         // 9671
				allDay: event.allDay                                                                                               // 9672
			};                                                                                                                  // 9673
			$.each(miscProps, function(name) {                                                                                  // 9674
				oldProps[name] = event[name];                                                                                      // 9675
			});                                                                                                                 // 9676
                                                                                                                       // 9677
			// new date-related properties. work off the original date snapshot.                                                // 9678
			// ok to use references because they will be thrown away when backupEventDates is called.                           // 9679
			newProps = {                                                                                                        // 9680
				start: event._start,                                                                                               // 9681
				end: event._end,                                                                                                   // 9682
				allDay: allDay // normalize the dates in the same regard as the new properties                                     // 9683
			};                                                                                                                  // 9684
			normalizeEventRange(newProps); // massages start/end/allDay                                                         // 9685
                                                                                                                       // 9686
			// strip or ensure the end date                                                                                     // 9687
			if (clearEnd) {                                                                                                     // 9688
				newProps.end = null;                                                                                               // 9689
			}                                                                                                                   // 9690
			else if (durationDelta && !newProps.end) { // the duration translation requires an end date                         // 9691
				newProps.end = t.getDefaultEventEnd(newProps.allDay, newProps.start);                                              // 9692
			}                                                                                                                   // 9693
                                                                                                                       // 9694
			if (dateDelta) {                                                                                                    // 9695
				newProps.start.add(dateDelta);                                                                                     // 9696
				if (newProps.end) {                                                                                                // 9697
					newProps.end.add(dateDelta);                                                                                      // 9698
				}                                                                                                                  // 9699
			}                                                                                                                   // 9700
                                                                                                                       // 9701
			if (durationDelta) {                                                                                                // 9702
				newProps.end.add(durationDelta); // end already ensured above                                                      // 9703
			}                                                                                                                   // 9704
                                                                                                                       // 9705
			// if the dates have changed, and we know it is impossible to recompute the                                         // 9706
			// timezone offsets, strip the zone.                                                                                // 9707
			if (                                                                                                                // 9708
				isAmbigTimezone &&                                                                                                 // 9709
				!newProps.allDay &&                                                                                                // 9710
				(dateDelta || durationDelta)                                                                                       // 9711
			) {                                                                                                                 // 9712
				newProps.start.stripZone();                                                                                        // 9713
				if (newProps.end) {                                                                                                // 9714
					newProps.end.stripZone();                                                                                         // 9715
				}                                                                                                                  // 9716
			}                                                                                                                   // 9717
                                                                                                                       // 9718
			$.extend(event, miscProps, newProps); // copy over misc props, then date-related props                              // 9719
			backupEventDates(event); // regenerate internal _start/_end/_allDay                                                 // 9720
                                                                                                                       // 9721
			undoFunctions.push(function() {                                                                                     // 9722
				$.extend(event, oldProps);                                                                                         // 9723
				backupEventDates(event); // regenerate internal _start/_end/_allDay                                                // 9724
			});                                                                                                                 // 9725
		});                                                                                                                  // 9726
                                                                                                                       // 9727
		return function() {                                                                                                  // 9728
			for (var i = 0; i < undoFunctions.length; i++) {                                                                    // 9729
				undoFunctions[i]();                                                                                                // 9730
			}                                                                                                                   // 9731
		};                                                                                                                   // 9732
	}                                                                                                                     // 9733
                                                                                                                       // 9734
                                                                                                                       // 9735
	/* Business Hours                                                                                                     // 9736
	-----------------------------------------------------------------------------------------*/                           // 9737
                                                                                                                       // 9738
	t.getBusinessHoursEvents = getBusinessHoursEvents;                                                                    // 9739
                                                                                                                       // 9740
                                                                                                                       // 9741
	// Returns an array of events as to when the business hours occur in the given view.                                  // 9742
	// Abuse of our event system :(                                                                                       // 9743
	function getBusinessHoursEvents(wholeDay) {                                                                           // 9744
		var optionVal = options.businessHours;                                                                               // 9745
		var defaultVal = {                                                                                                   // 9746
			className: 'fc-nonbusiness',                                                                                        // 9747
			start: '09:00',                                                                                                     // 9748
			end: '17:00',                                                                                                       // 9749
			dow: [ 1, 2, 3, 4, 5 ], // monday - friday                                                                          // 9750
			rendering: 'inverse-background'                                                                                     // 9751
		};                                                                                                                   // 9752
		var view = t.getView();                                                                                              // 9753
		var eventInput;                                                                                                      // 9754
                                                                                                                       // 9755
		if (optionVal) { // `true` (which means "use the defaults") or an override object                                    // 9756
			eventInput = $.extend(                                                                                              // 9757
				{}, // copy to a new object in either case                                                                         // 9758
				defaultVal,                                                                                                        // 9759
				typeof optionVal === 'object' ? optionVal : {} // override the defaults                                            // 9760
			);                                                                                                                  // 9761
		}                                                                                                                    // 9762
                                                                                                                       // 9763
		if (eventInput) {                                                                                                    // 9764
                                                                                                                       // 9765
			// if a whole-day series is requested, clear the start/end times                                                    // 9766
			if (wholeDay) {                                                                                                     // 9767
				eventInput.start = null;                                                                                           // 9768
				eventInput.end = null;                                                                                             // 9769
			}                                                                                                                   // 9770
                                                                                                                       // 9771
			return expandEvent(                                                                                                 // 9772
				buildEventFromInput(eventInput),                                                                                   // 9773
				view.start,                                                                                                        // 9774
				view.end                                                                                                           // 9775
			);                                                                                                                  // 9776
		}                                                                                                                    // 9777
                                                                                                                       // 9778
		return [];                                                                                                           // 9779
	}                                                                                                                     // 9780
                                                                                                                       // 9781
                                                                                                                       // 9782
	/* Overlapping / Constraining                                                                                         // 9783
	-----------------------------------------------------------------------------------------*/                           // 9784
                                                                                                                       // 9785
	t.isEventRangeAllowed = isEventRangeAllowed;                                                                          // 9786
	t.isSelectionRangeAllowed = isSelectionRangeAllowed;                                                                  // 9787
	t.isExternalDropRangeAllowed = isExternalDropRangeAllowed;                                                            // 9788
                                                                                                                       // 9789
                                                                                                                       // 9790
	function isEventRangeAllowed(range, event) {                                                                          // 9791
		var source = event.source || {};                                                                                     // 9792
		var constraint = firstDefined(                                                                                       // 9793
			event.constraint,                                                                                                   // 9794
			source.constraint,                                                                                                  // 9795
			options.eventConstraint                                                                                             // 9796
		);                                                                                                                   // 9797
		var overlap = firstDefined(                                                                                          // 9798
			event.overlap,                                                                                                      // 9799
			source.overlap,                                                                                                     // 9800
			options.eventOverlap                                                                                                // 9801
		);                                                                                                                   // 9802
                                                                                                                       // 9803
		range = ensureVisibleEventRange(range); // ensure a proper range with an end for isRangeAllowed                      // 9804
                                                                                                                       // 9805
		return isRangeAllowed(range, constraint, overlap, event);                                                            // 9806
	}                                                                                                                     // 9807
                                                                                                                       // 9808
                                                                                                                       // 9809
	function isSelectionRangeAllowed(range) {                                                                             // 9810
		return isRangeAllowed(range, options.selectConstraint, options.selectOverlap);                                       // 9811
	}                                                                                                                     // 9812
                                                                                                                       // 9813
                                                                                                                       // 9814
	// when `eventProps` is defined, consider this an event.                                                              // 9815
	// `eventProps` can contain misc non-date-related info about the event.                                               // 9816
	function isExternalDropRangeAllowed(range, eventProps) {                                                              // 9817
		var eventInput;                                                                                                      // 9818
		var event;                                                                                                           // 9819
                                                                                                                       // 9820
		// note: very similar logic is in View's reportExternalDrop                                                          // 9821
		if (eventProps) {                                                                                                    // 9822
			eventInput = $.extend({}, eventProps, range);                                                                       // 9823
			event = expandEvent(buildEventFromInput(eventInput))[0];                                                            // 9824
		}                                                                                                                    // 9825
                                                                                                                       // 9826
		if (event) {                                                                                                         // 9827
			return isEventRangeAllowed(range, event);                                                                           // 9828
		}                                                                                                                    // 9829
		else { // treat it as a selection                                                                                    // 9830
                                                                                                                       // 9831
			range = ensureVisibleEventRange(range); // ensure a proper range with an end for isSelectionRangeAllowed            // 9832
                                                                                                                       // 9833
			return isSelectionRangeAllowed(range);                                                                              // 9834
		}                                                                                                                    // 9835
	}                                                                                                                     // 9836
                                                                                                                       // 9837
                                                                                                                       // 9838
	// Returns true if the given range (caused by an event drop/resize or a selection) is allowed to exist                // 9839
	// according to the constraint/overlap settings.                                                                      // 9840
	// `event` is not required if checking a selection.                                                                   // 9841
	function isRangeAllowed(range, constraint, overlap, event) {                                                          // 9842
		var constraintEvents;                                                                                                // 9843
		var anyContainment;                                                                                                  // 9844
		var peerEvents;                                                                                                      // 9845
		var i, peerEvent;                                                                                                    // 9846
		var peerOverlap;                                                                                                     // 9847
                                                                                                                       // 9848
		// normalize. fyi, we're normalizing in too many places :(                                                           // 9849
		range = $.extend({}, range); // copy all properties in case there are misc non-date properties                       // 9850
		range.start = range.start.clone().stripZone();                                                                       // 9851
		range.end = range.end.clone().stripZone();                                                                           // 9852
                                                                                                                       // 9853
		// the range must be fully contained by at least one of produced constraint events                                   // 9854
		if (constraint != null) {                                                                                            // 9855
                                                                                                                       // 9856
			// not treated as an event! intermediate data structure                                                             // 9857
			// TODO: use ranges in the future                                                                                   // 9858
			constraintEvents = constraintToEvents(constraint);                                                                  // 9859
                                                                                                                       // 9860
			anyContainment = false;                                                                                             // 9861
			for (i = 0; i < constraintEvents.length; i++) {                                                                     // 9862
				if (eventContainsRange(constraintEvents[i], range)) {                                                              // 9863
					anyContainment = true;                                                                                            // 9864
					break;                                                                                                            // 9865
				}                                                                                                                  // 9866
			}                                                                                                                   // 9867
                                                                                                                       // 9868
			if (!anyContainment) {                                                                                              // 9869
				return false;                                                                                                      // 9870
			}                                                                                                                   // 9871
		}                                                                                                                    // 9872
                                                                                                                       // 9873
		peerEvents = t.getPeerEvents(event, range);                                                                          // 9874
                                                                                                                       // 9875
		for (i = 0; i < peerEvents.length; i++)  {                                                                           // 9876
			peerEvent = peerEvents[i];                                                                                          // 9877
                                                                                                                       // 9878
			// there needs to be an actual intersection before disallowing anything                                             // 9879
			if (eventIntersectsRange(peerEvent, range)) {                                                                       // 9880
                                                                                                                       // 9881
				// evaluate overlap for the given range and short-circuit if necessary                                             // 9882
				if (overlap === false) {                                                                                           // 9883
					return false;                                                                                                     // 9884
				}                                                                                                                  // 9885
				// if the event's overlap is a test function, pass the peer event in question as the first param                   // 9886
				else if (typeof overlap === 'function' && !overlap(peerEvent, event)) {                                            // 9887
					return false;                                                                                                     // 9888
				}                                                                                                                  // 9889
                                                                                                                       // 9890
				// if we are computing if the given range is allowable for an event, consider the other event's                    // 9891
				// EventObject-specific or Source-specific `overlap` property                                                      // 9892
				if (event) {                                                                                                       // 9893
					peerOverlap = firstDefined(                                                                                       // 9894
						peerEvent.overlap,                                                                                               // 9895
						(peerEvent.source || {}).overlap                                                                                 // 9896
						// we already considered the global `eventOverlap`                                                               // 9897
					);                                                                                                                // 9898
					if (peerOverlap === false) {                                                                                      // 9899
						return false;                                                                                                    // 9900
					}                                                                                                                 // 9901
					// if the peer event's overlap is a test function, pass the subject event as the first param                      // 9902
					if (typeof peerOverlap === 'function' && !peerOverlap(event, peerEvent)) {                                        // 9903
						return false;                                                                                                    // 9904
					}                                                                                                                 // 9905
				}                                                                                                                  // 9906
			}                                                                                                                   // 9907
		}                                                                                                                    // 9908
                                                                                                                       // 9909
		return true;                                                                                                         // 9910
	}                                                                                                                     // 9911
                                                                                                                       // 9912
                                                                                                                       // 9913
	// Given an event input from the API, produces an array of event objects. Possible event inputs:                      // 9914
	// 'businessHours'                                                                                                    // 9915
	// An event ID (number or string)                                                                                     // 9916
	// An object with specific start/end dates or a recurring event (like what businessHours accepts)                     // 9917
	function constraintToEvents(constraintInput) {                                                                        // 9918
                                                                                                                       // 9919
		if (constraintInput === 'businessHours') {                                                                           // 9920
			return getBusinessHoursEvents();                                                                                    // 9921
		}                                                                                                                    // 9922
                                                                                                                       // 9923
		if (typeof constraintInput === 'object') {                                                                           // 9924
			return expandEvent(buildEventFromInput(constraintInput));                                                           // 9925
		}                                                                                                                    // 9926
                                                                                                                       // 9927
		return clientEvents(constraintInput); // probably an ID                                                              // 9928
	}                                                                                                                     // 9929
                                                                                                                       // 9930
                                                                                                                       // 9931
	// Does the event's date range fully contain the given range?                                                         // 9932
	// start/end already assumed to have stripped zones :(                                                                // 9933
	function eventContainsRange(event, range) {                                                                           // 9934
		var eventStart = event.start.clone().stripZone();                                                                    // 9935
		var eventEnd = t.getEventEnd(event).stripZone();                                                                     // 9936
                                                                                                                       // 9937
		return range.start >= eventStart && range.end <= eventEnd;                                                           // 9938
	}                                                                                                                     // 9939
                                                                                                                       // 9940
                                                                                                                       // 9941
	// Does the event's date range intersect with the given range?                                                        // 9942
	// start/end already assumed to have stripped zones :(                                                                // 9943
	function eventIntersectsRange(event, range) {                                                                         // 9944
		var eventStart = event.start.clone().stripZone();                                                                    // 9945
		var eventEnd = t.getEventEnd(event).stripZone();                                                                     // 9946
                                                                                                                       // 9947
		return range.start < eventEnd && range.end > eventStart;                                                             // 9948
	}                                                                                                                     // 9949
                                                                                                                       // 9950
                                                                                                                       // 9951
	t.getEventCache = function() {                                                                                        // 9952
		return cache;                                                                                                        // 9953
	};                                                                                                                    // 9954
                                                                                                                       // 9955
}                                                                                                                      // 9956
                                                                                                                       // 9957
                                                                                                                       // 9958
// Returns a list of events that the given event should be compared against when being considered for a move to        // 9959
// the specified range. Attached to the Calendar's prototype because EventManager is a mixin for a Calendar.           // 9960
Calendar.prototype.getPeerEvents = function(event, range) {                                                            // 9961
	var cache = this.getEventCache();                                                                                     // 9962
	var peerEvents = [];                                                                                                  // 9963
	var i, otherEvent;                                                                                                    // 9964
                                                                                                                       // 9965
	for (i = 0; i < cache.length; i++) {                                                                                  // 9966
		otherEvent = cache[i];                                                                                               // 9967
		if (                                                                                                                 // 9968
			!event ||                                                                                                           // 9969
			event._id !== otherEvent._id // don't compare the event to itself or other related [repeating] events               // 9970
		) {                                                                                                                  // 9971
			peerEvents.push(otherEvent);                                                                                        // 9972
		}                                                                                                                    // 9973
	}                                                                                                                     // 9974
                                                                                                                       // 9975
	return peerEvents;                                                                                                    // 9976
};                                                                                                                     // 9977
                                                                                                                       // 9978
                                                                                                                       // 9979
// updates the "backup" properties, which are preserved in order to compute diffs later on.                            // 9980
function backupEventDates(event) {                                                                                     // 9981
	event._allDay = event.allDay;                                                                                         // 9982
	event._start = event.start.clone();                                                                                   // 9983
	event._end = event.end ? event.end.clone() : null;                                                                    // 9984
}                                                                                                                      // 9985
                                                                                                                       // 9986
;;                                                                                                                     // 9987
                                                                                                                       // 9988
/* An abstract class for the "basic" views, as well as month view. Renders one or more rows of day cells.              // 9989
----------------------------------------------------------------------------------------------------------------------*/
// It is a manager for a DayGrid subcomponent, which does most of the heavy lifting.                                   // 9991
// It is responsible for managing width/height.                                                                        // 9992
                                                                                                                       // 9993
var BasicView = fcViews.basic = View.extend({                                                                          // 9994
                                                                                                                       // 9995
	dayGrid: null, // the main subcomponent that does most of the heavy lifting                                           // 9996
                                                                                                                       // 9997
	dayNumbersVisible: false, // display day numbers on each day cell?                                                    // 9998
	weekNumbersVisible: false, // display week numbers along the side?                                                    // 9999
                                                                                                                       // 10000
	weekNumberWidth: null, // width of all the week-number cells running down the side                                    // 10001
                                                                                                                       // 10002
	headRowEl: null, // the fake row element of the day-of-week header                                                    // 10003
                                                                                                                       // 10004
                                                                                                                       // 10005
	initialize: function() {                                                                                              // 10006
		this.dayGrid = new DayGrid(this);                                                                                    // 10007
		this.coordMap = this.dayGrid.coordMap; // the view's date-to-cell mapping is identical to the subcomponent's         // 10008
	},                                                                                                                    // 10009
                                                                                                                       // 10010
                                                                                                                       // 10011
	// Sets the display range and computes all necessary dates                                                            // 10012
	setRange: function(range) {                                                                                           // 10013
		View.prototype.setRange.call(this, range); // call the super-method                                                  // 10014
                                                                                                                       // 10015
		this.dayGrid.breakOnWeeks = /year|month|week/.test(this.intervalUnit); // do before setRange                         // 10016
		this.dayGrid.setRange(range);                                                                                        // 10017
	},                                                                                                                    // 10018
                                                                                                                       // 10019
                                                                                                                       // 10020
	// Compute the value to feed into setRange. Overrides superclass.                                                     // 10021
	computeRange: function(date) {                                                                                        // 10022
		var range = View.prototype.computeRange.call(this, date); // get value from the super-method                         // 10023
                                                                                                                       // 10024
		// year and month views should be aligned with weeks. this is already done for week                                  // 10025
		if (/year|month/.test(range.intervalUnit)) {                                                                         // 10026
			range.start.startOf('week');                                                                                        // 10027
			range.start = this.skipHiddenDays(range.start);                                                                     // 10028
                                                                                                                       // 10029
			// make end-of-week if not already                                                                                  // 10030
			if (range.end.weekday()) {                                                                                          // 10031
				range.end.add(1, 'week').startOf('week');                                                                          // 10032
				range.end = this.skipHiddenDays(range.end, -1, true); // exclusively move backwards                                // 10033
			}                                                                                                                   // 10034
		}                                                                                                                    // 10035
                                                                                                                       // 10036
		return range;                                                                                                        // 10037
	},                                                                                                                    // 10038
                                                                                                                       // 10039
                                                                                                                       // 10040
	// Renders the view into `this.el`, which should already be assigned                                                  // 10041
	render: function() {                                                                                                  // 10042
                                                                                                                       // 10043
		this.dayNumbersVisible = this.dayGrid.rowCnt > 1; // TODO: make grid responsible                                     // 10044
		this.weekNumbersVisible = this.opt('weekNumbers');                                                                   // 10045
		this.dayGrid.numbersVisible = this.dayNumbersVisible || this.weekNumbersVisible;                                     // 10046
                                                                                                                       // 10047
		this.el.addClass('fc-basic-view').html(this.renderHtml());                                                           // 10048
                                                                                                                       // 10049
		this.headRowEl = this.el.find('thead .fc-row');                                                                      // 10050
                                                                                                                       // 10051
		this.scrollerEl = this.el.find('.fc-day-grid-container');                                                            // 10052
		this.dayGrid.coordMap.containerEl = this.scrollerEl; // constrain clicks/etc to the dimensions of the scroller       // 10053
                                                                                                                       // 10054
		this.dayGrid.setElement(this.el.find('.fc-day-grid'));                                                               // 10055
		this.dayGrid.renderDates(this.hasRigidRows());                                                                       // 10056
	},                                                                                                                    // 10057
                                                                                                                       // 10058
                                                                                                                       // 10059
	// Unrenders the content of the view. Since we haven't separated skeleton rendering from date rendering,              // 10060
	// always completely kill the dayGrid's rendering.                                                                    // 10061
	destroy: function() {                                                                                                 // 10062
		this.dayGrid.destroyDates();                                                                                         // 10063
		this.dayGrid.removeElement();                                                                                        // 10064
	},                                                                                                                    // 10065
                                                                                                                       // 10066
                                                                                                                       // 10067
	renderBusinessHours: function() {                                                                                     // 10068
		this.dayGrid.renderBusinessHours();                                                                                  // 10069
	},                                                                                                                    // 10070
                                                                                                                       // 10071
                                                                                                                       // 10072
	// Builds the HTML skeleton for the view.                                                                             // 10073
	// The day-grid component will render inside of a container defined by this HTML.                                     // 10074
	renderHtml: function() {                                                                                              // 10075
		return '' +                                                                                                          // 10076
			'<table>' +                                                                                                         // 10077
				'<thead class="fc-head">' +                                                                                        // 10078
					'<tr>' +                                                                                                          // 10079
						'<td class="' + this.widgetHeaderClass + '">' +                                                                  // 10080
							this.dayGrid.headHtml() + // render the day-of-week headers                                                     // 10081
						'</td>' +                                                                                                        // 10082
					'</tr>' +                                                                                                         // 10083
				'</thead>' +                                                                                                       // 10084
				'<tbody class="fc-body">' +                                                                                        // 10085
					'<tr>' +                                                                                                          // 10086
						'<td class="' + this.widgetContentClass + '">' +                                                                 // 10087
							'<div class="fc-day-grid-container">' +                                                                         // 10088
								'<div class="fc-day-grid"/>' +                                                                                 // 10089
							'</div>' +                                                                                                      // 10090
						'</td>' +                                                                                                        // 10091
					'</tr>' +                                                                                                         // 10092
				'</tbody>' +                                                                                                       // 10093
			'</table>';                                                                                                         // 10094
	},                                                                                                                    // 10095
                                                                                                                       // 10096
                                                                                                                       // 10097
	// Generates the HTML that will go before the day-of week header cells.                                               // 10098
	// Queried by the DayGrid subcomponent when generating rows. Ordering depends on isRTL.                               // 10099
	headIntroHtml: function() {                                                                                           // 10100
		if (this.weekNumbersVisible) {                                                                                       // 10101
			return '' +                                                                                                         // 10102
				'<th class="fc-week-number ' + this.widgetHeaderClass + '" ' + this.weekNumberStyleAttr() + '>' +                  // 10103
					'<span>' + // needed for matchCellWidths                                                                          // 10104
						htmlEscape(this.opt('weekNumberTitle')) +                                                                        // 10105
					'</span>' +                                                                                                       // 10106
				'</th>';                                                                                                           // 10107
		}                                                                                                                    // 10108
	},                                                                                                                    // 10109
                                                                                                                       // 10110
                                                                                                                       // 10111
	// Generates the HTML that will go before content-skeleton cells that display the day/week numbers.                   // 10112
	// Queried by the DayGrid subcomponent. Ordering depends on isRTL.                                                    // 10113
	numberIntroHtml: function(row) {                                                                                      // 10114
		if (this.weekNumbersVisible) {                                                                                       // 10115
			return '' +                                                                                                         // 10116
				'<td class="fc-week-number" ' + this.weekNumberStyleAttr() + '>' +                                                 // 10117
					'<span>' + // needed for matchCellWidths                                                                          // 10118
						this.dayGrid.getCell(row, 0).start.format('w') +                                                                 // 10119
					'</span>' +                                                                                                       // 10120
				'</td>';                                                                                                           // 10121
		}                                                                                                                    // 10122
	},                                                                                                                    // 10123
                                                                                                                       // 10124
                                                                                                                       // 10125
	// Generates the HTML that goes before the day bg cells for each day-row.                                             // 10126
	// Queried by the DayGrid subcomponent. Ordering depends on isRTL.                                                    // 10127
	dayIntroHtml: function() {                                                                                            // 10128
		if (this.weekNumbersVisible) {                                                                                       // 10129
			return '<td class="fc-week-number ' + this.widgetContentClass + '" ' +                                              // 10130
				this.weekNumberStyleAttr() + '></td>';                                                                             // 10131
		}                                                                                                                    // 10132
	},                                                                                                                    // 10133
                                                                                                                       // 10134
                                                                                                                       // 10135
	// Generates the HTML that goes before every other type of row generated by DayGrid. Ordering depends on isRTL.       // 10136
	// Affects helper-skeleton and highlight-skeleton rows.                                                               // 10137
	introHtml: function() {                                                                                               // 10138
		if (this.weekNumbersVisible) {                                                                                       // 10139
			return '<td class="fc-week-number" ' + this.weekNumberStyleAttr() + '></td>';                                       // 10140
		}                                                                                                                    // 10141
	},                                                                                                                    // 10142
                                                                                                                       // 10143
                                                                                                                       // 10144
	// Generates the HTML for the <td>s of the "number" row in the DayGrid's content skeleton.                            // 10145
	// The number row will only exist if either day numbers or week numbers are turned on.                                // 10146
	numberCellHtml: function(cell) {                                                                                      // 10147
		var date = cell.start;                                                                                               // 10148
		var classes;                                                                                                         // 10149
                                                                                                                       // 10150
		if (!this.dayNumbersVisible) { // if there are week numbers but not day numbers                                      // 10151
			return '<td/>'; //  will create an empty space above events :(                                                      // 10152
		}                                                                                                                    // 10153
                                                                                                                       // 10154
		classes = this.dayGrid.getDayClasses(date);                                                                          // 10155
		classes.unshift('fc-day-number');                                                                                    // 10156
                                                                                                                       // 10157
		return '' +                                                                                                          // 10158
			'<td class="' + classes.join(' ') + '" data-date="' + date.format() + '">' +                                        // 10159
				date.date() +                                                                                                      // 10160
			'</td>';                                                                                                            // 10161
	},                                                                                                                    // 10162
                                                                                                                       // 10163
                                                                                                                       // 10164
	// Generates an HTML attribute string for setting the width of the week number column, if it is known                 // 10165
	weekNumberStyleAttr: function() {                                                                                     // 10166
		if (this.weekNumberWidth !== null) {                                                                                 // 10167
			return 'style="width:' + this.weekNumberWidth + 'px"';                                                              // 10168
		}                                                                                                                    // 10169
		return '';                                                                                                           // 10170
	},                                                                                                                    // 10171
                                                                                                                       // 10172
                                                                                                                       // 10173
	// Determines whether each row should have a constant height                                                          // 10174
	hasRigidRows: function() {                                                                                            // 10175
		var eventLimit = this.opt('eventLimit');                                                                             // 10176
		return eventLimit && typeof eventLimit !== 'number';                                                                 // 10177
	},                                                                                                                    // 10178
                                                                                                                       // 10179
                                                                                                                       // 10180
	/* Dimensions                                                                                                         // 10181
	------------------------------------------------------------------------------------------------------------------*/  // 10182
                                                                                                                       // 10183
                                                                                                                       // 10184
	// Refreshes the horizontal dimensions of the view                                                                    // 10185
	updateWidth: function() {                                                                                             // 10186
		if (this.weekNumbersVisible) {                                                                                       // 10187
			// Make sure all week number cells running down the side have the same width.                                       // 10188
			// Record the width for cells created later.                                                                        // 10189
			this.weekNumberWidth = matchCellWidths(                                                                             // 10190
				this.el.find('.fc-week-number')                                                                                    // 10191
			);                                                                                                                  // 10192
		}                                                                                                                    // 10193
	},                                                                                                                    // 10194
                                                                                                                       // 10195
                                                                                                                       // 10196
	// Adjusts the vertical dimensions of the view to the specified values                                                // 10197
	setHeight: function(totalHeight, isAuto) {                                                                            // 10198
		var eventLimit = this.opt('eventLimit');                                                                             // 10199
		var scrollerHeight;                                                                                                  // 10200
                                                                                                                       // 10201
		// reset all heights to be natural                                                                                   // 10202
		unsetScroller(this.scrollerEl);                                                                                      // 10203
		uncompensateScroll(this.headRowEl);                                                                                  // 10204
                                                                                                                       // 10205
		this.dayGrid.destroySegPopover(); // kill the "more" popover if displayed                                            // 10206
                                                                                                                       // 10207
		// is the event limit a constant level number?                                                                       // 10208
		if (eventLimit && typeof eventLimit === 'number') {                                                                  // 10209
			this.dayGrid.limitRows(eventLimit); // limit the levels first so the height can redistribute after                  // 10210
		}                                                                                                                    // 10211
                                                                                                                       // 10212
		scrollerHeight = this.computeScrollerHeight(totalHeight);                                                            // 10213
		this.setGridHeight(scrollerHeight, isAuto);                                                                          // 10214
                                                                                                                       // 10215
		// is the event limit dynamically calculated?                                                                        // 10216
		if (eventLimit && typeof eventLimit !== 'number') {                                                                  // 10217
			this.dayGrid.limitRows(eventLimit); // limit the levels after the grid's row heights have been set                  // 10218
		}                                                                                                                    // 10219
                                                                                                                       // 10220
		if (!isAuto && setPotentialScroller(this.scrollerEl, scrollerHeight)) { // using scrollbars?                         // 10221
                                                                                                                       // 10222
			compensateScroll(this.headRowEl, getScrollbarWidths(this.scrollerEl));                                              // 10223
                                                                                                                       // 10224
			// doing the scrollbar compensation might have created text overflow which created more height. redo                // 10225
			scrollerHeight = this.computeScrollerHeight(totalHeight);                                                           // 10226
			this.scrollerEl.height(scrollerHeight);                                                                             // 10227
		}                                                                                                                    // 10228
	},                                                                                                                    // 10229
                                                                                                                       // 10230
                                                                                                                       // 10231
	// Sets the height of just the DayGrid component in this view                                                         // 10232
	setGridHeight: function(height, isAuto) {                                                                             // 10233
		if (isAuto) {                                                                                                        // 10234
			undistributeHeight(this.dayGrid.rowEls); // let the rows be their natural height with no expanding                  // 10235
		}                                                                                                                    // 10236
		else {                                                                                                               // 10237
			distributeHeight(this.dayGrid.rowEls, height, true); // true = compensate for height-hogging rows                   // 10238
		}                                                                                                                    // 10239
	},                                                                                                                    // 10240
                                                                                                                       // 10241
                                                                                                                       // 10242
	/* Events                                                                                                             // 10243
	------------------------------------------------------------------------------------------------------------------*/  // 10244
                                                                                                                       // 10245
                                                                                                                       // 10246
	// Renders the given events onto the view and populates the segments array                                            // 10247
	renderEvents: function(events) {                                                                                      // 10248
		this.dayGrid.renderEvents(events);                                                                                   // 10249
                                                                                                                       // 10250
		this.updateHeight(); // must compensate for events that overflow the row                                             // 10251
	},                                                                                                                    // 10252
                                                                                                                       // 10253
                                                                                                                       // 10254
	// Retrieves all segment objects that are rendered in the view                                                        // 10255
	getEventSegs: function() {                                                                                            // 10256
		return this.dayGrid.getEventSegs();                                                                                  // 10257
	},                                                                                                                    // 10258
                                                                                                                       // 10259
                                                                                                                       // 10260
	// Unrenders all event elements and clears internal segment data                                                      // 10261
	destroyEvents: function() {                                                                                           // 10262
		this.dayGrid.destroyEvents();                                                                                        // 10263
                                                                                                                       // 10264
		// we DON'T need to call updateHeight() because:                                                                     // 10265
		// A) a renderEvents() call always happens after this, which will eventually call updateHeight()                     // 10266
		// B) in IE8, this causes a flash whenever events are rerendered                                                     // 10267
	},                                                                                                                    // 10268
                                                                                                                       // 10269
                                                                                                                       // 10270
	/* Dragging (for both events and external elements)                                                                   // 10271
	------------------------------------------------------------------------------------------------------------------*/  // 10272
                                                                                                                       // 10273
                                                                                                                       // 10274
	// A returned value of `true` signals that a mock "helper" event has been rendered.                                   // 10275
	renderDrag: function(dropLocation, seg) {                                                                             // 10276
		return this.dayGrid.renderDrag(dropLocation, seg);                                                                   // 10277
	},                                                                                                                    // 10278
                                                                                                                       // 10279
                                                                                                                       // 10280
	destroyDrag: function() {                                                                                             // 10281
		this.dayGrid.destroyDrag();                                                                                          // 10282
	},                                                                                                                    // 10283
                                                                                                                       // 10284
                                                                                                                       // 10285
	/* Selection                                                                                                          // 10286
	------------------------------------------------------------------------------------------------------------------*/  // 10287
                                                                                                                       // 10288
                                                                                                                       // 10289
	// Renders a visual indication of a selection                                                                         // 10290
	renderSelection: function(range) {                                                                                    // 10291
		this.dayGrid.renderSelection(range);                                                                                 // 10292
	},                                                                                                                    // 10293
                                                                                                                       // 10294
                                                                                                                       // 10295
	// Unrenders a visual indications of a selection                                                                      // 10296
	destroySelection: function() {                                                                                        // 10297
		this.dayGrid.destroySelection();                                                                                     // 10298
	}                                                                                                                     // 10299
                                                                                                                       // 10300
});                                                                                                                    // 10301
                                                                                                                       // 10302
;;                                                                                                                     // 10303
                                                                                                                       // 10304
/* A month view with day cells running in rows (one-per-week) and columns                                              // 10305
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 10307
var MonthView = fcViews.month = BasicView.extend({                                                                     // 10308
                                                                                                                       // 10309
	// Produces information about what range to display                                                                   // 10310
	computeRange: function(date) {                                                                                        // 10311
		var range = BasicView.prototype.computeRange.call(this, date); // get value from super-method                        // 10312
		var rowCnt;                                                                                                          // 10313
                                                                                                                       // 10314
		// ensure 6 weeks                                                                                                    // 10315
		if (this.isFixedWeeks()) {                                                                                           // 10316
			rowCnt = Math.ceil(range.end.diff(range.start, 'weeks', true)); // could be partial weeks due to hiddenDays         // 10317
			range.end.add(6 - rowCnt, 'weeks');                                                                                 // 10318
		}                                                                                                                    // 10319
                                                                                                                       // 10320
		return range;                                                                                                        // 10321
	},                                                                                                                    // 10322
                                                                                                                       // 10323
                                                                                                                       // 10324
	// Overrides the default BasicView behavior to have special multi-week auto-height logic                              // 10325
	setGridHeight: function(height, isAuto) {                                                                             // 10326
                                                                                                                       // 10327
		isAuto = isAuto || this.opt('weekMode') === 'variable'; // LEGACY: weekMode is deprecated                            // 10328
                                                                                                                       // 10329
		// if auto, make the height of each row the height that it would be if there were 6 weeks                            // 10330
		if (isAuto) {                                                                                                        // 10331
			height *= this.rowCnt / 6;                                                                                          // 10332
		}                                                                                                                    // 10333
                                                                                                                       // 10334
		distributeHeight(this.dayGrid.rowEls, height, !isAuto); // if auto, don't compensate for height-hogging rows         // 10335
	},                                                                                                                    // 10336
                                                                                                                       // 10337
                                                                                                                       // 10338
	isFixedWeeks: function() {                                                                                            // 10339
		var weekMode = this.opt('weekMode'); // LEGACY: weekMode is deprecated                                               // 10340
		if (weekMode) {                                                                                                      // 10341
			return weekMode === 'fixed'; // if any other type of weekMode, assume NOT fixed                                     // 10342
		}                                                                                                                    // 10343
                                                                                                                       // 10344
		return this.opt('fixedWeekCount');                                                                                   // 10345
	}                                                                                                                     // 10346
                                                                                                                       // 10347
});                                                                                                                    // 10348
                                                                                                                       // 10349
MonthView.duration = { months: 1 }; // important for prev/next                                                         // 10350
                                                                                                                       // 10351
MonthView.defaults = {                                                                                                 // 10352
	fixedWeekCount: true                                                                                                  // 10353
};                                                                                                                     // 10354
;;                                                                                                                     // 10355
                                                                                                                       // 10356
/* A week view with simple day cells running horizontally                                                              // 10357
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 10359
fcViews.basicWeek = {                                                                                                  // 10360
	type: 'basic',                                                                                                        // 10361
	duration: { weeks: 1 }                                                                                                // 10362
};                                                                                                                     // 10363
;;                                                                                                                     // 10364
                                                                                                                       // 10365
/* A view with a single simple day cell                                                                                // 10366
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 10368
fcViews.basicDay = {                                                                                                   // 10369
	type: 'basic',                                                                                                        // 10370
	duration: { days: 1 }                                                                                                 // 10371
};                                                                                                                     // 10372
;;                                                                                                                     // 10373
                                                                                                                       // 10374
/* An abstract class for all agenda-related views. Displays one more columns with time slots running vertically.       // 10375
----------------------------------------------------------------------------------------------------------------------*/
// Is a manager for the TimeGrid subcomponent and possibly the DayGrid subcomponent (if allDaySlot is on).             // 10377
// Responsible for managing width/height.                                                                              // 10378
                                                                                                                       // 10379
var AGENDA_DEFAULTS = {                                                                                                // 10380
	allDaySlot: true,                                                                                                     // 10381
	allDayText: 'all-day',                                                                                                // 10382
	scrollTime: '06:00:00',                                                                                               // 10383
	slotDuration: '00:30:00',                                                                                             // 10384
	minTime: '00:00:00',                                                                                                  // 10385
	maxTime: '24:00:00',                                                                                                  // 10386
	slotEventOverlap: true // a bad name. confused with overlap/constraint system                                         // 10387
};                                                                                                                     // 10388
                                                                                                                       // 10389
var AGENDA_ALL_DAY_EVENT_LIMIT = 5;                                                                                    // 10390
                                                                                                                       // 10391
var AgendaView = fcViews.agenda = View.extend({                                                                        // 10392
                                                                                                                       // 10393
	timeGrid: null, // the main time-grid subcomponent of this view                                                       // 10394
	dayGrid: null, // the "all-day" subcomponent. if all-day is turned off, this will be null                             // 10395
                                                                                                                       // 10396
	axisWidth: null, // the width of the time axis running down the side                                                  // 10397
                                                                                                                       // 10398
	noScrollRowEls: null, // set of fake row elements that must compensate when scrollerEl has scrollbars                 // 10399
                                                                                                                       // 10400
	// when the time-grid isn't tall enough to occupy the given height, we render an <hr> underneath                      // 10401
	bottomRuleEl: null,                                                                                                   // 10402
	bottomRuleHeight: null,                                                                                               // 10403
                                                                                                                       // 10404
                                                                                                                       // 10405
	initialize: function() {                                                                                              // 10406
		this.timeGrid = new TimeGrid(this);                                                                                  // 10407
                                                                                                                       // 10408
		if (this.opt('allDaySlot')) { // should we display the "all-day" area?                                               // 10409
			this.dayGrid = new DayGrid(this); // the all-day subcomponent of this view                                          // 10410
                                                                                                                       // 10411
			// the coordinate grid will be a combination of both subcomponents' grids                                           // 10412
			this.coordMap = new ComboCoordMap([                                                                                 // 10413
				this.dayGrid.coordMap,                                                                                             // 10414
				this.timeGrid.coordMap                                                                                             // 10415
			]);                                                                                                                 // 10416
		}                                                                                                                    // 10417
		else {                                                                                                               // 10418
			this.coordMap = this.timeGrid.coordMap;                                                                             // 10419
		}                                                                                                                    // 10420
	},                                                                                                                    // 10421
                                                                                                                       // 10422
                                                                                                                       // 10423
	/* Rendering                                                                                                          // 10424
	------------------------------------------------------------------------------------------------------------------*/  // 10425
                                                                                                                       // 10426
                                                                                                                       // 10427
	// Sets the display range and computes all necessary dates                                                            // 10428
	setRange: function(range) {                                                                                           // 10429
		View.prototype.setRange.call(this, range); // call the super-method                                                  // 10430
                                                                                                                       // 10431
		this.timeGrid.setRange(range);                                                                                       // 10432
		if (this.dayGrid) {                                                                                                  // 10433
			this.dayGrid.setRange(range);                                                                                       // 10434
		}                                                                                                                    // 10435
	},                                                                                                                    // 10436
                                                                                                                       // 10437
                                                                                                                       // 10438
	// Renders the view into `this.el`, which has already been assigned                                                   // 10439
	render: function() {                                                                                                  // 10440
                                                                                                                       // 10441
		this.el.addClass('fc-agenda-view').html(this.renderHtml());                                                          // 10442
                                                                                                                       // 10443
		// the element that wraps the time-grid that will probably scroll                                                    // 10444
		this.scrollerEl = this.el.find('.fc-time-grid-container');                                                           // 10445
		this.timeGrid.coordMap.containerEl = this.scrollerEl; // don't accept clicks/etc outside of this                     // 10446
                                                                                                                       // 10447
		this.timeGrid.setElement(this.el.find('.fc-time-grid'));                                                             // 10448
		this.timeGrid.renderDates();                                                                                         // 10449
                                                                                                                       // 10450
		// the <hr> that sometimes displays under the time-grid                                                              // 10451
		this.bottomRuleEl = $('<hr class="fc-divider ' + this.widgetHeaderClass + '"/>')                                     // 10452
			.appendTo(this.timeGrid.el); // inject it into the time-grid                                                        // 10453
                                                                                                                       // 10454
		if (this.dayGrid) {                                                                                                  // 10455
			this.dayGrid.setElement(this.el.find('.fc-day-grid'));                                                              // 10456
			this.dayGrid.renderDates();                                                                                         // 10457
                                                                                                                       // 10458
			// have the day-grid extend it's coordinate area over the <hr> dividing the two grids                               // 10459
			this.dayGrid.bottomCoordPadding = this.dayGrid.el.next('hr').outerHeight();                                         // 10460
		}                                                                                                                    // 10461
                                                                                                                       // 10462
		this.noScrollRowEls = this.el.find('.fc-row:not(.fc-scroller *)'); // fake rows not within the scroller              // 10463
	},                                                                                                                    // 10464
                                                                                                                       // 10465
                                                                                                                       // 10466
	// Unrenders the content of the view. Since we haven't separated skeleton rendering from date rendering,              // 10467
	// always completely kill each grid's rendering.                                                                      // 10468
	destroy: function() {                                                                                                 // 10469
		this.timeGrid.destroyDates();                                                                                        // 10470
		this.timeGrid.removeElement();                                                                                       // 10471
                                                                                                                       // 10472
		if (this.dayGrid) {                                                                                                  // 10473
			this.dayGrid.destroyDates();                                                                                        // 10474
			this.dayGrid.removeElement();                                                                                       // 10475
		}                                                                                                                    // 10476
	},                                                                                                                    // 10477
                                                                                                                       // 10478
                                                                                                                       // 10479
	renderBusinessHours: function() {                                                                                     // 10480
		this.timeGrid.renderBusinessHours();                                                                                 // 10481
                                                                                                                       // 10482
		if (this.dayGrid) {                                                                                                  // 10483
			this.dayGrid.renderBusinessHours();                                                                                 // 10484
		}                                                                                                                    // 10485
	},                                                                                                                    // 10486
                                                                                                                       // 10487
                                                                                                                       // 10488
	// Builds the HTML skeleton for the view.                                                                             // 10489
	// The day-grid and time-grid components will render inside containers defined by this HTML.                          // 10490
	renderHtml: function() {                                                                                              // 10491
		return '' +                                                                                                          // 10492
			'<table>' +                                                                                                         // 10493
				'<thead class="fc-head">' +                                                                                        // 10494
					'<tr>' +                                                                                                          // 10495
						'<td class="' + this.widgetHeaderClass + '">' +                                                                  // 10496
							this.timeGrid.headHtml() + // render the day-of-week headers                                                    // 10497
						'</td>' +                                                                                                        // 10498
					'</tr>' +                                                                                                         // 10499
				'</thead>' +                                                                                                       // 10500
				'<tbody class="fc-body">' +                                                                                        // 10501
					'<tr>' +                                                                                                          // 10502
						'<td class="' + this.widgetContentClass + '">' +                                                                 // 10503
							(this.dayGrid ?                                                                                                 // 10504
								'<div class="fc-day-grid"/>' +                                                                                 // 10505
								'<hr class="fc-divider ' + this.widgetHeaderClass + '"/>' :                                                    // 10506
								''                                                                                                             // 10507
								) +                                                                                                            // 10508
							'<div class="fc-time-grid-container">' +                                                                        // 10509
								'<div class="fc-time-grid"/>' +                                                                                // 10510
							'</div>' +                                                                                                      // 10511
						'</td>' +                                                                                                        // 10512
					'</tr>' +                                                                                                         // 10513
				'</tbody>' +                                                                                                       // 10514
			'</table>';                                                                                                         // 10515
	},                                                                                                                    // 10516
                                                                                                                       // 10517
                                                                                                                       // 10518
	// Generates the HTML that will go before the day-of week header cells.                                               // 10519
	// Queried by the TimeGrid subcomponent when generating rows. Ordering depends on isRTL.                              // 10520
	headIntroHtml: function() {                                                                                           // 10521
		var date;                                                                                                            // 10522
		var weekText;                                                                                                        // 10523
                                                                                                                       // 10524
		if (this.opt('weekNumbers')) {                                                                                       // 10525
			date = this.timeGrid.getCell(0).start;                                                                              // 10526
			weekText = date.format(this.opt('smallWeekFormat'));                                                                // 10527
                                                                                                                       // 10528
			return '' +                                                                                                         // 10529
				'<th class="fc-axis fc-week-number ' + this.widgetHeaderClass + '" ' + this.axisStyleAttr() + '>' +                // 10530
					'<span>' + // needed for matchCellWidths                                                                          // 10531
						htmlEscape(weekText) +                                                                                           // 10532
					'</span>' +                                                                                                       // 10533
				'</th>';                                                                                                           // 10534
		}                                                                                                                    // 10535
		else {                                                                                                               // 10536
			return '<th class="fc-axis ' + this.widgetHeaderClass + '" ' + this.axisStyleAttr() + '></th>';                     // 10537
		}                                                                                                                    // 10538
	},                                                                                                                    // 10539
                                                                                                                       // 10540
                                                                                                                       // 10541
	// Generates the HTML that goes before the all-day cells.                                                             // 10542
	// Queried by the DayGrid subcomponent when generating rows. Ordering depends on isRTL.                               // 10543
	dayIntroHtml: function() {                                                                                            // 10544
		return '' +                                                                                                          // 10545
			'<td class="fc-axis ' + this.widgetContentClass + '" ' + this.axisStyleAttr() + '>' +                               // 10546
				'<span>' + // needed for matchCellWidths                                                                           // 10547
					(this.opt('allDayHtml') || htmlEscape(this.opt('allDayText'))) +                                                  // 10548
				'</span>' +                                                                                                        // 10549
			'</td>';                                                                                                            // 10550
	},                                                                                                                    // 10551
                                                                                                                       // 10552
                                                                                                                       // 10553
	// Generates the HTML that goes before the bg of the TimeGrid slot area. Long vertical column.                        // 10554
	slotBgIntroHtml: function() {                                                                                         // 10555
		return '<td class="fc-axis ' + this.widgetContentClass + '" ' + this.axisStyleAttr() + '></td>';                     // 10556
	},                                                                                                                    // 10557
                                                                                                                       // 10558
                                                                                                                       // 10559
	// Generates the HTML that goes before all other types of cells.                                                      // 10560
	// Affects content-skeleton, helper-skeleton, highlight-skeleton for both the time-grid and day-grid.                 // 10561
	// Queried by the TimeGrid and DayGrid subcomponents when generating rows. Ordering depends on isRTL.                 // 10562
	introHtml: function() {                                                                                               // 10563
		return '<td class="fc-axis" ' + this.axisStyleAttr() + '></td>';                                                     // 10564
	},                                                                                                                    // 10565
                                                                                                                       // 10566
                                                                                                                       // 10567
	// Generates an HTML attribute string for setting the width of the axis, if it is known                               // 10568
	axisStyleAttr: function() {                                                                                           // 10569
		if (this.axisWidth !== null) {                                                                                       // 10570
			 return 'style="width:' + this.axisWidth + 'px"';                                                                   // 10571
		}                                                                                                                    // 10572
		return '';                                                                                                           // 10573
	},                                                                                                                    // 10574
                                                                                                                       // 10575
                                                                                                                       // 10576
	/* Dimensions                                                                                                         // 10577
	------------------------------------------------------------------------------------------------------------------*/  // 10578
                                                                                                                       // 10579
                                                                                                                       // 10580
	updateSize: function(isResize) {                                                                                      // 10581
		this.timeGrid.updateSize(isResize);                                                                                  // 10582
                                                                                                                       // 10583
		View.prototype.updateSize.call(this, isResize); // call the super-method                                             // 10584
	},                                                                                                                    // 10585
                                                                                                                       // 10586
                                                                                                                       // 10587
	// Refreshes the horizontal dimensions of the view                                                                    // 10588
	updateWidth: function() {                                                                                             // 10589
		// make all axis cells line up, and record the width so newly created axis cells will have it                        // 10590
		this.axisWidth = matchCellWidths(this.el.find('.fc-axis'));                                                          // 10591
	},                                                                                                                    // 10592
                                                                                                                       // 10593
                                                                                                                       // 10594
	// Adjusts the vertical dimensions of the view to the specified values                                                // 10595
	setHeight: function(totalHeight, isAuto) {                                                                            // 10596
		var eventLimit;                                                                                                      // 10597
		var scrollerHeight;                                                                                                  // 10598
                                                                                                                       // 10599
		if (this.bottomRuleHeight === null) {                                                                                // 10600
			// calculate the height of the rule the very first time                                                             // 10601
			this.bottomRuleHeight = this.bottomRuleEl.outerHeight();                                                            // 10602
		}                                                                                                                    // 10603
		this.bottomRuleEl.hide(); // .show() will be called later if this <hr> is necessary                                  // 10604
                                                                                                                       // 10605
		// reset all dimensions back to the original state                                                                   // 10606
		this.scrollerEl.css('overflow', '');                                                                                 // 10607
		unsetScroller(this.scrollerEl);                                                                                      // 10608
		uncompensateScroll(this.noScrollRowEls);                                                                             // 10609
                                                                                                                       // 10610
		// limit number of events in the all-day area                                                                        // 10611
		if (this.dayGrid) {                                                                                                  // 10612
			this.dayGrid.destroySegPopover(); // kill the "more" popover if displayed                                           // 10613
                                                                                                                       // 10614
			eventLimit = this.opt('eventLimit');                                                                                // 10615
			if (eventLimit && typeof eventLimit !== 'number') {                                                                 // 10616
				eventLimit = AGENDA_ALL_DAY_EVENT_LIMIT; // make sure "auto" goes to a real number                                 // 10617
			}                                                                                                                   // 10618
			if (eventLimit) {                                                                                                   // 10619
				this.dayGrid.limitRows(eventLimit);                                                                                // 10620
			}                                                                                                                   // 10621
		}                                                                                                                    // 10622
                                                                                                                       // 10623
		if (!isAuto) { // should we force dimensions of the scroll container, or let the contents be natural height?         // 10624
                                                                                                                       // 10625
			scrollerHeight = this.computeScrollerHeight(totalHeight);                                                           // 10626
			if (setPotentialScroller(this.scrollerEl, scrollerHeight)) { // using scrollbars?                                   // 10627
                                                                                                                       // 10628
				// make the all-day and header rows lines up                                                                       // 10629
				compensateScroll(this.noScrollRowEls, getScrollbarWidths(this.scrollerEl));                                        // 10630
                                                                                                                       // 10631
				// the scrollbar compensation might have changed text flow, which might affect height, so recalculate              // 10632
				// and reapply the desired height to the scroller.                                                                 // 10633
				scrollerHeight = this.computeScrollerHeight(totalHeight);                                                          // 10634
				this.scrollerEl.height(scrollerHeight);                                                                            // 10635
			}                                                                                                                   // 10636
			else { // no scrollbars                                                                                             // 10637
				// still, force a height and display the bottom rule (marks the end of day)                                        // 10638
				this.scrollerEl.height(scrollerHeight).css('overflow', 'hidden'); // in case <hr> goes outside                     // 10639
				this.bottomRuleEl.show();                                                                                          // 10640
			}                                                                                                                   // 10641
		}                                                                                                                    // 10642
	},                                                                                                                    // 10643
                                                                                                                       // 10644
                                                                                                                       // 10645
	// Computes the initial pre-configured scroll state prior to allowing the user to change it                           // 10646
	computeInitialScroll: function() {                                                                                    // 10647
		var scrollTime = moment.duration(this.opt('scrollTime'));                                                            // 10648
		var top = this.timeGrid.computeTimeTop(scrollTime);                                                                  // 10649
                                                                                                                       // 10650
		// zoom can give weird floating-point values. rather scroll a little bit further                                     // 10651
		top = Math.ceil(top);                                                                                                // 10652
                                                                                                                       // 10653
		if (top) {                                                                                                           // 10654
			top++; // to overcome top border that slots beyond the first have. looks better                                     // 10655
		}                                                                                                                    // 10656
                                                                                                                       // 10657
		return top;                                                                                                          // 10658
	},                                                                                                                    // 10659
                                                                                                                       // 10660
                                                                                                                       // 10661
	/* Events                                                                                                             // 10662
	------------------------------------------------------------------------------------------------------------------*/  // 10663
                                                                                                                       // 10664
                                                                                                                       // 10665
	// Renders events onto the view and populates the View's segment array                                                // 10666
	renderEvents: function(events) {                                                                                      // 10667
		var dayEvents = [];                                                                                                  // 10668
		var timedEvents = [];                                                                                                // 10669
		var daySegs = [];                                                                                                    // 10670
		var timedSegs;                                                                                                       // 10671
		var i;                                                                                                               // 10672
                                                                                                                       // 10673
		// separate the events into all-day and timed                                                                        // 10674
		for (i = 0; i < events.length; i++) {                                                                                // 10675
			if (events[i].allDay) {                                                                                             // 10676
				dayEvents.push(events[i]);                                                                                         // 10677
			}                                                                                                                   // 10678
			else {                                                                                                              // 10679
				timedEvents.push(events[i]);                                                                                       // 10680
			}                                                                                                                   // 10681
		}                                                                                                                    // 10682
                                                                                                                       // 10683
		// render the events in the subcomponents                                                                            // 10684
		timedSegs = this.timeGrid.renderEvents(timedEvents);                                                                 // 10685
		if (this.dayGrid) {                                                                                                  // 10686
			daySegs = this.dayGrid.renderEvents(dayEvents);                                                                     // 10687
		}                                                                                                                    // 10688
                                                                                                                       // 10689
		// the all-day area is flexible and might have a lot of events, so shift the height                                  // 10690
		this.updateHeight();                                                                                                 // 10691
	},                                                                                                                    // 10692
                                                                                                                       // 10693
                                                                                                                       // 10694
	// Retrieves all segment objects that are rendered in the view                                                        // 10695
	getEventSegs: function() {                                                                                            // 10696
		return this.timeGrid.getEventSegs().concat(                                                                          // 10697
			this.dayGrid ? this.dayGrid.getEventSegs() : []                                                                     // 10698
		);                                                                                                                   // 10699
	},                                                                                                                    // 10700
                                                                                                                       // 10701
                                                                                                                       // 10702
	// Unrenders all event elements and clears internal segment data                                                      // 10703
	destroyEvents: function() {                                                                                           // 10704
                                                                                                                       // 10705
		// destroy the events in the subcomponents                                                                           // 10706
		this.timeGrid.destroyEvents();                                                                                       // 10707
		if (this.dayGrid) {                                                                                                  // 10708
			this.dayGrid.destroyEvents();                                                                                       // 10709
		}                                                                                                                    // 10710
                                                                                                                       // 10711
		// we DON'T need to call updateHeight() because:                                                                     // 10712
		// A) a renderEvents() call always happens after this, which will eventually call updateHeight()                     // 10713
		// B) in IE8, this causes a flash whenever events are rerendered                                                     // 10714
	},                                                                                                                    // 10715
                                                                                                                       // 10716
                                                                                                                       // 10717
	/* Dragging (for events and external elements)                                                                        // 10718
	------------------------------------------------------------------------------------------------------------------*/  // 10719
                                                                                                                       // 10720
                                                                                                                       // 10721
	// A returned value of `true` signals that a mock "helper" event has been rendered.                                   // 10722
	renderDrag: function(dropLocation, seg) {                                                                             // 10723
		if (dropLocation.start.hasTime()) {                                                                                  // 10724
			return this.timeGrid.renderDrag(dropLocation, seg);                                                                 // 10725
		}                                                                                                                    // 10726
		else if (this.dayGrid) {                                                                                             // 10727
			return this.dayGrid.renderDrag(dropLocation, seg);                                                                  // 10728
		}                                                                                                                    // 10729
	},                                                                                                                    // 10730
                                                                                                                       // 10731
                                                                                                                       // 10732
	destroyDrag: function() {                                                                                             // 10733
		this.timeGrid.destroyDrag();                                                                                         // 10734
		if (this.dayGrid) {                                                                                                  // 10735
			this.dayGrid.destroyDrag();                                                                                         // 10736
		}                                                                                                                    // 10737
	},                                                                                                                    // 10738
                                                                                                                       // 10739
                                                                                                                       // 10740
	/* Selection                                                                                                          // 10741
	------------------------------------------------------------------------------------------------------------------*/  // 10742
                                                                                                                       // 10743
                                                                                                                       // 10744
	// Renders a visual indication of a selection                                                                         // 10745
	renderSelection: function(range) {                                                                                    // 10746
		if (range.start.hasTime() || range.end.hasTime()) {                                                                  // 10747
			this.timeGrid.renderSelection(range);                                                                               // 10748
		}                                                                                                                    // 10749
		else if (this.dayGrid) {                                                                                             // 10750
			this.dayGrid.renderSelection(range);                                                                                // 10751
		}                                                                                                                    // 10752
	},                                                                                                                    // 10753
                                                                                                                       // 10754
                                                                                                                       // 10755
	// Unrenders a visual indications of a selection                                                                      // 10756
	destroySelection: function() {                                                                                        // 10757
		this.timeGrid.destroySelection();                                                                                    // 10758
		if (this.dayGrid) {                                                                                                  // 10759
			this.dayGrid.destroySelection();                                                                                    // 10760
		}                                                                                                                    // 10761
	}                                                                                                                     // 10762
                                                                                                                       // 10763
});                                                                                                                    // 10764
                                                                                                                       // 10765
AgendaView.defaults = AGENDA_DEFAULTS;                                                                                 // 10766
                                                                                                                       // 10767
;;                                                                                                                     // 10768
                                                                                                                       // 10769
/* A week view with an all-day cell area at the top, and a time grid below                                             // 10770
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 10772
fcViews.agendaWeek = {                                                                                                 // 10773
	type: 'agenda',                                                                                                       // 10774
	duration: { weeks: 1 }                                                                                                // 10775
};                                                                                                                     // 10776
;;                                                                                                                     // 10777
                                                                                                                       // 10778
/* A day view with an all-day cell area at the top, and a time grid below                                              // 10779
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 10781
fcViews.agendaDay = {                                                                                                  // 10782
	type: 'agenda',                                                                                                       // 10783
	duration: { days: 1 }                                                                                                 // 10784
};                                                                                                                     // 10785
;;                                                                                                                     // 10786
                                                                                                                       // 10787
return fc; // export for Node/CommonJS                                                                                 // 10788
});                                                                                                                    // 10789
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 10799
}).call(this);                                                       // 10800
                                                                     // 10801
                                                                     // 10802
                                                                     // 10803
                                                                     // 10804
                                                                     // 10805
                                                                     // 10806
(function () {                                                       // 10807
                                                                     // 10808
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rzymek:fullcalendar/fullcalendar/dist/lang-all.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
(function(e){"function"==typeof define&&define.amd?define(["jquery","moment"],e):e(jQuery,moment)})(function(e,t){(function(){(t.defineLocale||t.lang).call(t,"ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:6,doy:12}}),e.fullCalendar.datepickerLang("ar-ma","ar",{closeText:"إغلاق",prevText:"&#x3C;السابق",nextText:"التالي&#x3E;",currentText:"اليوم",monthNames:["كانون الثاني","شباط","آذار","نيسان","مايو","حزيران","تموز","آب","أيلول","تشرين الأول","تشرين الثاني","كانون الأول"],monthNamesShort:["1","2","3","4","5","6","7","8","9","10","11","12"],dayNames:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesShort:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesMin:["ح","ن","ث","ر","خ","ج","س"],weekHeader:"أسبوع",dateFormat:"dd/mm/yy",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("ar-ma",{buttonText:{month:"شهر",week:"أسبوع",day:"يوم",list:"أجندة"},allDayText:"اليوم كله",eventLimitText:"أخرى"})})(),function(){var a={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};(t.defineLocale||t.lang).call(t,"ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e){return 12>e?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(e){return n[e]}).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return a[e]}).replace(/,/g,"،")},week:{dow:6,doy:12}}),e.fullCalendar.datepickerLang("ar-sa","ar",{closeText:"إغلاق",prevText:"&#x3C;السابق",nextText:"التالي&#x3E;",currentText:"اليوم",monthNames:["كانون الثاني","شباط","آذار","نيسان","مايو","حزيران","تموز","آب","أيلول","تشرين الأول","تشرين الثاني","كانون الأول"],monthNamesShort:["1","2","3","4","5","6","7","8","9","10","11","12"],dayNames:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesShort:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesMin:["ح","ن","ث","ر","خ","ج","س"],weekHeader:"أسبوع",dateFormat:"dd/mm/yy",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("ar-sa",{buttonText:{month:"شهر",week:"أسبوع",day:"يوم",list:"أجندة"},allDayText:"اليوم كله",eventLimitText:"أخرى"})}(),function(){(t.defineLocale||t.lang).call(t,"ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang("ar-tn","ar",{closeText:"إغلاق",prevText:"&#x3C;السابق",nextText:"التالي&#x3E;",currentText:"اليوم",monthNames:["كانون الثاني","شباط","آذار","نيسان","مايو","حزيران","تموز","آب","أيلول","تشرين الأول","تشرين الثاني","كانون الأول"],monthNamesShort:["1","2","3","4","5","6","7","8","9","10","11","12"],dayNames:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesShort:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesMin:["ح","ن","ث","ر","خ","ج","س"],weekHeader:"أسبوع",dateFormat:"dd/mm/yy",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("ar-tn",{buttonText:{month:"شهر",week:"أسبوع",day:"يوم",list:"أجندة"},allDayText:"اليوم كله",eventLimitText:"أخرى"})}(),function(){var a={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&10>=e%100?3:e%100>=11?4:5},i={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},s=function(e){return function(t,a){var n=r(t),s=i[e][r(t)];return 2===n&&(s=s[a?0:1]),s.replace(/%d/i,t)}},o=["كانون الثاني يناير","شباط فبراير","آذار مارس","نيسان أبريل","أيار مايو","حزيران يونيو","تموز يوليو","آب أغسطس","أيلول سبتمبر","تشرين الأول أكتوبر","تشرين الثاني نوفمبر","كانون الأول ديسمبر"];(t.defineLocale||t.lang).call(t,"ar",{months:o,monthsShort:o,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e){return 12>e?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:s("s"),m:s("m"),mm:s("m"),h:s("h"),hh:s("h"),d:s("d"),dd:s("d"),M:s("M"),MM:s("M"),y:s("y"),yy:s("y")},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(e){return n[e]}).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return a[e]}).replace(/,/g,"،")},week:{dow:6,doy:12}}),e.fullCalendar.datepickerLang("ar","ar",{closeText:"إغلاق",prevText:"&#x3C;السابق",nextText:"التالي&#x3E;",currentText:"اليوم",monthNames:["كانون الثاني","شباط","آذار","نيسان","مايو","حزيران","تموز","آب","أيلول","تشرين الأول","تشرين الثاني","كانون الأول"],monthNamesShort:["1","2","3","4","5","6","7","8","9","10","11","12"],dayNames:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesShort:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesMin:["ح","ن","ث","ر","خ","ج","س"],weekHeader:"أسبوع",dateFormat:"dd/mm/yy",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("ar",{buttonText:{month:"شهر",week:"أسبوع",day:"يوم",list:"أجندة"},allDayText:"اليوم كله",eventLimitText:"أخرى"})}(),function(){(t.defineLocale||t.lang).call(t,"bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[В изминалата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[В изминалия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дни",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},ordinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,a=e%100;return 0===e?e+"-ев":0===a?e+"-ен":a>10&&20>a?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}}),e.fullCalendar.datepickerLang("bg","bg",{closeText:"затвори",prevText:"&#x3C;назад",nextText:"напред&#x3E;",nextBigText:"&#x3E;&#x3E;",currentText:"днес",monthNames:["Януари","Февруари","Март","Април","Май","Юни","Юли","Август","Септември","Октомври","Ноември","Декември"],monthNamesShort:["Яну","Фев","Мар","Апр","Май","Юни","Юли","Авг","Сеп","Окт","Нов","Дек"],dayNames:["Неделя","Понеделник","Вторник","Сряда","Четвъртък","Петък","Събота"],dayNamesShort:["Нед","Пон","Вто","Сря","Чет","Пет","Съб"],dayNamesMin:["Не","По","Вт","Ср","Че","Пе","Съ"],weekHeader:"Wk",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("bg",{buttonText:{month:"Месец",week:"Седмица",day:"Ден",list:"График"},allDayText:"Цял ден",eventLimitText:function(e){return"+още "+e}})}(),function(){(t.defineLocale||t.lang).call(t,"ca",{months:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),monthsShort:"gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.".split("_"),weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"Dg_Dl_Dt_Dc_Dj_Dv_Ds".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"fa %s",s:"uns segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},ordinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var a=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return("w"===t||"W"===t)&&(a="a"),e+a},week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang("ca","ca",{closeText:"Tanca",prevText:"Anterior",nextText:"Següent",currentText:"Avui",monthNames:["gener","febrer","març","abril","maig","juny","juliol","agost","setembre","octubre","novembre","desembre"],monthNamesShort:["gen","feb","març","abr","maig","juny","jul","ag","set","oct","nov","des"],dayNames:["diumenge","dilluns","dimarts","dimecres","dijous","divendres","dissabte"],dayNamesShort:["dg","dl","dt","dc","dj","dv","ds"],dayNamesMin:["dg","dl","dt","dc","dj","dv","ds"],weekHeader:"Set",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("ca",{buttonText:{month:"Mes",week:"Setmana",day:"Dia",list:"Agenda"},allDayText:"Tot el dia",eventLimitText:"més"})}(),function(){function a(e){return e>1&&5>e&&1!==~~(e/10)}function n(e,t,n,r){var i=e+" ";switch(n){case"s":return t||r?"pár sekund":"pár sekundami";case"m":return t?"minuta":r?"minutu":"minutou";case"mm":return t||r?i+(a(e)?"minuty":"minut"):i+"minutami";case"h":return t?"hodina":r?"hodinu":"hodinou";case"hh":return t||r?i+(a(e)?"hodiny":"hodin"):i+"hodinami";case"d":return t||r?"den":"dnem";case"dd":return t||r?i+(a(e)?"dny":"dní"):i+"dny";case"M":return t||r?"měsíc":"měsícem";case"MM":return t||r?i+(a(e)?"měsíce":"měsíců"):i+"měsíci";case"y":return t||r?"rok":"rokem";case"yy":return t||r?i+(a(e)?"roky":"let"):i+"lety"}}var r="leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),i="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_");(t.defineLocale||t.lang).call(t,"cs",{months:r,monthsShort:i,monthsParse:function(e,t){var a,n=[];for(a=0;12>a;a++)n[a]=RegExp("^"+e[a]+"$|^"+t[a]+"$","i");return n}(r,i),weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd D. MMMM YYYY LT"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang("cs","cs",{closeText:"Zavřít",prevText:"&#x3C;Dříve",nextText:"Později&#x3E;",currentText:"Nyní",monthNames:["leden","únor","březen","duben","květen","červen","červenec","srpen","září","říjen","listopad","prosinec"],monthNamesShort:["led","úno","bře","dub","kvě","čer","čvc","srp","zář","říj","lis","pro"],dayNames:["neděle","pondělí","úterý","středa","čtvrtek","pátek","sobota"],dayNamesShort:["ne","po","út","st","čt","pá","so"],dayNamesMin:["ne","po","út","st","čt","pá","so"],weekHeader:"Týd",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("cs",{buttonText:{month:"Měsíc",week:"Týden",day:"Den",list:"Agenda"},allDayText:"Celý den",eventLimitText:function(e){return"+další: "+e}})}(),function(){(t.defineLocale||t.lang).call(t,"da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd [d.] D. MMMM YYYY LT"},calendar:{sameDay:"[I dag kl.] LT",nextDay:"[I morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[I går kl.] LT",lastWeek:"[sidste] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang("da","da",{closeText:"Luk",prevText:"&#x3C;Forrige",nextText:"Næste&#x3E;",currentText:"Idag",monthNames:["Januar","Februar","Marts","April","Maj","Juni","Juli","August","September","Oktober","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","Maj","Jun","Jul","Aug","Sep","Okt","Nov","Dec"],dayNames:["Søndag","Mandag","Tirsdag","Onsdag","Torsdag","Fredag","Lørdag"],dayNamesShort:["Søn","Man","Tir","Ons","Tor","Fre","Lør"],dayNamesMin:["Sø","Ma","Ti","On","To","Fr","Lø"],weekHeader:"Uge",dateFormat:"dd-mm-yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("da",{buttonText:{month:"Måned",week:"Uge",day:"Dag",list:"Agenda"},allDayText:"Hele dagen",eventLimitText:"flere"})}(),function(){function a(e,t,a){var n={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?n[a][0]:n[a][1]}(t.defineLocale||t.lang).call(t,"de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd, D. MMMM YYYY LT"},calendar:{sameDay:"[Heute um] LT [Uhr]",sameElse:"L",nextDay:"[Morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[Gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",m:a,mm:"%d Minuten",h:a,hh:"%d Stunden",d:a,dd:a,M:a,MM:a,y:a,yy:a},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang("de-at","de",{closeText:"Schließen",prevText:"&#x3C;Zurück",nextText:"Vor&#x3E;",currentText:"Heute",monthNames:["Januar","Februar","März","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"],monthNamesShort:["Jan","Feb","Mär","Apr","Mai","Jun","Jul","Aug","Sep","Okt","Nov","Dez"],dayNames:["Sonntag","Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag"],dayNamesShort:["So","Mo","Di","Mi","Do","Fr","Sa"],dayNamesMin:["So","Mo","Di","Mi","Do","Fr","Sa"],weekHeader:"KW",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("de-at",{buttonText:{month:"Monat",week:"Woche",day:"Tag",list:"Terminübersicht"},allDayText:"Ganztägig",eventLimitText:function(e){return"+ weitere "+e}})}(),function(){function a(e,t,a){var n={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?n[a][0]:n[a][1]}(t.defineLocale||t.lang).call(t,"de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd, D. MMMM YYYY LT"},calendar:{sameDay:"[Heute um] LT [Uhr]",sameElse:"L",nextDay:"[Morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[Gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",m:a,mm:"%d Minuten",h:a,hh:"%d Stunden",d:a,dd:a,M:a,MM:a,y:a,yy:a},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang("de","de",{closeText:"Schließen",prevText:"&#x3C;Zurück",nextText:"Vor&#x3E;",currentText:"Heute",monthNames:["Januar","Februar","März","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"],monthNamesShort:["Jan","Feb","Mär","Apr","Mai","Jun","Jul","Aug","Sep","Okt","Nov","Dez"],dayNames:["Sonntag","Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag"],dayNamesShort:["So","Mo","Di","Mi","Do","Fr","Sa"],dayNamesMin:["So","Mo","Di","Mi","Do","Fr","Sa"],weekHeader:"KW",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("de",{buttonText:{month:"Monat",week:"Woche",day:"Tag",list:"Terminübersicht"},allDayText:"Ganztägig",eventLimitText:function(e){return"+ weitere "+e}})}(),function(){(t.defineLocale||t.lang).call(t,"el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(e,t){return/D/.test(t.substring(0,t.indexOf("MMMM")))?this._monthsGenitiveEl[e.month()]:this._monthsNominativeEl[e.month()]},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(e,t,a){return e>11?a?"μμ":"ΜΜ":a?"πμ":"ΠΜ"},isPM:function(e){return"μ"===(e+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[το προηγούμενο] dddd [{}] LT";default:return"[την προηγούμενη] dddd [{}] LT"}},sameElse:"L"},calendar:function(e,t){var a=this._calendarEl[e],n=t&&t.hours();return"function"==typeof a&&(a=a.apply(t)),a.replace("{}",1===n%12?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},ordinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang("el","el",{closeText:"Κλείσιμο",prevText:"Προηγούμενος",nextText:"Επόμενος",currentText:"Σήμερα",monthNames:["Ιανουάριος","Φεβρουάριος","Μάρτιος","Απρίλιος","Μάιος","Ιούνιος","Ιούλιος","Αύγουστος","Σεπτέμβριος","Οκτώβριος","Νοέμβριος","Δεκέμβριος"],monthNamesShort:["Ιαν","Φεβ","Μαρ","Απρ","Μαι","Ιουν","Ιουλ","Αυγ","Σεπ","Οκτ","Νοε","Δεκ"],dayNames:["Κυριακή","Δευτέρα","Τρίτη","Τετάρτη","Πέμπτη","Παρασκευή","Σάββατο"],dayNamesShort:["Κυρ","Δευ","Τρι","Τετ","Πεμ","Παρ","Σαβ"],dayNamesMin:["Κυ","Δε","Τρ","Τε","Πε","Πα","Σα"],weekHeader:"Εβδ",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("el",{buttonText:{month:"Μήνας",week:"Εβδομάδα",day:"Ημέρα",list:"Ατζέντα"},allDayText:"Ολοήμερο",eventLimitText:"περισσότερα"})}(),function(){(t.defineLocale||t.lang).call(t,"en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,a=1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+a},week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang("en-au","en-AU",{closeText:"Done",prevText:"Prev",nextText:"Next",currentText:"Today",monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],dayNamesShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],dayNamesMin:["Su","Mo","Tu","We","Th","Fr","Sa"],weekHeader:"Wk",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("en-au")}(),function(){(t.defineLocale||t.lang).call(t,"en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"D MMMM, YYYY",LLL:"D MMMM, YYYY LT",LLLL:"dddd, D MMMM, YYYY LT"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,a=1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+a}}),e.fullCalendar.lang("en-ca")}(),function(){(t.defineLocale||t.lang).call(t,"en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,a=1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+a},week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang("en-gb","en-GB",{closeText:"Done",prevText:"Prev",nextText:"Next",currentText:"Today",monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],dayNamesShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],dayNamesMin:["Su","Mo","Tu","We","Th","Fr","Sa"],weekHeader:"Wk",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("en-gb")}(),function(){var a="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_");(t.defineLocale||t.lang).call(t,"es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,t){return/-MMM-/.test(t)?n[e.month()]:a[e.month()]},weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"Do_Lu_Ma_Mi_Ju_Vi_Sá".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY LT",LLLL:"dddd, D [de] MMMM [de] YYYY LT"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang("es","es",{closeText:"Cerrar",prevText:"&#x3C;Ant",nextText:"Sig&#x3E;",currentText:"Hoy",monthNames:["enero","febrero","marzo","abril","mayo","junio","julio","agosto","septiembre","octubre","noviembre","diciembre"],monthNamesShort:["ene","feb","mar","abr","may","jun","jul","ago","sep","oct","nov","dic"],dayNames:["domingo","lunes","martes","miércoles","jueves","viernes","sábado"],dayNamesShort:["dom","lun","mar","mié","jue","vie","sáb"],dayNamesMin:["D","L","M","X","J","V","S"],weekHeader:"Sm",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("es",{buttonText:{month:"Mes",week:"Semana",day:"Día",list:"Agenda"},allDayHtml:"Todo<br/>el día",eventLimitText:"más"})}(),function(){var a={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},n={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"};(t.defineLocale||t.lang).call(t,"fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(e){return/بعد از ظهر/.test(e)},meridiem:function(e){return 12>e?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چندین ثانیه",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(e){return e.replace(/[۰-۹]/g,function(e){return n[e]}).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return a[e]}).replace(/,/g,"،")},ordinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}}),e.fullCalendar.datepickerLang("fa","fa",{closeText:"بستن",prevText:"&#x3C;قبلی",nextText:"بعدی&#x3E;",currentText:"امروز",monthNames:["ژانویه","فوریه","مارس","آوریل","مه","ژوئن","ژوئیه","اوت","سپتامبر","اکتبر","نوامبر","دسامبر"],monthNamesShort:["1","2","3","4","5","6","7","8","9","10","11","12"],dayNames:["يکشنبه","دوشنبه","سه‌شنبه","چهارشنبه","پنجشنبه","جمعه","شنبه"],dayNamesShort:["ی","د","س","چ","پ","ج","ش"],dayNamesMin:["ی","د","س","چ","پ","ج","ش"],weekHeader:"هف",dateFormat:"yy/mm/dd",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("fa",{buttonText:{month:"ماه",week:"هفته",day:"روز",list:"برنامه"},allDayText:"تمام روز",eventLimitText:function(e){return"بیش از "+e
}})}(),function(){function a(e,t,a,r){var i="";switch(a){case"s":return r?"muutaman sekunnin":"muutama sekunti";case"m":return r?"minuutin":"minuutti";case"mm":i=r?"minuutin":"minuuttia";break;case"h":return r?"tunnin":"tunti";case"hh":i=r?"tunnin":"tuntia";break;case"d":return r?"päivän":"päivä";case"dd":i=r?"päivän":"päivää";break;case"M":return r?"kuukauden":"kuukausi";case"MM":i=r?"kuukauden":"kuukautta";break;case"y":return r?"vuoden":"vuosi";case"yy":i=r?"vuoden":"vuotta"}return i=n(e,r)+" "+i}function n(e,t){return 10>e?t?i[e]:r[e]:e}var r="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),i=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",r[7],r[8],r[9]];(t.defineLocale||t.lang).call(t,"fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] LT",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] LT",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] LT",llll:"ddd, Do MMM YYYY, [klo] LT"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang("fi","fi",{closeText:"Sulje",prevText:"&#xAB;Edellinen",nextText:"Seuraava&#xBB;",currentText:"Tänään",monthNames:["Tammikuu","Helmikuu","Maaliskuu","Huhtikuu","Toukokuu","Kesäkuu","Heinäkuu","Elokuu","Syyskuu","Lokakuu","Marraskuu","Joulukuu"],monthNamesShort:["Tammi","Helmi","Maalis","Huhti","Touko","Kesä","Heinä","Elo","Syys","Loka","Marras","Joulu"],dayNamesShort:["Su","Ma","Ti","Ke","To","Pe","La"],dayNames:["Sunnuntai","Maanantai","Tiistai","Keskiviikko","Torstai","Perjantai","Lauantai"],dayNamesMin:["Su","Ma","Ti","Ke","To","Pe","La"],weekHeader:"Vk",dateFormat:"d.m.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("fi",{buttonText:{month:"Kuukausi",week:"Viikko",day:"Päivä",list:"Tapahtumat"},allDayText:"Koko päivä",eventLimitText:"lisää"})}(),function(){(t.defineLocale||t.lang).call(t,"fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[Aujourd'hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},ordinalParse:/\d{1,2}(er|)/,ordinal:function(e){return e+(1===e?"er":"")}}),e.fullCalendar.datepickerLang("fr-ca","fr-CA",{closeText:"Fermer",prevText:"Précédent",nextText:"Suivant",currentText:"Aujourd'hui",monthNames:["janvier","février","mars","avril","mai","juin","juillet","août","septembre","octobre","novembre","décembre"],monthNamesShort:["janv.","févr.","mars","avril","mai","juin","juil.","août","sept.","oct.","nov.","déc."],dayNames:["dimanche","lundi","mardi","mercredi","jeudi","vendredi","samedi"],dayNamesShort:["dim.","lun.","mar.","mer.","jeu.","ven.","sam."],dayNamesMin:["D","L","M","M","J","V","S"],weekHeader:"Sem.",dateFormat:"yy-mm-dd",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("fr-ca",{buttonText:{month:"Mois",week:"Semaine",day:"Jour",list:"Mon planning"},allDayHtml:"Toute la<br/>journée",eventLimitText:"en plus"})}(),function(){(t.defineLocale||t.lang).call(t,"fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[Aujourd'hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},ordinalParse:/\d{1,2}(er|)/,ordinal:function(e){return e+(1===e?"er":"")},week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang("fr","fr",{closeText:"Fermer",prevText:"Précédent",nextText:"Suivant",currentText:"Aujourd'hui",monthNames:["janvier","février","mars","avril","mai","juin","juillet","août","septembre","octobre","novembre","décembre"],monthNamesShort:["janv.","févr.","mars","avr.","mai","juin","juil.","août","sept.","oct.","nov.","déc."],dayNames:["dimanche","lundi","mardi","mercredi","jeudi","vendredi","samedi"],dayNamesShort:["dim.","lun.","mar.","mer.","jeu.","ven.","sam."],dayNamesMin:["D","L","M","M","J","V","S"],weekHeader:"Sem.",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("fr",{buttonText:{month:"Mois",week:"Semaine",day:"Jour",list:"Mon planning"},allDayHtml:"Toute la<br/>journée",eventLimitText:"en plus"})}(),function(){(t.defineLocale||t.lang).call(t,"he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY LT",LLLL:"dddd, D [ב]MMMM YYYY LT",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY LT",llll:"ddd, D MMM YYYY LT"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(e){return 2===e?"שעתיים":e+" שעות"},d:"יום",dd:function(e){return 2===e?"יומיים":e+" ימים"},M:"חודש",MM:function(e){return 2===e?"חודשיים":e+" חודשים"},y:"שנה",yy:function(e){return 2===e?"שנתיים":0===e%10&&10!==e?e+" שנה":e+" שנים"}}}),e.fullCalendar.datepickerLang("he","he",{closeText:"סגור",prevText:"&#x3C;הקודם",nextText:"הבא&#x3E;",currentText:"היום",monthNames:["ינואר","פברואר","מרץ","אפריל","מאי","יוני","יולי","אוגוסט","ספטמבר","אוקטובר","נובמבר","דצמבר"],monthNamesShort:["ינו","פבר","מרץ","אפר","מאי","יוני","יולי","אוג","ספט","אוק","נוב","דצמ"],dayNames:["ראשון","שני","שלישי","רביעי","חמישי","שישי","שבת"],dayNamesShort:["א'","ב'","ג'","ד'","ה'","ו'","שבת"],dayNamesMin:["א'","ב'","ג'","ד'","ה'","ו'","שבת"],weekHeader:"Wk",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!0,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("he",{defaultButtonText:{month:"חודש",week:"שבוע",day:"יום",list:"סדר יום"},weekNumberTitle:"שבוע",allDayText:"כל היום",eventLimitText:"אחר"})}(),function(){var a={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};(t.defineLocale||t.lang).call(t,"hi",{months:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, LT",LLLL:"dddd, D MMMM YYYY, LT"},calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return a[e]})},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात"===t?4>e?e:e+12:"सुबह"===t?e:"दोपहर"===t?e>=10?e:e+12:"शाम"===t?e+12:void 0},meridiem:function(e){return 4>e?"रात":10>e?"सुबह":17>e?"दोपहर":20>e?"शाम":"रात"},week:{dow:0,doy:6}}),e.fullCalendar.datepickerLang("hi","hi",{closeText:"बंद",prevText:"पिछला",nextText:"अगला",currentText:"आज",monthNames:["जनवरी ","फरवरी","मार्च","अप्रेल","मई","जून","जूलाई","अगस्त ","सितम्बर","अक्टूबर","नवम्बर","दिसम्बर"],monthNamesShort:["जन","फर","मार्च","अप्रेल","मई","जून","जूलाई","अग","सित","अक्ट","नव","दि"],dayNames:["रविवार","सोमवार","मंगलवार","बुधवार","गुरुवार","शुक्रवार","शनिवार"],dayNamesShort:["रवि","सोम","मंगल","बुध","गुरु","शुक्र","शनि"],dayNamesMin:["रवि","सोम","मंगल","बुध","गुरु","शुक्र","शनि"],weekHeader:"हफ्ता",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("hi",{buttonText:{month:"महीना",week:"सप्ताह",day:"दिन",list:"कार्यसूची"},allDayText:"सभी दिन",eventLimitText:function(e){return"+अधिक "+e}})}(),function(){function a(e,t,a){var n=e+" ";switch(a){case"m":return t?"jedna minuta":"jedne minute";case"mm":return n+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return n+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return n+=1===e?"dan":"dana";case"MM":return n+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return n+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}(t.defineLocale||t.lang).call(t,"hr",{months:"sječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_"),monthsShort:"sje._vel._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd, D. MMMM YYYY LT"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",m:a,mm:a,h:a,hh:a,d:"dan",dd:a,M:"mjesec",MM:a,y:"godinu",yy:a},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),e.fullCalendar.datepickerLang("hr","hr",{closeText:"Zatvori",prevText:"&#x3C;",nextText:"&#x3E;",currentText:"Danas",monthNames:["Siječanj","Veljača","Ožujak","Travanj","Svibanj","Lipanj","Srpanj","Kolovoz","Rujan","Listopad","Studeni","Prosinac"],monthNamesShort:["Sij","Velj","Ožu","Tra","Svi","Lip","Srp","Kol","Ruj","Lis","Stu","Pro"],dayNames:["Nedjelja","Ponedjeljak","Utorak","Srijeda","Četvrtak","Petak","Subota"],dayNamesShort:["Ned","Pon","Uto","Sri","Čet","Pet","Sub"],dayNamesMin:["Ne","Po","Ut","Sr","Če","Pe","Su"],weekHeader:"Tje",dateFormat:"dd.mm.yy.",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("hr",{buttonText:{month:"Mjesec",week:"Tjedan",day:"Dan",list:"Raspored"},allDayText:"Cijeli dan",eventLimitText:function(e){return"+ još "+e}})}(),function(){function a(e,t,a,n){var r=e;switch(a){case"s":return n||t?"néhány másodperc":"néhány másodperce";case"m":return"egy"+(n||t?" perc":" perce");case"mm":return r+(n||t?" perc":" perce");case"h":return"egy"+(n||t?" óra":" órája");case"hh":return r+(n||t?" óra":" órája");case"d":return"egy"+(n||t?" nap":" napja");case"dd":return r+(n||t?" nap":" napja");case"M":return"egy"+(n||t?" hónap":" hónapja");case"MM":return r+(n||t?" hónap":" hónapja");case"y":return"egy"+(n||t?" év":" éve");case"yy":return r+(n||t?" év":" éve")}return""}function n(e){return(e?"":"[múlt] ")+"["+r[this.day()]+"] LT[-kor]"}var r="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");(t.defineLocale||t.lang).call(t,"hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"),weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D., LT",LLLL:"YYYY. MMMM D., dddd LT"},meridiemParse:/de|du/i,isPM:function(e){return"u"===e.charAt(1).toLowerCase()},meridiem:function(e,t,a){return 12>e?a===!0?"de":"DE":a===!0?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return n.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return n.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),e.fullCalendar.datepickerLang("hu","hu",{closeText:"bezár",prevText:"vissza",nextText:"előre",currentText:"ma",monthNames:["Január","Február","Március","Április","Május","Június","Július","Augusztus","Szeptember","Október","November","December"],monthNamesShort:["Jan","Feb","Már","Ápr","Máj","Jún","Júl","Aug","Szep","Okt","Nov","Dec"],dayNames:["Vasárnap","Hétfő","Kedd","Szerda","Csütörtök","Péntek","Szombat"],dayNamesShort:["Vas","Hét","Ked","Sze","Csü","Pén","Szo"],dayNamesMin:["V","H","K","Sze","Cs","P","Szo"],weekHeader:"Hét",dateFormat:"yy.mm.dd.",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:""}),e.fullCalendar.lang("hu",{buttonText:{month:"Hónap",week:"Hét",day:"Nap",list:"Napló"},allDayText:"Egész nap",eventLimitText:"további"})}(),function(){(t.defineLocale||t.lang).call(t,"id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"LT.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] LT",LLLL:"dddd, D MMMM YYYY [pukul] LT"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"siang"===t?e>=11?e:e+12:"sore"===t||"malam"===t?e+12:void 0},meridiem:function(e){return 11>e?"pagi":15>e?"siang":19>e?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}}),e.fullCalendar.datepickerLang("id","id",{closeText:"Tutup",prevText:"&#x3C;mundur",nextText:"maju&#x3E;",currentText:"hari ini",monthNames:["Januari","Februari","Maret","April","Mei","Juni","Juli","Agustus","September","Oktober","Nopember","Desember"],monthNamesShort:["Jan","Feb","Mar","Apr","Mei","Jun","Jul","Agus","Sep","Okt","Nop","Des"],dayNames:["Minggu","Senin","Selasa","Rabu","Kamis","Jumat","Sabtu"],dayNamesShort:["Min","Sen","Sel","Rab","kam","Jum","Sab"],dayNamesMin:["Mg","Sn","Sl","Rb","Km","jm","Sb"],weekHeader:"Mg",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("id",{buttonText:{month:"Bulan",week:"Minggu",day:"Hari",list:"Agenda"},allDayHtml:"Sehari<br/>penuh",eventLimitText:"lebih"})}(),function(){function a(e){return 11===e%100?!0:1===e%10?!1:!0}function n(e,t,n,r){var i=e+" ";switch(n){case"s":return t||r?"nokkrar sekúndur":"nokkrum sekúndum";case"m":return t?"mínúta":"mínútu";case"mm":return a(e)?i+(t||r?"mínútur":"mínútum"):t?i+"mínúta":i+"mínútu";case"hh":return a(e)?i+(t||r?"klukkustundir":"klukkustundum"):i+"klukkustund";case"d":return t?"dagur":r?"dag":"degi";case"dd":return a(e)?t?i+"dagar":i+(r?"daga":"dögum"):t?i+"dagur":i+(r?"dag":"degi");case"M":return t?"mánuður":r?"mánuð":"mánuði";case"MM":return a(e)?t?i+"mánuðir":i+(r?"mánuði":"mánuðum"):t?i+"mánuður":i+(r?"mánuð":"mánuði");case"y":return t||r?"ár":"ári";case"yy":return a(e)?i+(t||r?"ár":"árum"):i+(t||r?"ár":"ári")}}(t.defineLocale||t.lang).call(t,"is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] LT",LLLL:"dddd, D. MMMM YYYY [kl.] LT"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:n,m:n,mm:n,h:"klukkustund",hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang("is","is",{closeText:"Loka",prevText:"&#x3C; Fyrri",nextText:"Næsti &#x3E;",currentText:"Í dag",monthNames:["Janúar","Febrúar","Mars","Apríl","Maí","Júní","Júlí","Ágúst","September","Október","Nóvember","Desember"],monthNamesShort:["Jan","Feb","Mar","Apr","Maí","Jún","Júl","Ágú","Sep","Okt","Nóv","Des"],dayNames:["Sunnudagur","Mánudagur","Þriðjudagur","Miðvikudagur","Fimmtudagur","Föstudagur","Laugardagur"],dayNamesShort:["Sun","Mán","Þri","Mið","Fim","Fös","Lau"],dayNamesMin:["Su","Má","Þr","Mi","Fi","Fö","La"],weekHeader:"Vika",dateFormat:"dd.mm.yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("is",{buttonText:{month:"Mánuður",week:"Vika",day:"Dagur",list:"Dagskrá"},allDayHtml:"Allan<br/>daginn",eventLimitText:"meira"})}(),function(){(t.defineLocale||t.lang).call(t,"it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato".split("_"),weekdaysShort:"Dom_Lun_Mar_Mer_Gio_Ven_Sab".split("_"),weekdaysMin:"D_L_Ma_Me_G_V_S".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang("it","it",{closeText:"Chiudi",prevText:"&#x3C;Prec",nextText:"Succ&#x3E;",currentText:"Oggi",monthNames:["Gennaio","Febbraio","Marzo","Aprile","Maggio","Giugno","Luglio","Agosto","Settembre","Ottobre","Novembre","Dicembre"],monthNamesShort:["Gen","Feb","Mar","Apr","Mag","Giu","Lug","Ago","Set","Ott","Nov","Dic"],dayNames:["Domenica","Lunedì","Martedì","Mercoledì","Giovedì","Venerdì","Sabato"],dayNamesShort:["Dom","Lun","Mar","Mer","Gio","Ven","Sab"],dayNamesMin:["Do","Lu","Ma","Me","Gi","Ve","Sa"],weekHeader:"Sm",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("it",{buttonText:{month:"Mese",week:"Settimana",day:"Giorno",list:"Agenda"},allDayHtml:"Tutto il<br/>giorno",eventLimitText:function(e){return"+altri "+e}})}(),function(){(t.defineLocale||t.lang).call(t,"ja",{months:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"Ah時m分",LTS:"LTs秒",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日LT",LLLL:"YYYY年M月D日LT dddd"},meridiemParse:/午前|午後/i,isPM:function(e){return"午後"===e},meridiem:function(e){return 12>e?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:"[来週]dddd LT",lastDay:"[昨日] LT",lastWeek:"[前週]dddd LT",sameElse:"L"},relativeTime:{future:"%s後",past:"%s前",s:"数秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}}),e.fullCalendar.datepickerLang("ja","ja",{closeText:"閉じる",prevText:"&#x3C;前",nextText:"次&#x3E;",currentText:"今日",monthNames:["1月","2月","3月","4月","5月","6月","7月","8月","9月","10月","11月","12月"],monthNamesShort:["1月","2月","3月","4月","5月","6月","7月","8月","9月","10月","11月","12月"],dayNames:["日曜日","月曜日","火曜日","水曜日","木曜日","金曜日","土曜日"],dayNamesShort:["日","月","火","水","木","金","土"],dayNamesMin:["日","月","火","水","木","金","土"],weekHeader:"週",dateFormat:"yy/mm/dd",firstDay:0,isRTL:!1,showMonthAfterYear:!0,yearSuffix:"年"}),e.fullCalendar.lang("ja",{buttonText:{month:"月",week:"週",day:"日",list:"予定リスト"},allDayText:"終日",eventLimitText:function(e){return"他 "+e+" 件"}})}(),function(){(t.defineLocale||t.lang).call(t,"ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h시 m분",LTS:"A h시 m분 s초",L:"YYYY.MM.DD",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 LT",LLLL:"YYYY년 MMMM D일 dddd LT"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇초",ss:"%d초",m:"일분",mm:"%d분",h:"한시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한달",MM:"%d달",y:"일년",yy:"%d년"},ordinalParse:/\d{1,2}일/,ordinal:"%d일",meridiemParse:/오전|오후/,isPM:function(e){return"오후"===e},meridiem:function(e){return 12>e?"오전":"오후"}}),e.fullCalendar.datepickerLang("ko","ko",{closeText:"닫기",prevText:"이전달",nextText:"다음달",currentText:"오늘",monthNames:["1월","2월","3월","4월","5월","6월","7월","8월","9월","10월","11월","12월"],monthNamesShort:["1월","2월","3월","4월","5월","6월","7월","8월","9월","10월","11월","12월"],dayNames:["일요일","월요일","화요일","수요일","목요일","금요일","토요일"],dayNamesShort:["일","월","화","수","목","금","토"],dayNamesMin:["일","월","화","수","목","금","토"],weekHeader:"Wk",dateFormat:"yy-mm-dd",firstDay:0,isRTL:!1,showMonthAfterYear:!0,yearSuffix:"년"}),e.fullCalendar.lang("ko",{buttonText:{month:"월",week:"주",day:"일",list:"일정목록"},allDayText:"종일",eventLimitText:"개"})}(),function(){function a(e,t,a,n){return t?"kelios sekundės":n?"kelių sekundžių":"kelias sekundes"}function n(e,t,a,n){return t?i(a)[0]:n?i(a)[1]:i(a)[2]}function r(e){return 0===e%10||e>10&&20>e}function i(e){return d[e].split("_")}function s(e,t,a,s){var o=e+" ";return 1===e?o+n(e,t,a[0],s):t?o+(r(e)?i(a)[1]:i(a)[0]):s?o+i(a)[1]:o+(r(e)?i(a)[1]:i(a)[2])}function o(e,t){var a=-1===t.indexOf("dddd HH:mm"),n=l[e.day()];return a?n:n.substring(0,n.length-2)+"į"}var d={m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"},l="sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_");(t.defineLocale||t.lang).call(t,"lt",{months:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:o,weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], LT [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, LT [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], LT [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, LT [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:a,m:n,mm:s,h:n,hh:s,d:n,dd:s,M:n,MM:s,y:n,yy:s},ordinalParse:/\d{1,2}-oji/,ordinal:function(e){return e+"-oji"},week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang("lt","lt",{closeText:"Uždaryti",prevText:"&#x3C;Atgal",nextText:"Pirmyn&#x3E;",currentText:"Šiandien",monthNames:["Sausis","Vasaris","Kovas","Balandis","Gegužė","Birželis","Liepa","Rugpjūtis","Rugsėjis","Spalis","Lapkritis","Gruodis"],monthNamesShort:["Sau","Vas","Kov","Bal","Geg","Bir","Lie","Rugp","Rugs","Spa","Lap","Gru"],dayNames:["sekmadienis","pirmadienis","antradienis","trečiadienis","ketvirtadienis","penktadienis","šeštadienis"],dayNamesShort:["sek","pir","ant","tre","ket","pen","šeš"],dayNamesMin:["Se","Pr","An","Tr","Ke","Pe","Še"],weekHeader:"SAV",dateFormat:"yy-mm-dd",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:""}),e.fullCalendar.lang("lt",{buttonText:{month:"Mėnuo",week:"Savaitė",day:"Diena",list:"Darbotvarkė"},allDayText:"Visą dieną",eventLimitText:"daugiau"})}(),function(){function a(e,t,a){var n=e.split("_");return a?1===t%10&&11!==t?n[2]:n[3]:1===t%10&&11!==t?n[0]:n[1]}function n(e,t,n){return e+" "+a(r[n],e,t)}var r={mm:"minūti_minūtes_minūte_minūtes",hh:"stundu_stundas_stunda_stundas",dd:"dienu_dienas_diena_dienas",MM:"mēnesi_mēnešus_mēnesis_mēneši",yy:"gadu_gadus_gads_gadi"};(t.defineLocale||t.lang).call(t,"lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, LT",LLLL:"YYYY. [gada] D. MMMM, dddd, LT"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"%s vēlāk",past:"%s agrāk",s:"dažas sekundes",m:"minūti",mm:n,h:"stundu",hh:n,d:"dienu",dd:n,M:"mēnesi",MM:n,y:"gadu",yy:n},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang("lv","lv",{closeText:"Aizvērt",prevText:"Iepr.",nextText:"Nāk.",currentText:"Šodien",monthNames:["Janvāris","Februāris","Marts","Aprīlis","Maijs","Jūnijs","Jūlijs","Augusts","Septembris","Oktobris","Novembris","Decembris"],monthNamesShort:["Jan","Feb","Mar","Apr","Mai","Jūn","Jūl","Aug","Sep","Okt","Nov","Dec"],dayNames:["svētdiena","pirmdiena","otrdiena","trešdiena","ceturtdiena","piektdiena","sestdiena"],dayNamesShort:["svt","prm","otr","tre","ctr","pkt","sst"],dayNamesMin:["Sv","Pr","Ot","Tr","Ct","Pk","Ss"],weekHeader:"Ned.",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("lv",{buttonText:{month:"Mēnesis",week:"Nedēļa",day:"Diena",list:"Dienas kārtība"},allDayText:"Visu dienu",eventLimitText:function(e){return"+vēl "+e}})}(),function(){(t.defineLocale||t.lang).call(t,"nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tirs_ons_tors_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"H.mm",LTS:"LT.ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] LT",LLLL:"dddd D. MMMM YYYY [kl.] LT"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"for %s siden",s:"noen sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang("nb","nb",{closeText:"Lukk",prevText:"&#xAB;Forrige",nextText:"Neste&#xBB;",currentText:"I dag",monthNames:["januar","februar","mars","april","mai","juni","juli","august","september","oktober","november","desember"],monthNamesShort:["jan","feb","mar","apr","mai","jun","jul","aug","sep","okt","nov","des"],dayNamesShort:["søn","man","tir","ons","tor","fre","lør"],dayNames:["søndag","mandag","tirsdag","onsdag","torsdag","fredag","lørdag"],dayNamesMin:["sø","ma","ti","on","to","fr","lø"],weekHeader:"Uke",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("nb",{buttonText:{month:"Måned",week:"Uke",day:"Dag",list:"Agenda"},allDayText:"Hele dagen",eventLimitText:"til"})}(),function(){var a="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_");(t.defineLocale||t.lang).call(t,"nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,t){return/-MMM-/.test(t)?n[e.month()]:a[e.month()]},weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"Zo_Ma_Di_Wo_Do_Vr_Za".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},ordinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang("nl","nl",{closeText:"Sluiten",prevText:"←",nextText:"→",currentText:"Vandaag",monthNames:["januari","februari","maart","april","mei","juni","juli","augustus","september","oktober","november","december"],monthNamesShort:["jan","feb","mrt","apr","mei","jun","jul","aug","sep","okt","nov","dec"],dayNames:["zondag","maandag","dinsdag","woensdag","donderdag","vrijdag","zaterdag"],dayNamesShort:["zon","maa","din","woe","don","vri","zat"],dayNamesMin:["zo","ma","di","wo","do","vr","za"],weekHeader:"Wk",dateFormat:"dd-mm-yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("nl",{buttonText:{month:"Maand",week:"Week",day:"Dag",list:"Agenda"},allDayText:"Hele dag",eventLimitText:"extra"})
}(),function(){function a(e){return 5>e%10&&e%10>1&&1!==~~(e/10)%10}function n(e,t,n){var r=e+" ";switch(n){case"m":return t?"minuta":"minutę";case"mm":return r+(a(e)?"minuty":"minut");case"h":return t?"godzina":"godzinę";case"hh":return r+(a(e)?"godziny":"godzin");case"MM":return r+(a(e)?"miesiące":"miesięcy");case"yy":return r+(a(e)?"lata":"lat")}}var r="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),i="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_");(t.defineLocale||t.lang).call(t,"pl",{months:function(e,t){return/D MMMM/.test(t)?i[e.month()]:r[e.month()]},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"nie_pon_wt_śr_czw_pt_sb".split("_"),weekdaysMin:"N_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:"[W] dddd [o] LT",lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",m:n,mm:n,h:n,hh:n,d:"1 dzień",dd:"%d dni",M:"miesiąc",MM:n,y:"rok",yy:n},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang("pl","pl",{closeText:"Zamknij",prevText:"&#x3C;Poprzedni",nextText:"Następny&#x3E;",currentText:"Dziś",monthNames:["Styczeń","Luty","Marzec","Kwiecień","Maj","Czerwiec","Lipiec","Sierpień","Wrzesień","Październik","Listopad","Grudzień"],monthNamesShort:["Sty","Lu","Mar","Kw","Maj","Cze","Lip","Sie","Wrz","Pa","Lis","Gru"],dayNames:["Niedziela","Poniedziałek","Wtorek","Środa","Czwartek","Piątek","Sobota"],dayNamesShort:["Nie","Pn","Wt","Śr","Czw","Pt","So"],dayNamesMin:["N","Pn","Wt","Śr","Cz","Pt","So"],weekHeader:"Tydz",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("pl",{buttonText:{month:"Miesiąc",week:"Tydzień",day:"Dzień",list:"Plan dnia"},allDayText:"Cały dzień",eventLimitText:"więcej"})}(),function(){(t.defineLocale||t.lang).call(t,"pt-br",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"),weekdaysShort:"dom_seg_ter_qua_qui_sex_sáb".split("_"),weekdaysMin:"dom_2ª_3ª_4ª_5ª_6ª_sáb".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] LT",LLLL:"dddd, D [de] MMMM [de] YYYY [às] LT"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"%s atrás",s:"segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},ordinalParse:/\d{1,2}º/,ordinal:"%dº"}),e.fullCalendar.datepickerLang("pt-br","pt-BR",{closeText:"Fechar",prevText:"&#x3C;Anterior",nextText:"Próximo&#x3E;",currentText:"Hoje",monthNames:["Janeiro","Fevereiro","Março","Abril","Maio","Junho","Julho","Agosto","Setembro","Outubro","Novembro","Dezembro"],monthNamesShort:["Jan","Fev","Mar","Abr","Mai","Jun","Jul","Ago","Set","Out","Nov","Dez"],dayNames:["Domingo","Segunda-feira","Terça-feira","Quarta-feira","Quinta-feira","Sexta-feira","Sábado"],dayNamesShort:["Dom","Seg","Ter","Qua","Qui","Sex","Sáb"],dayNamesMin:["Dom","Seg","Ter","Qua","Qui","Sex","Sáb"],weekHeader:"Sm",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("pt-br",{buttonText:{month:"Mês",week:"Semana",day:"Dia",list:"Compromissos"},allDayText:"dia inteiro",eventLimitText:function(e){return"mais +"+e}})}(),function(){(t.defineLocale||t.lang).call(t,"pt",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"),weekdaysShort:"dom_seg_ter_qua_qui_sex_sáb".split("_"),weekdaysMin:"dom_2ª_3ª_4ª_5ª_6ª_sáb".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY LT",LLLL:"dddd, D [de] MMMM [de] YYYY LT"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang("pt","pt",{closeText:"Fechar",prevText:"Anterior",nextText:"Seguinte",currentText:"Hoje",monthNames:["Janeiro","Fevereiro","Março","Abril","Maio","Junho","Julho","Agosto","Setembro","Outubro","Novembro","Dezembro"],monthNamesShort:["Jan","Fev","Mar","Abr","Mai","Jun","Jul","Ago","Set","Out","Nov","Dez"],dayNames:["Domingo","Segunda-feira","Terça-feira","Quarta-feira","Quinta-feira","Sexta-feira","Sábado"],dayNamesShort:["Dom","Seg","Ter","Qua","Qui","Sex","Sáb"],dayNamesMin:["Dom","Seg","Ter","Qua","Qui","Sex","Sáb"],weekHeader:"Sem",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("pt",{buttonText:{month:"Mês",week:"Semana",day:"Dia",list:"Agenda"},allDayText:"Todo o dia",eventLimitText:"mais"})}(),function(){function a(e,t,a){var n={mm:"minute",hh:"ore",dd:"zile",MM:"luni",yy:"ani"},r=" ";return(e%100>=20||e>=100&&0===e%100)&&(r=" de "),e+r+n[a]}(t.defineLocale||t.lang).call(t,"ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",m:"un minut",mm:a,h:"o oră",hh:a,d:"o zi",dd:a,M:"o lună",MM:a,y:"un an",yy:a},week:{dow:1,doy:7}}),e.fullCalendar.datepickerLang("ro","ro",{closeText:"Închide",prevText:"&#xAB; Luna precedentă",nextText:"Luna următoare &#xBB;",currentText:"Azi",monthNames:["Ianuarie","Februarie","Martie","Aprilie","Mai","Iunie","Iulie","August","Septembrie","Octombrie","Noiembrie","Decembrie"],monthNamesShort:["Ian","Feb","Mar","Apr","Mai","Iun","Iul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Duminică","Luni","Marţi","Miercuri","Joi","Vineri","Sâmbătă"],dayNamesShort:["Dum","Lun","Mar","Mie","Joi","Vin","Sâm"],dayNamesMin:["Du","Lu","Ma","Mi","Jo","Vi","Sâ"],weekHeader:"Săpt",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("ro",{buttonText:{prev:"precedentă",next:"următoare",month:"Lună",week:"Săptămână",day:"Zi",list:"Agendă"},allDayText:"Toată ziua",eventLimitText:function(e){return"+alte "+e}})}(),function(){function a(e,t){var a=e.split("_");return 1===t%10&&11!==t%100?a[0]:t%10>=2&&4>=t%10&&(10>t%100||t%100>=20)?a[1]:a[2]}function n(e,t,n){var r={mm:t?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",MM:"месяц_месяца_месяцев",yy:"год_года_лет"};return"m"===n?t?"минута":"минуту":e+" "+a(r[n],+e)}function r(e,t){var a={nominative:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),accusative:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_")},n=/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(t)?"accusative":"nominative";return a[n][e.month()]}function i(e,t){var a={nominative:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),accusative:"янв_фев_мар_апр_мая_июня_июля_авг_сен_окт_ноя_дек".split("_")},n=/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(t)?"accusative":"nominative";return a[n][e.month()]}function s(e,t){var a={nominative:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),accusative:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_")},n=/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/.test(t)?"accusative":"nominative";return a[n][e.day()]}(t.defineLocale||t.lang).call(t,"ru",{months:r,monthsShort:i,weekdays:s,weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[й|я]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i],longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., LT",LLLL:"dddd, D MMMM YYYY г., LT"},calendar:{sameDay:"[Сегодня в] LT",nextDay:"[Завтра в] LT",lastDay:"[Вчера в] LT",nextWeek:function(){return 2===this.day()?"[Во] dddd [в] LT":"[В] dddd [в] LT"},lastWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd [в] LT":"[В] dddd [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",m:n,mm:n,h:"час",hh:n,d:"день",dd:n,M:"месяц",MM:n,y:"год",yy:n},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(e){return/^(дня|вечера)$/.test(e)},meridiem:function(e){return 4>e?"ночи":12>e?"утра":17>e?"дня":"вечера"},ordinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":return e+"-й";case"D":return e+"-го";case"w":case"W":return e+"-я";default:return e}},week:{dow:1,doy:7}}),e.fullCalendar.datepickerLang("ru","ru",{closeText:"Закрыть",prevText:"&#x3C;Пред",nextText:"След&#x3E;",currentText:"Сегодня",monthNames:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"],monthNamesShort:["Янв","Фев","Мар","Апр","Май","Июн","Июл","Авг","Сен","Окт","Ноя","Дек"],dayNames:["воскресенье","понедельник","вторник","среда","четверг","пятница","суббота"],dayNamesShort:["вск","пнд","втр","срд","чтв","птн","сбт"],dayNamesMin:["Вс","Пн","Вт","Ср","Чт","Пт","Сб"],weekHeader:"Нед",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("ru",{buttonText:{month:"Месяц",week:"Неделя",day:"День",list:"Повестка дня"},allDayText:"Весь день",eventLimitText:function(e){return"+ ещё "+e}})}(),function(){function a(e){return e>1&&5>e}function n(e,t,n,r){var i=e+" ";switch(n){case"s":return t||r?"pár sekúnd":"pár sekundami";case"m":return t?"minúta":r?"minútu":"minútou";case"mm":return t||r?i+(a(e)?"minúty":"minút"):i+"minútami";case"h":return t?"hodina":r?"hodinu":"hodinou";case"hh":return t||r?i+(a(e)?"hodiny":"hodín"):i+"hodinami";case"d":return t||r?"deň":"dňom";case"dd":return t||r?i+(a(e)?"dni":"dní"):i+"dňami";case"M":return t||r?"mesiac":"mesiacom";case"MM":return t||r?i+(a(e)?"mesiace":"mesiacov"):i+"mesiacmi";case"y":return t||r?"rok":"rokom";case"yy":return t||r?i+(a(e)?"roky":"rokov"):i+"rokmi"}}var r="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),i="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");(t.defineLocale||t.lang).call(t,"sk",{months:r,monthsShort:i,monthsParse:function(e,t){var a,n=[];for(a=0;12>a;a++)n[a]=RegExp("^"+e[a]+"$|^"+t[a]+"$","i");return n}(r,i),weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd D. MMMM YYYY LT"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang("sk","sk",{closeText:"Zavrieť",prevText:"&#x3C;Predchádzajúci",nextText:"Nasledujúci&#x3E;",currentText:"Dnes",monthNames:["január","február","marec","apríl","máj","jún","júl","august","september","október","november","december"],monthNamesShort:["Jan","Feb","Mar","Apr","Máj","Jún","Júl","Aug","Sep","Okt","Nov","Dec"],dayNames:["nedeľa","pondelok","utorok","streda","štvrtok","piatok","sobota"],dayNamesShort:["Ned","Pon","Uto","Str","Štv","Pia","Sob"],dayNamesMin:["Ne","Po","Ut","St","Št","Pia","So"],weekHeader:"Ty",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("sk",{buttonText:{month:"Mesiac",week:"Týždeň",day:"Deň",list:"Rozvrh"},allDayText:"Celý deň",eventLimitText:function(e){return"+ďalšie: "+e}})}(),function(){function a(e,t,a){var n=e+" ";switch(a){case"m":return t?"ena minuta":"eno minuto";case"mm":return n+=1===e?"minuta":2===e?"minuti":3===e||4===e?"minute":"minut";case"h":return t?"ena ura":"eno uro";case"hh":return n+=1===e?"ura":2===e?"uri":3===e||4===e?"ure":"ur";case"dd":return n+=1===e?"dan":"dni";case"MM":return n+=1===e?"mesec":2===e?"meseca":3===e||4===e?"mesece":"mesecev";case"yy":return n+=1===e?"leto":2===e?"leti":3===e||4===e?"leta":"let"}}(t.defineLocale||t.lang).call(t,"sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd, D. MMMM YYYY LT"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[prejšnja] dddd [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"%s nazaj",s:"nekaj sekund",m:a,mm:a,h:a,hh:a,d:"en dan",dd:a,M:"en mesec",MM:a,y:"eno leto",yy:a},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),e.fullCalendar.datepickerLang("sl","sl",{closeText:"Zapri",prevText:"&#x3C;Prejšnji",nextText:"Naslednji&#x3E;",currentText:"Trenutni",monthNames:["Januar","Februar","Marec","April","Maj","Junij","Julij","Avgust","September","Oktober","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","Maj","Jun","Jul","Avg","Sep","Okt","Nov","Dec"],dayNames:["Nedelja","Ponedeljek","Torek","Sreda","Četrtek","Petek","Sobota"],dayNamesShort:["Ned","Pon","Tor","Sre","Čet","Pet","Sob"],dayNamesMin:["Ne","Po","To","Sr","Če","Pe","So"],weekHeader:"Teden",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("sl",{buttonText:{month:"Mesec",week:"Teden",day:"Dan",list:"Dnevni red"},allDayText:"Ves dan",eventLimitText:"več"})}(),function(){var a={words:{m:["један минут","једне минуте"],mm:["минут","минуте","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],dd:["дан","дана","дана"],MM:["месец","месеца","месеци"],yy:["година","године","година"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&4>=e?t[1]:t[2]},translate:function(e,t,n){var r=a.words[n];return 1===n.length?t?r[0]:r[1]:e+" "+a.correctGrammaticalCase(e,r)}};(t.defineLocale||t.lang).call(t,"sr-cyrl",{months:["јануар","фебруар","март","април","мај","јун","јул","август","септембар","октобар","новембар","децембар"],monthsShort:["јан.","феб.","мар.","апр.","мај","јун","јул","авг.","сеп.","окт.","нов.","дец."],weekdays:["недеља","понедељак","уторак","среда","четвртак","петак","субота"],weekdaysShort:["нед.","пон.","уто.","сре.","чет.","пет.","суб."],weekdaysMin:["не","по","ут","ср","че","пе","су"],longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd, D. MMMM YYYY LT"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){var e=["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"];return e[this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",m:a.translate,mm:a.translate,h:a.translate,hh:a.translate,d:"дан",dd:a.translate,M:"месец",MM:a.translate,y:"годину",yy:a.translate},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),e.fullCalendar.datepickerLang("sr-cyrl","sr",{closeText:"Затвори",prevText:"&#x3C;",nextText:"&#x3E;",currentText:"Данас",monthNames:["Јануар","Фебруар","Март","Април","Мај","Јун","Јул","Август","Септембар","Октобар","Новембар","Децембар"],monthNamesShort:["Јан","Феб","Мар","Апр","Мај","Јун","Јул","Авг","Сеп","Окт","Нов","Дец"],dayNames:["Недеља","Понедељак","Уторак","Среда","Четвртак","Петак","Субота"],dayNamesShort:["Нед","Пон","Уто","Сре","Чет","Пет","Суб"],dayNamesMin:["Не","По","Ут","Ср","Че","Пе","Су"],weekHeader:"Сед",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("sr-cyrl",{buttonText:{month:"Месец",week:"Недеља",day:"Дан",list:"Планер"},allDayText:"Цео дан",eventLimitText:function(e){return"+ још "+e}})}(),function(){var a={words:{m:["jedan minut","jedne minute"],mm:["minut","minute","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mesec","meseca","meseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&4>=e?t[1]:t[2]},translate:function(e,t,n){var r=a.words[n];return 1===n.length?t?r[0]:r[1]:e+" "+a.correctGrammaticalCase(e,r)}};(t.defineLocale||t.lang).call(t,"sr",{months:["januar","februar","mart","april","maj","jun","jul","avgust","septembar","oktobar","novembar","decembar"],monthsShort:["jan.","feb.","mar.","apr.","maj","jun","jul","avg.","sep.","okt.","nov.","dec."],weekdays:["nedelja","ponedeljak","utorak","sreda","četvrtak","petak","subota"],weekdaysShort:["ned.","pon.","uto.","sre.","čet.","pet.","sub."],weekdaysMin:["ne","po","ut","sr","če","pe","su"],longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd, D. MMMM YYYY LT"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){var e=["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"];return e[this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",m:a.translate,mm:a.translate,h:a.translate,hh:a.translate,d:"dan",dd:a.translate,M:"mesec",MM:a.translate,y:"godinu",yy:a.translate},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),e.fullCalendar.datepickerLang("sr","sr",{closeText:"Затвори",prevText:"&#x3C;",nextText:"&#x3E;",currentText:"Данас",monthNames:["Јануар","Фебруар","Март","Април","Мај","Јун","Јул","Август","Септембар","Октобар","Новембар","Децембар"],monthNamesShort:["Јан","Феб","Мар","Апр","Мај","Јун","Јул","Авг","Сеп","Окт","Нов","Дец"],dayNames:["Недеља","Понедељак","Уторак","Среда","Четвртак","Петак","Субота"],dayNamesShort:["Нед","Пон","Уто","Сре","Чет","Пет","Суб"],dayNamesMin:["Не","По","Ут","Ср","Че","Пе","Су"],weekHeader:"Сед",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("sr",{buttonText:{month:"Месец",week:"Недеља",day:"Дан",list:"Планер"},allDayText:"Цео дан",eventLimitText:function(e){return"+ још "+e}})}(),function(){(t.defineLocale||t.lang).call(t,"sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"dddd LT",lastWeek:"[Förra] dddd[en] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},ordinalParse:/\d{1,2}(e|a)/,ordinal:function(e){var t=e%10,a=1===~~(e%100/10)?"e":1===t?"a":2===t?"a":3===t?"e":"e";return e+a},week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang("sv","sv",{closeText:"Stäng",prevText:"&#xAB;Förra",nextText:"Nästa&#xBB;",currentText:"Idag",monthNames:["Januari","Februari","Mars","April","Maj","Juni","Juli","Augusti","September","Oktober","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","Maj","Jun","Jul","Aug","Sep","Okt","Nov","Dec"],dayNamesShort:["Sön","Mån","Tis","Ons","Tor","Fre","Lör"],dayNames:["Söndag","Måndag","Tisdag","Onsdag","Torsdag","Fredag","Lördag"],dayNamesMin:["Sö","Må","Ti","On","To","Fr","Lö"],weekHeader:"Ve",dateFormat:"yy-mm-dd",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("sv",{buttonText:{month:"Månad",week:"Vecka",day:"Dag",list:"Program"},allDayText:"Heldag",eventLimitText:"till"})}(),function(){(t.defineLocale||t.lang).call(t,"th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"มกรา_กุมภา_มีนา_เมษา_พฤษภา_มิถุนา_กรกฎา_สิงหา_กันยา_ตุลา_พฤศจิกา_ธันวา".split("_"),weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),longDateFormat:{LT:"H นาฬิกา m นาที",LTS:"LT s วินาที",L:"YYYY/MM/DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา LT",LLLL:"วันddddที่ D MMMM YYYY เวลา LT"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(e){return"หลังเที่ยง"===e},meridiem:function(e){return 12>e?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}}),e.fullCalendar.datepickerLang("th","th",{closeText:"ปิด",prevText:"&#xAB;&#xA0;ย้อน",nextText:"ถัดไป&#xA0;&#xBB;",currentText:"วันนี้",monthNames:["มกราคม","กุมภาพันธ์","มีนาคม","เมษายน","พฤษภาคม","มิถุนายน","กรกฎาคม","สิงหาคม","กันยายน","ตุลาคม","พฤศจิกายน","ธันวาคม"],monthNamesShort:["ม.ค.","ก.พ.","มี.ค.","เม.ย.","พ.ค.","มิ.ย.","ก.ค.","ส.ค.","ก.ย.","ต.ค.","พ.ย.","ธ.ค."],dayNames:["อาทิตย์","จันทร์","อังคาร","พุธ","พฤหัสบดี","ศุกร์","เสาร์"],dayNamesShort:["อา.","จ.","อ.","พ.","พฤ.","ศ.","ส."],dayNamesMin:["อา.","จ.","อ.","พ.","พฤ.","ศ.","ส."],weekHeader:"Wk",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("th",{buttonText:{month:"เดือน",week:"สัปดาห์",day:"วัน",list:"แผนงาน"},allDayText:"ตลอดวัน",eventLimitText:"เพิ่มเติม"})}(),function(){var a={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"};(t.defineLocale||t.lang).call(t,"tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[haftaya] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen hafta] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinalParse:/\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,ordinal:function(e){if(0===e)return e+"'ıncı";var t=e%10,n=e%100-t,r=e>=100?100:null;return e+(a[t]||a[n]||a[r])},week:{dow:1,doy:7}}),e.fullCalendar.datepickerLang("tr","tr",{closeText:"kapat",prevText:"&#x3C;geri",nextText:"ileri&#x3e",currentText:"bugün",monthNames:["Ocak","Şubat","Mart","Nisan","Mayıs","Haziran","Temmuz","Ağustos","Eylül","Ekim","Kasım","Aralık"],monthNamesShort:["Oca","Şub","Mar","Nis","May","Haz","Tem","Ağu","Eyl","Eki","Kas","Ara"],dayNames:["Pazar","Pazartesi","Salı","Çarşamba","Perşembe","Cuma","Cumartesi"],dayNamesShort:["Pz","Pt","Sa","Ça","Pe","Cu","Ct"],dayNamesMin:["Pz","Pt","Sa","Ça","Pe","Cu","Ct"],weekHeader:"Hf",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("tr",{buttonText:{next:"ileri",month:"Ay",week:"Hafta",day:"Gün",list:"Ajanda"},allDayText:"Tüm gün",eventLimitText:"daha fazla"})}(),function(){function a(e,t){var a=e.split("_");return 1===t%10&&11!==t%100?a[0]:t%10>=2&&4>=t%10&&(10>t%100||t%100>=20)?a[1]:a[2]}function n(e,t,n){var r={mm:"хвилина_хвилини_хвилин",hh:"година_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"};return"m"===n?t?"хвилина":"хвилину":"h"===n?t?"година":"годину":e+" "+a(r[n],+e)}function r(e,t){var a={nominative:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_"),accusative:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_")},n=/D[oD]? *MMMM?/.test(t)?"accusative":"nominative";return a[n][e.month()]}function i(e,t){var a={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")},n=/(\[[ВвУу]\]) ?dddd/.test(t)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(t)?"genitive":"nominative";return a[n][e.day()]}function s(e){return function(){return e+"о"+(11===this.hours()?"б":"")+"] LT"}}(t.defineLocale||t.lang).call(t,"uk",{months:r,monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:i,weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., LT",LLLL:"dddd, D MMMM YYYY р., LT"},calendar:{sameDay:s("[Сьогодні "),nextDay:s("[Завтра "),lastDay:s("[Вчора "),nextWeek:s("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return s("[Минулої] dddd [").call(this);case 1:case 2:case 4:return s("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",m:n,mm:n,h:"годину",hh:n,d:"день",dd:n,M:"місяць",MM:n,y:"рік",yy:n},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(e){return/^(дня|вечора)$/.test(e)},meridiem:function(e){return 4>e?"ночі":12>e?"ранку":17>e?"дня":"вечора"},ordinalParse:/\d{1,2}-(й|го)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e+"-й";case"D":return e+"-го";default:return e}},week:{dow:1,doy:7}}),e.fullCalendar.datepickerLang("uk","uk",{closeText:"Закрити",prevText:"&#x3C;",nextText:"&#x3E;",currentText:"Сьогодні",monthNames:["Січень","Лютий","Березень","Квітень","Травень","Червень","Липень","Серпень","Вересень","Жовтень","Листопад","Грудень"],monthNamesShort:["Січ","Лют","Бер","Кві","Тра","Чер","Лип","Сер","Вер","Жов","Лис","Гру"],dayNames:["неділя","понеділок","вівторок","середа","четвер","п’ятниця","субота"],dayNamesShort:["нед","пнд","вів","срд","чтв","птн","сбт"],dayNamesMin:["Нд","Пн","Вт","Ср","Чт","Пт","Сб"],weekHeader:"Тиж",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("uk",{buttonText:{month:"Місяць",week:"Тиждень",day:"День",list:"Порядок денний"},allDayText:"Увесь день",eventLimitText:function(e){return"+ще "+e+"..."}})}(),function(){(t.defineLocale||t.lang).call(t,"vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"),weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY LT",LLLL:"dddd, D MMMM [năm] YYYY LT",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY LT",llll:"ddd, D MMM YYYY LT"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần rồi lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},ordinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang("vi","vi",{closeText:"Đóng",prevText:"&#x3C;Trước",nextText:"Tiếp&#x3E;",currentText:"Hôm nay",monthNames:["Tháng Một","Tháng Hai","Tháng Ba","Tháng Tư","Tháng Năm","Tháng Sáu","Tháng Bảy","Tháng Tám","Tháng Chín","Tháng Mười","Tháng Mười Một","Tháng Mười Hai"],monthNamesShort:["Tháng 1","Tháng 2","Tháng 3","Tháng 4","Tháng 5","Tháng 6","Tháng 7","Tháng 8","Tháng 9","Tháng 10","Tháng 11","Tháng 12"],dayNames:["Chủ Nhật","Thứ Hai","Thứ Ba","Thứ Tư","Thứ Năm","Thứ Sáu","Thứ Bảy"],dayNamesShort:["CN","T2","T3","T4","T5","T6","T7"],dayNamesMin:["CN","T2","T3","T4","T5","T6","T7"],weekHeader:"Tu",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),e.fullCalendar.lang("vi",{buttonText:{month:"Tháng",week:"Tuần",day:"Ngày",list:"Lịch biểu"},allDayText:"Cả ngày",eventLimitText:function(e){return"+ thêm "+e
}})}(),function(){(t.defineLocale||t.lang).call(t,"zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"Ah点mm",LTS:"Ah点m分s秒",L:"YYYY-MM-DD",LL:"YYYY年MMMD日",LLL:"YYYY年MMMD日LT",LLLL:"YYYY年MMMD日ddddLT",l:"YYYY-MM-DD",ll:"YYYY年MMMD日",lll:"YYYY年MMMD日LT",llll:"YYYY年MMMD日ddddLT"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"下午"===t||"晚上"===t?e+12:e>=11?e:e+12},meridiem:function(e,t){var a=100*e+t;return 600>a?"凌晨":900>a?"早上":1130>a?"上午":1230>a?"中午":1800>a?"下午":"晚上"},calendar:{sameDay:function(){return 0===this.minutes()?"[今天]Ah[点整]":"[今天]LT"},nextDay:function(){return 0===this.minutes()?"[明天]Ah[点整]":"[明天]LT"},lastDay:function(){return 0===this.minutes()?"[昨天]Ah[点整]":"[昨天]LT"},nextWeek:function(){var e,a;return e=t().startOf("week"),a=this.unix()-e.unix()>=604800?"[下]":"[本]",0===this.minutes()?a+"dddAh点整":a+"dddAh点mm"},lastWeek:function(){var e,a;return e=t().startOf("week"),a=this.unix()<e.unix()?"[上]":"[本]",0===this.minutes()?a+"dddAh点整":a+"dddAh点mm"},sameElse:"LL"},ordinalParse:/\d{1,2}(日|月|周)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"周";default:return e}},relativeTime:{future:"%s内",past:"%s前",s:"几秒",m:"1分钟",mm:"%d分钟",h:"1小时",hh:"%d小时",d:"1天",dd:"%d天",M:"1个月",MM:"%d个月",y:"1年",yy:"%d年"},week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang("zh-cn","zh-CN",{closeText:"关闭",prevText:"&#x3C;上月",nextText:"下月&#x3E;",currentText:"今天",monthNames:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],monthNamesShort:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],dayNames:["星期日","星期一","星期二","星期三","星期四","星期五","星期六"],dayNamesShort:["周日","周一","周二","周三","周四","周五","周六"],dayNamesMin:["日","一","二","三","四","五","六"],weekHeader:"周",dateFormat:"yy-mm-dd",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:"年"}),e.fullCalendar.lang("zh-cn",{buttonText:{month:"月",week:"周",day:"日",list:"日程"},allDayText:"全天",eventLimitText:function(e){return"另外 "+e+" 个"}})}(),function(){(t.defineLocale||t.lang).call(t,"zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"Ah點mm",LTS:"Ah點m分s秒",L:"YYYY年MMMD日",LL:"YYYY年MMMD日",LLL:"YYYY年MMMD日LT",LLLL:"YYYY年MMMD日ddddLT",l:"YYYY年MMMD日",ll:"YYYY年MMMD日",lll:"YYYY年MMMD日LT",llll:"YYYY年MMMD日ddddLT"},meridiemParse:/早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t){var a=100*e+t;return 900>a?"早上":1130>a?"上午":1230>a?"中午":1800>a?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},ordinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",m:"一分鐘",mm:"%d分鐘",h:"一小時",hh:"%d小時",d:"一天",dd:"%d天",M:"一個月",MM:"%d個月",y:"一年",yy:"%d年"}}),e.fullCalendar.datepickerLang("zh-tw","zh-TW",{closeText:"關閉",prevText:"&#x3C;上月",nextText:"下月&#x3E;",currentText:"今天",monthNames:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],monthNamesShort:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],dayNames:["星期日","星期一","星期二","星期三","星期四","星期五","星期六"],dayNamesShort:["周日","周一","周二","周三","周四","周五","周六"],dayNamesMin:["日","一","二","三","四","五","六"],weekHeader:"周",dateFormat:"yy/mm/dd",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:"年"}),e.fullCalendar.lang("zh-tw",{buttonText:{month:"月",week:"週",day:"天",list:"待辦事項"},allDayText:"全天",eventLimitText:"更多"})}(),(t.locale||t.lang).call(t,"en"),e.fullCalendar.lang("en"),e.datepicker&&e.datepicker.setDefaults(e.datepicker.regional[""])});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 10820
}).call(this);                                                       // 10821
                                                                     // 10822
                                                                     // 10823
                                                                     // 10824
                                                                     // 10825
                                                                     // 10826
                                                                     // 10827
(function () {                                                       // 10828
                                                                     // 10829
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rzymek:fullcalendar/fullcalendar/dist/gcal.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*!                                                                                                                    // 1
 * FullCalendar v2.3.1 Google Calendar Plugin                                                                          // 2
 * Docs & License: http://fullcalendar.io/                                                                             // 3
 * (c) 2015 Adam Shaw                                                                                                  // 4
 */                                                                                                                    // 5
                                                                                                                       // 6
(function(factory) {                                                                                                   // 7
	if (typeof define === 'function' && define.amd) {                                                                     // 8
		define([ 'jquery' ], factory);                                                                                       // 9
	}                                                                                                                     // 10
	else if (typeof exports === 'object') { // Node/CommonJS                                                              // 11
		module.exports = factory(require('jquery'));                                                                         // 12
	}                                                                                                                     // 13
	else {                                                                                                                // 14
		factory(jQuery);                                                                                                     // 15
	}                                                                                                                     // 16
})(function($) {                                                                                                       // 17
                                                                                                                       // 18
                                                                                                                       // 19
var API_BASE = 'https://www.googleapis.com/calendar/v3/calendars';                                                     // 20
var fc = $.fullCalendar;                                                                                               // 21
var applyAll = fc.applyAll;                                                                                            // 22
                                                                                                                       // 23
                                                                                                                       // 24
fc.sourceNormalizers.push(function(sourceOptions) {                                                                    // 25
	var googleCalendarId = sourceOptions.googleCalendarId;                                                                // 26
	var url = sourceOptions.url;                                                                                          // 27
	var match;                                                                                                            // 28
                                                                                                                       // 29
	// if the Google Calendar ID hasn't been explicitly defined                                                           // 30
	if (!googleCalendarId && url) {                                                                                       // 31
                                                                                                                       // 32
		// detect if the ID was specified as a single string.                                                                // 33
		// will match calendars like "asdf1234@calendar.google.com" in addition to person email calendars.                   // 34
		if (/^[^\/]+@([^\/\.]+\.)*(google|googlemail|gmail)\.com$/.test(url)) {                                              // 35
			googleCalendarId = url;                                                                                             // 36
		}                                                                                                                    // 37
		// try to scrape it out of a V1 or V3 API feed URL                                                                   // 38
		else if (                                                                                                            // 39
			(match = /^https:\/\/www.googleapis.com\/calendar\/v3\/calendars\/([^\/]*)/.exec(url)) ||                           // 40
			(match = /^https?:\/\/www.google.com\/calendar\/feeds\/([^\/]*)/.exec(url))                                         // 41
		) {                                                                                                                  // 42
			googleCalendarId = decodeURIComponent(match[1]);                                                                    // 43
		}                                                                                                                    // 44
                                                                                                                       // 45
		if (googleCalendarId) {                                                                                              // 46
			sourceOptions.googleCalendarId = googleCalendarId;                                                                  // 47
		}                                                                                                                    // 48
	}                                                                                                                     // 49
                                                                                                                       // 50
                                                                                                                       // 51
	if (googleCalendarId) { // is this a Google Calendar?                                                                 // 52
                                                                                                                       // 53
		// make each Google Calendar source uneditable by default                                                            // 54
		if (sourceOptions.editable == null) {                                                                                // 55
			sourceOptions.editable = false;                                                                                     // 56
		}                                                                                                                    // 57
                                                                                                                       // 58
		// We want removeEventSource to work, but it won't know about the googleCalendarId primitive.                        // 59
		// Shoehorn it into the url, which will function as the unique primitive. Won't cause side effects.                  // 60
		// This hack is obsolete since 2.2.3, but keep it so this plugin file is compatible with old versions.               // 61
		sourceOptions.url = googleCalendarId;                                                                                // 62
	}                                                                                                                     // 63
});                                                                                                                    // 64
                                                                                                                       // 65
                                                                                                                       // 66
fc.sourceFetchers.push(function(sourceOptions, start, end, timezone) {                                                 // 67
	if (sourceOptions.googleCalendarId) {                                                                                 // 68
		return transformOptions(sourceOptions, start, end, timezone, this); // `this` is the calendar                        // 69
	}                                                                                                                     // 70
});                                                                                                                    // 71
                                                                                                                       // 72
                                                                                                                       // 73
function transformOptions(sourceOptions, start, end, timezone, calendar) {                                             // 74
	var url = API_BASE + '/' + encodeURIComponent(sourceOptions.googleCalendarId) + '/events?callback=?'; // jsonp        // 75
	var apiKey = sourceOptions.googleCalendarApiKey || calendar.options.googleCalendarApiKey;                             // 76
	var success = sourceOptions.success;                                                                                  // 77
	var data;                                                                                                             // 78
	var timezoneArg; // populated when a specific timezone. escaped to Google's liking                                    // 79
                                                                                                                       // 80
	function reportError(message, apiErrorObjs) {                                                                         // 81
		var errorObjs = apiErrorObjs || [ { message: message } ]; // to be passed into error handlers                        // 82
		var consoleObj = window.console;                                                                                     // 83
		var consoleWarnFunc = consoleObj ? (consoleObj.warn || consoleObj.log) : null;                                       // 84
                                                                                                                       // 85
		// call error handlers                                                                                               // 86
		(sourceOptions.googleCalendarError || $.noop).apply(calendar, errorObjs);                                            // 87
		(calendar.options.googleCalendarError || $.noop).apply(calendar, errorObjs);                                         // 88
                                                                                                                       // 89
		// print error to debug console                                                                                      // 90
		if (consoleWarnFunc) {                                                                                               // 91
			consoleWarnFunc.apply(consoleObj, [ message ].concat(apiErrorObjs || []));                                          // 92
		}                                                                                                                    // 93
	}                                                                                                                     // 94
                                                                                                                       // 95
	if (!apiKey) {                                                                                                        // 96
		reportError("Specify a googleCalendarApiKey. See http://fullcalendar.io/docs/google_calendar/");                     // 97
		return {}; // an empty source to use instead. won't fetch anything.                                                  // 98
	}                                                                                                                     // 99
                                                                                                                       // 100
	// The API expects an ISO8601 datetime with a time and timezone part.                                                 // 101
	// Since the calendar's timezone offset isn't always known, request the date in UTC and pad it by a day on each       // 102
	// side, guaranteeing we will receive all events in the desired range, albeit a superset.                             // 103
	// .utc() will set a zone and give it a 00:00:00 time.                                                                // 104
	if (!start.hasZone()) {                                                                                               // 105
		start = start.clone().utc().add(-1, 'day');                                                                          // 106
	}                                                                                                                     // 107
	if (!end.hasZone()) {                                                                                                 // 108
		end = end.clone().utc().add(1, 'day');                                                                               // 109
	}                                                                                                                     // 110
                                                                                                                       // 111
	// when sending timezone names to Google, only accepts underscores, not spaces                                        // 112
	if (timezone && timezone != 'local') {                                                                                // 113
		timezoneArg = timezone.replace(' ', '_');                                                                            // 114
	}                                                                                                                     // 115
                                                                                                                       // 116
	data = $.extend({}, sourceOptions.data || {}, {                                                                       // 117
		key: apiKey,                                                                                                         // 118
		timeMin: start.format(),                                                                                             // 119
		timeMax: end.format(),                                                                                               // 120
		timeZone: timezoneArg,                                                                                               // 121
		singleEvents: true,                                                                                                  // 122
		maxResults: 9999                                                                                                     // 123
	});                                                                                                                   // 124
                                                                                                                       // 125
	return $.extend({}, sourceOptions, {                                                                                  // 126
		googleCalendarId: null, // prevents source-normalizing from happening again                                          // 127
		url: url,                                                                                                            // 128
		data: data,                                                                                                          // 129
		startParam: false, // `false` omits this parameter. we already included it above                                     // 130
		endParam: false, // same                                                                                             // 131
		timezoneParam: false, // same                                                                                        // 132
		success: function(data) {                                                                                            // 133
			var events = [];                                                                                                    // 134
			var successArgs;                                                                                                    // 135
			var successRes;                                                                                                     // 136
                                                                                                                       // 137
			if (data.error) {                                                                                                   // 138
				reportError('Google Calendar API: ' + data.error.message, data.error.errors);                                      // 139
			}                                                                                                                   // 140
			else if (data.items) {                                                                                              // 141
				$.each(data.items, function(i, entry) {                                                                            // 142
					var url = entry.htmlLink;                                                                                         // 143
                                                                                                                       // 144
					// make the URLs for each event show times in the correct timezone                                                // 145
					if (timezoneArg) {                                                                                                // 146
						url = injectQsComponent(url, 'ctz=' + timezoneArg);                                                              // 147
					}                                                                                                                 // 148
                                                                                                                       // 149
					events.push({                                                                                                     // 150
						id: entry.id,                                                                                                    // 151
						title: entry.summary,                                                                                            // 152
						start: entry.start.dateTime || entry.start.date, // try timed. will fall back to all-day                         // 153
						end: entry.end.dateTime || entry.end.date, // same                                                               // 154
						url: url,                                                                                                        // 155
						location: entry.location,                                                                                        // 156
						description: entry.description                                                                                   // 157
					});                                                                                                               // 158
				});                                                                                                                // 159
                                                                                                                       // 160
				// call the success handler(s) and allow it to return a new events array                                           // 161
				successArgs = [ events ].concat(Array.prototype.slice.call(arguments, 1)); // forward other jq args                // 162
				successRes = applyAll(success, this, successArgs);                                                                 // 163
				if ($.isArray(successRes)) {                                                                                       // 164
					return successRes;                                                                                                // 165
				}                                                                                                                  // 166
			}                                                                                                                   // 167
                                                                                                                       // 168
			return events;                                                                                                      // 169
		}                                                                                                                    // 170
	});                                                                                                                   // 171
}                                                                                                                      // 172
                                                                                                                       // 173
                                                                                                                       // 174
// Injects a string like "arg=value" into the querystring of a URL                                                     // 175
function injectQsComponent(url, component) {                                                                           // 176
	// inject it after the querystring but before the fragment                                                            // 177
	return url.replace(/(\?.*?)?(#|$)/, function(whole, qs, hash) {                                                       // 178
		return (qs ? qs + '&' : '?') + component + hash;                                                                     // 179
	});                                                                                                                   // 180
}                                                                                                                      // 181
                                                                                                                       // 182
                                                                                                                       // 183
});                                                                                                                    // 184
                                                                                                                       // 185
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 11022
}).call(this);                                                       // 11023
                                                                     // 11024
                                                                     // 11025
                                                                     // 11026
                                                                     // 11027
                                                                     // 11028
                                                                     // 11029
(function () {                                                       // 11030
                                                                     // 11031
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rzymek:fullcalendar/template.template.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("fullcalendar");                                                                                  // 2
Template["fullcalendar"] = new Template("Template.fullcalendar", (function() {                                         // 3
  var view = this;                                                                                                     // 4
  return HTML.Raw("<div></div>");                                                                                      // 5
}));                                                                                                                   // 6
                                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 11046
}).call(this);                                                       // 11047
                                                                     // 11048
                                                                     // 11049
                                                                     // 11050
                                                                     // 11051
                                                                     // 11052
                                                                     // 11053
(function () {                                                       // 11054
                                                                     // 11055
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rzymek:fullcalendar/template.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template.fullcalendar.rendered = function() {                                                                          // 1
    var div = this.$(this.firstNode);                                                                                  // 2
    //jquery takes care of undefined values, no need to check here                                                     // 3
    div.attr('id',this.data.id);                                                                                       // 4
    div.addClass(this.data.class);                                                                                     // 5
    div.fullCalendar(this.data);                                                                                       // 6
};                                                                                                                     // 7
                                                                                                                       // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 11071
}).call(this);                                                       // 11072
                                                                     // 11073
///////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['rzymek:fullcalendar'] = {};

})();
