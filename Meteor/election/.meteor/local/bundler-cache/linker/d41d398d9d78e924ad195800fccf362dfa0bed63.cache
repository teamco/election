[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar moment = Package['momentjs:moment'].moment;\nvar Template = Package.templating.Template;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar Spacebars = Package.spacebars.Spacebars;\nvar HTML = Package.htmljs.HTML;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/rzymek_fullcalendar/packages/rzymek_fullcalendar.js      //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n(function () {                                                       // 1\n                                                                     // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/rzymek:fullcalendar/fullcalendar/dist/fullcalendar.js                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*!                                                                                                                    // 1\n * FullCalendar v2.3.1                                                                                                 // 2\n * Docs & License: http://fullcalendar.io/                                                                             // 3\n * (c) 2015 Adam Shaw                                                                                                  // 4\n */                                                                                                                    // 5\n                                                                                                                       // 6\n(function(factory) {                                                                                                   // 7\n\tif (typeof define === 'function' && define.amd) {                                                                     // 8\n\t\tdefine([ 'jquery', 'moment' ], factory);                                                                             // 9\n\t}                                                                                                                     // 10\n\telse if (typeof exports === 'object') { // Node/CommonJS                                                              // 11\n\t\tmodule.exports = factory(require('jquery'), require('moment'));                                                      // 12\n\t}                                                                                                                     // 13\n\telse {                                                                                                                // 14\n\t\tfactory(jQuery, moment);                                                                                             // 15\n\t}                                                                                                                     // 16\n})(function($, moment) {                                                                                               // 17\n                                                                                                                       // 18\n;;                                                                                                                     // 19\n                                                                                                                       // 20\nvar fc = $.fullCalendar = { version: \"2.3.1\" };                                                                        // 21\nvar fcViews = fc.views = {};                                                                                           // 22\n                                                                                                                       // 23\n                                                                                                                       // 24\n$.fn.fullCalendar = function(options) {                                                                                // 25\n\tvar args = Array.prototype.slice.call(arguments, 1); // for a possible method call                                    // 26\n\tvar res = this; // what this function will return (this jQuery object by default)                                     // 27\n                                                                                                                       // 28\n\tthis.each(function(i, _element) { // loop each DOM element involved                                                   // 29\n\t\tvar element = $(_element);                                                                                           // 30\n\t\tvar calendar = element.data('fullCalendar'); // get the existing calendar object (if any)                            // 31\n\t\tvar singleRes; // the returned value of this single method call                                                      // 32\n                                                                                                                       // 33\n\t\t// a method call                                                                                                     // 34\n\t\tif (typeof options === 'string') {                                                                                   // 35\n\t\t\tif (calendar && $.isFunction(calendar[options])) {                                                                  // 36\n\t\t\t\tsingleRes = calendar[options].apply(calendar, args);                                                               // 37\n\t\t\t\tif (!i) {                                                                                                          // 38\n\t\t\t\t\tres = singleRes; // record the first method call result                                                           // 39\n\t\t\t\t}                                                                                                                  // 40\n\t\t\t\tif (options === 'destroy') { // for the destroy method, must remove Calendar object data                           // 41\n\t\t\t\t\telement.removeData('fullCalendar');                                                                               // 42\n\t\t\t\t}                                                                                                                  // 43\n\t\t\t}                                                                                                                   // 44\n\t\t}                                                                                                                    // 45\n\t\t// a new calendar initialization                                                                                     // 46\n\t\telse if (!calendar) { // don't initialize twice                                                                      // 47\n\t\t\tcalendar = new fc.CalendarBase(element, options);                                                                   // 48\n\t\t\telement.data('fullCalendar', calendar);                                                                             // 49\n\t\t\tcalendar.render();                                                                                                  // 50\n\t\t}                                                                                                                    // 51\n\t});                                                                                                                   // 52\n\t                                                                                                                      // 53\n\treturn res;                                                                                                           // 54\n};                                                                                                                     // 55\n                                                                                                                       // 56\n                                                                                                                       // 57\nvar complexOptions = [ // names of options that are objects whose properties should be combined                        // 58\n\t'header',                                                                                                             // 59\n\t'buttonText',                                                                                                         // 60\n\t'buttonIcons',                                                                                                        // 61\n\t'themeButtonIcons'                                                                                                    // 62\n];                                                                                                                     // 63\n                                                                                                                       // 64\n                                                                                                                       // 65\n// Recursively combines all passed-in option-hash arguments into a new single option-hash.                             // 66\n// Given option-hashes are ordered from lowest to highest priority.                                                    // 67\nfunction mergeOptions() {                                                                                              // 68\n\tvar chain = Array.prototype.slice.call(arguments); // convert to a real array                                         // 69\n\tvar complexVals = {}; // hash for each complex option's combined values                                               // 70\n\tvar i, name;                                                                                                          // 71\n\tvar combinedVal;                                                                                                      // 72\n\tvar j;                                                                                                                // 73\n\tvar val;                                                                                                              // 74\n                                                                                                                       // 75\n\t// for each complex option, loop through each option-hash and accumulate the combined values                          // 76\n\tfor (i = 0; i < complexOptions.length; i++) {                                                                         // 77\n\t\tname = complexOptions[i];                                                                                            // 78\n\t\tcombinedVal = null; // an object holding the merge of all the values                                                 // 79\n                                                                                                                       // 80\n\t\tfor (j = 0; j < chain.length; j++) {                                                                                 // 81\n\t\t\tval = chain[j][name];                                                                                               // 82\n                                                                                                                       // 83\n\t\t\tif ($.isPlainObject(val)) {                                                                                         // 84\n\t\t\t\tcombinedVal = $.extend(combinedVal || {}, val); // merge new properties                                            // 85\n\t\t\t}                                                                                                                   // 86\n\t\t\telse if (val != null) { // a non-null non-undefined atomic option                                                   // 87\n\t\t\t\tcombinedVal = null; // signal to use the atomic value                                                              // 88\n\t\t\t}                                                                                                                   // 89\n\t\t}                                                                                                                    // 90\n                                                                                                                       // 91\n\t\t// if not null, the final value was a combination of other objects. record it                                        // 92\n\t\tif (combinedVal !== null) {                                                                                          // 93\n\t\t\tcomplexVals[name] = combinedVal;                                                                                    // 94\n\t\t}                                                                                                                    // 95\n\t}                                                                                                                     // 96\n                                                                                                                       // 97\n\tchain.unshift({}); // $.extend will mutate this with the result                                                       // 98\n\tchain.push(complexVals); // computed complex values are applied last                                                  // 99\n\treturn $.extend.apply($, chain); // combine                                                                           // 100\n}                                                                                                                      // 101\n                                                                                                                       // 102\n                                                                                                                       // 103\n// Given options specified for the calendar's constructor, massages any legacy options into a non-legacy form.         // 104\n// Converts View-Option-Hashes into the View-Specific-Options format.                                                  // 105\nfunction massageOverrides(input) {                                                                                     // 106\n\tvar overrides = { views: input.views || {} }; // the output. ensure a `views` hash                                    // 107\n\tvar subObj;                                                                                                           // 108\n                                                                                                                       // 109\n\t// iterate through all option override properties (except `views`)                                                    // 110\n\t$.each(input, function(name, val) {                                                                                   // 111\n\t\tif (name != 'views') {                                                                                               // 112\n                                                                                                                       // 113\n\t\t\t// could the value be a legacy View-Option-Hash?                                                                    // 114\n\t\t\tif (                                                                                                                // 115\n\t\t\t\t$.isPlainObject(val) &&                                                                                            // 116\n\t\t\t\t!/(time|duration|interval)$/i.test(name) && // exclude duration options. might be given as objects                 // 117\n\t\t\t\t$.inArray(name, complexOptions) == -1 // complex options aren't allowed to be View-Option-Hashes                   // 118\n\t\t\t) {                                                                                                                 // 119\n\t\t\t\tsubObj = null;                                                                                                     // 120\n                                                                                                                       // 121\n\t\t\t\t// iterate through the properties of this possible View-Option-Hash value                                          // 122\n\t\t\t\t$.each(val, function(subName, subVal) {                                                                            // 123\n                                                                                                                       // 124\n\t\t\t\t\t// is the property targeting a view?                                                                              // 125\n\t\t\t\t\tif (/^(month|week|day|default|basic(Week|Day)?|agenda(Week|Day)?)$/.test(subName)) {                              // 126\n\t\t\t\t\t\tif (!overrides.views[subName]) { // ensure the view-target entry exists                                          // 127\n\t\t\t\t\t\t\toverrides.views[subName] = {};                                                                                  // 128\n\t\t\t\t\t\t}                                                                                                                // 129\n\t\t\t\t\t\toverrides.views[subName][name] = subVal; // record the value in the `views` object                               // 130\n\t\t\t\t\t}                                                                                                                 // 131\n\t\t\t\t\telse { // a non-View-Option-Hash property                                                                         // 132\n\t\t\t\t\t\tif (!subObj) {                                                                                                   // 133\n\t\t\t\t\t\t\tsubObj = {};                                                                                                    // 134\n\t\t\t\t\t\t}                                                                                                                // 135\n\t\t\t\t\t\tsubObj[subName] = subVal; // accumulate these unrelated values for later                                         // 136\n\t\t\t\t\t}                                                                                                                 // 137\n\t\t\t\t});                                                                                                                // 138\n                                                                                                                       // 139\n\t\t\t\tif (subObj) { // non-View-Option-Hash properties? transfer them as-is                                              // 140\n\t\t\t\t\toverrides[name] = subObj;                                                                                         // 141\n\t\t\t\t}                                                                                                                  // 142\n\t\t\t}                                                                                                                   // 143\n\t\t\telse {                                                                                                              // 144\n\t\t\t\toverrides[name] = val; // transfer normal options as-is                                                            // 145\n\t\t\t}                                                                                                                   // 146\n\t\t}                                                                                                                    // 147\n\t});                                                                                                                   // 148\n                                                                                                                       // 149\n\treturn overrides;                                                                                                     // 150\n}                                                                                                                      // 151\n                                                                                                                       // 152\n;;                                                                                                                     // 153\n                                                                                                                       // 154\n// exports                                                                                                             // 155\nfc.intersectionToSeg = intersectionToSeg;                                                                              // 156\nfc.applyAll = applyAll;                                                                                                // 157\nfc.debounce = debounce;                                                                                                // 158\nfc.isInt = isInt;                                                                                                      // 159\nfc.htmlEscape = htmlEscape;                                                                                            // 160\nfc.cssToStr = cssToStr;                                                                                                // 161\nfc.proxy = proxy;                                                                                                      // 162\n                                                                                                                       // 163\n                                                                                                                       // 164\n/* FullCalendar-specific DOM Utilities                                                                                 // 165\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 167\n                                                                                                                       // 168\n// Given the scrollbar widths of some other container, create borders/margins on rowEls in order to match the left     // 169\n// and right space that was offset by the scrollbars. A 1-pixel border first, then margin beyond that.                 // 170\nfunction compensateScroll(rowEls, scrollbarWidths) {                                                                   // 171\n\tif (scrollbarWidths.left) {                                                                                           // 172\n\t\trowEls.css({                                                                                                         // 173\n\t\t\t'border-left-width': 1,                                                                                             // 174\n\t\t\t'margin-left': scrollbarWidths.left - 1                                                                             // 175\n\t\t});                                                                                                                  // 176\n\t}                                                                                                                     // 177\n\tif (scrollbarWidths.right) {                                                                                          // 178\n\t\trowEls.css({                                                                                                         // 179\n\t\t\t'border-right-width': 1,                                                                                            // 180\n\t\t\t'margin-right': scrollbarWidths.right - 1                                                                           // 181\n\t\t});                                                                                                                  // 182\n\t}                                                                                                                     // 183\n}                                                                                                                      // 184\n                                                                                                                       // 185\n                                                                                                                       // 186\n// Undoes compensateScroll and restores all borders/margins                                                            // 187\nfunction uncompensateScroll(rowEls) {                                                                                  // 188\n\trowEls.css({                                                                                                          // 189\n\t\t'margin-left': '',                                                                                                   // 190\n\t\t'margin-right': '',                                                                                                  // 191\n\t\t'border-left-width': '',                                                                                             // 192\n\t\t'border-right-width': ''                                                                                             // 193\n\t});                                                                                                                   // 194\n}                                                                                                                      // 195\n                                                                                                                       // 196\n                                                                                                                       // 197\n// Make the mouse cursor express that an event is not allowed in the current area                                      // 198\nfunction disableCursor() {                                                                                             // 199\n\t$('body').addClass('fc-not-allowed');                                                                                 // 200\n}                                                                                                                      // 201\n                                                                                                                       // 202\n                                                                                                                       // 203\n// Returns the mouse cursor to its original look                                                                       // 204\nfunction enableCursor() {                                                                                              // 205\n\t$('body').removeClass('fc-not-allowed');                                                                              // 206\n}                                                                                                                      // 207\n                                                                                                                       // 208\n                                                                                                                       // 209\n// Given a total available height to fill, have `els` (essentially child rows) expand to accomodate.                   // 210\n// By default, all elements that are shorter than the recommended height are expanded uniformly, not considering       // 211\n// any other els that are already too tall. if `shouldRedistribute` is on, it considers these tall rows and            // 212\n// reduces the available height.                                                                                       // 213\nfunction distributeHeight(els, availableHeight, shouldRedistribute) {                                                  // 214\n                                                                                                                       // 215\n\t// *FLOORING NOTE*: we floor in certain places because zoom can give inaccurate floating-point dimensions,            // 216\n\t// and it is better to be shorter than taller, to avoid creating unnecessary scrollbars.                              // 217\n                                                                                                                       // 218\n\tvar minOffset1 = Math.floor(availableHeight / els.length); // for non-last element                                    // 219\n\tvar minOffset2 = Math.floor(availableHeight - minOffset1 * (els.length - 1)); // for last element *FLOORING NOTE*     // 220\n\tvar flexEls = []; // elements that are allowed to expand. array of DOM nodes                                          // 221\n\tvar flexOffsets = []; // amount of vertical space it takes up                                                         // 222\n\tvar flexHeights = []; // actual css height                                                                            // 223\n\tvar usedHeight = 0;                                                                                                   // 224\n                                                                                                                       // 225\n\tundistributeHeight(els); // give all elements their natural height                                                    // 226\n                                                                                                                       // 227\n\t// find elements that are below the recommended height (expandable).                                                  // 228\n\t// important to query for heights in a single first pass (to avoid reflow oscillation).                               // 229\n\tels.each(function(i, el) {                                                                                            // 230\n\t\tvar minOffset = i === els.length - 1 ? minOffset2 : minOffset1;                                                      // 231\n\t\tvar naturalOffset = $(el).outerHeight(true);                                                                         // 232\n                                                                                                                       // 233\n\t\tif (naturalOffset < minOffset) {                                                                                     // 234\n\t\t\tflexEls.push(el);                                                                                                   // 235\n\t\t\tflexOffsets.push(naturalOffset);                                                                                    // 236\n\t\t\tflexHeights.push($(el).height());                                                                                   // 237\n\t\t}                                                                                                                    // 238\n\t\telse {                                                                                                               // 239\n\t\t\t// this element stretches past recommended height (non-expandable). mark the space as occupied.                     // 240\n\t\t\tusedHeight += naturalOffset;                                                                                        // 241\n\t\t}                                                                                                                    // 242\n\t});                                                                                                                   // 243\n                                                                                                                       // 244\n\t// readjust the recommended height to only consider the height available to non-maxed-out rows.                       // 245\n\tif (shouldRedistribute) {                                                                                             // 246\n\t\tavailableHeight -= usedHeight;                                                                                       // 247\n\t\tminOffset1 = Math.floor(availableHeight / flexEls.length);                                                           // 248\n\t\tminOffset2 = Math.floor(availableHeight - minOffset1 * (flexEls.length - 1)); // *FLOORING NOTE*                     // 249\n\t}                                                                                                                     // 250\n                                                                                                                       // 251\n\t// assign heights to all expandable elements                                                                          // 252\n\t$(flexEls).each(function(i, el) {                                                                                     // 253\n\t\tvar minOffset = i === flexEls.length - 1 ? minOffset2 : minOffset1;                                                  // 254\n\t\tvar naturalOffset = flexOffsets[i];                                                                                  // 255\n\t\tvar naturalHeight = flexHeights[i];                                                                                  // 256\n\t\tvar newHeight = minOffset - (naturalOffset - naturalHeight); // subtract the margin/padding                          // 257\n                                                                                                                       // 258\n\t\tif (naturalOffset < minOffset) { // we check this again because redistribution might have changed things             // 259\n\t\t\t$(el).height(newHeight);                                                                                            // 260\n\t\t}                                                                                                                    // 261\n\t});                                                                                                                   // 262\n}                                                                                                                      // 263\n                                                                                                                       // 264\n                                                                                                                       // 265\n// Undoes distrubuteHeight, restoring all els to their natural height                                                  // 266\nfunction undistributeHeight(els) {                                                                                     // 267\n\tels.height('');                                                                                                       // 268\n}                                                                                                                      // 269\n                                                                                                                       // 270\n                                                                                                                       // 271\n// Given `els`, a jQuery set of <td> cells, find the cell with the largest natural width and set the widths of all the // 272\n// cells to be that width.                                                                                             // 273\n// PREREQUISITE: if you want a cell to take up width, it needs to have a single inner element w/ display:inline        // 274\nfunction matchCellWidths(els) {                                                                                        // 275\n\tvar maxInnerWidth = 0;                                                                                                // 276\n                                                                                                                       // 277\n\tels.find('> *').each(function(i, innerEl) {                                                                           // 278\n\t\tvar innerWidth = $(innerEl).outerWidth();                                                                            // 279\n\t\tif (innerWidth > maxInnerWidth) {                                                                                    // 280\n\t\t\tmaxInnerWidth = innerWidth;                                                                                         // 281\n\t\t}                                                                                                                    // 282\n\t});                                                                                                                   // 283\n                                                                                                                       // 284\n\tmaxInnerWidth++; // sometimes not accurate of width the text needs to stay on one line. insurance                     // 285\n                                                                                                                       // 286\n\tels.width(maxInnerWidth);                                                                                             // 287\n                                                                                                                       // 288\n\treturn maxInnerWidth;                                                                                                 // 289\n}                                                                                                                      // 290\n                                                                                                                       // 291\n                                                                                                                       // 292\n// Turns a container element into a scroller if its contents is taller than the allotted height.                       // 293\n// Returns true if the element is now a scroller, false otherwise.                                                     // 294\n// NOTE: this method is best because it takes weird zooming dimensions into account                                    // 295\nfunction setPotentialScroller(containerEl, height) {                                                                   // 296\n\tcontainerEl.height(height).addClass('fc-scroller');                                                                   // 297\n                                                                                                                       // 298\n\t// are scrollbars needed?                                                                                             // 299\n\tif (containerEl[0].scrollHeight - 1 > containerEl[0].clientHeight) { // !!! -1 because IE is often off-by-one :(      // 300\n\t\treturn true;                                                                                                         // 301\n\t}                                                                                                                     // 302\n                                                                                                                       // 303\n\tunsetScroller(containerEl); // undo                                                                                   // 304\n\treturn false;                                                                                                         // 305\n}                                                                                                                      // 306\n                                                                                                                       // 307\n                                                                                                                       // 308\n// Takes an element that might have been a scroller, and turns it back into a normal element.                          // 309\nfunction unsetScroller(containerEl) {                                                                                  // 310\n\tcontainerEl.height('').removeClass('fc-scroller');                                                                    // 311\n}                                                                                                                      // 312\n                                                                                                                       // 313\n                                                                                                                       // 314\n/* General DOM Utilities                                                                                               // 315\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 317\nfc.getClientRect = getClientRect;                                                                                      // 318\nfc.getContentRect = getContentRect;                                                                                    // 319\nfc.getScrollbarWidths = getScrollbarWidths;                                                                            // 320\n                                                                                                                       // 321\n                                                                                                                       // 322\n// borrowed from https://github.com/jquery/jquery-ui/blob/1.11.0/ui/core.js#L51                                        // 323\nfunction getScrollParent(el) {                                                                                         // 324\n\tvar position = el.css('position'),                                                                                    // 325\n\t\tscrollParent = el.parents().filter(function() {                                                                      // 326\n\t\t\tvar parent = $(this);                                                                                               // 327\n\t\t\treturn (/(auto|scroll)/).test(                                                                                      // 328\n\t\t\t\tparent.css('overflow') + parent.css('overflow-y') + parent.css('overflow-x')                                       // 329\n\t\t\t);                                                                                                                  // 330\n\t\t}).eq(0);                                                                                                            // 331\n                                                                                                                       // 332\n\treturn position === 'fixed' || !scrollParent.length ? $(el[0].ownerDocument || document) : scrollParent;              // 333\n}                                                                                                                      // 334\n                                                                                                                       // 335\n                                                                                                                       // 336\n// Queries the outer bounding area of a jQuery element.                                                                // 337\n// Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).                    // 338\nfunction getOuterRect(el) {                                                                                            // 339\n\tvar offset = el.offset();                                                                                             // 340\n                                                                                                                       // 341\n\treturn {                                                                                                              // 342\n\t\tleft: offset.left,                                                                                                   // 343\n\t\tright: offset.left + el.outerWidth(),                                                                                // 344\n\t\ttop: offset.top,                                                                                                     // 345\n\t\tbottom: offset.top + el.outerHeight()                                                                                // 346\n\t};                                                                                                                    // 347\n}                                                                                                                      // 348\n                                                                                                                       // 349\n                                                                                                                       // 350\n// Queries the area within the margin/border/scrollbars of a jQuery element. Does not go within the padding.           // 351\n// Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).                    // 352\n// NOTE: should use clientLeft/clientTop, but very unreliable cross-browser.                                           // 353\nfunction getClientRect(el) {                                                                                           // 354\n\tvar offset = el.offset();                                                                                             // 355\n\tvar scrollbarWidths = getScrollbarWidths(el);                                                                         // 356\n\tvar left = offset.left + getCssFloat(el, 'border-left-width') + scrollbarWidths.left;                                 // 357\n\tvar top = offset.top + getCssFloat(el, 'border-top-width') + scrollbarWidths.top;                                     // 358\n                                                                                                                       // 359\n\treturn {                                                                                                              // 360\n\t\tleft: left,                                                                                                          // 361\n\t\tright: left + el[0].clientWidth, // clientWidth includes padding but NOT scrollbars                                  // 362\n\t\ttop: top,                                                                                                            // 363\n\t\tbottom: top + el[0].clientHeight // clientHeight includes padding but NOT scrollbars                                 // 364\n\t};                                                                                                                    // 365\n}                                                                                                                      // 366\n                                                                                                                       // 367\n                                                                                                                       // 368\n// Queries the area within the margin/border/padding of a jQuery element. Assumed not to have scrollbars.              // 369\n// Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).                    // 370\nfunction getContentRect(el) {                                                                                          // 371\n\tvar offset = el.offset(); // just outside of border, margin not included                                              // 372\n\tvar left = offset.left + getCssFloat(el, 'border-left-width') + getCssFloat(el, 'padding-left');                      // 373\n\tvar top = offset.top + getCssFloat(el, 'border-top-width') + getCssFloat(el, 'padding-top');                          // 374\n                                                                                                                       // 375\n\treturn {                                                                                                              // 376\n\t\tleft: left,                                                                                                          // 377\n\t\tright: left + el.width(),                                                                                            // 378\n\t\ttop: top,                                                                                                            // 379\n\t\tbottom: top + el.height()                                                                                            // 380\n\t};                                                                                                                    // 381\n}                                                                                                                      // 382\n                                                                                                                       // 383\n                                                                                                                       // 384\n// Returns the computed left/right/top/bottom scrollbar widths for the given jQuery element.                           // 385\n// NOTE: should use clientLeft/clientTop, but very unreliable cross-browser.                                           // 386\nfunction getScrollbarWidths(el) {                                                                                      // 387\n\tvar leftRightWidth = el.innerWidth() - el[0].clientWidth; // the paddings cancel out, leaving the scrollbars          // 388\n\tvar widths = {                                                                                                        // 389\n\t\tleft: 0,                                                                                                             // 390\n\t\tright: 0,                                                                                                            // 391\n\t\ttop: 0,                                                                                                              // 392\n\t\tbottom: el.innerHeight() - el[0].clientHeight // the paddings cancel out, leaving the bottom scrollbar               // 393\n\t};                                                                                                                    // 394\n                                                                                                                       // 395\n\tif (getIsLeftRtlScrollbars() && el.css('direction') == 'rtl') { // is the scrollbar on the left side?                 // 396\n\t\twidths.left = leftRightWidth;                                                                                        // 397\n\t}                                                                                                                     // 398\n\telse {                                                                                                                // 399\n\t\twidths.right = leftRightWidth;                                                                                       // 400\n\t}                                                                                                                     // 401\n                                                                                                                       // 402\n\treturn widths;                                                                                                        // 403\n}                                                                                                                      // 404\n                                                                                                                       // 405\n                                                                                                                       // 406\n// Logic for determining if, when the element is right-to-left, the scrollbar appears on the left side                 // 407\n                                                                                                                       // 408\nvar _isLeftRtlScrollbars = null;                                                                                       // 409\n                                                                                                                       // 410\nfunction getIsLeftRtlScrollbars() { // responsible for caching the computation                                         // 411\n\tif (_isLeftRtlScrollbars === null) {                                                                                  // 412\n\t\t_isLeftRtlScrollbars = computeIsLeftRtlScrollbars();                                                                 // 413\n\t}                                                                                                                     // 414\n\treturn _isLeftRtlScrollbars;                                                                                          // 415\n}                                                                                                                      // 416\n                                                                                                                       // 417\nfunction computeIsLeftRtlScrollbars() { // creates an offscreen test element, then removes it                          // 418\n\tvar el = $('<div><div/></div>')                                                                                       // 419\n\t\t.css({                                                                                                               // 420\n\t\t\tposition: 'absolute',                                                                                               // 421\n\t\t\ttop: -1000,                                                                                                         // 422\n\t\t\tleft: 0,                                                                                                            // 423\n\t\t\tborder: 0,                                                                                                          // 424\n\t\t\tpadding: 0,                                                                                                         // 425\n\t\t\toverflow: 'scroll',                                                                                                 // 426\n\t\t\tdirection: 'rtl'                                                                                                    // 427\n\t\t})                                                                                                                   // 428\n\t\t.appendTo('body');                                                                                                   // 429\n\tvar innerEl = el.children();                                                                                          // 430\n\tvar res = innerEl.offset().left > el.offset().left; // is the inner div shifted to accommodate a left scrollbar?      // 431\n\tel.remove();                                                                                                          // 432\n\treturn res;                                                                                                           // 433\n}                                                                                                                      // 434\n                                                                                                                       // 435\n                                                                                                                       // 436\n// Retrieves a jQuery element's computed CSS value as a floating-point number.                                         // 437\n// If the queried value is non-numeric (ex: IE can return \"medium\" for border width), will just return zero.           // 438\nfunction getCssFloat(el, prop) {                                                                                       // 439\n\treturn parseFloat(el.css(prop)) || 0;                                                                                 // 440\n}                                                                                                                      // 441\n                                                                                                                       // 442\n                                                                                                                       // 443\n// Returns a boolean whether this was a left mouse click and no ctrl key (which means right click on Mac)              // 444\nfunction isPrimaryMouseButton(ev) {                                                                                    // 445\n\treturn ev.which == 1 && !ev.ctrlKey;                                                                                  // 446\n}                                                                                                                      // 447\n                                                                                                                       // 448\n                                                                                                                       // 449\n/* Geometry                                                                                                            // 450\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 452\n                                                                                                                       // 453\n// Returns a new rectangle that is the intersection of the two rectangles. If they don't intersect, returns false      // 454\nfunction intersectRects(rect1, rect2) {                                                                                // 455\n\tvar res = {                                                                                                           // 456\n\t\tleft: Math.max(rect1.left, rect2.left),                                                                              // 457\n\t\tright: Math.min(rect1.right, rect2.right),                                                                           // 458\n\t\ttop: Math.max(rect1.top, rect2.top),                                                                                 // 459\n\t\tbottom: Math.min(rect1.bottom, rect2.bottom)                                                                         // 460\n\t};                                                                                                                    // 461\n                                                                                                                       // 462\n\tif (res.left < res.right && res.top < res.bottom) {                                                                   // 463\n\t\treturn res;                                                                                                          // 464\n\t}                                                                                                                     // 465\n\treturn false;                                                                                                         // 466\n}                                                                                                                      // 467\n                                                                                                                       // 468\n                                                                                                                       // 469\n// Returns a new point that will have been moved to reside within the given rectangle                                  // 470\nfunction constrainPoint(point, rect) {                                                                                 // 471\n\treturn {                                                                                                              // 472\n\t\tleft: Math.min(Math.max(point.left, rect.left), rect.right),                                                         // 473\n\t\ttop: Math.min(Math.max(point.top, rect.top), rect.bottom)                                                            // 474\n\t};                                                                                                                    // 475\n}                                                                                                                      // 476\n                                                                                                                       // 477\n                                                                                                                       // 478\n// Returns a point that is the center of the given rectangle                                                           // 479\nfunction getRectCenter(rect) {                                                                                         // 480\n\treturn {                                                                                                              // 481\n\t\tleft: (rect.left + rect.right) / 2,                                                                                  // 482\n\t\ttop: (rect.top + rect.bottom) / 2                                                                                    // 483\n\t};                                                                                                                    // 484\n}                                                                                                                      // 485\n                                                                                                                       // 486\n                                                                                                                       // 487\n// Subtracts point2's coordinates from point1's coordinates, returning a delta                                         // 488\nfunction diffPoints(point1, point2) {                                                                                  // 489\n\treturn {                                                                                                              // 490\n\t\tleft: point1.left - point2.left,                                                                                     // 491\n\t\ttop: point1.top - point2.top                                                                                         // 492\n\t};                                                                                                                    // 493\n}                                                                                                                      // 494\n                                                                                                                       // 495\n                                                                                                                       // 496\n/* FullCalendar-specific Misc Utilities                                                                                // 497\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 499\n                                                                                                                       // 500\n// Creates a basic segment with the intersection of the two ranges. Returns undefined if no intersection.              // 501\n// Expects all dates to be normalized to the same timezone beforehand.                                                 // 502\n// TODO: move to date section?                                                                                         // 503\nfunction intersectionToSeg(subjectRange, constraintRange) {                                                            // 504\n\tvar subjectStart = subjectRange.start;                                                                                // 505\n\tvar subjectEnd = subjectRange.end;                                                                                    // 506\n\tvar constraintStart = constraintRange.start;                                                                          // 507\n\tvar constraintEnd = constraintRange.end;                                                                              // 508\n\tvar segStart, segEnd;                                                                                                 // 509\n\tvar isStart, isEnd;                                                                                                   // 510\n                                                                                                                       // 511\n\tif (subjectEnd > constraintStart && subjectStart < constraintEnd) { // in bounds at all?                              // 512\n                                                                                                                       // 513\n\t\tif (subjectStart >= constraintStart) {                                                                               // 514\n\t\t\tsegStart = subjectStart.clone();                                                                                    // 515\n\t\t\tisStart = true;                                                                                                     // 516\n\t\t}                                                                                                                    // 517\n\t\telse {                                                                                                               // 518\n\t\t\tsegStart = constraintStart.clone();                                                                                 // 519\n\t\t\tisStart =  false;                                                                                                   // 520\n\t\t}                                                                                                                    // 521\n                                                                                                                       // 522\n\t\tif (subjectEnd <= constraintEnd) {                                                                                   // 523\n\t\t\tsegEnd = subjectEnd.clone();                                                                                        // 524\n\t\t\tisEnd = true;                                                                                                       // 525\n\t\t}                                                                                                                    // 526\n\t\telse {                                                                                                               // 527\n\t\t\tsegEnd = constraintEnd.clone();                                                                                     // 528\n\t\t\tisEnd = false;                                                                                                      // 529\n\t\t}                                                                                                                    // 530\n                                                                                                                       // 531\n\t\treturn {                                                                                                             // 532\n\t\t\tstart: segStart,                                                                                                    // 533\n\t\t\tend: segEnd,                                                                                                        // 534\n\t\t\tisStart: isStart,                                                                                                   // 535\n\t\t\tisEnd: isEnd                                                                                                        // 536\n\t\t};                                                                                                                   // 537\n\t}                                                                                                                     // 538\n}                                                                                                                      // 539\n                                                                                                                       // 540\n                                                                                                                       // 541\n/* Date Utilities                                                                                                      // 542\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 544\nfc.computeIntervalUnit = computeIntervalUnit;                                                                          // 545\nfc.durationHasTime = durationHasTime;                                                                                  // 546\n                                                                                                                       // 547\nvar dayIDs = [ 'sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat' ];                                                      // 548\nvar intervalUnits = [ 'year', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond' ];                     // 549\n                                                                                                                       // 550\n                                                                                                                       // 551\n// Diffs the two moments into a Duration where full-days are recorded first, then the remaining time.                  // 552\n// Moments will have their timezones normalized.                                                                       // 553\nfunction diffDayTime(a, b) {                                                                                           // 554\n\treturn moment.duration({                                                                                              // 555\n\t\tdays: a.clone().stripTime().diff(b.clone().stripTime(), 'days'),                                                     // 556\n\t\tms: a.time() - b.time() // time-of-day from day start. disregards timezone                                           // 557\n\t});                                                                                                                   // 558\n}                                                                                                                      // 559\n                                                                                                                       // 560\n                                                                                                                       // 561\n// Diffs the two moments via their start-of-day (regardless of timezone). Produces whole-day durations.                // 562\nfunction diffDay(a, b) {                                                                                               // 563\n\treturn moment.duration({                                                                                              // 564\n\t\tdays: a.clone().stripTime().diff(b.clone().stripTime(), 'days')                                                      // 565\n\t});                                                                                                                   // 566\n}                                                                                                                      // 567\n                                                                                                                       // 568\n                                                                                                                       // 569\n// Diffs two moments, producing a duration, made of a whole-unit-increment of the given unit. Uses rounding.           // 570\nfunction diffByUnit(a, b, unit) {                                                                                      // 571\n\treturn moment.duration(                                                                                               // 572\n\t\tMath.round(a.diff(b, unit, true)), // returnFloat=true                                                               // 573\n\t\tunit                                                                                                                 // 574\n\t);                                                                                                                    // 575\n}                                                                                                                      // 576\n                                                                                                                       // 577\n                                                                                                                       // 578\n// Computes the unit name of the largest whole-unit period of time.                                                    // 579\n// For example, 48 hours will be \"days\" whereas 49 hours will be \"hours\".                                              // 580\n// Accepts start/end, a range object, or an original duration object.                                                  // 581\nfunction computeIntervalUnit(start, end) {                                                                             // 582\n\tvar i, unit;                                                                                                          // 583\n\tvar val;                                                                                                              // 584\n                                                                                                                       // 585\n\tfor (i = 0; i < intervalUnits.length; i++) {                                                                          // 586\n\t\tunit = intervalUnits[i];                                                                                             // 587\n\t\tval = computeRangeAs(unit, start, end);                                                                              // 588\n                                                                                                                       // 589\n\t\tif (val >= 1 && isInt(val)) {                                                                                        // 590\n\t\t\tbreak;                                                                                                              // 591\n\t\t}                                                                                                                    // 592\n\t}                                                                                                                     // 593\n                                                                                                                       // 594\n\treturn unit; // will be \"milliseconds\" if nothing else matches                                                        // 595\n}                                                                                                                      // 596\n                                                                                                                       // 597\n                                                                                                                       // 598\n// Computes the number of units (like \"hours\") in the given range.                                                     // 599\n// Range can be a {start,end} object, separate start/end args, or a Duration.                                          // 600\n// Results are based on Moment's .as() and .diff() methods, so results can depend on internal handling                 // 601\n// of month-diffing logic (which tends to vary from version to version).                                               // 602\nfunction computeRangeAs(unit, start, end) {                                                                            // 603\n                                                                                                                       // 604\n\tif (end != null) { // given start, end                                                                                // 605\n\t\treturn end.diff(start, unit, true);                                                                                  // 606\n\t}                                                                                                                     // 607\n\telse if (moment.isDuration(start)) { // given duration                                                                // 608\n\t\treturn start.as(unit);                                                                                               // 609\n\t}                                                                                                                     // 610\n\telse { // given { start, end } range object                                                                           // 611\n\t\treturn start.end.diff(start.start, unit, true);                                                                      // 612\n\t}                                                                                                                     // 613\n}                                                                                                                      // 614\n                                                                                                                       // 615\n                                                                                                                       // 616\n// Returns a boolean about whether the given duration has any time parts (hours/minutes/seconds/ms)                    // 617\nfunction durationHasTime(dur) {                                                                                        // 618\n\treturn Boolean(dur.hours() || dur.minutes() || dur.seconds() || dur.milliseconds());                                  // 619\n}                                                                                                                      // 620\n                                                                                                                       // 621\n                                                                                                                       // 622\nfunction isNativeDate(input) {                                                                                         // 623\n\treturn  Object.prototype.toString.call(input) === '[object Date]' || input instanceof Date;                           // 624\n}                                                                                                                      // 625\n                                                                                                                       // 626\n                                                                                                                       // 627\n// Returns a boolean about whether the given input is a time string, like \"06:40:00\" or \"06:00\"                        // 628\nfunction isTimeString(str) {                                                                                           // 629\n\treturn /^\\d+\\:\\d+(?:\\:\\d+\\.?(?:\\d{3})?)?$/.test(str);                                                                 // 630\n}                                                                                                                      // 631\n                                                                                                                       // 632\n                                                                                                                       // 633\n/* General Utilities                                                                                                   // 634\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 636\nvar hasOwnPropMethod = {}.hasOwnProperty;                                                                              // 637\n                                                                                                                       // 638\n                                                                                                                       // 639\n// Create an object that has the given prototype. Just like Object.create                                              // 640\nfunction createObject(proto) {                                                                                         // 641\n\tvar f = function() {};                                                                                                // 642\n\tf.prototype = proto;                                                                                                  // 643\n\treturn new f();                                                                                                       // 644\n}                                                                                                                      // 645\n                                                                                                                       // 646\n                                                                                                                       // 647\nfunction copyOwnProps(src, dest) {                                                                                     // 648\n\tfor (var name in src) {                                                                                               // 649\n\t\tif (hasOwnProp(src, name)) {                                                                                         // 650\n\t\t\tdest[name] = src[name];                                                                                             // 651\n\t\t}                                                                                                                    // 652\n\t}                                                                                                                     // 653\n}                                                                                                                      // 654\n                                                                                                                       // 655\n                                                                                                                       // 656\n// Copies over certain methods with the same names as Object.prototype methods. Overcomes an IE<=8 bug:                // 657\n// https://developer.mozilla.org/en-US/docs/ECMAScript_DontEnum_attribute#JScript_DontEnum_Bug                         // 658\nfunction copyNativeMethods(src, dest) {                                                                                // 659\n\tvar names = [ 'constructor', 'toString', 'valueOf' ];                                                                 // 660\n\tvar i, name;                                                                                                          // 661\n                                                                                                                       // 662\n\tfor (i = 0; i < names.length; i++) {                                                                                  // 663\n\t\tname = names[i];                                                                                                     // 664\n                                                                                                                       // 665\n\t\tif (src[name] !== Object.prototype[name]) {                                                                          // 666\n\t\t\tdest[name] = src[name];                                                                                             // 667\n\t\t}                                                                                                                    // 668\n\t}                                                                                                                     // 669\n}                                                                                                                      // 670\n                                                                                                                       // 671\n                                                                                                                       // 672\nfunction hasOwnProp(obj, name) {                                                                                       // 673\n\treturn hasOwnPropMethod.call(obj, name);                                                                              // 674\n}                                                                                                                      // 675\n                                                                                                                       // 676\n                                                                                                                       // 677\n// Is the given value a non-object non-function value?                                                                 // 678\nfunction isAtomic(val) {                                                                                               // 679\n\treturn /undefined|null|boolean|number|string/.test($.type(val));                                                      // 680\n}                                                                                                                      // 681\n                                                                                                                       // 682\n                                                                                                                       // 683\nfunction applyAll(functions, thisObj, args) {                                                                          // 684\n\tif ($.isFunction(functions)) {                                                                                        // 685\n\t\tfunctions = [ functions ];                                                                                           // 686\n\t}                                                                                                                     // 687\n\tif (functions) {                                                                                                      // 688\n\t\tvar i;                                                                                                               // 689\n\t\tvar ret;                                                                                                             // 690\n\t\tfor (i=0; i<functions.length; i++) {                                                                                 // 691\n\t\t\tret = functions[i].apply(thisObj, args) || ret;                                                                     // 692\n\t\t}                                                                                                                    // 693\n\t\treturn ret;                                                                                                          // 694\n\t}                                                                                                                     // 695\n}                                                                                                                      // 696\n                                                                                                                       // 697\n                                                                                                                       // 698\nfunction firstDefined() {                                                                                              // 699\n\tfor (var i=0; i<arguments.length; i++) {                                                                              // 700\n\t\tif (arguments[i] !== undefined) {                                                                                    // 701\n\t\t\treturn arguments[i];                                                                                                // 702\n\t\t}                                                                                                                    // 703\n\t}                                                                                                                     // 704\n}                                                                                                                      // 705\n                                                                                                                       // 706\n                                                                                                                       // 707\nfunction htmlEscape(s) {                                                                                               // 708\n\treturn (s + '').replace(/&/g, '&amp;')                                                                                // 709\n\t\t.replace(/</g, '&lt;')                                                                                               // 710\n\t\t.replace(/>/g, '&gt;')                                                                                               // 711\n\t\t.replace(/'/g, '&#039;')                                                                                             // 712\n\t\t.replace(/\"/g, '&quot;')                                                                                             // 713\n\t\t.replace(/\\n/g, '<br />');                                                                                           // 714\n}                                                                                                                      // 715\n                                                                                                                       // 716\n                                                                                                                       // 717\nfunction stripHtmlEntities(text) {                                                                                     // 718\n\treturn text.replace(/&.*?;/g, '');                                                                                    // 719\n}                                                                                                                      // 720\n                                                                                                                       // 721\n                                                                                                                       // 722\n// Given a hash of CSS properties, returns a string of CSS.                                                            // 723\n// Uses property names as-is (no camel-case conversion). Will not make statements for null/undefined values.           // 724\nfunction cssToStr(cssProps) {                                                                                          // 725\n\tvar statements = [];                                                                                                  // 726\n                                                                                                                       // 727\n\t$.each(cssProps, function(name, val) {                                                                                // 728\n\t\tif (val != null) {                                                                                                   // 729\n\t\t\tstatements.push(name + ':' + val);                                                                                  // 730\n\t\t}                                                                                                                    // 731\n\t});                                                                                                                   // 732\n                                                                                                                       // 733\n\treturn statements.join(';');                                                                                          // 734\n}                                                                                                                      // 735\n                                                                                                                       // 736\n                                                                                                                       // 737\nfunction capitaliseFirstLetter(str) {                                                                                  // 738\n\treturn str.charAt(0).toUpperCase() + str.slice(1);                                                                    // 739\n}                                                                                                                      // 740\n                                                                                                                       // 741\n                                                                                                                       // 742\nfunction compareNumbers(a, b) { // for .sort()                                                                         // 743\n\treturn a - b;                                                                                                         // 744\n}                                                                                                                      // 745\n                                                                                                                       // 746\n                                                                                                                       // 747\nfunction isInt(n) {                                                                                                    // 748\n\treturn n % 1 === 0;                                                                                                   // 749\n}                                                                                                                      // 750\n                                                                                                                       // 751\n                                                                                                                       // 752\n// Returns a method bound to the given object context.                                                                 // 753\n// Just like one of the jQuery.proxy signatures, but without the undesired behavior of treating the same method with   // 754\n// different contexts as identical when binding/unbinding events.                                                      // 755\nfunction proxy(obj, methodName) {                                                                                      // 756\n\tvar method = obj[methodName];                                                                                         // 757\n                                                                                                                       // 758\n\treturn function() {                                                                                                   // 759\n\t\treturn method.apply(obj, arguments);                                                                                 // 760\n\t};                                                                                                                    // 761\n}                                                                                                                      // 762\n                                                                                                                       // 763\n                                                                                                                       // 764\n// Returns a function, that, as long as it continues to be invoked, will not                                           // 765\n// be triggered. The function will be called after it stops being called for                                           // 766\n// N milliseconds.                                                                                                     // 767\n// https://github.com/jashkenas/underscore/blob/1.6.0/underscore.js#L714                                               // 768\nfunction debounce(func, wait) {                                                                                        // 769\n\tvar timeoutId;                                                                                                        // 770\n\tvar args;                                                                                                             // 771\n\tvar context;                                                                                                          // 772\n\tvar timestamp; // of most recent call                                                                                 // 773\n\tvar later = function() {                                                                                              // 774\n\t\tvar last = +new Date() - timestamp;                                                                                  // 775\n\t\tif (last < wait && last > 0) {                                                                                       // 776\n\t\t\ttimeoutId = setTimeout(later, wait - last);                                                                         // 777\n\t\t}                                                                                                                    // 778\n\t\telse {                                                                                                               // 779\n\t\t\ttimeoutId = null;                                                                                                   // 780\n\t\t\tfunc.apply(context, args);                                                                                          // 781\n\t\t\tif (!timeoutId) {                                                                                                   // 782\n\t\t\t\tcontext = args = null;                                                                                             // 783\n\t\t\t}                                                                                                                   // 784\n\t\t}                                                                                                                    // 785\n\t};                                                                                                                    // 786\n                                                                                                                       // 787\n\treturn function() {                                                                                                   // 788\n\t\tcontext = this;                                                                                                      // 789\n\t\targs = arguments;                                                                                                    // 790\n\t\ttimestamp = +new Date();                                                                                             // 791\n\t\tif (!timeoutId) {                                                                                                    // 792\n\t\t\ttimeoutId = setTimeout(later, wait);                                                                                // 793\n\t\t}                                                                                                                    // 794\n\t};                                                                                                                    // 795\n}                                                                                                                      // 796\n                                                                                                                       // 797\n;;                                                                                                                     // 798\n                                                                                                                       // 799\nvar ambigDateOfMonthRegex = /^\\s*\\d{4}-\\d\\d$/;                                                                         // 800\nvar ambigTimeOrZoneRegex =                                                                                             // 801\n\t/^\\s*\\d{4}-(?:(\\d\\d-\\d\\d)|(W\\d\\d$)|(W\\d\\d-\\d)|(\\d\\d\\d))((T| )(\\d\\d(:\\d\\d(:\\d\\d(\\.\\d+)?)?)?)?)?$/;                     // 802\nvar newMomentProto = moment.fn; // where we will attach our new methods                                                // 803\nvar oldMomentProto = $.extend({}, newMomentProto); // copy of original moment methods                                  // 804\nvar allowValueOptimization;                                                                                            // 805\nvar setUTCValues; // function defined below                                                                            // 806\nvar setLocalValues; // function defined below                                                                          // 807\n                                                                                                                       // 808\n                                                                                                                       // 809\n// Creating                                                                                                            // 810\n// -------------------------------------------------------------------------------------------------                   // 811\n                                                                                                                       // 812\n// Creates a new moment, similar to the vanilla moment(...) constructor, but with                                      // 813\n// extra features (ambiguous time, enhanced formatting). When given an existing moment,                                // 814\n// it will function as a clone (and retain the zone of the moment). Anything else will                                 // 815\n// result in a moment in the local zone.                                                                               // 816\nfc.moment = function() {                                                                                               // 817\n\treturn makeMoment(arguments);                                                                                         // 818\n};                                                                                                                     // 819\n                                                                                                                       // 820\n// Sames as fc.moment, but forces the resulting moment to be in the UTC timezone.                                      // 821\nfc.moment.utc = function() {                                                                                           // 822\n\tvar mom = makeMoment(arguments, true);                                                                                // 823\n                                                                                                                       // 824\n\t// Force it into UTC because makeMoment doesn't guarantee it                                                          // 825\n\t// (if given a pre-existing moment for example)                                                                       // 826\n\tif (mom.hasTime()) { // don't give ambiguously-timed moments a UTC zone                                               // 827\n\t\tmom.utc();                                                                                                           // 828\n\t}                                                                                                                     // 829\n                                                                                                                       // 830\n\treturn mom;                                                                                                           // 831\n};                                                                                                                     // 832\n                                                                                                                       // 833\n// Same as fc.moment, but when given an ISO8601 string, the timezone offset is preserved.                              // 834\n// ISO8601 strings with no timezone offset will become ambiguously zoned.                                              // 835\nfc.moment.parseZone = function() {                                                                                     // 836\n\treturn makeMoment(arguments, true, true);                                                                             // 837\n};                                                                                                                     // 838\n                                                                                                                       // 839\n// Builds an enhanced moment from args. When given an existing moment, it clones. When given a                         // 840\n// native Date, or called with no arguments (the current time), the resulting moment will be local.                    // 841\n// Anything else needs to be \"parsed\" (a string or an array), and will be affected by:                                 // 842\n//    parseAsUTC - if there is no zone information, should we parse the input in UTC?                                  // 843\n//    parseZone - if there is zone information, should we force the zone of the moment?                                // 844\nfunction makeMoment(args, parseAsUTC, parseZone) {                                                                     // 845\n\tvar input = args[0];                                                                                                  // 846\n\tvar isSingleString = args.length == 1 && typeof input === 'string';                                                   // 847\n\tvar isAmbigTime;                                                                                                      // 848\n\tvar isAmbigZone;                                                                                                      // 849\n\tvar ambigMatch;                                                                                                       // 850\n\tvar mom;                                                                                                              // 851\n                                                                                                                       // 852\n\tif (moment.isMoment(input)) {                                                                                         // 853\n\t\tmom = moment.apply(null, args); // clone it                                                                          // 854\n\t\ttransferAmbigs(input, mom); // the ambig flags weren't transfered with the clone                                     // 855\n\t}                                                                                                                     // 856\n\telse if (isNativeDate(input) || input === undefined) {                                                                // 857\n\t\tmom = moment.apply(null, args); // will be local                                                                     // 858\n\t}                                                                                                                     // 859\n\telse { // \"parsing\" is required                                                                                       // 860\n\t\tisAmbigTime = false;                                                                                                 // 861\n\t\tisAmbigZone = false;                                                                                                 // 862\n                                                                                                                       // 863\n\t\tif (isSingleString) {                                                                                                // 864\n\t\t\tif (ambigDateOfMonthRegex.test(input)) {                                                                            // 865\n\t\t\t\t// accept strings like '2014-05', but convert to the first of the month                                            // 866\n\t\t\t\tinput += '-01';                                                                                                    // 867\n\t\t\t\targs = [ input ]; // for when we pass it on to moment's constructor                                                // 868\n\t\t\t\tisAmbigTime = true;                                                                                                // 869\n\t\t\t\tisAmbigZone = true;                                                                                                // 870\n\t\t\t}                                                                                                                   // 871\n\t\t\telse if ((ambigMatch = ambigTimeOrZoneRegex.exec(input))) {                                                         // 872\n\t\t\t\tisAmbigTime = !ambigMatch[5]; // no time part?                                                                     // 873\n\t\t\t\tisAmbigZone = true;                                                                                                // 874\n\t\t\t}                                                                                                                   // 875\n\t\t}                                                                                                                    // 876\n\t\telse if ($.isArray(input)) {                                                                                         // 877\n\t\t\t// arrays have no timezone information, so assume ambiguous zone                                                    // 878\n\t\t\tisAmbigZone = true;                                                                                                 // 879\n\t\t}                                                                                                                    // 880\n\t\t// otherwise, probably a string with a format                                                                        // 881\n                                                                                                                       // 882\n\t\tif (parseAsUTC || isAmbigTime) {                                                                                     // 883\n\t\t\tmom = moment.utc.apply(moment, args);                                                                               // 884\n\t\t}                                                                                                                    // 885\n\t\telse {                                                                                                               // 886\n\t\t\tmom = moment.apply(null, args);                                                                                     // 887\n\t\t}                                                                                                                    // 888\n                                                                                                                       // 889\n\t\tif (isAmbigTime) {                                                                                                   // 890\n\t\t\tmom._ambigTime = true;                                                                                              // 891\n\t\t\tmom._ambigZone = true; // ambiguous time always means ambiguous zone                                                // 892\n\t\t}                                                                                                                    // 893\n\t\telse if (parseZone) { // let's record the inputted zone somehow                                                      // 894\n\t\t\tif (isAmbigZone) {                                                                                                  // 895\n\t\t\t\tmom._ambigZone = true;                                                                                             // 896\n\t\t\t}                                                                                                                   // 897\n\t\t\telse if (isSingleString) {                                                                                          // 898\n\t\t\t\tif (mom.utcOffset) {                                                                                               // 899\n\t\t\t\t\tmom.utcOffset(input); // if not a valid zone, will assign UTC                                                     // 900\n\t\t\t\t}                                                                                                                  // 901\n\t\t\t\telse {                                                                                                             // 902\n\t\t\t\t\tmom.zone(input); // for moment-pre-2.9                                                                            // 903\n\t\t\t\t}                                                                                                                  // 904\n\t\t\t}                                                                                                                   // 905\n\t\t}                                                                                                                    // 906\n\t}                                                                                                                     // 907\n                                                                                                                       // 908\n\tmom._fullCalendar = true; // flag for extended functionality                                                          // 909\n                                                                                                                       // 910\n\treturn mom;                                                                                                           // 911\n}                                                                                                                      // 912\n                                                                                                                       // 913\n                                                                                                                       // 914\n// A clone method that works with the flags related to our enhanced functionality.                                     // 915\n// In the future, use moment.momentProperties                                                                          // 916\nnewMomentProto.clone = function() {                                                                                    // 917\n\tvar mom = oldMomentProto.clone.apply(this, arguments);                                                                // 918\n                                                                                                                       // 919\n\t// these flags weren't transfered with the clone                                                                      // 920\n\ttransferAmbigs(this, mom);                                                                                            // 921\n\tif (this._fullCalendar) {                                                                                             // 922\n\t\tmom._fullCalendar = true;                                                                                            // 923\n\t}                                                                                                                     // 924\n                                                                                                                       // 925\n\treturn mom;                                                                                                           // 926\n};                                                                                                                     // 927\n                                                                                                                       // 928\n                                                                                                                       // 929\n// Week Number                                                                                                         // 930\n// -------------------------------------------------------------------------------------------------                   // 931\n                                                                                                                       // 932\n                                                                                                                       // 933\n// Returns the week number, considering the locale's custom week number calcuation                                     // 934\n// `weeks` is an alias for `week`                                                                                      // 935\nnewMomentProto.week = newMomentProto.weeks = function(input) {                                                         // 936\n\tvar weekCalc = (this._locale || this._lang) // works pre-moment-2.8                                                   // 937\n\t\t._fullCalendar_weekCalc;                                                                                             // 938\n                                                                                                                       // 939\n\tif (input == null && typeof weekCalc === 'function') { // custom function only works for getter                       // 940\n\t\treturn weekCalc(this);                                                                                               // 941\n\t}                                                                                                                     // 942\n\telse if (weekCalc === 'ISO') {                                                                                        // 943\n\t\treturn oldMomentProto.isoWeek.apply(this, arguments); // ISO getter/setter                                           // 944\n\t}                                                                                                                     // 945\n                                                                                                                       // 946\n\treturn oldMomentProto.week.apply(this, arguments); // local getter/setter                                             // 947\n};                                                                                                                     // 948\n                                                                                                                       // 949\n                                                                                                                       // 950\n// Time-of-day                                                                                                         // 951\n// -------------------------------------------------------------------------------------------------                   // 952\n                                                                                                                       // 953\n// GETTER                                                                                                              // 954\n// Returns a Duration with the hours/minutes/seconds/ms values of the moment.                                          // 955\n// If the moment has an ambiguous time, a duration of 00:00 will be returned.                                          // 956\n//                                                                                                                     // 957\n// SETTER                                                                                                              // 958\n// You can supply a Duration, a Moment, or a Duration-like argument.                                                   // 959\n// When setting the time, and the moment has an ambiguous time, it then becomes unambiguous.                           // 960\nnewMomentProto.time = function(time) {                                                                                 // 961\n                                                                                                                       // 962\n\t// Fallback to the original method (if there is one) if this moment wasn't created via FullCalendar.                  // 963\n\t// `time` is a generic enough method name where this precaution is necessary to avoid collisions w/ other plugins.    // 964\n\tif (!this._fullCalendar) {                                                                                            // 965\n\t\treturn oldMomentProto.time.apply(this, arguments);                                                                   // 966\n\t}                                                                                                                     // 967\n                                                                                                                       // 968\n\tif (time == null) { // getter                                                                                         // 969\n\t\treturn moment.duration({                                                                                             // 970\n\t\t\thours: this.hours(),                                                                                                // 971\n\t\t\tminutes: this.minutes(),                                                                                            // 972\n\t\t\tseconds: this.seconds(),                                                                                            // 973\n\t\t\tmilliseconds: this.milliseconds()                                                                                   // 974\n\t\t});                                                                                                                  // 975\n\t}                                                                                                                     // 976\n\telse { // setter                                                                                                      // 977\n                                                                                                                       // 978\n\t\tthis._ambigTime = false; // mark that the moment now has a time                                                      // 979\n                                                                                                                       // 980\n\t\tif (!moment.isDuration(time) && !moment.isMoment(time)) {                                                            // 981\n\t\t\ttime = moment.duration(time);                                                                                       // 982\n\t\t}                                                                                                                    // 983\n                                                                                                                       // 984\n\t\t// The day value should cause overflow (so 24 hours becomes 00:00:00 of next day).                                   // 985\n\t\t// Only for Duration times, not Moment times.                                                                        // 986\n\t\tvar dayHours = 0;                                                                                                    // 987\n\t\tif (moment.isDuration(time)) {                                                                                       // 988\n\t\t\tdayHours = Math.floor(time.asDays()) * 24;                                                                          // 989\n\t\t}                                                                                                                    // 990\n                                                                                                                       // 991\n\t\t// We need to set the individual fields.                                                                             // 992\n\t\t// Can't use startOf('day') then add duration. In case of DST at start of day.                                       // 993\n\t\treturn this.hours(dayHours + time.hours())                                                                           // 994\n\t\t\t.minutes(time.minutes())                                                                                            // 995\n\t\t\t.seconds(time.seconds())                                                                                            // 996\n\t\t\t.milliseconds(time.milliseconds());                                                                                 // 997\n\t}                                                                                                                     // 998\n};                                                                                                                     // 999\n                                                                                                                       // 1000\n// Converts the moment to UTC, stripping out its time-of-day and timezone offset,                                      // 1001\n// but preserving its YMD. A moment with a stripped time will display no time                                          // 1002\n// nor timezone offset when .format() is called.                                                                       // 1003\nnewMomentProto.stripTime = function() {                                                                                // 1004\n\tvar a;                                                                                                                // 1005\n                                                                                                                       // 1006\n\tif (!this._ambigTime) {                                                                                               // 1007\n                                                                                                                       // 1008\n\t\t// get the values before any conversion happens                                                                      // 1009\n\t\ta = this.toArray(); // array of y/m/d/h/m/s/ms                                                                       // 1010\n                                                                                                                       // 1011\n\t\t// TODO: use keepLocalTime in the future                                                                             // 1012\n\t\tthis.utc(); // set the internal UTC flag (will clear the ambig flags)                                                // 1013\n\t\tsetUTCValues(this, a.slice(0, 3)); // set the year/month/date. time will be zero                                     // 1014\n                                                                                                                       // 1015\n\t\t// Mark the time as ambiguous. This needs to happen after the .utc() call, which might call .utcOffset(),            // 1016\n\t\t// which clears all ambig flags. Same with setUTCValues with moment-timezone.                                        // 1017\n\t\tthis._ambigTime = true;                                                                                              // 1018\n\t\tthis._ambigZone = true; // if ambiguous time, also ambiguous timezone offset                                         // 1019\n\t}                                                                                                                     // 1020\n                                                                                                                       // 1021\n\treturn this; // for chaining                                                                                          // 1022\n};                                                                                                                     // 1023\n                                                                                                                       // 1024\n// Returns if the moment has a non-ambiguous time (boolean)                                                            // 1025\nnewMomentProto.hasTime = function() {                                                                                  // 1026\n\treturn !this._ambigTime;                                                                                              // 1027\n};                                                                                                                     // 1028\n                                                                                                                       // 1029\n                                                                                                                       // 1030\n// Timezone                                                                                                            // 1031\n// -------------------------------------------------------------------------------------------------                   // 1032\n                                                                                                                       // 1033\n// Converts the moment to UTC, stripping out its timezone offset, but preserving its                                   // 1034\n// YMD and time-of-day. A moment with a stripped timezone offset will display no                                       // 1035\n// timezone offset when .format() is called.                                                                           // 1036\n// TODO: look into Moment's keepLocalTime functionality                                                                // 1037\nnewMomentProto.stripZone = function() {                                                                                // 1038\n\tvar a, wasAmbigTime;                                                                                                  // 1039\n                                                                                                                       // 1040\n\tif (!this._ambigZone) {                                                                                               // 1041\n                                                                                                                       // 1042\n\t\t// get the values before any conversion happens                                                                      // 1043\n\t\ta = this.toArray(); // array of y/m/d/h/m/s/ms                                                                       // 1044\n\t\twasAmbigTime = this._ambigTime;                                                                                      // 1045\n                                                                                                                       // 1046\n\t\tthis.utc(); // set the internal UTC flag (might clear the ambig flags, depending on Moment internals)                // 1047\n\t\tsetUTCValues(this, a); // will set the year/month/date/hours/minutes/seconds/ms                                      // 1048\n                                                                                                                       // 1049\n\t\t// the above call to .utc()/.utcOffset() unfortunately might clear the ambig flags, so restore                       // 1050\n\t\tthis._ambigTime = wasAmbigTime || false;                                                                             // 1051\n                                                                                                                       // 1052\n\t\t// Mark the zone as ambiguous. This needs to happen after the .utc() call, which might call .utcOffset(),            // 1053\n\t\t// which clears the ambig flags. Same with setUTCValues with moment-timezone.                                        // 1054\n\t\tthis._ambigZone = true;                                                                                              // 1055\n\t}                                                                                                                     // 1056\n                                                                                                                       // 1057\n\treturn this; // for chaining                                                                                          // 1058\n};                                                                                                                     // 1059\n                                                                                                                       // 1060\n// Returns of the moment has a non-ambiguous timezone offset (boolean)                                                 // 1061\nnewMomentProto.hasZone = function() {                                                                                  // 1062\n\treturn !this._ambigZone;                                                                                              // 1063\n};                                                                                                                     // 1064\n                                                                                                                       // 1065\n                                                                                                                       // 1066\n// this method implicitly marks a zone                                                                                 // 1067\nnewMomentProto.local = function() {                                                                                    // 1068\n\tvar a = this.toArray(); // year,month,date,hours,minutes,seconds,ms as an array                                       // 1069\n\tvar wasAmbigZone = this._ambigZone;                                                                                   // 1070\n                                                                                                                       // 1071\n\toldMomentProto.local.apply(this, arguments);                                                                          // 1072\n                                                                                                                       // 1073\n\t// ensure non-ambiguous                                                                                               // 1074\n\t// this probably already happened via local() -> utcOffset(), but don't rely on Moment's internals                    // 1075\n\tthis._ambigTime = false;                                                                                              // 1076\n\tthis._ambigZone = false;                                                                                              // 1077\n                                                                                                                       // 1078\n\tif (wasAmbigZone) {                                                                                                   // 1079\n\t\t// If the moment was ambiguously zoned, the date fields were stored as UTC.                                          // 1080\n\t\t// We want to preserve these, but in local time.                                                                     // 1081\n\t\t// TODO: look into Moment's keepLocalTime functionality                                                              // 1082\n\t\tsetLocalValues(this, a);                                                                                             // 1083\n\t}                                                                                                                     // 1084\n                                                                                                                       // 1085\n\treturn this; // for chaining                                                                                          // 1086\n};                                                                                                                     // 1087\n                                                                                                                       // 1088\n                                                                                                                       // 1089\n// implicitly marks a zone                                                                                             // 1090\nnewMomentProto.utc = function() {                                                                                      // 1091\n\toldMomentProto.utc.apply(this, arguments);                                                                            // 1092\n                                                                                                                       // 1093\n\t// ensure non-ambiguous                                                                                               // 1094\n\t// this probably already happened via utc() -> utcOffset(), but don't rely on Moment's internals                      // 1095\n\tthis._ambigTime = false;                                                                                              // 1096\n\tthis._ambigZone = false;                                                                                              // 1097\n                                                                                                                       // 1098\n\treturn this;                                                                                                          // 1099\n};                                                                                                                     // 1100\n                                                                                                                       // 1101\n                                                                                                                       // 1102\n// methods for arbitrarily manipulating timezone offset.                                                               // 1103\n// should clear time/zone ambiguity when called.                                                                       // 1104\n$.each([                                                                                                               // 1105\n\t'zone', // only in moment-pre-2.9. deprecated afterwards                                                              // 1106\n\t'utcOffset'                                                                                                           // 1107\n], function(i, name) {                                                                                                 // 1108\n\tif (oldMomentProto[name]) { // original method exists?                                                                // 1109\n                                                                                                                       // 1110\n\t\t// this method implicitly marks a zone (will probably get called upon .utc() and .local())                           // 1111\n\t\tnewMomentProto[name] = function(tzo) {                                                                               // 1112\n                                                                                                                       // 1113\n\t\t\tif (tzo != null) { // setter                                                                                        // 1114\n\t\t\t\t// these assignments needs to happen before the original zone method is called.                                    // 1115\n\t\t\t\t// I forget why, something to do with a browser crash.                                                             // 1116\n\t\t\t\tthis._ambigTime = false;                                                                                           // 1117\n\t\t\t\tthis._ambigZone = false;                                                                                           // 1118\n\t\t\t}                                                                                                                   // 1119\n                                                                                                                       // 1120\n\t\t\treturn oldMomentProto[name].apply(this, arguments);                                                                 // 1121\n\t\t};                                                                                                                   // 1122\n\t}                                                                                                                     // 1123\n});                                                                                                                    // 1124\n                                                                                                                       // 1125\n                                                                                                                       // 1126\n// Formatting                                                                                                          // 1127\n// -------------------------------------------------------------------------------------------------                   // 1128\n                                                                                                                       // 1129\nnewMomentProto.format = function() {                                                                                   // 1130\n\tif (this._fullCalendar && arguments[0]) { // an enhanced moment? and a format string provided?                        // 1131\n\t\treturn formatDate(this, arguments[0]); // our extended formatting                                                    // 1132\n\t}                                                                                                                     // 1133\n\tif (this._ambigTime) {                                                                                                // 1134\n\t\treturn oldMomentFormat(this, 'YYYY-MM-DD');                                                                          // 1135\n\t}                                                                                                                     // 1136\n\tif (this._ambigZone) {                                                                                                // 1137\n\t\treturn oldMomentFormat(this, 'YYYY-MM-DD[T]HH:mm:ss');                                                               // 1138\n\t}                                                                                                                     // 1139\n\treturn oldMomentProto.format.apply(this, arguments);                                                                  // 1140\n};                                                                                                                     // 1141\n                                                                                                                       // 1142\nnewMomentProto.toISOString = function() {                                                                              // 1143\n\tif (this._ambigTime) {                                                                                                // 1144\n\t\treturn oldMomentFormat(this, 'YYYY-MM-DD');                                                                          // 1145\n\t}                                                                                                                     // 1146\n\tif (this._ambigZone) {                                                                                                // 1147\n\t\treturn oldMomentFormat(this, 'YYYY-MM-DD[T]HH:mm:ss');                                                               // 1148\n\t}                                                                                                                     // 1149\n\treturn oldMomentProto.toISOString.apply(this, arguments);                                                             // 1150\n};                                                                                                                     // 1151\n                                                                                                                       // 1152\n                                                                                                                       // 1153\n// Querying                                                                                                            // 1154\n// -------------------------------------------------------------------------------------------------                   // 1155\n                                                                                                                       // 1156\n// Is the moment within the specified range? `end` is exclusive.                                                       // 1157\n// FYI, this method is not a standard Moment method, so always do our enhanced logic.                                  // 1158\nnewMomentProto.isWithin = function(start, end) {                                                                       // 1159\n\tvar a = commonlyAmbiguate([ this, start, end ]);                                                                      // 1160\n\treturn a[0] >= a[1] && a[0] < a[2];                                                                                   // 1161\n};                                                                                                                     // 1162\n                                                                                                                       // 1163\n// When isSame is called with units, timezone ambiguity is normalized before the comparison happens.                   // 1164\n// If no units specified, the two moments must be identically the same, with matching ambig flags.                     // 1165\nnewMomentProto.isSame = function(input, units) {                                                                       // 1166\n\tvar a;                                                                                                                // 1167\n                                                                                                                       // 1168\n\t// only do custom logic if this is an enhanced moment                                                                 // 1169\n\tif (!this._fullCalendar) {                                                                                            // 1170\n\t\treturn oldMomentProto.isSame.apply(this, arguments);                                                                 // 1171\n\t}                                                                                                                     // 1172\n                                                                                                                       // 1173\n\tif (units) {                                                                                                          // 1174\n\t\ta = commonlyAmbiguate([ this, input ], true); // normalize timezones but don't erase times                           // 1175\n\t\treturn oldMomentProto.isSame.call(a[0], a[1], units);                                                                // 1176\n\t}                                                                                                                     // 1177\n\telse {                                                                                                                // 1178\n\t\tinput = fc.moment.parseZone(input); // normalize input                                                               // 1179\n\t\treturn oldMomentProto.isSame.call(this, input) &&                                                                    // 1180\n\t\t\tBoolean(this._ambigTime) === Boolean(input._ambigTime) &&                                                           // 1181\n\t\t\tBoolean(this._ambigZone) === Boolean(input._ambigZone);                                                             // 1182\n\t}                                                                                                                     // 1183\n};                                                                                                                     // 1184\n                                                                                                                       // 1185\n// Make these query methods work with ambiguous moments                                                                // 1186\n$.each([                                                                                                               // 1187\n\t'isBefore',                                                                                                           // 1188\n\t'isAfter'                                                                                                             // 1189\n], function(i, methodName) {                                                                                           // 1190\n\tnewMomentProto[methodName] = function(input, units) {                                                                 // 1191\n\t\tvar a;                                                                                                               // 1192\n                                                                                                                       // 1193\n\t\t// only do custom logic if this is an enhanced moment                                                                // 1194\n\t\tif (!this._fullCalendar) {                                                                                           // 1195\n\t\t\treturn oldMomentProto[methodName].apply(this, arguments);                                                           // 1196\n\t\t}                                                                                                                    // 1197\n                                                                                                                       // 1198\n\t\ta = commonlyAmbiguate([ this, input ]);                                                                              // 1199\n\t\treturn oldMomentProto[methodName].call(a[0], a[1], units);                                                           // 1200\n\t};                                                                                                                    // 1201\n});                                                                                                                    // 1202\n                                                                                                                       // 1203\n                                                                                                                       // 1204\n// Misc Internals                                                                                                      // 1205\n// -------------------------------------------------------------------------------------------------                   // 1206\n                                                                                                                       // 1207\n// given an array of moment-like inputs, return a parallel array w/ moments similarly ambiguated.                      // 1208\n// for example, of one moment has ambig time, but not others, all moments will have their time stripped.               // 1209\n// set `preserveTime` to `true` to keep times, but only normalize zone ambiguity.                                      // 1210\n// returns the original moments if no modifications are necessary.                                                     // 1211\nfunction commonlyAmbiguate(inputs, preserveTime) {                                                                     // 1212\n\tvar anyAmbigTime = false;                                                                                             // 1213\n\tvar anyAmbigZone = false;                                                                                             // 1214\n\tvar len = inputs.length;                                                                                              // 1215\n\tvar moms = [];                                                                                                        // 1216\n\tvar i, mom;                                                                                                           // 1217\n                                                                                                                       // 1218\n\t// parse inputs into real moments and query their ambig flags                                                         // 1219\n\tfor (i = 0; i < len; i++) {                                                                                           // 1220\n\t\tmom = inputs[i];                                                                                                     // 1221\n\t\tif (!moment.isMoment(mom)) {                                                                                         // 1222\n\t\t\tmom = fc.moment.parseZone(mom);                                                                                     // 1223\n\t\t}                                                                                                                    // 1224\n\t\tanyAmbigTime = anyAmbigTime || mom._ambigTime;                                                                       // 1225\n\t\tanyAmbigZone = anyAmbigZone || mom._ambigZone;                                                                       // 1226\n\t\tmoms.push(mom);                                                                                                      // 1227\n\t}                                                                                                                     // 1228\n                                                                                                                       // 1229\n\t// strip each moment down to lowest common ambiguity                                                                  // 1230\n\t// use clones to avoid modifying the original moments                                                                 // 1231\n\tfor (i = 0; i < len; i++) {                                                                                           // 1232\n\t\tmom = moms[i];                                                                                                       // 1233\n\t\tif (!preserveTime && anyAmbigTime && !mom._ambigTime) {                                                              // 1234\n\t\t\tmoms[i] = mom.clone().stripTime();                                                                                  // 1235\n\t\t}                                                                                                                    // 1236\n\t\telse if (anyAmbigZone && !mom._ambigZone) {                                                                          // 1237\n\t\t\tmoms[i] = mom.clone().stripZone();                                                                                  // 1238\n\t\t}                                                                                                                    // 1239\n\t}                                                                                                                     // 1240\n                                                                                                                       // 1241\n\treturn moms;                                                                                                          // 1242\n}                                                                                                                      // 1243\n                                                                                                                       // 1244\n// Transfers all the flags related to ambiguous time/zone from the `src` moment to the `dest` moment                   // 1245\n// TODO: look into moment.momentProperties for this.                                                                   // 1246\nfunction transferAmbigs(src, dest) {                                                                                   // 1247\n\tif (src._ambigTime) {                                                                                                 // 1248\n\t\tdest._ambigTime = true;                                                                                              // 1249\n\t}                                                                                                                     // 1250\n\telse if (dest._ambigTime) {                                                                                           // 1251\n\t\tdest._ambigTime = false;                                                                                             // 1252\n\t}                                                                                                                     // 1253\n                                                                                                                       // 1254\n\tif (src._ambigZone) {                                                                                                 // 1255\n\t\tdest._ambigZone = true;                                                                                              // 1256\n\t}                                                                                                                     // 1257\n\telse if (dest._ambigZone) {                                                                                           // 1258\n\t\tdest._ambigZone = false;                                                                                             // 1259\n\t}                                                                                                                     // 1260\n}                                                                                                                      // 1261\n                                                                                                                       // 1262\n                                                                                                                       // 1263\n// Sets the year/month/date/etc values of the moment from the given array.                                             // 1264\n// Inefficient because it calls each individual setter.                                                                // 1265\nfunction setMomentValues(mom, a) {                                                                                     // 1266\n\tmom.year(a[0] || 0)                                                                                                   // 1267\n\t\t.month(a[1] || 0)                                                                                                    // 1268\n\t\t.date(a[2] || 0)                                                                                                     // 1269\n\t\t.hours(a[3] || 0)                                                                                                    // 1270\n\t\t.minutes(a[4] || 0)                                                                                                  // 1271\n\t\t.seconds(a[5] || 0)                                                                                                  // 1272\n\t\t.milliseconds(a[6] || 0);                                                                                            // 1273\n}                                                                                                                      // 1274\n                                                                                                                       // 1275\n// Can we set the moment's internal date directly?                                                                     // 1276\nallowValueOptimization = '_d' in moment() && 'updateOffset' in moment;                                                 // 1277\n                                                                                                                       // 1278\n// Utility function. Accepts a moment and an array of the UTC year/month/date/etc values to set.                       // 1279\n// Assumes the given moment is already in UTC mode.                                                                    // 1280\nsetUTCValues = allowValueOptimization ? function(mom, a) {                                                             // 1281\n\t// simlate what moment's accessors do                                                                                 // 1282\n\tmom._d.setTime(Date.UTC.apply(Date, a));                                                                              // 1283\n\tmoment.updateOffset(mom, false); // keepTime=false                                                                    // 1284\n} : setMomentValues;                                                                                                   // 1285\n                                                                                                                       // 1286\n// Utility function. Accepts a moment and an array of the local year/month/date/etc values to set.                     // 1287\n// Assumes the given moment is already in local mode.                                                                  // 1288\nsetLocalValues = allowValueOptimization ? function(mom, a) {                                                           // 1289\n\t// simlate what moment's accessors do                                                                                 // 1290\n\tmom._d.setTime(+new Date( // FYI, there is now way to apply an array of args to a constructor                         // 1291\n\t\ta[0] || 0,                                                                                                           // 1292\n\t\ta[1] || 0,                                                                                                           // 1293\n\t\ta[2] || 0,                                                                                                           // 1294\n\t\ta[3] || 0,                                                                                                           // 1295\n\t\ta[4] || 0,                                                                                                           // 1296\n\t\ta[5] || 0,                                                                                                           // 1297\n\t\ta[6] || 0                                                                                                            // 1298\n\t));                                                                                                                   // 1299\n\tmoment.updateOffset(mom, false); // keepTime=false                                                                    // 1300\n} : setMomentValues;                                                                                                   // 1301\n                                                                                                                       // 1302\n;;                                                                                                                     // 1303\n                                                                                                                       // 1304\n// Single Date Formatting                                                                                              // 1305\n// -------------------------------------------------------------------------------------------------                   // 1306\n                                                                                                                       // 1307\n                                                                                                                       // 1308\n// call this if you want Moment's original format method to be used                                                    // 1309\nfunction oldMomentFormat(mom, formatStr) {                                                                             // 1310\n\treturn oldMomentProto.format.call(mom, formatStr); // oldMomentProto defined in moment-ext.js                         // 1311\n}                                                                                                                      // 1312\n                                                                                                                       // 1313\n                                                                                                                       // 1314\n// Formats `date` with a Moment formatting string, but allow our non-zero areas and                                    // 1315\n// additional token.                                                                                                   // 1316\nfunction formatDate(date, formatStr) {                                                                                 // 1317\n\treturn formatDateWithChunks(date, getFormatStringChunks(formatStr));                                                  // 1318\n}                                                                                                                      // 1319\n                                                                                                                       // 1320\n                                                                                                                       // 1321\nfunction formatDateWithChunks(date, chunks) {                                                                          // 1322\n\tvar s = '';                                                                                                           // 1323\n\tvar i;                                                                                                                // 1324\n                                                                                                                       // 1325\n\tfor (i=0; i<chunks.length; i++) {                                                                                     // 1326\n\t\ts += formatDateWithChunk(date, chunks[i]);                                                                           // 1327\n\t}                                                                                                                     // 1328\n                                                                                                                       // 1329\n\treturn s;                                                                                                             // 1330\n}                                                                                                                      // 1331\n                                                                                                                       // 1332\n                                                                                                                       // 1333\n// addition formatting tokens we want recognized                                                                       // 1334\nvar tokenOverrides = {                                                                                                 // 1335\n\tt: function(date) { // \"a\" or \"p\"                                                                                     // 1336\n\t\treturn oldMomentFormat(date, 'a').charAt(0);                                                                         // 1337\n\t},                                                                                                                    // 1338\n\tT: function(date) { // \"A\" or \"P\"                                                                                     // 1339\n\t\treturn oldMomentFormat(date, 'A').charAt(0);                                                                         // 1340\n\t}                                                                                                                     // 1341\n};                                                                                                                     // 1342\n                                                                                                                       // 1343\n                                                                                                                       // 1344\nfunction formatDateWithChunk(date, chunk) {                                                                            // 1345\n\tvar token;                                                                                                            // 1346\n\tvar maybeStr;                                                                                                         // 1347\n                                                                                                                       // 1348\n\tif (typeof chunk === 'string') { // a literal string                                                                  // 1349\n\t\treturn chunk;                                                                                                        // 1350\n\t}                                                                                                                     // 1351\n\telse if ((token = chunk.token)) { // a token, like \"YYYY\"                                                             // 1352\n\t\tif (tokenOverrides[token]) {                                                                                         // 1353\n\t\t\treturn tokenOverrides[token](date); // use our custom token                                                         // 1354\n\t\t}                                                                                                                    // 1355\n\t\treturn oldMomentFormat(date, token);                                                                                 // 1356\n\t}                                                                                                                     // 1357\n\telse if (chunk.maybe) { // a grouping of other chunks that must be non-zero                                           // 1358\n\t\tmaybeStr = formatDateWithChunks(date, chunk.maybe);                                                                  // 1359\n\t\tif (maybeStr.match(/[1-9]/)) {                                                                                       // 1360\n\t\t\treturn maybeStr;                                                                                                    // 1361\n\t\t}                                                                                                                    // 1362\n\t}                                                                                                                     // 1363\n                                                                                                                       // 1364\n\treturn '';                                                                                                            // 1365\n}                                                                                                                      // 1366\n                                                                                                                       // 1367\n                                                                                                                       // 1368\n// Date Range Formatting                                                                                               // 1369\n// -------------------------------------------------------------------------------------------------                   // 1370\n// TODO: make it work with timezone offset                                                                             // 1371\n                                                                                                                       // 1372\n// Using a formatting string meant for a single date, generate a range string, like                                    // 1373\n// \"Sep 2 - 9 2013\", that intelligently inserts a separator where the dates differ.                                    // 1374\n// If the dates are the same as far as the format string is concerned, just return a single                            // 1375\n// rendering of one date, without any separator.                                                                       // 1376\nfunction formatRange(date1, date2, formatStr, separator, isRTL) {                                                      // 1377\n\tvar localeData;                                                                                                       // 1378\n                                                                                                                       // 1379\n\tdate1 = fc.moment.parseZone(date1);                                                                                   // 1380\n\tdate2 = fc.moment.parseZone(date2);                                                                                   // 1381\n                                                                                                                       // 1382\n\tlocaleData = (date1.localeData || date1.lang).call(date1); // works with moment-pre-2.8                               // 1383\n                                                                                                                       // 1384\n\t// Expand localized format strings, like \"LL\" -> \"MMMM D YYYY\"                                                        // 1385\n\tformatStr = localeData.longDateFormat(formatStr) || formatStr;                                                        // 1386\n\t// BTW, this is not important for `formatDate` because it is impossible to put custom tokens                          // 1387\n\t// or non-zero areas in Moment's localized format strings.                                                            // 1388\n                                                                                                                       // 1389\n\tseparator = separator || ' - ';                                                                                       // 1390\n                                                                                                                       // 1391\n\treturn formatRangeWithChunks(                                                                                         // 1392\n\t\tdate1,                                                                                                               // 1393\n\t\tdate2,                                                                                                               // 1394\n\t\tgetFormatStringChunks(formatStr),                                                                                    // 1395\n\t\tseparator,                                                                                                           // 1396\n\t\tisRTL                                                                                                                // 1397\n\t);                                                                                                                    // 1398\n}                                                                                                                      // 1399\nfc.formatRange = formatRange; // expose                                                                                // 1400\n                                                                                                                       // 1401\n                                                                                                                       // 1402\nfunction formatRangeWithChunks(date1, date2, chunks, separator, isRTL) {                                               // 1403\n\tvar chunkStr; // the rendering of the chunk                                                                           // 1404\n\tvar leftI;                                                                                                            // 1405\n\tvar leftStr = '';                                                                                                     // 1406\n\tvar rightI;                                                                                                           // 1407\n\tvar rightStr = '';                                                                                                    // 1408\n\tvar middleI;                                                                                                          // 1409\n\tvar middleStr1 = '';                                                                                                  // 1410\n\tvar middleStr2 = '';                                                                                                  // 1411\n\tvar middleStr = '';                                                                                                   // 1412\n                                                                                                                       // 1413\n\t// Start at the leftmost side of the formatting string and continue until you hit a token                             // 1414\n\t// that is not the same between dates.                                                                                // 1415\n\tfor (leftI=0; leftI<chunks.length; leftI++) {                                                                         // 1416\n\t\tchunkStr = formatSimilarChunk(date1, date2, chunks[leftI]);                                                          // 1417\n\t\tif (chunkStr === false) {                                                                                            // 1418\n\t\t\tbreak;                                                                                                              // 1419\n\t\t}                                                                                                                    // 1420\n\t\tleftStr += chunkStr;                                                                                                 // 1421\n\t}                                                                                                                     // 1422\n                                                                                                                       // 1423\n\t// Similarly, start at the rightmost side of the formatting string and move left                                      // 1424\n\tfor (rightI=chunks.length-1; rightI>leftI; rightI--) {                                                                // 1425\n\t\tchunkStr = formatSimilarChunk(date1, date2, chunks[rightI]);                                                         // 1426\n\t\tif (chunkStr === false) {                                                                                            // 1427\n\t\t\tbreak;                                                                                                              // 1428\n\t\t}                                                                                                                    // 1429\n\t\trightStr = chunkStr + rightStr;                                                                                      // 1430\n\t}                                                                                                                     // 1431\n                                                                                                                       // 1432\n\t// The area in the middle is different for both of the dates.                                                         // 1433\n\t// Collect them distinctly so we can jam them together later.                                                         // 1434\n\tfor (middleI=leftI; middleI<=rightI; middleI++) {                                                                     // 1435\n\t\tmiddleStr1 += formatDateWithChunk(date1, chunks[middleI]);                                                           // 1436\n\t\tmiddleStr2 += formatDateWithChunk(date2, chunks[middleI]);                                                           // 1437\n\t}                                                                                                                     // 1438\n                                                                                                                       // 1439\n\tif (middleStr1 || middleStr2) {                                                                                       // 1440\n\t\tif (isRTL) {                                                                                                         // 1441\n\t\t\tmiddleStr = middleStr2 + separator + middleStr1;                                                                    // 1442\n\t\t}                                                                                                                    // 1443\n\t\telse {                                                                                                               // 1444\n\t\t\tmiddleStr = middleStr1 + separator + middleStr2;                                                                    // 1445\n\t\t}                                                                                                                    // 1446\n\t}                                                                                                                     // 1447\n                                                                                                                       // 1448\n\treturn leftStr + middleStr + rightStr;                                                                                // 1449\n}                                                                                                                      // 1450\n                                                                                                                       // 1451\n                                                                                                                       // 1452\nvar similarUnitMap = {                                                                                                 // 1453\n\tY: 'year',                                                                                                            // 1454\n\tM: 'month',                                                                                                           // 1455\n\tD: 'day', // day of month                                                                                             // 1456\n\td: 'day', // day of week                                                                                              // 1457\n\t// prevents a separator between anything time-related...                                                              // 1458\n\tA: 'second', // AM/PM                                                                                                 // 1459\n\ta: 'second', // am/pm                                                                                                 // 1460\n\tT: 'second', // A/P                                                                                                   // 1461\n\tt: 'second', // a/p                                                                                                   // 1462\n\tH: 'second', // hour (24)                                                                                             // 1463\n\th: 'second', // hour (12)                                                                                             // 1464\n\tm: 'second', // minute                                                                                                // 1465\n\ts: 'second' // second                                                                                                 // 1466\n};                                                                                                                     // 1467\n// TODO: week maybe?                                                                                                   // 1468\n                                                                                                                       // 1469\n                                                                                                                       // 1470\n// Given a formatting chunk, and given that both dates are similar in the regard the                                   // 1471\n// formatting chunk is concerned, format date1 against `chunk`. Otherwise, return `false`.                             // 1472\nfunction formatSimilarChunk(date1, date2, chunk) {                                                                     // 1473\n\tvar token;                                                                                                            // 1474\n\tvar unit;                                                                                                             // 1475\n                                                                                                                       // 1476\n\tif (typeof chunk === 'string') { // a literal string                                                                  // 1477\n\t\treturn chunk;                                                                                                        // 1478\n\t}                                                                                                                     // 1479\n\telse if ((token = chunk.token)) {                                                                                     // 1480\n\t\tunit = similarUnitMap[token.charAt(0)];                                                                              // 1481\n\t\t// are the dates the same for this unit of measurement?                                                              // 1482\n\t\tif (unit && date1.isSame(date2, unit)) {                                                                             // 1483\n\t\t\treturn oldMomentFormat(date1, token); // would be the same if we used `date2`                                       // 1484\n\t\t\t// BTW, don't support custom tokens                                                                                 // 1485\n\t\t}                                                                                                                    // 1486\n\t}                                                                                                                     // 1487\n                                                                                                                       // 1488\n\treturn false; // the chunk is NOT the same for the two dates                                                          // 1489\n\t// BTW, don't support splitting on non-zero areas                                                                     // 1490\n}                                                                                                                      // 1491\n                                                                                                                       // 1492\n                                                                                                                       // 1493\n// Chunking Utils                                                                                                      // 1494\n// -------------------------------------------------------------------------------------------------                   // 1495\n                                                                                                                       // 1496\n                                                                                                                       // 1497\nvar formatStringChunkCache = {};                                                                                       // 1498\n                                                                                                                       // 1499\n                                                                                                                       // 1500\nfunction getFormatStringChunks(formatStr) {                                                                            // 1501\n\tif (formatStr in formatStringChunkCache) {                                                                            // 1502\n\t\treturn formatStringChunkCache[formatStr];                                                                            // 1503\n\t}                                                                                                                     // 1504\n\treturn (formatStringChunkCache[formatStr] = chunkFormatString(formatStr));                                            // 1505\n}                                                                                                                      // 1506\n                                                                                                                       // 1507\n                                                                                                                       // 1508\n// Break the formatting string into an array of chunks                                                                 // 1509\nfunction chunkFormatString(formatStr) {                                                                                // 1510\n\tvar chunks = [];                                                                                                      // 1511\n\tvar chunker = /\\[([^\\]]*)\\]|\\(([^\\)]*)\\)|(LTS|LT|(\\w)\\4*o?)|([^\\w\\[\\(]+)/g; // TODO: more descrimination              // 1512\n\tvar match;                                                                                                            // 1513\n                                                                                                                       // 1514\n\twhile ((match = chunker.exec(formatStr))) {                                                                           // 1515\n\t\tif (match[1]) { // a literal string inside [ ... ]                                                                   // 1516\n\t\t\tchunks.push(match[1]);                                                                                              // 1517\n\t\t}                                                                                                                    // 1518\n\t\telse if (match[2]) { // non-zero formatting inside ( ... )                                                           // 1519\n\t\t\tchunks.push({ maybe: chunkFormatString(match[2]) });                                                                // 1520\n\t\t}                                                                                                                    // 1521\n\t\telse if (match[3]) { // a formatting token                                                                           // 1522\n\t\t\tchunks.push({ token: match[3] });                                                                                   // 1523\n\t\t}                                                                                                                    // 1524\n\t\telse if (match[5]) { // an unenclosed literal string                                                                 // 1525\n\t\t\tchunks.push(match[5]);                                                                                              // 1526\n\t\t}                                                                                                                    // 1527\n\t}                                                                                                                     // 1528\n                                                                                                                       // 1529\n\treturn chunks;                                                                                                        // 1530\n}                                                                                                                      // 1531\n                                                                                                                       // 1532\n;;                                                                                                                     // 1533\n                                                                                                                       // 1534\nfc.Class = Class; // export                                                                                            // 1535\n                                                                                                                       // 1536\n// class that all other classes will inherit from                                                                      // 1537\nfunction Class() { }                                                                                                   // 1538\n                                                                                                                       // 1539\n// called upon a class to create a subclass                                                                            // 1540\nClass.extend = function(members) {                                                                                     // 1541\n\tvar superClass = this;                                                                                                // 1542\n\tvar subClass;                                                                                                         // 1543\n                                                                                                                       // 1544\n\tmembers = members || {};                                                                                              // 1545\n                                                                                                                       // 1546\n\t// ensure a constructor for the subclass, forwarding all arguments to the super-constructor if it doesn't exist       // 1547\n\tif (hasOwnProp(members, 'constructor')) {                                                                             // 1548\n\t\tsubClass = members.constructor;                                                                                      // 1549\n\t}                                                                                                                     // 1550\n\tif (typeof subClass !== 'function') {                                                                                 // 1551\n\t\tsubClass = members.constructor = function() {                                                                        // 1552\n\t\t\tsuperClass.apply(this, arguments);                                                                                  // 1553\n\t\t};                                                                                                                   // 1554\n\t}                                                                                                                     // 1555\n                                                                                                                       // 1556\n\t// build the base prototype for the subclass, which is an new object chained to the superclass's prototype            // 1557\n\tsubClass.prototype = createObject(superClass.prototype);                                                              // 1558\n                                                                                                                       // 1559\n\t// copy each member variable/method onto the the subclass's prototype                                                 // 1560\n\tcopyOwnProps(members, subClass.prototype);                                                                            // 1561\n\tcopyNativeMethods(members, subClass.prototype); // hack for IE8                                                       // 1562\n                                                                                                                       // 1563\n\t// copy over all class variables/methods to the subclass, such as `extend` and `mixin`                                // 1564\n\tcopyOwnProps(superClass, subClass);                                                                                   // 1565\n                                                                                                                       // 1566\n\treturn subClass;                                                                                                      // 1567\n};                                                                                                                     // 1568\n                                                                                                                       // 1569\n// adds new member variables/methods to the class's prototype.                                                         // 1570\n// can be called with another class, or a plain object hash containing new members.                                    // 1571\nClass.mixin = function(members) {                                                                                      // 1572\n\tcopyOwnProps(members.prototype || members, this.prototype);                                                           // 1573\n};                                                                                                                     // 1574\n;;                                                                                                                     // 1575\n                                                                                                                       // 1576\n/* A rectangular panel that is absolutely positioned over other content                                                // 1577\n------------------------------------------------------------------------------------------------------------------------\nOptions:                                                                                                               // 1579\n\t- className (string)                                                                                                  // 1580\n\t- content (HTML string or jQuery element set)                                                                         // 1581\n\t- parentEl                                                                                                            // 1582\n\t- top                                                                                                                 // 1583\n\t- left                                                                                                                // 1584\n\t- right (the x coord of where the right edge should be. not a \"CSS\" right)                                            // 1585\n\t- autoHide (boolean)                                                                                                  // 1586\n\t- show (callback)                                                                                                     // 1587\n\t- hide (callback)                                                                                                     // 1588\n*/                                                                                                                     // 1589\n                                                                                                                       // 1590\nvar Popover = Class.extend({                                                                                           // 1591\n                                                                                                                       // 1592\n\tisHidden: true,                                                                                                       // 1593\n\toptions: null,                                                                                                        // 1594\n\tel: null, // the container element for the popover. generated by this object                                          // 1595\n\tdocumentMousedownProxy: null, // document mousedown handler bound to `this`                                           // 1596\n\tmargin: 10, // the space required between the popover and the edges of the scroll container                           // 1597\n                                                                                                                       // 1598\n                                                                                                                       // 1599\n\tconstructor: function(options) {                                                                                      // 1600\n\t\tthis.options = options || {};                                                                                        // 1601\n\t},                                                                                                                    // 1602\n                                                                                                                       // 1603\n                                                                                                                       // 1604\n\t// Shows the popover on the specified position. Renders it if not already                                             // 1605\n\tshow: function() {                                                                                                    // 1606\n\t\tif (this.isHidden) {                                                                                                 // 1607\n\t\t\tif (!this.el) {                                                                                                     // 1608\n\t\t\t\tthis.render();                                                                                                     // 1609\n\t\t\t}                                                                                                                   // 1610\n\t\t\tthis.el.show();                                                                                                     // 1611\n\t\t\tthis.position();                                                                                                    // 1612\n\t\t\tthis.isHidden = false;                                                                                              // 1613\n\t\t\tthis.trigger('show');                                                                                               // 1614\n\t\t}                                                                                                                    // 1615\n\t},                                                                                                                    // 1616\n                                                                                                                       // 1617\n                                                                                                                       // 1618\n\t// Hides the popover, through CSS, but does not remove it from the DOM                                                // 1619\n\thide: function() {                                                                                                    // 1620\n\t\tif (!this.isHidden) {                                                                                                // 1621\n\t\t\tthis.el.hide();                                                                                                     // 1622\n\t\t\tthis.isHidden = true;                                                                                               // 1623\n\t\t\tthis.trigger('hide');                                                                                               // 1624\n\t\t}                                                                                                                    // 1625\n\t},                                                                                                                    // 1626\n                                                                                                                       // 1627\n                                                                                                                       // 1628\n\t// Creates `this.el` and renders content inside of it                                                                 // 1629\n\trender: function() {                                                                                                  // 1630\n\t\tvar _this = this;                                                                                                    // 1631\n\t\tvar options = this.options;                                                                                          // 1632\n                                                                                                                       // 1633\n\t\tthis.el = $('<div class=\"fc-popover\"/>')                                                                             // 1634\n\t\t\t.addClass(options.className || '')                                                                                  // 1635\n\t\t\t.css({                                                                                                              // 1636\n\t\t\t\t// position initially to the top left to avoid creating scrollbars                                                 // 1637\n\t\t\t\ttop: 0,                                                                                                            // 1638\n\t\t\t\tleft: 0                                                                                                            // 1639\n\t\t\t})                                                                                                                  // 1640\n\t\t\t.append(options.content)                                                                                            // 1641\n\t\t\t.appendTo(options.parentEl);                                                                                        // 1642\n                                                                                                                       // 1643\n\t\t// when a click happens on anything inside with a 'fc-close' className, hide the popover                             // 1644\n\t\tthis.el.on('click', '.fc-close', function() {                                                                        // 1645\n\t\t\t_this.hide();                                                                                                       // 1646\n\t\t});                                                                                                                  // 1647\n                                                                                                                       // 1648\n\t\tif (options.autoHide) {                                                                                              // 1649\n\t\t\t$(document).on('mousedown', this.documentMousedownProxy = proxy(this, 'documentMousedown'));                        // 1650\n\t\t}                                                                                                                    // 1651\n\t},                                                                                                                    // 1652\n                                                                                                                       // 1653\n                                                                                                                       // 1654\n\t// Triggered when the user clicks *anywhere* in the document, for the autoHide feature                                // 1655\n\tdocumentMousedown: function(ev) {                                                                                     // 1656\n\t\t// only hide the popover if the click happened outside the popover                                                   // 1657\n\t\tif (this.el && !$(ev.target).closest(this.el).length) {                                                              // 1658\n\t\t\tthis.hide();                                                                                                        // 1659\n\t\t}                                                                                                                    // 1660\n\t},                                                                                                                    // 1661\n                                                                                                                       // 1662\n                                                                                                                       // 1663\n\t// Hides and unregisters any handlers                                                                                 // 1664\n\tdestroy: function() {                                                                                                 // 1665\n\t\tthis.hide();                                                                                                         // 1666\n                                                                                                                       // 1667\n\t\tif (this.el) {                                                                                                       // 1668\n\t\t\tthis.el.remove();                                                                                                   // 1669\n\t\t\tthis.el = null;                                                                                                     // 1670\n\t\t}                                                                                                                    // 1671\n                                                                                                                       // 1672\n\t\t$(document).off('mousedown', this.documentMousedownProxy);                                                           // 1673\n\t},                                                                                                                    // 1674\n                                                                                                                       // 1675\n                                                                                                                       // 1676\n\t// Positions the popover optimally, using the top/left/right options                                                  // 1677\n\tposition: function() {                                                                                                // 1678\n\t\tvar options = this.options;                                                                                          // 1679\n\t\tvar origin = this.el.offsetParent().offset();                                                                        // 1680\n\t\tvar width = this.el.outerWidth();                                                                                    // 1681\n\t\tvar height = this.el.outerHeight();                                                                                  // 1682\n\t\tvar windowEl = $(window);                                                                                            // 1683\n\t\tvar viewportEl = getScrollParent(this.el);                                                                           // 1684\n\t\tvar viewportTop;                                                                                                     // 1685\n\t\tvar viewportLeft;                                                                                                    // 1686\n\t\tvar viewportOffset;                                                                                                  // 1687\n\t\tvar top; // the \"position\" (not \"offset\") values for the popover                                                     // 1688\n\t\tvar left; //                                                                                                         // 1689\n                                                                                                                       // 1690\n\t\t// compute top and left                                                                                              // 1691\n\t\ttop = options.top || 0;                                                                                              // 1692\n\t\tif (options.left !== undefined) {                                                                                    // 1693\n\t\t\tleft = options.left;                                                                                                // 1694\n\t\t}                                                                                                                    // 1695\n\t\telse if (options.right !== undefined) {                                                                              // 1696\n\t\t\tleft = options.right - width; // derive the left value from the right value                                         // 1697\n\t\t}                                                                                                                    // 1698\n\t\telse {                                                                                                               // 1699\n\t\t\tleft = 0;                                                                                                           // 1700\n\t\t}                                                                                                                    // 1701\n                                                                                                                       // 1702\n\t\tif (viewportEl.is(window) || viewportEl.is(document)) { // normalize getScrollParent's result                        // 1703\n\t\t\tviewportEl = windowEl;                                                                                              // 1704\n\t\t\tviewportTop = 0; // the window is always at the top left                                                            // 1705\n\t\t\tviewportLeft = 0; // (and .offset() won't work if called here)                                                      // 1706\n\t\t}                                                                                                                    // 1707\n\t\telse {                                                                                                               // 1708\n\t\t\tviewportOffset = viewportEl.offset();                                                                               // 1709\n\t\t\tviewportTop = viewportOffset.top;                                                                                   // 1710\n\t\t\tviewportLeft = viewportOffset.left;                                                                                 // 1711\n\t\t}                                                                                                                    // 1712\n                                                                                                                       // 1713\n\t\t// if the window is scrolled, it causes the visible area to be further down                                          // 1714\n\t\tviewportTop += windowEl.scrollTop();                                                                                 // 1715\n\t\tviewportLeft += windowEl.scrollLeft();                                                                               // 1716\n                                                                                                                       // 1717\n\t\t// constrain to the view port. if constrained by two edges, give precedence to top/left                              // 1718\n\t\tif (options.viewportConstrain !== false) {                                                                           // 1719\n\t\t\ttop = Math.min(top, viewportTop + viewportEl.outerHeight() - height - this.margin);                                 // 1720\n\t\t\ttop = Math.max(top, viewportTop + this.margin);                                                                     // 1721\n\t\t\tleft = Math.min(left, viewportLeft + viewportEl.outerWidth() - width - this.margin);                                // 1722\n\t\t\tleft = Math.max(left, viewportLeft + this.margin);                                                                  // 1723\n\t\t}                                                                                                                    // 1724\n                                                                                                                       // 1725\n\t\tthis.el.css({                                                                                                        // 1726\n\t\t\ttop: top - origin.top,                                                                                              // 1727\n\t\t\tleft: left - origin.left                                                                                            // 1728\n\t\t});                                                                                                                  // 1729\n\t},                                                                                                                    // 1730\n                                                                                                                       // 1731\n                                                                                                                       // 1732\n\t// Triggers a callback. Calls a function in the option hash of the same name.                                         // 1733\n\t// Arguments beyond the first `name` are forwarded on.                                                                // 1734\n\t// TODO: better code reuse for this. Repeat code                                                                      // 1735\n\ttrigger: function(name) {                                                                                             // 1736\n\t\tif (this.options[name]) {                                                                                            // 1737\n\t\t\tthis.options[name].apply(this, Array.prototype.slice.call(arguments, 1));                                           // 1738\n\t\t}                                                                                                                    // 1739\n\t}                                                                                                                     // 1740\n                                                                                                                       // 1741\n});                                                                                                                    // 1742\n                                                                                                                       // 1743\n;;                                                                                                                     // 1744\n                                                                                                                       // 1745\n/* A \"coordinate map\" converts pixel coordinates into an associated cell, which has an associated date                 // 1746\n------------------------------------------------------------------------------------------------------------------------\nCommon interface:                                                                                                      // 1748\n                                                                                                                       // 1749\n\tCoordMap.prototype = {                                                                                                // 1750\n\t\tbuild: function() {},                                                                                                // 1751\n\t\tgetCell: function(x, y) {}                                                                                           // 1752\n\t};                                                                                                                    // 1753\n                                                                                                                       // 1754\n*/                                                                                                                     // 1755\n                                                                                                                       // 1756\n/* Coordinate map for a grid component                                                                                 // 1757\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 1759\nvar GridCoordMap = Class.extend({                                                                                      // 1760\n                                                                                                                       // 1761\n\tgrid: null, // reference to the Grid                                                                                  // 1762\n\trowCoords: null, // array of {top,bottom} objects                                                                     // 1763\n\tcolCoords: null, // array of {left,right} objects                                                                     // 1764\n                                                                                                                       // 1765\n\tcontainerEl: null, // container element that all coordinates are constrained to. optionally assigned                  // 1766\n\tbounds: null,                                                                                                         // 1767\n                                                                                                                       // 1768\n                                                                                                                       // 1769\n\tconstructor: function(grid) {                                                                                         // 1770\n\t\tthis.grid = grid;                                                                                                    // 1771\n\t},                                                                                                                    // 1772\n                                                                                                                       // 1773\n                                                                                                                       // 1774\n\t// Queries the grid for the coordinates of all the cells                                                              // 1775\n\tbuild: function() {                                                                                                   // 1776\n\t\tthis.rowCoords = this.grid.computeRowCoords();                                                                       // 1777\n\t\tthis.colCoords = this.grid.computeColCoords();                                                                       // 1778\n\t\tthis.computeBounds();                                                                                                // 1779\n\t},                                                                                                                    // 1780\n                                                                                                                       // 1781\n                                                                                                                       // 1782\n\t// Clears the coordinates data to free up memory                                                                      // 1783\n\tclear: function() {                                                                                                   // 1784\n\t\tthis.rowCoords = null;                                                                                               // 1785\n\t\tthis.colCoords = null;                                                                                               // 1786\n\t},                                                                                                                    // 1787\n                                                                                                                       // 1788\n                                                                                                                       // 1789\n\t// Given a coordinate of the document, gets the associated cell. If no cell is underneath, returns null               // 1790\n\tgetCell: function(x, y) {                                                                                             // 1791\n\t\tvar rowCoords = this.rowCoords;                                                                                      // 1792\n\t\tvar rowCnt = rowCoords.length;                                                                                       // 1793\n\t\tvar colCoords = this.colCoords;                                                                                      // 1794\n\t\tvar colCnt = colCoords.length;                                                                                       // 1795\n\t\tvar hitRow = null;                                                                                                   // 1796\n\t\tvar hitCol = null;                                                                                                   // 1797\n\t\tvar i, coords;                                                                                                       // 1798\n\t\tvar cell;                                                                                                            // 1799\n                                                                                                                       // 1800\n\t\tif (this.inBounds(x, y)) {                                                                                           // 1801\n                                                                                                                       // 1802\n\t\t\tfor (i = 0; i < rowCnt; i++) {                                                                                      // 1803\n\t\t\t\tcoords = rowCoords[i];                                                                                             // 1804\n\t\t\t\tif (y >= coords.top && y < coords.bottom) {                                                                        // 1805\n\t\t\t\t\thitRow = i;                                                                                                       // 1806\n\t\t\t\t\tbreak;                                                                                                            // 1807\n\t\t\t\t}                                                                                                                  // 1808\n\t\t\t}                                                                                                                   // 1809\n                                                                                                                       // 1810\n\t\t\tfor (i = 0; i < colCnt; i++) {                                                                                      // 1811\n\t\t\t\tcoords = colCoords[i];                                                                                             // 1812\n\t\t\t\tif (x >= coords.left && x < coords.right) {                                                                        // 1813\n\t\t\t\t\thitCol = i;                                                                                                       // 1814\n\t\t\t\t\tbreak;                                                                                                            // 1815\n\t\t\t\t}                                                                                                                  // 1816\n\t\t\t}                                                                                                                   // 1817\n                                                                                                                       // 1818\n\t\t\tif (hitRow !== null && hitCol !== null) {                                                                           // 1819\n                                                                                                                       // 1820\n\t\t\t\tcell = this.grid.getCell(hitRow, hitCol); // expected to return a fresh object we can modify                       // 1821\n\t\t\t\tcell.grid = this.grid; // for CellDragListener's isCellsEqual. dragging between grids                              // 1822\n                                                                                                                       // 1823\n\t\t\t\t// make the coordinates available on the cell object                                                               // 1824\n\t\t\t\t$.extend(cell, rowCoords[hitRow], colCoords[hitCol]);                                                              // 1825\n                                                                                                                       // 1826\n\t\t\t\treturn cell;                                                                                                       // 1827\n\t\t\t}                                                                                                                   // 1828\n\t\t}                                                                                                                    // 1829\n                                                                                                                       // 1830\n\t\treturn null;                                                                                                         // 1831\n\t},                                                                                                                    // 1832\n                                                                                                                       // 1833\n                                                                                                                       // 1834\n\t// If there is a containerEl, compute the bounds into min/max values                                                  // 1835\n\tcomputeBounds: function() {                                                                                           // 1836\n\t\tthis.bounds = this.containerEl ?                                                                                     // 1837\n\t\t\tgetClientRect(this.containerEl) : // area within scrollbars                                                         // 1838\n\t\t\tnull;                                                                                                               // 1839\n\t},                                                                                                                    // 1840\n                                                                                                                       // 1841\n                                                                                                                       // 1842\n\t// Determines if the given coordinates are in bounds. If no `containerEl`, always true                                // 1843\n\tinBounds: function(x, y) {                                                                                            // 1844\n\t\tvar bounds = this.bounds;                                                                                            // 1845\n                                                                                                                       // 1846\n\t\tif (bounds) {                                                                                                        // 1847\n\t\t\treturn x >= bounds.left && x < bounds.right && y >= bounds.top && y < bounds.bottom;                                // 1848\n\t\t}                                                                                                                    // 1849\n                                                                                                                       // 1850\n\t\treturn true;                                                                                                         // 1851\n\t}                                                                                                                     // 1852\n                                                                                                                       // 1853\n});                                                                                                                    // 1854\n                                                                                                                       // 1855\n                                                                                                                       // 1856\n/* Coordinate map that is a combination of multiple other coordinate maps                                              // 1857\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 1859\nvar ComboCoordMap = Class.extend({                                                                                     // 1860\n                                                                                                                       // 1861\n\tcoordMaps: null, // an array of CoordMaps                                                                             // 1862\n                                                                                                                       // 1863\n                                                                                                                       // 1864\n\tconstructor: function(coordMaps) {                                                                                    // 1865\n\t\tthis.coordMaps = coordMaps;                                                                                          // 1866\n\t},                                                                                                                    // 1867\n                                                                                                                       // 1868\n                                                                                                                       // 1869\n\t// Builds all coordMaps                                                                                               // 1870\n\tbuild: function() {                                                                                                   // 1871\n\t\tvar coordMaps = this.coordMaps;                                                                                      // 1872\n\t\tvar i;                                                                                                               // 1873\n                                                                                                                       // 1874\n\t\tfor (i = 0; i < coordMaps.length; i++) {                                                                             // 1875\n\t\t\tcoordMaps[i].build();                                                                                               // 1876\n\t\t}                                                                                                                    // 1877\n\t},                                                                                                                    // 1878\n                                                                                                                       // 1879\n                                                                                                                       // 1880\n\t// Queries all coordMaps for the cell underneath the given coordinates, returning the first result                    // 1881\n\tgetCell: function(x, y) {                                                                                             // 1882\n\t\tvar coordMaps = this.coordMaps;                                                                                      // 1883\n\t\tvar cell = null;                                                                                                     // 1884\n\t\tvar i;                                                                                                               // 1885\n                                                                                                                       // 1886\n\t\tfor (i = 0; i < coordMaps.length && !cell; i++) {                                                                    // 1887\n\t\t\tcell = coordMaps[i].getCell(x, y);                                                                                  // 1888\n\t\t}                                                                                                                    // 1889\n                                                                                                                       // 1890\n\t\treturn cell;                                                                                                         // 1891\n\t},                                                                                                                    // 1892\n                                                                                                                       // 1893\n                                                                                                                       // 1894\n\t// Clears all coordMaps                                                                                               // 1895\n\tclear: function() {                                                                                                   // 1896\n\t\tvar coordMaps = this.coordMaps;                                                                                      // 1897\n\t\tvar i;                                                                                                               // 1898\n                                                                                                                       // 1899\n\t\tfor (i = 0; i < coordMaps.length; i++) {                                                                             // 1900\n\t\t\tcoordMaps[i].clear();                                                                                               // 1901\n\t\t}                                                                                                                    // 1902\n\t}                                                                                                                     // 1903\n                                                                                                                       // 1904\n});                                                                                                                    // 1905\n                                                                                                                       // 1906\n;;                                                                                                                     // 1907\n                                                                                                                       // 1908\n/* Tracks a drag's mouse movement, firing various handlers                                                             // 1909\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 1911\nvar DragListener = fc.DragListener = Class.extend({                                                                    // 1912\n                                                                                                                       // 1913\n\toptions: null,                                                                                                        // 1914\n                                                                                                                       // 1915\n\tisListening: false,                                                                                                   // 1916\n\tisDragging: false,                                                                                                    // 1917\n                                                                                                                       // 1918\n\t// coordinates of the initial mousedown                                                                               // 1919\n\toriginX: null,                                                                                                        // 1920\n\toriginY: null,                                                                                                        // 1921\n                                                                                                                       // 1922\n\t// handler attached to the document, bound to the DragListener's `this`                                               // 1923\n\tmousemoveProxy: null,                                                                                                 // 1924\n\tmouseupProxy: null,                                                                                                   // 1925\n                                                                                                                       // 1926\n\t// for IE8 bug-fighting behavior, for now                                                                             // 1927\n\tsubjectEl: null, // the element being draged. optional                                                                // 1928\n\tsubjectHref: null,                                                                                                    // 1929\n                                                                                                                       // 1930\n\tscrollEl: null,                                                                                                       // 1931\n\tscrollBounds: null, // { top, bottom, left, right }                                                                   // 1932\n\tscrollTopVel: null, // pixels per second                                                                              // 1933\n\tscrollLeftVel: null, // pixels per second                                                                             // 1934\n\tscrollIntervalId: null, // ID of setTimeout for scrolling animation loop                                              // 1935\n\tscrollHandlerProxy: null, // this-scoped function for handling when scrollEl is scrolled                              // 1936\n                                                                                                                       // 1937\n\tscrollSensitivity: 30, // pixels from edge for scrolling to start                                                     // 1938\n\tscrollSpeed: 200, // pixels per second, at maximum speed                                                              // 1939\n\tscrollIntervalMs: 50, // millisecond wait between scroll increment                                                    // 1940\n                                                                                                                       // 1941\n                                                                                                                       // 1942\n\tconstructor: function(options) {                                                                                      // 1943\n\t\toptions = options || {};                                                                                             // 1944\n\t\tthis.options = options;                                                                                              // 1945\n\t\tthis.subjectEl = options.subjectEl;                                                                                  // 1946\n\t},                                                                                                                    // 1947\n                                                                                                                       // 1948\n                                                                                                                       // 1949\n\t// Call this when the user does a mousedown. Will probably lead to startListening                                     // 1950\n\tmousedown: function(ev) {                                                                                             // 1951\n\t\tif (isPrimaryMouseButton(ev)) {                                                                                      // 1952\n                                                                                                                       // 1953\n\t\t\tev.preventDefault(); // prevents native selection in most browsers                                                  // 1954\n                                                                                                                       // 1955\n\t\t\tthis.startListening(ev);                                                                                            // 1956\n                                                                                                                       // 1957\n\t\t\t// start the drag immediately if there is no minimum distance for a drag start                                      // 1958\n\t\t\tif (!this.options.distance) {                                                                                       // 1959\n\t\t\t\tthis.startDrag(ev);                                                                                                // 1960\n\t\t\t}                                                                                                                   // 1961\n\t\t}                                                                                                                    // 1962\n\t},                                                                                                                    // 1963\n                                                                                                                       // 1964\n                                                                                                                       // 1965\n\t// Call this to start tracking mouse movements                                                                        // 1966\n\tstartListening: function(ev) {                                                                                        // 1967\n\t\tvar scrollParent;                                                                                                    // 1968\n                                                                                                                       // 1969\n\t\tif (!this.isListening) {                                                                                             // 1970\n                                                                                                                       // 1971\n\t\t\t// grab scroll container and attach handler                                                                         // 1972\n\t\t\tif (ev && this.options.scroll) {                                                                                    // 1973\n\t\t\t\tscrollParent = getScrollParent($(ev.target));                                                                      // 1974\n\t\t\t\tif (!scrollParent.is(window) && !scrollParent.is(document)) {                                                      // 1975\n\t\t\t\t\tthis.scrollEl = scrollParent;                                                                                     // 1976\n                                                                                                                       // 1977\n\t\t\t\t\t// scope to `this`, and use `debounce` to make sure rapid calls don't happen                                      // 1978\n\t\t\t\t\tthis.scrollHandlerProxy = debounce(proxy(this, 'scrollHandler'), 100);                                            // 1979\n\t\t\t\t\tthis.scrollEl.on('scroll', this.scrollHandlerProxy);                                                              // 1980\n\t\t\t\t}                                                                                                                  // 1981\n\t\t\t}                                                                                                                   // 1982\n                                                                                                                       // 1983\n\t\t\t$(document)                                                                                                         // 1984\n\t\t\t\t.on('mousemove', this.mousemoveProxy = proxy(this, 'mousemove'))                                                   // 1985\n\t\t\t\t.on('mouseup', this.mouseupProxy = proxy(this, 'mouseup'))                                                         // 1986\n\t\t\t\t.on('selectstart', this.preventDefault); // prevents native selection in IE<=8                                     // 1987\n                                                                                                                       // 1988\n\t\t\tif (ev) {                                                                                                           // 1989\n\t\t\t\tthis.originX = ev.pageX;                                                                                           // 1990\n\t\t\t\tthis.originY = ev.pageY;                                                                                           // 1991\n\t\t\t}                                                                                                                   // 1992\n\t\t\telse {                                                                                                              // 1993\n\t\t\t\t// if no starting information was given, origin will be the topleft corner of the screen.                          // 1994\n\t\t\t\t// if so, dx/dy in the future will be the absolute coordinates.                                                    // 1995\n\t\t\t\tthis.originX = 0;                                                                                                  // 1996\n\t\t\t\tthis.originY = 0;                                                                                                  // 1997\n\t\t\t}                                                                                                                   // 1998\n                                                                                                                       // 1999\n\t\t\tthis.isListening = true;                                                                                            // 2000\n\t\t\tthis.listenStart(ev);                                                                                               // 2001\n\t\t}                                                                                                                    // 2002\n\t},                                                                                                                    // 2003\n                                                                                                                       // 2004\n                                                                                                                       // 2005\n\t// Called when drag listening has started (but a real drag has not necessarily began)                                 // 2006\n\tlistenStart: function(ev) {                                                                                           // 2007\n\t\tthis.trigger('listenStart', ev);                                                                                     // 2008\n\t},                                                                                                                    // 2009\n                                                                                                                       // 2010\n                                                                                                                       // 2011\n\t// Called when the user moves the mouse                                                                               // 2012\n\tmousemove: function(ev) {                                                                                             // 2013\n\t\tvar dx = ev.pageX - this.originX;                                                                                    // 2014\n\t\tvar dy = ev.pageY - this.originY;                                                                                    // 2015\n\t\tvar minDistance;                                                                                                     // 2016\n\t\tvar distanceSq; // current distance from the origin, squared                                                         // 2017\n                                                                                                                       // 2018\n\t\tif (!this.isDragging) { // if not already dragging...                                                                // 2019\n\t\t\t// then start the drag if the minimum distance criteria is met                                                      // 2020\n\t\t\tminDistance = this.options.distance || 1;                                                                           // 2021\n\t\t\tdistanceSq = dx * dx + dy * dy;                                                                                     // 2022\n\t\t\tif (distanceSq >= minDistance * minDistance) { // use pythagorean theorem                                           // 2023\n\t\t\t\tthis.startDrag(ev);                                                                                                // 2024\n\t\t\t}                                                                                                                   // 2025\n\t\t}                                                                                                                    // 2026\n                                                                                                                       // 2027\n\t\tif (this.isDragging) {                                                                                               // 2028\n\t\t\tthis.drag(dx, dy, ev); // report a drag, even if this mousemove initiated the drag                                  // 2029\n\t\t}                                                                                                                    // 2030\n\t},                                                                                                                    // 2031\n                                                                                                                       // 2032\n                                                                                                                       // 2033\n\t// Call this to initiate a legitimate drag.                                                                           // 2034\n\t// This function is called internally from this class, but can also be called explicitly from outside                 // 2035\n\tstartDrag: function(ev) {                                                                                             // 2036\n                                                                                                                       // 2037\n\t\tif (!this.isListening) { // startDrag must have manually initiated                                                   // 2038\n\t\t\tthis.startListening();                                                                                              // 2039\n\t\t}                                                                                                                    // 2040\n                                                                                                                       // 2041\n\t\tif (!this.isDragging) {                                                                                              // 2042\n\t\t\tthis.isDragging = true;                                                                                             // 2043\n\t\t\tthis.dragStart(ev);                                                                                                 // 2044\n\t\t}                                                                                                                    // 2045\n\t},                                                                                                                    // 2046\n                                                                                                                       // 2047\n                                                                                                                       // 2048\n\t// Called when the actual drag has started (went beyond minDistance)                                                  // 2049\n\tdragStart: function(ev) {                                                                                             // 2050\n\t\tvar subjectEl = this.subjectEl;                                                                                      // 2051\n                                                                                                                       // 2052\n\t\tthis.trigger('dragStart', ev);                                                                                       // 2053\n                                                                                                                       // 2054\n\t\t// remove a mousedown'd <a>'s href so it is not visited (IE8 bug)                                                    // 2055\n\t\tif ((this.subjectHref = subjectEl ? subjectEl.attr('href') : null)) {                                                // 2056\n\t\t\tsubjectEl.removeAttr('href');                                                                                       // 2057\n\t\t}                                                                                                                    // 2058\n\t},                                                                                                                    // 2059\n                                                                                                                       // 2060\n                                                                                                                       // 2061\n\t// Called while the mouse is being moved and when we know a legitimate drag is taking place                           // 2062\n\tdrag: function(dx, dy, ev) {                                                                                          // 2063\n\t\tthis.trigger('drag', dx, dy, ev);                                                                                    // 2064\n\t\tthis.updateScroll(ev); // will possibly cause scrolling                                                              // 2065\n\t},                                                                                                                    // 2066\n                                                                                                                       // 2067\n                                                                                                                       // 2068\n\t// Called when the user does a mouseup                                                                                // 2069\n\tmouseup: function(ev) {                                                                                               // 2070\n\t\tthis.stopListening(ev);                                                                                              // 2071\n\t},                                                                                                                    // 2072\n                                                                                                                       // 2073\n                                                                                                                       // 2074\n\t// Called when the drag is over. Will not cause listening to stop however.                                            // 2075\n\t// A concluding 'cellOut' event will NOT be triggered.                                                                // 2076\n\tstopDrag: function(ev) {                                                                                              // 2077\n\t\tif (this.isDragging) {                                                                                               // 2078\n\t\t\tthis.stopScrolling();                                                                                               // 2079\n\t\t\tthis.dragStop(ev);                                                                                                  // 2080\n\t\t\tthis.isDragging = false;                                                                                            // 2081\n\t\t}                                                                                                                    // 2082\n\t},                                                                                                                    // 2083\n                                                                                                                       // 2084\n                                                                                                                       // 2085\n\t// Called when dragging has been stopped                                                                              // 2086\n\tdragStop: function(ev) {                                                                                              // 2087\n\t\tvar _this = this;                                                                                                    // 2088\n                                                                                                                       // 2089\n\t\tthis.trigger('dragStop', ev);                                                                                        // 2090\n                                                                                                                       // 2091\n\t\t// restore a mousedown'd <a>'s href (for IE8 bug)                                                                    // 2092\n\t\tsetTimeout(function() { // must be outside of the click's execution                                                  // 2093\n\t\t\tif (_this.subjectHref) {                                                                                            // 2094\n\t\t\t\t_this.subjectEl.attr('href', _this.subjectHref);                                                                   // 2095\n\t\t\t}                                                                                                                   // 2096\n\t\t}, 0);                                                                                                               // 2097\n\t},                                                                                                                    // 2098\n                                                                                                                       // 2099\n                                                                                                                       // 2100\n\t// Call this to stop listening to the user's mouse events                                                             // 2101\n\tstopListening: function(ev) {                                                                                         // 2102\n\t\tthis.stopDrag(ev); // if there's a current drag, kill it                                                             // 2103\n                                                                                                                       // 2104\n\t\tif (this.isListening) {                                                                                              // 2105\n                                                                                                                       // 2106\n\t\t\t// remove the scroll handler if there is a scrollEl                                                                 // 2107\n\t\t\tif (this.scrollEl) {                                                                                                // 2108\n\t\t\t\tthis.scrollEl.off('scroll', this.scrollHandlerProxy);                                                              // 2109\n\t\t\t\tthis.scrollHandlerProxy = null;                                                                                    // 2110\n\t\t\t}                                                                                                                   // 2111\n                                                                                                                       // 2112\n\t\t\t$(document)                                                                                                         // 2113\n\t\t\t\t.off('mousemove', this.mousemoveProxy)                                                                             // 2114\n\t\t\t\t.off('mouseup', this.mouseupProxy)                                                                                 // 2115\n\t\t\t\t.off('selectstart', this.preventDefault);                                                                          // 2116\n                                                                                                                       // 2117\n\t\t\tthis.mousemoveProxy = null;                                                                                         // 2118\n\t\t\tthis.mouseupProxy = null;                                                                                           // 2119\n                                                                                                                       // 2120\n\t\t\tthis.isListening = false;                                                                                           // 2121\n\t\t\tthis.listenStop(ev);                                                                                                // 2122\n\t\t}                                                                                                                    // 2123\n\t},                                                                                                                    // 2124\n                                                                                                                       // 2125\n                                                                                                                       // 2126\n\t// Called when drag listening has stopped                                                                             // 2127\n\tlistenStop: function(ev) {                                                                                            // 2128\n\t\tthis.trigger('listenStop', ev);                                                                                      // 2129\n\t},                                                                                                                    // 2130\n                                                                                                                       // 2131\n                                                                                                                       // 2132\n\t// Triggers a callback. Calls a function in the option hash of the same name.                                         // 2133\n\t// Arguments beyond the first `name` are forwarded on.                                                                // 2134\n\ttrigger: function(name) {                                                                                             // 2135\n\t\tif (this.options[name]) {                                                                                            // 2136\n\t\t\tthis.options[name].apply(this, Array.prototype.slice.call(arguments, 1));                                           // 2137\n\t\t}                                                                                                                    // 2138\n\t},                                                                                                                    // 2139\n                                                                                                                       // 2140\n                                                                                                                       // 2141\n\t// Stops a given mouse event from doing it's native browser action. In our case, text selection.                      // 2142\n\tpreventDefault: function(ev) {                                                                                        // 2143\n\t\tev.preventDefault();                                                                                                 // 2144\n\t},                                                                                                                    // 2145\n                                                                                                                       // 2146\n                                                                                                                       // 2147\n\t/* Scrolling                                                                                                          // 2148\n\t------------------------------------------------------------------------------------------------------------------*/  // 2149\n                                                                                                                       // 2150\n                                                                                                                       // 2151\n\t// Computes and stores the bounding rectangle of scrollEl                                                             // 2152\n\tcomputeScrollBounds: function() {                                                                                     // 2153\n\t\tvar el = this.scrollEl;                                                                                              // 2154\n                                                                                                                       // 2155\n\t\tthis.scrollBounds = el ? getOuterRect(el) : null;                                                                    // 2156\n\t\t\t// TODO: use getClientRect in future. but prevents auto scrolling when on top of scrollbars                         // 2157\n\t},                                                                                                                    // 2158\n                                                                                                                       // 2159\n                                                                                                                       // 2160\n\t// Called when the dragging is in progress and scrolling should be updated                                            // 2161\n\tupdateScroll: function(ev) {                                                                                          // 2162\n\t\tvar sensitivity = this.scrollSensitivity;                                                                            // 2163\n\t\tvar bounds = this.scrollBounds;                                                                                      // 2164\n\t\tvar topCloseness, bottomCloseness;                                                                                   // 2165\n\t\tvar leftCloseness, rightCloseness;                                                                                   // 2166\n\t\tvar topVel = 0;                                                                                                      // 2167\n\t\tvar leftVel = 0;                                                                                                     // 2168\n                                                                                                                       // 2169\n\t\tif (bounds) { // only scroll if scrollEl exists                                                                      // 2170\n                                                                                                                       // 2171\n\t\t\t// compute closeness to edges. valid range is from 0.0 - 1.0                                                        // 2172\n\t\t\ttopCloseness = (sensitivity - (ev.pageY - bounds.top)) / sensitivity;                                               // 2173\n\t\t\tbottomCloseness = (sensitivity - (bounds.bottom - ev.pageY)) / sensitivity;                                         // 2174\n\t\t\tleftCloseness = (sensitivity - (ev.pageX - bounds.left)) / sensitivity;                                             // 2175\n\t\t\trightCloseness = (sensitivity - (bounds.right - ev.pageX)) / sensitivity;                                           // 2176\n                                                                                                                       // 2177\n\t\t\t// translate vertical closeness into velocity.                                                                      // 2178\n\t\t\t// mouse must be completely in bounds for velocity to happen.                                                       // 2179\n\t\t\tif (topCloseness >= 0 && topCloseness <= 1) {                                                                       // 2180\n\t\t\t\ttopVel = topCloseness * this.scrollSpeed * -1; // negative. for scrolling up                                       // 2181\n\t\t\t}                                                                                                                   // 2182\n\t\t\telse if (bottomCloseness >= 0 && bottomCloseness <= 1) {                                                            // 2183\n\t\t\t\ttopVel = bottomCloseness * this.scrollSpeed;                                                                       // 2184\n\t\t\t}                                                                                                                   // 2185\n                                                                                                                       // 2186\n\t\t\t// translate horizontal closeness into velocity                                                                     // 2187\n\t\t\tif (leftCloseness >= 0 && leftCloseness <= 1) {                                                                     // 2188\n\t\t\t\tleftVel = leftCloseness * this.scrollSpeed * -1; // negative. for scrolling left                                   // 2189\n\t\t\t}                                                                                                                   // 2190\n\t\t\telse if (rightCloseness >= 0 && rightCloseness <= 1) {                                                              // 2191\n\t\t\t\tleftVel = rightCloseness * this.scrollSpeed;                                                                       // 2192\n\t\t\t}                                                                                                                   // 2193\n\t\t}                                                                                                                    // 2194\n                                                                                                                       // 2195\n\t\tthis.setScrollVel(topVel, leftVel);                                                                                  // 2196\n\t},                                                                                                                    // 2197\n                                                                                                                       // 2198\n                                                                                                                       // 2199\n\t// Sets the speed-of-scrolling for the scrollEl                                                                       // 2200\n\tsetScrollVel: function(topVel, leftVel) {                                                                             // 2201\n                                                                                                                       // 2202\n\t\tthis.scrollTopVel = topVel;                                                                                          // 2203\n\t\tthis.scrollLeftVel = leftVel;                                                                                        // 2204\n                                                                                                                       // 2205\n\t\tthis.constrainScrollVel(); // massages into realistic values                                                         // 2206\n                                                                                                                       // 2207\n\t\t// if there is non-zero velocity, and an animation loop hasn't already started, then START                           // 2208\n\t\tif ((this.scrollTopVel || this.scrollLeftVel) && !this.scrollIntervalId) {                                           // 2209\n\t\t\tthis.scrollIntervalId = setInterval(                                                                                // 2210\n\t\t\t\tproxy(this, 'scrollIntervalFunc'), // scope to `this`                                                              // 2211\n\t\t\t\tthis.scrollIntervalMs                                                                                              // 2212\n\t\t\t);                                                                                                                  // 2213\n\t\t}                                                                                                                    // 2214\n\t},                                                                                                                    // 2215\n                                                                                                                       // 2216\n                                                                                                                       // 2217\n\t// Forces scrollTopVel and scrollLeftVel to be zero if scrolling has already gone all the way                         // 2218\n\tconstrainScrollVel: function() {                                                                                      // 2219\n\t\tvar el = this.scrollEl;                                                                                              // 2220\n                                                                                                                       // 2221\n\t\tif (this.scrollTopVel < 0) { // scrolling up?                                                                        // 2222\n\t\t\tif (el.scrollTop() <= 0) { // already scrolled all the way up?                                                      // 2223\n\t\t\t\tthis.scrollTopVel = 0;                                                                                             // 2224\n\t\t\t}                                                                                                                   // 2225\n\t\t}                                                                                                                    // 2226\n\t\telse if (this.scrollTopVel > 0) { // scrolling down?                                                                 // 2227\n\t\t\tif (el.scrollTop() + el[0].clientHeight >= el[0].scrollHeight) { // already scrolled all the way down?              // 2228\n\t\t\t\tthis.scrollTopVel = 0;                                                                                             // 2229\n\t\t\t}                                                                                                                   // 2230\n\t\t}                                                                                                                    // 2231\n                                                                                                                       // 2232\n\t\tif (this.scrollLeftVel < 0) { // scrolling left?                                                                     // 2233\n\t\t\tif (el.scrollLeft() <= 0) { // already scrolled all the left?                                                       // 2234\n\t\t\t\tthis.scrollLeftVel = 0;                                                                                            // 2235\n\t\t\t}                                                                                                                   // 2236\n\t\t}                                                                                                                    // 2237\n\t\telse if (this.scrollLeftVel > 0) { // scrolling right?                                                               // 2238\n\t\t\tif (el.scrollLeft() + el[0].clientWidth >= el[0].scrollWidth) { // already scrolled all the way right?              // 2239\n\t\t\t\tthis.scrollLeftVel = 0;                                                                                            // 2240\n\t\t\t}                                                                                                                   // 2241\n\t\t}                                                                                                                    // 2242\n\t},                                                                                                                    // 2243\n                                                                                                                       // 2244\n                                                                                                                       // 2245\n\t// This function gets called during every iteration of the scrolling animation loop                                   // 2246\n\tscrollIntervalFunc: function() {                                                                                      // 2247\n\t\tvar el = this.scrollEl;                                                                                              // 2248\n\t\tvar frac = this.scrollIntervalMs / 1000; // considering animation frequency, what the vel should be mult'd by        // 2249\n                                                                                                                       // 2250\n\t\t// change the value of scrollEl's scroll                                                                             // 2251\n\t\tif (this.scrollTopVel) {                                                                                             // 2252\n\t\t\tel.scrollTop(el.scrollTop() + this.scrollTopVel * frac);                                                            // 2253\n\t\t}                                                                                                                    // 2254\n\t\tif (this.scrollLeftVel) {                                                                                            // 2255\n\t\t\tel.scrollLeft(el.scrollLeft() + this.scrollLeftVel * frac);                                                         // 2256\n\t\t}                                                                                                                    // 2257\n                                                                                                                       // 2258\n\t\tthis.constrainScrollVel(); // since the scroll values changed, recompute the velocities                              // 2259\n                                                                                                                       // 2260\n\t\t// if scrolled all the way, which causes the vels to be zero, stop the animation loop                                // 2261\n\t\tif (!this.scrollTopVel && !this.scrollLeftVel) {                                                                     // 2262\n\t\t\tthis.stopScrolling();                                                                                               // 2263\n\t\t}                                                                                                                    // 2264\n\t},                                                                                                                    // 2265\n                                                                                                                       // 2266\n                                                                                                                       // 2267\n\t// Kills any existing scrolling animation loop                                                                        // 2268\n\tstopScrolling: function() {                                                                                           // 2269\n\t\tif (this.scrollIntervalId) {                                                                                         // 2270\n\t\t\tclearInterval(this.scrollIntervalId);                                                                               // 2271\n\t\t\tthis.scrollIntervalId = null;                                                                                       // 2272\n                                                                                                                       // 2273\n\t\t\t// when all done with scrolling, recompute positions since they probably changed                                    // 2274\n\t\t\tthis.scrollStop();                                                                                                  // 2275\n\t\t}                                                                                                                    // 2276\n\t},                                                                                                                    // 2277\n                                                                                                                       // 2278\n                                                                                                                       // 2279\n\t// Get called when the scrollEl is scrolled (NOTE: this is delayed via debounce)                                      // 2280\n\tscrollHandler: function() {                                                                                           // 2281\n\t\t// recompute all coordinates, but *only* if this is *not* part of our scrolling animation                            // 2282\n\t\tif (!this.scrollIntervalId) {                                                                                        // 2283\n\t\t\tthis.scrollStop();                                                                                                  // 2284\n\t\t}                                                                                                                    // 2285\n\t},                                                                                                                    // 2286\n                                                                                                                       // 2287\n                                                                                                                       // 2288\n\t// Called when scrolling has stopped, whether through auto scroll, or the user scrolling                              // 2289\n\tscrollStop: function() {                                                                                              // 2290\n\t}                                                                                                                     // 2291\n                                                                                                                       // 2292\n});                                                                                                                    // 2293\n                                                                                                                       // 2294\n;;                                                                                                                     // 2295\n                                                                                                                       // 2296\n/* Tracks mouse movements over a CoordMap and raises events about which cell the mouse is over.                        // 2297\n------------------------------------------------------------------------------------------------------------------------\noptions:                                                                                                               // 2299\n- subjectEl                                                                                                            // 2300\n- subjectCenter                                                                                                        // 2301\n*/                                                                                                                     // 2302\n                                                                                                                       // 2303\nvar CellDragListener = DragListener.extend({                                                                           // 2304\n                                                                                                                       // 2305\n\tcoordMap: null, // converts coordinates to date cells                                                                 // 2306\n\torigCell: null, // the cell the mouse was over when listening started                                                 // 2307\n\tcell: null, // the cell the mouse is over                                                                             // 2308\n\tcoordAdjust: null, // delta that will be added to the mouse coordinates when computing collisions                     // 2309\n                                                                                                                       // 2310\n                                                                                                                       // 2311\n\tconstructor: function(coordMap, options) {                                                                            // 2312\n\t\tDragListener.prototype.constructor.call(this, options); // call the super-constructor                                // 2313\n                                                                                                                       // 2314\n\t\tthis.coordMap = coordMap;                                                                                            // 2315\n\t},                                                                                                                    // 2316\n                                                                                                                       // 2317\n                                                                                                                       // 2318\n\t// Called when drag listening starts (but a real drag has not necessarily began).                                     // 2319\n\t// ev might be undefined if dragging was started manually.                                                            // 2320\n\tlistenStart: function(ev) {                                                                                           // 2321\n\t\tvar subjectEl = this.subjectEl;                                                                                      // 2322\n\t\tvar subjectRect;                                                                                                     // 2323\n\t\tvar origPoint;                                                                                                       // 2324\n\t\tvar point;                                                                                                           // 2325\n                                                                                                                       // 2326\n\t\tDragListener.prototype.listenStart.apply(this, arguments); // call the super-method                                  // 2327\n                                                                                                                       // 2328\n\t\tthis.computeCoords();                                                                                                // 2329\n                                                                                                                       // 2330\n\t\tif (ev) {                                                                                                            // 2331\n\t\t\torigPoint = { left: ev.pageX, top: ev.pageY };                                                                      // 2332\n\t\t\tpoint = origPoint;                                                                                                  // 2333\n                                                                                                                       // 2334\n\t\t\t// constrain the point to bounds of the element being dragged                                                       // 2335\n\t\t\tif (subjectEl) {                                                                                                    // 2336\n\t\t\t\tsubjectRect = getOuterRect(subjectEl); // used for centering as well                                               // 2337\n\t\t\t\tpoint = constrainPoint(point, subjectRect);                                                                        // 2338\n\t\t\t}                                                                                                                   // 2339\n                                                                                                                       // 2340\n\t\t\tthis.origCell = this.getCell(point.left, point.top);                                                                // 2341\n                                                                                                                       // 2342\n\t\t\t// treat the center of the subject as the collision point?                                                          // 2343\n\t\t\tif (subjectEl && this.options.subjectCenter) {                                                                      // 2344\n                                                                                                                       // 2345\n\t\t\t\t// only consider the area the subject overlaps the cell. best for large subjects                                   // 2346\n\t\t\t\tif (this.origCell) {                                                                                               // 2347\n\t\t\t\t\tsubjectRect = intersectRects(this.origCell, subjectRect) ||                                                       // 2348\n\t\t\t\t\t\tsubjectRect; // in case there is no intersection                                                                 // 2349\n\t\t\t\t}                                                                                                                  // 2350\n                                                                                                                       // 2351\n\t\t\t\tpoint = getRectCenter(subjectRect);                                                                                // 2352\n\t\t\t}                                                                                                                   // 2353\n                                                                                                                       // 2354\n\t\t\tthis.coordAdjust = diffPoints(point, origPoint); // point - origPoint                                               // 2355\n\t\t}                                                                                                                    // 2356\n\t\telse {                                                                                                               // 2357\n\t\t\tthis.origCell = null;                                                                                               // 2358\n\t\t\tthis.coordAdjust = null;                                                                                            // 2359\n\t\t}                                                                                                                    // 2360\n\t},                                                                                                                    // 2361\n                                                                                                                       // 2362\n                                                                                                                       // 2363\n\t// Recomputes the drag-critical positions of elements                                                                 // 2364\n\tcomputeCoords: function() {                                                                                           // 2365\n\t\tthis.coordMap.build();                                                                                               // 2366\n\t\tthis.computeScrollBounds();                                                                                          // 2367\n\t},                                                                                                                    // 2368\n                                                                                                                       // 2369\n                                                                                                                       // 2370\n\t// Called when the actual drag has started                                                                            // 2371\n\tdragStart: function(ev) {                                                                                             // 2372\n\t\tvar cell;                                                                                                            // 2373\n                                                                                                                       // 2374\n\t\tDragListener.prototype.dragStart.apply(this, arguments); // call the super-method                                    // 2375\n                                                                                                                       // 2376\n\t\tcell = this.getCell(ev.pageX, ev.pageY); // might be different from this.origCell if the min-distance is large       // 2377\n                                                                                                                       // 2378\n\t\t// report the initial cell the mouse is over                                                                         // 2379\n\t\t// especially important if no min-distance and drag starts immediately                                               // 2380\n\t\tif (cell) {                                                                                                          // 2381\n\t\t\tthis.cellOver(cell);                                                                                                // 2382\n\t\t}                                                                                                                    // 2383\n\t},                                                                                                                    // 2384\n                                                                                                                       // 2385\n                                                                                                                       // 2386\n\t// Called when the drag moves                                                                                         // 2387\n\tdrag: function(dx, dy, ev) {                                                                                          // 2388\n\t\tvar cell;                                                                                                            // 2389\n                                                                                                                       // 2390\n\t\tDragListener.prototype.drag.apply(this, arguments); // call the super-method                                         // 2391\n                                                                                                                       // 2392\n\t\tcell = this.getCell(ev.pageX, ev.pageY);                                                                             // 2393\n                                                                                                                       // 2394\n\t\tif (!isCellsEqual(cell, this.cell)) { // a different cell than before?                                               // 2395\n\t\t\tif (this.cell) {                                                                                                    // 2396\n\t\t\t\tthis.cellOut();                                                                                                    // 2397\n\t\t\t}                                                                                                                   // 2398\n\t\t\tif (cell) {                                                                                                         // 2399\n\t\t\t\tthis.cellOver(cell);                                                                                               // 2400\n\t\t\t}                                                                                                                   // 2401\n\t\t}                                                                                                                    // 2402\n\t},                                                                                                                    // 2403\n                                                                                                                       // 2404\n                                                                                                                       // 2405\n\t// Called when dragging has been stopped                                                                              // 2406\n\tdragStop: function() {                                                                                                // 2407\n\t\tthis.cellDone();                                                                                                     // 2408\n\t\tDragListener.prototype.dragStop.apply(this, arguments); // call the super-method                                     // 2409\n\t},                                                                                                                    // 2410\n                                                                                                                       // 2411\n                                                                                                                       // 2412\n\t// Called when a the mouse has just moved over a new cell                                                             // 2413\n\tcellOver: function(cell) {                                                                                            // 2414\n\t\tthis.cell = cell;                                                                                                    // 2415\n\t\tthis.trigger('cellOver', cell, isCellsEqual(cell, this.origCell), this.origCell);                                    // 2416\n\t},                                                                                                                    // 2417\n                                                                                                                       // 2418\n                                                                                                                       // 2419\n\t// Called when the mouse has just moved out of a cell                                                                 // 2420\n\tcellOut: function() {                                                                                                 // 2421\n\t\tif (this.cell) {                                                                                                     // 2422\n\t\t\tthis.trigger('cellOut', this.cell);                                                                                 // 2423\n\t\t\tthis.cellDone();                                                                                                    // 2424\n\t\t\tthis.cell = null;                                                                                                   // 2425\n\t\t}                                                                                                                    // 2426\n\t},                                                                                                                    // 2427\n                                                                                                                       // 2428\n                                                                                                                       // 2429\n\t// Called after a cellOut. Also called before a dragStop                                                              // 2430\n\tcellDone: function() {                                                                                                // 2431\n\t\tif (this.cell) {                                                                                                     // 2432\n\t\t\tthis.trigger('cellDone', this.cell);                                                                                // 2433\n\t\t}                                                                                                                    // 2434\n\t},                                                                                                                    // 2435\n                                                                                                                       // 2436\n                                                                                                                       // 2437\n\t// Called when drag listening has stopped                                                                             // 2438\n\tlistenStop: function() {                                                                                              // 2439\n\t\tDragListener.prototype.listenStop.apply(this, arguments); // call the super-method                                   // 2440\n                                                                                                                       // 2441\n\t\tthis.origCell = this.cell = null;                                                                                    // 2442\n\t\tthis.coordMap.clear();                                                                                               // 2443\n\t},                                                                                                                    // 2444\n                                                                                                                       // 2445\n                                                                                                                       // 2446\n\t// Called when scrolling has stopped, whether through auto scroll, or the user scrolling                              // 2447\n\tscrollStop: function() {                                                                                              // 2448\n\t\tDragListener.prototype.scrollStop.apply(this, arguments); // call the super-method                                   // 2449\n                                                                                                                       // 2450\n\t\tthis.computeCoords(); // cells' absolute positions will be in new places. recompute                                  // 2451\n\t},                                                                                                                    // 2452\n                                                                                                                       // 2453\n                                                                                                                       // 2454\n\t// Gets the cell underneath the coordinates for the given mouse event                                                 // 2455\n\tgetCell: function(left, top) {                                                                                        // 2456\n                                                                                                                       // 2457\n\t\tif (this.coordAdjust) {                                                                                              // 2458\n\t\t\tleft += this.coordAdjust.left;                                                                                      // 2459\n\t\t\ttop += this.coordAdjust.top;                                                                                        // 2460\n\t\t}                                                                                                                    // 2461\n                                                                                                                       // 2462\n\t\treturn this.coordMap.getCell(left, top);                                                                             // 2463\n\t}                                                                                                                     // 2464\n                                                                                                                       // 2465\n});                                                                                                                    // 2466\n                                                                                                                       // 2467\n                                                                                                                       // 2468\n// Returns `true` if the cells are identically equal. `false` otherwise.                                               // 2469\n// They must have the same row, col, and be from the same grid.                                                        // 2470\n// Two null values will be considered equal, as two \"out of the grid\" states are the same.                             // 2471\nfunction isCellsEqual(cell1, cell2) {                                                                                  // 2472\n                                                                                                                       // 2473\n\tif (!cell1 && !cell2) {                                                                                               // 2474\n\t\treturn true;                                                                                                         // 2475\n\t}                                                                                                                     // 2476\n                                                                                                                       // 2477\n\tif (cell1 && cell2) {                                                                                                 // 2478\n\t\treturn cell1.grid === cell2.grid &&                                                                                  // 2479\n\t\t\tcell1.row === cell2.row &&                                                                                          // 2480\n\t\t\tcell1.col === cell2.col;                                                                                            // 2481\n\t}                                                                                                                     // 2482\n                                                                                                                       // 2483\n\treturn false;                                                                                                         // 2484\n}                                                                                                                      // 2485\n                                                                                                                       // 2486\n;;                                                                                                                     // 2487\n                                                                                                                       // 2488\n/* Creates a clone of an element and lets it track the mouse as it moves                                               // 2489\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 2491\nvar MouseFollower = Class.extend({                                                                                     // 2492\n                                                                                                                       // 2493\n\toptions: null,                                                                                                        // 2494\n                                                                                                                       // 2495\n\tsourceEl: null, // the element that will be cloned and made to look like it is dragging                               // 2496\n\tel: null, // the clone of `sourceEl` that will track the mouse                                                        // 2497\n\tparentEl: null, // the element that `el` (the clone) will be attached to                                              // 2498\n                                                                                                                       // 2499\n\t// the initial position of el, relative to the offset parent. made to match the initial offset of sourceEl            // 2500\n\ttop0: null,                                                                                                           // 2501\n\tleft0: null,                                                                                                          // 2502\n                                                                                                                       // 2503\n\t// the initial position of the mouse                                                                                  // 2504\n\tmouseY0: null,                                                                                                        // 2505\n\tmouseX0: null,                                                                                                        // 2506\n                                                                                                                       // 2507\n\t// the number of pixels the mouse has moved from its initial position                                                 // 2508\n\ttopDelta: null,                                                                                                       // 2509\n\tleftDelta: null,                                                                                                      // 2510\n                                                                                                                       // 2511\n\tmousemoveProxy: null, // document mousemove handler, bound to the MouseFollower's `this`                              // 2512\n                                                                                                                       // 2513\n\tisFollowing: false,                                                                                                   // 2514\n\tisHidden: false,                                                                                                      // 2515\n\tisAnimating: false, // doing the revert animation?                                                                    // 2516\n                                                                                                                       // 2517\n\tconstructor: function(sourceEl, options) {                                                                            // 2518\n\t\tthis.options = options = options || {};                                                                              // 2519\n\t\tthis.sourceEl = sourceEl;                                                                                            // 2520\n\t\tthis.parentEl = options.parentEl ? $(options.parentEl) : sourceEl.parent(); // default to sourceEl's parent          // 2521\n\t},                                                                                                                    // 2522\n                                                                                                                       // 2523\n                                                                                                                       // 2524\n\t// Causes the element to start following the mouse                                                                    // 2525\n\tstart: function(ev) {                                                                                                 // 2526\n\t\tif (!this.isFollowing) {                                                                                             // 2527\n\t\t\tthis.isFollowing = true;                                                                                            // 2528\n                                                                                                                       // 2529\n\t\t\tthis.mouseY0 = ev.pageY;                                                                                            // 2530\n\t\t\tthis.mouseX0 = ev.pageX;                                                                                            // 2531\n\t\t\tthis.topDelta = 0;                                                                                                  // 2532\n\t\t\tthis.leftDelta = 0;                                                                                                 // 2533\n                                                                                                                       // 2534\n\t\t\tif (!this.isHidden) {                                                                                               // 2535\n\t\t\t\tthis.updatePosition();                                                                                             // 2536\n\t\t\t}                                                                                                                   // 2537\n                                                                                                                       // 2538\n\t\t\t$(document).on('mousemove', this.mousemoveProxy = proxy(this, 'mousemove'));                                        // 2539\n\t\t}                                                                                                                    // 2540\n\t},                                                                                                                    // 2541\n                                                                                                                       // 2542\n                                                                                                                       // 2543\n\t// Causes the element to stop following the mouse. If shouldRevert is true, will animate back to original position.   // 2544\n\t// `callback` gets invoked when the animation is complete. If no animation, it is invoked immediately.                // 2545\n\tstop: function(shouldRevert, callback) {                                                                              // 2546\n\t\tvar _this = this;                                                                                                    // 2547\n\t\tvar revertDuration = this.options.revertDuration;                                                                    // 2548\n                                                                                                                       // 2549\n\t\tfunction complete() {                                                                                                // 2550\n\t\t\tthis.isAnimating = false;                                                                                           // 2551\n\t\t\t_this.destroyEl();                                                                                                  // 2552\n                                                                                                                       // 2553\n\t\t\tthis.top0 = this.left0 = null; // reset state for future updatePosition calls                                       // 2554\n                                                                                                                       // 2555\n\t\t\tif (callback) {                                                                                                     // 2556\n\t\t\t\tcallback();                                                                                                        // 2557\n\t\t\t}                                                                                                                   // 2558\n\t\t}                                                                                                                    // 2559\n                                                                                                                       // 2560\n\t\tif (this.isFollowing && !this.isAnimating) { // disallow more than one stop animation at a time                      // 2561\n\t\t\tthis.isFollowing = false;                                                                                           // 2562\n                                                                                                                       // 2563\n\t\t\t$(document).off('mousemove', this.mousemoveProxy);                                                                  // 2564\n                                                                                                                       // 2565\n\t\t\tif (shouldRevert && revertDuration && !this.isHidden) { // do a revert animation?                                   // 2566\n\t\t\t\tthis.isAnimating = true;                                                                                           // 2567\n\t\t\t\tthis.el.animate({                                                                                                  // 2568\n\t\t\t\t\ttop: this.top0,                                                                                                   // 2569\n\t\t\t\t\tleft: this.left0                                                                                                  // 2570\n\t\t\t\t}, {                                                                                                               // 2571\n\t\t\t\t\tduration: revertDuration,                                                                                         // 2572\n\t\t\t\t\tcomplete: complete                                                                                                // 2573\n\t\t\t\t});                                                                                                                // 2574\n\t\t\t}                                                                                                                   // 2575\n\t\t\telse {                                                                                                              // 2576\n\t\t\t\tcomplete();                                                                                                        // 2577\n\t\t\t}                                                                                                                   // 2578\n\t\t}                                                                                                                    // 2579\n\t},                                                                                                                    // 2580\n                                                                                                                       // 2581\n                                                                                                                       // 2582\n\t// Gets the tracking element. Create it if necessary                                                                  // 2583\n\tgetEl: function() {                                                                                                   // 2584\n\t\tvar el = this.el;                                                                                                    // 2585\n                                                                                                                       // 2586\n\t\tif (!el) {                                                                                                           // 2587\n\t\t\tthis.sourceEl.width(); // hack to force IE8 to compute correct bounding box                                         // 2588\n\t\t\tel = this.el = this.sourceEl.clone()                                                                                // 2589\n\t\t\t\t.css({                                                                                                             // 2590\n\t\t\t\t\tposition: 'absolute',                                                                                             // 2591\n\t\t\t\t\tvisibility: '', // in case original element was hidden (commonly through hideEvents())                            // 2592\n\t\t\t\t\tdisplay: this.isHidden ? 'none' : '', // for when initially hidden                                                // 2593\n\t\t\t\t\tmargin: 0,                                                                                                        // 2594\n\t\t\t\t\tright: 'auto', // erase and set width instead                                                                     // 2595\n\t\t\t\t\tbottom: 'auto', // erase and set height instead                                                                   // 2596\n\t\t\t\t\twidth: this.sourceEl.width(), // explicit height in case there was a 'right' value                                // 2597\n\t\t\t\t\theight: this.sourceEl.height(), // explicit width in case there was a 'bottom' value                              // 2598\n\t\t\t\t\topacity: this.options.opacity || '',                                                                              // 2599\n\t\t\t\t\tzIndex: this.options.zIndex                                                                                       // 2600\n\t\t\t\t})                                                                                                                 // 2601\n\t\t\t\t.appendTo(this.parentEl);                                                                                          // 2602\n\t\t}                                                                                                                    // 2603\n                                                                                                                       // 2604\n\t\treturn el;                                                                                                           // 2605\n\t},                                                                                                                    // 2606\n                                                                                                                       // 2607\n                                                                                                                       // 2608\n\t// Removes the tracking element if it has already been created                                                        // 2609\n\tdestroyEl: function() {                                                                                               // 2610\n\t\tif (this.el) {                                                                                                       // 2611\n\t\t\tthis.el.remove();                                                                                                   // 2612\n\t\t\tthis.el = null;                                                                                                     // 2613\n\t\t}                                                                                                                    // 2614\n\t},                                                                                                                    // 2615\n                                                                                                                       // 2616\n                                                                                                                       // 2617\n\t// Update the CSS position of the tracking element                                                                    // 2618\n\tupdatePosition: function() {                                                                                          // 2619\n\t\tvar sourceOffset;                                                                                                    // 2620\n\t\tvar origin;                                                                                                          // 2621\n                                                                                                                       // 2622\n\t\tthis.getEl(); // ensure this.el                                                                                      // 2623\n                                                                                                                       // 2624\n\t\t// make sure origin info was computed                                                                                // 2625\n\t\tif (this.top0 === null) {                                                                                            // 2626\n\t\t\tthis.sourceEl.width(); // hack to force IE8 to compute correct bounding box                                         // 2627\n\t\t\tsourceOffset = this.sourceEl.offset();                                                                              // 2628\n\t\t\torigin = this.el.offsetParent().offset();                                                                           // 2629\n\t\t\tthis.top0 = sourceOffset.top - origin.top;                                                                          // 2630\n\t\t\tthis.left0 = sourceOffset.left - origin.left;                                                                       // 2631\n\t\t}                                                                                                                    // 2632\n                                                                                                                       // 2633\n\t\tthis.el.css({                                                                                                        // 2634\n\t\t\ttop: this.top0 + this.topDelta,                                                                                     // 2635\n\t\t\tleft: this.left0 + this.leftDelta                                                                                   // 2636\n\t\t});                                                                                                                  // 2637\n\t},                                                                                                                    // 2638\n                                                                                                                       // 2639\n                                                                                                                       // 2640\n\t// Gets called when the user moves the mouse                                                                          // 2641\n\tmousemove: function(ev) {                                                                                             // 2642\n\t\tthis.topDelta = ev.pageY - this.mouseY0;                                                                             // 2643\n\t\tthis.leftDelta = ev.pageX - this.mouseX0;                                                                            // 2644\n                                                                                                                       // 2645\n\t\tif (!this.isHidden) {                                                                                                // 2646\n\t\t\tthis.updatePosition();                                                                                              // 2647\n\t\t}                                                                                                                    // 2648\n\t},                                                                                                                    // 2649\n                                                                                                                       // 2650\n                                                                                                                       // 2651\n\t// Temporarily makes the tracking element invisible. Can be called before following starts                            // 2652\n\thide: function() {                                                                                                    // 2653\n\t\tif (!this.isHidden) {                                                                                                // 2654\n\t\t\tthis.isHidden = true;                                                                                               // 2655\n\t\t\tif (this.el) {                                                                                                      // 2656\n\t\t\t\tthis.el.hide();                                                                                                    // 2657\n\t\t\t}                                                                                                                   // 2658\n\t\t}                                                                                                                    // 2659\n\t},                                                                                                                    // 2660\n                                                                                                                       // 2661\n                                                                                                                       // 2662\n\t// Show the tracking element after it has been temporarily hidden                                                     // 2663\n\tshow: function() {                                                                                                    // 2664\n\t\tif (this.isHidden) {                                                                                                 // 2665\n\t\t\tthis.isHidden = false;                                                                                              // 2666\n\t\t\tthis.updatePosition();                                                                                              // 2667\n\t\t\tthis.getEl().show();                                                                                                // 2668\n\t\t}                                                                                                                    // 2669\n\t}                                                                                                                     // 2670\n                                                                                                                       // 2671\n});                                                                                                                    // 2672\n                                                                                                                       // 2673\n;;                                                                                                                     // 2674\n                                                                                                                       // 2675\n/* A utility class for rendering <tr> rows.                                                                            // 2676\n----------------------------------------------------------------------------------------------------------------------*/\n// It leverages methods of the subclass and the View to determine custom rendering behavior for each row \"type\"        // 2678\n// (such as highlight rows, day rows, helper rows, etc).                                                               // 2679\n                                                                                                                       // 2680\nvar RowRenderer = Class.extend({                                                                                       // 2681\n                                                                                                                       // 2682\n\tview: null, // a View object                                                                                          // 2683\n\tisRTL: null, // shortcut to the view's isRTL option                                                                   // 2684\n\tcellHtml: '<td/>', // plain default HTML used for a cell when no other is available                                   // 2685\n                                                                                                                       // 2686\n                                                                                                                       // 2687\n\tconstructor: function(view) {                                                                                         // 2688\n\t\tthis.view = view;                                                                                                    // 2689\n\t\tthis.isRTL = view.opt('isRTL');                                                                                      // 2690\n\t},                                                                                                                    // 2691\n                                                                                                                       // 2692\n                                                                                                                       // 2693\n\t// Renders the HTML for a row, leveraging custom cell-HTML-renderers based on the `rowType`.                          // 2694\n\t// Also applies the \"intro\" and \"outro\" cells, which are specified by the subclass and views.                         // 2695\n\t// `row` is an optional row number.                                                                                   // 2696\n\trowHtml: function(rowType, row) {                                                                                     // 2697\n\t\tvar renderCell = this.getHtmlRenderer('cell', rowType);                                                              // 2698\n\t\tvar rowCellHtml = '';                                                                                                // 2699\n\t\tvar col;                                                                                                             // 2700\n\t\tvar cell;                                                                                                            // 2701\n                                                                                                                       // 2702\n\t\trow = row || 0;                                                                                                      // 2703\n                                                                                                                       // 2704\n\t\tfor (col = 0; col < this.colCnt; col++) {                                                                            // 2705\n\t\t\tcell = this.getCell(row, col);                                                                                      // 2706\n\t\t\trowCellHtml += renderCell(cell);                                                                                    // 2707\n\t\t}                                                                                                                    // 2708\n                                                                                                                       // 2709\n\t\trowCellHtml = this.bookendCells(rowCellHtml, rowType, row); // apply intro and outro                                 // 2710\n                                                                                                                       // 2711\n\t\treturn '<tr>' + rowCellHtml + '</tr>';                                                                               // 2712\n\t},                                                                                                                    // 2713\n                                                                                                                       // 2714\n                                                                                                                       // 2715\n\t// Applies the \"intro\" and \"outro\" HTML to the given cells.                                                           // 2716\n\t// Intro means the leftmost cell when the calendar is LTR and the rightmost cell when RTL. Vice-versa for outro.      // 2717\n\t// `cells` can be an HTML string of <td>'s or a jQuery <tr> element                                                   // 2718\n\t// `row` is an optional row number.                                                                                   // 2719\n\tbookendCells: function(cells, rowType, row) {                                                                         // 2720\n\t\tvar intro = this.getHtmlRenderer('intro', rowType)(row || 0);                                                        // 2721\n\t\tvar outro = this.getHtmlRenderer('outro', rowType)(row || 0);                                                        // 2722\n\t\tvar prependHtml = this.isRTL ? outro : intro;                                                                        // 2723\n\t\tvar appendHtml = this.isRTL ? intro : outro;                                                                         // 2724\n                                                                                                                       // 2725\n\t\tif (typeof cells === 'string') {                                                                                     // 2726\n\t\t\treturn prependHtml + cells + appendHtml;                                                                            // 2727\n\t\t}                                                                                                                    // 2728\n\t\telse { // a jQuery <tr> element                                                                                      // 2729\n\t\t\treturn cells.prepend(prependHtml).append(appendHtml);                                                               // 2730\n\t\t}                                                                                                                    // 2731\n\t},                                                                                                                    // 2732\n                                                                                                                       // 2733\n                                                                                                                       // 2734\n\t// Returns an HTML-rendering function given a specific `rendererName` (like cell, intro, or outro) and a specific     // 2735\n\t// `rowType` (like day, eventSkeleton, helperSkeleton), which is optional.                                            // 2736\n\t// If a renderer for the specific rowType doesn't exist, it will fall back to a generic renderer.                     // 2737\n\t// We will query the View object first for any custom rendering functions, then the methods of the subclass.          // 2738\n\tgetHtmlRenderer: function(rendererName, rowType) {                                                                    // 2739\n\t\tvar view = this.view;                                                                                                // 2740\n\t\tvar generalName; // like \"cellHtml\"                                                                                  // 2741\n\t\tvar specificName; // like \"dayCellHtml\". based on rowType                                                            // 2742\n\t\tvar provider; // either the View or the RowRenderer subclass, whichever provided the method                          // 2743\n\t\tvar renderer;                                                                                                        // 2744\n                                                                                                                       // 2745\n\t\tgeneralName = rendererName + 'Html';                                                                                 // 2746\n\t\tif (rowType) {                                                                                                       // 2747\n\t\t\tspecificName = rowType + capitaliseFirstLetter(rendererName) + 'Html';                                              // 2748\n\t\t}                                                                                                                    // 2749\n                                                                                                                       // 2750\n\t\tif (specificName && (renderer = view[specificName])) {                                                               // 2751\n\t\t\tprovider = view;                                                                                                    // 2752\n\t\t}                                                                                                                    // 2753\n\t\telse if (specificName && (renderer = this[specificName])) {                                                          // 2754\n\t\t\tprovider = this;                                                                                                    // 2755\n\t\t}                                                                                                                    // 2756\n\t\telse if ((renderer = view[generalName])) {                                                                           // 2757\n\t\t\tprovider = view;                                                                                                    // 2758\n\t\t}                                                                                                                    // 2759\n\t\telse if ((renderer = this[generalName])) {                                                                           // 2760\n\t\t\tprovider = this;                                                                                                    // 2761\n\t\t}                                                                                                                    // 2762\n                                                                                                                       // 2763\n\t\tif (typeof renderer === 'function') {                                                                                // 2764\n\t\t\treturn function() {                                                                                                 // 2765\n\t\t\t\treturn renderer.apply(provider, arguments) || ''; // use correct `this` and always return a string                 // 2766\n\t\t\t};                                                                                                                  // 2767\n\t\t}                                                                                                                    // 2768\n                                                                                                                       // 2769\n\t\t// the rendered can be a plain string as well. if not specified, always an empty string.                             // 2770\n\t\treturn function() {                                                                                                  // 2771\n\t\t\treturn renderer || '';                                                                                              // 2772\n\t\t};                                                                                                                   // 2773\n\t}                                                                                                                     // 2774\n                                                                                                                       // 2775\n});                                                                                                                    // 2776\n                                                                                                                       // 2777\n;;                                                                                                                     // 2778\n                                                                                                                       // 2779\n/* An abstract class comprised of a \"grid\" of cells that each represent a specific datetime                            // 2780\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 2782\nvar Grid = fc.Grid = RowRenderer.extend({                                                                              // 2783\n                                                                                                                       // 2784\n\tstart: null, // the date of the first cell                                                                            // 2785\n\tend: null, // the date after the last cell                                                                            // 2786\n                                                                                                                       // 2787\n\trowCnt: 0, // number of rows                                                                                          // 2788\n\tcolCnt: 0, // number of cols                                                                                          // 2789\n\trowData: null, // array of objects, holding misc data for each row                                                    // 2790\n\tcolData: null, // array of objects, holding misc data for each column                                                 // 2791\n                                                                                                                       // 2792\n\tel: null, // the containing element                                                                                   // 2793\n\tcoordMap: null, // a GridCoordMap that converts pixel values to datetimes                                             // 2794\n\telsByFill: null, // a hash of jQuery element sets used for rendering each fill. Keyed by fill name.                   // 2795\n                                                                                                                       // 2796\n\texternalDragStartProxy: null, // binds the Grid's scope to externalDragStart (in DayGrid.events)                      // 2797\n                                                                                                                       // 2798\n\t// derived from options                                                                                               // 2799\n\tcolHeadFormat: null, // TODO: move to another class. not applicable to all Grids                                      // 2800\n\teventTimeFormat: null,                                                                                                // 2801\n\tdisplayEventTime: null,                                                                                               // 2802\n\tdisplayEventEnd: null,                                                                                                // 2803\n                                                                                                                       // 2804\n\t// if all cells are the same length of time, the duration they all share. optional.                                   // 2805\n\t// when defined, allows the computeCellRange shortcut, as well as improved resizing behavior.                         // 2806\n\tcellDuration: null,                                                                                                   // 2807\n                                                                                                                       // 2808\n\t// if defined, holds the unit identified (ex: \"year\" or \"month\") that determines the level of granularity             // 2809\n\t// of the date cells. if not defined, assumes to be day and time granularity.                                         // 2810\n\tlargeUnit: null,                                                                                                      // 2811\n                                                                                                                       // 2812\n                                                                                                                       // 2813\n\tconstructor: function() {                                                                                             // 2814\n\t\tRowRenderer.apply(this, arguments); // call the super-constructor                                                    // 2815\n                                                                                                                       // 2816\n\t\tthis.coordMap = new GridCoordMap(this);                                                                              // 2817\n\t\tthis.elsByFill = {};                                                                                                 // 2818\n\t\tthis.externalDragStartProxy = proxy(this, 'externalDragStart');                                                      // 2819\n\t},                                                                                                                    // 2820\n                                                                                                                       // 2821\n                                                                                                                       // 2822\n\t/* Options                                                                                                            // 2823\n\t------------------------------------------------------------------------------------------------------------------*/  // 2824\n                                                                                                                       // 2825\n                                                                                                                       // 2826\n\t// Generates the format string used for the text in column headers, if not explicitly defined by 'columnFormat'       // 2827\n\t// TODO: move to another class. not applicable to all Grids                                                           // 2828\n\tcomputeColHeadFormat: function() {                                                                                    // 2829\n\t\t// subclasses must implement if they want to use headHtml()                                                          // 2830\n\t},                                                                                                                    // 2831\n                                                                                                                       // 2832\n                                                                                                                       // 2833\n\t// Generates the format string used for event time text, if not explicitly defined by 'timeFormat'                    // 2834\n\tcomputeEventTimeFormat: function() {                                                                                  // 2835\n\t\treturn this.view.opt('smallTimeFormat');                                                                             // 2836\n\t},                                                                                                                    // 2837\n                                                                                                                       // 2838\n                                                                                                                       // 2839\n\t// Determines whether events should have their end times displayed, if not explicitly defined by 'displayEventTime'.  // 2840\n\t// Only applies to non-all-day events.                                                                                // 2841\n\tcomputeDisplayEventTime: function() {                                                                                 // 2842\n\t\treturn true;                                                                                                         // 2843\n\t},                                                                                                                    // 2844\n                                                                                                                       // 2845\n                                                                                                                       // 2846\n\t// Determines whether events should have their end times displayed, if not explicitly defined by 'displayEventEnd'    // 2847\n\tcomputeDisplayEventEnd: function() {                                                                                  // 2848\n\t\treturn true;                                                                                                         // 2849\n\t},                                                                                                                    // 2850\n                                                                                                                       // 2851\n                                                                                                                       // 2852\n\t/* Dates                                                                                                              // 2853\n\t------------------------------------------------------------------------------------------------------------------*/  // 2854\n                                                                                                                       // 2855\n                                                                                                                       // 2856\n\t// Tells the grid about what period of time to display. Grid will subsequently compute dates for cell system.         // 2857\n\tsetRange: function(range) {                                                                                           // 2858\n\t\tvar view = this.view;                                                                                                // 2859\n\t\tvar displayEventTime;                                                                                                // 2860\n\t\tvar displayEventEnd;                                                                                                 // 2861\n                                                                                                                       // 2862\n\t\tthis.start = range.start.clone();                                                                                    // 2863\n\t\tthis.end = range.end.clone();                                                                                        // 2864\n                                                                                                                       // 2865\n\t\tthis.rowData = [];                                                                                                   // 2866\n\t\tthis.colData = [];                                                                                                   // 2867\n\t\tthis.updateCells();                                                                                                  // 2868\n                                                                                                                       // 2869\n\t\t// Populate option-derived settings. Look for override first, then compute if necessary.                             // 2870\n\t\tthis.colHeadFormat = view.opt('columnFormat') || this.computeColHeadFormat();                                        // 2871\n                                                                                                                       // 2872\n\t\tthis.eventTimeFormat =                                                                                               // 2873\n\t\t\tview.opt('eventTimeFormat') ||                                                                                      // 2874\n\t\t\tview.opt('timeFormat') || // deprecated                                                                             // 2875\n\t\t\tthis.computeEventTimeFormat();                                                                                      // 2876\n                                                                                                                       // 2877\n\t\tdisplayEventTime = view.opt('displayEventTime');                                                                     // 2878\n\t\tif (displayEventTime == null) {                                                                                      // 2879\n\t\t\tdisplayEventTime = this.computeDisplayEventTime(); // might be based off of range                                   // 2880\n\t\t}                                                                                                                    // 2881\n                                                                                                                       // 2882\n\t\tdisplayEventEnd = view.opt('displayEventEnd');                                                                       // 2883\n\t\tif (displayEventEnd == null) {                                                                                       // 2884\n\t\t\tdisplayEventEnd = this.computeDisplayEventEnd(); // might be based off of range                                     // 2885\n\t\t}                                                                                                                    // 2886\n                                                                                                                       // 2887\n\t\tthis.displayEventTime = displayEventTime;                                                                            // 2888\n\t\tthis.displayEventEnd = displayEventEnd;                                                                              // 2889\n\t},                                                                                                                    // 2890\n                                                                                                                       // 2891\n                                                                                                                       // 2892\n\t// Responsible for setting rowCnt/colCnt and any other row/col data                                                   // 2893\n\tupdateCells: function() {                                                                                             // 2894\n\t\t// subclasses must implement                                                                                         // 2895\n\t},                                                                                                                    // 2896\n                                                                                                                       // 2897\n                                                                                                                       // 2898\n\t// Converts a range with an inclusive `start` and an exclusive `end` into an array of segment objects                 // 2899\n\trangeToSegs: function(range) {                                                                                        // 2900\n\t\t// subclasses must implement                                                                                         // 2901\n\t},                                                                                                                    // 2902\n                                                                                                                       // 2903\n                                                                                                                       // 2904\n\t// Diffs the two dates, returning a duration, based on granularity of the grid                                        // 2905\n\tdiffDates: function(a, b) {                                                                                           // 2906\n\t\tif (this.largeUnit) {                                                                                                // 2907\n\t\t\treturn diffByUnit(a, b, this.largeUnit);                                                                            // 2908\n\t\t}                                                                                                                    // 2909\n\t\telse {                                                                                                               // 2910\n\t\t\treturn diffDayTime(a, b);                                                                                           // 2911\n\t\t}                                                                                                                    // 2912\n\t},                                                                                                                    // 2913\n                                                                                                                       // 2914\n                                                                                                                       // 2915\n\t/* Cells                                                                                                              // 2916\n\t------------------------------------------------------------------------------------------------------------------*/  // 2917\n\t// NOTE: columns are ordered left-to-right                                                                            // 2918\n                                                                                                                       // 2919\n                                                                                                                       // 2920\n\t// Gets an object containing row/col number, misc data, and range information about the cell.                         // 2921\n\t// Accepts row/col values, an object with row/col properties, or a single-number offset from the first cell.          // 2922\n\tgetCell: function(row, col) {                                                                                         // 2923\n\t\tvar cell;                                                                                                            // 2924\n                                                                                                                       // 2925\n\t\tif (col == null) {                                                                                                   // 2926\n\t\t\tif (typeof row === 'number') { // a single-number offset                                                            // 2927\n\t\t\t\tcol = row % this.colCnt;                                                                                           // 2928\n\t\t\t\trow = Math.floor(row / this.colCnt);                                                                               // 2929\n\t\t\t}                                                                                                                   // 2930\n\t\t\telse { // an object with row/col properties                                                                         // 2931\n\t\t\t\tcol = row.col;                                                                                                     // 2932\n\t\t\t\trow = row.row;                                                                                                     // 2933\n\t\t\t}                                                                                                                   // 2934\n\t\t}                                                                                                                    // 2935\n                                                                                                                       // 2936\n\t\tcell = { row: row, col: col };                                                                                       // 2937\n                                                                                                                       // 2938\n\t\t$.extend(cell, this.getRowData(row), this.getColData(col));                                                          // 2939\n\t\t$.extend(cell, this.computeCellRange(cell));                                                                         // 2940\n                                                                                                                       // 2941\n\t\treturn cell;                                                                                                         // 2942\n\t},                                                                                                                    // 2943\n                                                                                                                       // 2944\n                                                                                                                       // 2945\n\t// Given a cell object with index and misc data, generates a range object                                             // 2946\n\t// If the grid is leveraging cellDuration, this doesn't need to be defined. Only computeCellDate does.                // 2947\n\t// If being overridden, should return a range with reference-free date copies.                                        // 2948\n\tcomputeCellRange: function(cell) {                                                                                    // 2949\n\t\tvar date = this.computeCellDate(cell);                                                                               // 2950\n                                                                                                                       // 2951\n\t\treturn {                                                                                                             // 2952\n\t\t\tstart: date,                                                                                                        // 2953\n\t\t\tend: date.clone().add(this.cellDuration)                                                                            // 2954\n\t\t};                                                                                                                   // 2955\n\t},                                                                                                                    // 2956\n                                                                                                                       // 2957\n                                                                                                                       // 2958\n\t// Given a cell, returns its start date. Should return a reference-free date copy.                                    // 2959\n\tcomputeCellDate: function(cell) {                                                                                     // 2960\n\t\t// subclasses can implement                                                                                          // 2961\n\t},                                                                                                                    // 2962\n                                                                                                                       // 2963\n                                                                                                                       // 2964\n\t// Retrieves misc data about the given row                                                                            // 2965\n\tgetRowData: function(row) {                                                                                           // 2966\n\t\treturn this.rowData[row] || {};                                                                                      // 2967\n\t},                                                                                                                    // 2968\n                                                                                                                       // 2969\n                                                                                                                       // 2970\n\t// Retrieves misc data baout the given column                                                                         // 2971\n\tgetColData: function(col) {                                                                                           // 2972\n\t\treturn this.colData[col] || {};                                                                                      // 2973\n\t},                                                                                                                    // 2974\n                                                                                                                       // 2975\n                                                                                                                       // 2976\n\t// Retrieves the element representing the given row                                                                   // 2977\n\tgetRowEl: function(row) {                                                                                             // 2978\n\t\t// subclasses should implement if leveraging the default getCellDayEl() or computeRowCoords()                        // 2979\n\t},                                                                                                                    // 2980\n                                                                                                                       // 2981\n                                                                                                                       // 2982\n\t// Retrieves the element representing the given column                                                                // 2983\n\tgetColEl: function(col) {                                                                                             // 2984\n\t\t// subclasses should implement if leveraging the default getCellDayEl() or computeColCoords()                        // 2985\n\t},                                                                                                                    // 2986\n                                                                                                                       // 2987\n                                                                                                                       // 2988\n\t// Given a cell object, returns the element that represents the cell's whole-day                                      // 2989\n\tgetCellDayEl: function(cell) {                                                                                        // 2990\n\t\treturn this.getColEl(cell.col) || this.getRowEl(cell.row);                                                           // 2991\n\t},                                                                                                                    // 2992\n                                                                                                                       // 2993\n                                                                                                                       // 2994\n\t/* Cell Coordinates                                                                                                   // 2995\n\t------------------------------------------------------------------------------------------------------------------*/  // 2996\n                                                                                                                       // 2997\n                                                                                                                       // 2998\n\t// Computes the top/bottom coordinates of all rows.                                                                   // 2999\n\t// By default, queries the dimensions of the element provided by getRowEl().                                          // 3000\n\tcomputeRowCoords: function() {                                                                                        // 3001\n\t\tvar items = [];                                                                                                      // 3002\n\t\tvar i, el;                                                                                                           // 3003\n\t\tvar top;                                                                                                             // 3004\n                                                                                                                       // 3005\n\t\tfor (i = 0; i < this.rowCnt; i++) {                                                                                  // 3006\n\t\t\tel = this.getRowEl(i);                                                                                              // 3007\n\t\t\ttop = el.offset().top;                                                                                              // 3008\n\t\t\titems.push({                                                                                                        // 3009\n\t\t\t\ttop: top,                                                                                                          // 3010\n\t\t\t\tbottom: top + el.outerHeight()                                                                                     // 3011\n\t\t\t});                                                                                                                 // 3012\n\t\t}                                                                                                                    // 3013\n                                                                                                                       // 3014\n\t\treturn items;                                                                                                        // 3015\n\t},                                                                                                                    // 3016\n                                                                                                                       // 3017\n                                                                                                                       // 3018\n\t// Computes the left/right coordinates of all rows.                                                                   // 3019\n\t// By default, queries the dimensions of the element provided by getColEl(). Columns can be LTR or RTL.               // 3020\n\tcomputeColCoords: function() {                                                                                        // 3021\n\t\tvar items = [];                                                                                                      // 3022\n\t\tvar i, el;                                                                                                           // 3023\n\t\tvar left;                                                                                                            // 3024\n                                                                                                                       // 3025\n\t\tfor (i = 0; i < this.colCnt; i++) {                                                                                  // 3026\n\t\t\tel = this.getColEl(i);                                                                                              // 3027\n\t\t\tleft = el.offset().left;                                                                                            // 3028\n\t\t\titems.push({                                                                                                        // 3029\n\t\t\t\tleft: left,                                                                                                        // 3030\n\t\t\t\tright: left + el.outerWidth()                                                                                      // 3031\n\t\t\t});                                                                                                                 // 3032\n\t\t}                                                                                                                    // 3033\n                                                                                                                       // 3034\n\t\treturn items;                                                                                                        // 3035\n\t},                                                                                                                    // 3036\n                                                                                                                       // 3037\n                                                                                                                       // 3038\n\t/* Rendering                                                                                                          // 3039\n\t------------------------------------------------------------------------------------------------------------------*/  // 3040\n                                                                                                                       // 3041\n                                                                                                                       // 3042\n\t// Sets the container element that the grid should render inside of.                                                  // 3043\n\t// Does other DOM-related initializations.                                                                            // 3044\n\tsetElement: function(el) {                                                                                            // 3045\n\t\tvar _this = this;                                                                                                    // 3046\n                                                                                                                       // 3047\n\t\tthis.el = el;                                                                                                        // 3048\n                                                                                                                       // 3049\n\t\t// attach a handler to the grid's root element.                                                                      // 3050\n\t\t// jQuery will take care of unregistering them when removeElement gets called.                                       // 3051\n\t\tel.on('mousedown', function(ev) {                                                                                    // 3052\n\t\t\tif (                                                                                                                // 3053\n\t\t\t\t!$(ev.target).is('.fc-event-container *, .fc-more') && // not an an event element, or \"more..\" link                // 3054\n\t\t\t\t!$(ev.target).closest('.fc-popover').length // not on a popover (like the \"more..\" events one)                     // 3055\n\t\t\t) {                                                                                                                 // 3056\n\t\t\t\t_this.dayMousedown(ev);                                                                                            // 3057\n\t\t\t}                                                                                                                   // 3058\n\t\t});                                                                                                                  // 3059\n                                                                                                                       // 3060\n\t\t// attach event-element-related handlers. in Grid.events                                                             // 3061\n\t\t// same garbage collection note as above.                                                                            // 3062\n\t\tthis.bindSegHandlers();                                                                                              // 3063\n                                                                                                                       // 3064\n\t\tthis.bindGlobalHandlers();                                                                                           // 3065\n\t},                                                                                                                    // 3066\n                                                                                                                       // 3067\n                                                                                                                       // 3068\n\t// Removes the grid's container element from the DOM. Undoes any other DOM-related attachments.                       // 3069\n\t// DOES NOT remove any content before hand (doens't clear events or call destroyDates), unlike View                   // 3070\n\tremoveElement: function() {                                                                                           // 3071\n\t\tthis.unbindGlobalHandlers();                                                                                         // 3072\n                                                                                                                       // 3073\n\t\tthis.el.remove();                                                                                                    // 3074\n                                                                                                                       // 3075\n\t\t// NOTE: we don't null-out this.el for the same reasons we don't do it within View::removeElement                    // 3076\n\t},                                                                                                                    // 3077\n                                                                                                                       // 3078\n                                                                                                                       // 3079\n\t// Renders the basic structure of grid view before any content is rendered                                            // 3080\n\trenderSkeleton: function() {                                                                                          // 3081\n\t\t// subclasses should implement                                                                                       // 3082\n\t},                                                                                                                    // 3083\n                                                                                                                       // 3084\n                                                                                                                       // 3085\n\t// Renders the grid's date-related content (like cells that represent days/times).                                    // 3086\n\t// Assumes setRange has already been called and the skeleton has already been rendered.                               // 3087\n\trenderDates: function() {                                                                                             // 3088\n\t\t// subclasses should implement                                                                                       // 3089\n\t},                                                                                                                    // 3090\n                                                                                                                       // 3091\n                                                                                                                       // 3092\n\t// Unrenders the grid's date-related content                                                                          // 3093\n\tdestroyDates: function() {                                                                                            // 3094\n\t\t// subclasses should implement                                                                                       // 3095\n\t},                                                                                                                    // 3096\n                                                                                                                       // 3097\n                                                                                                                       // 3098\n\t/* Handlers                                                                                                           // 3099\n\t------------------------------------------------------------------------------------------------------------------*/  // 3100\n                                                                                                                       // 3101\n                                                                                                                       // 3102\n\t// Binds DOM handlers to elements that reside outside the grid, such as the document                                  // 3103\n\tbindGlobalHandlers: function() {                                                                                      // 3104\n\t\t$(document).on('dragstart sortstart', this.externalDragStartProxy); // jqui                                          // 3105\n\t},                                                                                                                    // 3106\n                                                                                                                       // 3107\n                                                                                                                       // 3108\n\t// Unbinds DOM handlers from elements that reside outside the grid                                                    // 3109\n\tunbindGlobalHandlers: function() {                                                                                    // 3110\n\t\t$(document).off('dragstart sortstart', this.externalDragStartProxy); // jqui                                         // 3111\n\t},                                                                                                                    // 3112\n                                                                                                                       // 3113\n                                                                                                                       // 3114\n\t// Process a mousedown on an element that represents a day. For day clicking and selecting.                           // 3115\n\tdayMousedown: function(ev) {                                                                                          // 3116\n\t\tvar _this = this;                                                                                                    // 3117\n\t\tvar view = this.view;                                                                                                // 3118\n\t\tvar isSelectable = view.opt('selectable');                                                                           // 3119\n\t\tvar dayClickCell; // null if invalid dayClick                                                                        // 3120\n\t\tvar selectionRange; // null if invalid selection                                                                     // 3121\n                                                                                                                       // 3122\n\t\t// this listener tracks a mousedown on a day element, and a subsequent drag.                                         // 3123\n\t\t// if the drag ends on the same day, it is a 'dayClick'.                                                             // 3124\n\t\t// if 'selectable' is enabled, this listener also detects selections.                                                // 3125\n\t\tvar dragListener = new CellDragListener(this.coordMap, {                                                             // 3126\n\t\t\t//distance: 5, // needs more work if we want dayClick to fire correctly                                             // 3127\n\t\t\tscroll: view.opt('dragScroll'),                                                                                     // 3128\n\t\t\tdragStart: function() {                                                                                             // 3129\n\t\t\t\tview.unselect(); // since we could be rendering a new selection, we want to clear any old one                      // 3130\n\t\t\t},                                                                                                                  // 3131\n\t\t\tcellOver: function(cell, isOrig, origCell) {                                                                        // 3132\n\t\t\t\tif (origCell) { // click needs to have started on a cell                                                           // 3133\n\t\t\t\t\tdayClickCell = isOrig ? cell : null; // single-cell selection is a day click                                      // 3134\n\t\t\t\t\tif (isSelectable) {                                                                                               // 3135\n\t\t\t\t\t\tselectionRange = _this.computeSelection(origCell, cell);                                                         // 3136\n\t\t\t\t\t\tif (selectionRange) {                                                                                            // 3137\n\t\t\t\t\t\t\t_this.renderSelection(selectionRange);                                                                          // 3138\n\t\t\t\t\t\t}                                                                                                                // 3139\n\t\t\t\t\t\telse {                                                                                                           // 3140\n\t\t\t\t\t\t\tdisableCursor();                                                                                                // 3141\n\t\t\t\t\t\t}                                                                                                                // 3142\n\t\t\t\t\t}                                                                                                                 // 3143\n\t\t\t\t}                                                                                                                  // 3144\n\t\t\t},                                                                                                                  // 3145\n\t\t\tcellOut: function(cell) {                                                                                           // 3146\n\t\t\t\tdayClickCell = null;                                                                                               // 3147\n\t\t\t\tselectionRange = null;                                                                                             // 3148\n\t\t\t\t_this.destroySelection();                                                                                          // 3149\n\t\t\t\tenableCursor();                                                                                                    // 3150\n\t\t\t},                                                                                                                  // 3151\n\t\t\tlistenStop: function(ev) {                                                                                          // 3152\n\t\t\t\tif (dayClickCell) {                                                                                                // 3153\n\t\t\t\t\tview.trigger('dayClick', _this.getCellDayEl(dayClickCell), dayClickCell.start, ev);                               // 3154\n\t\t\t\t}                                                                                                                  // 3155\n\t\t\t\tif (selectionRange) {                                                                                              // 3156\n\t\t\t\t\t// the selection will already have been rendered. just report it                                                  // 3157\n\t\t\t\t\tview.reportSelection(selectionRange, ev);                                                                         // 3158\n\t\t\t\t}                                                                                                                  // 3159\n\t\t\t\tenableCursor();                                                                                                    // 3160\n\t\t\t}                                                                                                                   // 3161\n\t\t});                                                                                                                  // 3162\n                                                                                                                       // 3163\n\t\tdragListener.mousedown(ev); // start listening, which will eventually initiate a dragStart                           // 3164\n\t},                                                                                                                    // 3165\n                                                                                                                       // 3166\n                                                                                                                       // 3167\n\t/* Event Helper                                                                                                       // 3168\n\t------------------------------------------------------------------------------------------------------------------*/  // 3169\n\t// TODO: should probably move this to Grid.events, like we did event dragging / resizing                              // 3170\n                                                                                                                       // 3171\n                                                                                                                       // 3172\n\t// Renders a mock event over the given range                                                                          // 3173\n\trenderRangeHelper: function(range, sourceSeg) {                                                                       // 3174\n\t\tvar fakeEvent = this.fabricateHelperEvent(range, sourceSeg);                                                         // 3175\n                                                                                                                       // 3176\n\t\tthis.renderHelper(fakeEvent, sourceSeg); // do the actual rendering                                                  // 3177\n\t},                                                                                                                    // 3178\n                                                                                                                       // 3179\n                                                                                                                       // 3180\n\t// Builds a fake event given a date range it should cover, and a segment is should be inspired from.                  // 3181\n\t// The range's end can be null, in which case the mock event that is rendered will have a null end time.              // 3182\n\t// `sourceSeg` is the internal segment object involved in the drag. If null, something external is dragging.          // 3183\n\tfabricateHelperEvent: function(range, sourceSeg) {                                                                    // 3184\n\t\tvar fakeEvent = sourceSeg ? createObject(sourceSeg.event) : {}; // mask the original event object if possible        // 3185\n                                                                                                                       // 3186\n\t\tfakeEvent.start = range.start.clone();                                                                               // 3187\n\t\tfakeEvent.end = range.end ? range.end.clone() : null;                                                                // 3188\n\t\tfakeEvent.allDay = null; // force it to be freshly computed by normalizeEventRange                                   // 3189\n\t\tthis.view.calendar.normalizeEventRange(fakeEvent);                                                                   // 3190\n                                                                                                                       // 3191\n\t\t// this extra className will be useful for differentiating real events from mock events in CSS                       // 3192\n\t\tfakeEvent.className = (fakeEvent.className || []).concat('fc-helper');                                               // 3193\n                                                                                                                       // 3194\n\t\t// if something external is being dragged in, don't render a resizer                                                 // 3195\n\t\tif (!sourceSeg) {                                                                                                    // 3196\n\t\t\tfakeEvent.editable = false;                                                                                         // 3197\n\t\t}                                                                                                                    // 3198\n                                                                                                                       // 3199\n\t\treturn fakeEvent;                                                                                                    // 3200\n\t},                                                                                                                    // 3201\n                                                                                                                       // 3202\n                                                                                                                       // 3203\n\t// Renders a mock event                                                                                               // 3204\n\trenderHelper: function(event, sourceSeg) {                                                                            // 3205\n\t\t// subclasses must implement                                                                                         // 3206\n\t},                                                                                                                    // 3207\n                                                                                                                       // 3208\n                                                                                                                       // 3209\n\t// Unrenders a mock event                                                                                             // 3210\n\tdestroyHelper: function() {                                                                                           // 3211\n\t\t// subclasses must implement                                                                                         // 3212\n\t},                                                                                                                    // 3213\n                                                                                                                       // 3214\n                                                                                                                       // 3215\n\t/* Selection                                                                                                          // 3216\n\t------------------------------------------------------------------------------------------------------------------*/  // 3217\n                                                                                                                       // 3218\n                                                                                                                       // 3219\n\t// Renders a visual indication of a selection. Will highlight by default but can be overridden by subclasses.         // 3220\n\trenderSelection: function(range) {                                                                                    // 3221\n\t\tthis.renderHighlight(range);                                                                                         // 3222\n\t},                                                                                                                    // 3223\n                                                                                                                       // 3224\n                                                                                                                       // 3225\n\t// Unrenders any visual indications of a selection. Will unrender a highlight by default.                             // 3226\n\tdestroySelection: function() {                                                                                        // 3227\n\t\tthis.destroyHighlight();                                                                                             // 3228\n\t},                                                                                                                    // 3229\n                                                                                                                       // 3230\n                                                                                                                       // 3231\n\t// Given the first and last cells of a selection, returns a range object.                                             // 3232\n\t// Will return something falsy if the selection is invalid (when outside of selectionConstraint for example).         // 3233\n\t// Subclasses can override and provide additional data in the range object. Will be passed to renderSelection().      // 3234\n\tcomputeSelection: function(firstCell, lastCell) {                                                                     // 3235\n\t\tvar dates = [                                                                                                        // 3236\n\t\t\tfirstCell.start,                                                                                                    // 3237\n\t\t\tfirstCell.end,                                                                                                      // 3238\n\t\t\tlastCell.start,                                                                                                     // 3239\n\t\t\tlastCell.end                                                                                                        // 3240\n\t\t];                                                                                                                   // 3241\n\t\tvar range;                                                                                                           // 3242\n                                                                                                                       // 3243\n\t\tdates.sort(compareNumbers); // sorts chronologically. works with Moments                                             // 3244\n                                                                                                                       // 3245\n\t\trange = {                                                                                                            // 3246\n\t\t\tstart: dates[0].clone(),                                                                                            // 3247\n\t\t\tend: dates[3].clone()                                                                                               // 3248\n\t\t};                                                                                                                   // 3249\n                                                                                                                       // 3250\n\t\tif (!this.view.calendar.isSelectionRangeAllowed(range)) {                                                            // 3251\n\t\t\treturn null;                                                                                                        // 3252\n\t\t}                                                                                                                    // 3253\n                                                                                                                       // 3254\n\t\treturn range;                                                                                                        // 3255\n\t},                                                                                                                    // 3256\n                                                                                                                       // 3257\n                                                                                                                       // 3258\n\t/* Highlight                                                                                                          // 3259\n\t------------------------------------------------------------------------------------------------------------------*/  // 3260\n                                                                                                                       // 3261\n                                                                                                                       // 3262\n\t// Renders an emphasis on the given date range. `start` is inclusive. `end` is exclusive.                             // 3263\n\trenderHighlight: function(range) {                                                                                    // 3264\n\t\tthis.renderFill('highlight', this.rangeToSegs(range));                                                               // 3265\n\t},                                                                                                                    // 3266\n                                                                                                                       // 3267\n                                                                                                                       // 3268\n\t// Unrenders the emphasis on a date range                                                                             // 3269\n\tdestroyHighlight: function() {                                                                                        // 3270\n\t\tthis.destroyFill('highlight');                                                                                       // 3271\n\t},                                                                                                                    // 3272\n                                                                                                                       // 3273\n                                                                                                                       // 3274\n\t// Generates an array of classNames for rendering the highlight. Used by the fill system.                             // 3275\n\thighlightSegClasses: function() {                                                                                     // 3276\n\t\treturn [ 'fc-highlight' ];                                                                                           // 3277\n\t},                                                                                                                    // 3278\n                                                                                                                       // 3279\n                                                                                                                       // 3280\n\t/* Fill System (highlight, background events, business hours)                                                         // 3281\n\t------------------------------------------------------------------------------------------------------------------*/  // 3282\n                                                                                                                       // 3283\n                                                                                                                       // 3284\n\t// Renders a set of rectangles over the given segments of time.                                                       // 3285\n\t// Returns a subset of segs, the segs that were actually rendered.                                                    // 3286\n\t// Responsible for populating this.elsByFill. TODO: better API for expressing this requirement                        // 3287\n\trenderFill: function(type, segs) {                                                                                    // 3288\n\t\t// subclasses must implement                                                                                         // 3289\n\t},                                                                                                                    // 3290\n                                                                                                                       // 3291\n                                                                                                                       // 3292\n\t// Unrenders a specific type of fill that is currently rendered on the grid                                           // 3293\n\tdestroyFill: function(type) {                                                                                         // 3294\n\t\tvar el = this.elsByFill[type];                                                                                       // 3295\n                                                                                                                       // 3296\n\t\tif (el) {                                                                                                            // 3297\n\t\t\tel.remove();                                                                                                        // 3298\n\t\t\tdelete this.elsByFill[type];                                                                                        // 3299\n\t\t}                                                                                                                    // 3300\n\t},                                                                                                                    // 3301\n                                                                                                                       // 3302\n                                                                                                                       // 3303\n\t// Renders and assigns an `el` property for each fill segment. Generic enough to work with different types.           // 3304\n\t// Only returns segments that successfully rendered.                                                                  // 3305\n\t// To be harnessed by renderFill (implemented by subclasses).                                                         // 3306\n\t// Analagous to renderFgSegEls.                                                                                       // 3307\n\trenderFillSegEls: function(type, segs) {                                                                              // 3308\n\t\tvar _this = this;                                                                                                    // 3309\n\t\tvar segElMethod = this[type + 'SegEl'];                                                                              // 3310\n\t\tvar html = '';                                                                                                       // 3311\n\t\tvar renderedSegs = [];                                                                                               // 3312\n\t\tvar i;                                                                                                               // 3313\n                                                                                                                       // 3314\n\t\tif (segs.length) {                                                                                                   // 3315\n                                                                                                                       // 3316\n\t\t\t// build a large concatenation of segment HTML                                                                      // 3317\n\t\t\tfor (i = 0; i < segs.length; i++) {                                                                                 // 3318\n\t\t\t\thtml += this.fillSegHtml(type, segs[i]);                                                                           // 3319\n\t\t\t}                                                                                                                   // 3320\n                                                                                                                       // 3321\n\t\t\t// Grab individual elements from the combined HTML string. Use each as the default rendering.                       // 3322\n\t\t\t// Then, compute the 'el' for each segment.                                                                         // 3323\n\t\t\t$(html).each(function(i, node) {                                                                                    // 3324\n\t\t\t\tvar seg = segs[i];                                                                                                 // 3325\n\t\t\t\tvar el = $(node);                                                                                                  // 3326\n                                                                                                                       // 3327\n\t\t\t\t// allow custom filter methods per-type                                                                            // 3328\n\t\t\t\tif (segElMethod) {                                                                                                 // 3329\n\t\t\t\t\tel = segElMethod.call(_this, seg, el);                                                                            // 3330\n\t\t\t\t}                                                                                                                  // 3331\n                                                                                                                       // 3332\n\t\t\t\tif (el) { // custom filters did not cancel the render                                                              // 3333\n\t\t\t\t\tel = $(el); // allow custom filter to return raw DOM node                                                         // 3334\n                                                                                                                       // 3335\n\t\t\t\t\t// correct element type? (would be bad if a non-TD were inserted into a table for example)                        // 3336\n\t\t\t\t\tif (el.is(_this.fillSegTag)) {                                                                                    // 3337\n\t\t\t\t\t\tseg.el = el;                                                                                                     // 3338\n\t\t\t\t\t\trenderedSegs.push(seg);                                                                                          // 3339\n\t\t\t\t\t}                                                                                                                 // 3340\n\t\t\t\t}                                                                                                                  // 3341\n\t\t\t});                                                                                                                 // 3342\n\t\t}                                                                                                                    // 3343\n                                                                                                                       // 3344\n\t\treturn renderedSegs;                                                                                                 // 3345\n\t},                                                                                                                    // 3346\n                                                                                                                       // 3347\n                                                                                                                       // 3348\n\tfillSegTag: 'div', // subclasses can override                                                                         // 3349\n                                                                                                                       // 3350\n                                                                                                                       // 3351\n\t// Builds the HTML needed for one fill segment. Generic enought o work with different types.                          // 3352\n\tfillSegHtml: function(type, seg) {                                                                                    // 3353\n                                                                                                                       // 3354\n\t\t// custom hooks per-type                                                                                             // 3355\n\t\tvar classesMethod = this[type + 'SegClasses'];                                                                       // 3356\n\t\tvar cssMethod = this[type + 'SegCss'];                                                                               // 3357\n                                                                                                                       // 3358\n\t\tvar classes = classesMethod ? classesMethod.call(this, seg) : [];                                                    // 3359\n\t\tvar css = cssToStr(cssMethod ? cssMethod.call(this, seg) : {});                                                      // 3360\n                                                                                                                       // 3361\n\t\treturn '<' + this.fillSegTag +                                                                                       // 3362\n\t\t\t(classes.length ? ' class=\"' + classes.join(' ') + '\"' : '') +                                                      // 3363\n\t\t\t(css ? ' style=\"' + css + '\"' : '') +                                                                               // 3364\n\t\t\t' />';                                                                                                              // 3365\n\t},                                                                                                                    // 3366\n                                                                                                                       // 3367\n                                                                                                                       // 3368\n\t/* Generic rendering utilities for subclasses                                                                         // 3369\n\t------------------------------------------------------------------------------------------------------------------*/  // 3370\n                                                                                                                       // 3371\n                                                                                                                       // 3372\n\t// Renders a day-of-week header row.                                                                                  // 3373\n\t// TODO: move to another class. not applicable to all Grids                                                           // 3374\n\theadHtml: function() {                                                                                                // 3375\n\t\treturn '' +                                                                                                          // 3376\n\t\t\t'<div class=\"fc-row ' + this.view.widgetHeaderClass + '\">' +                                                        // 3377\n\t\t\t\t'<table>' +                                                                                                        // 3378\n\t\t\t\t\t'<thead>' +                                                                                                       // 3379\n\t\t\t\t\t\tthis.rowHtml('head') + // leverages RowRenderer                                                                  // 3380\n\t\t\t\t\t'</thead>' +                                                                                                      // 3381\n\t\t\t\t'</table>' +                                                                                                       // 3382\n\t\t\t'</div>';                                                                                                           // 3383\n\t},                                                                                                                    // 3384\n                                                                                                                       // 3385\n                                                                                                                       // 3386\n\t// Used by the `headHtml` method, via RowRenderer, for rendering the HTML of a day-of-week header cell                // 3387\n\t// TODO: move to another class. not applicable to all Grids                                                           // 3388\n\theadCellHtml: function(cell) {                                                                                        // 3389\n\t\tvar view = this.view;                                                                                                // 3390\n\t\tvar date = cell.start;                                                                                               // 3391\n                                                                                                                       // 3392\n\t\treturn '' +                                                                                                          // 3393\n\t\t\t'<th class=\"fc-day-header ' + view.widgetHeaderClass + ' fc-' + dayIDs[date.day()] + '\">' +                         // 3394\n\t\t\t\thtmlEscape(date.format(this.colHeadFormat)) +                                                                      // 3395\n\t\t\t'</th>';                                                                                                            // 3396\n\t},                                                                                                                    // 3397\n                                                                                                                       // 3398\n                                                                                                                       // 3399\n\t// Renders the HTML for a single-day background cell                                                                  // 3400\n\tbgCellHtml: function(cell) {                                                                                          // 3401\n\t\tvar view = this.view;                                                                                                // 3402\n\t\tvar date = cell.start;                                                                                               // 3403\n\t\tvar classes = this.getDayClasses(date);                                                                              // 3404\n                                                                                                                       // 3405\n\t\tclasses.unshift('fc-day', view.widgetContentClass);                                                                  // 3406\n                                                                                                                       // 3407\n\t\treturn '<td class=\"' + classes.join(' ') + '\"' +                                                                     // 3408\n\t\t\t' data-date=\"' + date.format('YYYY-MM-DD') + '\"' + // if date has a time, won't format it                           // 3409\n\t\t\t'></td>';                                                                                                           // 3410\n\t},                                                                                                                    // 3411\n                                                                                                                       // 3412\n                                                                                                                       // 3413\n\t// Computes HTML classNames for a single-day cell                                                                     // 3414\n\tgetDayClasses: function(date) {                                                                                       // 3415\n\t\tvar view = this.view;                                                                                                // 3416\n\t\tvar today = view.calendar.getNow().stripTime();                                                                      // 3417\n\t\tvar classes = [ 'fc-' + dayIDs[date.day()] ];                                                                        // 3418\n                                                                                                                       // 3419\n\t\tif (                                                                                                                 // 3420\n\t\t\tview.intervalDuration.as('months') == 1 &&                                                                          // 3421\n\t\t\tdate.month() != view.intervalStart.month()                                                                          // 3422\n\t\t) {                                                                                                                  // 3423\n\t\t\tclasses.push('fc-other-month');                                                                                     // 3424\n\t\t}                                                                                                                    // 3425\n                                                                                                                       // 3426\n\t\tif (date.isSame(today, 'day')) {                                                                                     // 3427\n\t\t\tclasses.push(                                                                                                       // 3428\n\t\t\t\t'fc-today',                                                                                                        // 3429\n\t\t\t\tview.highlightStateClass                                                                                           // 3430\n\t\t\t);                                                                                                                  // 3431\n\t\t}                                                                                                                    // 3432\n\t\telse if (date < today) {                                                                                             // 3433\n\t\t\tclasses.push('fc-past');                                                                                            // 3434\n\t\t}                                                                                                                    // 3435\n\t\telse {                                                                                                               // 3436\n\t\t\tclasses.push('fc-future');                                                                                          // 3437\n\t\t}                                                                                                                    // 3438\n                                                                                                                       // 3439\n\t\treturn classes;                                                                                                      // 3440\n\t}                                                                                                                     // 3441\n                                                                                                                       // 3442\n});                                                                                                                    // 3443\n                                                                                                                       // 3444\n;;                                                                                                                     // 3445\n                                                                                                                       // 3446\n/* Event-rendering and event-interaction methods for the abstract Grid class                                           // 3447\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 3449\nGrid.mixin({                                                                                                           // 3450\n                                                                                                                       // 3451\n\tmousedOverSeg: null, // the segment object the user's mouse is over. null if over nothing                             // 3452\n\tisDraggingSeg: false, // is a segment being dragged? boolean                                                          // 3453\n\tisResizingSeg: false, // is a segment being resized? boolean                                                          // 3454\n\tisDraggingExternal: false, // jqui-dragging an external element? boolean                                              // 3455\n\tsegs: null, // the event segments currently rendered in the grid                                                      // 3456\n                                                                                                                       // 3457\n                                                                                                                       // 3458\n\t// Renders the given events onto the grid                                                                             // 3459\n\trenderEvents: function(events) {                                                                                      // 3460\n\t\tvar segs = this.eventsToSegs(events);                                                                                // 3461\n\t\tvar bgSegs = [];                                                                                                     // 3462\n\t\tvar fgSegs = [];                                                                                                     // 3463\n\t\tvar i, seg;                                                                                                          // 3464\n                                                                                                                       // 3465\n\t\tfor (i = 0; i < segs.length; i++) {                                                                                  // 3466\n\t\t\tseg = segs[i];                                                                                                      // 3467\n                                                                                                                       // 3468\n\t\t\tif (isBgEvent(seg.event)) {                                                                                         // 3469\n\t\t\t\tbgSegs.push(seg);                                                                                                  // 3470\n\t\t\t}                                                                                                                   // 3471\n\t\t\telse {                                                                                                              // 3472\n\t\t\t\tfgSegs.push(seg);                                                                                                  // 3473\n\t\t\t}                                                                                                                   // 3474\n\t\t}                                                                                                                    // 3475\n                                                                                                                       // 3476\n\t\t// Render each different type of segment.                                                                            // 3477\n\t\t// Each function may return a subset of the segs, segs that were actually rendered.                                  // 3478\n\t\tbgSegs = this.renderBgSegs(bgSegs) || bgSegs;                                                                        // 3479\n\t\tfgSegs = this.renderFgSegs(fgSegs) || fgSegs;                                                                        // 3480\n                                                                                                                       // 3481\n\t\tthis.segs = bgSegs.concat(fgSegs);                                                                                   // 3482\n\t},                                                                                                                    // 3483\n                                                                                                                       // 3484\n                                                                                                                       // 3485\n\t// Unrenders all events currently rendered on the grid                                                                // 3486\n\tdestroyEvents: function() {                                                                                           // 3487\n\t\tthis.triggerSegMouseout(); // trigger an eventMouseout if user's mouse is over an event                              // 3488\n                                                                                                                       // 3489\n\t\tthis.destroyFgSegs();                                                                                                // 3490\n\t\tthis.destroyBgSegs();                                                                                                // 3491\n                                                                                                                       // 3492\n\t\tthis.segs = null;                                                                                                    // 3493\n\t},                                                                                                                    // 3494\n                                                                                                                       // 3495\n                                                                                                                       // 3496\n\t// Retrieves all rendered segment objects currently rendered on the grid                                              // 3497\n\tgetEventSegs: function() {                                                                                            // 3498\n\t\treturn this.segs || [];                                                                                              // 3499\n\t},                                                                                                                    // 3500\n                                                                                                                       // 3501\n                                                                                                                       // 3502\n\t/* Foreground Segment Rendering                                                                                       // 3503\n\t------------------------------------------------------------------------------------------------------------------*/  // 3504\n                                                                                                                       // 3505\n                                                                                                                       // 3506\n\t// Renders foreground event segments onto the grid. May return a subset of segs that were rendered.                   // 3507\n\trenderFgSegs: function(segs) {                                                                                        // 3508\n\t\t// subclasses must implement                                                                                         // 3509\n\t},                                                                                                                    // 3510\n                                                                                                                       // 3511\n                                                                                                                       // 3512\n\t// Unrenders all currently rendered foreground segments                                                               // 3513\n\tdestroyFgSegs: function() {                                                                                           // 3514\n\t\t// subclasses must implement                                                                                         // 3515\n\t},                                                                                                                    // 3516\n                                                                                                                       // 3517\n                                                                                                                       // 3518\n\t// Renders and assigns an `el` property for each foreground event segment.                                            // 3519\n\t// Only returns segments that successfully rendered.                                                                  // 3520\n\t// A utility that subclasses may use.                                                                                 // 3521\n\trenderFgSegEls: function(segs, disableResizing) {                                                                     // 3522\n\t\tvar view = this.view;                                                                                                // 3523\n\t\tvar html = '';                                                                                                       // 3524\n\t\tvar renderedSegs = [];                                                                                               // 3525\n\t\tvar i;                                                                                                               // 3526\n                                                                                                                       // 3527\n\t\tif (segs.length) { // don't build an empty html string                                                               // 3528\n                                                                                                                       // 3529\n\t\t\t// build a large concatenation of event segment HTML                                                                // 3530\n\t\t\tfor (i = 0; i < segs.length; i++) {                                                                                 // 3531\n\t\t\t\thtml += this.fgSegHtml(segs[i], disableResizing);                                                                  // 3532\n\t\t\t}                                                                                                                   // 3533\n                                                                                                                       // 3534\n\t\t\t// Grab individual elements from the combined HTML string. Use each as the default rendering.                       // 3535\n\t\t\t// Then, compute the 'el' for each segment. An el might be null if the eventRender callback returned false.         // 3536\n\t\t\t$(html).each(function(i, node) {                                                                                    // 3537\n\t\t\t\tvar seg = segs[i];                                                                                                 // 3538\n\t\t\t\tvar el = view.resolveEventEl(seg.event, $(node));                                                                  // 3539\n                                                                                                                       // 3540\n\t\t\t\tif (el) {                                                                                                          // 3541\n\t\t\t\t\tel.data('fc-seg', seg); // used by handlers                                                                       // 3542\n\t\t\t\t\tseg.el = el;                                                                                                      // 3543\n\t\t\t\t\trenderedSegs.push(seg);                                                                                           // 3544\n\t\t\t\t}                                                                                                                  // 3545\n\t\t\t});                                                                                                                 // 3546\n\t\t}                                                                                                                    // 3547\n                                                                                                                       // 3548\n\t\treturn renderedSegs;                                                                                                 // 3549\n\t},                                                                                                                    // 3550\n                                                                                                                       // 3551\n                                                                                                                       // 3552\n\t// Generates the HTML for the default rendering of a foreground event segment. Used by renderFgSegEls()               // 3553\n\tfgSegHtml: function(seg, disableResizing) {                                                                           // 3554\n\t\t// subclasses should implement                                                                                       // 3555\n\t},                                                                                                                    // 3556\n                                                                                                                       // 3557\n                                                                                                                       // 3558\n\t/* Background Segment Rendering                                                                                       // 3559\n\t------------------------------------------------------------------------------------------------------------------*/  // 3560\n                                                                                                                       // 3561\n                                                                                                                       // 3562\n\t// Renders the given background event segments onto the grid.                                                         // 3563\n\t// Returns a subset of the segs that were actually rendered.                                                          // 3564\n\trenderBgSegs: function(segs) {                                                                                        // 3565\n\t\treturn this.renderFill('bgEvent', segs);                                                                             // 3566\n\t},                                                                                                                    // 3567\n                                                                                                                       // 3568\n                                                                                                                       // 3569\n\t// Unrenders all the currently rendered background event segments                                                     // 3570\n\tdestroyBgSegs: function() {                                                                                           // 3571\n\t\tthis.destroyFill('bgEvent');                                                                                         // 3572\n\t},                                                                                                                    // 3573\n                                                                                                                       // 3574\n                                                                                                                       // 3575\n\t// Renders a background event element, given the default rendering. Called by the fill system.                        // 3576\n\tbgEventSegEl: function(seg, el) {                                                                                     // 3577\n\t\treturn this.view.resolveEventEl(seg.event, el); // will filter through eventRender                                   // 3578\n\t},                                                                                                                    // 3579\n                                                                                                                       // 3580\n                                                                                                                       // 3581\n\t// Generates an array of classNames to be used for the default rendering of a background event.                       // 3582\n\t// Called by the fill system.                                                                                         // 3583\n\tbgEventSegClasses: function(seg) {                                                                                    // 3584\n\t\tvar event = seg.event;                                                                                               // 3585\n\t\tvar source = event.source || {};                                                                                     // 3586\n                                                                                                                       // 3587\n\t\treturn [ 'fc-bgevent' ].concat(                                                                                      // 3588\n\t\t\tevent.className,                                                                                                    // 3589\n\t\t\tsource.className || []                                                                                              // 3590\n\t\t);                                                                                                                   // 3591\n\t},                                                                                                                    // 3592\n                                                                                                                       // 3593\n                                                                                                                       // 3594\n\t// Generates a semicolon-separated CSS string to be used for the default rendering of a background event.             // 3595\n\t// Called by the fill system.                                                                                         // 3596\n\t// TODO: consolidate with getEventSkinCss?                                                                            // 3597\n\tbgEventSegCss: function(seg) {                                                                                        // 3598\n\t\tvar view = this.view;                                                                                                // 3599\n\t\tvar event = seg.event;                                                                                               // 3600\n\t\tvar source = event.source || {};                                                                                     // 3601\n                                                                                                                       // 3602\n\t\treturn {                                                                                                             // 3603\n\t\t\t'background-color':                                                                                                 // 3604\n\t\t\t\tevent.backgroundColor ||                                                                                           // 3605\n\t\t\t\tevent.color ||                                                                                                     // 3606\n\t\t\t\tsource.backgroundColor ||                                                                                          // 3607\n\t\t\t\tsource.color ||                                                                                                    // 3608\n\t\t\t\tview.opt('eventBackgroundColor') ||                                                                                // 3609\n\t\t\t\tview.opt('eventColor')                                                                                             // 3610\n\t\t};                                                                                                                   // 3611\n\t},                                                                                                                    // 3612\n                                                                                                                       // 3613\n                                                                                                                       // 3614\n\t// Generates an array of classNames to be used for the rendering business hours overlay. Called by the fill system.   // 3615\n\tbusinessHoursSegClasses: function(seg) {                                                                              // 3616\n\t\treturn [ 'fc-nonbusiness', 'fc-bgevent' ];                                                                           // 3617\n\t},                                                                                                                    // 3618\n                                                                                                                       // 3619\n                                                                                                                       // 3620\n\t/* Handlers                                                                                                           // 3621\n\t------------------------------------------------------------------------------------------------------------------*/  // 3622\n                                                                                                                       // 3623\n                                                                                                                       // 3624\n\t// Attaches event-element-related handlers to the container element and leverage bubbling                             // 3625\n\tbindSegHandlers: function() {                                                                                         // 3626\n\t\tvar _this = this;                                                                                                    // 3627\n\t\tvar view = this.view;                                                                                                // 3628\n                                                                                                                       // 3629\n\t\t$.each(                                                                                                              // 3630\n\t\t\t{                                                                                                                   // 3631\n\t\t\t\tmouseenter: function(seg, ev) {                                                                                    // 3632\n\t\t\t\t\t_this.triggerSegMouseover(seg, ev);                                                                               // 3633\n\t\t\t\t},                                                                                                                 // 3634\n\t\t\t\tmouseleave: function(seg, ev) {                                                                                    // 3635\n\t\t\t\t\t_this.triggerSegMouseout(seg, ev);                                                                                // 3636\n\t\t\t\t},                                                                                                                 // 3637\n\t\t\t\tclick: function(seg, ev) {                                                                                         // 3638\n\t\t\t\t\treturn view.trigger('eventClick', this, seg.event, ev); // can return `false` to cancel                           // 3639\n\t\t\t\t},                                                                                                                 // 3640\n\t\t\t\tmousedown: function(seg, ev) {                                                                                     // 3641\n\t\t\t\t\tif ($(ev.target).is('.fc-resizer') && view.isEventResizable(seg.event)) {                                         // 3642\n\t\t\t\t\t\t_this.segResizeMousedown(seg, ev, $(ev.target).is('.fc-start-resizer'));                                         // 3643\n\t\t\t\t\t}                                                                                                                 // 3644\n\t\t\t\t\telse if (view.isEventDraggable(seg.event)) {                                                                      // 3645\n\t\t\t\t\t\t_this.segDragMousedown(seg, ev);                                                                                 // 3646\n\t\t\t\t\t}                                                                                                                 // 3647\n\t\t\t\t}                                                                                                                  // 3648\n\t\t\t},                                                                                                                  // 3649\n\t\t\tfunction(name, func) {                                                                                              // 3650\n\t\t\t\t// attach the handler to the container element and only listen for real event elements via bubbling                // 3651\n\t\t\t\t_this.el.on(name, '.fc-event-container > *', function(ev) {                                                        // 3652\n\t\t\t\t\tvar seg = $(this).data('fc-seg'); // grab segment data. put there by View::renderEvents                           // 3653\n                                                                                                                       // 3654\n\t\t\t\t\t// only call the handlers if there is not a drag/resize in progress                                               // 3655\n\t\t\t\t\tif (seg && !_this.isDraggingSeg && !_this.isResizingSeg) {                                                        // 3656\n\t\t\t\t\t\treturn func.call(this, seg, ev); // `this` will be the event element                                             // 3657\n\t\t\t\t\t}                                                                                                                 // 3658\n\t\t\t\t});                                                                                                                // 3659\n\t\t\t}                                                                                                                   // 3660\n\t\t);                                                                                                                   // 3661\n\t},                                                                                                                    // 3662\n                                                                                                                       // 3663\n                                                                                                                       // 3664\n\t// Updates internal state and triggers handlers for when an event element is moused over                              // 3665\n\ttriggerSegMouseover: function(seg, ev) {                                                                              // 3666\n\t\tif (!this.mousedOverSeg) {                                                                                           // 3667\n\t\t\tthis.mousedOverSeg = seg;                                                                                           // 3668\n\t\t\tthis.view.trigger('eventMouseover', seg.el[0], seg.event, ev);                                                      // 3669\n\t\t}                                                                                                                    // 3670\n\t},                                                                                                                    // 3671\n                                                                                                                       // 3672\n                                                                                                                       // 3673\n\t// Updates internal state and triggers handlers for when an event element is moused out.                              // 3674\n\t// Can be given no arguments, in which case it will mouseout the segment that was previously moused over.             // 3675\n\ttriggerSegMouseout: function(seg, ev) {                                                                               // 3676\n\t\tev = ev || {}; // if given no args, make a mock mouse event                                                          // 3677\n                                                                                                                       // 3678\n\t\tif (this.mousedOverSeg) {                                                                                            // 3679\n\t\t\tseg = seg || this.mousedOverSeg; // if given no args, use the currently moused-over segment                         // 3680\n\t\t\tthis.mousedOverSeg = null;                                                                                          // 3681\n\t\t\tthis.view.trigger('eventMouseout', seg.el[0], seg.event, ev);                                                       // 3682\n\t\t}                                                                                                                    // 3683\n\t},                                                                                                                    // 3684\n                                                                                                                       // 3685\n                                                                                                                       // 3686\n\t/* Event Dragging                                                                                                     // 3687\n\t------------------------------------------------------------------------------------------------------------------*/  // 3688\n                                                                                                                       // 3689\n                                                                                                                       // 3690\n\t// Called when the user does a mousedown on an event, which might lead to dragging.                                   // 3691\n\t// Generic enough to work with any type of Grid.                                                                      // 3692\n\tsegDragMousedown: function(seg, ev) {                                                                                 // 3693\n\t\tvar _this = this;                                                                                                    // 3694\n\t\tvar view = this.view;                                                                                                // 3695\n\t\tvar calendar = view.calendar;                                                                                        // 3696\n\t\tvar el = seg.el;                                                                                                     // 3697\n\t\tvar event = seg.event;                                                                                               // 3698\n\t\tvar dropLocation;                                                                                                    // 3699\n                                                                                                                       // 3700\n\t\t// A clone of the original element that will move with the mouse                                                     // 3701\n\t\tvar mouseFollower = new MouseFollower(seg.el, {                                                                      // 3702\n\t\t\tparentEl: view.el,                                                                                                  // 3703\n\t\t\topacity: view.opt('dragOpacity'),                                                                                   // 3704\n\t\t\trevertDuration: view.opt('dragRevertDuration'),                                                                     // 3705\n\t\t\tzIndex: 2 // one above the .fc-view                                                                                 // 3706\n\t\t});                                                                                                                  // 3707\n                                                                                                                       // 3708\n\t\t// Tracks mouse movement over the *view's* coordinate map. Allows dragging and dropping between subcomponents        // 3709\n\t\t// of the view.                                                                                                      // 3710\n\t\tvar dragListener = new CellDragListener(view.coordMap, {                                                             // 3711\n\t\t\tdistance: 5,                                                                                                        // 3712\n\t\t\tscroll: view.opt('dragScroll'),                                                                                     // 3713\n\t\t\tsubjectEl: el,                                                                                                      // 3714\n\t\t\tsubjectCenter: true,                                                                                                // 3715\n\t\t\tlistenStart: function(ev) {                                                                                         // 3716\n\t\t\t\tmouseFollower.hide(); // don't show until we know this is a real drag                                              // 3717\n\t\t\t\tmouseFollower.start(ev);                                                                                           // 3718\n\t\t\t},                                                                                                                  // 3719\n\t\t\tdragStart: function(ev) {                                                                                           // 3720\n\t\t\t\t_this.triggerSegMouseout(seg, ev); // ensure a mouseout on the manipulated event has been reported                 // 3721\n\t\t\t\t_this.segDragStart(seg, ev);                                                                                       // 3722\n\t\t\t\tview.hideEvent(event); // hide all event segments. our mouseFollower will take over                                // 3723\n\t\t\t},                                                                                                                  // 3724\n\t\t\tcellOver: function(cell, isOrig, origCell) {                                                                        // 3725\n                                                                                                                       // 3726\n\t\t\t\t// starting cell could be forced (DayGrid.limit)                                                                   // 3727\n\t\t\t\tif (seg.cell) {                                                                                                    // 3728\n\t\t\t\t\torigCell = seg.cell;                                                                                              // 3729\n\t\t\t\t}                                                                                                                  // 3730\n                                                                                                                       // 3731\n\t\t\t\tdropLocation = _this.computeEventDrop(origCell, cell, event);                                                      // 3732\n                                                                                                                       // 3733\n\t\t\t\tif (dropLocation && !calendar.isEventRangeAllowed(dropLocation, event)) {                                          // 3734\n\t\t\t\t\tdisableCursor();                                                                                                  // 3735\n\t\t\t\t\tdropLocation = null;                                                                                              // 3736\n\t\t\t\t}                                                                                                                  // 3737\n                                                                                                                       // 3738\n\t\t\t\t// if a valid drop location, have the subclass render a visual indication                                          // 3739\n\t\t\t\tif (dropLocation && view.renderDrag(dropLocation, seg)) {                                                          // 3740\n\t\t\t\t\tmouseFollower.hide(); // if the subclass is already using a mock event \"helper\", hide our own                     // 3741\n\t\t\t\t}                                                                                                                  // 3742\n\t\t\t\telse {                                                                                                             // 3743\n\t\t\t\t\tmouseFollower.show(); // otherwise, have the helper follow the mouse (no snapping)                                // 3744\n\t\t\t\t}                                                                                                                  // 3745\n                                                                                                                       // 3746\n\t\t\t\tif (isOrig) {                                                                                                      // 3747\n\t\t\t\t\tdropLocation = null; // needs to have moved cells to be a valid drop                                              // 3748\n\t\t\t\t}                                                                                                                  // 3749\n\t\t\t},                                                                                                                  // 3750\n\t\t\tcellOut: function() { // called before mouse moves to a different cell OR moved out of all cells                    // 3751\n\t\t\t\tview.destroyDrag(); // unrender whatever was done in renderDrag                                                    // 3752\n\t\t\t\tmouseFollower.show(); // show in case we are moving out of all cells                                               // 3753\n\t\t\t\tdropLocation = null;                                                                                               // 3754\n\t\t\t},                                                                                                                  // 3755\n\t\t\tcellDone: function() { // Called after a cellOut OR before a dragStop                                               // 3756\n\t\t\t\tenableCursor();                                                                                                    // 3757\n\t\t\t},                                                                                                                  // 3758\n\t\t\tdragStop: function(ev) {                                                                                            // 3759\n\t\t\t\t// do revert animation if hasn't changed. calls a callback when finished (whether animation or not)                // 3760\n\t\t\t\tmouseFollower.stop(!dropLocation, function() {                                                                     // 3761\n\t\t\t\t\tview.destroyDrag();                                                                                               // 3762\n\t\t\t\t\tview.showEvent(event);                                                                                            // 3763\n\t\t\t\t\t_this.segDragStop(seg, ev);                                                                                       // 3764\n                                                                                                                       // 3765\n\t\t\t\t\tif (dropLocation) {                                                                                               // 3766\n\t\t\t\t\t\tview.reportEventDrop(event, dropLocation, this.largeUnit, el, ev);                                               // 3767\n\t\t\t\t\t}                                                                                                                 // 3768\n\t\t\t\t});                                                                                                                // 3769\n\t\t\t},                                                                                                                  // 3770\n\t\t\tlistenStop: function() {                                                                                            // 3771\n\t\t\t\tmouseFollower.stop(); // put in listenStop in case there was a mousedown but the drag never started                // 3772\n\t\t\t}                                                                                                                   // 3773\n\t\t});                                                                                                                  // 3774\n                                                                                                                       // 3775\n\t\tdragListener.mousedown(ev); // start listening, which will eventually lead to a dragStart                            // 3776\n\t},                                                                                                                    // 3777\n                                                                                                                       // 3778\n                                                                                                                       // 3779\n\t// Called before event segment dragging starts                                                                        // 3780\n\tsegDragStart: function(seg, ev) {                                                                                     // 3781\n\t\tthis.isDraggingSeg = true;                                                                                           // 3782\n\t\tthis.view.trigger('eventDragStart', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy                    // 3783\n\t},                                                                                                                    // 3784\n                                                                                                                       // 3785\n                                                                                                                       // 3786\n\t// Called after event segment dragging stops                                                                          // 3787\n\tsegDragStop: function(seg, ev) {                                                                                      // 3788\n\t\tthis.isDraggingSeg = false;                                                                                          // 3789\n\t\tthis.view.trigger('eventDragStop', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy                     // 3790\n\t},                                                                                                                    // 3791\n                                                                                                                       // 3792\n                                                                                                                       // 3793\n\t// Given the cell an event drag began, and the cell event was dropped, calculates the new start/end/allDay            // 3794\n\t// values for the event. Subclasses may override and set additional properties to be used by renderDrag.              // 3795\n\t// A falsy returned value indicates an invalid drop.                                                                  // 3796\n\tcomputeEventDrop: function(startCell, endCell, event) {                                                               // 3797\n\t\tvar calendar = this.view.calendar;                                                                                   // 3798\n\t\tvar dragStart = startCell.start;                                                                                     // 3799\n\t\tvar dragEnd = endCell.start;                                                                                         // 3800\n\t\tvar delta;                                                                                                           // 3801\n\t\tvar dropLocation;                                                                                                    // 3802\n                                                                                                                       // 3803\n\t\tif (dragStart.hasTime() === dragEnd.hasTime()) {                                                                     // 3804\n\t\t\tdelta = this.diffDates(dragEnd, dragStart);                                                                         // 3805\n                                                                                                                       // 3806\n\t\t\t// if an all-day event was in a timed area and it was dragged to a different time,                                  // 3807\n\t\t\t// guarantee an end and adjust start/end to have times                                                              // 3808\n\t\t\tif (event.allDay && durationHasTime(delta)) {                                                                       // 3809\n\t\t\t\tdropLocation = {                                                                                                   // 3810\n\t\t\t\t\tstart: event.start.clone(),                                                                                       // 3811\n\t\t\t\t\tend: calendar.getEventEnd(event), // will be an ambig day                                                         // 3812\n\t\t\t\t\tallDay: false // for normalizeEventRangeTimes                                                                     // 3813\n\t\t\t\t};                                                                                                                 // 3814\n\t\t\t\tcalendar.normalizeEventRangeTimes(dropLocation);                                                                   // 3815\n\t\t\t}                                                                                                                   // 3816\n\t\t\t// othewise, work off existing values                                                                               // 3817\n\t\t\telse {                                                                                                              // 3818\n\t\t\t\tdropLocation = {                                                                                                   // 3819\n\t\t\t\t\tstart: event.start.clone(),                                                                                       // 3820\n\t\t\t\t\tend: event.end ? event.end.clone() : null,                                                                        // 3821\n\t\t\t\t\tallDay: event.allDay // keep it the same                                                                          // 3822\n\t\t\t\t};                                                                                                                 // 3823\n\t\t\t}                                                                                                                   // 3824\n                                                                                                                       // 3825\n\t\t\tdropLocation.start.add(delta);                                                                                      // 3826\n\t\t\tif (dropLocation.end) {                                                                                             // 3827\n\t\t\t\tdropLocation.end.add(delta);                                                                                       // 3828\n\t\t\t}                                                                                                                   // 3829\n\t\t}                                                                                                                    // 3830\n\t\telse {                                                                                                               // 3831\n\t\t\t// if switching from day <-> timed, start should be reset to the dropped date, and the end cleared                  // 3832\n\t\t\tdropLocation = {                                                                                                    // 3833\n\t\t\t\tstart: dragEnd.clone(),                                                                                            // 3834\n\t\t\t\tend: null, // end should be cleared                                                                                // 3835\n\t\t\t\tallDay: !dragEnd.hasTime()                                                                                         // 3836\n\t\t\t};                                                                                                                  // 3837\n\t\t}                                                                                                                    // 3838\n                                                                                                                       // 3839\n\t\treturn dropLocation;                                                                                                 // 3840\n\t},                                                                                                                    // 3841\n                                                                                                                       // 3842\n                                                                                                                       // 3843\n\t// Utility for apply dragOpacity to a jQuery set                                                                      // 3844\n\tapplyDragOpacity: function(els) {                                                                                     // 3845\n\t\tvar opacity = this.view.opt('dragOpacity');                                                                          // 3846\n                                                                                                                       // 3847\n\t\tif (opacity != null) {                                                                                               // 3848\n\t\t\tels.each(function(i, node) {                                                                                        // 3849\n\t\t\t\t// Don't use jQuery (will set an IE filter), do it the old fashioned way.                                          // 3850\n\t\t\t\t// In IE8, a helper element will disappears if there's a filter.                                                   // 3851\n\t\t\t\tnode.style.opacity = opacity;                                                                                      // 3852\n\t\t\t});                                                                                                                 // 3853\n\t\t}                                                                                                                    // 3854\n\t},                                                                                                                    // 3855\n                                                                                                                       // 3856\n                                                                                                                       // 3857\n\t/* External Element Dragging                                                                                          // 3858\n\t------------------------------------------------------------------------------------------------------------------*/  // 3859\n                                                                                                                       // 3860\n                                                                                                                       // 3861\n\t// Called when a jQuery UI drag is initiated anywhere in the DOM                                                      // 3862\n\texternalDragStart: function(ev, ui) {                                                                                 // 3863\n\t\tvar view = this.view;                                                                                                // 3864\n\t\tvar el;                                                                                                              // 3865\n\t\tvar accept;                                                                                                          // 3866\n                                                                                                                       // 3867\n\t\tif (view.opt('droppable')) { // only listen if this setting is on                                                    // 3868\n\t\t\tel = $((ui ? ui.item : null) || ev.target);                                                                         // 3869\n                                                                                                                       // 3870\n\t\t\t// Test that the dragged element passes the dropAccept selector or filter function.                                 // 3871\n\t\t\t// FYI, the default is \"*\" (matches all)                                                                            // 3872\n\t\t\taccept = view.opt('dropAccept');                                                                                    // 3873\n\t\t\tif ($.isFunction(accept) ? accept.call(el[0], el) : el.is(accept)) {                                                // 3874\n\t\t\t\tif (!this.isDraggingExternal) { // prevent double-listening if fired twice                                         // 3875\n\t\t\t\t\tthis.listenToExternalDrag(el, ev, ui);                                                                            // 3876\n\t\t\t\t}                                                                                                                  // 3877\n\t\t\t}                                                                                                                   // 3878\n\t\t}                                                                                                                    // 3879\n\t},                                                                                                                    // 3880\n                                                                                                                       // 3881\n                                                                                                                       // 3882\n\t// Called when a jQuery UI drag starts and it needs to be monitored for cell dropping                                 // 3883\n\tlistenToExternalDrag: function(el, ev, ui) {                                                                          // 3884\n\t\tvar _this = this;                                                                                                    // 3885\n\t\tvar meta = getDraggedElMeta(el); // extra data about event drop, including possible event to create                  // 3886\n\t\tvar dragListener;                                                                                                    // 3887\n\t\tvar dropLocation; // a null value signals an unsuccessful drag                                                       // 3888\n                                                                                                                       // 3889\n\t\t// listener that tracks mouse movement over date-associated pixel regions                                            // 3890\n\t\tdragListener = new CellDragListener(this.coordMap, {                                                                 // 3891\n\t\t\tlistenStart: function() {                                                                                           // 3892\n\t\t\t\t_this.isDraggingExternal = true;                                                                                   // 3893\n\t\t\t},                                                                                                                  // 3894\n\t\t\tcellOver: function(cell) {                                                                                          // 3895\n\t\t\t\tdropLocation = _this.computeExternalDrop(cell, meta);                                                              // 3896\n\t\t\t\tif (dropLocation) {                                                                                                // 3897\n\t\t\t\t\t_this.renderDrag(dropLocation); // called without a seg parameter                                                 // 3898\n\t\t\t\t}                                                                                                                  // 3899\n\t\t\t\telse { // invalid drop cell                                                                                        // 3900\n\t\t\t\t\tdisableCursor();                                                                                                  // 3901\n\t\t\t\t}                                                                                                                  // 3902\n\t\t\t},                                                                                                                  // 3903\n\t\t\tcellOut: function() {                                                                                               // 3904\n\t\t\t\tdropLocation = null; // signal unsuccessful                                                                        // 3905\n\t\t\t\t_this.destroyDrag();                                                                                               // 3906\n\t\t\t\tenableCursor();                                                                                                    // 3907\n\t\t\t},                                                                                                                  // 3908\n\t\t\tdragStop: function() {                                                                                              // 3909\n\t\t\t\t_this.destroyDrag();                                                                                               // 3910\n\t\t\t\tenableCursor();                                                                                                    // 3911\n                                                                                                                       // 3912\n\t\t\t\tif (dropLocation) { // element was dropped on a valid date/time cell                                               // 3913\n\t\t\t\t\t_this.view.reportExternalDrop(meta, dropLocation, el, ev, ui);                                                    // 3914\n\t\t\t\t}                                                                                                                  // 3915\n\t\t\t},                                                                                                                  // 3916\n\t\t\tlistenStop: function() {                                                                                            // 3917\n\t\t\t\t_this.isDraggingExternal = false;                                                                                  // 3918\n\t\t\t}                                                                                                                   // 3919\n\t\t});                                                                                                                  // 3920\n                                                                                                                       // 3921\n\t\tdragListener.startDrag(ev); // start listening immediately                                                           // 3922\n\t},                                                                                                                    // 3923\n                                                                                                                       // 3924\n                                                                                                                       // 3925\n\t// Given a cell to be dropped upon, and misc data associated with the jqui drag (guaranteed to be a plain object),    // 3926\n\t// returns start/end dates for the event that would result from the hypothetical drop. end might be null.             // 3927\n\t// Returning a null value signals an invalid drop cell.                                                               // 3928\n\tcomputeExternalDrop: function(cell, meta) {                                                                           // 3929\n\t\tvar dropLocation = {                                                                                                 // 3930\n\t\t\tstart: cell.start.clone(),                                                                                          // 3931\n\t\t\tend: null                                                                                                           // 3932\n\t\t};                                                                                                                   // 3933\n                                                                                                                       // 3934\n\t\t// if dropped on an all-day cell, and element's metadata specified a time, set it                                    // 3935\n\t\tif (meta.startTime && !dropLocation.start.hasTime()) {                                                               // 3936\n\t\t\tdropLocation.start.time(meta.startTime);                                                                            // 3937\n\t\t}                                                                                                                    // 3938\n                                                                                                                       // 3939\n\t\tif (meta.duration) {                                                                                                 // 3940\n\t\t\tdropLocation.end = dropLocation.start.clone().add(meta.duration);                                                   // 3941\n\t\t}                                                                                                                    // 3942\n                                                                                                                       // 3943\n\t\tif (!this.view.calendar.isExternalDropRangeAllowed(dropLocation, meta.eventProps)) {                                 // 3944\n\t\t\treturn null;                                                                                                        // 3945\n\t\t}                                                                                                                    // 3946\n                                                                                                                       // 3947\n\t\treturn dropLocation;                                                                                                 // 3948\n\t},                                                                                                                    // 3949\n                                                                                                                       // 3950\n                                                                                                                       // 3951\n                                                                                                                       // 3952\n\t/* Drag Rendering (for both events and an external elements)                                                          // 3953\n\t------------------------------------------------------------------------------------------------------------------*/  // 3954\n                                                                                                                       // 3955\n                                                                                                                       // 3956\n\t// Renders a visual indication of an event or external element being dragged.                                         // 3957\n\t// `dropLocation` contains hypothetical start/end/allDay values the event would have if dropped. end can be null.     // 3958\n\t// `seg` is the internal segment object that is being dragged. If dragging an external element, `seg` is null.        // 3959\n\t// A truthy returned value indicates this method has rendered a helper element.                                       // 3960\n\trenderDrag: function(dropLocation, seg) {                                                                             // 3961\n\t\t// subclasses must implement                                                                                         // 3962\n\t},                                                                                                                    // 3963\n                                                                                                                       // 3964\n                                                                                                                       // 3965\n\t// Unrenders a visual indication of an event or external element being dragged                                        // 3966\n\tdestroyDrag: function() {                                                                                             // 3967\n\t\t// subclasses must implement                                                                                         // 3968\n\t},                                                                                                                    // 3969\n                                                                                                                       // 3970\n                                                                                                                       // 3971\n\t/* Resizing                                                                                                           // 3972\n\t------------------------------------------------------------------------------------------------------------------*/  // 3973\n                                                                                                                       // 3974\n                                                                                                                       // 3975\n\t// Called when the user does a mousedown on an event's resizer, which might lead to resizing.                         // 3976\n\t// Generic enough to work with any type of Grid.                                                                      // 3977\n\tsegResizeMousedown: function(seg, ev, isStart) {                                                                      // 3978\n\t\tvar _this = this;                                                                                                    // 3979\n\t\tvar view = this.view;                                                                                                // 3980\n\t\tvar calendar = view.calendar;                                                                                        // 3981\n\t\tvar el = seg.el;                                                                                                     // 3982\n\t\tvar event = seg.event;                                                                                               // 3983\n\t\tvar eventEnd = calendar.getEventEnd(event);                                                                          // 3984\n\t\tvar dragListener;                                                                                                    // 3985\n\t\tvar resizeLocation; // falsy if invalid resize                                                                       // 3986\n                                                                                                                       // 3987\n\t\t// Tracks mouse movement over the *grid's* coordinate map                                                            // 3988\n\t\tdragListener = new CellDragListener(this.coordMap, {                                                                 // 3989\n\t\t\tdistance: 5,                                                                                                        // 3990\n\t\t\tscroll: view.opt('dragScroll'),                                                                                     // 3991\n\t\t\tsubjectEl: el,                                                                                                      // 3992\n\t\t\tdragStart: function(ev) {                                                                                           // 3993\n\t\t\t\t_this.triggerSegMouseout(seg, ev); // ensure a mouseout on the manipulated event has been reported                 // 3994\n\t\t\t\t_this.segResizeStart(seg, ev);                                                                                     // 3995\n\t\t\t},                                                                                                                  // 3996\n\t\t\tcellOver: function(cell, isOrig, origCell) {                                                                        // 3997\n\t\t\t\tresizeLocation = isStart ?                                                                                         // 3998\n\t\t\t\t\t_this.computeEventStartResize(origCell, cell, event) :                                                            // 3999\n\t\t\t\t\t_this.computeEventEndResize(origCell, cell, event);                                                               // 4000\n                                                                                                                       // 4001\n\t\t\t\tif (resizeLocation) {                                                                                              // 4002\n\t\t\t\t\tif (!calendar.isEventRangeAllowed(resizeLocation, event)) {                                                       // 4003\n\t\t\t\t\t\tdisableCursor();                                                                                                 // 4004\n\t\t\t\t\t\tresizeLocation = null;                                                                                           // 4005\n\t\t\t\t\t}                                                                                                                 // 4006\n\t\t\t\t\t// no change? (TODO: how does this work with timezones?)                                                          // 4007\n\t\t\t\t\telse if (resizeLocation.start.isSame(event.start) && resizeLocation.end.isSame(eventEnd)) {                       // 4008\n\t\t\t\t\t\tresizeLocation = null;                                                                                           // 4009\n\t\t\t\t\t}                                                                                                                 // 4010\n\t\t\t\t}                                                                                                                  // 4011\n                                                                                                                       // 4012\n\t\t\t\tif (resizeLocation) {                                                                                              // 4013\n\t\t\t\t\tview.hideEvent(event);                                                                                            // 4014\n\t\t\t\t\t_this.renderEventResize(resizeLocation, seg);                                                                     // 4015\n\t\t\t\t}                                                                                                                  // 4016\n\t\t\t},                                                                                                                  // 4017\n\t\t\tcellOut: function() { // called before mouse moves to a different cell OR moved out of all cells                    // 4018\n\t\t\t\tresizeLocation = null;                                                                                             // 4019\n\t\t\t},                                                                                                                  // 4020\n\t\t\tcellDone: function() { // resets the rendering to show the original event                                           // 4021\n\t\t\t\t_this.destroyEventResize();                                                                                        // 4022\n\t\t\t\tview.showEvent(event);                                                                                             // 4023\n\t\t\t\tenableCursor();                                                                                                    // 4024\n\t\t\t},                                                                                                                  // 4025\n\t\t\tdragStop: function(ev) {                                                                                            // 4026\n\t\t\t\t_this.segResizeStop(seg, ev);                                                                                      // 4027\n                                                                                                                       // 4028\n\t\t\t\tif (resizeLocation) { // valid date to resize to?                                                                  // 4029\n\t\t\t\t\tview.reportEventResize(event, resizeLocation, this.largeUnit, el, ev);                                            // 4030\n\t\t\t\t}                                                                                                                  // 4031\n\t\t\t}                                                                                                                   // 4032\n\t\t});                                                                                                                  // 4033\n                                                                                                                       // 4034\n\t\tdragListener.mousedown(ev); // start listening, which will eventually lead to a dragStart                            // 4035\n\t},                                                                                                                    // 4036\n                                                                                                                       // 4037\n                                                                                                                       // 4038\n\t// Called before event segment resizing starts                                                                        // 4039\n\tsegResizeStart: function(seg, ev) {                                                                                   // 4040\n\t\tthis.isResizingSeg = true;                                                                                           // 4041\n\t\tthis.view.trigger('eventResizeStart', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy                  // 4042\n\t},                                                                                                                    // 4043\n                                                                                                                       // 4044\n                                                                                                                       // 4045\n\t// Called after event segment resizing stops                                                                          // 4046\n\tsegResizeStop: function(seg, ev) {                                                                                    // 4047\n\t\tthis.isResizingSeg = false;                                                                                          // 4048\n\t\tthis.view.trigger('eventResizeStop', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy                   // 4049\n\t},                                                                                                                    // 4050\n                                                                                                                       // 4051\n                                                                                                                       // 4052\n\t// Returns new date-information for an event segment being resized from its start                                     // 4053\n\tcomputeEventStartResize: function(startCell, endCell, event) {                                                        // 4054\n\t\treturn this.computeEventResize('start', startCell, endCell, event);                                                  // 4055\n\t},                                                                                                                    // 4056\n                                                                                                                       // 4057\n                                                                                                                       // 4058\n\t// Returns new date-information for an event segment being resized from its end                                       // 4059\n\tcomputeEventEndResize: function(startCell, endCell, event) {                                                          // 4060\n\t\treturn this.computeEventResize('end', startCell, endCell, event);                                                    // 4061\n\t},                                                                                                                    // 4062\n                                                                                                                       // 4063\n                                                                                                                       // 4064\n\t// Returns new date-information for an event segment being resized from its start OR end                              // 4065\n\t// `type` is either 'start' or 'end'                                                                                  // 4066\n\tcomputeEventResize: function(type, startCell, endCell, event) {                                                       // 4067\n\t\tvar calendar = this.view.calendar;                                                                                   // 4068\n\t\tvar delta = this.diffDates(endCell[type], startCell[type]);                                                          // 4069\n\t\tvar range;                                                                                                           // 4070\n\t\tvar defaultDuration;                                                                                                 // 4071\n                                                                                                                       // 4072\n\t\t// build original values to work from, guaranteeing a start and end                                                  // 4073\n\t\trange = {                                                                                                            // 4074\n\t\t\tstart: event.start.clone(),                                                                                         // 4075\n\t\t\tend: calendar.getEventEnd(event),                                                                                   // 4076\n\t\t\tallDay: event.allDay                                                                                                // 4077\n\t\t};                                                                                                                   // 4078\n                                                                                                                       // 4079\n\t\t// if an all-day event was in a timed area and was resized to a time, adjust start/end to have times                 // 4080\n\t\tif (range.allDay && durationHasTime(delta)) {                                                                        // 4081\n\t\t\trange.allDay = false;                                                                                               // 4082\n\t\t\tcalendar.normalizeEventRangeTimes(range);                                                                           // 4083\n\t\t}                                                                                                                    // 4084\n                                                                                                                       // 4085\n\t\trange[type].add(delta); // apply delta to start or end                                                               // 4086\n                                                                                                                       // 4087\n\t\t// if the event was compressed too small, find a new reasonable duration for it                                      // 4088\n\t\tif (!range.start.isBefore(range.end)) {                                                                              // 4089\n                                                                                                                       // 4090\n\t\t\tdefaultDuration = event.allDay ?                                                                                    // 4091\n\t\t\t\tcalendar.defaultAllDayEventDuration :                                                                              // 4092\n\t\t\t\tcalendar.defaultTimedEventDuration;                                                                                // 4093\n                                                                                                                       // 4094\n\t\t\t// between the cell's duration and the event's default duration, use the smaller of the two.                        // 4095\n\t\t\t// example: if year-length slots, and compressed to one slot, we don't want the event to be a year long             // 4096\n\t\t\tif (this.cellDuration && this.cellDuration < defaultDuration) {                                                     // 4097\n\t\t\t\tdefaultDuration = this.cellDuration;                                                                               // 4098\n\t\t\t}                                                                                                                   // 4099\n                                                                                                                       // 4100\n\t\t\tif (type == 'start') { // resizing the start?                                                                       // 4101\n\t\t\t\trange.start = range.end.clone().subtract(defaultDuration);                                                         // 4102\n\t\t\t}                                                                                                                   // 4103\n\t\t\telse { // resizing the end?                                                                                         // 4104\n\t\t\t\trange.end = range.start.clone().add(defaultDuration);                                                              // 4105\n\t\t\t}                                                                                                                   // 4106\n\t\t}                                                                                                                    // 4107\n                                                                                                                       // 4108\n\t\treturn range;                                                                                                        // 4109\n\t},                                                                                                                    // 4110\n                                                                                                                       // 4111\n                                                                                                                       // 4112\n\t// Renders a visual indication of an event being resized.                                                             // 4113\n\t// `range` has the updated dates of the event. `seg` is the original segment object involved in the drag.             // 4114\n\trenderEventResize: function(range, seg) {                                                                             // 4115\n\t\t// subclasses must implement                                                                                         // 4116\n\t},                                                                                                                    // 4117\n                                                                                                                       // 4118\n                                                                                                                       // 4119\n\t// Unrenders a visual indication of an event being resized.                                                           // 4120\n\tdestroyEventResize: function() {                                                                                      // 4121\n\t\t// subclasses must implement                                                                                         // 4122\n\t},                                                                                                                    // 4123\n                                                                                                                       // 4124\n                                                                                                                       // 4125\n\t/* Rendering Utils                                                                                                    // 4126\n\t------------------------------------------------------------------------------------------------------------------*/  // 4127\n                                                                                                                       // 4128\n                                                                                                                       // 4129\n\t// Compute the text that should be displayed on an event's element.                                                   // 4130\n\t// `range` can be the Event object itself, or something range-like, with at least a `start`.                          // 4131\n\t// If event times are disabled, or the event has no time, will return a blank string.                                 // 4132\n\t// If not specified, formatStr will default to the eventTimeFormat setting,                                           // 4133\n\t// and displayEnd will default to the displayEventEnd setting.                                                        // 4134\n\tgetEventTimeText: function(range, formatStr, displayEnd) {                                                            // 4135\n                                                                                                                       // 4136\n\t\tif (formatStr == null) {                                                                                             // 4137\n\t\t\tformatStr = this.eventTimeFormat;                                                                                   // 4138\n\t\t}                                                                                                                    // 4139\n                                                                                                                       // 4140\n\t\tif (displayEnd == null) {                                                                                            // 4141\n\t\t\tdisplayEnd = this.displayEventEnd;                                                                                  // 4142\n\t\t}                                                                                                                    // 4143\n                                                                                                                       // 4144\n\t\tif (this.displayEventTime && range.start.hasTime()) {                                                                // 4145\n\t\t\tif (displayEnd && range.end) {                                                                                      // 4146\n\t\t\t\treturn this.view.formatRange(range, formatStr);                                                                    // 4147\n\t\t\t}                                                                                                                   // 4148\n\t\t\telse {                                                                                                              // 4149\n\t\t\t\treturn range.start.format(formatStr);                                                                              // 4150\n\t\t\t}                                                                                                                   // 4151\n\t\t}                                                                                                                    // 4152\n                                                                                                                       // 4153\n\t\treturn '';                                                                                                           // 4154\n\t},                                                                                                                    // 4155\n                                                                                                                       // 4156\n                                                                                                                       // 4157\n\t// Generic utility for generating the HTML classNames for an event segment's element                                  // 4158\n\tgetSegClasses: function(seg, isDraggable, isResizable) {                                                              // 4159\n\t\tvar event = seg.event;                                                                                               // 4160\n\t\tvar classes = [                                                                                                      // 4161\n\t\t\t'fc-event',                                                                                                         // 4162\n\t\t\tseg.isStart ? 'fc-start' : 'fc-not-start',                                                                          // 4163\n\t\t\tseg.isEnd ? 'fc-end' : 'fc-not-end'                                                                                 // 4164\n\t\t].concat(                                                                                                            // 4165\n\t\t\tevent.className,                                                                                                    // 4166\n\t\t\tevent.source ? event.source.className : []                                                                          // 4167\n\t\t);                                                                                                                   // 4168\n                                                                                                                       // 4169\n\t\tif (isDraggable) {                                                                                                   // 4170\n\t\t\tclasses.push('fc-draggable');                                                                                       // 4171\n\t\t}                                                                                                                    // 4172\n\t\tif (isResizable) {                                                                                                   // 4173\n\t\t\tclasses.push('fc-resizable');                                                                                       // 4174\n\t\t}                                                                                                                    // 4175\n                                                                                                                       // 4176\n\t\treturn classes;                                                                                                      // 4177\n\t},                                                                                                                    // 4178\n                                                                                                                       // 4179\n                                                                                                                       // 4180\n\t// Utility for generating event skin-related CSS properties                                                           // 4181\n\tgetEventSkinCss: function(event) {                                                                                    // 4182\n\t\tvar view = this.view;                                                                                                // 4183\n\t\tvar source = event.source || {};                                                                                     // 4184\n\t\tvar eventColor = event.color;                                                                                        // 4185\n\t\tvar sourceColor = source.color;                                                                                      // 4186\n\t\tvar optionColor = view.opt('eventColor');                                                                            // 4187\n                                                                                                                       // 4188\n\t\treturn {                                                                                                             // 4189\n\t\t\t'background-color':                                                                                                 // 4190\n\t\t\t\tevent.backgroundColor ||                                                                                           // 4191\n\t\t\t\teventColor ||                                                                                                      // 4192\n\t\t\t\tsource.backgroundColor ||                                                                                          // 4193\n\t\t\t\tsourceColor ||                                                                                                     // 4194\n\t\t\t\tview.opt('eventBackgroundColor') ||                                                                                // 4195\n\t\t\t\toptionColor,                                                                                                       // 4196\n\t\t\t'border-color':                                                                                                     // 4197\n\t\t\t\tevent.borderColor ||                                                                                               // 4198\n\t\t\t\teventColor ||                                                                                                      // 4199\n\t\t\t\tsource.borderColor ||                                                                                              // 4200\n\t\t\t\tsourceColor ||                                                                                                     // 4201\n\t\t\t\tview.opt('eventBorderColor') ||                                                                                    // 4202\n\t\t\t\toptionColor,                                                                                                       // 4203\n\t\t\tcolor:                                                                                                              // 4204\n\t\t\t\tevent.textColor ||                                                                                                 // 4205\n\t\t\t\tsource.textColor ||                                                                                                // 4206\n\t\t\t\tview.opt('eventTextColor')                                                                                         // 4207\n\t\t};                                                                                                                   // 4208\n\t},                                                                                                                    // 4209\n                                                                                                                       // 4210\n                                                                                                                       // 4211\n\t/* Converting events -> ranges -> segs                                                                                // 4212\n\t------------------------------------------------------------------------------------------------------------------*/  // 4213\n                                                                                                                       // 4214\n                                                                                                                       // 4215\n\t// Converts an array of event objects into an array of event segment objects.                                         // 4216\n\t// A custom `rangeToSegsFunc` may be given for arbitrarily slicing up events.                                         // 4217\n\t// Doesn't guarantee an order for the resulting array.                                                                // 4218\n\teventsToSegs: function(events, rangeToSegsFunc) {                                                                     // 4219\n\t\tvar eventRanges = this.eventsToRanges(events);                                                                       // 4220\n\t\tvar segs = [];                                                                                                       // 4221\n\t\tvar i;                                                                                                               // 4222\n                                                                                                                       // 4223\n\t\tfor (i = 0; i < eventRanges.length; i++) {                                                                           // 4224\n\t\t\tsegs.push.apply(                                                                                                    // 4225\n\t\t\t\tsegs,                                                                                                              // 4226\n\t\t\t\tthis.eventRangeToSegs(eventRanges[i], rangeToSegsFunc)                                                             // 4227\n\t\t\t);                                                                                                                  // 4228\n\t\t}                                                                                                                    // 4229\n                                                                                                                       // 4230\n\t\treturn segs;                                                                                                         // 4231\n\t},                                                                                                                    // 4232\n                                                                                                                       // 4233\n                                                                                                                       // 4234\n\t// Converts an array of events into an array of \"range\" objects.                                                      // 4235\n\t// A \"range\" object is a plain object with start/end properties denoting the time it covers. Also an event property.  // 4236\n\t// For \"normal\" events, this will be identical to the event's start/end, but for \"inverse-background\" events,         // 4237\n\t// will create an array of ranges that span the time *not* covered by the given event.                                // 4238\n\t// Doesn't guarantee an order for the resulting array.                                                                // 4239\n\teventsToRanges: function(events) {                                                                                    // 4240\n\t\tvar _this = this;                                                                                                    // 4241\n\t\tvar eventsById = groupEventsById(events);                                                                            // 4242\n\t\tvar ranges = [];                                                                                                     // 4243\n                                                                                                                       // 4244\n\t\t// group by ID so that related inverse-background events can be rendered together                                    // 4245\n\t\t$.each(eventsById, function(id, eventGroup) {                                                                        // 4246\n\t\t\tif (eventGroup.length) {                                                                                            // 4247\n\t\t\t\tranges.push.apply(                                                                                                 // 4248\n\t\t\t\t\tranges,                                                                                                           // 4249\n\t\t\t\t\tisInverseBgEvent(eventGroup[0]) ?                                                                                 // 4250\n\t\t\t\t\t\t_this.eventsToInverseRanges(eventGroup) :                                                                        // 4251\n\t\t\t\t\t\t_this.eventsToNormalRanges(eventGroup)                                                                           // 4252\n\t\t\t\t);                                                                                                                 // 4253\n\t\t\t}                                                                                                                   // 4254\n\t\t});                                                                                                                  // 4255\n                                                                                                                       // 4256\n\t\treturn ranges;                                                                                                       // 4257\n\t},                                                                                                                    // 4258\n                                                                                                                       // 4259\n                                                                                                                       // 4260\n\t// Converts an array of \"normal\" events (not inverted rendering) into a parallel array of ranges                      // 4261\n\teventsToNormalRanges: function(events) {                                                                              // 4262\n\t\tvar calendar = this.view.calendar;                                                                                   // 4263\n\t\tvar ranges = [];                                                                                                     // 4264\n\t\tvar i, event;                                                                                                        // 4265\n\t\tvar eventStart, eventEnd;                                                                                            // 4266\n                                                                                                                       // 4267\n\t\tfor (i = 0; i < events.length; i++) {                                                                                // 4268\n\t\t\tevent = events[i];                                                                                                  // 4269\n                                                                                                                       // 4270\n\t\t\t// make copies and normalize by stripping timezone                                                                  // 4271\n\t\t\teventStart = event.start.clone().stripZone();                                                                       // 4272\n\t\t\teventEnd = calendar.getEventEnd(event).stripZone();                                                                 // 4273\n                                                                                                                       // 4274\n\t\t\tranges.push({                                                                                                       // 4275\n\t\t\t\tevent: event,                                                                                                      // 4276\n\t\t\t\tstart: eventStart,                                                                                                 // 4277\n\t\t\t\tend: eventEnd,                                                                                                     // 4278\n\t\t\t\teventStartMS: +eventStart,                                                                                         // 4279\n\t\t\t\teventDurationMS: eventEnd - eventStart                                                                             // 4280\n\t\t\t});                                                                                                                 // 4281\n\t\t}                                                                                                                    // 4282\n                                                                                                                       // 4283\n\t\treturn ranges;                                                                                                       // 4284\n\t},                                                                                                                    // 4285\n                                                                                                                       // 4286\n                                                                                                                       // 4287\n\t// Converts an array of events, with inverse-background rendering, into an array of range objects.                    // 4288\n\t// The range objects will cover all the time NOT covered by the events.                                               // 4289\n\teventsToInverseRanges: function(events) {                                                                             // 4290\n\t\tvar view = this.view;                                                                                                // 4291\n\t\tvar viewStart = view.start.clone().stripZone(); // normalize timezone                                                // 4292\n\t\tvar viewEnd = view.end.clone().stripZone(); // normalize timezone                                                    // 4293\n\t\tvar normalRanges = this.eventsToNormalRanges(events); // will give us normalized dates we can use w/o copies         // 4294\n\t\tvar inverseRanges = [];                                                                                              // 4295\n\t\tvar event0 = events[0]; // assign this to each range's `.event`                                                      // 4296\n\t\tvar start = viewStart; // the end of the previous range. the start of the new range                                  // 4297\n\t\tvar i, normalRange;                                                                                                  // 4298\n                                                                                                                       // 4299\n\t\t// ranges need to be in order. required for our date-walking algorithm                                               // 4300\n\t\tnormalRanges.sort(compareNormalRanges);                                                                              // 4301\n                                                                                                                       // 4302\n\t\tfor (i = 0; i < normalRanges.length; i++) {                                                                          // 4303\n\t\t\tnormalRange = normalRanges[i];                                                                                      // 4304\n                                                                                                                       // 4305\n\t\t\t// add the span of time before the event (if there is any)                                                          // 4306\n\t\t\tif (normalRange.start > start) { // compare millisecond time (skip any ambig logic)                                 // 4307\n\t\t\t\tinverseRanges.push({                                                                                               // 4308\n\t\t\t\t\tevent: event0,                                                                                                    // 4309\n\t\t\t\t\tstart: start,                                                                                                     // 4310\n\t\t\t\t\tend: normalRange.start                                                                                            // 4311\n\t\t\t\t});                                                                                                                // 4312\n\t\t\t}                                                                                                                   // 4313\n                                                                                                                       // 4314\n\t\t\tstart = normalRange.end;                                                                                            // 4315\n\t\t}                                                                                                                    // 4316\n                                                                                                                       // 4317\n\t\t// add the span of time after the last event (if there is any)                                                       // 4318\n\t\tif (start < viewEnd) { // compare millisecond time (skip any ambig logic)                                            // 4319\n\t\t\tinverseRanges.push({                                                                                                // 4320\n\t\t\t\tevent: event0,                                                                                                     // 4321\n\t\t\t\tstart: start,                                                                                                      // 4322\n\t\t\t\tend: viewEnd                                                                                                       // 4323\n\t\t\t});                                                                                                                 // 4324\n\t\t}                                                                                                                    // 4325\n                                                                                                                       // 4326\n\t\treturn inverseRanges;                                                                                                // 4327\n\t},                                                                                                                    // 4328\n                                                                                                                       // 4329\n                                                                                                                       // 4330\n\t// Slices the given event range into one or more segment objects.                                                     // 4331\n\t// A `rangeToSegsFunc` custom slicing function can be given.                                                          // 4332\n\teventRangeToSegs: function(eventRange, rangeToSegsFunc) {                                                             // 4333\n\t\tvar segs;                                                                                                            // 4334\n\t\tvar i, seg;                                                                                                          // 4335\n                                                                                                                       // 4336\n\t\tif (rangeToSegsFunc) {                                                                                               // 4337\n\t\t\tsegs = rangeToSegsFunc(eventRange);                                                                                 // 4338\n\t\t}                                                                                                                    // 4339\n\t\telse {                                                                                                               // 4340\n\t\t\tsegs = this.rangeToSegs(eventRange); // defined by the subclass                                                     // 4341\n\t\t}                                                                                                                    // 4342\n                                                                                                                       // 4343\n\t\tfor (i = 0; i < segs.length; i++) {                                                                                  // 4344\n\t\t\tseg = segs[i];                                                                                                      // 4345\n\t\t\tseg.event = eventRange.event;                                                                                       // 4346\n\t\t\tseg.eventStartMS = eventRange.eventStartMS;                                                                         // 4347\n\t\t\tseg.eventDurationMS = eventRange.eventDurationMS;                                                                   // 4348\n\t\t}                                                                                                                    // 4349\n                                                                                                                       // 4350\n\t\treturn segs;                                                                                                         // 4351\n\t}                                                                                                                     // 4352\n                                                                                                                       // 4353\n});                                                                                                                    // 4354\n                                                                                                                       // 4355\n                                                                                                                       // 4356\n/* Utilities                                                                                                           // 4357\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 4359\n                                                                                                                       // 4360\nfunction isBgEvent(event) { // returns true if background OR inverse-background                                        // 4361\n\tvar rendering = getEventRendering(event);                                                                             // 4362\n\treturn rendering === 'background' || rendering === 'inverse-background';                                              // 4363\n}                                                                                                                      // 4364\n                                                                                                                       // 4365\n                                                                                                                       // 4366\nfunction isInverseBgEvent(event) {                                                                                     // 4367\n\treturn getEventRendering(event) === 'inverse-background';                                                             // 4368\n}                                                                                                                      // 4369\n                                                                                                                       // 4370\n                                                                                                                       // 4371\nfunction getEventRendering(event) {                                                                                    // 4372\n\treturn firstDefined((event.source || {}).rendering, event.rendering);                                                 // 4373\n}                                                                                                                      // 4374\n                                                                                                                       // 4375\n                                                                                                                       // 4376\nfunction groupEventsById(events) {                                                                                     // 4377\n\tvar eventsById = {};                                                                                                  // 4378\n\tvar i, event;                                                                                                         // 4379\n                                                                                                                       // 4380\n\tfor (i = 0; i < events.length; i++) {                                                                                 // 4381\n\t\tevent = events[i];                                                                                                   // 4382\n\t\t(eventsById[event._id] || (eventsById[event._id] = [])).push(event);                                                 // 4383\n\t}                                                                                                                     // 4384\n                                                                                                                       // 4385\n\treturn eventsById;                                                                                                    // 4386\n}                                                                                                                      // 4387\n                                                                                                                       // 4388\n                                                                                                                       // 4389\n// A cmp function for determining which non-inverted \"ranges\" (see above) happen earlier                               // 4390\nfunction compareNormalRanges(range1, range2) {                                                                         // 4391\n\treturn range1.eventStartMS - range2.eventStartMS; // earlier ranges go first                                          // 4392\n}                                                                                                                      // 4393\n                                                                                                                       // 4394\n                                                                                                                       // 4395\n// A cmp function for determining which segments should take visual priority                                           // 4396\n// DOES NOT WORK ON INVERTED BACKGROUND EVENTS because they have no eventStartMS/eventDurationMS                       // 4397\nfunction compareSegs(seg1, seg2) {                                                                                     // 4398\n\treturn seg1.eventStartMS - seg2.eventStartMS || // earlier events go first                                            // 4399\n\t\tseg2.eventDurationMS - seg1.eventDurationMS || // tie? longer events go first                                        // 4400\n\t\tseg2.event.allDay - seg1.event.allDay || // tie? put all-day events first (booleans cast to 0/1)                     // 4401\n\t\t(seg1.event.title || '').localeCompare(seg2.event.title); // tie? alphabetically by title                            // 4402\n}                                                                                                                      // 4403\n                                                                                                                       // 4404\nfc.compareSegs = compareSegs; // export                                                                                // 4405\n                                                                                                                       // 4406\n                                                                                                                       // 4407\n/* External-Dragging-Element Data                                                                                      // 4408\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 4410\n// Require all HTML5 data-* attributes used by FullCalendar to have this prefix.                                       // 4411\n// A value of '' will query attributes like data-event. A value of 'fc' will query attributes like data-fc-event.      // 4412\nfc.dataAttrPrefix = '';                                                                                                // 4413\n                                                                                                                       // 4414\n// Given a jQuery element that might represent a dragged FullCalendar event, returns an intermediate data structure    // 4415\n// to be used for Event Object creation.                                                                               // 4416\n// A defined `.eventProps`, even when empty, indicates that an event should be created.                                // 4417\nfunction getDraggedElMeta(el) {                                                                                        // 4418\n\tvar prefix = fc.dataAttrPrefix;                                                                                       // 4419\n\tvar eventProps; // properties for creating the event, not related to date/time                                        // 4420\n\tvar startTime; // a Duration                                                                                          // 4421\n\tvar duration;                                                                                                         // 4422\n\tvar stick;                                                                                                            // 4423\n                                                                                                                       // 4424\n\tif (prefix) { prefix += '-'; }                                                                                        // 4425\n\teventProps = el.data(prefix + 'event') || null;                                                                       // 4426\n                                                                                                                       // 4427\n\tif (eventProps) {                                                                                                     // 4428\n\t\tif (typeof eventProps === 'object') {                                                                                // 4429\n\t\t\teventProps = $.extend({}, eventProps); // make a copy                                                               // 4430\n\t\t}                                                                                                                    // 4431\n\t\telse { // something like 1 or true. still signal event creation                                                      // 4432\n\t\t\teventProps = {};                                                                                                    // 4433\n\t\t}                                                                                                                    // 4434\n                                                                                                                       // 4435\n\t\t// pluck special-cased date/time properties                                                                          // 4436\n\t\tstartTime = eventProps.start;                                                                                        // 4437\n\t\tif (startTime == null) { startTime = eventProps.time; } // accept 'time' as well                                     // 4438\n\t\tduration = eventProps.duration;                                                                                      // 4439\n\t\tstick = eventProps.stick;                                                                                            // 4440\n\t\tdelete eventProps.start;                                                                                             // 4441\n\t\tdelete eventProps.time;                                                                                              // 4442\n\t\tdelete eventProps.duration;                                                                                          // 4443\n\t\tdelete eventProps.stick;                                                                                             // 4444\n\t}                                                                                                                     // 4445\n                                                                                                                       // 4446\n\t// fallback to standalone attribute values for each of the date/time properties                                       // 4447\n\tif (startTime == null) { startTime = el.data(prefix + 'start'); }                                                     // 4448\n\tif (startTime == null) { startTime = el.data(prefix + 'time'); } // accept 'time' as well                             // 4449\n\tif (duration == null) { duration = el.data(prefix + 'duration'); }                                                    // 4450\n\tif (stick == null) { stick = el.data(prefix + 'stick'); }                                                             // 4451\n                                                                                                                       // 4452\n\t// massage into correct data types                                                                                    // 4453\n\tstartTime = startTime != null ? moment.duration(startTime) : null;                                                    // 4454\n\tduration = duration != null ? moment.duration(duration) : null;                                                       // 4455\n\tstick = Boolean(stick);                                                                                               // 4456\n                                                                                                                       // 4457\n\treturn { eventProps: eventProps, startTime: startTime, duration: duration, stick: stick };                            // 4458\n}                                                                                                                      // 4459\n                                                                                                                       // 4460\n                                                                                                                       // 4461\n;;                                                                                                                     // 4462\n                                                                                                                       // 4463\n/* A component that renders a grid of whole-days that runs horizontally. There can be multiple rows, one per week.     // 4464\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 4466\nvar DayGrid = Grid.extend({                                                                                            // 4467\n                                                                                                                       // 4468\n\tnumbersVisible: false, // should render a row for day/week numbers? set by outside view. TODO: make internal          // 4469\n\tbottomCoordPadding: 0, // hack for extending the hit area for the last row of the coordinate grid                     // 4470\n\tbreakOnWeeks: null, // should create a new row for each week? set by outside view                                     // 4471\n                                                                                                                       // 4472\n\tcellDates: null, // flat chronological array of each cell's dates                                                     // 4473\n\tdayToCellOffsets: null, // maps days offsets from grid's start date, to cell offsets                                  // 4474\n                                                                                                                       // 4475\n\trowEls: null, // set of fake row elements                                                                             // 4476\n\tdayEls: null, // set of whole-day elements comprising the row's background                                            // 4477\n\thelperEls: null, // set of cell skeleton elements for rendering the mock event \"helper\"                               // 4478\n                                                                                                                       // 4479\n                                                                                                                       // 4480\n\tconstructor: function() {                                                                                             // 4481\n\t\tGrid.apply(this, arguments);                                                                                         // 4482\n                                                                                                                       // 4483\n\t\tthis.cellDuration = moment.duration(1, 'day'); // for Grid system                                                    // 4484\n\t},                                                                                                                    // 4485\n                                                                                                                       // 4486\n                                                                                                                       // 4487\n\t// Renders the rows and columns into the component's `this.el`, which should already be assigned.                     // 4488\n\t// isRigid determins whether the individual rows should ignore the contents and be a constant height.                 // 4489\n\t// Relies on the view's colCnt and rowCnt. In the future, this component should probably be self-sufficient.          // 4490\n\trenderDates: function(isRigid) {                                                                                      // 4491\n\t\tvar view = this.view;                                                                                                // 4492\n\t\tvar rowCnt = this.rowCnt;                                                                                            // 4493\n\t\tvar colCnt = this.colCnt;                                                                                            // 4494\n\t\tvar cellCnt = rowCnt * colCnt;                                                                                       // 4495\n\t\tvar html = '';                                                                                                       // 4496\n\t\tvar row;                                                                                                             // 4497\n\t\tvar i, cell;                                                                                                         // 4498\n                                                                                                                       // 4499\n\t\tfor (row = 0; row < rowCnt; row++) {                                                                                 // 4500\n\t\t\thtml += this.dayRowHtml(row, isRigid);                                                                              // 4501\n\t\t}                                                                                                                    // 4502\n\t\tthis.el.html(html);                                                                                                  // 4503\n                                                                                                                       // 4504\n\t\tthis.rowEls = this.el.find('.fc-row');                                                                               // 4505\n\t\tthis.dayEls = this.el.find('.fc-day');                                                                               // 4506\n                                                                                                                       // 4507\n\t\t// trigger dayRender with each cell's element                                                                        // 4508\n\t\tfor (i = 0; i < cellCnt; i++) {                                                                                      // 4509\n\t\t\tcell = this.getCell(i);                                                                                             // 4510\n\t\t\tview.trigger('dayRender', null, cell.start, this.dayEls.eq(i));                                                     // 4511\n\t\t}                                                                                                                    // 4512\n\t},                                                                                                                    // 4513\n                                                                                                                       // 4514\n                                                                                                                       // 4515\n\tdestroyDates: function() {                                                                                            // 4516\n\t\tthis.destroySegPopover();                                                                                            // 4517\n\t},                                                                                                                    // 4518\n                                                                                                                       // 4519\n                                                                                                                       // 4520\n\trenderBusinessHours: function() {                                                                                     // 4521\n\t\tvar events = this.view.calendar.getBusinessHoursEvents(true); // wholeDay=true                                       // 4522\n\t\tvar segs = this.eventsToSegs(events);                                                                                // 4523\n                                                                                                                       // 4524\n\t\tthis.renderFill('businessHours', segs, 'bgevent');                                                                   // 4525\n\t},                                                                                                                    // 4526\n                                                                                                                       // 4527\n                                                                                                                       // 4528\n\t// Generates the HTML for a single row. `row` is the row number.                                                      // 4529\n\tdayRowHtml: function(row, isRigid) {                                                                                  // 4530\n\t\tvar view = this.view;                                                                                                // 4531\n\t\tvar classes = [ 'fc-row', 'fc-week', view.widgetContentClass ];                                                      // 4532\n                                                                                                                       // 4533\n\t\tif (isRigid) {                                                                                                       // 4534\n\t\t\tclasses.push('fc-rigid');                                                                                           // 4535\n\t\t}                                                                                                                    // 4536\n                                                                                                                       // 4537\n\t\treturn '' +                                                                                                          // 4538\n\t\t\t'<div class=\"' + classes.join(' ') + '\">' +                                                                         // 4539\n\t\t\t\t'<div class=\"fc-bg\">' +                                                                                            // 4540\n\t\t\t\t\t'<table>' +                                                                                                       // 4541\n\t\t\t\t\t\tthis.rowHtml('day', row) + // leverages RowRenderer. calls dayCellHtml()                                         // 4542\n\t\t\t\t\t'</table>' +                                                                                                      // 4543\n\t\t\t\t'</div>' +                                                                                                         // 4544\n\t\t\t\t'<div class=\"fc-content-skeleton\">' +                                                                              // 4545\n\t\t\t\t\t'<table>' +                                                                                                       // 4546\n\t\t\t\t\t\t(this.numbersVisible ?                                                                                           // 4547\n\t\t\t\t\t\t\t'<thead>' +                                                                                                     // 4548\n\t\t\t\t\t\t\t\tthis.rowHtml('number', row) + // leverages RowRenderer. View will define render method                         // 4549\n\t\t\t\t\t\t\t'</thead>' :                                                                                                    // 4550\n\t\t\t\t\t\t\t''                                                                                                              // 4551\n\t\t\t\t\t\t\t) +                                                                                                             // 4552\n\t\t\t\t\t'</table>' +                                                                                                      // 4553\n\t\t\t\t'</div>' +                                                                                                         // 4554\n\t\t\t'</div>';                                                                                                           // 4555\n\t},                                                                                                                    // 4556\n                                                                                                                       // 4557\n                                                                                                                       // 4558\n\t// Renders the HTML for a whole-day cell. Will eventually end up in the day-row's background.                         // 4559\n\t// We go through a 'day' row type instead of just doing a 'bg' row type so that the View can do custom rendering      // 4560\n\t// specifically for whole-day rows, whereas a 'bg' might also be used for other purposes (TimeGrid bg for example).   // 4561\n\tdayCellHtml: function(cell) {                                                                                         // 4562\n\t\treturn this.bgCellHtml(cell);                                                                                        // 4563\n\t},                                                                                                                    // 4564\n                                                                                                                       // 4565\n                                                                                                                       // 4566\n\t/* Options                                                                                                            // 4567\n\t------------------------------------------------------------------------------------------------------------------*/  // 4568\n                                                                                                                       // 4569\n                                                                                                                       // 4570\n\t// Computes a default column header formatting string if `colFormat` is not explicitly defined                        // 4571\n\tcomputeColHeadFormat: function() {                                                                                    // 4572\n\t\tif (this.rowCnt > 1) { // more than one week row. day numbers will be in each cell                                   // 4573\n\t\t\treturn 'ddd'; // \"Sat\"                                                                                              // 4574\n\t\t}                                                                                                                    // 4575\n\t\telse if (this.colCnt > 1) { // multiple days, so full single date string WON'T be in title text                      // 4576\n\t\t\treturn this.view.opt('dayOfMonthFormat'); // \"Sat 12/10\"                                                            // 4577\n\t\t}                                                                                                                    // 4578\n\t\telse { // single day, so full single date string will probably be in title text                                      // 4579\n\t\t\treturn 'dddd'; // \"Saturday\"                                                                                        // 4580\n\t\t}                                                                                                                    // 4581\n\t},                                                                                                                    // 4582\n                                                                                                                       // 4583\n                                                                                                                       // 4584\n\t// Computes a default event time formatting string if `timeFormat` is not explicitly defined                          // 4585\n\tcomputeEventTimeFormat: function() {                                                                                  // 4586\n\t\treturn this.view.opt('extraSmallTimeFormat'); // like \"6p\" or \"6:30p\"                                                // 4587\n\t},                                                                                                                    // 4588\n                                                                                                                       // 4589\n                                                                                                                       // 4590\n\t// Computes a default `displayEventEnd` value if one is not expliclty defined                                         // 4591\n\tcomputeDisplayEventEnd: function() {                                                                                  // 4592\n\t\treturn this.colCnt == 1; // we'll likely have space if there's only one day                                          // 4593\n\t},                                                                                                                    // 4594\n                                                                                                                       // 4595\n                                                                                                                       // 4596\n\t/* Cell System                                                                                                        // 4597\n\t------------------------------------------------------------------------------------------------------------------*/  // 4598\n                                                                                                                       // 4599\n                                                                                                                       // 4600\n\t// Initializes row/col information                                                                                    // 4601\n\tupdateCells: function() {                                                                                             // 4602\n\t\tvar cellDates;                                                                                                       // 4603\n\t\tvar firstDay;                                                                                                        // 4604\n\t\tvar rowCnt;                                                                                                          // 4605\n\t\tvar colCnt;                                                                                                          // 4606\n                                                                                                                       // 4607\n\t\tthis.updateCellDates(); // populates cellDates and dayToCellOffsets                                                  // 4608\n\t\tcellDates = this.cellDates;                                                                                          // 4609\n                                                                                                                       // 4610\n\t\tif (this.breakOnWeeks) {                                                                                             // 4611\n\t\t\t// count columns until the day-of-week repeats                                                                      // 4612\n\t\t\tfirstDay = cellDates[0].day();                                                                                      // 4613\n\t\t\tfor (colCnt = 1; colCnt < cellDates.length; colCnt++) {                                                             // 4614\n\t\t\t\tif (cellDates[colCnt].day() == firstDay) {                                                                         // 4615\n\t\t\t\t\tbreak;                                                                                                            // 4616\n\t\t\t\t}                                                                                                                  // 4617\n\t\t\t}                                                                                                                   // 4618\n\t\t\trowCnt = Math.ceil(cellDates.length / colCnt);                                                                      // 4619\n\t\t}                                                                                                                    // 4620\n\t\telse {                                                                                                               // 4621\n\t\t\trowCnt = 1;                                                                                                         // 4622\n\t\t\tcolCnt = cellDates.length;                                                                                          // 4623\n\t\t}                                                                                                                    // 4624\n                                                                                                                       // 4625\n\t\tthis.rowCnt = rowCnt;                                                                                                // 4626\n\t\tthis.colCnt = colCnt;                                                                                                // 4627\n\t},                                                                                                                    // 4628\n                                                                                                                       // 4629\n                                                                                                                       // 4630\n\t// Populates cellDates and dayToCellOffsets                                                                           // 4631\n\tupdateCellDates: function() {                                                                                         // 4632\n\t\tvar view = this.view;                                                                                                // 4633\n\t\tvar date = this.start.clone();                                                                                       // 4634\n\t\tvar dates = [];                                                                                                      // 4635\n\t\tvar offset = -1;                                                                                                     // 4636\n\t\tvar offsets = [];                                                                                                    // 4637\n                                                                                                                       // 4638\n\t\twhile (date.isBefore(this.end)) { // loop each day from start to end                                                 // 4639\n\t\t\tif (view.isHiddenDay(date)) {                                                                                       // 4640\n\t\t\t\toffsets.push(offset + 0.5); // mark that it's between offsets                                                      // 4641\n\t\t\t}                                                                                                                   // 4642\n\t\t\telse {                                                                                                              // 4643\n\t\t\t\toffset++;                                                                                                          // 4644\n\t\t\t\toffsets.push(offset);                                                                                              // 4645\n\t\t\t\tdates.push(date.clone());                                                                                          // 4646\n\t\t\t}                                                                                                                   // 4647\n\t\t\tdate.add(1, 'days');                                                                                                // 4648\n\t\t}                                                                                                                    // 4649\n                                                                                                                       // 4650\n\t\tthis.cellDates = dates;                                                                                              // 4651\n\t\tthis.dayToCellOffsets = offsets;                                                                                     // 4652\n\t},                                                                                                                    // 4653\n                                                                                                                       // 4654\n                                                                                                                       // 4655\n\t// Given a cell object, generates its start date. Returns a reference-free copy.                                      // 4656\n\tcomputeCellDate: function(cell) {                                                                                     // 4657\n\t\tvar colCnt = this.colCnt;                                                                                            // 4658\n\t\tvar index = cell.row * colCnt + (this.isRTL ? colCnt - cell.col - 1 : cell.col);                                     // 4659\n                                                                                                                       // 4660\n\t\treturn this.cellDates[index].clone();                                                                                // 4661\n\t},                                                                                                                    // 4662\n                                                                                                                       // 4663\n                                                                                                                       // 4664\n\t// Retrieves the element representing the given row                                                                   // 4665\n\tgetRowEl: function(row) {                                                                                             // 4666\n\t\treturn this.rowEls.eq(row);                                                                                          // 4667\n\t},                                                                                                                    // 4668\n                                                                                                                       // 4669\n                                                                                                                       // 4670\n\t// Retrieves the element representing the given column                                                                // 4671\n\tgetColEl: function(col) {                                                                                             // 4672\n\t\treturn this.dayEls.eq(col);                                                                                          // 4673\n\t},                                                                                                                    // 4674\n                                                                                                                       // 4675\n                                                                                                                       // 4676\n\t// Gets the whole-day element associated with the cell                                                                // 4677\n\tgetCellDayEl: function(cell) {                                                                                        // 4678\n\t\treturn this.dayEls.eq(cell.row * this.colCnt + cell.col);                                                            // 4679\n\t},                                                                                                                    // 4680\n                                                                                                                       // 4681\n                                                                                                                       // 4682\n\t// Overrides Grid's method for when row coordinates are computed                                                      // 4683\n\tcomputeRowCoords: function() {                                                                                        // 4684\n\t\tvar rowCoords = Grid.prototype.computeRowCoords.call(this); // call the super-method                                 // 4685\n                                                                                                                       // 4686\n\t\t// hack for extending last row (used by AgendaView)                                                                  // 4687\n\t\trowCoords[rowCoords.length - 1].bottom += this.bottomCoordPadding;                                                   // 4688\n                                                                                                                       // 4689\n\t\treturn rowCoords;                                                                                                    // 4690\n\t},                                                                                                                    // 4691\n                                                                                                                       // 4692\n                                                                                                                       // 4693\n\t/* Dates                                                                                                              // 4694\n\t------------------------------------------------------------------------------------------------------------------*/  // 4695\n                                                                                                                       // 4696\n                                                                                                                       // 4697\n\t// Slices up a date range by row into an array of segments                                                            // 4698\n\trangeToSegs: function(range) {                                                                                        // 4699\n\t\tvar isRTL = this.isRTL;                                                                                              // 4700\n\t\tvar rowCnt = this.rowCnt;                                                                                            // 4701\n\t\tvar colCnt = this.colCnt;                                                                                            // 4702\n\t\tvar segs = [];                                                                                                       // 4703\n\t\tvar first, last; // inclusive cell-offset range for given range                                                      // 4704\n\t\tvar row;                                                                                                             // 4705\n\t\tvar rowFirst, rowLast; // inclusive cell-offset range for current row                                                // 4706\n\t\tvar isStart, isEnd;                                                                                                  // 4707\n\t\tvar segFirst, segLast; // inclusive cell-offset range for segment                                                    // 4708\n\t\tvar seg;                                                                                                             // 4709\n                                                                                                                       // 4710\n\t\trange = this.view.computeDayRange(range); // make whole-day range, considering nextDayThreshold                      // 4711\n\t\tfirst = this.dateToCellOffset(range.start);                                                                          // 4712\n\t\tlast = this.dateToCellOffset(range.end.subtract(1, 'days')); // offset of inclusive end date                         // 4713\n                                                                                                                       // 4714\n\t\tfor (row = 0; row < rowCnt; row++) {                                                                                 // 4715\n\t\t\trowFirst = row * colCnt;                                                                                            // 4716\n\t\t\trowLast = rowFirst + colCnt - 1;                                                                                    // 4717\n                                                                                                                       // 4718\n\t\t\t// intersect segment's offset range with the row's                                                                  // 4719\n\t\t\tsegFirst = Math.max(rowFirst, first);                                                                               // 4720\n\t\t\tsegLast = Math.min(rowLast, last);                                                                                  // 4721\n                                                                                                                       // 4722\n\t\t\t// deal with in-between indices                                                                                     // 4723\n\t\t\tsegFirst = Math.ceil(segFirst); // in-between starts round to next cell                                             // 4724\n\t\t\tsegLast = Math.floor(segLast); // in-between ends round to prev cell                                                // 4725\n                                                                                                                       // 4726\n\t\t\tif (segFirst <= segLast) { // was there any intersection with the current row?                                      // 4727\n                                                                                                                       // 4728\n\t\t\t\t// must be matching integers to be the segment's start/end                                                         // 4729\n\t\t\t\tisStart = segFirst === first;                                                                                      // 4730\n\t\t\t\tisEnd = segLast === last;                                                                                          // 4731\n                                                                                                                       // 4732\n\t\t\t\t// translate offsets to be relative to start-of-row                                                                // 4733\n\t\t\t\tsegFirst -= rowFirst;                                                                                              // 4734\n\t\t\t\tsegLast -= rowFirst;                                                                                               // 4735\n                                                                                                                       // 4736\n\t\t\t\tseg = { row: row, isStart: isStart, isEnd: isEnd };                                                                // 4737\n\t\t\t\tif (isRTL) {                                                                                                       // 4738\n\t\t\t\t\tseg.leftCol = colCnt - segLast - 1;                                                                               // 4739\n\t\t\t\t\tseg.rightCol = colCnt - segFirst - 1;                                                                             // 4740\n\t\t\t\t}                                                                                                                  // 4741\n\t\t\t\telse {                                                                                                             // 4742\n\t\t\t\t\tseg.leftCol = segFirst;                                                                                           // 4743\n\t\t\t\t\tseg.rightCol = segLast;                                                                                           // 4744\n\t\t\t\t}                                                                                                                  // 4745\n\t\t\t\tsegs.push(seg);                                                                                                    // 4746\n\t\t\t}                                                                                                                   // 4747\n\t\t}                                                                                                                    // 4748\n                                                                                                                       // 4749\n\t\treturn segs;                                                                                                         // 4750\n\t},                                                                                                                    // 4751\n                                                                                                                       // 4752\n                                                                                                                       // 4753\n\t// Given a date, returns its chronolocial cell-offset from the first cell of the grid.                                // 4754\n\t// If the date lies between cells (because of hiddenDays), returns a floating-point value between offsets.            // 4755\n\t// If before the first offset, returns a negative number.                                                             // 4756\n\t// If after the last offset, returns an offset past the last cell offset.                                             // 4757\n\t// Only works for *start* dates of cells. Will not work for exclusive end dates for cells.                            // 4758\n\tdateToCellOffset: function(date) {                                                                                    // 4759\n\t\tvar offsets = this.dayToCellOffsets;                                                                                 // 4760\n\t\tvar day = date.diff(this.start, 'days');                                                                             // 4761\n                                                                                                                       // 4762\n\t\tif (day < 0) {                                                                                                       // 4763\n\t\t\treturn offsets[0] - 1;                                                                                              // 4764\n\t\t}                                                                                                                    // 4765\n\t\telse if (day >= offsets.length) {                                                                                    // 4766\n\t\t\treturn offsets[offsets.length - 1] + 1;                                                                             // 4767\n\t\t}                                                                                                                    // 4768\n\t\telse {                                                                                                               // 4769\n\t\t\treturn offsets[day];                                                                                                // 4770\n\t\t}                                                                                                                    // 4771\n\t},                                                                                                                    // 4772\n                                                                                                                       // 4773\n                                                                                                                       // 4774\n\t/* Event Drag Visualization                                                                                           // 4775\n\t------------------------------------------------------------------------------------------------------------------*/  // 4776\n\t// TODO: move to DayGrid.event, similar to what we did with Grid's drag methods                                       // 4777\n                                                                                                                       // 4778\n                                                                                                                       // 4779\n\t// Renders a visual indication of an event or external element being dragged.                                         // 4780\n\t// The dropLocation's end can be null. seg can be null. See Grid::renderDrag for more info.                           // 4781\n\trenderDrag: function(dropLocation, seg) {                                                                             // 4782\n                                                                                                                       // 4783\n\t\t// always render a highlight underneath                                                                              // 4784\n\t\tthis.renderHighlight(                                                                                                // 4785\n\t\t\tthis.view.calendar.ensureVisibleEventRange(dropLocation) // needs to be a proper range                              // 4786\n\t\t);                                                                                                                   // 4787\n                                                                                                                       // 4788\n\t\t// if a segment from the same calendar but another component is being dragged, render a helper event                 // 4789\n\t\tif (seg && !seg.el.closest(this.el).length) {                                                                        // 4790\n                                                                                                                       // 4791\n\t\t\tthis.renderRangeHelper(dropLocation, seg);                                                                          // 4792\n\t\t\tthis.applyDragOpacity(this.helperEls);                                                                              // 4793\n                                                                                                                       // 4794\n\t\t\treturn true; // a helper has been rendered                                                                          // 4795\n\t\t}                                                                                                                    // 4796\n\t},                                                                                                                    // 4797\n                                                                                                                       // 4798\n                                                                                                                       // 4799\n\t// Unrenders any visual indication of a hovering event                                                                // 4800\n\tdestroyDrag: function() {                                                                                             // 4801\n\t\tthis.destroyHighlight();                                                                                             // 4802\n\t\tthis.destroyHelper();                                                                                                // 4803\n\t},                                                                                                                    // 4804\n                                                                                                                       // 4805\n                                                                                                                       // 4806\n\t/* Event Resize Visualization                                                                                         // 4807\n\t------------------------------------------------------------------------------------------------------------------*/  // 4808\n                                                                                                                       // 4809\n                                                                                                                       // 4810\n\t// Renders a visual indication of an event being resized                                                              // 4811\n\trenderEventResize: function(range, seg) {                                                                             // 4812\n\t\tthis.renderHighlight(range);                                                                                         // 4813\n\t\tthis.renderRangeHelper(range, seg);                                                                                  // 4814\n\t},                                                                                                                    // 4815\n                                                                                                                       // 4816\n                                                                                                                       // 4817\n\t// Unrenders a visual indication of an event being resized                                                            // 4818\n\tdestroyEventResize: function() {                                                                                      // 4819\n\t\tthis.destroyHighlight();                                                                                             // 4820\n\t\tthis.destroyHelper();                                                                                                // 4821\n\t},                                                                                                                    // 4822\n                                                                                                                       // 4823\n                                                                                                                       // 4824\n\t/* Event Helper                                                                                                       // 4825\n\t------------------------------------------------------------------------------------------------------------------*/  // 4826\n                                                                                                                       // 4827\n                                                                                                                       // 4828\n\t// Renders a mock \"helper\" event. `sourceSeg` is the associated internal segment object. It can be null.              // 4829\n\trenderHelper: function(event, sourceSeg) {                                                                            // 4830\n\t\tvar helperNodes = [];                                                                                                // 4831\n\t\tvar segs = this.eventsToSegs([ event ]);                                                                             // 4832\n\t\tvar rowStructs;                                                                                                      // 4833\n                                                                                                                       // 4834\n\t\tsegs = this.renderFgSegEls(segs); // assigns each seg's el and returns a subset of segs that were rendered           // 4835\n\t\trowStructs = this.renderSegRows(segs);                                                                               // 4836\n                                                                                                                       // 4837\n\t\t// inject each new event skeleton into each associated row                                                           // 4838\n\t\tthis.rowEls.each(function(row, rowNode) {                                                                            // 4839\n\t\t\tvar rowEl = $(rowNode); // the .fc-row                                                                              // 4840\n\t\t\tvar skeletonEl = $('<div class=\"fc-helper-skeleton\"><table/></div>'); // will be absolutely positioned              // 4841\n\t\t\tvar skeletonTop;                                                                                                    // 4842\n                                                                                                                       // 4843\n\t\t\t// If there is an original segment, match the top position. Otherwise, put it at the row's top level                // 4844\n\t\t\tif (sourceSeg && sourceSeg.row === row) {                                                                           // 4845\n\t\t\t\tskeletonTop = sourceSeg.el.position().top;                                                                         // 4846\n\t\t\t}                                                                                                                   // 4847\n\t\t\telse {                                                                                                              // 4848\n\t\t\t\tskeletonTop = rowEl.find('.fc-content-skeleton tbody').position().top;                                             // 4849\n\t\t\t}                                                                                                                   // 4850\n                                                                                                                       // 4851\n\t\t\tskeletonEl.css('top', skeletonTop)                                                                                  // 4852\n\t\t\t\t.find('table')                                                                                                     // 4853\n\t\t\t\t\t.append(rowStructs[row].tbodyEl);                                                                                 // 4854\n                                                                                                                       // 4855\n\t\t\trowEl.append(skeletonEl);                                                                                           // 4856\n\t\t\thelperNodes.push(skeletonEl[0]);                                                                                    // 4857\n\t\t});                                                                                                                  // 4858\n                                                                                                                       // 4859\n\t\tthis.helperEls = $(helperNodes); // array -> jQuery set                                                              // 4860\n\t},                                                                                                                    // 4861\n                                                                                                                       // 4862\n                                                                                                                       // 4863\n\t// Unrenders any visual indication of a mock helper event                                                             // 4864\n\tdestroyHelper: function() {                                                                                           // 4865\n\t\tif (this.helperEls) {                                                                                                // 4866\n\t\t\tthis.helperEls.remove();                                                                                            // 4867\n\t\t\tthis.helperEls = null;                                                                                              // 4868\n\t\t}                                                                                                                    // 4869\n\t},                                                                                                                    // 4870\n                                                                                                                       // 4871\n                                                                                                                       // 4872\n\t/* Fill System (highlight, background events, business hours)                                                         // 4873\n\t------------------------------------------------------------------------------------------------------------------*/  // 4874\n                                                                                                                       // 4875\n                                                                                                                       // 4876\n\tfillSegTag: 'td', // override the default tag name                                                                    // 4877\n                                                                                                                       // 4878\n                                                                                                                       // 4879\n\t// Renders a set of rectangles over the given segments of days.                                                       // 4880\n\t// Only returns segments that successfully rendered.                                                                  // 4881\n\trenderFill: function(type, segs, className) {                                                                         // 4882\n\t\tvar nodes = [];                                                                                                      // 4883\n\t\tvar i, seg;                                                                                                          // 4884\n\t\tvar skeletonEl;                                                                                                      // 4885\n                                                                                                                       // 4886\n\t\tsegs = this.renderFillSegEls(type, segs); // assignes `.el` to each seg. returns successfully rendered segs          // 4887\n                                                                                                                       // 4888\n\t\tfor (i = 0; i < segs.length; i++) {                                                                                  // 4889\n\t\t\tseg = segs[i];                                                                                                      // 4890\n\t\t\tskeletonEl = this.renderFillRow(type, seg, className);                                                              // 4891\n\t\t\tthis.rowEls.eq(seg.row).append(skeletonEl);                                                                         // 4892\n\t\t\tnodes.push(skeletonEl[0]);                                                                                          // 4893\n\t\t}                                                                                                                    // 4894\n                                                                                                                       // 4895\n\t\tthis.elsByFill[type] = $(nodes);                                                                                     // 4896\n                                                                                                                       // 4897\n\t\treturn segs;                                                                                                         // 4898\n\t},                                                                                                                    // 4899\n                                                                                                                       // 4900\n                                                                                                                       // 4901\n\t// Generates the HTML needed for one row of a fill. Requires the seg's el to be rendered.                             // 4902\n\trenderFillRow: function(type, seg, className) {                                                                       // 4903\n\t\tvar colCnt = this.colCnt;                                                                                            // 4904\n\t\tvar startCol = seg.leftCol;                                                                                          // 4905\n\t\tvar endCol = seg.rightCol + 1;                                                                                       // 4906\n\t\tvar skeletonEl;                                                                                                      // 4907\n\t\tvar trEl;                                                                                                            // 4908\n                                                                                                                       // 4909\n\t\tclassName = className || type.toLowerCase();                                                                         // 4910\n                                                                                                                       // 4911\n\t\tskeletonEl = $(                                                                                                      // 4912\n\t\t\t'<div class=\"fc-' + className + '-skeleton\">' +                                                                     // 4913\n\t\t\t\t'<table><tr/></table>' +                                                                                           // 4914\n\t\t\t'</div>'                                                                                                            // 4915\n\t\t);                                                                                                                   // 4916\n\t\ttrEl = skeletonEl.find('tr');                                                                                        // 4917\n                                                                                                                       // 4918\n\t\tif (startCol > 0) {                                                                                                  // 4919\n\t\t\ttrEl.append('<td colspan=\"' + startCol + '\"/>');                                                                    // 4920\n\t\t}                                                                                                                    // 4921\n                                                                                                                       // 4922\n\t\ttrEl.append(                                                                                                         // 4923\n\t\t\tseg.el.attr('colspan', endCol - startCol)                                                                           // 4924\n\t\t);                                                                                                                   // 4925\n                                                                                                                       // 4926\n\t\tif (endCol < colCnt) {                                                                                               // 4927\n\t\t\ttrEl.append('<td colspan=\"' + (colCnt - endCol) + '\"/>');                                                           // 4928\n\t\t}                                                                                                                    // 4929\n                                                                                                                       // 4930\n\t\tthis.bookendCells(trEl, type);                                                                                       // 4931\n                                                                                                                       // 4932\n\t\treturn skeletonEl;                                                                                                   // 4933\n\t}                                                                                                                     // 4934\n                                                                                                                       // 4935\n});                                                                                                                    // 4936\n                                                                                                                       // 4937\n;;                                                                                                                     // 4938\n                                                                                                                       // 4939\n/* Event-rendering methods for the DayGrid class                                                                       // 4940\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 4942\nDayGrid.mixin({                                                                                                        // 4943\n                                                                                                                       // 4944\n\trowStructs: null, // an array of objects, each holding information about a row's foreground event-rendering           // 4945\n                                                                                                                       // 4946\n                                                                                                                       // 4947\n\t// Unrenders all events currently rendered on the grid                                                                // 4948\n\tdestroyEvents: function() {                                                                                           // 4949\n\t\tthis.destroySegPopover(); // removes the \"more..\" events popover                                                     // 4950\n\t\tGrid.prototype.destroyEvents.apply(this, arguments); // calls the super-method                                       // 4951\n\t},                                                                                                                    // 4952\n                                                                                                                       // 4953\n                                                                                                                       // 4954\n\t// Retrieves all rendered segment objects currently rendered on the grid                                              // 4955\n\tgetEventSegs: function() {                                                                                            // 4956\n\t\treturn Grid.prototype.getEventSegs.call(this) // get the segments from the super-method                              // 4957\n\t\t\t.concat(this.popoverSegs || []); // append the segments from the \"more...\" popover                                  // 4958\n\t},                                                                                                                    // 4959\n                                                                                                                       // 4960\n                                                                                                                       // 4961\n\t// Renders the given background event segments onto the grid                                                          // 4962\n\trenderBgSegs: function(segs) {                                                                                        // 4963\n                                                                                                                       // 4964\n\t\t// don't render timed background events                                                                              // 4965\n\t\tvar allDaySegs = $.grep(segs, function(seg) {                                                                        // 4966\n\t\t\treturn seg.event.allDay;                                                                                            // 4967\n\t\t});                                                                                                                  // 4968\n                                                                                                                       // 4969\n\t\treturn Grid.prototype.renderBgSegs.call(this, allDaySegs); // call the super-method                                  // 4970\n\t},                                                                                                                    // 4971\n                                                                                                                       // 4972\n                                                                                                                       // 4973\n\t// Renders the given foreground event segments onto the grid                                                          // 4974\n\trenderFgSegs: function(segs) {                                                                                        // 4975\n\t\tvar rowStructs;                                                                                                      // 4976\n                                                                                                                       // 4977\n\t\t// render an `.el` on each seg                                                                                       // 4978\n\t\t// returns a subset of the segs. segs that were actually rendered                                                    // 4979\n\t\tsegs = this.renderFgSegEls(segs);                                                                                    // 4980\n                                                                                                                       // 4981\n\t\trowStructs = this.rowStructs = this.renderSegRows(segs);                                                             // 4982\n                                                                                                                       // 4983\n\t\t// append to each row's content skeleton                                                                             // 4984\n\t\tthis.rowEls.each(function(i, rowNode) {                                                                              // 4985\n\t\t\t$(rowNode).find('.fc-content-skeleton > table').append(                                                             // 4986\n\t\t\t\trowStructs[i].tbodyEl                                                                                              // 4987\n\t\t\t);                                                                                                                  // 4988\n\t\t});                                                                                                                  // 4989\n                                                                                                                       // 4990\n\t\treturn segs; // return only the segs that were actually rendered                                                     // 4991\n\t},                                                                                                                    // 4992\n                                                                                                                       // 4993\n                                                                                                                       // 4994\n\t// Unrenders all currently rendered foreground event segments                                                         // 4995\n\tdestroyFgSegs: function() {                                                                                           // 4996\n\t\tvar rowStructs = this.rowStructs || [];                                                                              // 4997\n\t\tvar rowStruct;                                                                                                       // 4998\n                                                                                                                       // 4999\n\t\twhile ((rowStruct = rowStructs.pop())) {                                                                             // 5000\n\t\t\trowStruct.tbodyEl.remove();                                                                                         // 5001\n\t\t}                                                                                                                    // 5002\n                                                                                                                       // 5003\n\t\tthis.rowStructs = null;                                                                                              // 5004\n\t},                                                                                                                    // 5005\n                                                                                                                       // 5006\n                                                                                                                       // 5007\n\t// Uses the given events array to generate <tbody> elements that should be appended to each row's content skeleton.   // 5008\n\t// Returns an array of rowStruct objects (see the bottom of `renderSegRow`).                                          // 5009\n\t// PRECONDITION: each segment shoud already have a rendered and assigned `.el`                                        // 5010\n\trenderSegRows: function(segs) {                                                                                       // 5011\n\t\tvar rowStructs = [];                                                                                                 // 5012\n\t\tvar segRows;                                                                                                         // 5013\n\t\tvar row;                                                                                                             // 5014\n                                                                                                                       // 5015\n\t\tsegRows = this.groupSegRows(segs); // group into nested arrays                                                       // 5016\n                                                                                                                       // 5017\n\t\t// iterate each row of segment groupings                                                                             // 5018\n\t\tfor (row = 0; row < segRows.length; row++) {                                                                         // 5019\n\t\t\trowStructs.push(                                                                                                    // 5020\n\t\t\t\tthis.renderSegRow(row, segRows[row])                                                                               // 5021\n\t\t\t);                                                                                                                  // 5022\n\t\t}                                                                                                                    // 5023\n                                                                                                                       // 5024\n\t\treturn rowStructs;                                                                                                   // 5025\n\t},                                                                                                                    // 5026\n                                                                                                                       // 5027\n                                                                                                                       // 5028\n\t// Builds the HTML to be used for the default element for an individual segment                                       // 5029\n\tfgSegHtml: function(seg, disableResizing) {                                                                           // 5030\n\t\tvar view = this.view;                                                                                                // 5031\n\t\tvar event = seg.event;                                                                                               // 5032\n\t\tvar isDraggable = view.isEventDraggable(event);                                                                      // 5033\n\t\tvar isResizableFromStart = !disableResizing && event.allDay &&                                                       // 5034\n\t\t\tseg.isStart && view.isEventResizableFromStart(event);                                                               // 5035\n\t\tvar isResizableFromEnd = !disableResizing && event.allDay &&                                                         // 5036\n\t\t\tseg.isEnd && view.isEventResizableFromEnd(event);                                                                   // 5037\n\t\tvar classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd);                      // 5038\n\t\tvar skinCss = cssToStr(this.getEventSkinCss(event));                                                                 // 5039\n\t\tvar timeHtml = '';                                                                                                   // 5040\n\t\tvar timeText;                                                                                                        // 5041\n\t\tvar titleHtml;                                                                                                       // 5042\n                                                                                                                       // 5043\n\t\tclasses.unshift('fc-day-grid-event', 'fc-h-event');                                                                  // 5044\n                                                                                                                       // 5045\n\t\t// Only display a timed events time if it is the starting segment                                                    // 5046\n\t\tif (seg.isStart) {                                                                                                   // 5047\n\t\t\ttimeText = this.getEventTimeText(event);                                                                            // 5048\n\t\t\tif (timeText) {                                                                                                     // 5049\n\t\t\t\ttimeHtml = '<span class=\"fc-time\">' + htmlEscape(timeText) + '</span>';                                            // 5050\n\t\t\t}                                                                                                                   // 5051\n\t\t}                                                                                                                    // 5052\n                                                                                                                       // 5053\n\t\ttitleHtml =                                                                                                          // 5054\n\t\t\t'<span class=\"fc-title\">' +                                                                                         // 5055\n\t\t\t\t(htmlEscape(event.title || '') || '&nbsp;') + // we always want one line of height                                 // 5056\n\t\t\t'</span>';                                                                                                          // 5057\n\t\t                                                                                                                     // 5058\n\t\treturn '<a class=\"' + classes.join(' ') + '\"' +                                                                      // 5059\n\t\t\t\t(event.url ?                                                                                                       // 5060\n\t\t\t\t\t' href=\"' + htmlEscape(event.url) + '\"' :                                                                         // 5061\n\t\t\t\t\t''                                                                                                                // 5062\n\t\t\t\t\t) +                                                                                                               // 5063\n\t\t\t\t(skinCss ?                                                                                                         // 5064\n\t\t\t\t\t' style=\"' + skinCss + '\"' :                                                                                      // 5065\n\t\t\t\t\t''                                                                                                                // 5066\n\t\t\t\t\t) +                                                                                                               // 5067\n\t\t\t'>' +                                                                                                               // 5068\n\t\t\t\t'<div class=\"fc-content\">' +                                                                                       // 5069\n\t\t\t\t\t(this.isRTL ?                                                                                                     // 5070\n\t\t\t\t\t\ttitleHtml + ' ' + timeHtml : // put a natural space in between                                                   // 5071\n\t\t\t\t\t\ttimeHtml + ' ' + titleHtml   //                                                                                  // 5072\n\t\t\t\t\t\t) +                                                                                                              // 5073\n\t\t\t\t'</div>' +                                                                                                         // 5074\n\t\t\t\t(isResizableFromStart ?                                                                                            // 5075\n\t\t\t\t\t'<div class=\"fc-resizer fc-start-resizer\" />' :                                                                   // 5076\n\t\t\t\t\t''                                                                                                                // 5077\n\t\t\t\t\t) +                                                                                                               // 5078\n\t\t\t\t(isResizableFromEnd ?                                                                                              // 5079\n\t\t\t\t\t'<div class=\"fc-resizer fc-end-resizer\" />' :                                                                     // 5080\n\t\t\t\t\t''                                                                                                                // 5081\n\t\t\t\t\t) +                                                                                                               // 5082\n\t\t\t'</a>';                                                                                                             // 5083\n\t},                                                                                                                    // 5084\n                                                                                                                       // 5085\n                                                                                                                       // 5086\n\t// Given a row # and an array of segments all in the same row, render a <tbody> element, a skeleton that contains     // 5087\n\t// the segments. Returns object with a bunch of internal data about how the render was calculated.                    // 5088\n\t// NOTE: modifies rowSegs                                                                                             // 5089\n\trenderSegRow: function(row, rowSegs) {                                                                                // 5090\n\t\tvar colCnt = this.colCnt;                                                                                            // 5091\n\t\tvar segLevels = this.buildSegLevels(rowSegs); // group into sub-arrays of levels                                     // 5092\n\t\tvar levelCnt = Math.max(1, segLevels.length); // ensure at least one level                                           // 5093\n\t\tvar tbody = $('<tbody/>');                                                                                           // 5094\n\t\tvar segMatrix = []; // lookup for which segments are rendered into which level+col cells                             // 5095\n\t\tvar cellMatrix = []; // lookup for all <td> elements of the level+col matrix                                         // 5096\n\t\tvar loneCellMatrix = []; // lookup for <td> elements that only take up a single column                               // 5097\n\t\tvar i, levelSegs;                                                                                                    // 5098\n\t\tvar col;                                                                                                             // 5099\n\t\tvar tr;                                                                                                              // 5100\n\t\tvar j, seg;                                                                                                          // 5101\n\t\tvar td;                                                                                                              // 5102\n                                                                                                                       // 5103\n\t\t// populates empty cells from the current column (`col`) to `endCol`                                                 // 5104\n\t\tfunction emptyCellsUntil(endCol) {                                                                                   // 5105\n\t\t\twhile (col < endCol) {                                                                                              // 5106\n\t\t\t\t// try to grab a cell from the level above and extend its rowspan. otherwise, create a fresh cell                  // 5107\n\t\t\t\ttd = (loneCellMatrix[i - 1] || [])[col];                                                                           // 5108\n\t\t\t\tif (td) {                                                                                                          // 5109\n\t\t\t\t\ttd.attr(                                                                                                          // 5110\n\t\t\t\t\t\t'rowspan',                                                                                                       // 5111\n\t\t\t\t\t\tparseInt(td.attr('rowspan') || 1, 10) + 1                                                                        // 5112\n\t\t\t\t\t);                                                                                                                // 5113\n\t\t\t\t}                                                                                                                  // 5114\n\t\t\t\telse {                                                                                                             // 5115\n\t\t\t\t\ttd = $('<td/>');                                                                                                  // 5116\n\t\t\t\t\ttr.append(td);                                                                                                    // 5117\n\t\t\t\t}                                                                                                                  // 5118\n\t\t\t\tcellMatrix[i][col] = td;                                                                                           // 5119\n\t\t\t\tloneCellMatrix[i][col] = td;                                                                                       // 5120\n\t\t\t\tcol++;                                                                                                             // 5121\n\t\t\t}                                                                                                                   // 5122\n\t\t}                                                                                                                    // 5123\n                                                                                                                       // 5124\n\t\tfor (i = 0; i < levelCnt; i++) { // iterate through all levels                                                       // 5125\n\t\t\tlevelSegs = segLevels[i];                                                                                           // 5126\n\t\t\tcol = 0;                                                                                                            // 5127\n\t\t\ttr = $('<tr/>');                                                                                                    // 5128\n                                                                                                                       // 5129\n\t\t\tsegMatrix.push([]);                                                                                                 // 5130\n\t\t\tcellMatrix.push([]);                                                                                                // 5131\n\t\t\tloneCellMatrix.push([]);                                                                                            // 5132\n                                                                                                                       // 5133\n\t\t\t// levelCnt might be 1 even though there are no actual levels. protect against this.                                // 5134\n\t\t\t// this single empty row is useful for styling.                                                                     // 5135\n\t\t\tif (levelSegs) {                                                                                                    // 5136\n\t\t\t\tfor (j = 0; j < levelSegs.length; j++) { // iterate through segments in level                                      // 5137\n\t\t\t\t\tseg = levelSegs[j];                                                                                               // 5138\n                                                                                                                       // 5139\n\t\t\t\t\temptyCellsUntil(seg.leftCol);                                                                                     // 5140\n                                                                                                                       // 5141\n\t\t\t\t\t// create a container that occupies or more columns. append the event element.                                    // 5142\n\t\t\t\t\ttd = $('<td class=\"fc-event-container\"/>').append(seg.el);                                                        // 5143\n\t\t\t\t\tif (seg.leftCol != seg.rightCol) {                                                                                // 5144\n\t\t\t\t\t\ttd.attr('colspan', seg.rightCol - seg.leftCol + 1);                                                              // 5145\n\t\t\t\t\t}                                                                                                                 // 5146\n\t\t\t\t\telse { // a single-column segment                                                                                 // 5147\n\t\t\t\t\t\tloneCellMatrix[i][col] = td;                                                                                     // 5148\n\t\t\t\t\t}                                                                                                                 // 5149\n                                                                                                                       // 5150\n\t\t\t\t\twhile (col <= seg.rightCol) {                                                                                     // 5151\n\t\t\t\t\t\tcellMatrix[i][col] = td;                                                                                         // 5152\n\t\t\t\t\t\tsegMatrix[i][col] = seg;                                                                                         // 5153\n\t\t\t\t\t\tcol++;                                                                                                           // 5154\n\t\t\t\t\t}                                                                                                                 // 5155\n                                                                                                                       // 5156\n\t\t\t\t\ttr.append(td);                                                                                                    // 5157\n\t\t\t\t}                                                                                                                  // 5158\n\t\t\t}                                                                                                                   // 5159\n                                                                                                                       // 5160\n\t\t\temptyCellsUntil(colCnt); // finish off the row                                                                      // 5161\n\t\t\tthis.bookendCells(tr, 'eventSkeleton');                                                                             // 5162\n\t\t\ttbody.append(tr);                                                                                                   // 5163\n\t\t}                                                                                                                    // 5164\n                                                                                                                       // 5165\n\t\treturn { // a \"rowStruct\"                                                                                            // 5166\n\t\t\trow: row, // the row number                                                                                         // 5167\n\t\t\ttbodyEl: tbody,                                                                                                     // 5168\n\t\t\tcellMatrix: cellMatrix,                                                                                             // 5169\n\t\t\tsegMatrix: segMatrix,                                                                                               // 5170\n\t\t\tsegLevels: segLevels,                                                                                               // 5171\n\t\t\tsegs: rowSegs                                                                                                       // 5172\n\t\t};                                                                                                                   // 5173\n\t},                                                                                                                    // 5174\n                                                                                                                       // 5175\n                                                                                                                       // 5176\n\t// Stacks a flat array of segments, which are all assumed to be in the same row, into subarrays of vertical levels.   // 5177\n\t// NOTE: modifies segs                                                                                                // 5178\n\tbuildSegLevels: function(segs) {                                                                                      // 5179\n\t\tvar levels = [];                                                                                                     // 5180\n\t\tvar i, seg;                                                                                                          // 5181\n\t\tvar j;                                                                                                               // 5182\n                                                                                                                       // 5183\n\t\t// Give preference to elements with certain criteria, so they have                                                   // 5184\n\t\t// a chance to be closer to the top.                                                                                 // 5185\n\t\tsegs.sort(compareSegs);                                                                                              // 5186\n\t\t                                                                                                                     // 5187\n\t\tfor (i = 0; i < segs.length; i++) {                                                                                  // 5188\n\t\t\tseg = segs[i];                                                                                                      // 5189\n                                                                                                                       // 5190\n\t\t\t// loop through levels, starting with the topmost, until the segment doesn't collide with other segments            // 5191\n\t\t\tfor (j = 0; j < levels.length; j++) {                                                                               // 5192\n\t\t\t\tif (!isDaySegCollision(seg, levels[j])) {                                                                          // 5193\n\t\t\t\t\tbreak;                                                                                                            // 5194\n\t\t\t\t}                                                                                                                  // 5195\n\t\t\t}                                                                                                                   // 5196\n\t\t\t// `j` now holds the desired subrow index                                                                           // 5197\n\t\t\tseg.level = j;                                                                                                      // 5198\n                                                                                                                       // 5199\n\t\t\t// create new level array if needed and append segment                                                              // 5200\n\t\t\t(levels[j] || (levels[j] = [])).push(seg);                                                                          // 5201\n\t\t}                                                                                                                    // 5202\n                                                                                                                       // 5203\n\t\t// order segments left-to-right. very important if calendar is RTL                                                   // 5204\n\t\tfor (j = 0; j < levels.length; j++) {                                                                                // 5205\n\t\t\tlevels[j].sort(compareDaySegCols);                                                                                  // 5206\n\t\t}                                                                                                                    // 5207\n                                                                                                                       // 5208\n\t\treturn levels;                                                                                                       // 5209\n\t},                                                                                                                    // 5210\n                                                                                                                       // 5211\n                                                                                                                       // 5212\n\t// Given a flat array of segments, return an array of sub-arrays, grouped by each segment's row                       // 5213\n\tgroupSegRows: function(segs) {                                                                                        // 5214\n\t\tvar segRows = [];                                                                                                    // 5215\n\t\tvar i;                                                                                                               // 5216\n                                                                                                                       // 5217\n\t\tfor (i = 0; i < this.rowCnt; i++) {                                                                                  // 5218\n\t\t\tsegRows.push([]);                                                                                                   // 5219\n\t\t}                                                                                                                    // 5220\n                                                                                                                       // 5221\n\t\tfor (i = 0; i < segs.length; i++) {                                                                                  // 5222\n\t\t\tsegRows[segs[i].row].push(segs[i]);                                                                                 // 5223\n\t\t}                                                                                                                    // 5224\n                                                                                                                       // 5225\n\t\treturn segRows;                                                                                                      // 5226\n\t}                                                                                                                     // 5227\n                                                                                                                       // 5228\n});                                                                                                                    // 5229\n                                                                                                                       // 5230\n                                                                                                                       // 5231\n// Computes whether two segments' columns collide. They are assumed to be in the same row.                             // 5232\nfunction isDaySegCollision(seg, otherSegs) {                                                                           // 5233\n\tvar i, otherSeg;                                                                                                      // 5234\n                                                                                                                       // 5235\n\tfor (i = 0; i < otherSegs.length; i++) {                                                                              // 5236\n\t\totherSeg = otherSegs[i];                                                                                             // 5237\n                                                                                                                       // 5238\n\t\tif (                                                                                                                 // 5239\n\t\t\totherSeg.leftCol <= seg.rightCol &&                                                                                 // 5240\n\t\t\totherSeg.rightCol >= seg.leftCol                                                                                    // 5241\n\t\t) {                                                                                                                  // 5242\n\t\t\treturn true;                                                                                                        // 5243\n\t\t}                                                                                                                    // 5244\n\t}                                                                                                                     // 5245\n                                                                                                                       // 5246\n\treturn false;                                                                                                         // 5247\n}                                                                                                                      // 5248\n                                                                                                                       // 5249\n                                                                                                                       // 5250\n// A cmp function for determining the leftmost event                                                                   // 5251\nfunction compareDaySegCols(a, b) {                                                                                     // 5252\n\treturn a.leftCol - b.leftCol;                                                                                         // 5253\n}                                                                                                                      // 5254\n                                                                                                                       // 5255\n;;                                                                                                                     // 5256\n                                                                                                                       // 5257\n/* Methods relate to limiting the number events for a given day on a DayGrid                                           // 5258\n----------------------------------------------------------------------------------------------------------------------*/\n// NOTE: all the segs being passed around in here are foreground segs                                                  // 5260\n                                                                                                                       // 5261\nDayGrid.mixin({                                                                                                        // 5262\n                                                                                                                       // 5263\n\tsegPopover: null, // the Popover that holds events that can't fit in a cell. null when not visible                    // 5264\n\tpopoverSegs: null, // an array of segment objects that the segPopover holds. null when not visible                    // 5265\n                                                                                                                       // 5266\n                                                                                                                       // 5267\n\tdestroySegPopover: function() {                                                                                       // 5268\n\t\tif (this.segPopover) {                                                                                               // 5269\n\t\t\tthis.segPopover.hide(); // will trigger destruction of `segPopover` and `popoverSegs`                               // 5270\n\t\t}                                                                                                                    // 5271\n\t},                                                                                                                    // 5272\n                                                                                                                       // 5273\n                                                                                                                       // 5274\n\t// Limits the number of \"levels\" (vertically stacking layers of events) for each row of the grid.                     // 5275\n\t// `levelLimit` can be false (don't limit), a number, or true (should be computed).                                   // 5276\n\tlimitRows: function(levelLimit) {                                                                                     // 5277\n\t\tvar rowStructs = this.rowStructs || [];                                                                              // 5278\n\t\tvar row; // row #                                                                                                    // 5279\n\t\tvar rowLevelLimit;                                                                                                   // 5280\n                                                                                                                       // 5281\n\t\tfor (row = 0; row < rowStructs.length; row++) {                                                                      // 5282\n\t\t\tthis.unlimitRow(row);                                                                                               // 5283\n                                                                                                                       // 5284\n\t\t\tif (!levelLimit) {                                                                                                  // 5285\n\t\t\t\trowLevelLimit = false;                                                                                             // 5286\n\t\t\t}                                                                                                                   // 5287\n\t\t\telse if (typeof levelLimit === 'number') {                                                                          // 5288\n\t\t\t\trowLevelLimit = levelLimit;                                                                                        // 5289\n\t\t\t}                                                                                                                   // 5290\n\t\t\telse {                                                                                                              // 5291\n\t\t\t\trowLevelLimit = this.computeRowLevelLimit(row);                                                                    // 5292\n\t\t\t}                                                                                                                   // 5293\n                                                                                                                       // 5294\n\t\t\tif (rowLevelLimit !== false) {                                                                                      // 5295\n\t\t\t\tthis.limitRow(row, rowLevelLimit);                                                                                 // 5296\n\t\t\t}                                                                                                                   // 5297\n\t\t}                                                                                                                    // 5298\n\t},                                                                                                                    // 5299\n                                                                                                                       // 5300\n                                                                                                                       // 5301\n\t// Computes the number of levels a row will accomodate without going outside its bounds.                              // 5302\n\t// Assumes the row is \"rigid\" (maintains a constant height regardless of what is inside).                             // 5303\n\t// `row` is the row number.                                                                                           // 5304\n\tcomputeRowLevelLimit: function(row) {                                                                                 // 5305\n\t\tvar rowEl = this.rowEls.eq(row); // the containing \"fake\" row div                                                    // 5306\n\t\tvar rowHeight = rowEl.height(); // TODO: cache somehow?                                                              // 5307\n\t\tvar trEls = this.rowStructs[row].tbodyEl.children();                                                                 // 5308\n\t\tvar i, trEl;                                                                                                         // 5309\n\t\tvar trHeight;                                                                                                        // 5310\n                                                                                                                       // 5311\n\t\tfunction iterInnerHeights(i, childNode) {                                                                            // 5312\n\t\t\ttrHeight = Math.max(trHeight, $(childNode).outerHeight());                                                          // 5313\n\t\t}                                                                                                                    // 5314\n                                                                                                                       // 5315\n\t\t// Reveal one level <tr> at a time and stop when we find one out of bounds                                           // 5316\n\t\tfor (i = 0; i < trEls.length; i++) {                                                                                 // 5317\n\t\t\ttrEl = trEls.eq(i).removeClass('fc-limited'); // reset to original state (reveal)                                   // 5318\n                                                                                                                       // 5319\n\t\t\t// with rowspans>1 and IE8, trEl.outerHeight() would return the height of the largest cell,                         // 5320\n\t\t\t// so instead, find the tallest inner content element.                                                              // 5321\n\t\t\ttrHeight = 0;                                                                                                       // 5322\n\t\t\ttrEl.find('> td > :first-child').each(iterInnerHeights);                                                            // 5323\n                                                                                                                       // 5324\n\t\t\tif (trEl.position().top + trHeight > rowHeight) {                                                                   // 5325\n\t\t\t\treturn i;                                                                                                          // 5326\n\t\t\t}                                                                                                                   // 5327\n\t\t}                                                                                                                    // 5328\n                                                                                                                       // 5329\n\t\treturn false; // should not limit at all                                                                             // 5330\n\t},                                                                                                                    // 5331\n                                                                                                                       // 5332\n                                                                                                                       // 5333\n\t// Limits the given grid row to the maximum number of levels and injects \"more\" links if necessary.                   // 5334\n\t// `row` is the row number.                                                                                           // 5335\n\t// `levelLimit` is a number for the maximum (inclusive) number of levels allowed.                                     // 5336\n\tlimitRow: function(row, levelLimit) {                                                                                 // 5337\n\t\tvar _this = this;                                                                                                    // 5338\n\t\tvar rowStruct = this.rowStructs[row];                                                                                // 5339\n\t\tvar moreNodes = []; // array of \"more\" <a> links and <td> DOM nodes                                                  // 5340\n\t\tvar col = 0; // col #, left-to-right (not chronologically)                                                           // 5341\n\t\tvar cell;                                                                                                            // 5342\n\t\tvar levelSegs; // array of segment objects in the last allowable level, ordered left-to-right                        // 5343\n\t\tvar cellMatrix; // a matrix (by level, then column) of all <td> jQuery elements in the row                           // 5344\n\t\tvar limitedNodes; // array of temporarily hidden level <tr> and segment <td> DOM nodes                               // 5345\n\t\tvar i, seg;                                                                                                          // 5346\n\t\tvar segsBelow; // array of segment objects below `seg` in the current `col`                                          // 5347\n\t\tvar totalSegsBelow; // total number of segments below `seg` in any of the columns `seg` occupies                     // 5348\n\t\tvar colSegsBelow; // array of segment arrays, below seg, one for each column (offset from segs's first column)       // 5349\n\t\tvar td, rowspan;                                                                                                     // 5350\n\t\tvar segMoreNodes; // array of \"more\" <td> cells that will stand-in for the current seg's cell                        // 5351\n\t\tvar j;                                                                                                               // 5352\n\t\tvar moreTd, moreWrap, moreLink;                                                                                      // 5353\n                                                                                                                       // 5354\n\t\t// Iterates through empty level cells and places \"more\" links inside if need be                                      // 5355\n\t\tfunction emptyCellsUntil(endCol) { // goes from current `col` to `endCol`                                            // 5356\n\t\t\twhile (col < endCol) {                                                                                              // 5357\n\t\t\t\tcell = _this.getCell(row, col);                                                                                    // 5358\n\t\t\t\tsegsBelow = _this.getCellSegs(cell, levelLimit);                                                                   // 5359\n\t\t\t\tif (segsBelow.length) {                                                                                            // 5360\n\t\t\t\t\ttd = cellMatrix[levelLimit - 1][col];                                                                             // 5361\n\t\t\t\t\tmoreLink = _this.renderMoreLink(cell, segsBelow);                                                                 // 5362\n\t\t\t\t\tmoreWrap = $('<div/>').append(moreLink);                                                                          // 5363\n\t\t\t\t\ttd.append(moreWrap);                                                                                              // 5364\n\t\t\t\t\tmoreNodes.push(moreWrap[0]);                                                                                      // 5365\n\t\t\t\t}                                                                                                                  // 5366\n\t\t\t\tcol++;                                                                                                             // 5367\n\t\t\t}                                                                                                                   // 5368\n\t\t}                                                                                                                    // 5369\n                                                                                                                       // 5370\n\t\tif (levelLimit && levelLimit < rowStruct.segLevels.length) { // is it actually over the limit?                       // 5371\n\t\t\tlevelSegs = rowStruct.segLevels[levelLimit - 1];                                                                    // 5372\n\t\t\tcellMatrix = rowStruct.cellMatrix;                                                                                  // 5373\n                                                                                                                       // 5374\n\t\t\tlimitedNodes = rowStruct.tbodyEl.children().slice(levelLimit) // get level <tr> elements past the limit             // 5375\n\t\t\t\t.addClass('fc-limited').get(); // hide elements and get a simple DOM-nodes array                                   // 5376\n                                                                                                                       // 5377\n\t\t\t// iterate though segments in the last allowable level                                                              // 5378\n\t\t\tfor (i = 0; i < levelSegs.length; i++) {                                                                            // 5379\n\t\t\t\tseg = levelSegs[i];                                                                                                // 5380\n\t\t\t\temptyCellsUntil(seg.leftCol); // process empty cells before the segment                                            // 5381\n                                                                                                                       // 5382\n\t\t\t\t// determine *all* segments below `seg` that occupy the same columns                                               // 5383\n\t\t\t\tcolSegsBelow = [];                                                                                                 // 5384\n\t\t\t\ttotalSegsBelow = 0;                                                                                                // 5385\n\t\t\t\twhile (col <= seg.rightCol) {                                                                                      // 5386\n\t\t\t\t\tcell = this.getCell(row, col);                                                                                    // 5387\n\t\t\t\t\tsegsBelow = this.getCellSegs(cell, levelLimit);                                                                   // 5388\n\t\t\t\t\tcolSegsBelow.push(segsBelow);                                                                                     // 5389\n\t\t\t\t\ttotalSegsBelow += segsBelow.length;                                                                               // 5390\n\t\t\t\t\tcol++;                                                                                                            // 5391\n\t\t\t\t}                                                                                                                  // 5392\n                                                                                                                       // 5393\n\t\t\t\tif (totalSegsBelow) { // do we need to replace this segment with one or many \"more\" links?                         // 5394\n\t\t\t\t\ttd = cellMatrix[levelLimit - 1][seg.leftCol]; // the segment's parent cell                                        // 5395\n\t\t\t\t\trowspan = td.attr('rowspan') || 1;                                                                                // 5396\n\t\t\t\t\tsegMoreNodes = [];                                                                                                // 5397\n                                                                                                                       // 5398\n\t\t\t\t\t// make a replacement <td> for each column the segment occupies. will be one for each colspan                     // 5399\n\t\t\t\t\tfor (j = 0; j < colSegsBelow.length; j++) {                                                                       // 5400\n\t\t\t\t\t\tmoreTd = $('<td class=\"fc-more-cell\"/>').attr('rowspan', rowspan);                                               // 5401\n\t\t\t\t\t\tsegsBelow = colSegsBelow[j];                                                                                     // 5402\n\t\t\t\t\t\tcell = this.getCell(row, seg.leftCol + j);                                                                       // 5403\n\t\t\t\t\t\tmoreLink = this.renderMoreLink(cell, [ seg ].concat(segsBelow)); // count seg as hidden too                      // 5404\n\t\t\t\t\t\tmoreWrap = $('<div/>').append(moreLink);                                                                         // 5405\n\t\t\t\t\t\tmoreTd.append(moreWrap);                                                                                         // 5406\n\t\t\t\t\t\tsegMoreNodes.push(moreTd[0]);                                                                                    // 5407\n\t\t\t\t\t\tmoreNodes.push(moreTd[0]);                                                                                       // 5408\n\t\t\t\t\t}                                                                                                                 // 5409\n                                                                                                                       // 5410\n\t\t\t\t\ttd.addClass('fc-limited').after($(segMoreNodes)); // hide original <td> and inject replacements                   // 5411\n\t\t\t\t\tlimitedNodes.push(td[0]);                                                                                         // 5412\n\t\t\t\t}                                                                                                                  // 5413\n\t\t\t}                                                                                                                   // 5414\n                                                                                                                       // 5415\n\t\t\temptyCellsUntil(this.colCnt); // finish off the level                                                               // 5416\n\t\t\trowStruct.moreEls = $(moreNodes); // for easy undoing later                                                         // 5417\n\t\t\trowStruct.limitedEls = $(limitedNodes); // for easy undoing later                                                   // 5418\n\t\t}                                                                                                                    // 5419\n\t},                                                                                                                    // 5420\n                                                                                                                       // 5421\n                                                                                                                       // 5422\n\t// Reveals all levels and removes all \"more\"-related elements for a grid's row.                                       // 5423\n\t// `row` is a row number.                                                                                             // 5424\n\tunlimitRow: function(row) {                                                                                           // 5425\n\t\tvar rowStruct = this.rowStructs[row];                                                                                // 5426\n                                                                                                                       // 5427\n\t\tif (rowStruct.moreEls) {                                                                                             // 5428\n\t\t\trowStruct.moreEls.remove();                                                                                         // 5429\n\t\t\trowStruct.moreEls = null;                                                                                           // 5430\n\t\t}                                                                                                                    // 5431\n                                                                                                                       // 5432\n\t\tif (rowStruct.limitedEls) {                                                                                          // 5433\n\t\t\trowStruct.limitedEls.removeClass('fc-limited');                                                                     // 5434\n\t\t\trowStruct.limitedEls = null;                                                                                        // 5435\n\t\t}                                                                                                                    // 5436\n\t},                                                                                                                    // 5437\n                                                                                                                       // 5438\n                                                                                                                       // 5439\n\t// Renders an <a> element that represents hidden event element for a cell.                                            // 5440\n\t// Responsible for attaching click handler as well.                                                                   // 5441\n\trenderMoreLink: function(cell, hiddenSegs) {                                                                          // 5442\n\t\tvar _this = this;                                                                                                    // 5443\n\t\tvar view = this.view;                                                                                                // 5444\n                                                                                                                       // 5445\n\t\treturn $('<a class=\"fc-more\"/>')                                                                                     // 5446\n\t\t\t.text(                                                                                                              // 5447\n\t\t\t\tthis.getMoreLinkText(hiddenSegs.length)                                                                            // 5448\n\t\t\t)                                                                                                                   // 5449\n\t\t\t.on('click', function(ev) {                                                                                         // 5450\n\t\t\t\tvar clickOption = view.opt('eventLimitClick');                                                                     // 5451\n\t\t\t\tvar date = cell.start;                                                                                             // 5452\n\t\t\t\tvar moreEl = $(this);                                                                                              // 5453\n\t\t\t\tvar dayEl = _this.getCellDayEl(cell);                                                                              // 5454\n\t\t\t\tvar allSegs = _this.getCellSegs(cell);                                                                             // 5455\n                                                                                                                       // 5456\n\t\t\t\t// rescope the segments to be within the cell's date                                                               // 5457\n\t\t\t\tvar reslicedAllSegs = _this.resliceDaySegs(allSegs, date);                                                         // 5458\n\t\t\t\tvar reslicedHiddenSegs = _this.resliceDaySegs(hiddenSegs, date);                                                   // 5459\n                                                                                                                       // 5460\n\t\t\t\tif (typeof clickOption === 'function') {                                                                           // 5461\n\t\t\t\t\t// the returned value can be an atomic option                                                                     // 5462\n\t\t\t\t\tclickOption = view.trigger('eventLimitClick', null, {                                                             // 5463\n\t\t\t\t\t\tdate: date,                                                                                                      // 5464\n\t\t\t\t\t\tdayEl: dayEl,                                                                                                    // 5465\n\t\t\t\t\t\tmoreEl: moreEl,                                                                                                  // 5466\n\t\t\t\t\t\tsegs: reslicedAllSegs,                                                                                           // 5467\n\t\t\t\t\t\thiddenSegs: reslicedHiddenSegs                                                                                   // 5468\n\t\t\t\t\t}, ev);                                                                                                           // 5469\n\t\t\t\t}                                                                                                                  // 5470\n                                                                                                                       // 5471\n\t\t\t\tif (clickOption === 'popover') {                                                                                   // 5472\n\t\t\t\t\t_this.showSegPopover(cell, moreEl, reslicedAllSegs);                                                              // 5473\n\t\t\t\t}                                                                                                                  // 5474\n\t\t\t\telse if (typeof clickOption === 'string') { // a view name                                                         // 5475\n\t\t\t\t\tview.calendar.zoomTo(date, clickOption);                                                                          // 5476\n\t\t\t\t}                                                                                                                  // 5477\n\t\t\t});                                                                                                                 // 5478\n\t},                                                                                                                    // 5479\n                                                                                                                       // 5480\n                                                                                                                       // 5481\n\t// Reveals the popover that displays all events within a cell                                                         // 5482\n\tshowSegPopover: function(cell, moreLink, segs) {                                                                      // 5483\n\t\tvar _this = this;                                                                                                    // 5484\n\t\tvar view = this.view;                                                                                                // 5485\n\t\tvar moreWrap = moreLink.parent(); // the <div> wrapper around the <a>                                                // 5486\n\t\tvar topEl; // the element we want to match the top coordinate of                                                     // 5487\n\t\tvar options;                                                                                                         // 5488\n                                                                                                                       // 5489\n\t\tif (this.rowCnt == 1) {                                                                                              // 5490\n\t\t\ttopEl = view.el; // will cause the popover to cover any sort of header                                              // 5491\n\t\t}                                                                                                                    // 5492\n\t\telse {                                                                                                               // 5493\n\t\t\ttopEl = this.rowEls.eq(cell.row); // will align with top of row                                                     // 5494\n\t\t}                                                                                                                    // 5495\n                                                                                                                       // 5496\n\t\toptions = {                                                                                                          // 5497\n\t\t\tclassName: 'fc-more-popover',                                                                                       // 5498\n\t\t\tcontent: this.renderSegPopoverContent(cell, segs),                                                                  // 5499\n\t\t\tparentEl: this.el,                                                                                                  // 5500\n\t\t\ttop: topEl.offset().top,                                                                                            // 5501\n\t\t\tautoHide: true, // when the user clicks elsewhere, hide the popover                                                 // 5502\n\t\t\tviewportConstrain: view.opt('popoverViewportConstrain'),                                                            // 5503\n\t\t\thide: function() {                                                                                                  // 5504\n\t\t\t\t// destroy everything when the popover is hidden                                                                   // 5505\n\t\t\t\t_this.segPopover.destroy();                                                                                        // 5506\n\t\t\t\t_this.segPopover = null;                                                                                           // 5507\n\t\t\t\t_this.popoverSegs = null;                                                                                          // 5508\n\t\t\t}                                                                                                                   // 5509\n\t\t};                                                                                                                   // 5510\n                                                                                                                       // 5511\n\t\t// Determine horizontal coordinate.                                                                                  // 5512\n\t\t// We use the moreWrap instead of the <td> to avoid border confusion.                                                // 5513\n\t\tif (this.isRTL) {                                                                                                    // 5514\n\t\t\toptions.right = moreWrap.offset().left + moreWrap.outerWidth() + 1; // +1 to be over cell border                    // 5515\n\t\t}                                                                                                                    // 5516\n\t\telse {                                                                                                               // 5517\n\t\t\toptions.left = moreWrap.offset().left - 1; // -1 to be over cell border                                             // 5518\n\t\t}                                                                                                                    // 5519\n                                                                                                                       // 5520\n\t\tthis.segPopover = new Popover(options);                                                                              // 5521\n\t\tthis.segPopover.show();                                                                                              // 5522\n\t},                                                                                                                    // 5523\n                                                                                                                       // 5524\n                                                                                                                       // 5525\n\t// Builds the inner DOM contents of the segment popover                                                               // 5526\n\trenderSegPopoverContent: function(cell, segs) {                                                                       // 5527\n\t\tvar view = this.view;                                                                                                // 5528\n\t\tvar isTheme = view.opt('theme');                                                                                     // 5529\n\t\tvar title = cell.start.format(view.opt('dayPopoverFormat'));                                                         // 5530\n\t\tvar content = $(                                                                                                     // 5531\n\t\t\t'<div class=\"fc-header ' + view.widgetHeaderClass + '\">' +                                                          // 5532\n\t\t\t\t'<span class=\"fc-close ' +                                                                                         // 5533\n\t\t\t\t\t(isTheme ? 'ui-icon ui-icon-closethick' : 'fc-icon fc-icon-x') +                                                  // 5534\n\t\t\t\t'\"></span>' +                                                                                                      // 5535\n\t\t\t\t'<span class=\"fc-title\">' +                                                                                        // 5536\n\t\t\t\t\thtmlEscape(title) +                                                                                               // 5537\n\t\t\t\t'</span>' +                                                                                                        // 5538\n\t\t\t\t'<div class=\"fc-clear\"/>' +                                                                                        // 5539\n\t\t\t'</div>' +                                                                                                          // 5540\n\t\t\t'<div class=\"fc-body ' + view.widgetContentClass + '\">' +                                                           // 5541\n\t\t\t\t'<div class=\"fc-event-container\"></div>' +                                                                         // 5542\n\t\t\t'</div>'                                                                                                            // 5543\n\t\t);                                                                                                                   // 5544\n\t\tvar segContainer = content.find('.fc-event-container');                                                              // 5545\n\t\tvar i;                                                                                                               // 5546\n                                                                                                                       // 5547\n\t\t// render each seg's `el` and only return the visible segs                                                           // 5548\n\t\tsegs = this.renderFgSegEls(segs, true); // disableResizing=true                                                      // 5549\n\t\tthis.popoverSegs = segs;                                                                                             // 5550\n                                                                                                                       // 5551\n\t\tfor (i = 0; i < segs.length; i++) {                                                                                  // 5552\n                                                                                                                       // 5553\n\t\t\t// because segments in the popover are not part of a grid coordinate system, provide a hint to any                  // 5554\n\t\t\t// grids that want to do drag-n-drop about which cell it came from                                                  // 5555\n\t\t\tsegs[i].cell = cell;                                                                                                // 5556\n                                                                                                                       // 5557\n\t\t\tsegContainer.append(segs[i].el);                                                                                    // 5558\n\t\t}                                                                                                                    // 5559\n                                                                                                                       // 5560\n\t\treturn content;                                                                                                      // 5561\n\t},                                                                                                                    // 5562\n                                                                                                                       // 5563\n                                                                                                                       // 5564\n\t// Given the events within an array of segment objects, reslice them to be in a single day                            // 5565\n\tresliceDaySegs: function(segs, dayDate) {                                                                             // 5566\n                                                                                                                       // 5567\n\t\t// build an array of the original events                                                                             // 5568\n\t\tvar events = $.map(segs, function(seg) {                                                                             // 5569\n\t\t\treturn seg.event;                                                                                                   // 5570\n\t\t});                                                                                                                  // 5571\n                                                                                                                       // 5572\n\t\tvar dayStart = dayDate.clone().stripTime();                                                                          // 5573\n\t\tvar dayEnd = dayStart.clone().add(1, 'days');                                                                        // 5574\n\t\tvar dayRange = { start: dayStart, end: dayEnd };                                                                     // 5575\n                                                                                                                       // 5576\n\t\t// slice the events with a custom slicing function                                                                   // 5577\n\t\tsegs = this.eventsToSegs(                                                                                            // 5578\n\t\t\tevents,                                                                                                             // 5579\n\t\t\tfunction(range) {                                                                                                   // 5580\n\t\t\t\tvar seg = intersectionToSeg(range, dayRange); // undefind if no intersection                                       // 5581\n\t\t\t\treturn seg ? [ seg ] : []; // must return an array of segments                                                     // 5582\n\t\t\t}                                                                                                                   // 5583\n\t\t);                                                                                                                   // 5584\n                                                                                                                       // 5585\n\t\t// force an order because eventsToSegs doesn't guarantee one                                                         // 5586\n\t\tsegs.sort(compareSegs);                                                                                              // 5587\n                                                                                                                       // 5588\n\t\treturn segs;                                                                                                         // 5589\n\t},                                                                                                                    // 5590\n                                                                                                                       // 5591\n                                                                                                                       // 5592\n\t// Generates the text that should be inside a \"more\" link, given the number of events it represents                   // 5593\n\tgetMoreLinkText: function(num) {                                                                                      // 5594\n\t\tvar opt = this.view.opt('eventLimitText');                                                                           // 5595\n                                                                                                                       // 5596\n\t\tif (typeof opt === 'function') {                                                                                     // 5597\n\t\t\treturn opt(num);                                                                                                    // 5598\n\t\t}                                                                                                                    // 5599\n\t\telse {                                                                                                               // 5600\n\t\t\treturn '+' + num + ' ' + opt;                                                                                       // 5601\n\t\t}                                                                                                                    // 5602\n\t},                                                                                                                    // 5603\n                                                                                                                       // 5604\n                                                                                                                       // 5605\n\t// Returns segments within a given cell.                                                                              // 5606\n\t// If `startLevel` is specified, returns only events including and below that level. Otherwise returns all segs.      // 5607\n\tgetCellSegs: function(cell, startLevel) {                                                                             // 5608\n\t\tvar segMatrix = this.rowStructs[cell.row].segMatrix;                                                                 // 5609\n\t\tvar level = startLevel || 0;                                                                                         // 5610\n\t\tvar segs = [];                                                                                                       // 5611\n\t\tvar seg;                                                                                                             // 5612\n                                                                                                                       // 5613\n\t\twhile (level < segMatrix.length) {                                                                                   // 5614\n\t\t\tseg = segMatrix[level][cell.col];                                                                                   // 5615\n\t\t\tif (seg) {                                                                                                          // 5616\n\t\t\t\tsegs.push(seg);                                                                                                    // 5617\n\t\t\t}                                                                                                                   // 5618\n\t\t\tlevel++;                                                                                                            // 5619\n\t\t}                                                                                                                    // 5620\n                                                                                                                       // 5621\n\t\treturn segs;                                                                                                         // 5622\n\t}                                                                                                                     // 5623\n                                                                                                                       // 5624\n});                                                                                                                    // 5625\n                                                                                                                       // 5626\n;;                                                                                                                     // 5627\n                                                                                                                       // 5628\n/* A component that renders one or more columns of vertical time slots                                                 // 5629\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 5631\nvar TimeGrid = Grid.extend({                                                                                           // 5632\n                                                                                                                       // 5633\n\tslotDuration: null, // duration of a \"slot\", a distinct time segment on given day, visualized by lines                // 5634\n\tsnapDuration: null, // granularity of time for dragging and selecting                                                 // 5635\n                                                                                                                       // 5636\n\tminTime: null, // Duration object that denotes the first visible time of any given day                                // 5637\n\tmaxTime: null, // Duration object that denotes the exclusive visible end time of any given day                        // 5638\n                                                                                                                       // 5639\n\taxisFormat: null, // formatting string for times running along vertical axis                                          // 5640\n                                                                                                                       // 5641\n\tdayEls: null, // cells elements in the day-row background                                                             // 5642\n\tslatEls: null, // elements running horizontally across all columns                                                    // 5643\n                                                                                                                       // 5644\n\tslatTops: null, // an array of top positions, relative to the container. last item holds bottom of last slot          // 5645\n                                                                                                                       // 5646\n\thelperEl: null, // cell skeleton element for rendering the mock event \"helper\"                                        // 5647\n                                                                                                                       // 5648\n\tbusinessHourSegs: null,                                                                                               // 5649\n                                                                                                                       // 5650\n                                                                                                                       // 5651\n\tconstructor: function() {                                                                                             // 5652\n\t\tGrid.apply(this, arguments); // call the super-constructor                                                           // 5653\n\t\tthis.processOptions();                                                                                               // 5654\n\t},                                                                                                                    // 5655\n                                                                                                                       // 5656\n                                                                                                                       // 5657\n\t// Renders the time grid into `this.el`, which should already be assigned.                                            // 5658\n\t// Relies on the view's colCnt. In the future, this component should probably be self-sufficient.                     // 5659\n\trenderDates: function() {                                                                                             // 5660\n\t\tthis.el.html(this.renderHtml());                                                                                     // 5661\n\t\tthis.dayEls = this.el.find('.fc-day');                                                                               // 5662\n\t\tthis.slatEls = this.el.find('.fc-slats tr');                                                                         // 5663\n\t},                                                                                                                    // 5664\n                                                                                                                       // 5665\n                                                                                                                       // 5666\n\trenderBusinessHours: function() {                                                                                     // 5667\n\t\tvar events = this.view.calendar.getBusinessHoursEvents();                                                            // 5668\n\t\tthis.businessHourSegs = this.renderFill('businessHours', this.eventsToSegs(events), 'bgevent');                      // 5669\n\t},                                                                                                                    // 5670\n                                                                                                                       // 5671\n                                                                                                                       // 5672\n\t// Renders the basic HTML skeleton for the grid                                                                       // 5673\n\trenderHtml: function() {                                                                                              // 5674\n\t\treturn '' +                                                                                                          // 5675\n\t\t\t'<div class=\"fc-bg\">' +                                                                                             // 5676\n\t\t\t\t'<table>' +                                                                                                        // 5677\n\t\t\t\t\tthis.rowHtml('slotBg') + // leverages RowRenderer, which will call slotBgCellHtml                                 // 5678\n\t\t\t\t'</table>' +                                                                                                       // 5679\n\t\t\t'</div>' +                                                                                                          // 5680\n\t\t\t'<div class=\"fc-slats\">' +                                                                                          // 5681\n\t\t\t\t'<table>' +                                                                                                        // 5682\n\t\t\t\t\tthis.slatRowHtml() +                                                                                              // 5683\n\t\t\t\t'</table>' +                                                                                                       // 5684\n\t\t\t'</div>';                                                                                                           // 5685\n\t},                                                                                                                    // 5686\n                                                                                                                       // 5687\n                                                                                                                       // 5688\n\t// Renders the HTML for a vertical background cell behind the slots.                                                  // 5689\n\t// This method is distinct from 'bg' because we wanted a new `rowType` so the View could customize the rendering.     // 5690\n\tslotBgCellHtml: function(cell) {                                                                                      // 5691\n\t\treturn this.bgCellHtml(cell);                                                                                        // 5692\n\t},                                                                                                                    // 5693\n                                                                                                                       // 5694\n                                                                                                                       // 5695\n\t// Generates the HTML for the horizontal \"slats\" that run width-wise. Has a time axis on a side. Depends on RTL.      // 5696\n\tslatRowHtml: function() {                                                                                             // 5697\n\t\tvar view = this.view;                                                                                                // 5698\n\t\tvar isRTL = this.isRTL;                                                                                              // 5699\n\t\tvar html = '';                                                                                                       // 5700\n\t\tvar slotNormal = this.slotDuration.asMinutes() % 15 === 0;                                                           // 5701\n\t\tvar slotTime = moment.duration(+this.minTime); // wish there was .clone() for durations                              // 5702\n\t\tvar slotDate; // will be on the view's first day, but we only care about its time                                    // 5703\n\t\tvar minutes;                                                                                                         // 5704\n\t\tvar axisHtml;                                                                                                        // 5705\n                                                                                                                       // 5706\n\t\t// Calculate the time for each slot                                                                                  // 5707\n\t\twhile (slotTime < this.maxTime) {                                                                                    // 5708\n\t\t\tslotDate = this.start.clone().time(slotTime); // will be in UTC but that's good. to avoid DST issues                // 5709\n\t\t\tminutes = slotDate.minutes();                                                                                       // 5710\n                                                                                                                       // 5711\n\t\t\taxisHtml =                                                                                                          // 5712\n\t\t\t\t'<td class=\"fc-axis fc-time ' + view.widgetContentClass + '\" ' + view.axisStyleAttr() + '>' +                      // 5713\n\t\t\t\t\t((!slotNormal || !minutes) ? // if irregular slot duration, or on the hour, then display the time                 // 5714\n\t\t\t\t\t\t'<span>' + // for matchCellWidths                                                                                // 5715\n\t\t\t\t\t\t\thtmlEscape(slotDate.format(this.axisFormat)) +                                                                  // 5716\n\t\t\t\t\t\t'</span>' :                                                                                                      // 5717\n\t\t\t\t\t\t''                                                                                                               // 5718\n\t\t\t\t\t\t) +                                                                                                              // 5719\n\t\t\t\t'</td>';                                                                                                           // 5720\n                                                                                                                       // 5721\n\t\t\thtml +=                                                                                                             // 5722\n\t\t\t\t'<tr ' + (!minutes ? '' : 'class=\"fc-minor\"') + '>' +                                                              // 5723\n\t\t\t\t\t(!isRTL ? axisHtml : '') +                                                                                        // 5724\n\t\t\t\t\t'<td class=\"' + view.widgetContentClass + '\"/>' +                                                                 // 5725\n\t\t\t\t\t(isRTL ? axisHtml : '') +                                                                                         // 5726\n\t\t\t\t\"</tr>\";                                                                                                           // 5727\n                                                                                                                       // 5728\n\t\t\tslotTime.add(this.slotDuration);                                                                                    // 5729\n\t\t}                                                                                                                    // 5730\n                                                                                                                       // 5731\n\t\treturn html;                                                                                                         // 5732\n\t},                                                                                                                    // 5733\n                                                                                                                       // 5734\n                                                                                                                       // 5735\n\t/* Options                                                                                                            // 5736\n\t------------------------------------------------------------------------------------------------------------------*/  // 5737\n                                                                                                                       // 5738\n                                                                                                                       // 5739\n\t// Parses various options into properties of this object                                                              // 5740\n\tprocessOptions: function() {                                                                                          // 5741\n\t\tvar view = this.view;                                                                                                // 5742\n\t\tvar slotDuration = view.opt('slotDuration');                                                                         // 5743\n\t\tvar snapDuration = view.opt('snapDuration');                                                                         // 5744\n                                                                                                                       // 5745\n\t\tslotDuration = moment.duration(slotDuration);                                                                        // 5746\n\t\tsnapDuration = snapDuration ? moment.duration(snapDuration) : slotDuration;                                          // 5747\n                                                                                                                       // 5748\n\t\tthis.slotDuration = slotDuration;                                                                                    // 5749\n\t\tthis.snapDuration = snapDuration;                                                                                    // 5750\n\t\tthis.cellDuration = snapDuration; // for Grid system                                                                 // 5751\n                                                                                                                       // 5752\n\t\tthis.minTime = moment.duration(view.opt('minTime'));                                                                 // 5753\n\t\tthis.maxTime = moment.duration(view.opt('maxTime'));                                                                 // 5754\n                                                                                                                       // 5755\n\t\tthis.axisFormat = view.opt('axisFormat') || view.opt('smallTimeFormat');                                             // 5756\n\t},                                                                                                                    // 5757\n                                                                                                                       // 5758\n                                                                                                                       // 5759\n\t// Computes a default column header formatting string if `colFormat` is not explicitly defined                        // 5760\n\tcomputeColHeadFormat: function() {                                                                                    // 5761\n\t\tif (this.colCnt > 1) { // multiple days, so full single date string WON'T be in title text                           // 5762\n\t\t\treturn this.view.opt('dayOfMonthFormat'); // \"Sat 12/10\"                                                            // 5763\n\t\t}                                                                                                                    // 5764\n\t\telse { // single day, so full single date string will probably be in title text                                      // 5765\n\t\t\treturn 'dddd'; // \"Saturday\"                                                                                        // 5766\n\t\t}                                                                                                                    // 5767\n\t},                                                                                                                    // 5768\n                                                                                                                       // 5769\n                                                                                                                       // 5770\n\t// Computes a default event time formatting string if `timeFormat` is not explicitly defined                          // 5771\n\tcomputeEventTimeFormat: function() {                                                                                  // 5772\n\t\treturn this.view.opt('noMeridiemTimeFormat'); // like \"6:30\" (no AM/PM)                                              // 5773\n\t},                                                                                                                    // 5774\n                                                                                                                       // 5775\n                                                                                                                       // 5776\n\t// Computes a default `displayEventEnd` value if one is not expliclty defined                                         // 5777\n\tcomputeDisplayEventEnd: function() {                                                                                  // 5778\n\t\treturn true;                                                                                                         // 5779\n\t},                                                                                                                    // 5780\n                                                                                                                       // 5781\n                                                                                                                       // 5782\n\t/* Cell System                                                                                                        // 5783\n\t------------------------------------------------------------------------------------------------------------------*/  // 5784\n                                                                                                                       // 5785\n                                                                                                                       // 5786\n\t// Initializes row/col information                                                                                    // 5787\n\tupdateCells: function() {                                                                                             // 5788\n\t\tvar view = this.view;                                                                                                // 5789\n\t\tvar colData = [];                                                                                                    // 5790\n\t\tvar date;                                                                                                            // 5791\n                                                                                                                       // 5792\n\t\tdate = this.start.clone();                                                                                           // 5793\n\t\twhile (date.isBefore(this.end)) {                                                                                    // 5794\n\t\t\tcolData.push({                                                                                                      // 5795\n\t\t\t\tday: date.clone()                                                                                                  // 5796\n\t\t\t});                                                                                                                 // 5797\n\t\t\tdate.add(1, 'day');                                                                                                 // 5798\n\t\t\tdate = view.skipHiddenDays(date);                                                                                   // 5799\n\t\t}                                                                                                                    // 5800\n                                                                                                                       // 5801\n\t\tif (this.isRTL) {                                                                                                    // 5802\n\t\t\tcolData.reverse();                                                                                                  // 5803\n\t\t}                                                                                                                    // 5804\n                                                                                                                       // 5805\n\t\tthis.colData = colData;                                                                                              // 5806\n\t\tthis.colCnt = colData.length;                                                                                        // 5807\n\t\tthis.rowCnt = Math.ceil((this.maxTime - this.minTime) / this.snapDuration); // # of vertical snaps                   // 5808\n\t},                                                                                                                    // 5809\n                                                                                                                       // 5810\n                                                                                                                       // 5811\n\t// Given a cell object, generates its start date. Returns a reference-free copy.                                      // 5812\n\tcomputeCellDate: function(cell) {                                                                                     // 5813\n\t\tvar time = this.computeSnapTime(cell.row);                                                                           // 5814\n                                                                                                                       // 5815\n\t\treturn this.view.calendar.rezoneDate(cell.day).time(time);                                                           // 5816\n\t},                                                                                                                    // 5817\n                                                                                                                       // 5818\n                                                                                                                       // 5819\n\t// Retrieves the element representing the given column                                                                // 5820\n\tgetColEl: function(col) {                                                                                             // 5821\n\t\treturn this.dayEls.eq(col);                                                                                          // 5822\n\t},                                                                                                                    // 5823\n                                                                                                                       // 5824\n                                                                                                                       // 5825\n\t/* Dates                                                                                                              // 5826\n\t------------------------------------------------------------------------------------------------------------------*/  // 5827\n                                                                                                                       // 5828\n                                                                                                                       // 5829\n\t// Given a row number of the grid, representing a \"snap\", returns a time (Duration) from its start-of-day             // 5830\n\tcomputeSnapTime: function(row) {                                                                                      // 5831\n\t\treturn moment.duration(this.minTime + this.snapDuration * row);                                                      // 5832\n\t},                                                                                                                    // 5833\n                                                                                                                       // 5834\n                                                                                                                       // 5835\n\t// Slices up a date range by column into an array of segments                                                         // 5836\n\trangeToSegs: function(range) {                                                                                        // 5837\n\t\tvar colCnt = this.colCnt;                                                                                            // 5838\n\t\tvar segs = [];                                                                                                       // 5839\n\t\tvar seg;                                                                                                             // 5840\n\t\tvar col;                                                                                                             // 5841\n\t\tvar colDate;                                                                                                         // 5842\n\t\tvar colRange;                                                                                                        // 5843\n                                                                                                                       // 5844\n\t\t// normalize :(                                                                                                      // 5845\n\t\trange = {                                                                                                            // 5846\n\t\t\tstart: range.start.clone().stripZone(),                                                                             // 5847\n\t\t\tend: range.end.clone().stripZone()                                                                                  // 5848\n\t\t};                                                                                                                   // 5849\n                                                                                                                       // 5850\n\t\tfor (col = 0; col < colCnt; col++) {                                                                                 // 5851\n\t\t\tcolDate = this.colData[col].day; // will be ambig time/timezone                                                     // 5852\n\t\t\tcolRange = {                                                                                                        // 5853\n\t\t\t\tstart: colDate.clone().time(this.minTime),                                                                         // 5854\n\t\t\t\tend: colDate.clone().time(this.maxTime)                                                                            // 5855\n\t\t\t};                                                                                                                  // 5856\n\t\t\tseg = intersectionToSeg(range, colRange); // both will be ambig timezone                                            // 5857\n\t\t\tif (seg) {                                                                                                          // 5858\n\t\t\t\tseg.col = col;                                                                                                     // 5859\n\t\t\t\tsegs.push(seg);                                                                                                    // 5860\n\t\t\t}                                                                                                                   // 5861\n\t\t}                                                                                                                    // 5862\n                                                                                                                       // 5863\n\t\treturn segs;                                                                                                         // 5864\n\t},                                                                                                                    // 5865\n                                                                                                                       // 5866\n                                                                                                                       // 5867\n\t/* Coordinates                                                                                                        // 5868\n\t------------------------------------------------------------------------------------------------------------------*/  // 5869\n                                                                                                                       // 5870\n                                                                                                                       // 5871\n\tupdateSize: function(isResize) { // NOT a standard Grid method                                                        // 5872\n\t\tthis.computeSlatTops();                                                                                              // 5873\n                                                                                                                       // 5874\n\t\tif (isResize) {                                                                                                      // 5875\n\t\t\tthis.updateSegVerticals();                                                                                          // 5876\n\t\t}                                                                                                                    // 5877\n\t},                                                                                                                    // 5878\n                                                                                                                       // 5879\n                                                                                                                       // 5880\n\t// Computes the top/bottom coordinates of each \"snap\" rows                                                            // 5881\n\tcomputeRowCoords: function() {                                                                                        // 5882\n\t\tvar originTop = this.el.offset().top;                                                                                // 5883\n\t\tvar items = [];                                                                                                      // 5884\n\t\tvar i;                                                                                                               // 5885\n\t\tvar item;                                                                                                            // 5886\n                                                                                                                       // 5887\n\t\tfor (i = 0; i < this.rowCnt; i++) {                                                                                  // 5888\n\t\t\titem = {                                                                                                            // 5889\n\t\t\t\ttop: originTop + this.computeTimeTop(this.computeSnapTime(i))                                                      // 5890\n\t\t\t};                                                                                                                  // 5891\n\t\t\tif (i > 0) {                                                                                                        // 5892\n\t\t\t\titems[i - 1].bottom = item.top;                                                                                    // 5893\n\t\t\t}                                                                                                                   // 5894\n\t\t\titems.push(item);                                                                                                   // 5895\n\t\t}                                                                                                                    // 5896\n\t\titem.bottom = item.top + this.computeTimeTop(this.computeSnapTime(i));                                               // 5897\n                                                                                                                       // 5898\n\t\treturn items;                                                                                                        // 5899\n\t},                                                                                                                    // 5900\n                                                                                                                       // 5901\n                                                                                                                       // 5902\n\t// Computes the top coordinate, relative to the bounds of the grid, of the given date.                                // 5903\n\t// A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.                                // 5904\n\tcomputeDateTop: function(date, startOfDayDate) {                                                                      // 5905\n\t\treturn this.computeTimeTop(                                                                                          // 5906\n\t\t\tmoment.duration(                                                                                                    // 5907\n\t\t\t\tdate.clone().stripZone() - startOfDayDate.clone().stripTime()                                                      // 5908\n\t\t\t)                                                                                                                   // 5909\n\t\t);                                                                                                                   // 5910\n\t},                                                                                                                    // 5911\n                                                                                                                       // 5912\n                                                                                                                       // 5913\n\t// Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).                   // 5914\n\tcomputeTimeTop: function(time) {                                                                                      // 5915\n\t\tvar slatCoverage = (time - this.minTime) / this.slotDuration; // floating-point value of # of slots covered          // 5916\n\t\tvar slatIndex;                                                                                                       // 5917\n\t\tvar slatRemainder;                                                                                                   // 5918\n\t\tvar slatTop;                                                                                                         // 5919\n\t\tvar slatBottom;                                                                                                      // 5920\n                                                                                                                       // 5921\n\t\t// constrain. because minTime/maxTime might be customized                                                            // 5922\n\t\tslatCoverage = Math.max(0, slatCoverage);                                                                            // 5923\n\t\tslatCoverage = Math.min(this.slatEls.length, slatCoverage);                                                          // 5924\n                                                                                                                       // 5925\n\t\tslatIndex = Math.floor(slatCoverage); // an integer index of the furthest whole slot                                 // 5926\n\t\tslatRemainder = slatCoverage - slatIndex;                                                                            // 5927\n\t\tslatTop = this.slatTops[slatIndex]; // the top position of the furthest whole slot                                   // 5928\n                                                                                                                       // 5929\n\t\tif (slatRemainder) { // time spans part-way into the slot                                                            // 5930\n\t\t\tslatBottom = this.slatTops[slatIndex + 1];                                                                          // 5931\n\t\t\treturn slatTop + (slatBottom - slatTop) * slatRemainder; // part-way between slots                                  // 5932\n\t\t}                                                                                                                    // 5933\n\t\telse {                                                                                                               // 5934\n\t\t\treturn slatTop;                                                                                                     // 5935\n\t\t}                                                                                                                    // 5936\n\t},                                                                                                                    // 5937\n                                                                                                                       // 5938\n                                                                                                                       // 5939\n\t// Queries each `slatEl` for its position relative to the grid's container and stores it in `slatTops`.               // 5940\n\t// Includes the the bottom of the last slat as the last item in the array.                                            // 5941\n\tcomputeSlatTops: function() {                                                                                         // 5942\n\t\tvar tops = [];                                                                                                       // 5943\n\t\tvar top;                                                                                                             // 5944\n                                                                                                                       // 5945\n\t\tthis.slatEls.each(function(i, node) {                                                                                // 5946\n\t\t\ttop = $(node).position().top;                                                                                       // 5947\n\t\t\ttops.push(top);                                                                                                     // 5948\n\t\t});                                                                                                                  // 5949\n                                                                                                                       // 5950\n\t\ttops.push(top + this.slatEls.last().outerHeight()); // bottom of the last slat                                       // 5951\n                                                                                                                       // 5952\n\t\tthis.slatTops = tops;                                                                                                // 5953\n\t},                                                                                                                    // 5954\n                                                                                                                       // 5955\n                                                                                                                       // 5956\n\t/* Event Drag Visualization                                                                                           // 5957\n\t------------------------------------------------------------------------------------------------------------------*/  // 5958\n                                                                                                                       // 5959\n                                                                                                                       // 5960\n\t// Renders a visual indication of an event being dragged over the specified date(s).                                  // 5961\n\t// dropLocation's end might be null, as well as `seg`. See Grid::renderDrag for more info.                            // 5962\n\t// A returned value of `true` signals that a mock \"helper\" event has been rendered.                                   // 5963\n\trenderDrag: function(dropLocation, seg) {                                                                             // 5964\n                                                                                                                       // 5965\n\t\tif (seg) { // if there is event information for this drag, render a helper event                                     // 5966\n\t\t\tthis.renderRangeHelper(dropLocation, seg);                                                                          // 5967\n\t\t\tthis.applyDragOpacity(this.helperEl);                                                                               // 5968\n                                                                                                                       // 5969\n\t\t\treturn true; // signal that a helper has been rendered                                                              // 5970\n\t\t}                                                                                                                    // 5971\n\t\telse {                                                                                                               // 5972\n\t\t\t// otherwise, just render a highlight                                                                               // 5973\n\t\t\tthis.renderHighlight(                                                                                               // 5974\n\t\t\t\tthis.view.calendar.ensureVisibleEventRange(dropLocation) // needs to be a proper range                             // 5975\n\t\t\t);                                                                                                                  // 5976\n\t\t}                                                                                                                    // 5977\n\t},                                                                                                                    // 5978\n                                                                                                                       // 5979\n                                                                                                                       // 5980\n\t// Unrenders any visual indication of an event being dragged                                                          // 5981\n\tdestroyDrag: function() {                                                                                             // 5982\n\t\tthis.destroyHelper();                                                                                                // 5983\n\t\tthis.destroyHighlight();                                                                                             // 5984\n\t},                                                                                                                    // 5985\n                                                                                                                       // 5986\n                                                                                                                       // 5987\n\t/* Event Resize Visualization                                                                                         // 5988\n\t------------------------------------------------------------------------------------------------------------------*/  // 5989\n                                                                                                                       // 5990\n                                                                                                                       // 5991\n\t// Renders a visual indication of an event being resized                                                              // 5992\n\trenderEventResize: function(range, seg) {                                                                             // 5993\n\t\tthis.renderRangeHelper(range, seg);                                                                                  // 5994\n\t},                                                                                                                    // 5995\n                                                                                                                       // 5996\n                                                                                                                       // 5997\n\t// Unrenders any visual indication of an event being resized                                                          // 5998\n\tdestroyEventResize: function() {                                                                                      // 5999\n\t\tthis.destroyHelper();                                                                                                // 6000\n\t},                                                                                                                    // 6001\n                                                                                                                       // 6002\n                                                                                                                       // 6003\n\t/* Event Helper                                                                                                       // 6004\n\t------------------------------------------------------------------------------------------------------------------*/  // 6005\n                                                                                                                       // 6006\n                                                                                                                       // 6007\n\t// Renders a mock \"helper\" event. `sourceSeg` is the original segment object and might be null (an external drag)     // 6008\n\trenderHelper: function(event, sourceSeg) {                                                                            // 6009\n\t\tvar segs = this.eventsToSegs([ event ]);                                                                             // 6010\n\t\tvar tableEl;                                                                                                         // 6011\n\t\tvar i, seg;                                                                                                          // 6012\n\t\tvar sourceEl;                                                                                                        // 6013\n                                                                                                                       // 6014\n\t\tsegs = this.renderFgSegEls(segs); // assigns each seg's el and returns a subset of segs that were rendered           // 6015\n\t\ttableEl = this.renderSegTable(segs);                                                                                 // 6016\n                                                                                                                       // 6017\n\t\t// Try to make the segment that is in the same row as sourceSeg look the same                                        // 6018\n\t\tfor (i = 0; i < segs.length; i++) {                                                                                  // 6019\n\t\t\tseg = segs[i];                                                                                                      // 6020\n\t\t\tif (sourceSeg && sourceSeg.col === seg.col) {                                                                       // 6021\n\t\t\t\tsourceEl = sourceSeg.el;                                                                                           // 6022\n\t\t\t\tseg.el.css({                                                                                                       // 6023\n\t\t\t\t\tleft: sourceEl.css('left'),                                                                                       // 6024\n\t\t\t\t\tright: sourceEl.css('right'),                                                                                     // 6025\n\t\t\t\t\t'margin-left': sourceEl.css('margin-left'),                                                                       // 6026\n\t\t\t\t\t'margin-right': sourceEl.css('margin-right')                                                                      // 6027\n\t\t\t\t});                                                                                                                // 6028\n\t\t\t}                                                                                                                   // 6029\n\t\t}                                                                                                                    // 6030\n                                                                                                                       // 6031\n\t\tthis.helperEl = $('<div class=\"fc-helper-skeleton\"/>')                                                               // 6032\n\t\t\t.append(tableEl)                                                                                                    // 6033\n\t\t\t\t.appendTo(this.el);                                                                                                // 6034\n\t},                                                                                                                    // 6035\n                                                                                                                       // 6036\n                                                                                                                       // 6037\n\t// Unrenders any mock helper event                                                                                    // 6038\n\tdestroyHelper: function() {                                                                                           // 6039\n\t\tif (this.helperEl) {                                                                                                 // 6040\n\t\t\tthis.helperEl.remove();                                                                                             // 6041\n\t\t\tthis.helperEl = null;                                                                                               // 6042\n\t\t}                                                                                                                    // 6043\n\t},                                                                                                                    // 6044\n                                                                                                                       // 6045\n                                                                                                                       // 6046\n\t/* Selection                                                                                                          // 6047\n\t------------------------------------------------------------------------------------------------------------------*/  // 6048\n                                                                                                                       // 6049\n                                                                                                                       // 6050\n\t// Renders a visual indication of a selection. Overrides the default, which was to simply render a highlight.         // 6051\n\trenderSelection: function(range) {                                                                                    // 6052\n\t\tif (this.view.opt('selectHelper')) { // this setting signals that a mock helper event should be rendered             // 6053\n\t\t\tthis.renderRangeHelper(range);                                                                                      // 6054\n\t\t}                                                                                                                    // 6055\n\t\telse {                                                                                                               // 6056\n\t\t\tthis.renderHighlight(range);                                                                                        // 6057\n\t\t}                                                                                                                    // 6058\n\t},                                                                                                                    // 6059\n                                                                                                                       // 6060\n                                                                                                                       // 6061\n\t// Unrenders any visual indication of a selection                                                                     // 6062\n\tdestroySelection: function() {                                                                                        // 6063\n\t\tthis.destroyHelper();                                                                                                // 6064\n\t\tthis.destroyHighlight();                                                                                             // 6065\n\t},                                                                                                                    // 6066\n                                                                                                                       // 6067\n                                                                                                                       // 6068\n\t/* Fill System (highlight, background events, business hours)                                                         // 6069\n\t------------------------------------------------------------------------------------------------------------------*/  // 6070\n                                                                                                                       // 6071\n                                                                                                                       // 6072\n\t// Renders a set of rectangles over the given time segments.                                                          // 6073\n\t// Only returns segments that successfully rendered.                                                                  // 6074\n\trenderFill: function(type, segs, className) {                                                                         // 6075\n\t\tvar segCols;                                                                                                         // 6076\n\t\tvar skeletonEl;                                                                                                      // 6077\n\t\tvar trEl;                                                                                                            // 6078\n\t\tvar col, colSegs;                                                                                                    // 6079\n\t\tvar tdEl;                                                                                                            // 6080\n\t\tvar containerEl;                                                                                                     // 6081\n\t\tvar dayDate;                                                                                                         // 6082\n\t\tvar i, seg;                                                                                                          // 6083\n                                                                                                                       // 6084\n\t\tif (segs.length) {                                                                                                   // 6085\n                                                                                                                       // 6086\n\t\t\tsegs = this.renderFillSegEls(type, segs); // assignes `.el` to each seg. returns successfully rendered segs         // 6087\n\t\t\tsegCols = this.groupSegCols(segs); // group into sub-arrays, and assigns 'col' to each seg                          // 6088\n                                                                                                                       // 6089\n\t\t\tclassName = className || type.toLowerCase();                                                                        // 6090\n\t\t\tskeletonEl = $(                                                                                                     // 6091\n\t\t\t\t'<div class=\"fc-' + className + '-skeleton\">' +                                                                    // 6092\n\t\t\t\t\t'<table><tr/></table>' +                                                                                          // 6093\n\t\t\t\t'</div>'                                                                                                           // 6094\n\t\t\t);                                                                                                                  // 6095\n\t\t\ttrEl = skeletonEl.find('tr');                                                                                       // 6096\n                                                                                                                       // 6097\n\t\t\tfor (col = 0; col < segCols.length; col++) {                                                                        // 6098\n\t\t\t\tcolSegs = segCols[col];                                                                                            // 6099\n\t\t\t\ttdEl = $('<td/>').appendTo(trEl);                                                                                  // 6100\n                                                                                                                       // 6101\n\t\t\t\tif (colSegs.length) {                                                                                              // 6102\n\t\t\t\t\tcontainerEl = $('<div class=\"fc-' + className + '-container\"/>').appendTo(tdEl);                                  // 6103\n\t\t\t\t\tdayDate = this.colData[col].day;                                                                                  // 6104\n                                                                                                                       // 6105\n\t\t\t\t\tfor (i = 0; i < colSegs.length; i++) {                                                                            // 6106\n\t\t\t\t\t\tseg = colSegs[i];                                                                                                // 6107\n\t\t\t\t\t\tcontainerEl.append(                                                                                              // 6108\n\t\t\t\t\t\t\tseg.el.css({                                                                                                    // 6109\n\t\t\t\t\t\t\t\ttop: this.computeDateTop(seg.start, dayDate),                                                                  // 6110\n\t\t\t\t\t\t\t\tbottom: -this.computeDateTop(seg.end, dayDate) // the y position of the bottom edge                            // 6111\n\t\t\t\t\t\t\t})                                                                                                              // 6112\n\t\t\t\t\t\t);                                                                                                               // 6113\n\t\t\t\t\t}                                                                                                                 // 6114\n\t\t\t\t}                                                                                                                  // 6115\n\t\t\t}                                                                                                                   // 6116\n                                                                                                                       // 6117\n\t\t\tthis.bookendCells(trEl, type);                                                                                      // 6118\n                                                                                                                       // 6119\n\t\t\tthis.el.append(skeletonEl);                                                                                         // 6120\n\t\t\tthis.elsByFill[type] = skeletonEl;                                                                                  // 6121\n\t\t}                                                                                                                    // 6122\n                                                                                                                       // 6123\n\t\treturn segs;                                                                                                         // 6124\n\t}                                                                                                                     // 6125\n                                                                                                                       // 6126\n});                                                                                                                    // 6127\n                                                                                                                       // 6128\n;;                                                                                                                     // 6129\n                                                                                                                       // 6130\n/* Event-rendering methods for the TimeGrid class                                                                      // 6131\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 6133\nTimeGrid.mixin({                                                                                                       // 6134\n                                                                                                                       // 6135\n\teventSkeletonEl: null, // has cells with event-containers, which contain absolutely positioned event elements         // 6136\n                                                                                                                       // 6137\n                                                                                                                       // 6138\n\t// Renders the given foreground event segments onto the grid                                                          // 6139\n\trenderFgSegs: function(segs) {                                                                                        // 6140\n\t\tsegs = this.renderFgSegEls(segs); // returns a subset of the segs. segs that were actually rendered                  // 6141\n                                                                                                                       // 6142\n\t\tthis.el.append(                                                                                                      // 6143\n\t\t\tthis.eventSkeletonEl = $('<div class=\"fc-content-skeleton\"/>')                                                      // 6144\n\t\t\t\t.append(this.renderSegTable(segs))                                                                                 // 6145\n\t\t);                                                                                                                   // 6146\n                                                                                                                       // 6147\n\t\treturn segs; // return only the segs that were actually rendered                                                     // 6148\n\t},                                                                                                                    // 6149\n                                                                                                                       // 6150\n                                                                                                                       // 6151\n\t// Unrenders all currently rendered foreground event segments                                                         // 6152\n\tdestroyFgSegs: function(segs) {                                                                                       // 6153\n\t\tif (this.eventSkeletonEl) {                                                                                          // 6154\n\t\t\tthis.eventSkeletonEl.remove();                                                                                      // 6155\n\t\t\tthis.eventSkeletonEl = null;                                                                                        // 6156\n\t\t}                                                                                                                    // 6157\n\t},                                                                                                                    // 6158\n                                                                                                                       // 6159\n                                                                                                                       // 6160\n\t// Renders and returns the <table> portion of the event-skeleton.                                                     // 6161\n\t// Returns an object with properties 'tbodyEl' and 'segs'.                                                            // 6162\n\trenderSegTable: function(segs) {                                                                                      // 6163\n\t\tvar tableEl = $('<table><tr/></table>');                                                                             // 6164\n\t\tvar trEl = tableEl.find('tr');                                                                                       // 6165\n\t\tvar segCols;                                                                                                         // 6166\n\t\tvar i, seg;                                                                                                          // 6167\n\t\tvar col, colSegs;                                                                                                    // 6168\n\t\tvar containerEl;                                                                                                     // 6169\n                                                                                                                       // 6170\n\t\tsegCols = this.groupSegCols(segs); // group into sub-arrays, and assigns 'col' to each seg                           // 6171\n                                                                                                                       // 6172\n\t\tthis.computeSegVerticals(segs); // compute and assign top/bottom                                                     // 6173\n                                                                                                                       // 6174\n\t\tfor (col = 0; col < segCols.length; col++) { // iterate each column grouping                                         // 6175\n\t\t\tcolSegs = segCols[col];                                                                                             // 6176\n\t\t\tplaceSlotSegs(colSegs); // compute horizontal coordinates, z-index's, and reorder the array                         // 6177\n                                                                                                                       // 6178\n\t\t\tcontainerEl = $('<div class=\"fc-event-container\"/>');                                                               // 6179\n                                                                                                                       // 6180\n\t\t\t// assign positioning CSS and insert into container                                                                 // 6181\n\t\t\tfor (i = 0; i < colSegs.length; i++) {                                                                              // 6182\n\t\t\t\tseg = colSegs[i];                                                                                                  // 6183\n\t\t\t\tseg.el.css(this.generateSegPositionCss(seg));                                                                      // 6184\n                                                                                                                       // 6185\n\t\t\t\t// if the height is short, add a className for alternate styling                                                   // 6186\n\t\t\t\tif (seg.bottom - seg.top < 30) {                                                                                   // 6187\n\t\t\t\t\tseg.el.addClass('fc-short');                                                                                      // 6188\n\t\t\t\t}                                                                                                                  // 6189\n                                                                                                                       // 6190\n\t\t\t\tcontainerEl.append(seg.el);                                                                                        // 6191\n\t\t\t}                                                                                                                   // 6192\n                                                                                                                       // 6193\n\t\t\ttrEl.append($('<td/>').append(containerEl));                                                                        // 6194\n\t\t}                                                                                                                    // 6195\n                                                                                                                       // 6196\n\t\tthis.bookendCells(trEl, 'eventSkeleton');                                                                            // 6197\n                                                                                                                       // 6198\n\t\treturn tableEl;                                                                                                      // 6199\n\t},                                                                                                                    // 6200\n                                                                                                                       // 6201\n                                                                                                                       // 6202\n\t// Refreshes the CSS top/bottom coordinates for each segment element. Probably after a window resize/zoom.            // 6203\n\t// Repositions business hours segs too, so not just for events. Maybe shouldn't be here.                              // 6204\n\tupdateSegVerticals: function() {                                                                                      // 6205\n\t\tvar allSegs = (this.segs || []).concat(this.businessHourSegs || []);                                                 // 6206\n\t\tvar i;                                                                                                               // 6207\n                                                                                                                       // 6208\n\t\tthis.computeSegVerticals(allSegs);                                                                                   // 6209\n                                                                                                                       // 6210\n\t\tfor (i = 0; i < allSegs.length; i++) {                                                                               // 6211\n\t\t\tallSegs[i].el.css(                                                                                                  // 6212\n\t\t\t\tthis.generateSegVerticalCss(allSegs[i])                                                                            // 6213\n\t\t\t);                                                                                                                  // 6214\n\t\t}                                                                                                                    // 6215\n\t},                                                                                                                    // 6216\n                                                                                                                       // 6217\n                                                                                                                       // 6218\n\t// For each segment in an array, computes and assigns its top and bottom properties                                   // 6219\n\tcomputeSegVerticals: function(segs) {                                                                                 // 6220\n\t\tvar i, seg;                                                                                                          // 6221\n                                                                                                                       // 6222\n\t\tfor (i = 0; i < segs.length; i++) {                                                                                  // 6223\n\t\t\tseg = segs[i];                                                                                                      // 6224\n\t\t\tseg.top = this.computeDateTop(seg.start, seg.start);                                                                // 6225\n\t\t\tseg.bottom = this.computeDateTop(seg.end, seg.start);                                                               // 6226\n\t\t}                                                                                                                    // 6227\n\t},                                                                                                                    // 6228\n                                                                                                                       // 6229\n                                                                                                                       // 6230\n\t// Renders the HTML for a single event segment's default rendering                                                    // 6231\n\tfgSegHtml: function(seg, disableResizing) {                                                                           // 6232\n\t\tvar view = this.view;                                                                                                // 6233\n\t\tvar event = seg.event;                                                                                               // 6234\n\t\tvar isDraggable = view.isEventDraggable(event);                                                                      // 6235\n\t\tvar isResizableFromStart = !disableResizing && seg.isStart && view.isEventResizableFromStart(event);                 // 6236\n\t\tvar isResizableFromEnd = !disableResizing && seg.isEnd && view.isEventResizableFromEnd(event);                       // 6237\n\t\tvar classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd);                      // 6238\n\t\tvar skinCss = cssToStr(this.getEventSkinCss(event));                                                                 // 6239\n\t\tvar timeText;                                                                                                        // 6240\n\t\tvar fullTimeText; // more verbose time text. for the print stylesheet                                                // 6241\n\t\tvar startTimeText; // just the start time text                                                                       // 6242\n                                                                                                                       // 6243\n\t\tclasses.unshift('fc-time-grid-event', 'fc-v-event');                                                                 // 6244\n                                                                                                                       // 6245\n\t\tif (view.isMultiDayEvent(event)) { // if the event appears to span more than one day...                              // 6246\n\t\t\t// Don't display time text on segments that run entirely through a day.                                             // 6247\n\t\t\t// That would appear as midnight-midnight and would look dumb.                                                      // 6248\n\t\t\t// Otherwise, display the time text for the *segment's* times (like 6pm-midnight or midnight-10am)                  // 6249\n\t\t\tif (seg.isStart || seg.isEnd) {                                                                                     // 6250\n\t\t\t\ttimeText = this.getEventTimeText(seg);                                                                             // 6251\n\t\t\t\tfullTimeText = this.getEventTimeText(seg, 'LT');                                                                   // 6252\n\t\t\t\tstartTimeText = this.getEventTimeText(seg, null, false); // displayEnd=false                                       // 6253\n\t\t\t}                                                                                                                   // 6254\n\t\t} else {                                                                                                             // 6255\n\t\t\t// Display the normal time text for the *event's* times                                                             // 6256\n\t\t\ttimeText = this.getEventTimeText(event);                                                                            // 6257\n\t\t\tfullTimeText = this.getEventTimeText(event, 'LT');                                                                  // 6258\n\t\t\tstartTimeText = this.getEventTimeText(event, null, false); // displayEnd=false                                      // 6259\n\t\t}                                                                                                                    // 6260\n                                                                                                                       // 6261\n\t\treturn '<a class=\"' + classes.join(' ') + '\"' +                                                                      // 6262\n\t\t\t(event.url ?                                                                                                        // 6263\n\t\t\t\t' href=\"' + htmlEscape(event.url) + '\"' :                                                                          // 6264\n\t\t\t\t''                                                                                                                 // 6265\n\t\t\t\t) +                                                                                                                // 6266\n\t\t\t(skinCss ?                                                                                                          // 6267\n\t\t\t\t' style=\"' + skinCss + '\"' :                                                                                       // 6268\n\t\t\t\t''                                                                                                                 // 6269\n\t\t\t\t) +                                                                                                                // 6270\n\t\t\t'>' +                                                                                                               // 6271\n\t\t\t\t'<div class=\"fc-content\">' +                                                                                       // 6272\n\t\t\t\t\t(timeText ?                                                                                                       // 6273\n\t\t\t\t\t\t'<div class=\"fc-time\"' +                                                                                         // 6274\n\t\t\t\t\t\t' data-start=\"' + htmlEscape(startTimeText) + '\"' +                                                              // 6275\n\t\t\t\t\t\t' data-full=\"' + htmlEscape(fullTimeText) + '\"' +                                                                // 6276\n\t\t\t\t\t\t'>' +                                                                                                            // 6277\n\t\t\t\t\t\t\t'<span>' + htmlEscape(timeText) + '</span>' +                                                                   // 6278\n\t\t\t\t\t\t'</div>' :                                                                                                       // 6279\n\t\t\t\t\t\t''                                                                                                               // 6280\n\t\t\t\t\t\t) +                                                                                                              // 6281\n\t\t\t\t\t(event.title ?                                                                                                    // 6282\n\t\t\t\t\t\t'<div class=\"fc-title\">' +                                                                                       // 6283\n\t\t\t\t\t\t\thtmlEscape(event.title) +                                                                                       // 6284\n\t\t\t\t\t\t'</div>' :                                                                                                       // 6285\n\t\t\t\t\t\t''                                                                                                               // 6286\n\t\t\t\t\t\t) +                                                                                                              // 6287\n\t\t\t\t'</div>' +                                                                                                         // 6288\n\t\t\t\t'<div class=\"fc-bg\"/>' +                                                                                           // 6289\n\t\t\t\t/* TODO: write CSS for this                                                                                        // 6290\n\t\t\t\t(isResizableFromStart ?                                                                                            // 6291\n\t\t\t\t\t'<div class=\"fc-resizer fc-start-resizer\" />' :                                                                   // 6292\n\t\t\t\t\t''                                                                                                                // 6293\n\t\t\t\t\t) +                                                                                                               // 6294\n\t\t\t\t*/                                                                                                                 // 6295\n\t\t\t\t(isResizableFromEnd ?                                                                                              // 6296\n\t\t\t\t\t'<div class=\"fc-resizer fc-end-resizer\" />' :                                                                     // 6297\n\t\t\t\t\t''                                                                                                                // 6298\n\t\t\t\t\t) +                                                                                                               // 6299\n\t\t\t'</a>';                                                                                                             // 6300\n\t},                                                                                                                    // 6301\n                                                                                                                       // 6302\n                                                                                                                       // 6303\n\t// Generates an object with CSS properties/values that should be applied to an event segment element.                 // 6304\n\t// Contains important positioning-related properties that should be applied to any event element, customized or not.  // 6305\n\tgenerateSegPositionCss: function(seg) {                                                                               // 6306\n\t\tvar shouldOverlap = this.view.opt('slotEventOverlap');                                                               // 6307\n\t\tvar backwardCoord = seg.backwardCoord; // the left side if LTR. the right side if RTL. floating-point                // 6308\n\t\tvar forwardCoord = seg.forwardCoord; // the right side if LTR. the left side if RTL. floating-point                  // 6309\n\t\tvar props = this.generateSegVerticalCss(seg); // get top/bottom first                                                // 6310\n\t\tvar left; // amount of space from left edge, a fraction of the total width                                           // 6311\n\t\tvar right; // amount of space from right edge, a fraction of the total width                                         // 6312\n                                                                                                                       // 6313\n\t\tif (shouldOverlap) {                                                                                                 // 6314\n\t\t\t// double the width, but don't go beyond the maximum forward coordinate (1.0)                                       // 6315\n\t\t\tforwardCoord = Math.min(1, backwardCoord + (forwardCoord - backwardCoord) * 2);                                     // 6316\n\t\t}                                                                                                                    // 6317\n                                                                                                                       // 6318\n\t\tif (this.isRTL) {                                                                                                    // 6319\n\t\t\tleft = 1 - forwardCoord;                                                                                            // 6320\n\t\t\tright = backwardCoord;                                                                                              // 6321\n\t\t}                                                                                                                    // 6322\n\t\telse {                                                                                                               // 6323\n\t\t\tleft = backwardCoord;                                                                                               // 6324\n\t\t\tright = 1 - forwardCoord;                                                                                           // 6325\n\t\t}                                                                                                                    // 6326\n                                                                                                                       // 6327\n\t\tprops.zIndex = seg.level + 1; // convert from 0-base to 1-based                                                      // 6328\n\t\tprops.left = left * 100 + '%';                                                                                       // 6329\n\t\tprops.right = right * 100 + '%';                                                                                     // 6330\n                                                                                                                       // 6331\n\t\tif (shouldOverlap && seg.forwardPressure) {                                                                          // 6332\n\t\t\t// add padding to the edge so that forward stacked events don't cover the resizer's icon                            // 6333\n\t\t\tprops[this.isRTL ? 'marginLeft' : 'marginRight'] = 10 * 2; // 10 is a guesstimate of the icon's width               // 6334\n\t\t}                                                                                                                    // 6335\n                                                                                                                       // 6336\n\t\treturn props;                                                                                                        // 6337\n\t},                                                                                                                    // 6338\n                                                                                                                       // 6339\n                                                                                                                       // 6340\n\t// Generates an object with CSS properties for the top/bottom coordinates of a segment element                        // 6341\n\tgenerateSegVerticalCss: function(seg) {                                                                               // 6342\n\t\treturn {                                                                                                             // 6343\n\t\t\ttop: seg.top,                                                                                                       // 6344\n\t\t\tbottom: -seg.bottom // flipped because needs to be space beyond bottom edge of event container                      // 6345\n\t\t};                                                                                                                   // 6346\n\t},                                                                                                                    // 6347\n                                                                                                                       // 6348\n                                                                                                                       // 6349\n\t// Given a flat array of segments, return an array of sub-arrays, grouped by each segment's col                       // 6350\n\tgroupSegCols: function(segs) {                                                                                        // 6351\n\t\tvar segCols = [];                                                                                                    // 6352\n\t\tvar i;                                                                                                               // 6353\n                                                                                                                       // 6354\n\t\tfor (i = 0; i < this.colCnt; i++) {                                                                                  // 6355\n\t\t\tsegCols.push([]);                                                                                                   // 6356\n\t\t}                                                                                                                    // 6357\n                                                                                                                       // 6358\n\t\tfor (i = 0; i < segs.length; i++) {                                                                                  // 6359\n\t\t\tsegCols[segs[i].col].push(segs[i]);                                                                                 // 6360\n\t\t}                                                                                                                    // 6361\n                                                                                                                       // 6362\n\t\treturn segCols;                                                                                                      // 6363\n\t}                                                                                                                     // 6364\n                                                                                                                       // 6365\n});                                                                                                                    // 6366\n                                                                                                                       // 6367\n                                                                                                                       // 6368\n// Given an array of segments that are all in the same column, sets the backwardCoord and forwardCoord on each.        // 6369\n// NOTE: Also reorders the given array by date!                                                                        // 6370\nfunction placeSlotSegs(segs) {                                                                                         // 6371\n\tvar levels;                                                                                                           // 6372\n\tvar level0;                                                                                                           // 6373\n\tvar i;                                                                                                                // 6374\n                                                                                                                       // 6375\n\tsegs.sort(compareSegs); // order by date                                                                              // 6376\n\tlevels = buildSlotSegLevels(segs);                                                                                    // 6377\n\tcomputeForwardSlotSegs(levels);                                                                                       // 6378\n                                                                                                                       // 6379\n\tif ((level0 = levels[0])) {                                                                                           // 6380\n                                                                                                                       // 6381\n\t\tfor (i = 0; i < level0.length; i++) {                                                                                // 6382\n\t\t\tcomputeSlotSegPressures(level0[i]);                                                                                 // 6383\n\t\t}                                                                                                                    // 6384\n                                                                                                                       // 6385\n\t\tfor (i = 0; i < level0.length; i++) {                                                                                // 6386\n\t\t\tcomputeSlotSegCoords(level0[i], 0, 0);                                                                              // 6387\n\t\t}                                                                                                                    // 6388\n\t}                                                                                                                     // 6389\n}                                                                                                                      // 6390\n                                                                                                                       // 6391\n                                                                                                                       // 6392\n// Builds an array of segments \"levels\". The first level will be the leftmost tier of segments if the calendar is      // 6393\n// left-to-right, or the rightmost if the calendar is right-to-left. Assumes the segments are already ordered by date. // 6394\nfunction buildSlotSegLevels(segs) {                                                                                    // 6395\n\tvar levels = [];                                                                                                      // 6396\n\tvar i, seg;                                                                                                           // 6397\n\tvar j;                                                                                                                // 6398\n                                                                                                                       // 6399\n\tfor (i=0; i<segs.length; i++) {                                                                                       // 6400\n\t\tseg = segs[i];                                                                                                       // 6401\n                                                                                                                       // 6402\n\t\t// go through all the levels and stop on the first level where there are no collisions                               // 6403\n\t\tfor (j=0; j<levels.length; j++) {                                                                                    // 6404\n\t\t\tif (!computeSlotSegCollisions(seg, levels[j]).length) {                                                             // 6405\n\t\t\t\tbreak;                                                                                                             // 6406\n\t\t\t}                                                                                                                   // 6407\n\t\t}                                                                                                                    // 6408\n                                                                                                                       // 6409\n\t\tseg.level = j;                                                                                                       // 6410\n                                                                                                                       // 6411\n\t\t(levels[j] || (levels[j] = [])).push(seg);                                                                           // 6412\n\t}                                                                                                                     // 6413\n                                                                                                                       // 6414\n\treturn levels;                                                                                                        // 6415\n}                                                                                                                      // 6416\n                                                                                                                       // 6417\n                                                                                                                       // 6418\n// For every segment, figure out the other segments that are in subsequent                                             // 6419\n// levels that also occupy the same vertical space. Accumulate in seg.forwardSegs                                      // 6420\nfunction computeForwardSlotSegs(levels) {                                                                              // 6421\n\tvar i, level;                                                                                                         // 6422\n\tvar j, seg;                                                                                                           // 6423\n\tvar k;                                                                                                                // 6424\n                                                                                                                       // 6425\n\tfor (i=0; i<levels.length; i++) {                                                                                     // 6426\n\t\tlevel = levels[i];                                                                                                   // 6427\n                                                                                                                       // 6428\n\t\tfor (j=0; j<level.length; j++) {                                                                                     // 6429\n\t\t\tseg = level[j];                                                                                                     // 6430\n                                                                                                                       // 6431\n\t\t\tseg.forwardSegs = [];                                                                                               // 6432\n\t\t\tfor (k=i+1; k<levels.length; k++) {                                                                                 // 6433\n\t\t\t\tcomputeSlotSegCollisions(seg, levels[k], seg.forwardSegs);                                                         // 6434\n\t\t\t}                                                                                                                   // 6435\n\t\t}                                                                                                                    // 6436\n\t}                                                                                                                     // 6437\n}                                                                                                                      // 6438\n                                                                                                                       // 6439\n                                                                                                                       // 6440\n// Figure out which path forward (via seg.forwardSegs) results in the longest path until                               // 6441\n// the furthest edge is reached. The number of segments in this path will be seg.forwardPressure                       // 6442\nfunction computeSlotSegPressures(seg) {                                                                                // 6443\n\tvar forwardSegs = seg.forwardSegs;                                                                                    // 6444\n\tvar forwardPressure = 0;                                                                                              // 6445\n\tvar i, forwardSeg;                                                                                                    // 6446\n                                                                                                                       // 6447\n\tif (seg.forwardPressure === undefined) { // not already computed                                                      // 6448\n                                                                                                                       // 6449\n\t\tfor (i=0; i<forwardSegs.length; i++) {                                                                               // 6450\n\t\t\tforwardSeg = forwardSegs[i];                                                                                        // 6451\n                                                                                                                       // 6452\n\t\t\t// figure out the child's maximum forward path                                                                      // 6453\n\t\t\tcomputeSlotSegPressures(forwardSeg);                                                                                // 6454\n                                                                                                                       // 6455\n\t\t\t// either use the existing maximum, or use the child's forward pressure                                             // 6456\n\t\t\t// plus one (for the forwardSeg itself)                                                                             // 6457\n\t\t\tforwardPressure = Math.max(                                                                                         // 6458\n\t\t\t\tforwardPressure,                                                                                                   // 6459\n\t\t\t\t1 + forwardSeg.forwardPressure                                                                                     // 6460\n\t\t\t);                                                                                                                  // 6461\n\t\t}                                                                                                                    // 6462\n                                                                                                                       // 6463\n\t\tseg.forwardPressure = forwardPressure;                                                                               // 6464\n\t}                                                                                                                     // 6465\n}                                                                                                                      // 6466\n                                                                                                                       // 6467\n                                                                                                                       // 6468\n// Calculate seg.forwardCoord and seg.backwardCoord for the segment, where both values range                           // 6469\n// from 0 to 1. If the calendar is left-to-right, the seg.backwardCoord maps to \"left\" and                             // 6470\n// seg.forwardCoord maps to \"right\" (via percentage). Vice-versa if the calendar is right-to-left.                     // 6471\n//                                                                                                                     // 6472\n// The segment might be part of a \"series\", which means consecutive segments with the same pressure                    // 6473\n// who's width is unknown until an edge has been hit. `seriesBackwardPressure` is the number of                        // 6474\n// segments behind this one in the current series, and `seriesBackwardCoord` is the starting                           // 6475\n// coordinate of the first segment in the series.                                                                      // 6476\nfunction computeSlotSegCoords(seg, seriesBackwardPressure, seriesBackwardCoord) {                                      // 6477\n\tvar forwardSegs = seg.forwardSegs;                                                                                    // 6478\n\tvar i;                                                                                                                // 6479\n                                                                                                                       // 6480\n\tif (seg.forwardCoord === undefined) { // not already computed                                                         // 6481\n                                                                                                                       // 6482\n\t\tif (!forwardSegs.length) {                                                                                           // 6483\n                                                                                                                       // 6484\n\t\t\t// if there are no forward segments, this segment should butt up against the edge                                   // 6485\n\t\t\tseg.forwardCoord = 1;                                                                                               // 6486\n\t\t}                                                                                                                    // 6487\n\t\telse {                                                                                                               // 6488\n                                                                                                                       // 6489\n\t\t\t// sort highest pressure first                                                                                      // 6490\n\t\t\tforwardSegs.sort(compareForwardSlotSegs);                                                                           // 6491\n                                                                                                                       // 6492\n\t\t\t// this segment's forwardCoord will be calculated from the backwardCoord of the                                     // 6493\n\t\t\t// highest-pressure forward segment.                                                                                // 6494\n\t\t\tcomputeSlotSegCoords(forwardSegs[0], seriesBackwardPressure + 1, seriesBackwardCoord);                              // 6495\n\t\t\tseg.forwardCoord = forwardSegs[0].backwardCoord;                                                                    // 6496\n\t\t}                                                                                                                    // 6497\n                                                                                                                       // 6498\n\t\t// calculate the backwardCoord from the forwardCoord. consider the series                                            // 6499\n\t\tseg.backwardCoord = seg.forwardCoord -                                                                               // 6500\n\t\t\t(seg.forwardCoord - seriesBackwardCoord) / // available width for series                                            // 6501\n\t\t\t(seriesBackwardPressure + 1); // # of segments in the series                                                        // 6502\n                                                                                                                       // 6503\n\t\t// use this segment's coordinates to computed the coordinates of the less-pressurized                                // 6504\n\t\t// forward segments                                                                                                  // 6505\n\t\tfor (i=0; i<forwardSegs.length; i++) {                                                                               // 6506\n\t\t\tcomputeSlotSegCoords(forwardSegs[i], 0, seg.forwardCoord);                                                          // 6507\n\t\t}                                                                                                                    // 6508\n\t}                                                                                                                     // 6509\n}                                                                                                                      // 6510\n                                                                                                                       // 6511\n                                                                                                                       // 6512\n// Find all the segments in `otherSegs` that vertically collide with `seg`.                                            // 6513\n// Append into an optionally-supplied `results` array and return.                                                      // 6514\nfunction computeSlotSegCollisions(seg, otherSegs, results) {                                                           // 6515\n\tresults = results || [];                                                                                              // 6516\n                                                                                                                       // 6517\n\tfor (var i=0; i<otherSegs.length; i++) {                                                                              // 6518\n\t\tif (isSlotSegCollision(seg, otherSegs[i])) {                                                                         // 6519\n\t\t\tresults.push(otherSegs[i]);                                                                                         // 6520\n\t\t}                                                                                                                    // 6521\n\t}                                                                                                                     // 6522\n                                                                                                                       // 6523\n\treturn results;                                                                                                       // 6524\n}                                                                                                                      // 6525\n                                                                                                                       // 6526\n                                                                                                                       // 6527\n// Do these segments occupy the same vertical space?                                                                   // 6528\nfunction isSlotSegCollision(seg1, seg2) {                                                                              // 6529\n\treturn seg1.bottom > seg2.top && seg1.top < seg2.bottom;                                                              // 6530\n}                                                                                                                      // 6531\n                                                                                                                       // 6532\n                                                                                                                       // 6533\n// A cmp function for determining which forward segment to rely on more when computing coordinates.                    // 6534\nfunction compareForwardSlotSegs(seg1, seg2) {                                                                          // 6535\n\t// put higher-pressure first                                                                                          // 6536\n\treturn seg2.forwardPressure - seg1.forwardPressure ||                                                                 // 6537\n\t\t// put segments that are closer to initial edge first (and favor ones with no coords yet)                            // 6538\n\t\t(seg1.backwardCoord || 0) - (seg2.backwardCoord || 0) ||                                                             // 6539\n\t\t// do normal sorting...                                                                                              // 6540\n\t\tcompareSegs(seg1, seg2);                                                                                             // 6541\n}                                                                                                                      // 6542\n                                                                                                                       // 6543\n;;                                                                                                                     // 6544\n                                                                                                                       // 6545\n/* An abstract class from which other views inherit from                                                               // 6546\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 6548\nvar View = fc.View = Class.extend({                                                                                    // 6549\n                                                                                                                       // 6550\n\ttype: null, // subclass' view name (string)                                                                           // 6551\n\tname: null, // deprecated. use `type` instead                                                                         // 6552\n\ttitle: null, // the text that will be displayed in the header's title                                                 // 6553\n                                                                                                                       // 6554\n\tcalendar: null, // owner Calendar object                                                                              // 6555\n\toptions: null, // hash containing all options. already merged with view-specific-options                              // 6556\n\tcoordMap: null, // a CoordMap object for converting pixel regions to dates                                            // 6557\n\tel: null, // the view's containing element. set by Calendar                                                           // 6558\n                                                                                                                       // 6559\n\tisDisplayed: false,                                                                                                   // 6560\n\tisSkeletonRendered: false,                                                                                            // 6561\n\tisEventsRendered: false,                                                                                              // 6562\n                                                                                                                       // 6563\n\t// range the view is actually displaying (moments)                                                                    // 6564\n\tstart: null,                                                                                                          // 6565\n\tend: null, // exclusive                                                                                               // 6566\n                                                                                                                       // 6567\n\t// range the view is formally responsible for (moments)                                                               // 6568\n\t// may be different from start/end. for example, a month view might have 1st-31st, excluding padded dates             // 6569\n\tintervalStart: null,                                                                                                  // 6570\n\tintervalEnd: null, // exclusive                                                                                       // 6571\n\tintervalDuration: null,                                                                                               // 6572\n\tintervalUnit: null, // name of largest unit being displayed, like \"month\" or \"week\"                                   // 6573\n                                                                                                                       // 6574\n\tisSelected: false, // boolean whether a range of time is user-selected or not                                         // 6575\n                                                                                                                       // 6576\n\t// subclasses can optionally use a scroll container                                                                   // 6577\n\tscrollerEl: null, // the element that will most likely scroll when content is too tall                                // 6578\n\tscrollTop: null, // cached vertical scroll value                                                                      // 6579\n                                                                                                                       // 6580\n\t// classNames styled by jqui themes                                                                                   // 6581\n\twidgetHeaderClass: null,                                                                                              // 6582\n\twidgetContentClass: null,                                                                                             // 6583\n\thighlightStateClass: null,                                                                                            // 6584\n                                                                                                                       // 6585\n\t// for date utils, computed from options                                                                              // 6586\n\tnextDayThreshold: null,                                                                                               // 6587\n\tisHiddenDayHash: null,                                                                                                // 6588\n                                                                                                                       // 6589\n\t// document handlers, bound to `this` object                                                                          // 6590\n\tdocumentMousedownProxy: null, // TODO: doesn't work with touch                                                        // 6591\n                                                                                                                       // 6592\n                                                                                                                       // 6593\n\tconstructor: function(calendar, type, options, intervalDuration) {                                                    // 6594\n                                                                                                                       // 6595\n\t\tthis.calendar = calendar;                                                                                            // 6596\n\t\tthis.type = this.name = type; // .name is deprecated                                                                 // 6597\n\t\tthis.options = options;                                                                                              // 6598\n\t\tthis.intervalDuration = intervalDuration || moment.duration(1, 'day');                                               // 6599\n                                                                                                                       // 6600\n\t\tthis.nextDayThreshold = moment.duration(this.opt('nextDayThreshold'));                                               // 6601\n\t\tthis.initThemingProps();                                                                                             // 6602\n\t\tthis.initHiddenDays();                                                                                               // 6603\n                                                                                                                       // 6604\n\t\tthis.documentMousedownProxy = proxy(this, 'documentMousedown');                                                      // 6605\n                                                                                                                       // 6606\n\t\tthis.initialize();                                                                                                   // 6607\n\t},                                                                                                                    // 6608\n                                                                                                                       // 6609\n                                                                                                                       // 6610\n\t// A good place for subclasses to initialize member variables                                                         // 6611\n\tinitialize: function() {                                                                                              // 6612\n\t\t// subclasses can implement                                                                                          // 6613\n\t},                                                                                                                    // 6614\n                                                                                                                       // 6615\n                                                                                                                       // 6616\n\t// Retrieves an option with the given name                                                                            // 6617\n\topt: function(name) {                                                                                                 // 6618\n\t\treturn this.options[name];                                                                                           // 6619\n\t},                                                                                                                    // 6620\n                                                                                                                       // 6621\n                                                                                                                       // 6622\n\t// Triggers handlers that are view-related. Modifies args before passing to calendar.                                 // 6623\n\ttrigger: function(name, thisObj) { // arguments beyond thisObj are passed along                                       // 6624\n\t\tvar calendar = this.calendar;                                                                                        // 6625\n                                                                                                                       // 6626\n\t\treturn calendar.trigger.apply(                                                                                       // 6627\n\t\t\tcalendar,                                                                                                           // 6628\n\t\t\t[name, thisObj || this].concat(                                                                                     // 6629\n\t\t\t\tArray.prototype.slice.call(arguments, 2), // arguments beyond thisObj                                              // 6630\n\t\t\t\t[ this ] // always make the last argument a reference to the view. TODO: deprecate                                 // 6631\n\t\t\t)                                                                                                                   // 6632\n\t\t);                                                                                                                   // 6633\n\t},                                                                                                                    // 6634\n                                                                                                                       // 6635\n                                                                                                                       // 6636\n\t/* Dates                                                                                                              // 6637\n\t------------------------------------------------------------------------------------------------------------------*/  // 6638\n                                                                                                                       // 6639\n                                                                                                                       // 6640\n\t// Updates all internal dates to center around the given current date                                                 // 6641\n\tsetDate: function(date) {                                                                                             // 6642\n\t\tthis.setRange(this.computeRange(date));                                                                              // 6643\n\t},                                                                                                                    // 6644\n                                                                                                                       // 6645\n                                                                                                                       // 6646\n\t// Updates all internal dates for displaying the given range.                                                         // 6647\n\t// Expects all values to be normalized (like what computeRange does).                                                 // 6648\n\tsetRange: function(range) {                                                                                           // 6649\n\t\t$.extend(this, range);                                                                                               // 6650\n\t\tthis.updateTitle();                                                                                                  // 6651\n\t},                                                                                                                    // 6652\n                                                                                                                       // 6653\n                                                                                                                       // 6654\n\t// Given a single current date, produce information about what range to display.                                      // 6655\n\t// Subclasses can override. Must return all properties.                                                               // 6656\n\tcomputeRange: function(date) {                                                                                        // 6657\n\t\tvar intervalUnit = computeIntervalUnit(this.intervalDuration);                                                       // 6658\n\t\tvar intervalStart = date.clone().startOf(intervalUnit);                                                              // 6659\n\t\tvar intervalEnd = intervalStart.clone().add(this.intervalDuration);                                                  // 6660\n\t\tvar start, end;                                                                                                      // 6661\n                                                                                                                       // 6662\n\t\t// normalize the range's time-ambiguity                                                                              // 6663\n\t\tif (/year|month|week|day/.test(intervalUnit)) { // whole-days?                                                       // 6664\n\t\t\tintervalStart.stripTime();                                                                                          // 6665\n\t\t\tintervalEnd.stripTime();                                                                                            // 6666\n\t\t}                                                                                                                    // 6667\n\t\telse { // needs to have a time?                                                                                      // 6668\n\t\t\tif (!intervalStart.hasTime()) {                                                                                     // 6669\n\t\t\t\tintervalStart = this.calendar.rezoneDate(intervalStart); // convert to current timezone, with 00:00                // 6670\n\t\t\t}                                                                                                                   // 6671\n\t\t\tif (!intervalEnd.hasTime()) {                                                                                       // 6672\n\t\t\t\tintervalEnd = this.calendar.rezoneDate(intervalEnd); // convert to current timezone, with 00:00                    // 6673\n\t\t\t}                                                                                                                   // 6674\n\t\t}                                                                                                                    // 6675\n                                                                                                                       // 6676\n\t\tstart = intervalStart.clone();                                                                                       // 6677\n\t\tstart = this.skipHiddenDays(start);                                                                                  // 6678\n\t\tend = intervalEnd.clone();                                                                                           // 6679\n\t\tend = this.skipHiddenDays(end, -1, true); // exclusively move backwards                                              // 6680\n                                                                                                                       // 6681\n\t\treturn {                                                                                                             // 6682\n\t\t\tintervalUnit: intervalUnit,                                                                                         // 6683\n\t\t\tintervalStart: intervalStart,                                                                                       // 6684\n\t\t\tintervalEnd: intervalEnd,                                                                                           // 6685\n\t\t\tstart: start,                                                                                                       // 6686\n\t\t\tend: end                                                                                                            // 6687\n\t\t};                                                                                                                   // 6688\n\t},                                                                                                                    // 6689\n                                                                                                                       // 6690\n                                                                                                                       // 6691\n\t// Computes the new date when the user hits the prev button, given the current date                                   // 6692\n\tcomputePrevDate: function(date) {                                                                                     // 6693\n\t\treturn this.massageCurrentDate(                                                                                      // 6694\n\t\t\tdate.clone().startOf(this.intervalUnit).subtract(this.intervalDuration), -1                                         // 6695\n\t\t);                                                                                                                   // 6696\n\t},                                                                                                                    // 6697\n                                                                                                                       // 6698\n                                                                                                                       // 6699\n\t// Computes the new date when the user hits the next button, given the current date                                   // 6700\n\tcomputeNextDate: function(date) {                                                                                     // 6701\n\t\treturn this.massageCurrentDate(                                                                                      // 6702\n\t\t\tdate.clone().startOf(this.intervalUnit).add(this.intervalDuration)                                                  // 6703\n\t\t);                                                                                                                   // 6704\n\t},                                                                                                                    // 6705\n                                                                                                                       // 6706\n                                                                                                                       // 6707\n\t// Given an arbitrarily calculated current date of the calendar, returns a date that is ensured to be completely      // 6708\n\t// visible. `direction` is optional and indicates which direction the current date was being                          // 6709\n\t// incremented or decremented (1 or -1).                                                                              // 6710\n\tmassageCurrentDate: function(date, direction) {                                                                       // 6711\n\t\tif (this.intervalDuration.as('days') <= 1) { // if the view displays a single day or smaller                         // 6712\n\t\t\tif (this.isHiddenDay(date)) {                                                                                       // 6713\n\t\t\t\tdate = this.skipHiddenDays(date, direction);                                                                       // 6714\n\t\t\t\tdate.startOf('day');                                                                                               // 6715\n\t\t\t}                                                                                                                   // 6716\n\t\t}                                                                                                                    // 6717\n                                                                                                                       // 6718\n\t\treturn date;                                                                                                         // 6719\n\t},                                                                                                                    // 6720\n                                                                                                                       // 6721\n                                                                                                                       // 6722\n\t/* Title and Date Formatting                                                                                          // 6723\n\t------------------------------------------------------------------------------------------------------------------*/  // 6724\n                                                                                                                       // 6725\n                                                                                                                       // 6726\n\t// Sets the view's title property to the most updated computed value                                                  // 6727\n\tupdateTitle: function() {                                                                                             // 6728\n\t\tthis.title = this.computeTitle();                                                                                    // 6729\n\t},                                                                                                                    // 6730\n                                                                                                                       // 6731\n                                                                                                                       // 6732\n\t// Computes what the title at the top of the calendar should be for this view                                         // 6733\n\tcomputeTitle: function() {                                                                                            // 6734\n\t\treturn this.formatRange(                                                                                             // 6735\n\t\t\t{ start: this.intervalStart, end: this.intervalEnd },                                                               // 6736\n\t\t\tthis.opt('titleFormat') || this.computeTitleFormat(),                                                               // 6737\n\t\t\tthis.opt('titleRangeSeparator')                                                                                     // 6738\n\t\t);                                                                                                                   // 6739\n\t},                                                                                                                    // 6740\n                                                                                                                       // 6741\n                                                                                                                       // 6742\n\t// Generates the format string that should be used to generate the title for the current date range.                  // 6743\n\t// Attempts to compute the most appropriate format if not explicitly specified with `titleFormat`.                    // 6744\n\tcomputeTitleFormat: function() {                                                                                      // 6745\n\t\tif (this.intervalUnit == 'year') {                                                                                   // 6746\n\t\t\treturn 'YYYY';                                                                                                      // 6747\n\t\t}                                                                                                                    // 6748\n\t\telse if (this.intervalUnit == 'month') {                                                                             // 6749\n\t\t\treturn this.opt('monthYearFormat'); // like \"September 2014\"                                                        // 6750\n\t\t}                                                                                                                    // 6751\n\t\telse if (this.intervalDuration.as('days') > 1) {                                                                     // 6752\n\t\t\treturn 'll'; // multi-day range. shorter, like \"Sep 9 - 10 2014\"                                                    // 6753\n\t\t}                                                                                                                    // 6754\n\t\telse {                                                                                                               // 6755\n\t\t\treturn 'LL'; // one day. longer, like \"September 9 2014\"                                                            // 6756\n\t\t}                                                                                                                    // 6757\n\t},                                                                                                                    // 6758\n                                                                                                                       // 6759\n                                                                                                                       // 6760\n\t// Utility for formatting a range. Accepts a range object, formatting string, and optional separator.                 // 6761\n\t// Displays all-day ranges naturally, with an inclusive end. Takes the current isRTL into account.                    // 6762\n\tformatRange: function(range, formatStr, separator) {                                                                  // 6763\n\t\tvar end = range.end;                                                                                                 // 6764\n                                                                                                                       // 6765\n\t\tif (!end.hasTime()) { // all-day?                                                                                    // 6766\n\t\t\tend = end.clone().subtract(1); // convert to inclusive. last ms of previous day                                     // 6767\n\t\t}                                                                                                                    // 6768\n                                                                                                                       // 6769\n\t\treturn formatRange(range.start, end, formatStr, separator, this.opt('isRTL'));                                       // 6770\n\t},                                                                                                                    // 6771\n                                                                                                                       // 6772\n                                                                                                                       // 6773\n\t/* Rendering                                                                                                          // 6774\n\t------------------------------------------------------------------------------------------------------------------*/  // 6775\n                                                                                                                       // 6776\n                                                                                                                       // 6777\n\t// Sets the container element that the view should render inside of.                                                  // 6778\n\t// Does other DOM-related initializations.                                                                            // 6779\n\tsetElement: function(el) {                                                                                            // 6780\n\t\tthis.el = el;                                                                                                        // 6781\n\t\tthis.bindGlobalHandlers();                                                                                           // 6782\n\t},                                                                                                                    // 6783\n                                                                                                                       // 6784\n                                                                                                                       // 6785\n\t// Removes the view's container element from the DOM, clearing any content beforehand.                                // 6786\n\t// Undoes any other DOM-related attachments.                                                                          // 6787\n\tremoveElement: function() {                                                                                           // 6788\n\t\tthis.clear(); // clears all content                                                                                  // 6789\n                                                                                                                       // 6790\n\t\t// clean up the skeleton                                                                                             // 6791\n\t\tif (this.isSkeletonRendered) {                                                                                       // 6792\n\t\t\tthis.destroySkeleton();                                                                                             // 6793\n\t\t\tthis.isSkeletonRendered = false;                                                                                    // 6794\n\t\t}                                                                                                                    // 6795\n                                                                                                                       // 6796\n\t\tthis.unbindGlobalHandlers();                                                                                         // 6797\n                                                                                                                       // 6798\n\t\tthis.el.remove();                                                                                                    // 6799\n                                                                                                                       // 6800\n\t\t// NOTE: don't null-out this.el in case the View was destroyed within an API callback.                               // 6801\n\t\t// We don't null-out the View's other jQuery element references upon destroy, so why should we kill this.el?         // 6802\n\t},                                                                                                                    // 6803\n                                                                                                                       // 6804\n                                                                                                                       // 6805\n\t// Does everything necessary to display the view centered around the given date.                                      // 6806\n\t// Does every type of rendering EXCEPT rendering events.                                                              // 6807\n\tdisplay: function(date) {                                                                                             // 6808\n\t\tvar scrollState = null;                                                                                              // 6809\n                                                                                                                       // 6810\n\t\tif (this.isDisplayed) {                                                                                              // 6811\n\t\t\tscrollState = this.queryScroll();                                                                                   // 6812\n\t\t}                                                                                                                    // 6813\n                                                                                                                       // 6814\n\t\tthis.clear(); // clear the old content                                                                               // 6815\n\t\tthis.setDate(date);                                                                                                  // 6816\n\t\tthis.render();                                                                                                       // 6817\n\t\tthis.updateSize();                                                                                                   // 6818\n\t\tthis.renderBusinessHours(); // might need coordinates, so should go after updateSize()                               // 6819\n\t\tthis.isDisplayed = true;                                                                                             // 6820\n                                                                                                                       // 6821\n\t\tscrollState = this.computeInitialScroll(scrollState);                                                                // 6822\n\t\tthis.forceScroll(scrollState);                                                                                       // 6823\n                                                                                                                       // 6824\n\t\tthis.triggerRender();                                                                                                // 6825\n\t},                                                                                                                    // 6826\n                                                                                                                       // 6827\n                                                                                                                       // 6828\n\t// Does everything necessary to clear the content of the view.                                                        // 6829\n\t// Clears dates and events. Does not clear the skeleton.                                                              // 6830\n\tclear: function() { // clears the view of *content* but not the skeleton                                              // 6831\n\t\tif (this.isDisplayed) {                                                                                              // 6832\n\t\t\tthis.unselect();                                                                                                    // 6833\n\t\t\tthis.clearEvents();                                                                                                 // 6834\n\t\t\tthis.triggerDestroy();                                                                                              // 6835\n\t\t\tthis.destroyBusinessHours();                                                                                        // 6836\n\t\t\tthis.destroy();                                                                                                     // 6837\n\t\t\tthis.isDisplayed = false;                                                                                           // 6838\n\t\t}                                                                                                                    // 6839\n\t},                                                                                                                    // 6840\n                                                                                                                       // 6841\n                                                                                                                       // 6842\n\t// Renders the view's date-related content, rendering the view's non-content skeleton if necessary                    // 6843\n\trender: function() {                                                                                                  // 6844\n\t\tif (!this.isSkeletonRendered) {                                                                                      // 6845\n\t\t\tthis.renderSkeleton();                                                                                              // 6846\n\t\t\tthis.isSkeletonRendered = true;                                                                                     // 6847\n\t\t}                                                                                                                    // 6848\n\t\tthis.renderDates();                                                                                                  // 6849\n\t},                                                                                                                    // 6850\n                                                                                                                       // 6851\n                                                                                                                       // 6852\n\t// Unrenders the view's date-related content.                                                                         // 6853\n\t// Call this instead of destroyDates directly in case the View subclass wants to use a render/destroy pattern         // 6854\n\t// where both the skeleton and the content always get rendered/unrendered together.                                   // 6855\n\tdestroy: function() {                                                                                                 // 6856\n\t\tthis.destroyDates();                                                                                                 // 6857\n\t},                                                                                                                    // 6858\n                                                                                                                       // 6859\n                                                                                                                       // 6860\n\t// Renders the basic structure of the view before any content is rendered                                             // 6861\n\trenderSkeleton: function() {                                                                                          // 6862\n\t\t// subclasses should implement                                                                                       // 6863\n\t},                                                                                                                    // 6864\n                                                                                                                       // 6865\n                                                                                                                       // 6866\n\t// Unrenders the basic structure of the view                                                                          // 6867\n\tdestroySkeleton: function() {                                                                                         // 6868\n\t\t// subclasses should implement                                                                                       // 6869\n\t},                                                                                                                    // 6870\n                                                                                                                       // 6871\n                                                                                                                       // 6872\n\t// Renders the view's date-related content (like cells that represent days/times).                                    // 6873\n\t// Assumes setRange has already been called and the skeleton has already been rendered.                               // 6874\n\trenderDates: function() {                                                                                             // 6875\n\t\t// subclasses should implement                                                                                       // 6876\n\t},                                                                                                                    // 6877\n                                                                                                                       // 6878\n                                                                                                                       // 6879\n\t// Unrenders the view's date-related content                                                                          // 6880\n\tdestroyDates: function() {                                                                                            // 6881\n\t\t// subclasses should override                                                                                        // 6882\n\t},                                                                                                                    // 6883\n                                                                                                                       // 6884\n                                                                                                                       // 6885\n\t// Renders business-hours onto the view. Assumes updateSize has already been called.                                  // 6886\n\trenderBusinessHours: function() {                                                                                     // 6887\n\t\t// subclasses should implement                                                                                       // 6888\n\t},                                                                                                                    // 6889\n                                                                                                                       // 6890\n                                                                                                                       // 6891\n\t// Unrenders previously-rendered business-hours                                                                       // 6892\n\tdestroyBusinessHours: function() {                                                                                    // 6893\n\t\t// subclasses should implement                                                                                       // 6894\n\t},                                                                                                                    // 6895\n                                                                                                                       // 6896\n                                                                                                                       // 6897\n\t// Signals that the view's content has been rendered                                                                  // 6898\n\ttriggerRender: function() {                                                                                           // 6899\n\t\tthis.trigger('viewRender', this, this, this.el);                                                                     // 6900\n\t},                                                                                                                    // 6901\n                                                                                                                       // 6902\n                                                                                                                       // 6903\n\t// Signals that the view's content is about to be unrendered                                                          // 6904\n\ttriggerDestroy: function() {                                                                                          // 6905\n\t\tthis.trigger('viewDestroy', this, this, this.el);                                                                    // 6906\n\t},                                                                                                                    // 6907\n                                                                                                                       // 6908\n                                                                                                                       // 6909\n\t// Binds DOM handlers to elements that reside outside the view container, such as the document                        // 6910\n\tbindGlobalHandlers: function() {                                                                                      // 6911\n\t\t$(document).on('mousedown', this.documentMousedownProxy);                                                            // 6912\n\t},                                                                                                                    // 6913\n                                                                                                                       // 6914\n                                                                                                                       // 6915\n\t// Unbinds DOM handlers from elements that reside outside the view container                                          // 6916\n\tunbindGlobalHandlers: function() {                                                                                    // 6917\n\t\t$(document).off('mousedown', this.documentMousedownProxy);                                                           // 6918\n\t},                                                                                                                    // 6919\n                                                                                                                       // 6920\n                                                                                                                       // 6921\n\t// Initializes internal variables related to theming                                                                  // 6922\n\tinitThemingProps: function() {                                                                                        // 6923\n\t\tvar tm = this.opt('theme') ? 'ui' : 'fc';                                                                            // 6924\n                                                                                                                       // 6925\n\t\tthis.widgetHeaderClass = tm + '-widget-header';                                                                      // 6926\n\t\tthis.widgetContentClass = tm + '-widget-content';                                                                    // 6927\n\t\tthis.highlightStateClass = tm + '-state-highlight';                                                                  // 6928\n\t},                                                                                                                    // 6929\n                                                                                                                       // 6930\n                                                                                                                       // 6931\n\t/* Dimensions                                                                                                         // 6932\n\t------------------------------------------------------------------------------------------------------------------*/  // 6933\n                                                                                                                       // 6934\n                                                                                                                       // 6935\n\t// Refreshes anything dependant upon sizing of the container element of the grid                                      // 6936\n\tupdateSize: function(isResize) {                                                                                      // 6937\n\t\tvar scrollState;                                                                                                     // 6938\n                                                                                                                       // 6939\n\t\tif (isResize) {                                                                                                      // 6940\n\t\t\tscrollState = this.queryScroll();                                                                                   // 6941\n\t\t}                                                                                                                    // 6942\n                                                                                                                       // 6943\n\t\tthis.updateHeight();                                                                                                 // 6944\n\t\tthis.updateWidth();                                                                                                  // 6945\n                                                                                                                       // 6946\n\t\tif (isResize) {                                                                                                      // 6947\n\t\t\tthis.setScroll(scrollState);                                                                                        // 6948\n\t\t}                                                                                                                    // 6949\n\t},                                                                                                                    // 6950\n                                                                                                                       // 6951\n                                                                                                                       // 6952\n\t// Refreshes the horizontal dimensions of the calendar                                                                // 6953\n\tupdateWidth: function() {                                                                                             // 6954\n\t\t// subclasses should implement                                                                                       // 6955\n\t},                                                                                                                    // 6956\n                                                                                                                       // 6957\n                                                                                                                       // 6958\n\t// Refreshes the vertical dimensions of the calendar                                                                  // 6959\n\tupdateHeight: function() {                                                                                            // 6960\n\t\tvar calendar = this.calendar; // we poll the calendar for height information                                         // 6961\n                                                                                                                       // 6962\n\t\tthis.setHeight(                                                                                                      // 6963\n\t\t\tcalendar.getSuggestedViewHeight(),                                                                                  // 6964\n\t\t\tcalendar.isHeightAuto()                                                                                             // 6965\n\t\t);                                                                                                                   // 6966\n\t},                                                                                                                    // 6967\n                                                                                                                       // 6968\n                                                                                                                       // 6969\n\t// Updates the vertical dimensions of the calendar to the specified height.                                           // 6970\n\t// if `isAuto` is set to true, height becomes merely a suggestion and the view should use its \"natural\" height.       // 6971\n\tsetHeight: function(height, isAuto) {                                                                                 // 6972\n\t\t// subclasses should implement                                                                                       // 6973\n\t},                                                                                                                    // 6974\n                                                                                                                       // 6975\n                                                                                                                       // 6976\n\t/* Scroller                                                                                                           // 6977\n\t------------------------------------------------------------------------------------------------------------------*/  // 6978\n                                                                                                                       // 6979\n                                                                                                                       // 6980\n\t// Given the total height of the view, return the number of pixels that should be used for the scroller.              // 6981\n\t// Utility for subclasses.                                                                                            // 6982\n\tcomputeScrollerHeight: function(totalHeight) {                                                                        // 6983\n\t\tvar scrollerEl = this.scrollerEl;                                                                                    // 6984\n\t\tvar both;                                                                                                            // 6985\n\t\tvar otherHeight; // cumulative height of everything that is not the scrollerEl in the view (header+borders)          // 6986\n                                                                                                                       // 6987\n\t\tboth = this.el.add(scrollerEl);                                                                                      // 6988\n                                                                                                                       // 6989\n\t\t// fuckin IE8/9/10/11 sometimes returns 0 for dimensions. this weird hack was the only thing that worked             // 6990\n\t\tboth.css({                                                                                                           // 6991\n\t\t\tposition: 'relative', // cause a reflow, which will force fresh dimension recalculation                             // 6992\n\t\t\tleft: -1 // ensure reflow in case the el was already relative. negative is less likely to cause new scroll          // 6993\n\t\t});                                                                                                                  // 6994\n\t\totherHeight = this.el.outerHeight() - scrollerEl.height(); // grab the dimensions                                    // 6995\n\t\tboth.css({ position: '', left: '' }); // undo hack                                                                   // 6996\n                                                                                                                       // 6997\n\t\treturn totalHeight - otherHeight;                                                                                    // 6998\n\t},                                                                                                                    // 6999\n                                                                                                                       // 7000\n                                                                                                                       // 7001\n\t// Computes the initial pre-configured scroll state prior to allowing the user to change it.                          // 7002\n\t// Given the scroll state from the previous rendering. If first time rendering, given null.                           // 7003\n\tcomputeInitialScroll: function(previousScrollState) {                                                                 // 7004\n\t\treturn 0;                                                                                                            // 7005\n\t},                                                                                                                    // 7006\n                                                                                                                       // 7007\n                                                                                                                       // 7008\n\t// Retrieves the view's current natural scroll state. Can return an arbitrary format.                                 // 7009\n\tqueryScroll: function() {                                                                                             // 7010\n\t\tif (this.scrollerEl) {                                                                                               // 7011\n\t\t\treturn this.scrollerEl.scrollTop(); // operates on scrollerEl by default                                            // 7012\n\t\t}                                                                                                                    // 7013\n\t},                                                                                                                    // 7014\n                                                                                                                       // 7015\n                                                                                                                       // 7016\n\t// Sets the view's scroll state. Will accept the same format computeInitialScroll and queryScroll produce.            // 7017\n\tsetScroll: function(scrollState) {                                                                                    // 7018\n\t\tif (this.scrollerEl) {                                                                                               // 7019\n\t\t\treturn this.scrollerEl.scrollTop(scrollState); // operates on scrollerEl by default                                 // 7020\n\t\t}                                                                                                                    // 7021\n\t},                                                                                                                    // 7022\n                                                                                                                       // 7023\n                                                                                                                       // 7024\n\t// Sets the scroll state, making sure to overcome any predefined scroll value the browser has in mind                 // 7025\n\tforceScroll: function(scrollState) {                                                                                  // 7026\n\t\tvar _this = this;                                                                                                    // 7027\n                                                                                                                       // 7028\n\t\tthis.setScroll(scrollState);                                                                                         // 7029\n\t\tsetTimeout(function() {                                                                                              // 7030\n\t\t\t_this.setScroll(scrollState);                                                                                       // 7031\n\t\t}, 0);                                                                                                               // 7032\n\t},                                                                                                                    // 7033\n                                                                                                                       // 7034\n                                                                                                                       // 7035\n\t/* Event Elements / Segments                                                                                          // 7036\n\t------------------------------------------------------------------------------------------------------------------*/  // 7037\n                                                                                                                       // 7038\n                                                                                                                       // 7039\n\t// Does everything necessary to display the given events onto the current view                                        // 7040\n\tdisplayEvents: function(events) {                                                                                     // 7041\n\t\tvar scrollState = this.queryScroll();                                                                                // 7042\n                                                                                                                       // 7043\n\t\tthis.clearEvents();                                                                                                  // 7044\n\t\tthis.renderEvents(events);                                                                                           // 7045\n\t\tthis.isEventsRendered = true;                                                                                        // 7046\n\t\tthis.setScroll(scrollState);                                                                                         // 7047\n\t\tthis.triggerEventRender();                                                                                           // 7048\n\t},                                                                                                                    // 7049\n                                                                                                                       // 7050\n                                                                                                                       // 7051\n\t// Does everything necessary to clear the view's currently-rendered events                                            // 7052\n\tclearEvents: function() {                                                                                             // 7053\n\t\tif (this.isEventsRendered) {                                                                                         // 7054\n\t\t\tthis.triggerEventDestroy();                                                                                         // 7055\n\t\t\tthis.destroyEvents();                                                                                               // 7056\n\t\t\tthis.isEventsRendered = false;                                                                                      // 7057\n\t\t}                                                                                                                    // 7058\n\t},                                                                                                                    // 7059\n                                                                                                                       // 7060\n                                                                                                                       // 7061\n\t// Renders the events onto the view.                                                                                  // 7062\n\trenderEvents: function(events) {                                                                                      // 7063\n\t\t// subclasses should implement                                                                                       // 7064\n\t},                                                                                                                    // 7065\n                                                                                                                       // 7066\n                                                                                                                       // 7067\n\t// Removes event elements from the view.                                                                              // 7068\n\tdestroyEvents: function() {                                                                                           // 7069\n\t\t// subclasses should implement                                                                                       // 7070\n\t},                                                                                                                    // 7071\n                                                                                                                       // 7072\n                                                                                                                       // 7073\n\t// Signals that all events have been rendered                                                                         // 7074\n\ttriggerEventRender: function() {                                                                                      // 7075\n\t\tthis.renderedEventSegEach(function(seg) {                                                                            // 7076\n\t\t\tthis.trigger('eventAfterRender', seg.event, seg.event, seg.el);                                                     // 7077\n\t\t});                                                                                                                  // 7078\n\t\tthis.trigger('eventAfterAllRender');                                                                                 // 7079\n\t},                                                                                                                    // 7080\n                                                                                                                       // 7081\n                                                                                                                       // 7082\n\t// Signals that all event elements are about to be removed                                                            // 7083\n\ttriggerEventDestroy: function() {                                                                                     // 7084\n\t\tthis.renderedEventSegEach(function(seg) {                                                                            // 7085\n\t\t\tthis.trigger('eventDestroy', seg.event, seg.event, seg.el);                                                         // 7086\n\t\t});                                                                                                                  // 7087\n\t},                                                                                                                    // 7088\n                                                                                                                       // 7089\n                                                                                                                       // 7090\n\t// Given an event and the default element used for rendering, returns the element that should actually be used.       // 7091\n\t// Basically runs events and elements through the eventRender hook.                                                   // 7092\n\tresolveEventEl: function(event, el) {                                                                                 // 7093\n\t\tvar custom = this.trigger('eventRender', event, event, el);                                                          // 7094\n                                                                                                                       // 7095\n\t\tif (custom === false) { // means don't render at all                                                                 // 7096\n\t\t\tel = null;                                                                                                          // 7097\n\t\t}                                                                                                                    // 7098\n\t\telse if (custom && custom !== true) {                                                                                // 7099\n\t\t\tel = $(custom);                                                                                                     // 7100\n\t\t}                                                                                                                    // 7101\n                                                                                                                       // 7102\n\t\treturn el;                                                                                                           // 7103\n\t},                                                                                                                    // 7104\n                                                                                                                       // 7105\n                                                                                                                       // 7106\n\t// Hides all rendered event segments linked to the given event                                                        // 7107\n\tshowEvent: function(event) {                                                                                          // 7108\n\t\tthis.renderedEventSegEach(function(seg) {                                                                            // 7109\n\t\t\tseg.el.css('visibility', '');                                                                                       // 7110\n\t\t}, event);                                                                                                           // 7111\n\t},                                                                                                                    // 7112\n                                                                                                                       // 7113\n                                                                                                                       // 7114\n\t// Shows all rendered event segments linked to the given event                                                        // 7115\n\thideEvent: function(event) {                                                                                          // 7116\n\t\tthis.renderedEventSegEach(function(seg) {                                                                            // 7117\n\t\t\tseg.el.css('visibility', 'hidden');                                                                                 // 7118\n\t\t}, event);                                                                                                           // 7119\n\t},                                                                                                                    // 7120\n                                                                                                                       // 7121\n                                                                                                                       // 7122\n\t// Iterates through event segments that have been rendered (have an el). Goes through all by default.                 // 7123\n\t// If the optional `event` argument is specified, only iterates through segments linked to that event.                // 7124\n\t// The `this` value of the callback function will be the view.                                                        // 7125\n\trenderedEventSegEach: function(func, event) {                                                                         // 7126\n\t\tvar segs = this.getEventSegs();                                                                                      // 7127\n\t\tvar i;                                                                                                               // 7128\n                                                                                                                       // 7129\n\t\tfor (i = 0; i < segs.length; i++) {                                                                                  // 7130\n\t\t\tif (!event || segs[i].event._id === event._id) {                                                                    // 7131\n\t\t\t\tif (segs[i].el) {                                                                                                  // 7132\n\t\t\t\t\tfunc.call(this, segs[i]);                                                                                         // 7133\n\t\t\t\t}                                                                                                                  // 7134\n\t\t\t}                                                                                                                   // 7135\n\t\t}                                                                                                                    // 7136\n\t},                                                                                                                    // 7137\n                                                                                                                       // 7138\n                                                                                                                       // 7139\n\t// Retrieves all the rendered segment objects for the view                                                            // 7140\n\tgetEventSegs: function() {                                                                                            // 7141\n\t\t// subclasses must implement                                                                                         // 7142\n\t\treturn [];                                                                                                           // 7143\n\t},                                                                                                                    // 7144\n                                                                                                                       // 7145\n                                                                                                                       // 7146\n\t/* Event Drag-n-Drop                                                                                                  // 7147\n\t------------------------------------------------------------------------------------------------------------------*/  // 7148\n                                                                                                                       // 7149\n                                                                                                                       // 7150\n\t// Computes if the given event is allowed to be dragged by the user                                                   // 7151\n\tisEventDraggable: function(event) {                                                                                   // 7152\n\t\tvar source = event.source || {};                                                                                     // 7153\n                                                                                                                       // 7154\n\t\treturn firstDefined(                                                                                                 // 7155\n\t\t\tevent.startEditable,                                                                                                // 7156\n\t\t\tsource.startEditable,                                                                                               // 7157\n\t\t\tthis.opt('eventStartEditable'),                                                                                     // 7158\n\t\t\tevent.editable,                                                                                                     // 7159\n\t\t\tsource.editable,                                                                                                    // 7160\n\t\t\tthis.opt('editable')                                                                                                // 7161\n\t\t);                                                                                                                   // 7162\n\t},                                                                                                                    // 7163\n                                                                                                                       // 7164\n                                                                                                                       // 7165\n\t// Must be called when an event in the view is dropped onto new location.                                             // 7166\n\t// `dropLocation` is an object that contains the new start/end/allDay values for the event.                           // 7167\n\treportEventDrop: function(event, dropLocation, largeUnit, el, ev) {                                                   // 7168\n\t\tvar calendar = this.calendar;                                                                                        // 7169\n\t\tvar mutateResult = calendar.mutateEvent(event, dropLocation, largeUnit);                                             // 7170\n\t\tvar undoFunc = function() {                                                                                          // 7171\n\t\t\tmutateResult.undo();                                                                                                // 7172\n\t\t\tcalendar.reportEventChange();                                                                                       // 7173\n\t\t};                                                                                                                   // 7174\n                                                                                                                       // 7175\n\t\tthis.triggerEventDrop(event, mutateResult.dateDelta, undoFunc, el, ev);                                              // 7176\n\t\tcalendar.reportEventChange(); // will rerender events                                                                // 7177\n\t},                                                                                                                    // 7178\n                                                                                                                       // 7179\n                                                                                                                       // 7180\n\t// Triggers event-drop handlers that have subscribed via the API                                                      // 7181\n\ttriggerEventDrop: function(event, dateDelta, undoFunc, el, ev) {                                                      // 7182\n\t\tthis.trigger('eventDrop', el[0], event, dateDelta, undoFunc, ev, {}); // {} = jqui dummy                             // 7183\n\t},                                                                                                                    // 7184\n                                                                                                                       // 7185\n                                                                                                                       // 7186\n\t/* External Element Drag-n-Drop                                                                                       // 7187\n\t------------------------------------------------------------------------------------------------------------------*/  // 7188\n                                                                                                                       // 7189\n                                                                                                                       // 7190\n\t// Must be called when an external element, via jQuery UI, has been dropped onto the calendar.                        // 7191\n\t// `meta` is the parsed data that has been embedded into the dragging event.                                          // 7192\n\t// `dropLocation` is an object that contains the new start/end/allDay values for the event.                           // 7193\n\treportExternalDrop: function(meta, dropLocation, el, ev, ui) {                                                        // 7194\n\t\tvar eventProps = meta.eventProps;                                                                                    // 7195\n\t\tvar eventInput;                                                                                                      // 7196\n\t\tvar event;                                                                                                           // 7197\n                                                                                                                       // 7198\n\t\t// Try to build an event object and render it. TODO: decouple the two                                                // 7199\n\t\tif (eventProps) {                                                                                                    // 7200\n\t\t\teventInput = $.extend({}, eventProps, dropLocation);                                                                // 7201\n\t\t\tevent = this.calendar.renderEvent(eventInput, meta.stick)[0]; // renderEvent returns an array                       // 7202\n\t\t}                                                                                                                    // 7203\n                                                                                                                       // 7204\n\t\tthis.triggerExternalDrop(event, dropLocation, el, ev, ui);                                                           // 7205\n\t},                                                                                                                    // 7206\n                                                                                                                       // 7207\n                                                                                                                       // 7208\n\t// Triggers external-drop handlers that have subscribed via the API                                                   // 7209\n\ttriggerExternalDrop: function(event, dropLocation, el, ev, ui) {                                                      // 7210\n                                                                                                                       // 7211\n\t\t// trigger 'drop' regardless of whether element represents an event                                                  // 7212\n\t\tthis.trigger('drop', el[0], dropLocation.start, ev, ui);                                                             // 7213\n                                                                                                                       // 7214\n\t\tif (event) {                                                                                                         // 7215\n\t\t\tthis.trigger('eventReceive', null, event); // signal an external event landed                                       // 7216\n\t\t}                                                                                                                    // 7217\n\t},                                                                                                                    // 7218\n                                                                                                                       // 7219\n                                                                                                                       // 7220\n\t/* Drag-n-Drop Rendering (for both events and external elements)                                                      // 7221\n\t------------------------------------------------------------------------------------------------------------------*/  // 7222\n                                                                                                                       // 7223\n                                                                                                                       // 7224\n\t// Renders a visual indication of a event or external-element drag over the given drop zone.                          // 7225\n\t// If an external-element, seg will be `null`                                                                         // 7226\n\trenderDrag: function(dropLocation, seg) {                                                                             // 7227\n\t\t// subclasses must implement                                                                                         // 7228\n\t},                                                                                                                    // 7229\n                                                                                                                       // 7230\n                                                                                                                       // 7231\n\t// Unrenders a visual indication of an event or external-element being dragged.                                       // 7232\n\tdestroyDrag: function() {                                                                                             // 7233\n\t\t// subclasses must implement                                                                                         // 7234\n\t},                                                                                                                    // 7235\n                                                                                                                       // 7236\n                                                                                                                       // 7237\n\t/* Event Resizing                                                                                                     // 7238\n\t------------------------------------------------------------------------------------------------------------------*/  // 7239\n                                                                                                                       // 7240\n                                                                                                                       // 7241\n\t// Computes if the given event is allowed to be resized from its starting edge                                        // 7242\n\tisEventResizableFromStart: function(event) {                                                                          // 7243\n\t\treturn this.opt('eventResizableFromStart') && this.isEventResizable(event);                                          // 7244\n\t},                                                                                                                    // 7245\n                                                                                                                       // 7246\n                                                                                                                       // 7247\n\t// Computes if the given event is allowed to be resized from its ending edge                                          // 7248\n\tisEventResizableFromEnd: function(event) {                                                                            // 7249\n\t\treturn this.isEventResizable(event);                                                                                 // 7250\n\t},                                                                                                                    // 7251\n                                                                                                                       // 7252\n                                                                                                                       // 7253\n\t// Computes if the given event is allowed to be resized by the user at all                                            // 7254\n\tisEventResizable: function(event) {                                                                                   // 7255\n\t\tvar source = event.source || {};                                                                                     // 7256\n                                                                                                                       // 7257\n\t\treturn firstDefined(                                                                                                 // 7258\n\t\t\tevent.durationEditable,                                                                                             // 7259\n\t\t\tsource.durationEditable,                                                                                            // 7260\n\t\t\tthis.opt('eventDurationEditable'),                                                                                  // 7261\n\t\t\tevent.editable,                                                                                                     // 7262\n\t\t\tsource.editable,                                                                                                    // 7263\n\t\t\tthis.opt('editable')                                                                                                // 7264\n\t\t);                                                                                                                   // 7265\n\t},                                                                                                                    // 7266\n                                                                                                                       // 7267\n                                                                                                                       // 7268\n\t// Must be called when an event in the view has been resized to a new length                                          // 7269\n\treportEventResize: function(event, resizeLocation, largeUnit, el, ev) {                                               // 7270\n\t\tvar calendar = this.calendar;                                                                                        // 7271\n\t\tvar mutateResult = calendar.mutateEvent(event, resizeLocation, largeUnit);                                           // 7272\n\t\tvar undoFunc = function() {                                                                                          // 7273\n\t\t\tmutateResult.undo();                                                                                                // 7274\n\t\t\tcalendar.reportEventChange();                                                                                       // 7275\n\t\t};                                                                                                                   // 7276\n                                                                                                                       // 7277\n\t\tthis.triggerEventResize(event, mutateResult.durationDelta, undoFunc, el, ev);                                        // 7278\n\t\tcalendar.reportEventChange(); // will rerender events                                                                // 7279\n\t},                                                                                                                    // 7280\n                                                                                                                       // 7281\n                                                                                                                       // 7282\n\t// Triggers event-resize handlers that have subscribed via the API                                                    // 7283\n\ttriggerEventResize: function(event, durationDelta, undoFunc, el, ev) {                                                // 7284\n\t\tthis.trigger('eventResize', el[0], event, durationDelta, undoFunc, ev, {}); // {} = jqui dummy                       // 7285\n\t},                                                                                                                    // 7286\n                                                                                                                       // 7287\n                                                                                                                       // 7288\n\t/* Selection                                                                                                          // 7289\n\t------------------------------------------------------------------------------------------------------------------*/  // 7290\n                                                                                                                       // 7291\n                                                                                                                       // 7292\n\t// Selects a date range on the view. `start` and `end` are both Moments.                                              // 7293\n\t// `ev` is the native mouse event that begin the interaction.                                                         // 7294\n\tselect: function(range, ev) {                                                                                         // 7295\n\t\tthis.unselect(ev);                                                                                                   // 7296\n\t\tthis.renderSelection(range);                                                                                         // 7297\n\t\tthis.reportSelection(range, ev);                                                                                     // 7298\n\t},                                                                                                                    // 7299\n                                                                                                                       // 7300\n                                                                                                                       // 7301\n\t// Renders a visual indication of the selection                                                                       // 7302\n\trenderSelection: function(range) {                                                                                    // 7303\n\t\t// subclasses should implement                                                                                       // 7304\n\t},                                                                                                                    // 7305\n                                                                                                                       // 7306\n                                                                                                                       // 7307\n\t// Called when a new selection is made. Updates internal state and triggers handlers.                                 // 7308\n\treportSelection: function(range, ev) {                                                                                // 7309\n\t\tthis.isSelected = true;                                                                                              // 7310\n\t\tthis.trigger('select', null, range.start, range.end, ev);                                                            // 7311\n\t},                                                                                                                    // 7312\n                                                                                                                       // 7313\n                                                                                                                       // 7314\n\t// Undoes a selection. updates in the internal state and triggers handlers.                                           // 7315\n\t// `ev` is the native mouse event that began the interaction.                                                         // 7316\n\tunselect: function(ev) {                                                                                              // 7317\n\t\tif (this.isSelected) {                                                                                               // 7318\n\t\t\tthis.isSelected = false;                                                                                            // 7319\n\t\t\tthis.destroySelection();                                                                                            // 7320\n\t\t\tthis.trigger('unselect', null, ev);                                                                                 // 7321\n\t\t}                                                                                                                    // 7322\n\t},                                                                                                                    // 7323\n                                                                                                                       // 7324\n                                                                                                                       // 7325\n\t// Unrenders a visual indication of selection                                                                         // 7326\n\tdestroySelection: function() {                                                                                        // 7327\n\t\t// subclasses should implement                                                                                       // 7328\n\t},                                                                                                                    // 7329\n                                                                                                                       // 7330\n                                                                                                                       // 7331\n\t// Handler for unselecting when the user clicks something and the 'unselectAuto' setting is on                        // 7332\n\tdocumentMousedown: function(ev) {                                                                                     // 7333\n\t\tvar ignore;                                                                                                          // 7334\n                                                                                                                       // 7335\n\t\t// is there a selection, and has the user made a proper left click?                                                  // 7336\n\t\tif (this.isSelected && this.opt('unselectAuto') && isPrimaryMouseButton(ev)) {                                       // 7337\n                                                                                                                       // 7338\n\t\t\t// only unselect if the clicked element is not identical to or inside of an 'unselectCancel' element                // 7339\n\t\t\tignore = this.opt('unselectCancel');                                                                                // 7340\n\t\t\tif (!ignore || !$(ev.target).closest(ignore).length) {                                                              // 7341\n\t\t\t\tthis.unselect(ev);                                                                                                 // 7342\n\t\t\t}                                                                                                                   // 7343\n\t\t}                                                                                                                    // 7344\n\t},                                                                                                                    // 7345\n                                                                                                                       // 7346\n                                                                                                                       // 7347\n\t/* Date Utils                                                                                                         // 7348\n\t------------------------------------------------------------------------------------------------------------------*/  // 7349\n                                                                                                                       // 7350\n                                                                                                                       // 7351\n\t// Initializes internal variables related to calculating hidden days-of-week                                          // 7352\n\tinitHiddenDays: function() {                                                                                          // 7353\n\t\tvar hiddenDays = this.opt('hiddenDays') || []; // array of day-of-week indices that are hidden                       // 7354\n\t\tvar isHiddenDayHash = []; // is the day-of-week hidden? (hash with day-of-week-index -> bool)                        // 7355\n\t\tvar dayCnt = 0;                                                                                                      // 7356\n\t\tvar i;                                                                                                               // 7357\n                                                                                                                       // 7358\n\t\tif (this.opt('weekends') === false) {                                                                                // 7359\n\t\t\thiddenDays.push(0, 6); // 0=sunday, 6=saturday                                                                      // 7360\n\t\t}                                                                                                                    // 7361\n                                                                                                                       // 7362\n\t\tfor (i = 0; i < 7; i++) {                                                                                            // 7363\n\t\t\tif (                                                                                                                // 7364\n\t\t\t\t!(isHiddenDayHash[i] = $.inArray(i, hiddenDays) !== -1)                                                            // 7365\n\t\t\t) {                                                                                                                 // 7366\n\t\t\t\tdayCnt++;                                                                                                          // 7367\n\t\t\t}                                                                                                                   // 7368\n\t\t}                                                                                                                    // 7369\n                                                                                                                       // 7370\n\t\tif (!dayCnt) {                                                                                                       // 7371\n\t\t\tthrow 'invalid hiddenDays'; // all days were hidden? bad.                                                           // 7372\n\t\t}                                                                                                                    // 7373\n                                                                                                                       // 7374\n\t\tthis.isHiddenDayHash = isHiddenDayHash;                                                                              // 7375\n\t},                                                                                                                    // 7376\n                                                                                                                       // 7377\n                                                                                                                       // 7378\n\t// Is the current day hidden?                                                                                         // 7379\n\t// `day` is a day-of-week index (0-6), or a Moment                                                                    // 7380\n\tisHiddenDay: function(day) {                                                                                          // 7381\n\t\tif (moment.isMoment(day)) {                                                                                          // 7382\n\t\t\tday = day.day();                                                                                                    // 7383\n\t\t}                                                                                                                    // 7384\n\t\treturn this.isHiddenDayHash[day];                                                                                    // 7385\n\t},                                                                                                                    // 7386\n                                                                                                                       // 7387\n                                                                                                                       // 7388\n\t// Incrementing the current day until it is no longer a hidden day, returning a copy.                                 // 7389\n\t// If the initial value of `date` is not a hidden day, don't do anything.                                             // 7390\n\t// Pass `isExclusive` as `true` if you are dealing with an end date.                                                  // 7391\n\t// `inc` defaults to `1` (increment one day forward each time)                                                        // 7392\n\tskipHiddenDays: function(date, inc, isExclusive) {                                                                    // 7393\n\t\tvar out = date.clone();                                                                                              // 7394\n\t\tinc = inc || 1;                                                                                                      // 7395\n\t\twhile (                                                                                                              // 7396\n\t\t\tthis.isHiddenDayHash[(out.day() + (isExclusive ? inc : 0) + 7) % 7]                                                 // 7397\n\t\t) {                                                                                                                  // 7398\n\t\t\tout.add(inc, 'days');                                                                                               // 7399\n\t\t}                                                                                                                    // 7400\n\t\treturn out;                                                                                                          // 7401\n\t},                                                                                                                    // 7402\n                                                                                                                       // 7403\n                                                                                                                       // 7404\n\t// Returns the date range of the full days the given range visually appears to occupy.                                // 7405\n\t// Returns a new range object.                                                                                        // 7406\n\tcomputeDayRange: function(range) {                                                                                    // 7407\n\t\tvar startDay = range.start.clone().stripTime(); // the beginning of the day the range starts                         // 7408\n\t\tvar end = range.end;                                                                                                 // 7409\n\t\tvar endDay = null;                                                                                                   // 7410\n\t\tvar endTimeMS;                                                                                                       // 7411\n                                                                                                                       // 7412\n\t\tif (end) {                                                                                                           // 7413\n\t\t\tendDay = end.clone().stripTime(); // the beginning of the day the range exclusively ends                            // 7414\n\t\t\tendTimeMS = +end.time(); // # of milliseconds into `endDay`                                                         // 7415\n                                                                                                                       // 7416\n\t\t\t// If the end time is actually inclusively part of the next day and is equal to or                                  // 7417\n\t\t\t// beyond the next day threshold, adjust the end to be the exclusive end of `endDay`.                               // 7418\n\t\t\t// Otherwise, leaving it as inclusive will cause it to exclude `endDay`.                                            // 7419\n\t\t\tif (endTimeMS && endTimeMS >= this.nextDayThreshold) {                                                              // 7420\n\t\t\t\tendDay.add(1, 'days');                                                                                             // 7421\n\t\t\t}                                                                                                                   // 7422\n\t\t}                                                                                                                    // 7423\n                                                                                                                       // 7424\n\t\t// If no end was specified, or if it is within `startDay` but not past nextDayThreshold,                             // 7425\n\t\t// assign the default duration of one day.                                                                           // 7426\n\t\tif (!end || endDay <= startDay) {                                                                                    // 7427\n\t\t\tendDay = startDay.clone().add(1, 'days');                                                                           // 7428\n\t\t}                                                                                                                    // 7429\n                                                                                                                       // 7430\n\t\treturn { start: startDay, end: endDay };                                                                             // 7431\n\t},                                                                                                                    // 7432\n                                                                                                                       // 7433\n                                                                                                                       // 7434\n\t// Does the given event visually appear to occupy more than one day?                                                  // 7435\n\tisMultiDayEvent: function(event) {                                                                                    // 7436\n\t\tvar range = this.computeDayRange(event); // event is range-ish                                                       // 7437\n                                                                                                                       // 7438\n\t\treturn range.end.diff(range.start, 'days') > 1;                                                                      // 7439\n\t}                                                                                                                     // 7440\n                                                                                                                       // 7441\n});                                                                                                                    // 7442\n                                                                                                                       // 7443\n;;                                                                                                                     // 7444\n                                                                                                                       // 7445\nvar Calendar = fc.Calendar = fc.CalendarBase = Class.extend({                                                          // 7446\n                                                                                                                       // 7447\n\tdirDefaults: null, // option defaults related to LTR or RTL                                                           // 7448\n\tlangDefaults: null, // option defaults related to current locale                                                      // 7449\n\toverrides: null, // option overrides given to the fullCalendar constructor                                            // 7450\n\toptions: null, // all defaults combined with overrides                                                                // 7451\n\tviewSpecCache: null, // cache of view definitions                                                                     // 7452\n\tview: null, // current View object                                                                                    // 7453\n\theader: null,                                                                                                         // 7454\n                                                                                                                       // 7455\n                                                                                                                       // 7456\n\t// a lot of this class' OOP logic is scoped within this constructor function,                                         // 7457\n\t// but in the future, write individual methods on the prototype.                                                      // 7458\n\tconstructor: Calendar_constructor,                                                                                    // 7459\n                                                                                                                       // 7460\n                                                                                                                       // 7461\n\t// Initializes `this.options` and other important options-related objects                                             // 7462\n\tinitOptions: function(overrides) {                                                                                    // 7463\n\t\tvar lang, langDefaults;                                                                                              // 7464\n\t\tvar isRTL, dirDefaults;                                                                                              // 7465\n                                                                                                                       // 7466\n\t\t// converts legacy options into non-legacy ones.                                                                     // 7467\n\t\t// in the future, when this is removed, don't use `overrides` reference. make a copy.                                // 7468\n\t\toverrides = massageOverrides(overrides);                                                                             // 7469\n                                                                                                                       // 7470\n\t\tlang = overrides.lang;                                                                                               // 7471\n\t\tlangDefaults = langOptionHash[lang];                                                                                 // 7472\n\t\tif (!langDefaults) {                                                                                                 // 7473\n\t\t\tlang = Calendar.defaults.lang;                                                                                      // 7474\n\t\t\tlangDefaults = langOptionHash[lang] || {};                                                                          // 7475\n\t\t}                                                                                                                    // 7476\n                                                                                                                       // 7477\n\t\tisRTL = firstDefined(                                                                                                // 7478\n\t\t\toverrides.isRTL,                                                                                                    // 7479\n\t\t\tlangDefaults.isRTL,                                                                                                 // 7480\n\t\t\tCalendar.defaults.isRTL                                                                                             // 7481\n\t\t);                                                                                                                   // 7482\n\t\tdirDefaults = isRTL ? Calendar.rtlDefaults : {};                                                                     // 7483\n                                                                                                                       // 7484\n\t\tthis.dirDefaults = dirDefaults;                                                                                      // 7485\n\t\tthis.langDefaults = langDefaults;                                                                                    // 7486\n\t\tthis.overrides = overrides;                                                                                          // 7487\n\t\tthis.options = mergeOptions( // merge defaults and overrides. lowest to highest precedence                           // 7488\n\t\t\tCalendar.defaults, // global defaults                                                                               // 7489\n\t\t\tdirDefaults,                                                                                                        // 7490\n\t\t\tlangDefaults,                                                                                                       // 7491\n\t\t\toverrides                                                                                                           // 7492\n\t\t);                                                                                                                   // 7493\n\t\tpopulateInstanceComputableOptions(this.options);                                                                     // 7494\n                                                                                                                       // 7495\n\t\tthis.viewSpecCache = {}; // somewhat unrelated                                                                       // 7496\n\t},                                                                                                                    // 7497\n                                                                                                                       // 7498\n                                                                                                                       // 7499\n\t// Gets information about how to create a view. Will use a cache.                                                     // 7500\n\tgetViewSpec: function(viewType) {                                                                                     // 7501\n\t\tvar cache = this.viewSpecCache;                                                                                      // 7502\n                                                                                                                       // 7503\n\t\treturn cache[viewType] || (cache[viewType] = this.buildViewSpec(viewType));                                          // 7504\n\t},                                                                                                                    // 7505\n                                                                                                                       // 7506\n                                                                                                                       // 7507\n\t// Given a duration singular unit, like \"week\" or \"day\", finds a matching view spec.                                  // 7508\n\t// Preference is given to views that have corresponding buttons.                                                      // 7509\n\tgetUnitViewSpec: function(unit) {                                                                                     // 7510\n\t\tvar viewTypes;                                                                                                       // 7511\n\t\tvar i;                                                                                                               // 7512\n\t\tvar spec;                                                                                                            // 7513\n                                                                                                                       // 7514\n\t\tif ($.inArray(unit, intervalUnits) != -1) {                                                                          // 7515\n                                                                                                                       // 7516\n\t\t\t// put views that have buttons first. there will be duplicates, but oh well                                         // 7517\n\t\t\tviewTypes = this.header.getViewsWithButtons();                                                                      // 7518\n\t\t\t$.each(fc.views, function(viewType) { // all views                                                                  // 7519\n\t\t\t\tviewTypes.push(viewType);                                                                                          // 7520\n\t\t\t});                                                                                                                 // 7521\n                                                                                                                       // 7522\n\t\t\tfor (i = 0; i < viewTypes.length; i++) {                                                                            // 7523\n\t\t\t\tspec = this.getViewSpec(viewTypes[i]);                                                                             // 7524\n\t\t\t\tif (spec) {                                                                                                        // 7525\n\t\t\t\t\tif (spec.singleUnit == unit) {                                                                                    // 7526\n\t\t\t\t\t\treturn spec;                                                                                                     // 7527\n\t\t\t\t\t}                                                                                                                 // 7528\n\t\t\t\t}                                                                                                                  // 7529\n\t\t\t}                                                                                                                   // 7530\n\t\t}                                                                                                                    // 7531\n\t},                                                                                                                    // 7532\n                                                                                                                       // 7533\n                                                                                                                       // 7534\n\t// Builds an object with information on how to create a given view                                                    // 7535\n\tbuildViewSpec: function(requestedViewType) {                                                                          // 7536\n\t\tvar viewOverrides = this.overrides.views || {};                                                                      // 7537\n\t\tvar defaultsChain = []; // for the view. lowest to highest priority                                                  // 7538\n\t\tvar overridesChain = []; // for the view. lowest to highest priority                                                 // 7539\n\t\tvar viewType = requestedViewType;                                                                                    // 7540\n\t\tvar viewClass;                                                                                                       // 7541\n\t\tvar defaults; // for the view                                                                                        // 7542\n\t\tvar overrides; // for the view                                                                                       // 7543\n\t\tvar duration;                                                                                                        // 7544\n\t\tvar unit;                                                                                                            // 7545\n\t\tvar spec;                                                                                                            // 7546\n                                                                                                                       // 7547\n\t\t// iterate from the specific view definition to a more general one until we hit an actual View class                 // 7548\n\t\twhile (viewType && !viewClass) {                                                                                     // 7549\n\t\t\tdefaults = fcViews[viewType] || {};                                                                                 // 7550\n\t\t\toverrides = viewOverrides[viewType] || {};                                                                          // 7551\n\t\t\tduration = duration || overrides.duration || defaults.duration;                                                     // 7552\n\t\t\tviewType = overrides.type || defaults.type; // for next iteration                                                   // 7553\n                                                                                                                       // 7554\n\t\t\tif (typeof defaults === 'function') { // a class                                                                    // 7555\n\t\t\t\tviewClass = defaults;                                                                                              // 7556\n\t\t\t\tdefaultsChain.unshift(viewClass.defaults || {});                                                                   // 7557\n\t\t\t}                                                                                                                   // 7558\n\t\t\telse { // an options object                                                                                         // 7559\n\t\t\t\tdefaultsChain.unshift(defaults);                                                                                   // 7560\n\t\t\t}                                                                                                                   // 7561\n\t\t\toverridesChain.unshift(overrides);                                                                                  // 7562\n\t\t}                                                                                                                    // 7563\n                                                                                                                       // 7564\n\t\tif (viewClass) {                                                                                                     // 7565\n\t\t\tspec = { 'class': viewClass, type: requestedViewType };                                                             // 7566\n                                                                                                                       // 7567\n\t\t\tif (duration) {                                                                                                     // 7568\n\t\t\t\tduration = moment.duration(duration);                                                                              // 7569\n\t\t\t\tif (!duration.valueOf()) { // invalid?                                                                             // 7570\n\t\t\t\t\tduration = null;                                                                                                  // 7571\n\t\t\t\t}                                                                                                                  // 7572\n\t\t\t}                                                                                                                   // 7573\n\t\t\tif (duration) {                                                                                                     // 7574\n\t\t\t\tspec.duration = duration;                                                                                          // 7575\n\t\t\t\tunit = computeIntervalUnit(duration);                                                                              // 7576\n                                                                                                                       // 7577\n\t\t\t\t// view is a single-unit duration, like \"week\" or \"day\"                                                            // 7578\n\t\t\t\t// incorporate options for this. lowest priority                                                                   // 7579\n\t\t\t\tif (duration.as(unit) === 1) {                                                                                     // 7580\n\t\t\t\t\tspec.singleUnit = unit;                                                                                           // 7581\n\t\t\t\t\toverridesChain.unshift(viewOverrides[unit] || {});                                                                // 7582\n\t\t\t\t}                                                                                                                  // 7583\n\t\t\t}                                                                                                                   // 7584\n                                                                                                                       // 7585\n\t\t\t// collapse into single objects                                                                                     // 7586\n\t\t\tspec.defaults = mergeOptions.apply(null, defaultsChain);                                                            // 7587\n\t\t\tspec.overrides = mergeOptions.apply(null, overridesChain);                                                          // 7588\n                                                                                                                       // 7589\n\t\t\tthis.buildViewSpecOptions(spec);                                                                                    // 7590\n\t\t\tthis.buildViewSpecButtonText(spec, requestedViewType);                                                              // 7591\n                                                                                                                       // 7592\n\t\t\treturn spec;                                                                                                        // 7593\n\t\t}                                                                                                                    // 7594\n\t},                                                                                                                    // 7595\n                                                                                                                       // 7596\n                                                                                                                       // 7597\n\t// Builds and assigns a view spec's options object from its already-assigned defaults and overrides                   // 7598\n\tbuildViewSpecOptions: function(spec) {                                                                                // 7599\n\t\tspec.options = mergeOptions( // lowest to highest priority                                                           // 7600\n\t\t\tCalendar.defaults, // global defaults                                                                               // 7601\n\t\t\tspec.defaults, // view's defaults (from ViewSubclass.defaults)                                                      // 7602\n\t\t\tthis.dirDefaults,                                                                                                   // 7603\n\t\t\tthis.langDefaults, // locale and dir take precedence over view's defaults!                                          // 7604\n\t\t\tthis.overrides, // calendar's overrides (options given to constructor)                                              // 7605\n\t\t\tspec.overrides // view's overrides (view-specific options)                                                          // 7606\n\t\t);                                                                                                                   // 7607\n\t\tpopulateInstanceComputableOptions(spec.options);                                                                     // 7608\n\t},                                                                                                                    // 7609\n                                                                                                                       // 7610\n                                                                                                                       // 7611\n\t// Computes and assigns a view spec's buttonText-related options                                                      // 7612\n\tbuildViewSpecButtonText: function(spec, requestedViewType) {                                                          // 7613\n                                                                                                                       // 7614\n\t\t// given an options object with a possible `buttonText` hash, lookup the buttonText for the                          // 7615\n\t\t// requested view, falling back to a generic unit entry like \"week\" or \"day\"                                         // 7616\n\t\tfunction queryButtonText(options) {                                                                                  // 7617\n\t\t\tvar buttonText = options.buttonText || {};                                                                          // 7618\n\t\t\treturn buttonText[requestedViewType] ||                                                                             // 7619\n\t\t\t\t(spec.singleUnit ? buttonText[spec.singleUnit] : null);                                                            // 7620\n\t\t}                                                                                                                    // 7621\n                                                                                                                       // 7622\n\t\t// highest to lowest priority                                                                                        // 7623\n\t\tspec.buttonTextOverride =                                                                                            // 7624\n\t\t\tqueryButtonText(this.overrides) || // constructor-specified buttonText lookup hash takes precedence                 // 7625\n\t\t\tspec.overrides.buttonText; // `buttonText` for view-specific options is a string                                    // 7626\n                                                                                                                       // 7627\n\t\t// highest to lowest priority. mirrors buildViewSpecOptions                                                          // 7628\n\t\tspec.buttonTextDefault =                                                                                             // 7629\n\t\t\tqueryButtonText(this.langDefaults) ||                                                                               // 7630\n\t\t\tqueryButtonText(this.dirDefaults) ||                                                                                // 7631\n\t\t\tspec.defaults.buttonText || // a single string. from ViewSubclass.defaults                                          // 7632\n\t\t\tqueryButtonText(Calendar.defaults) ||                                                                               // 7633\n\t\t\t(spec.duration ? this.humanizeDuration(spec.duration) : null) || // like \"3 days\"                                   // 7634\n\t\t\trequestedViewType; // fall back to given view name                                                                  // 7635\n\t},                                                                                                                    // 7636\n                                                                                                                       // 7637\n                                                                                                                       // 7638\n\t// Given a view name for a custom view or a standard view, creates a ready-to-go View object                          // 7639\n\tinstantiateView: function(viewType) {                                                                                 // 7640\n\t\tvar spec = this.getViewSpec(viewType);                                                                               // 7641\n                                                                                                                       // 7642\n\t\treturn new spec['class'](this, viewType, spec.options, spec.duration);                                               // 7643\n\t},                                                                                                                    // 7644\n                                                                                                                       // 7645\n                                                                                                                       // 7646\n\t// Returns a boolean about whether the view is okay to instantiate at some point                                      // 7647\n\tisValidViewType: function(viewType) {                                                                                 // 7648\n\t\treturn Boolean(this.getViewSpec(viewType));                                                                          // 7649\n\t}                                                                                                                     // 7650\n                                                                                                                       // 7651\n});                                                                                                                    // 7652\n                                                                                                                       // 7653\n                                                                                                                       // 7654\nfunction Calendar_constructor(element, overrides) {                                                                    // 7655\n\tvar t = this;                                                                                                         // 7656\n                                                                                                                       // 7657\n                                                                                                                       // 7658\n\tt.initOptions(overrides || {});                                                                                       // 7659\n\tvar options = this.options;                                                                                           // 7660\n                                                                                                                       // 7661\n\t                                                                                                                      // 7662\n\t// Exports                                                                                                            // 7663\n\t// -----------------------------------------------------------------------------------                                // 7664\n                                                                                                                       // 7665\n\tt.render = render;                                                                                                    // 7666\n\tt.destroy = destroy;                                                                                                  // 7667\n\tt.refetchEvents = refetchEvents;                                                                                      // 7668\n\tt.reportEvents = reportEvents;                                                                                        // 7669\n\tt.reportEventChange = reportEventChange;                                                                              // 7670\n\tt.rerenderEvents = renderEvents; // `renderEvents` serves as a rerender. an API method                                // 7671\n\tt.changeView = renderView; // `renderView` will switch to another view                                                // 7672\n\tt.select = select;                                                                                                    // 7673\n\tt.unselect = unselect;                                                                                                // 7674\n\tt.prev = prev;                                                                                                        // 7675\n\tt.next = next;                                                                                                        // 7676\n\tt.prevYear = prevYear;                                                                                                // 7677\n\tt.nextYear = nextYear;                                                                                                // 7678\n\tt.today = today;                                                                                                      // 7679\n\tt.gotoDate = gotoDate;                                                                                                // 7680\n\tt.incrementDate = incrementDate;                                                                                      // 7681\n\tt.zoomTo = zoomTo;                                                                                                    // 7682\n\tt.getDate = getDate;                                                                                                  // 7683\n\tt.getCalendar = getCalendar;                                                                                          // 7684\n\tt.getView = getView;                                                                                                  // 7685\n\tt.option = option;                                                                                                    // 7686\n\tt.trigger = trigger;                                                                                                  // 7687\n                                                                                                                       // 7688\n                                                                                                                       // 7689\n                                                                                                                       // 7690\n\t// Language-data Internals                                                                                            // 7691\n\t// -----------------------------------------------------------------------------------                                // 7692\n\t// Apply overrides to the current language's data                                                                     // 7693\n                                                                                                                       // 7694\n                                                                                                                       // 7695\n\tvar localeData = createObject( // make a cheap copy                                                                   // 7696\n\t\tgetMomentLocaleData(options.lang) // will fall back to en                                                            // 7697\n\t);                                                                                                                    // 7698\n                                                                                                                       // 7699\n\tif (options.monthNames) {                                                                                             // 7700\n\t\tlocaleData._months = options.monthNames;                                                                             // 7701\n\t}                                                                                                                     // 7702\n\tif (options.monthNamesShort) {                                                                                        // 7703\n\t\tlocaleData._monthsShort = options.monthNamesShort;                                                                   // 7704\n\t}                                                                                                                     // 7705\n\tif (options.dayNames) {                                                                                               // 7706\n\t\tlocaleData._weekdays = options.dayNames;                                                                             // 7707\n\t}                                                                                                                     // 7708\n\tif (options.dayNamesShort) {                                                                                          // 7709\n\t\tlocaleData._weekdaysShort = options.dayNamesShort;                                                                   // 7710\n\t}                                                                                                                     // 7711\n\tif (options.firstDay != null) {                                                                                       // 7712\n\t\tvar _week = createObject(localeData._week); // _week: { dow: # }                                                     // 7713\n\t\t_week.dow = options.firstDay;                                                                                        // 7714\n\t\tlocaleData._week = _week;                                                                                            // 7715\n\t}                                                                                                                     // 7716\n                                                                                                                       // 7717\n\t// assign a normalized value, to be used by our .week() moment extension                                              // 7718\n\tlocaleData._fullCalendar_weekCalc = (function(weekCalc) {                                                             // 7719\n\t\tif (typeof weekCalc === 'function') {                                                                                // 7720\n\t\t\treturn weekCalc;                                                                                                    // 7721\n\t\t}                                                                                                                    // 7722\n\t\telse if (weekCalc === 'local') {                                                                                     // 7723\n\t\t\treturn weekCalc;                                                                                                    // 7724\n\t\t}                                                                                                                    // 7725\n\t\telse if (weekCalc === 'iso' || weekCalc === 'ISO') {                                                                 // 7726\n\t\t\treturn 'ISO';                                                                                                       // 7727\n\t\t}                                                                                                                    // 7728\n\t})(options.weekNumberCalculation);                                                                                    // 7729\n                                                                                                                       // 7730\n                                                                                                                       // 7731\n                                                                                                                       // 7732\n\t// Calendar-specific Date Utilities                                                                                   // 7733\n\t// -----------------------------------------------------------------------------------                                // 7734\n                                                                                                                       // 7735\n                                                                                                                       // 7736\n\tt.defaultAllDayEventDuration = moment.duration(options.defaultAllDayEventDuration);                                   // 7737\n\tt.defaultTimedEventDuration = moment.duration(options.defaultTimedEventDuration);                                     // 7738\n                                                                                                                       // 7739\n                                                                                                                       // 7740\n\t// Builds a moment using the settings of the current calendar: timezone and language.                                 // 7741\n\t// Accepts anything the vanilla moment() constructor accepts.                                                         // 7742\n\tt.moment = function() {                                                                                               // 7743\n\t\tvar mom;                                                                                                             // 7744\n                                                                                                                       // 7745\n\t\tif (options.timezone === 'local') {                                                                                  // 7746\n\t\t\tmom = fc.moment.apply(null, arguments);                                                                             // 7747\n                                                                                                                       // 7748\n\t\t\t// Force the moment to be local, because fc.moment doesn't guarantee it.                                            // 7749\n\t\t\tif (mom.hasTime()) { // don't give ambiguously-timed moments a local zone                                           // 7750\n\t\t\t\tmom.local();                                                                                                       // 7751\n\t\t\t}                                                                                                                   // 7752\n\t\t}                                                                                                                    // 7753\n\t\telse if (options.timezone === 'UTC') {                                                                               // 7754\n\t\t\tmom = fc.moment.utc.apply(null, arguments); // process as UTC                                                       // 7755\n\t\t}                                                                                                                    // 7756\n\t\telse {                                                                                                               // 7757\n\t\t\tmom = fc.moment.parseZone.apply(null, arguments); // let the input decide the zone                                  // 7758\n\t\t}                                                                                                                    // 7759\n                                                                                                                       // 7760\n\t\tif ('_locale' in mom) { // moment 2.8 and above                                                                      // 7761\n\t\t\tmom._locale = localeData;                                                                                           // 7762\n\t\t}                                                                                                                    // 7763\n\t\telse { // pre-moment-2.8                                                                                             // 7764\n\t\t\tmom._lang = localeData;                                                                                             // 7765\n\t\t}                                                                                                                    // 7766\n                                                                                                                       // 7767\n\t\treturn mom;                                                                                                          // 7768\n\t};                                                                                                                    // 7769\n                                                                                                                       // 7770\n                                                                                                                       // 7771\n\t// Returns a boolean about whether or not the calendar knows how to calculate                                         // 7772\n\t// the timezone offset of arbitrary dates in the current timezone.                                                    // 7773\n\tt.getIsAmbigTimezone = function() {                                                                                   // 7774\n\t\treturn options.timezone !== 'local' && options.timezone !== 'UTC';                                                   // 7775\n\t};                                                                                                                    // 7776\n                                                                                                                       // 7777\n                                                                                                                       // 7778\n\t// Returns a copy of the given date in the current timezone of it is ambiguously zoned.                               // 7779\n\t// This will also give the date an unambiguous time.                                                                  // 7780\n\tt.rezoneDate = function(date) {                                                                                       // 7781\n\t\treturn t.moment(date.toArray());                                                                                     // 7782\n\t};                                                                                                                    // 7783\n                                                                                                                       // 7784\n                                                                                                                       // 7785\n\t// Returns a moment for the current date, as defined by the client's computer,                                        // 7786\n\t// or overridden by the `now` option.                                                                                 // 7787\n\tt.getNow = function() {                                                                                               // 7788\n\t\tvar now = options.now;                                                                                               // 7789\n\t\tif (typeof now === 'function') {                                                                                     // 7790\n\t\t\tnow = now();                                                                                                        // 7791\n\t\t}                                                                                                                    // 7792\n\t\treturn t.moment(now);                                                                                                // 7793\n\t};                                                                                                                    // 7794\n                                                                                                                       // 7795\n                                                                                                                       // 7796\n\t// Get an event's normalized end date. If not present, calculate it from the defaults.                                // 7797\n\tt.getEventEnd = function(event) {                                                                                     // 7798\n\t\tif (event.end) {                                                                                                     // 7799\n\t\t\treturn event.end.clone();                                                                                           // 7800\n\t\t}                                                                                                                    // 7801\n\t\telse {                                                                                                               // 7802\n\t\t\treturn t.getDefaultEventEnd(event.allDay, event.start);                                                             // 7803\n\t\t}                                                                                                                    // 7804\n\t};                                                                                                                    // 7805\n                                                                                                                       // 7806\n                                                                                                                       // 7807\n\t// Given an event's allDay status and start date, return swhat its fallback end date should be.                       // 7808\n\tt.getDefaultEventEnd = function(allDay, start) { // TODO: rename to computeDefaultEventEnd                            // 7809\n\t\tvar end = start.clone();                                                                                             // 7810\n                                                                                                                       // 7811\n\t\tif (allDay) {                                                                                                        // 7812\n\t\t\tend.stripTime().add(t.defaultAllDayEventDuration);                                                                  // 7813\n\t\t}                                                                                                                    // 7814\n\t\telse {                                                                                                               // 7815\n\t\t\tend.add(t.defaultTimedEventDuration);                                                                               // 7816\n\t\t}                                                                                                                    // 7817\n                                                                                                                       // 7818\n\t\tif (t.getIsAmbigTimezone()) {                                                                                        // 7819\n\t\t\tend.stripZone(); // we don't know what the tzo should be                                                            // 7820\n\t\t}                                                                                                                    // 7821\n                                                                                                                       // 7822\n\t\treturn end;                                                                                                          // 7823\n\t};                                                                                                                    // 7824\n                                                                                                                       // 7825\n                                                                                                                       // 7826\n\t// Produces a human-readable string for the given duration.                                                           // 7827\n\t// Side-effect: changes the locale of the given duration.                                                             // 7828\n\tt.humanizeDuration = function(duration) {                                                                             // 7829\n\t\treturn (duration.locale || duration.lang).call(duration, options.lang) // works moment-pre-2.8                       // 7830\n\t\t\t.humanize();                                                                                                        // 7831\n\t};                                                                                                                    // 7832\n                                                                                                                       // 7833\n                                                                                                                       // 7834\n\t                                                                                                                      // 7835\n\t// Imports                                                                                                            // 7836\n\t// -----------------------------------------------------------------------------------                                // 7837\n                                                                                                                       // 7838\n                                                                                                                       // 7839\n\tEventManager.call(t, options);                                                                                        // 7840\n\tvar isFetchNeeded = t.isFetchNeeded;                                                                                  // 7841\n\tvar fetchEvents = t.fetchEvents;                                                                                      // 7842\n                                                                                                                       // 7843\n                                                                                                                       // 7844\n                                                                                                                       // 7845\n\t// Locals                                                                                                             // 7846\n\t// -----------------------------------------------------------------------------------                                // 7847\n                                                                                                                       // 7848\n                                                                                                                       // 7849\n\tvar _element = element[0];                                                                                            // 7850\n\tvar header;                                                                                                           // 7851\n\tvar headerElement;                                                                                                    // 7852\n\tvar content;                                                                                                          // 7853\n\tvar tm; // for making theme classes                                                                                   // 7854\n\tvar currentView; // NOTE: keep this in sync with this.view                                                            // 7855\n\tvar viewsByType = {}; // holds all instantiated view instances, current or not                                        // 7856\n\tvar suggestedViewHeight;                                                                                              // 7857\n\tvar windowResizeProxy; // wraps the windowResize function                                                             // 7858\n\tvar ignoreWindowResize = 0;                                                                                           // 7859\n\tvar date;                                                                                                             // 7860\n\tvar events = [];                                                                                                      // 7861\n\t                                                                                                                      // 7862\n\t                                                                                                                      // 7863\n\t                                                                                                                      // 7864\n\t// Main Rendering                                                                                                     // 7865\n\t// -----------------------------------------------------------------------------------                                // 7866\n                                                                                                                       // 7867\n                                                                                                                       // 7868\n\tif (options.defaultDate != null) {                                                                                    // 7869\n\t\tdate = t.moment(options.defaultDate);                                                                                // 7870\n\t}                                                                                                                     // 7871\n\telse {                                                                                                                // 7872\n\t\tdate = t.getNow();                                                                                                   // 7873\n\t}                                                                                                                     // 7874\n\t                                                                                                                      // 7875\n\t                                                                                                                      // 7876\n\tfunction render() {                                                                                                   // 7877\n\t\tif (!content) {                                                                                                      // 7878\n\t\t\tinitialRender();                                                                                                    // 7879\n\t\t}                                                                                                                    // 7880\n\t\telse if (elementVisible()) {                                                                                         // 7881\n\t\t\t// mainly for the public API                                                                                        // 7882\n\t\t\tcalcSize();                                                                                                         // 7883\n\t\t\trenderView();                                                                                                       // 7884\n\t\t}                                                                                                                    // 7885\n\t}                                                                                                                     // 7886\n\t                                                                                                                      // 7887\n\t                                                                                                                      // 7888\n\tfunction initialRender() {                                                                                            // 7889\n\t\ttm = options.theme ? 'ui' : 'fc';                                                                                    // 7890\n\t\telement.addClass('fc');                                                                                              // 7891\n                                                                                                                       // 7892\n\t\tif (options.isRTL) {                                                                                                 // 7893\n\t\t\telement.addClass('fc-rtl');                                                                                         // 7894\n\t\t}                                                                                                                    // 7895\n\t\telse {                                                                                                               // 7896\n\t\t\telement.addClass('fc-ltr');                                                                                         // 7897\n\t\t}                                                                                                                    // 7898\n                                                                                                                       // 7899\n\t\tif (options.theme) {                                                                                                 // 7900\n\t\t\telement.addClass('ui-widget');                                                                                      // 7901\n\t\t}                                                                                                                    // 7902\n\t\telse {                                                                                                               // 7903\n\t\t\telement.addClass('fc-unthemed');                                                                                    // 7904\n\t\t}                                                                                                                    // 7905\n                                                                                                                       // 7906\n\t\tcontent = $(\"<div class='fc-view-container'/>\").prependTo(element);                                                  // 7907\n                                                                                                                       // 7908\n\t\theader = t.header = new Header(t, options);                                                                          // 7909\n\t\theaderElement = header.render();                                                                                     // 7910\n\t\tif (headerElement) {                                                                                                 // 7911\n\t\t\telement.prepend(headerElement);                                                                                     // 7912\n\t\t}                                                                                                                    // 7913\n                                                                                                                       // 7914\n\t\trenderView(options.defaultView);                                                                                     // 7915\n                                                                                                                       // 7916\n\t\tif (options.handleWindowResize) {                                                                                    // 7917\n\t\t\twindowResizeProxy = debounce(windowResize, options.windowResizeDelay); // prevents rapid calls                      // 7918\n\t\t\t$(window).resize(windowResizeProxy);                                                                                // 7919\n\t\t}                                                                                                                    // 7920\n\t}                                                                                                                     // 7921\n\t                                                                                                                      // 7922\n\t                                                                                                                      // 7923\n\tfunction destroy() {                                                                                                  // 7924\n                                                                                                                       // 7925\n\t\tif (currentView) {                                                                                                   // 7926\n\t\t\tcurrentView.removeElement();                                                                                        // 7927\n                                                                                                                       // 7928\n\t\t\t// NOTE: don't null-out currentView/t.view in case API methods are called after destroy.                            // 7929\n\t\t\t// It is still the \"current\" view, just not rendered.                                                               // 7930\n\t\t}                                                                                                                    // 7931\n                                                                                                                       // 7932\n\t\theader.destroy();                                                                                                    // 7933\n\t\tcontent.remove();                                                                                                    // 7934\n\t\telement.removeClass('fc fc-ltr fc-rtl fc-unthemed ui-widget');                                                       // 7935\n                                                                                                                       // 7936\n\t\tif (windowResizeProxy) {                                                                                             // 7937\n\t\t\t$(window).unbind('resize', windowResizeProxy);                                                                      // 7938\n\t\t}                                                                                                                    // 7939\n\t}                                                                                                                     // 7940\n\t                                                                                                                      // 7941\n\t                                                                                                                      // 7942\n\tfunction elementVisible() {                                                                                           // 7943\n\t\treturn element.is(':visible');                                                                                       // 7944\n\t}                                                                                                                     // 7945\n\t                                                                                                                      // 7946\n\t                                                                                                                      // 7947\n                                                                                                                       // 7948\n\t// View Rendering                                                                                                     // 7949\n\t// -----------------------------------------------------------------------------------                                // 7950\n                                                                                                                       // 7951\n                                                                                                                       // 7952\n\t// Renders a view because of a date change, view-type change, or for the first time.                                  // 7953\n\t// If not given a viewType, keep the current view but render different dates.                                         // 7954\n\tfunction renderView(viewType) {                                                                                       // 7955\n\t\tignoreWindowResize++;                                                                                                // 7956\n                                                                                                                       // 7957\n\t\t// if viewType is changing, destroy the old view                                                                     // 7958\n\t\tif (currentView && viewType && currentView.type !== viewType) {                                                      // 7959\n\t\t\theader.deactivateButton(currentView.type);                                                                          // 7960\n\t\t\tfreezeContentHeight(); // prevent a scroll jump when view element is removed                                        // 7961\n\t\t\tcurrentView.removeElement();                                                                                        // 7962\n\t\t\tcurrentView = t.view = null;                                                                                        // 7963\n\t\t}                                                                                                                    // 7964\n                                                                                                                       // 7965\n\t\t// if viewType changed, or the view was never created, create a fresh view                                           // 7966\n\t\tif (!currentView && viewType) {                                                                                      // 7967\n\t\t\tcurrentView = t.view =                                                                                              // 7968\n\t\t\t\tviewsByType[viewType] ||                                                                                           // 7969\n\t\t\t\t(viewsByType[viewType] = t.instantiateView(viewType));                                                             // 7970\n                                                                                                                       // 7971\n\t\t\tcurrentView.setElement(                                                                                             // 7972\n\t\t\t\t$(\"<div class='fc-view fc-\" + viewType + \"-view' />\").appendTo(content)                                            // 7973\n\t\t\t);                                                                                                                  // 7974\n\t\t\theader.activateButton(viewType);                                                                                    // 7975\n\t\t}                                                                                                                    // 7976\n                                                                                                                       // 7977\n\t\tif (currentView) {                                                                                                   // 7978\n                                                                                                                       // 7979\n\t\t\t// in case the view should render a period of time that is completely hidden                                        // 7980\n\t\t\tdate = currentView.massageCurrentDate(date);                                                                        // 7981\n                                                                                                                       // 7982\n\t\t\t// render or rerender the view                                                                                      // 7983\n\t\t\tif (                                                                                                                // 7984\n\t\t\t\t!currentView.isDisplayed ||                                                                                        // 7985\n\t\t\t\t!date.isWithin(currentView.intervalStart, currentView.intervalEnd) // implicit date window change                  // 7986\n\t\t\t) {                                                                                                                 // 7987\n\t\t\t\tif (elementVisible()) {                                                                                            // 7988\n                                                                                                                       // 7989\n\t\t\t\t\tfreezeContentHeight();                                                                                            // 7990\n\t\t\t\t\tcurrentView.display(date);                                                                                        // 7991\n\t\t\t\t\tunfreezeContentHeight();                                                                                          // 7992\n                                                                                                                       // 7993\n\t\t\t\t\t// need to do this after View::render, so dates are calculated                                                    // 7994\n\t\t\t\t\tupdateHeaderTitle();                                                                                              // 7995\n\t\t\t\t\tupdateTodayButton();                                                                                              // 7996\n                                                                                                                       // 7997\n\t\t\t\t\tgetAndRenderEvents();                                                                                             // 7998\n\t\t\t\t}                                                                                                                  // 7999\n\t\t\t}                                                                                                                   // 8000\n\t\t}                                                                                                                    // 8001\n                                                                                                                       // 8002\n\t\tunfreezeContentHeight(); // undo any lone freezeContentHeight calls                                                  // 8003\n\t\tignoreWindowResize--;                                                                                                // 8004\n\t}                                                                                                                     // 8005\n                                                                                                                       // 8006\n\t                                                                                                                      // 8007\n                                                                                                                       // 8008\n\t// Resizing                                                                                                           // 8009\n\t// -----------------------------------------------------------------------------------                                // 8010\n                                                                                                                       // 8011\n                                                                                                                       // 8012\n\tt.getSuggestedViewHeight = function() {                                                                               // 8013\n\t\tif (suggestedViewHeight === undefined) {                                                                             // 8014\n\t\t\tcalcSize();                                                                                                         // 8015\n\t\t}                                                                                                                    // 8016\n\t\treturn suggestedViewHeight;                                                                                          // 8017\n\t};                                                                                                                    // 8018\n                                                                                                                       // 8019\n                                                                                                                       // 8020\n\tt.isHeightAuto = function() {                                                                                         // 8021\n\t\treturn options.contentHeight === 'auto' || options.height === 'auto';                                                // 8022\n\t};                                                                                                                    // 8023\n\t                                                                                                                      // 8024\n\t                                                                                                                      // 8025\n\tfunction updateSize(shouldRecalc) {                                                                                   // 8026\n\t\tif (elementVisible()) {                                                                                              // 8027\n                                                                                                                       // 8028\n\t\t\tif (shouldRecalc) {                                                                                                 // 8029\n\t\t\t\t_calcSize();                                                                                                       // 8030\n\t\t\t}                                                                                                                   // 8031\n                                                                                                                       // 8032\n\t\t\tignoreWindowResize++;                                                                                               // 8033\n\t\t\tcurrentView.updateSize(true); // isResize=true. will poll getSuggestedViewHeight() and isHeightAuto()               // 8034\n\t\t\tignoreWindowResize--;                                                                                               // 8035\n                                                                                                                       // 8036\n\t\t\treturn true; // signal success                                                                                      // 8037\n\t\t}                                                                                                                    // 8038\n\t}                                                                                                                     // 8039\n                                                                                                                       // 8040\n                                                                                                                       // 8041\n\tfunction calcSize() {                                                                                                 // 8042\n\t\tif (elementVisible()) {                                                                                              // 8043\n\t\t\t_calcSize();                                                                                                        // 8044\n\t\t}                                                                                                                    // 8045\n\t}                                                                                                                     // 8046\n\t                                                                                                                      // 8047\n\t                                                                                                                      // 8048\n\tfunction _calcSize() { // assumes elementVisible                                                                      // 8049\n\t\tif (typeof options.contentHeight === 'number') { // exists and not 'auto'                                            // 8050\n\t\t\tsuggestedViewHeight = options.contentHeight;                                                                        // 8051\n\t\t}                                                                                                                    // 8052\n\t\telse if (typeof options.height === 'number') { // exists and not 'auto'                                              // 8053\n\t\t\tsuggestedViewHeight = options.height - (headerElement ? headerElement.outerHeight(true) : 0);                       // 8054\n\t\t}                                                                                                                    // 8055\n\t\telse {                                                                                                               // 8056\n\t\t\tsuggestedViewHeight = Math.round(content.width() / Math.max(options.aspectRatio, .5));                              // 8057\n\t\t}                                                                                                                    // 8058\n\t}                                                                                                                     // 8059\n\t                                                                                                                      // 8060\n\t                                                                                                                      // 8061\n\tfunction windowResize(ev) {                                                                                           // 8062\n\t\tif (                                                                                                                 // 8063\n\t\t\t!ignoreWindowResize &&                                                                                              // 8064\n\t\t\tev.target === window && // so we don't process jqui \"resize\" events that have bubbled up                            // 8065\n\t\t\tcurrentView.start // view has already been rendered                                                                 // 8066\n\t\t) {                                                                                                                  // 8067\n\t\t\tif (updateSize(true)) {                                                                                             // 8068\n\t\t\t\tcurrentView.trigger('windowResize', _element);                                                                     // 8069\n\t\t\t}                                                                                                                   // 8070\n\t\t}                                                                                                                    // 8071\n\t}                                                                                                                     // 8072\n\t                                                                                                                      // 8073\n\t                                                                                                                      // 8074\n\t                                                                                                                      // 8075\n\t/* Event Fetching/Rendering                                                                                           // 8076\n\t-----------------------------------------------------------------------------*/                                       // 8077\n\t// TODO: going forward, most of this stuff should be directly handled by the view                                     // 8078\n                                                                                                                       // 8079\n                                                                                                                       // 8080\n\tfunction refetchEvents() { // can be called as an API method                                                          // 8081\n\t\tdestroyEvents(); // so that events are cleared before user starts waiting for AJAX                                   // 8082\n\t\tfetchAndRenderEvents();                                                                                              // 8083\n\t}                                                                                                                     // 8084\n                                                                                                                       // 8085\n                                                                                                                       // 8086\n\tfunction renderEvents() { // destroys old events if previously rendered                                               // 8087\n\t\tif (elementVisible()) {                                                                                              // 8088\n\t\t\tfreezeContentHeight();                                                                                              // 8089\n\t\t\tcurrentView.displayEvents(events);                                                                                  // 8090\n\t\t\tunfreezeContentHeight();                                                                                            // 8091\n\t\t}                                                                                                                    // 8092\n\t}                                                                                                                     // 8093\n                                                                                                                       // 8094\n                                                                                                                       // 8095\n\tfunction destroyEvents() {                                                                                            // 8096\n\t\tfreezeContentHeight();                                                                                               // 8097\n\t\tcurrentView.clearEvents();                                                                                           // 8098\n\t\tunfreezeContentHeight();                                                                                             // 8099\n\t}                                                                                                                     // 8100\n\t                                                                                                                      // 8101\n                                                                                                                       // 8102\n\tfunction getAndRenderEvents() {                                                                                       // 8103\n\t\tif (!options.lazyFetching || isFetchNeeded(currentView.start, currentView.end)) {                                    // 8104\n\t\t\tfetchAndRenderEvents();                                                                                             // 8105\n\t\t}                                                                                                                    // 8106\n\t\telse {                                                                                                               // 8107\n\t\t\trenderEvents();                                                                                                     // 8108\n\t\t}                                                                                                                    // 8109\n\t}                                                                                                                     // 8110\n                                                                                                                       // 8111\n                                                                                                                       // 8112\n\tfunction fetchAndRenderEvents() {                                                                                     // 8113\n\t\tfetchEvents(currentView.start, currentView.end);                                                                     // 8114\n\t\t\t// ... will call reportEvents                                                                                       // 8115\n\t\t\t// ... which will call renderEvents                                                                                 // 8116\n\t}                                                                                                                     // 8117\n                                                                                                                       // 8118\n\t                                                                                                                      // 8119\n\t// called when event data arrives                                                                                     // 8120\n\tfunction reportEvents(_events) {                                                                                      // 8121\n\t\tevents = _events;                                                                                                    // 8122\n\t\trenderEvents();                                                                                                      // 8123\n\t}                                                                                                                     // 8124\n                                                                                                                       // 8125\n                                                                                                                       // 8126\n\t// called when a single event's data has been changed                                                                 // 8127\n\tfunction reportEventChange() {                                                                                        // 8128\n\t\trenderEvents();                                                                                                      // 8129\n\t}                                                                                                                     // 8130\n                                                                                                                       // 8131\n                                                                                                                       // 8132\n                                                                                                                       // 8133\n\t/* Header Updating                                                                                                    // 8134\n\t-----------------------------------------------------------------------------*/                                       // 8135\n                                                                                                                       // 8136\n                                                                                                                       // 8137\n\tfunction updateHeaderTitle() {                                                                                        // 8138\n\t\theader.updateTitle(currentView.title);                                                                               // 8139\n\t}                                                                                                                     // 8140\n                                                                                                                       // 8141\n                                                                                                                       // 8142\n\tfunction updateTodayButton() {                                                                                        // 8143\n\t\tvar now = t.getNow();                                                                                                // 8144\n\t\tif (now.isWithin(currentView.intervalStart, currentView.intervalEnd)) {                                              // 8145\n\t\t\theader.disableButton('today');                                                                                      // 8146\n\t\t}                                                                                                                    // 8147\n\t\telse {                                                                                                               // 8148\n\t\t\theader.enableButton('today');                                                                                       // 8149\n\t\t}                                                                                                                    // 8150\n\t}                                                                                                                     // 8151\n\t                                                                                                                      // 8152\n                                                                                                                       // 8153\n                                                                                                                       // 8154\n\t/* Selection                                                                                                          // 8155\n\t-----------------------------------------------------------------------------*/                                       // 8156\n\t                                                                                                                      // 8157\n                                                                                                                       // 8158\n\tfunction select(start, end) {                                                                                         // 8159\n                                                                                                                       // 8160\n\t\tstart = t.moment(start);                                                                                             // 8161\n\t\tif (end) {                                                                                                           // 8162\n\t\t\tend = t.moment(end);                                                                                                // 8163\n\t\t}                                                                                                                    // 8164\n\t\telse if (start.hasTime()) {                                                                                          // 8165\n\t\t\tend = start.clone().add(t.defaultTimedEventDuration);                                                               // 8166\n\t\t}                                                                                                                    // 8167\n\t\telse {                                                                                                               // 8168\n\t\t\tend = start.clone().add(t.defaultAllDayEventDuration);                                                              // 8169\n\t\t}                                                                                                                    // 8170\n                                                                                                                       // 8171\n\t\tcurrentView.select({ start: start, end: end }); // accepts a range                                                   // 8172\n\t}                                                                                                                     // 8173\n\t                                                                                                                      // 8174\n                                                                                                                       // 8175\n\tfunction unselect() { // safe to be called before renderView                                                          // 8176\n\t\tif (currentView) {                                                                                                   // 8177\n\t\t\tcurrentView.unselect();                                                                                             // 8178\n\t\t}                                                                                                                    // 8179\n\t}                                                                                                                     // 8180\n\t                                                                                                                      // 8181\n\t                                                                                                                      // 8182\n\t                                                                                                                      // 8183\n\t/* Date                                                                                                               // 8184\n\t-----------------------------------------------------------------------------*/                                       // 8185\n\t                                                                                                                      // 8186\n\t                                                                                                                      // 8187\n\tfunction prev() {                                                                                                     // 8188\n\t\tdate = currentView.computePrevDate(date);                                                                            // 8189\n\t\trenderView();                                                                                                        // 8190\n\t}                                                                                                                     // 8191\n\t                                                                                                                      // 8192\n\t                                                                                                                      // 8193\n\tfunction next() {                                                                                                     // 8194\n\t\tdate = currentView.computeNextDate(date);                                                                            // 8195\n\t\trenderView();                                                                                                        // 8196\n\t}                                                                                                                     // 8197\n\t                                                                                                                      // 8198\n\t                                                                                                                      // 8199\n\tfunction prevYear() {                                                                                                 // 8200\n\t\tdate.add(-1, 'years');                                                                                               // 8201\n\t\trenderView();                                                                                                        // 8202\n\t}                                                                                                                     // 8203\n\t                                                                                                                      // 8204\n\t                                                                                                                      // 8205\n\tfunction nextYear() {                                                                                                 // 8206\n\t\tdate.add(1, 'years');                                                                                                // 8207\n\t\trenderView();                                                                                                        // 8208\n\t}                                                                                                                     // 8209\n\t                                                                                                                      // 8210\n\t                                                                                                                      // 8211\n\tfunction today() {                                                                                                    // 8212\n\t\tdate = t.getNow();                                                                                                   // 8213\n\t\trenderView();                                                                                                        // 8214\n\t}                                                                                                                     // 8215\n\t                                                                                                                      // 8216\n\t                                                                                                                      // 8217\n\tfunction gotoDate(dateInput) {                                                                                        // 8218\n\t\tdate = t.moment(dateInput);                                                                                          // 8219\n\t\trenderView();                                                                                                        // 8220\n\t}                                                                                                                     // 8221\n\t                                                                                                                      // 8222\n\t                                                                                                                      // 8223\n\tfunction incrementDate(delta) {                                                                                       // 8224\n\t\tdate.add(moment.duration(delta));                                                                                    // 8225\n\t\trenderView();                                                                                                        // 8226\n\t}                                                                                                                     // 8227\n                                                                                                                       // 8228\n                                                                                                                       // 8229\n\t// Forces navigation to a view for the given date.                                                                    // 8230\n\t// `viewType` can be a specific view name or a generic one like \"week\" or \"day\".                                      // 8231\n\tfunction zoomTo(newDate, viewType) {                                                                                  // 8232\n\t\tvar spec;                                                                                                            // 8233\n                                                                                                                       // 8234\n\t\tviewType = viewType || 'day'; // day is default zoom                                                                 // 8235\n\t\tspec = t.getViewSpec(viewType) || t.getUnitViewSpec(viewType);                                                       // 8236\n                                                                                                                       // 8237\n\t\tdate = newDate;                                                                                                      // 8238\n\t\trenderView(spec ? spec.type : null);                                                                                 // 8239\n\t}                                                                                                                     // 8240\n\t                                                                                                                      // 8241\n\t                                                                                                                      // 8242\n\tfunction getDate() {                                                                                                  // 8243\n\t\treturn date.clone();                                                                                                 // 8244\n\t}                                                                                                                     // 8245\n                                                                                                                       // 8246\n                                                                                                                       // 8247\n                                                                                                                       // 8248\n\t/* Height \"Freezing\"                                                                                                  // 8249\n\t-----------------------------------------------------------------------------*/                                       // 8250\n\t// TODO: move this into the view                                                                                      // 8251\n                                                                                                                       // 8252\n                                                                                                                       // 8253\n\tfunction freezeContentHeight() {                                                                                      // 8254\n\t\tcontent.css({                                                                                                        // 8255\n\t\t\twidth: '100%',                                                                                                      // 8256\n\t\t\theight: content.height(),                                                                                           // 8257\n\t\t\toverflow: 'hidden'                                                                                                  // 8258\n\t\t});                                                                                                                  // 8259\n\t}                                                                                                                     // 8260\n                                                                                                                       // 8261\n                                                                                                                       // 8262\n\tfunction unfreezeContentHeight() {                                                                                    // 8263\n\t\tcontent.css({                                                                                                        // 8264\n\t\t\twidth: '',                                                                                                          // 8265\n\t\t\theight: '',                                                                                                         // 8266\n\t\t\toverflow: ''                                                                                                        // 8267\n\t\t});                                                                                                                  // 8268\n\t}                                                                                                                     // 8269\n\t                                                                                                                      // 8270\n\t                                                                                                                      // 8271\n\t                                                                                                                      // 8272\n\t/* Misc                                                                                                               // 8273\n\t-----------------------------------------------------------------------------*/                                       // 8274\n\t                                                                                                                      // 8275\n                                                                                                                       // 8276\n\tfunction getCalendar() {                                                                                              // 8277\n\t\treturn t;                                                                                                            // 8278\n\t}                                                                                                                     // 8279\n                                                                                                                       // 8280\n\t                                                                                                                      // 8281\n\tfunction getView() {                                                                                                  // 8282\n\t\treturn currentView;                                                                                                  // 8283\n\t}                                                                                                                     // 8284\n\t                                                                                                                      // 8285\n\t                                                                                                                      // 8286\n\tfunction option(name, value) {                                                                                        // 8287\n\t\tif (value === undefined) {                                                                                           // 8288\n\t\t\treturn options[name];                                                                                               // 8289\n\t\t}                                                                                                                    // 8290\n\t\tif (name == 'height' || name == 'contentHeight' || name == 'aspectRatio') {                                          // 8291\n\t\t\toptions[name] = value;                                                                                              // 8292\n\t\t\tupdateSize(true); // true = allow recalculation of height                                                           // 8293\n\t\t}                                                                                                                    // 8294\n\t}                                                                                                                     // 8295\n\t                                                                                                                      // 8296\n\t                                                                                                                      // 8297\n\tfunction trigger(name, thisObj) {                                                                                     // 8298\n\t\tif (options[name]) {                                                                                                 // 8299\n\t\t\treturn options[name].apply(                                                                                         // 8300\n\t\t\t\tthisObj || _element,                                                                                               // 8301\n\t\t\t\tArray.prototype.slice.call(arguments, 2)                                                                           // 8302\n\t\t\t);                                                                                                                  // 8303\n\t\t}                                                                                                                    // 8304\n\t}                                                                                                                     // 8305\n                                                                                                                       // 8306\n}                                                                                                                      // 8307\n                                                                                                                       // 8308\n;;                                                                                                                     // 8309\n                                                                                                                       // 8310\nCalendar.defaults = {                                                                                                  // 8311\n                                                                                                                       // 8312\n\ttitleRangeSeparator: ' \\u2014 ', // emphasized dash                                                                   // 8313\n\tmonthYearFormat: 'MMMM YYYY', // required for en. other languages rely on datepicker computable option                // 8314\n                                                                                                                       // 8315\n\tdefaultTimedEventDuration: '02:00:00',                                                                                // 8316\n\tdefaultAllDayEventDuration: { days: 1 },                                                                              // 8317\n\tforceEventDuration: false,                                                                                            // 8318\n\tnextDayThreshold: '09:00:00', // 9am                                                                                  // 8319\n                                                                                                                       // 8320\n\t// display                                                                                                            // 8321\n\tdefaultView: 'month',                                                                                                 // 8322\n\taspectRatio: 1.35,                                                                                                    // 8323\n\theader: {                                                                                                             // 8324\n\t\tleft: 'title',                                                                                                       // 8325\n\t\tcenter: '',                                                                                                          // 8326\n\t\tright: 'today prev,next'                                                                                             // 8327\n\t},                                                                                                                    // 8328\n\tweekends: true,                                                                                                       // 8329\n\tweekNumbers: false,                                                                                                   // 8330\n                                                                                                                       // 8331\n\tweekNumberTitle: 'W',                                                                                                 // 8332\n\tweekNumberCalculation: 'local',                                                                                       // 8333\n\t                                                                                                                      // 8334\n\t//editable: false,                                                                                                    // 8335\n\t                                                                                                                      // 8336\n\t// event ajax                                                                                                         // 8337\n\tlazyFetching: true,                                                                                                   // 8338\n\tstartParam: 'start',                                                                                                  // 8339\n\tendParam: 'end',                                                                                                      // 8340\n\ttimezoneParam: 'timezone',                                                                                            // 8341\n                                                                                                                       // 8342\n\ttimezone: false,                                                                                                      // 8343\n                                                                                                                       // 8344\n\t//allDayDefault: undefined,                                                                                           // 8345\n                                                                                                                       // 8346\n\t// locale                                                                                                             // 8347\n\tisRTL: false,                                                                                                         // 8348\n\tbuttonText: {                                                                                                         // 8349\n\t\tprev: \"prev\",                                                                                                        // 8350\n\t\tnext: \"next\",                                                                                                        // 8351\n\t\tprevYear: \"prev year\",                                                                                               // 8352\n\t\tnextYear: \"next year\",                                                                                               // 8353\n\t\tyear: 'year', // TODO: locale files need to specify this                                                             // 8354\n\t\ttoday: 'today',                                                                                                      // 8355\n\t\tmonth: 'month',                                                                                                      // 8356\n\t\tweek: 'week',                                                                                                        // 8357\n\t\tday: 'day'                                                                                                           // 8358\n\t},                                                                                                                    // 8359\n                                                                                                                       // 8360\n\tbuttonIcons: {                                                                                                        // 8361\n\t\tprev: 'left-single-arrow',                                                                                           // 8362\n\t\tnext: 'right-single-arrow',                                                                                          // 8363\n\t\tprevYear: 'left-double-arrow',                                                                                       // 8364\n\t\tnextYear: 'right-double-arrow'                                                                                       // 8365\n\t},                                                                                                                    // 8366\n\t                                                                                                                      // 8367\n\t// jquery-ui theming                                                                                                  // 8368\n\ttheme: false,                                                                                                         // 8369\n\tthemeButtonIcons: {                                                                                                   // 8370\n\t\tprev: 'circle-triangle-w',                                                                                           // 8371\n\t\tnext: 'circle-triangle-e',                                                                                           // 8372\n\t\tprevYear: 'seek-prev',                                                                                               // 8373\n\t\tnextYear: 'seek-next'                                                                                                // 8374\n\t},                                                                                                                    // 8375\n                                                                                                                       // 8376\n\t//eventResizableFromStart: false,                                                                                     // 8377\n\tdragOpacity: .75,                                                                                                     // 8378\n\tdragRevertDuration: 500,                                                                                              // 8379\n\tdragScroll: true,                                                                                                     // 8380\n\t                                                                                                                      // 8381\n\t//selectable: false,                                                                                                  // 8382\n\tunselectAuto: true,                                                                                                   // 8383\n\t                                                                                                                      // 8384\n\tdropAccept: '*',                                                                                                      // 8385\n                                                                                                                       // 8386\n\teventLimit: false,                                                                                                    // 8387\n\teventLimitText: 'more',                                                                                               // 8388\n\teventLimitClick: 'popover',                                                                                           // 8389\n\tdayPopoverFormat: 'LL',                                                                                               // 8390\n\t                                                                                                                      // 8391\n\thandleWindowResize: true,                                                                                             // 8392\n\twindowResizeDelay: 200 // milliseconds before an updateSize happens                                                   // 8393\n\t                                                                                                                      // 8394\n};                                                                                                                     // 8395\n                                                                                                                       // 8396\n                                                                                                                       // 8397\nCalendar.englishDefaults = { // used by lang.js                                                                        // 8398\n\tdayPopoverFormat: 'dddd, MMMM D'                                                                                      // 8399\n};                                                                                                                     // 8400\n                                                                                                                       // 8401\n                                                                                                                       // 8402\nCalendar.rtlDefaults = { // right-to-left defaults                                                                     // 8403\n\theader: { // TODO: smarter solution (first/center/last ?)                                                             // 8404\n\t\tleft: 'next,prev today',                                                                                             // 8405\n\t\tcenter: '',                                                                                                          // 8406\n\t\tright: 'title'                                                                                                       // 8407\n\t},                                                                                                                    // 8408\n\tbuttonIcons: {                                                                                                        // 8409\n\t\tprev: 'right-single-arrow',                                                                                          // 8410\n\t\tnext: 'left-single-arrow',                                                                                           // 8411\n\t\tprevYear: 'right-double-arrow',                                                                                      // 8412\n\t\tnextYear: 'left-double-arrow'                                                                                        // 8413\n\t},                                                                                                                    // 8414\n\tthemeButtonIcons: {                                                                                                   // 8415\n\t\tprev: 'circle-triangle-e',                                                                                           // 8416\n\t\tnext: 'circle-triangle-w',                                                                                           // 8417\n\t\tnextYear: 'seek-prev',                                                                                               // 8418\n\t\tprevYear: 'seek-next'                                                                                                // 8419\n\t}                                                                                                                     // 8420\n};                                                                                                                     // 8421\n                                                                                                                       // 8422\n;;                                                                                                                     // 8423\n                                                                                                                       // 8424\nvar langOptionHash = fc.langs = {}; // initialize and expose                                                           // 8425\n                                                                                                                       // 8426\n                                                                                                                       // 8427\n// TODO: document the structure and ordering of a FullCalendar lang file                                               // 8428\n// TODO: rename everything \"lang\" to \"locale\", like what the moment project did                                        // 8429\n                                                                                                                       // 8430\n                                                                                                                       // 8431\n// Initialize jQuery UI datepicker translations while using some of the translations                                   // 8432\n// Will set this as the default language for datepicker.                                                               // 8433\nfc.datepickerLang = function(langCode, dpLangCode, dpOptions) {                                                        // 8434\n                                                                                                                       // 8435\n\t// get the FullCalendar internal option hash for this language. create if necessary                                   // 8436\n\tvar fcOptions = langOptionHash[langCode] || (langOptionHash[langCode] = {});                                          // 8437\n                                                                                                                       // 8438\n\t// transfer some simple options from datepicker to fc                                                                 // 8439\n\tfcOptions.isRTL = dpOptions.isRTL;                                                                                    // 8440\n\tfcOptions.weekNumberTitle = dpOptions.weekHeader;                                                                     // 8441\n                                                                                                                       // 8442\n\t// compute some more complex options from datepicker                                                                  // 8443\n\t$.each(dpComputableOptions, function(name, func) {                                                                    // 8444\n\t\tfcOptions[name] = func(dpOptions);                                                                                   // 8445\n\t});                                                                                                                   // 8446\n                                                                                                                       // 8447\n\t// is jQuery UI Datepicker is on the page?                                                                            // 8448\n\tif ($.datepicker) {                                                                                                   // 8449\n                                                                                                                       // 8450\n\t\t// Register the language data.                                                                                       // 8451\n\t\t// FullCalendar and MomentJS use language codes like \"pt-br\" but Datepicker                                          // 8452\n\t\t// does it like \"pt-BR\" or if it doesn't have the language, maybe just \"pt\".                                         // 8453\n\t\t// Make an alias so the language can be referenced either way.                                                       // 8454\n\t\t$.datepicker.regional[dpLangCode] =                                                                                  // 8455\n\t\t\t$.datepicker.regional[langCode] = // alias                                                                          // 8456\n\t\t\t\tdpOptions;                                                                                                         // 8457\n                                                                                                                       // 8458\n\t\t// Alias 'en' to the default language data. Do this every time.                                                      // 8459\n\t\t$.datepicker.regional.en = $.datepicker.regional[''];                                                                // 8460\n                                                                                                                       // 8461\n\t\t// Set as Datepicker's global defaults.                                                                              // 8462\n\t\t$.datepicker.setDefaults(dpOptions);                                                                                 // 8463\n\t}                                                                                                                     // 8464\n};                                                                                                                     // 8465\n                                                                                                                       // 8466\n                                                                                                                       // 8467\n// Sets FullCalendar-specific translations. Will set the language as the global default.                               // 8468\nfc.lang = function(langCode, newFcOptions) {                                                                           // 8469\n\tvar fcOptions;                                                                                                        // 8470\n\tvar momOptions;                                                                                                       // 8471\n                                                                                                                       // 8472\n\t// get the FullCalendar internal option hash for this language. create if necessary                                   // 8473\n\tfcOptions = langOptionHash[langCode] || (langOptionHash[langCode] = {});                                              // 8474\n                                                                                                                       // 8475\n\t// provided new options for this language? merge them in                                                              // 8476\n\tif (newFcOptions) {                                                                                                   // 8477\n\t\tfcOptions = langOptionHash[langCode] = mergeOptions(fcOptions, newFcOptions);                                        // 8478\n\t}                                                                                                                     // 8479\n                                                                                                                       // 8480\n\t// compute language options that weren't defined.                                                                     // 8481\n\t// always do this. newFcOptions can be undefined when initializing from i18n file,                                    // 8482\n\t// so no way to tell if this is an initialization or a default-setting.                                               // 8483\n\tmomOptions = getMomentLocaleData(langCode); // will fall back to en                                                   // 8484\n\t$.each(momComputableOptions, function(name, func) {                                                                   // 8485\n\t\tif (fcOptions[name] == null) {                                                                                       // 8486\n\t\t\tfcOptions[name] = func(momOptions, fcOptions);                                                                      // 8487\n\t\t}                                                                                                                    // 8488\n\t});                                                                                                                   // 8489\n                                                                                                                       // 8490\n\t// set it as the default language for FullCalendar                                                                    // 8491\n\tCalendar.defaults.lang = langCode;                                                                                    // 8492\n};                                                                                                                     // 8493\n                                                                                                                       // 8494\n                                                                                                                       // 8495\n// NOTE: can't guarantee any of these computations will run because not every language has datepicker                  // 8496\n// configs, so make sure there are English fallbacks for these in the defaults file.                                   // 8497\nvar dpComputableOptions = {                                                                                            // 8498\n                                                                                                                       // 8499\n\tbuttonText: function(dpOptions) {                                                                                     // 8500\n\t\treturn {                                                                                                             // 8501\n\t\t\t// the translations sometimes wrongly contain HTML entities                                                         // 8502\n\t\t\tprev: stripHtmlEntities(dpOptions.prevText),                                                                        // 8503\n\t\t\tnext: stripHtmlEntities(dpOptions.nextText),                                                                        // 8504\n\t\t\ttoday: stripHtmlEntities(dpOptions.currentText)                                                                     // 8505\n\t\t};                                                                                                                   // 8506\n\t},                                                                                                                    // 8507\n                                                                                                                       // 8508\n\t// Produces format strings like \"MMMM YYYY\" -> \"September 2014\"                                                       // 8509\n\tmonthYearFormat: function(dpOptions) {                                                                                // 8510\n\t\treturn dpOptions.showMonthAfterYear ?                                                                                // 8511\n\t\t\t'YYYY[' + dpOptions.yearSuffix + '] MMMM' :                                                                         // 8512\n\t\t\t'MMMM YYYY[' + dpOptions.yearSuffix + ']';                                                                          // 8513\n\t}                                                                                                                     // 8514\n                                                                                                                       // 8515\n};                                                                                                                     // 8516\n                                                                                                                       // 8517\nvar momComputableOptions = {                                                                                           // 8518\n                                                                                                                       // 8519\n\t// Produces format strings like \"ddd M/D\" -> \"Fri 9/15\"                                                               // 8520\n\tdayOfMonthFormat: function(momOptions, fcOptions) {                                                                   // 8521\n\t\tvar format = momOptions.longDateFormat('l'); // for the format like \"M/D/YYYY\"                                       // 8522\n                                                                                                                       // 8523\n\t\t// strip the year off the edge, as well as other misc non-whitespace chars                                           // 8524\n\t\tformat = format.replace(/^Y+[^\\w\\s]*|[^\\w\\s]*Y+$/g, '');                                                             // 8525\n                                                                                                                       // 8526\n\t\tif (fcOptions.isRTL) {                                                                                               // 8527\n\t\t\tformat += ' ddd'; // for RTL, add day-of-week to end                                                                // 8528\n\t\t}                                                                                                                    // 8529\n\t\telse {                                                                                                               // 8530\n\t\t\tformat = 'ddd ' + format; // for LTR, add day-of-week to beginning                                                  // 8531\n\t\t}                                                                                                                    // 8532\n\t\treturn format;                                                                                                       // 8533\n\t},                                                                                                                    // 8534\n                                                                                                                       // 8535\n\t// Produces format strings like \"h:mma\" -> \"6:00pm\"                                                                   // 8536\n\tmediumTimeFormat: function(momOptions) { // can't be called `timeFormat` because collides with option                 // 8537\n\t\treturn momOptions.longDateFormat('LT')                                                                               // 8538\n\t\t\t.replace(/\\s*a$/i, 'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand                          // 8539\n\t},                                                                                                                    // 8540\n                                                                                                                       // 8541\n\t// Produces format strings like \"h(:mm)a\" -> \"6pm\" / \"6:30pm\"                                                         // 8542\n\tsmallTimeFormat: function(momOptions) {                                                                               // 8543\n\t\treturn momOptions.longDateFormat('LT')                                                                               // 8544\n\t\t\t.replace(':mm', '(:mm)')                                                                                            // 8545\n\t\t\t.replace(/(\\Wmm)$/, '($1)') // like above, but for foreign langs                                                    // 8546\n\t\t\t.replace(/\\s*a$/i, 'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand                          // 8547\n\t},                                                                                                                    // 8548\n                                                                                                                       // 8549\n\t// Produces format strings like \"h(:mm)t\" -> \"6p\" / \"6:30p\"                                                           // 8550\n\textraSmallTimeFormat: function(momOptions) {                                                                          // 8551\n\t\treturn momOptions.longDateFormat('LT')                                                                               // 8552\n\t\t\t.replace(':mm', '(:mm)')                                                                                            // 8553\n\t\t\t.replace(/(\\Wmm)$/, '($1)') // like above, but for foreign langs                                                    // 8554\n\t\t\t.replace(/\\s*a$/i, 't'); // convert to AM/PM/am/pm to lowercase one-letter. remove any spaces beforehand            // 8555\n\t},                                                                                                                    // 8556\n                                                                                                                       // 8557\n\t// Produces format strings like \"ha\" / \"H\" -> \"6pm\" / \"18\"                                                            // 8558\n\thourFormat: function(momOptions) {                                                                                    // 8559\n\t\treturn momOptions.longDateFormat('LT')                                                                               // 8560\n\t\t\t.replace(':mm', '')                                                                                                 // 8561\n\t\t\t.replace(/(\\Wmm)$/, '') // like above, but for foreign langs                                                        // 8562\n\t\t\t.replace(/\\s*a$/i, 'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand                          // 8563\n\t},                                                                                                                    // 8564\n                                                                                                                       // 8565\n\t// Produces format strings like \"h:mm\" -> \"6:30\" (with no AM/PM)                                                      // 8566\n\tnoMeridiemTimeFormat: function(momOptions) {                                                                          // 8567\n\t\treturn momOptions.longDateFormat('LT')                                                                               // 8568\n\t\t\t.replace(/\\s*a$/i, ''); // remove trailing AM/PM                                                                    // 8569\n\t}                                                                                                                     // 8570\n                                                                                                                       // 8571\n};                                                                                                                     // 8572\n                                                                                                                       // 8573\n                                                                                                                       // 8574\n// options that should be computed off live calendar options (considers override options)                              // 8575\nvar instanceComputableOptions = { // TODO: best place for this? related to lang?                                       // 8576\n                                                                                                                       // 8577\n\t// Produces format strings for results like \"Mo 16\"                                                                   // 8578\n\tsmallDayDateFormat: function(options) {                                                                               // 8579\n\t\treturn options.isRTL ?                                                                                               // 8580\n\t\t\t'D dd' :                                                                                                            // 8581\n\t\t\t'dd D';                                                                                                             // 8582\n\t},                                                                                                                    // 8583\n                                                                                                                       // 8584\n\t// Produces format strings for results like \"Wk 5\"                                                                    // 8585\n\tweekFormat: function(options) {                                                                                       // 8586\n\t\treturn options.isRTL ?                                                                                               // 8587\n\t\t\t'w[ ' + options.weekNumberTitle + ']' :                                                                             // 8588\n\t\t\t'[' + options.weekNumberTitle + ' ]w';                                                                              // 8589\n\t},                                                                                                                    // 8590\n                                                                                                                       // 8591\n\t// Produces format strings for results like \"Wk5\"                                                                     // 8592\n\tsmallWeekFormat: function(options) {                                                                                  // 8593\n\t\treturn options.isRTL ?                                                                                               // 8594\n\t\t\t'w[' + options.weekNumberTitle + ']' :                                                                              // 8595\n\t\t\t'[' + options.weekNumberTitle + ']w';                                                                               // 8596\n\t}                                                                                                                     // 8597\n                                                                                                                       // 8598\n};                                                                                                                     // 8599\n                                                                                                                       // 8600\nfunction populateInstanceComputableOptions(options) {                                                                  // 8601\n\t$.each(instanceComputableOptions, function(name, func) {                                                              // 8602\n\t\tif (options[name] == null) {                                                                                         // 8603\n\t\t\toptions[name] = func(options);                                                                                      // 8604\n\t\t}                                                                                                                    // 8605\n\t});                                                                                                                   // 8606\n}                                                                                                                      // 8607\n                                                                                                                       // 8608\n                                                                                                                       // 8609\n// Returns moment's internal locale data. If doesn't exist, returns English.                                           // 8610\n// Works with moment-pre-2.8                                                                                           // 8611\nfunction getMomentLocaleData(langCode) {                                                                               // 8612\n\tvar func = moment.localeData || moment.langData;                                                                      // 8613\n\treturn func.call(moment, langCode) ||                                                                                 // 8614\n\t\tfunc.call(moment, 'en'); // the newer localData could return null, so fall back to en                                // 8615\n}                                                                                                                      // 8616\n                                                                                                                       // 8617\n                                                                                                                       // 8618\n// Initialize English by forcing computation of moment-derived options.                                                // 8619\n// Also, sets it as the default.                                                                                       // 8620\nfc.lang('en', Calendar.englishDefaults);                                                                               // 8621\n                                                                                                                       // 8622\n;;                                                                                                                     // 8623\n                                                                                                                       // 8624\n/* Top toolbar area with buttons and title                                                                             // 8625\n----------------------------------------------------------------------------------------------------------------------*/\n// TODO: rename all header-related things to \"toolbar\"                                                                 // 8627\n                                                                                                                       // 8628\nfunction Header(calendar, options) {                                                                                   // 8629\n\tvar t = this;                                                                                                         // 8630\n\t                                                                                                                      // 8631\n\t// exports                                                                                                            // 8632\n\tt.render = render;                                                                                                    // 8633\n\tt.destroy = destroy;                                                                                                  // 8634\n\tt.updateTitle = updateTitle;                                                                                          // 8635\n\tt.activateButton = activateButton;                                                                                    // 8636\n\tt.deactivateButton = deactivateButton;                                                                                // 8637\n\tt.disableButton = disableButton;                                                                                      // 8638\n\tt.enableButton = enableButton;                                                                                        // 8639\n\tt.getViewsWithButtons = getViewsWithButtons;                                                                          // 8640\n\t                                                                                                                      // 8641\n\t// locals                                                                                                             // 8642\n\tvar el = $();                                                                                                         // 8643\n\tvar viewsWithButtons = [];                                                                                            // 8644\n\tvar tm;                                                                                                               // 8645\n                                                                                                                       // 8646\n                                                                                                                       // 8647\n\tfunction render() {                                                                                                   // 8648\n\t\tvar sections = options.header;                                                                                       // 8649\n                                                                                                                       // 8650\n\t\ttm = options.theme ? 'ui' : 'fc';                                                                                    // 8651\n                                                                                                                       // 8652\n\t\tif (sections) {                                                                                                      // 8653\n\t\t\tel = $(\"<div class='fc-toolbar'/>\")                                                                                 // 8654\n\t\t\t\t.append(renderSection('left'))                                                                                     // 8655\n\t\t\t\t.append(renderSection('right'))                                                                                    // 8656\n\t\t\t\t.append(renderSection('center'))                                                                                   // 8657\n\t\t\t\t.append('<div class=\"fc-clear\"/>');                                                                                // 8658\n                                                                                                                       // 8659\n\t\t\treturn el;                                                                                                          // 8660\n\t\t}                                                                                                                    // 8661\n\t}                                                                                                                     // 8662\n\t                                                                                                                      // 8663\n\t                                                                                                                      // 8664\n\tfunction destroy() {                                                                                                  // 8665\n\t\tel.remove();                                                                                                         // 8666\n\t}                                                                                                                     // 8667\n\t                                                                                                                      // 8668\n\t                                                                                                                      // 8669\n\tfunction renderSection(position) {                                                                                    // 8670\n\t\tvar sectionEl = $('<div class=\"fc-' + position + '\"/>');                                                             // 8671\n\t\tvar buttonStr = options.header[position];                                                                            // 8672\n                                                                                                                       // 8673\n\t\tif (buttonStr) {                                                                                                     // 8674\n\t\t\t$.each(buttonStr.split(' '), function(i) {                                                                          // 8675\n\t\t\t\tvar groupChildren = $();                                                                                           // 8676\n\t\t\t\tvar isOnlyButtons = true;                                                                                          // 8677\n\t\t\t\tvar groupEl;                                                                                                       // 8678\n                                                                                                                       // 8679\n\t\t\t\t$.each(this.split(','), function(j, buttonName) {                                                                  // 8680\n\t\t\t\t\tvar viewSpec;                                                                                                     // 8681\n\t\t\t\t\tvar buttonClick;                                                                                                  // 8682\n\t\t\t\t\tvar overrideText; // text explicitly set by calendar's constructor options. overcomes icons                       // 8683\n\t\t\t\t\tvar defaultText;                                                                                                  // 8684\n\t\t\t\t\tvar themeIcon;                                                                                                    // 8685\n\t\t\t\t\tvar normalIcon;                                                                                                   // 8686\n\t\t\t\t\tvar innerHtml;                                                                                                    // 8687\n\t\t\t\t\tvar classes;                                                                                                      // 8688\n\t\t\t\t\tvar button;                                                                                                       // 8689\n                                                                                                                       // 8690\n\t\t\t\t\tif (buttonName == 'title') {                                                                                      // 8691\n\t\t\t\t\t\tgroupChildren = groupChildren.add($('<h2>&nbsp;</h2>')); // we always want it to take up height                  // 8692\n\t\t\t\t\t\tisOnlyButtons = false;                                                                                           // 8693\n\t\t\t\t\t}                                                                                                                 // 8694\n\t\t\t\t\telse {                                                                                                            // 8695\n\t\t\t\t\t\tviewSpec = calendar.getViewSpec(buttonName);                                                                     // 8696\n                                                                                                                       // 8697\n\t\t\t\t\t\tif (viewSpec) {                                                                                                  // 8698\n\t\t\t\t\t\t\tbuttonClick = function() {                                                                                      // 8699\n\t\t\t\t\t\t\t\tcalendar.changeView(buttonName);                                                                               // 8700\n\t\t\t\t\t\t\t};                                                                                                              // 8701\n\t\t\t\t\t\t\tviewsWithButtons.push(buttonName);                                                                              // 8702\n\t\t\t\t\t\t\toverrideText = viewSpec.buttonTextOverride;                                                                     // 8703\n\t\t\t\t\t\t\tdefaultText = viewSpec.buttonTextDefault;                                                                       // 8704\n\t\t\t\t\t\t}                                                                                                                // 8705\n\t\t\t\t\t\telse if (calendar[buttonName]) { // a calendar method                                                            // 8706\n\t\t\t\t\t\t\tbuttonClick = function() {                                                                                      // 8707\n\t\t\t\t\t\t\t\tcalendar[buttonName]();                                                                                        // 8708\n\t\t\t\t\t\t\t};                                                                                                              // 8709\n\t\t\t\t\t\t\toverrideText = (calendar.overrides.buttonText || {})[buttonName];                                               // 8710\n\t\t\t\t\t\t\tdefaultText = options.buttonText[buttonName]; // everything else is considered default                          // 8711\n\t\t\t\t\t\t}                                                                                                                // 8712\n                                                                                                                       // 8713\n\t\t\t\t\t\tif (buttonClick) {                                                                                               // 8714\n                                                                                                                       // 8715\n\t\t\t\t\t\t\tthemeIcon = options.themeButtonIcons[buttonName];                                                               // 8716\n\t\t\t\t\t\t\tnormalIcon = options.buttonIcons[buttonName];                                                                   // 8717\n                                                                                                                       // 8718\n\t\t\t\t\t\t\tif (overrideText) {                                                                                             // 8719\n\t\t\t\t\t\t\t\tinnerHtml = htmlEscape(overrideText);                                                                          // 8720\n\t\t\t\t\t\t\t}                                                                                                               // 8721\n\t\t\t\t\t\t\telse if (themeIcon && options.theme) {                                                                          // 8722\n\t\t\t\t\t\t\t\tinnerHtml = \"<span class='ui-icon ui-icon-\" + themeIcon + \"'></span>\";                                         // 8723\n\t\t\t\t\t\t\t}                                                                                                               // 8724\n\t\t\t\t\t\t\telse if (normalIcon && !options.theme) {                                                                        // 8725\n\t\t\t\t\t\t\t\tinnerHtml = \"<span class='fc-icon fc-icon-\" + normalIcon + \"'></span>\";                                        // 8726\n\t\t\t\t\t\t\t}                                                                                                               // 8727\n\t\t\t\t\t\t\telse {                                                                                                          // 8728\n\t\t\t\t\t\t\t\tinnerHtml = htmlEscape(defaultText);                                                                           // 8729\n\t\t\t\t\t\t\t}                                                                                                               // 8730\n                                                                                                                       // 8731\n\t\t\t\t\t\t\tclasses = [                                                                                                     // 8732\n\t\t\t\t\t\t\t\t'fc-' + buttonName + '-button',                                                                                // 8733\n\t\t\t\t\t\t\t\ttm + '-button',                                                                                                // 8734\n\t\t\t\t\t\t\t\ttm + '-state-default'                                                                                          // 8735\n\t\t\t\t\t\t\t];                                                                                                              // 8736\n                                                                                                                       // 8737\n\t\t\t\t\t\t\tbutton = $( // type=\"button\" so that it doesn't submit a form                                                   // 8738\n\t\t\t\t\t\t\t\t'<button type=\"button\" class=\"' + classes.join(' ') + '\">' +                                                   // 8739\n\t\t\t\t\t\t\t\t\tinnerHtml +                                                                                                   // 8740\n\t\t\t\t\t\t\t\t'</button>'                                                                                                    // 8741\n\t\t\t\t\t\t\t\t)                                                                                                              // 8742\n\t\t\t\t\t\t\t\t.click(function() {                                                                                            // 8743\n\t\t\t\t\t\t\t\t\t// don't process clicks for disabled buttons                                                                  // 8744\n\t\t\t\t\t\t\t\t\tif (!button.hasClass(tm + '-state-disabled')) {                                                               // 8745\n                                                                                                                       // 8746\n\t\t\t\t\t\t\t\t\t\tbuttonClick();                                                                                               // 8747\n                                                                                                                       // 8748\n\t\t\t\t\t\t\t\t\t\t// after the click action, if the button becomes the \"active\" tab, or disabled,                              // 8749\n\t\t\t\t\t\t\t\t\t\t// it should never have a hover class, so remove it now.                                                     // 8750\n\t\t\t\t\t\t\t\t\t\tif (                                                                                                         // 8751\n\t\t\t\t\t\t\t\t\t\t\tbutton.hasClass(tm + '-state-active') ||                                                                    // 8752\n\t\t\t\t\t\t\t\t\t\t\tbutton.hasClass(tm + '-state-disabled')                                                                     // 8753\n\t\t\t\t\t\t\t\t\t\t) {                                                                                                          // 8754\n\t\t\t\t\t\t\t\t\t\t\tbutton.removeClass(tm + '-state-hover');                                                                    // 8755\n\t\t\t\t\t\t\t\t\t\t}                                                                                                            // 8756\n\t\t\t\t\t\t\t\t\t}                                                                                                             // 8757\n\t\t\t\t\t\t\t\t})                                                                                                             // 8758\n\t\t\t\t\t\t\t\t.mousedown(function() {                                                                                        // 8759\n\t\t\t\t\t\t\t\t\t// the *down* effect (mouse pressed in).                                                                      // 8760\n\t\t\t\t\t\t\t\t\t// only on buttons that are not the \"active\" tab, or disabled                                                 // 8761\n\t\t\t\t\t\t\t\t\tbutton                                                                                                        // 8762\n\t\t\t\t\t\t\t\t\t\t.not('.' + tm + '-state-active')                                                                             // 8763\n\t\t\t\t\t\t\t\t\t\t.not('.' + tm + '-state-disabled')                                                                           // 8764\n\t\t\t\t\t\t\t\t\t\t.addClass(tm + '-state-down');                                                                               // 8765\n\t\t\t\t\t\t\t\t})                                                                                                             // 8766\n\t\t\t\t\t\t\t\t.mouseup(function() {                                                                                          // 8767\n\t\t\t\t\t\t\t\t\t// undo the *down* effect                                                                                     // 8768\n\t\t\t\t\t\t\t\t\tbutton.removeClass(tm + '-state-down');                                                                       // 8769\n\t\t\t\t\t\t\t\t})                                                                                                             // 8770\n\t\t\t\t\t\t\t\t.hover(                                                                                                        // 8771\n\t\t\t\t\t\t\t\t\tfunction() {                                                                                                  // 8772\n\t\t\t\t\t\t\t\t\t\t// the *hover* effect.                                                                                       // 8773\n\t\t\t\t\t\t\t\t\t\t// only on buttons that are not the \"active\" tab, or disabled                                                // 8774\n\t\t\t\t\t\t\t\t\t\tbutton                                                                                                       // 8775\n\t\t\t\t\t\t\t\t\t\t\t.not('.' + tm + '-state-active')                                                                            // 8776\n\t\t\t\t\t\t\t\t\t\t\t.not('.' + tm + '-state-disabled')                                                                          // 8777\n\t\t\t\t\t\t\t\t\t\t\t.addClass(tm + '-state-hover');                                                                             // 8778\n\t\t\t\t\t\t\t\t\t},                                                                                                            // 8779\n\t\t\t\t\t\t\t\t\tfunction() {                                                                                                  // 8780\n\t\t\t\t\t\t\t\t\t\t// undo the *hover* effect                                                                                   // 8781\n\t\t\t\t\t\t\t\t\t\tbutton                                                                                                       // 8782\n\t\t\t\t\t\t\t\t\t\t\t.removeClass(tm + '-state-hover')                                                                           // 8783\n\t\t\t\t\t\t\t\t\t\t\t.removeClass(tm + '-state-down'); // if mouseleave happens before mouseup                                   // 8784\n\t\t\t\t\t\t\t\t\t}                                                                                                             // 8785\n\t\t\t\t\t\t\t\t);                                                                                                             // 8786\n                                                                                                                       // 8787\n\t\t\t\t\t\t\tgroupChildren = groupChildren.add(button);                                                                      // 8788\n\t\t\t\t\t\t}                                                                                                                // 8789\n\t\t\t\t\t}                                                                                                                 // 8790\n\t\t\t\t});                                                                                                                // 8791\n                                                                                                                       // 8792\n\t\t\t\tif (isOnlyButtons) {                                                                                               // 8793\n\t\t\t\t\tgroupChildren                                                                                                     // 8794\n\t\t\t\t\t\t.first().addClass(tm + '-corner-left').end()                                                                     // 8795\n\t\t\t\t\t\t.last().addClass(tm + '-corner-right').end();                                                                    // 8796\n\t\t\t\t}                                                                                                                  // 8797\n                                                                                                                       // 8798\n\t\t\t\tif (groupChildren.length > 1) {                                                                                    // 8799\n\t\t\t\t\tgroupEl = $('<div/>');                                                                                            // 8800\n\t\t\t\t\tif (isOnlyButtons) {                                                                                              // 8801\n\t\t\t\t\t\tgroupEl.addClass('fc-button-group');                                                                             // 8802\n\t\t\t\t\t}                                                                                                                 // 8803\n\t\t\t\t\tgroupEl.append(groupChildren);                                                                                    // 8804\n\t\t\t\t\tsectionEl.append(groupEl);                                                                                        // 8805\n\t\t\t\t}                                                                                                                  // 8806\n\t\t\t\telse {                                                                                                             // 8807\n\t\t\t\t\tsectionEl.append(groupChildren); // 1 or 0 children                                                               // 8808\n\t\t\t\t}                                                                                                                  // 8809\n\t\t\t});                                                                                                                 // 8810\n\t\t}                                                                                                                    // 8811\n                                                                                                                       // 8812\n\t\treturn sectionEl;                                                                                                    // 8813\n\t}                                                                                                                     // 8814\n\t                                                                                                                      // 8815\n\t                                                                                                                      // 8816\n\tfunction updateTitle(text) {                                                                                          // 8817\n\t\tel.find('h2').text(text);                                                                                            // 8818\n\t}                                                                                                                     // 8819\n\t                                                                                                                      // 8820\n\t                                                                                                                      // 8821\n\tfunction activateButton(buttonName) {                                                                                 // 8822\n\t\tel.find('.fc-' + buttonName + '-button')                                                                             // 8823\n\t\t\t.addClass(tm + '-state-active');                                                                                    // 8824\n\t}                                                                                                                     // 8825\n\t                                                                                                                      // 8826\n\t                                                                                                                      // 8827\n\tfunction deactivateButton(buttonName) {                                                                               // 8828\n\t\tel.find('.fc-' + buttonName + '-button')                                                                             // 8829\n\t\t\t.removeClass(tm + '-state-active');                                                                                 // 8830\n\t}                                                                                                                     // 8831\n\t                                                                                                                      // 8832\n\t                                                                                                                      // 8833\n\tfunction disableButton(buttonName) {                                                                                  // 8834\n\t\tel.find('.fc-' + buttonName + '-button')                                                                             // 8835\n\t\t\t.attr('disabled', 'disabled')                                                                                       // 8836\n\t\t\t.addClass(tm + '-state-disabled');                                                                                  // 8837\n\t}                                                                                                                     // 8838\n\t                                                                                                                      // 8839\n\t                                                                                                                      // 8840\n\tfunction enableButton(buttonName) {                                                                                   // 8841\n\t\tel.find('.fc-' + buttonName + '-button')                                                                             // 8842\n\t\t\t.removeAttr('disabled')                                                                                             // 8843\n\t\t\t.removeClass(tm + '-state-disabled');                                                                               // 8844\n\t}                                                                                                                     // 8845\n                                                                                                                       // 8846\n                                                                                                                       // 8847\n\tfunction getViewsWithButtons() {                                                                                      // 8848\n\t\treturn viewsWithButtons;                                                                                             // 8849\n\t}                                                                                                                     // 8850\n                                                                                                                       // 8851\n}                                                                                                                      // 8852\n                                                                                                                       // 8853\n;;                                                                                                                     // 8854\n                                                                                                                       // 8855\nfc.sourceNormalizers = [];                                                                                             // 8856\nfc.sourceFetchers = [];                                                                                                // 8857\n                                                                                                                       // 8858\nvar ajaxDefaults = {                                                                                                   // 8859\n\tdataType: 'json',                                                                                                     // 8860\n\tcache: false                                                                                                          // 8861\n};                                                                                                                     // 8862\n                                                                                                                       // 8863\nvar eventGUID = 1;                                                                                                     // 8864\n                                                                                                                       // 8865\n                                                                                                                       // 8866\nfunction EventManager(options) { // assumed to be a calendar                                                           // 8867\n\tvar t = this;                                                                                                         // 8868\n\t                                                                                                                      // 8869\n\t                                                                                                                      // 8870\n\t// exports                                                                                                            // 8871\n\tt.isFetchNeeded = isFetchNeeded;                                                                                      // 8872\n\tt.fetchEvents = fetchEvents;                                                                                          // 8873\n\tt.addEventSource = addEventSource;                                                                                    // 8874\n\tt.removeEventSource = removeEventSource;                                                                              // 8875\n\tt.updateEvent = updateEvent;                                                                                          // 8876\n\tt.renderEvent = renderEvent;                                                                                          // 8877\n\tt.removeEvents = removeEvents;                                                                                        // 8878\n\tt.clientEvents = clientEvents;                                                                                        // 8879\n\tt.mutateEvent = mutateEvent;                                                                                          // 8880\n\tt.normalizeEventRange = normalizeEventRange;                                                                          // 8881\n\tt.normalizeEventRangeTimes = normalizeEventRangeTimes;                                                                // 8882\n\tt.ensureVisibleEventRange = ensureVisibleEventRange;                                                                  // 8883\n\t                                                                                                                      // 8884\n\t                                                                                                                      // 8885\n\t// imports                                                                                                            // 8886\n\tvar trigger = t.trigger;                                                                                              // 8887\n\tvar getView = t.getView;                                                                                              // 8888\n\tvar reportEvents = t.reportEvents;                                                                                    // 8889\n\t                                                                                                                      // 8890\n\t                                                                                                                      // 8891\n\t// locals                                                                                                             // 8892\n\tvar stickySource = { events: [] };                                                                                    // 8893\n\tvar sources = [ stickySource ];                                                                                       // 8894\n\tvar rangeStart, rangeEnd;                                                                                             // 8895\n\tvar currentFetchID = 0;                                                                                               // 8896\n\tvar pendingSourceCnt = 0;                                                                                             // 8897\n\tvar loadingLevel = 0;                                                                                                 // 8898\n\tvar cache = []; // holds events that have already been expanded                                                       // 8899\n                                                                                                                       // 8900\n                                                                                                                       // 8901\n\t$.each(                                                                                                               // 8902\n\t\t(options.events ? [ options.events ] : []).concat(options.eventSources || []),                                       // 8903\n\t\tfunction(i, sourceInput) {                                                                                           // 8904\n\t\t\tvar source = buildEventSource(sourceInput);                                                                         // 8905\n\t\t\tif (source) {                                                                                                       // 8906\n\t\t\t\tsources.push(source);                                                                                              // 8907\n\t\t\t}                                                                                                                   // 8908\n\t\t}                                                                                                                    // 8909\n\t);                                                                                                                    // 8910\n\t                                                                                                                      // 8911\n\t                                                                                                                      // 8912\n\t                                                                                                                      // 8913\n\t/* Fetching                                                                                                           // 8914\n\t-----------------------------------------------------------------------------*/                                       // 8915\n\t                                                                                                                      // 8916\n\t                                                                                                                      // 8917\n\tfunction isFetchNeeded(start, end) {                                                                                  // 8918\n\t\treturn !rangeStart || // nothing has been fetched yet?                                                               // 8919\n\t\t\t// or, a part of the new range is outside of the old range? (after normalizing)                                     // 8920\n\t\t\tstart.clone().stripZone() < rangeStart.clone().stripZone() ||                                                       // 8921\n\t\t\tend.clone().stripZone() > rangeEnd.clone().stripZone();                                                             // 8922\n\t}                                                                                                                     // 8923\n\t                                                                                                                      // 8924\n\t                                                                                                                      // 8925\n\tfunction fetchEvents(start, end) {                                                                                    // 8926\n\t\trangeStart = start;                                                                                                  // 8927\n\t\trangeEnd = end;                                                                                                      // 8928\n\t\tcache = [];                                                                                                          // 8929\n\t\tvar fetchID = ++currentFetchID;                                                                                      // 8930\n\t\tvar len = sources.length;                                                                                            // 8931\n\t\tpendingSourceCnt = len;                                                                                              // 8932\n\t\tfor (var i=0; i<len; i++) {                                                                                          // 8933\n\t\t\tfetchEventSource(sources[i], fetchID);                                                                              // 8934\n\t\t}                                                                                                                    // 8935\n\t}                                                                                                                     // 8936\n\t                                                                                                                      // 8937\n\t                                                                                                                      // 8938\n\tfunction fetchEventSource(source, fetchID) {                                                                          // 8939\n\t\t_fetchEventSource(source, function(eventInputs) {                                                                    // 8940\n\t\t\tvar isArraySource = $.isArray(source.events);                                                                       // 8941\n\t\t\tvar i, eventInput;                                                                                                  // 8942\n\t\t\tvar abstractEvent;                                                                                                  // 8943\n                                                                                                                       // 8944\n\t\t\tif (fetchID == currentFetchID) {                                                                                    // 8945\n                                                                                                                       // 8946\n\t\t\t\tif (eventInputs) {                                                                                                 // 8947\n\t\t\t\t\tfor (i = 0; i < eventInputs.length; i++) {                                                                        // 8948\n\t\t\t\t\t\teventInput = eventInputs[i];                                                                                     // 8949\n                                                                                                                       // 8950\n\t\t\t\t\t\tif (isArraySource) { // array sources have already been convert to Event Objects                                 // 8951\n\t\t\t\t\t\t\tabstractEvent = eventInput;                                                                                     // 8952\n\t\t\t\t\t\t}                                                                                                                // 8953\n\t\t\t\t\t\telse {                                                                                                           // 8954\n\t\t\t\t\t\t\tabstractEvent = buildEventFromInput(eventInput, source);                                                        // 8955\n\t\t\t\t\t\t}                                                                                                                // 8956\n                                                                                                                       // 8957\n\t\t\t\t\t\tif (abstractEvent) { // not false (an invalid event)                                                             // 8958\n\t\t\t\t\t\t\tcache.push.apply(                                                                                               // 8959\n\t\t\t\t\t\t\t\tcache,                                                                                                         // 8960\n\t\t\t\t\t\t\t\texpandEvent(abstractEvent) // add individual expanded events to the cache                                      // 8961\n\t\t\t\t\t\t\t);                                                                                                              // 8962\n\t\t\t\t\t\t}                                                                                                                // 8963\n\t\t\t\t\t}                                                                                                                 // 8964\n\t\t\t\t}                                                                                                                  // 8965\n                                                                                                                       // 8966\n\t\t\t\tpendingSourceCnt--;                                                                                                // 8967\n\t\t\t\tif (!pendingSourceCnt) {                                                                                           // 8968\n\t\t\t\t\treportEvents(cache);                                                                                              // 8969\n\t\t\t\t}                                                                                                                  // 8970\n\t\t\t}                                                                                                                   // 8971\n\t\t});                                                                                                                  // 8972\n\t}                                                                                                                     // 8973\n\t                                                                                                                      // 8974\n\t                                                                                                                      // 8975\n\tfunction _fetchEventSource(source, callback) {                                                                        // 8976\n\t\tvar i;                                                                                                               // 8977\n\t\tvar fetchers = fc.sourceFetchers;                                                                                    // 8978\n\t\tvar res;                                                                                                             // 8979\n                                                                                                                       // 8980\n\t\tfor (i=0; i<fetchers.length; i++) {                                                                                  // 8981\n\t\t\tres = fetchers[i].call(                                                                                             // 8982\n\t\t\t\tt, // this, the Calendar object                                                                                    // 8983\n\t\t\t\tsource,                                                                                                            // 8984\n\t\t\t\trangeStart.clone(),                                                                                                // 8985\n\t\t\t\trangeEnd.clone(),                                                                                                  // 8986\n\t\t\t\toptions.timezone,                                                                                                  // 8987\n\t\t\t\tcallback                                                                                                           // 8988\n\t\t\t);                                                                                                                  // 8989\n                                                                                                                       // 8990\n\t\t\tif (res === true) {                                                                                                 // 8991\n\t\t\t\t// the fetcher is in charge. made its own async request                                                            // 8992\n\t\t\t\treturn;                                                                                                            // 8993\n\t\t\t}                                                                                                                   // 8994\n\t\t\telse if (typeof res == 'object') {                                                                                  // 8995\n\t\t\t\t// the fetcher returned a new source. process it                                                                   // 8996\n\t\t\t\t_fetchEventSource(res, callback);                                                                                  // 8997\n\t\t\t\treturn;                                                                                                            // 8998\n\t\t\t}                                                                                                                   // 8999\n\t\t}                                                                                                                    // 9000\n                                                                                                                       // 9001\n\t\tvar events = source.events;                                                                                          // 9002\n\t\tif (events) {                                                                                                        // 9003\n\t\t\tif ($.isFunction(events)) {                                                                                         // 9004\n\t\t\t\tpushLoading();                                                                                                     // 9005\n\t\t\t\tevents.call(                                                                                                       // 9006\n\t\t\t\t\tt, // this, the Calendar object                                                                                   // 9007\n\t\t\t\t\trangeStart.clone(),                                                                                               // 9008\n\t\t\t\t\trangeEnd.clone(),                                                                                                 // 9009\n\t\t\t\t\toptions.timezone,                                                                                                 // 9010\n\t\t\t\t\tfunction(events) {                                                                                                // 9011\n\t\t\t\t\t\tcallback(events);                                                                                                // 9012\n\t\t\t\t\t\tpopLoading();                                                                                                    // 9013\n\t\t\t\t\t}                                                                                                                 // 9014\n\t\t\t\t);                                                                                                                 // 9015\n\t\t\t}                                                                                                                   // 9016\n\t\t\telse if ($.isArray(events)) {                                                                                       // 9017\n\t\t\t\tcallback(events);                                                                                                  // 9018\n\t\t\t}                                                                                                                   // 9019\n\t\t\telse {                                                                                                              // 9020\n\t\t\t\tcallback();                                                                                                        // 9021\n\t\t\t}                                                                                                                   // 9022\n\t\t}else{                                                                                                               // 9023\n\t\t\tvar url = source.url;                                                                                               // 9024\n\t\t\tif (url) {                                                                                                          // 9025\n\t\t\t\tvar success = source.success;                                                                                      // 9026\n\t\t\t\tvar error = source.error;                                                                                          // 9027\n\t\t\t\tvar complete = source.complete;                                                                                    // 9028\n                                                                                                                       // 9029\n\t\t\t\t// retrieve any outbound GET/POST $.ajax data from the options                                                     // 9030\n\t\t\t\tvar customData;                                                                                                    // 9031\n\t\t\t\tif ($.isFunction(source.data)) {                                                                                   // 9032\n\t\t\t\t\t// supplied as a function that returns a key/value object                                                         // 9033\n\t\t\t\t\tcustomData = source.data();                                                                                       // 9034\n\t\t\t\t}                                                                                                                  // 9035\n\t\t\t\telse {                                                                                                             // 9036\n\t\t\t\t\t// supplied as a straight key/value object                                                                        // 9037\n\t\t\t\t\tcustomData = source.data;                                                                                         // 9038\n\t\t\t\t}                                                                                                                  // 9039\n                                                                                                                       // 9040\n\t\t\t\t// use a copy of the custom data so we can modify the parameters                                                   // 9041\n\t\t\t\t// and not affect the passed-in object.                                                                            // 9042\n\t\t\t\tvar data = $.extend({}, customData || {});                                                                         // 9043\n                                                                                                                       // 9044\n\t\t\t\tvar startParam = firstDefined(source.startParam, options.startParam);                                              // 9045\n\t\t\t\tvar endParam = firstDefined(source.endParam, options.endParam);                                                    // 9046\n\t\t\t\tvar timezoneParam = firstDefined(source.timezoneParam, options.timezoneParam);                                     // 9047\n                                                                                                                       // 9048\n\t\t\t\tif (startParam) {                                                                                                  // 9049\n\t\t\t\t\tdata[startParam] = rangeStart.format();                                                                           // 9050\n\t\t\t\t}                                                                                                                  // 9051\n\t\t\t\tif (endParam) {                                                                                                    // 9052\n\t\t\t\t\tdata[endParam] = rangeEnd.format();                                                                               // 9053\n\t\t\t\t}                                                                                                                  // 9054\n\t\t\t\tif (options.timezone && options.timezone != 'local') {                                                             // 9055\n\t\t\t\t\tdata[timezoneParam] = options.timezone;                                                                           // 9056\n\t\t\t\t}                                                                                                                  // 9057\n                                                                                                                       // 9058\n\t\t\t\tpushLoading();                                                                                                     // 9059\n\t\t\t\t$.ajax($.extend({}, ajaxDefaults, source, {                                                                        // 9060\n\t\t\t\t\tdata: data,                                                                                                       // 9061\n\t\t\t\t\tsuccess: function(events) {                                                                                       // 9062\n\t\t\t\t\t\tevents = events || [];                                                                                           // 9063\n\t\t\t\t\t\tvar res = applyAll(success, this, arguments);                                                                    // 9064\n\t\t\t\t\t\tif ($.isArray(res)) {                                                                                            // 9065\n\t\t\t\t\t\t\tevents = res;                                                                                                   // 9066\n\t\t\t\t\t\t}                                                                                                                // 9067\n\t\t\t\t\t\tcallback(events);                                                                                                // 9068\n\t\t\t\t\t},                                                                                                                // 9069\n\t\t\t\t\terror: function() {                                                                                               // 9070\n\t\t\t\t\t\tapplyAll(error, this, arguments);                                                                                // 9071\n\t\t\t\t\t\tcallback();                                                                                                      // 9072\n\t\t\t\t\t},                                                                                                                // 9073\n\t\t\t\t\tcomplete: function() {                                                                                            // 9074\n\t\t\t\t\t\tapplyAll(complete, this, arguments);                                                                             // 9075\n\t\t\t\t\t\tpopLoading();                                                                                                    // 9076\n\t\t\t\t\t}                                                                                                                 // 9077\n\t\t\t\t}));                                                                                                               // 9078\n\t\t\t}else{                                                                                                              // 9079\n\t\t\t\tcallback();                                                                                                        // 9080\n\t\t\t}                                                                                                                   // 9081\n\t\t}                                                                                                                    // 9082\n\t}                                                                                                                     // 9083\n\t                                                                                                                      // 9084\n\t                                                                                                                      // 9085\n\t                                                                                                                      // 9086\n\t/* Sources                                                                                                            // 9087\n\t-----------------------------------------------------------------------------*/                                       // 9088\n\t                                                                                                                      // 9089\n                                                                                                                       // 9090\n\tfunction addEventSource(sourceInput) {                                                                                // 9091\n\t\tvar source = buildEventSource(sourceInput);                                                                          // 9092\n\t\tif (source) {                                                                                                        // 9093\n\t\t\tsources.push(source);                                                                                               // 9094\n\t\t\tpendingSourceCnt++;                                                                                                 // 9095\n\t\t\tfetchEventSource(source, currentFetchID); // will eventually call reportEvents                                      // 9096\n\t\t}                                                                                                                    // 9097\n\t}                                                                                                                     // 9098\n                                                                                                                       // 9099\n                                                                                                                       // 9100\n\tfunction buildEventSource(sourceInput) { // will return undefined if invalid source                                   // 9101\n\t\tvar normalizers = fc.sourceNormalizers;                                                                              // 9102\n\t\tvar source;                                                                                                          // 9103\n\t\tvar i;                                                                                                               // 9104\n                                                                                                                       // 9105\n\t\tif ($.isFunction(sourceInput) || $.isArray(sourceInput)) {                                                           // 9106\n\t\t\tsource = { events: sourceInput };                                                                                   // 9107\n\t\t}                                                                                                                    // 9108\n\t\telse if (typeof sourceInput === 'string') {                                                                          // 9109\n\t\t\tsource = { url: sourceInput };                                                                                      // 9110\n\t\t}                                                                                                                    // 9111\n\t\telse if (typeof sourceInput === 'object') {                                                                          // 9112\n\t\t\tsource = $.extend({}, sourceInput); // shallow copy                                                                 // 9113\n\t\t}                                                                                                                    // 9114\n                                                                                                                       // 9115\n\t\tif (source) {                                                                                                        // 9116\n                                                                                                                       // 9117\n\t\t\t// TODO: repeat code, same code for event classNames                                                                // 9118\n\t\t\tif (source.className) {                                                                                             // 9119\n\t\t\t\tif (typeof source.className === 'string') {                                                                        // 9120\n\t\t\t\t\tsource.className = source.className.split(/\\s+/);                                                                 // 9121\n\t\t\t\t}                                                                                                                  // 9122\n\t\t\t\t// otherwise, assumed to be an array                                                                               // 9123\n\t\t\t}                                                                                                                   // 9124\n\t\t\telse {                                                                                                              // 9125\n\t\t\t\tsource.className = [];                                                                                             // 9126\n\t\t\t}                                                                                                                   // 9127\n                                                                                                                       // 9128\n\t\t\t// for array sources, we convert to standard Event Objects up front                                                 // 9129\n\t\t\tif ($.isArray(source.events)) {                                                                                     // 9130\n\t\t\t\tsource.origArray = source.events; // for removeEventSource                                                         // 9131\n\t\t\t\tsource.events = $.map(source.events, function(eventInput) {                                                        // 9132\n\t\t\t\t\treturn buildEventFromInput(eventInput, source);                                                                   // 9133\n\t\t\t\t});                                                                                                                // 9134\n\t\t\t}                                                                                                                   // 9135\n                                                                                                                       // 9136\n\t\t\tfor (i=0; i<normalizers.length; i++) {                                                                              // 9137\n\t\t\t\tnormalizers[i].call(t, source);                                                                                    // 9138\n\t\t\t}                                                                                                                   // 9139\n                                                                                                                       // 9140\n\t\t\treturn source;                                                                                                      // 9141\n\t\t}                                                                                                                    // 9142\n\t}                                                                                                                     // 9143\n                                                                                                                       // 9144\n                                                                                                                       // 9145\n\tfunction removeEventSource(source) {                                                                                  // 9146\n\t\tsources = $.grep(sources, function(src) {                                                                            // 9147\n\t\t\treturn !isSourcesEqual(src, source);                                                                                // 9148\n\t\t});                                                                                                                  // 9149\n\t\t// remove all client events from that source                                                                         // 9150\n\t\tcache = $.grep(cache, function(e) {                                                                                  // 9151\n\t\t\treturn !isSourcesEqual(e.source, source);                                                                           // 9152\n\t\t});                                                                                                                  // 9153\n\t\treportEvents(cache);                                                                                                 // 9154\n\t}                                                                                                                     // 9155\n                                                                                                                       // 9156\n                                                                                                                       // 9157\n\tfunction isSourcesEqual(source1, source2) {                                                                           // 9158\n\t\treturn source1 && source2 && getSourcePrimitive(source1) == getSourcePrimitive(source2);                             // 9159\n\t}                                                                                                                     // 9160\n                                                                                                                       // 9161\n                                                                                                                       // 9162\n\tfunction getSourcePrimitive(source) {                                                                                 // 9163\n\t\treturn (                                                                                                             // 9164\n\t\t\t(typeof source === 'object') ? // a normalized event source?                                                        // 9165\n\t\t\t\t(source.origArray || source.googleCalendarId || source.url || source.events) : // get the primitive                // 9166\n\t\t\t\tnull                                                                                                               // 9167\n\t\t) ||                                                                                                                 // 9168\n\t\tsource; // the given argument *is* the primitive                                                                     // 9169\n\t}                                                                                                                     // 9170\n\t                                                                                                                      // 9171\n\t                                                                                                                      // 9172\n\t                                                                                                                      // 9173\n\t/* Manipulation                                                                                                       // 9174\n\t-----------------------------------------------------------------------------*/                                       // 9175\n                                                                                                                       // 9176\n                                                                                                                       // 9177\n\t// Only ever called from the externally-facing API                                                                    // 9178\n\tfunction updateEvent(event) {                                                                                         // 9179\n                                                                                                                       // 9180\n\t\t// massage start/end values, even if date string values                                                              // 9181\n\t\tevent.start = t.moment(event.start);                                                                                 // 9182\n\t\tif (event.end) {                                                                                                     // 9183\n\t\t\tevent.end = t.moment(event.end);                                                                                    // 9184\n\t\t}                                                                                                                    // 9185\n\t\telse {                                                                                                               // 9186\n\t\t\tevent.end = null;                                                                                                   // 9187\n\t\t}                                                                                                                    // 9188\n                                                                                                                       // 9189\n\t\tmutateEvent(event, getMiscEventProps(event)); // will handle start/end/allDay normalization                          // 9190\n\t\treportEvents(cache); // reports event modifications (so we can redraw)                                               // 9191\n\t}                                                                                                                     // 9192\n                                                                                                                       // 9193\n                                                                                                                       // 9194\n\t// Returns a hash of misc event properties that should be copied over to related events.                              // 9195\n\tfunction getMiscEventProps(event) {                                                                                   // 9196\n\t\tvar props = {};                                                                                                      // 9197\n                                                                                                                       // 9198\n\t\t$.each(event, function(name, val) {                                                                                  // 9199\n\t\t\tif (isMiscEventPropName(name)) {                                                                                    // 9200\n\t\t\t\tif (val !== undefined && isAtomic(val)) { // a defined non-object                                                  // 9201\n\t\t\t\t\tprops[name] = val;                                                                                                // 9202\n\t\t\t\t}                                                                                                                  // 9203\n\t\t\t}                                                                                                                   // 9204\n\t\t});                                                                                                                  // 9205\n                                                                                                                       // 9206\n\t\treturn props;                                                                                                        // 9207\n\t}                                                                                                                     // 9208\n                                                                                                                       // 9209\n\t// non-date-related, non-id-related, non-secret                                                                       // 9210\n\tfunction isMiscEventPropName(name) {                                                                                  // 9211\n\t\treturn !/^_|^(id|allDay|start|end)$/.test(name);                                                                     // 9212\n\t}                                                                                                                     // 9213\n                                                                                                                       // 9214\n\t                                                                                                                      // 9215\n\t// returns the expanded events that were created                                                                      // 9216\n\tfunction renderEvent(eventInput, stick) {                                                                             // 9217\n\t\tvar abstractEvent = buildEventFromInput(eventInput);                                                                 // 9218\n\t\tvar events;                                                                                                          // 9219\n\t\tvar i, event;                                                                                                        // 9220\n                                                                                                                       // 9221\n\t\tif (abstractEvent) { // not false (a valid input)                                                                    // 9222\n\t\t\tevents = expandEvent(abstractEvent);                                                                                // 9223\n                                                                                                                       // 9224\n\t\t\tfor (i = 0; i < events.length; i++) {                                                                               // 9225\n\t\t\t\tevent = events[i];                                                                                                 // 9226\n                                                                                                                       // 9227\n\t\t\t\tif (!event.source) {                                                                                               // 9228\n\t\t\t\t\tif (stick) {                                                                                                      // 9229\n\t\t\t\t\t\tstickySource.events.push(event);                                                                                 // 9230\n\t\t\t\t\t\tevent.source = stickySource;                                                                                     // 9231\n\t\t\t\t\t}                                                                                                                 // 9232\n\t\t\t\t\tcache.push(event);                                                                                                // 9233\n\t\t\t\t}                                                                                                                  // 9234\n\t\t\t}                                                                                                                   // 9235\n                                                                                                                       // 9236\n\t\t\treportEvents(cache);                                                                                                // 9237\n                                                                                                                       // 9238\n\t\t\treturn events;                                                                                                      // 9239\n\t\t}                                                                                                                    // 9240\n                                                                                                                       // 9241\n\t\treturn [];                                                                                                           // 9242\n\t}                                                                                                                     // 9243\n\t                                                                                                                      // 9244\n\t                                                                                                                      // 9245\n\tfunction removeEvents(filter) {                                                                                       // 9246\n\t\tvar eventID;                                                                                                         // 9247\n\t\tvar i;                                                                                                               // 9248\n                                                                                                                       // 9249\n\t\tif (filter == null) { // null or undefined. remove all events                                                        // 9250\n\t\t\tfilter = function() { return true; }; // will always match                                                          // 9251\n\t\t}                                                                                                                    // 9252\n\t\telse if (!$.isFunction(filter)) { // an event ID                                                                     // 9253\n\t\t\teventID = filter + '';                                                                                              // 9254\n\t\t\tfilter = function(event) {                                                                                          // 9255\n\t\t\t\treturn event._id == eventID;                                                                                       // 9256\n\t\t\t};                                                                                                                  // 9257\n\t\t}                                                                                                                    // 9258\n                                                                                                                       // 9259\n\t\t// Purge event(s) from our local cache                                                                               // 9260\n\t\tcache = $.grep(cache, filter, true); // inverse=true                                                                 // 9261\n                                                                                                                       // 9262\n\t\t// Remove events from array sources.                                                                                 // 9263\n\t\t// This works because they have been converted to official Event Objects up front.                                   // 9264\n\t\t// (and as a result, event._id has been calculated).                                                                 // 9265\n\t\tfor (i=0; i<sources.length; i++) {                                                                                   // 9266\n\t\t\tif ($.isArray(sources[i].events)) {                                                                                 // 9267\n\t\t\t\tsources[i].events = $.grep(sources[i].events, filter, true);                                                       // 9268\n\t\t\t}                                                                                                                   // 9269\n\t\t}                                                                                                                    // 9270\n                                                                                                                       // 9271\n\t\treportEvents(cache);                                                                                                 // 9272\n\t}                                                                                                                     // 9273\n\t                                                                                                                      // 9274\n\t                                                                                                                      // 9275\n\tfunction clientEvents(filter) {                                                                                       // 9276\n\t\tif ($.isFunction(filter)) {                                                                                          // 9277\n\t\t\treturn $.grep(cache, filter);                                                                                       // 9278\n\t\t}                                                                                                                    // 9279\n\t\telse if (filter != null) { // not null, not undefined. an event ID                                                   // 9280\n\t\t\tfilter += '';                                                                                                       // 9281\n\t\t\treturn $.grep(cache, function(e) {                                                                                  // 9282\n\t\t\t\treturn e._id == filter;                                                                                            // 9283\n\t\t\t});                                                                                                                 // 9284\n\t\t}                                                                                                                    // 9285\n\t\treturn cache; // else, return all                                                                                    // 9286\n\t}                                                                                                                     // 9287\n\t                                                                                                                      // 9288\n\t                                                                                                                      // 9289\n\t                                                                                                                      // 9290\n\t/* Loading State                                                                                                      // 9291\n\t-----------------------------------------------------------------------------*/                                       // 9292\n\t                                                                                                                      // 9293\n\t                                                                                                                      // 9294\n\tfunction pushLoading() {                                                                                              // 9295\n\t\tif (!(loadingLevel++)) {                                                                                             // 9296\n\t\t\ttrigger('loading', null, true, getView());                                                                          // 9297\n\t\t}                                                                                                                    // 9298\n\t}                                                                                                                     // 9299\n\t                                                                                                                      // 9300\n\t                                                                                                                      // 9301\n\tfunction popLoading() {                                                                                               // 9302\n\t\tif (!(--loadingLevel)) {                                                                                             // 9303\n\t\t\ttrigger('loading', null, false, getView());                                                                         // 9304\n\t\t}                                                                                                                    // 9305\n\t}                                                                                                                     // 9306\n\t                                                                                                                      // 9307\n\t                                                                                                                      // 9308\n\t                                                                                                                      // 9309\n\t/* Event Normalization                                                                                                // 9310\n\t-----------------------------------------------------------------------------*/                                       // 9311\n                                                                                                                       // 9312\n                                                                                                                       // 9313\n\t// Given a raw object with key/value properties, returns an \"abstract\" Event object.                                  // 9314\n\t// An \"abstract\" event is an event that, if recurring, will not have been expanded yet.                               // 9315\n\t// Will return `false` when input is invalid.                                                                         // 9316\n\t// `source` is optional                                                                                               // 9317\n\tfunction buildEventFromInput(input, source) {                                                                         // 9318\n\t\tvar out = {};                                                                                                        // 9319\n\t\tvar start, end;                                                                                                      // 9320\n\t\tvar allDay;                                                                                                          // 9321\n                                                                                                                       // 9322\n\t\tif (options.eventDataTransform) {                                                                                    // 9323\n\t\t\tinput = options.eventDataTransform(input);                                                                          // 9324\n\t\t}                                                                                                                    // 9325\n\t\tif (source && source.eventDataTransform) {                                                                           // 9326\n\t\t\tinput = source.eventDataTransform(input);                                                                           // 9327\n\t\t}                                                                                                                    // 9328\n                                                                                                                       // 9329\n\t\t// Copy all properties over to the resulting object.                                                                 // 9330\n\t\t// The special-case properties will be copied over afterwards.                                                       // 9331\n\t\t$.extend(out, input);                                                                                                // 9332\n                                                                                                                       // 9333\n\t\tif (source) {                                                                                                        // 9334\n\t\t\tout.source = source;                                                                                                // 9335\n\t\t}                                                                                                                    // 9336\n                                                                                                                       // 9337\n\t\tout._id = input._id || (input.id === undefined ? '_fc' + eventGUID++ : input.id + '');                               // 9338\n                                                                                                                       // 9339\n\t\tif (input.className) {                                                                                               // 9340\n\t\t\tif (typeof input.className == 'string') {                                                                           // 9341\n\t\t\t\tout.className = input.className.split(/\\s+/);                                                                      // 9342\n\t\t\t}                                                                                                                   // 9343\n\t\t\telse { // assumed to be an array                                                                                    // 9344\n\t\t\t\tout.className = input.className;                                                                                   // 9345\n\t\t\t}                                                                                                                   // 9346\n\t\t}                                                                                                                    // 9347\n\t\telse {                                                                                                               // 9348\n\t\t\tout.className = [];                                                                                                 // 9349\n\t\t}                                                                                                                    // 9350\n                                                                                                                       // 9351\n\t\tstart = input.start || input.date; // \"date\" is an alias for \"start\"                                                 // 9352\n\t\tend = input.end;                                                                                                     // 9353\n                                                                                                                       // 9354\n\t\t// parse as a time (Duration) if applicable                                                                          // 9355\n\t\tif (isTimeString(start)) {                                                                                           // 9356\n\t\t\tstart = moment.duration(start);                                                                                     // 9357\n\t\t}                                                                                                                    // 9358\n\t\tif (isTimeString(end)) {                                                                                             // 9359\n\t\t\tend = moment.duration(end);                                                                                         // 9360\n\t\t}                                                                                                                    // 9361\n                                                                                                                       // 9362\n\t\tif (input.dow || moment.isDuration(start) || moment.isDuration(end)) {                                               // 9363\n                                                                                                                       // 9364\n\t\t\t// the event is \"abstract\" (recurring) so don't calculate exact start/end dates just yet                            // 9365\n\t\t\tout.start = start ? moment.duration(start) : null; // will be a Duration or null                                    // 9366\n\t\t\tout.end = end ? moment.duration(end) : null; // will be a Duration or null                                          // 9367\n\t\t\tout._recurring = true; // our internal marker                                                                       // 9368\n\t\t}                                                                                                                    // 9369\n\t\telse {                                                                                                               // 9370\n                                                                                                                       // 9371\n\t\t\tif (start) {                                                                                                        // 9372\n\t\t\t\tstart = t.moment(start);                                                                                           // 9373\n\t\t\t\tif (!start.isValid()) {                                                                                            // 9374\n\t\t\t\t\treturn false;                                                                                                     // 9375\n\t\t\t\t}                                                                                                                  // 9376\n\t\t\t}                                                                                                                   // 9377\n                                                                                                                       // 9378\n\t\t\tif (end) {                                                                                                          // 9379\n\t\t\t\tend = t.moment(end);                                                                                               // 9380\n\t\t\t\tif (!end.isValid()) {                                                                                              // 9381\n\t\t\t\t\tend = null; // let defaults take over                                                                             // 9382\n\t\t\t\t}                                                                                                                  // 9383\n\t\t\t}                                                                                                                   // 9384\n                                                                                                                       // 9385\n\t\t\tallDay = input.allDay;                                                                                              // 9386\n\t\t\tif (allDay === undefined) { // still undefined? fallback to default                                                 // 9387\n\t\t\t\tallDay = firstDefined(                                                                                             // 9388\n\t\t\t\t\tsource ? source.allDayDefault : undefined,                                                                        // 9389\n\t\t\t\t\toptions.allDayDefault                                                                                             // 9390\n\t\t\t\t);                                                                                                                 // 9391\n\t\t\t\t// still undefined? normalizeEventRange will calculate it                                                          // 9392\n\t\t\t}                                                                                                                   // 9393\n                                                                                                                       // 9394\n\t\t\tassignDatesToEvent(start, end, allDay, out);                                                                        // 9395\n\t\t}                                                                                                                    // 9396\n                                                                                                                       // 9397\n\t\treturn out;                                                                                                          // 9398\n\t}                                                                                                                     // 9399\n                                                                                                                       // 9400\n                                                                                                                       // 9401\n\t// Normalizes and assigns the given dates to the given partially-formed event object.                                 // 9402\n\t// NOTE: mutates the given start/end moments. does not make a copy.                                                   // 9403\n\tfunction assignDatesToEvent(start, end, allDay, event) {                                                              // 9404\n\t\tevent.start = start;                                                                                                 // 9405\n\t\tevent.end = end;                                                                                                     // 9406\n\t\tevent.allDay = allDay;                                                                                               // 9407\n\t\tnormalizeEventRange(event);                                                                                          // 9408\n\t\tbackupEventDates(event);                                                                                             // 9409\n\t}                                                                                                                     // 9410\n                                                                                                                       // 9411\n                                                                                                                       // 9412\n\t// Ensures proper values for allDay/start/end. Accepts an Event object, or a plain object with event-ish properties.  // 9413\n\t// NOTE: Will modify the given object.                                                                                // 9414\n\tfunction normalizeEventRange(props) {                                                                                 // 9415\n                                                                                                                       // 9416\n\t\tnormalizeEventRangeTimes(props);                                                                                     // 9417\n                                                                                                                       // 9418\n\t\tif (props.end && !props.end.isAfter(props.start)) {                                                                  // 9419\n\t\t\tprops.end = null;                                                                                                   // 9420\n\t\t}                                                                                                                    // 9421\n                                                                                                                       // 9422\n\t\tif (!props.end) {                                                                                                    // 9423\n\t\t\tif (options.forceEventDuration) {                                                                                   // 9424\n\t\t\t\tprops.end = t.getDefaultEventEnd(props.allDay, props.start);                                                       // 9425\n\t\t\t}                                                                                                                   // 9426\n\t\t\telse {                                                                                                              // 9427\n\t\t\t\tprops.end = null;                                                                                                  // 9428\n\t\t\t}                                                                                                                   // 9429\n\t\t}                                                                                                                    // 9430\n\t}                                                                                                                     // 9431\n                                                                                                                       // 9432\n                                                                                                                       // 9433\n\t// Ensures the allDay property exists and the timeliness of the start/end dates are consistent                        // 9434\n\tfunction normalizeEventRangeTimes(range) {                                                                            // 9435\n\t\tif (range.allDay == null) {                                                                                          // 9436\n\t\t\trange.allDay = !(range.start.hasTime() || (range.end && range.end.hasTime()));                                      // 9437\n\t\t}                                                                                                                    // 9438\n                                                                                                                       // 9439\n\t\tif (range.allDay) {                                                                                                  // 9440\n\t\t\trange.start.stripTime();                                                                                            // 9441\n\t\t\tif (range.end) {                                                                                                    // 9442\n\t\t\t\t// TODO: consider nextDayThreshold here? If so, will require a lot of testing and adjustment                       // 9443\n\t\t\t\trange.end.stripTime();                                                                                             // 9444\n\t\t\t}                                                                                                                   // 9445\n\t\t}                                                                                                                    // 9446\n\t\telse {                                                                                                               // 9447\n\t\t\tif (!range.start.hasTime()) {                                                                                       // 9448\n\t\t\t\trange.start = t.rezoneDate(range.start); // will assign a 00:00 time                                               // 9449\n\t\t\t}                                                                                                                   // 9450\n\t\t\tif (range.end && !range.end.hasTime()) {                                                                            // 9451\n\t\t\t\trange.end = t.rezoneDate(range.end); // will assign a 00:00 time                                                   // 9452\n\t\t\t}                                                                                                                   // 9453\n\t\t}                                                                                                                    // 9454\n\t}                                                                                                                     // 9455\n                                                                                                                       // 9456\n                                                                                                                       // 9457\n\t// If `range` is a proper range with a start and end, returns the original object.                                    // 9458\n\t// If missing an end, computes a new range with an end, computing it as if it were an event.                          // 9459\n\t// TODO: make this a part of the event -> eventRange system                                                           // 9460\n\tfunction ensureVisibleEventRange(range) {                                                                             // 9461\n\t\tvar allDay;                                                                                                          // 9462\n                                                                                                                       // 9463\n\t\tif (!range.end) {                                                                                                    // 9464\n                                                                                                                       // 9465\n\t\t\tallDay = range.allDay; // range might be more event-ish than we think                                               // 9466\n\t\t\tif (allDay == null) {                                                                                               // 9467\n\t\t\t\tallDay = !range.start.hasTime();                                                                                   // 9468\n\t\t\t}                                                                                                                   // 9469\n                                                                                                                       // 9470\n\t\t\trange = $.extend({}, range); // make a copy, copying over other misc properties                                     // 9471\n\t\t\trange.end = t.getDefaultEventEnd(allDay, range.start);                                                              // 9472\n\t\t}                                                                                                                    // 9473\n\t\treturn range;                                                                                                        // 9474\n\t}                                                                                                                     // 9475\n                                                                                                                       // 9476\n                                                                                                                       // 9477\n\t// If the given event is a recurring event, break it down into an array of individual instances.                      // 9478\n\t// If not a recurring event, return an array with the single original event.                                          // 9479\n\t// If given a falsy input (probably because of a failed buildEventFromInput call), returns an empty array.            // 9480\n\t// HACK: can override the recurring window by providing custom rangeStart/rangeEnd (for businessHours).               // 9481\n\tfunction expandEvent(abstractEvent, _rangeStart, _rangeEnd) {                                                         // 9482\n\t\tvar events = [];                                                                                                     // 9483\n\t\tvar dowHash;                                                                                                         // 9484\n\t\tvar dow;                                                                                                             // 9485\n\t\tvar i;                                                                                                               // 9486\n\t\tvar date;                                                                                                            // 9487\n\t\tvar startTime, endTime;                                                                                              // 9488\n\t\tvar start, end;                                                                                                      // 9489\n\t\tvar event;                                                                                                           // 9490\n                                                                                                                       // 9491\n\t\t_rangeStart = _rangeStart || rangeStart;                                                                             // 9492\n\t\t_rangeEnd = _rangeEnd || rangeEnd;                                                                                   // 9493\n                                                                                                                       // 9494\n\t\tif (abstractEvent) {                                                                                                 // 9495\n\t\t\tif (abstractEvent._recurring) {                                                                                     // 9496\n                                                                                                                       // 9497\n\t\t\t\t// make a boolean hash as to whether the event occurs on each day-of-week                                          // 9498\n\t\t\t\tif ((dow = abstractEvent.dow)) {                                                                                   // 9499\n\t\t\t\t\tdowHash = {};                                                                                                     // 9500\n\t\t\t\t\tfor (i = 0; i < dow.length; i++) {                                                                                // 9501\n\t\t\t\t\t\tdowHash[dow[i]] = true;                                                                                          // 9502\n\t\t\t\t\t}                                                                                                                 // 9503\n\t\t\t\t}                                                                                                                  // 9504\n                                                                                                                       // 9505\n\t\t\t\t// iterate through every day in the current range                                                                  // 9506\n\t\t\t\tdate = _rangeStart.clone().stripTime(); // holds the date of the current day                                       // 9507\n\t\t\t\twhile (date.isBefore(_rangeEnd)) {                                                                                 // 9508\n                                                                                                                       // 9509\n\t\t\t\t\tif (!dowHash || dowHash[date.day()]) { // if everyday, or this particular day-of-week                             // 9510\n                                                                                                                       // 9511\n\t\t\t\t\t\tstartTime = abstractEvent.start; // the stored start and end properties are times (Durations)                    // 9512\n\t\t\t\t\t\tendTime = abstractEvent.end; // \"                                                                                // 9513\n\t\t\t\t\t\tstart = date.clone();                                                                                            // 9514\n\t\t\t\t\t\tend = null;                                                                                                      // 9515\n                                                                                                                       // 9516\n\t\t\t\t\t\tif (startTime) {                                                                                                 // 9517\n\t\t\t\t\t\t\tstart = start.time(startTime);                                                                                  // 9518\n\t\t\t\t\t\t}                                                                                                                // 9519\n\t\t\t\t\t\tif (endTime) {                                                                                                   // 9520\n\t\t\t\t\t\t\tend = date.clone().time(endTime);                                                                               // 9521\n\t\t\t\t\t\t}                                                                                                                // 9522\n                                                                                                                       // 9523\n\t\t\t\t\t\tevent = $.extend({}, abstractEvent); // make a copy of the original                                              // 9524\n\t\t\t\t\t\tassignDatesToEvent(                                                                                              // 9525\n\t\t\t\t\t\t\tstart, end,                                                                                                     // 9526\n\t\t\t\t\t\t\t!startTime && !endTime, // allDay?                                                                              // 9527\n\t\t\t\t\t\t\tevent                                                                                                           // 9528\n\t\t\t\t\t\t);                                                                                                               // 9529\n\t\t\t\t\t\tevents.push(event);                                                                                              // 9530\n\t\t\t\t\t}                                                                                                                 // 9531\n                                                                                                                       // 9532\n\t\t\t\t\tdate.add(1, 'days');                                                                                              // 9533\n\t\t\t\t}                                                                                                                  // 9534\n\t\t\t}                                                                                                                   // 9535\n\t\t\telse {                                                                                                              // 9536\n\t\t\t\tevents.push(abstractEvent); // return the original event. will be a one-item array                                 // 9537\n\t\t\t}                                                                                                                   // 9538\n\t\t}                                                                                                                    // 9539\n                                                                                                                       // 9540\n\t\treturn events;                                                                                                       // 9541\n\t}                                                                                                                     // 9542\n                                                                                                                       // 9543\n                                                                                                                       // 9544\n                                                                                                                       // 9545\n\t/* Event Modification Math                                                                                            // 9546\n\t-----------------------------------------------------------------------------------------*/                           // 9547\n                                                                                                                       // 9548\n                                                                                                                       // 9549\n\t// Modifies an event and all related events by applying the given properties.                                         // 9550\n\t// Special date-diffing logic is used for manipulation of dates.                                                      // 9551\n\t// If `props` does not contain start/end dates, the updated values are assumed to be the event's current start/end.   // 9552\n\t// All date comparisons are done against the event's pristine _start and _end dates.                                  // 9553\n\t// Returns an object with delta information and a function to undo all operations.                                    // 9554\n\t// For making computations in a granularity greater than day/time, specify largeUnit.                                 // 9555\n\t// NOTE: The given `newProps` might be mutated for normalization purposes.                                            // 9556\n\tfunction mutateEvent(event, newProps, largeUnit) {                                                                    // 9557\n\t\tvar miscProps = {};                                                                                                  // 9558\n\t\tvar oldProps;                                                                                                        // 9559\n\t\tvar clearEnd;                                                                                                        // 9560\n\t\tvar startDelta;                                                                                                      // 9561\n\t\tvar endDelta;                                                                                                        // 9562\n\t\tvar durationDelta;                                                                                                   // 9563\n\t\tvar undoFunc;                                                                                                        // 9564\n                                                                                                                       // 9565\n\t\t// diffs the dates in the appropriate way, returning a duration                                                      // 9566\n\t\tfunction diffDates(date1, date0) { // date1 - date0                                                                  // 9567\n\t\t\tif (largeUnit) {                                                                                                    // 9568\n\t\t\t\treturn diffByUnit(date1, date0, largeUnit);                                                                        // 9569\n\t\t\t}                                                                                                                   // 9570\n\t\t\telse if (newProps.allDay) {                                                                                         // 9571\n\t\t\t\treturn diffDay(date1, date0);                                                                                      // 9572\n\t\t\t}                                                                                                                   // 9573\n\t\t\telse {                                                                                                              // 9574\n\t\t\t\treturn diffDayTime(date1, date0);                                                                                  // 9575\n\t\t\t}                                                                                                                   // 9576\n\t\t}                                                                                                                    // 9577\n                                                                                                                       // 9578\n\t\tnewProps = newProps || {};                                                                                           // 9579\n                                                                                                                       // 9580\n\t\t// normalize new date-related properties                                                                             // 9581\n\t\tif (!newProps.start) {                                                                                               // 9582\n\t\t\tnewProps.start = event.start.clone();                                                                               // 9583\n\t\t}                                                                                                                    // 9584\n\t\tif (newProps.end === undefined) {                                                                                    // 9585\n\t\t\tnewProps.end = event.end ? event.end.clone() : null;                                                                // 9586\n\t\t}                                                                                                                    // 9587\n\t\tif (newProps.allDay == null) { // is null or undefined?                                                              // 9588\n\t\t\tnewProps.allDay = event.allDay;                                                                                     // 9589\n\t\t}                                                                                                                    // 9590\n\t\tnormalizeEventRange(newProps);                                                                                       // 9591\n                                                                                                                       // 9592\n\t\t// create normalized versions of the original props to compare against                                               // 9593\n\t\t// need a real end value, for diffing                                                                                // 9594\n\t\toldProps = {                                                                                                         // 9595\n\t\t\tstart: event._start.clone(),                                                                                        // 9596\n\t\t\tend: event._end ? event._end.clone() : t.getDefaultEventEnd(event._allDay, event._start),                           // 9597\n\t\t\tallDay: newProps.allDay // normalize the dates in the same regard as the new properties                             // 9598\n\t\t};                                                                                                                   // 9599\n\t\tnormalizeEventRange(oldProps);                                                                                       // 9600\n                                                                                                                       // 9601\n\t\t// need to clear the end date if explicitly changed to null                                                          // 9602\n\t\tclearEnd = event._end !== null && newProps.end === null;                                                             // 9603\n                                                                                                                       // 9604\n\t\t// compute the delta for moving the start date                                                                       // 9605\n\t\tstartDelta = diffDates(newProps.start, oldProps.start);                                                              // 9606\n                                                                                                                       // 9607\n\t\t// compute the delta for moving the end date                                                                         // 9608\n\t\tif (newProps.end) {                                                                                                  // 9609\n\t\t\tendDelta = diffDates(newProps.end, oldProps.end);                                                                   // 9610\n\t\t\tdurationDelta = endDelta.subtract(startDelta);                                                                      // 9611\n\t\t}                                                                                                                    // 9612\n\t\telse {                                                                                                               // 9613\n\t\t\tdurationDelta = null;                                                                                               // 9614\n\t\t}                                                                                                                    // 9615\n                                                                                                                       // 9616\n\t\t// gather all non-date-related properties                                                                            // 9617\n\t\t$.each(newProps, function(name, val) {                                                                               // 9618\n\t\t\tif (isMiscEventPropName(name)) {                                                                                    // 9619\n\t\t\t\tif (val !== undefined) {                                                                                           // 9620\n\t\t\t\t\tmiscProps[name] = val;                                                                                            // 9621\n\t\t\t\t}                                                                                                                  // 9622\n\t\t\t}                                                                                                                   // 9623\n\t\t});                                                                                                                  // 9624\n                                                                                                                       // 9625\n\t\t// apply the operations to the event and all related events                                                          // 9626\n\t\tundoFunc = mutateEvents(                                                                                             // 9627\n\t\t\tclientEvents(event._id), // get events with this ID                                                                 // 9628\n\t\t\tclearEnd,                                                                                                           // 9629\n\t\t\tnewProps.allDay,                                                                                                    // 9630\n\t\t\tstartDelta,                                                                                                         // 9631\n\t\t\tdurationDelta,                                                                                                      // 9632\n\t\t\tmiscProps                                                                                                           // 9633\n\t\t);                                                                                                                   // 9634\n                                                                                                                       // 9635\n\t\treturn {                                                                                                             // 9636\n\t\t\tdateDelta: startDelta,                                                                                              // 9637\n\t\t\tdurationDelta: durationDelta,                                                                                       // 9638\n\t\t\tundo: undoFunc                                                                                                      // 9639\n\t\t};                                                                                                                   // 9640\n\t}                                                                                                                     // 9641\n                                                                                                                       // 9642\n                                                                                                                       // 9643\n\t// Modifies an array of events in the following ways (operations are in order):                                       // 9644\n\t// - clear the event's `end`                                                                                          // 9645\n\t// - convert the event to allDay                                                                                      // 9646\n\t// - add `dateDelta` to the start and end                                                                             // 9647\n\t// - add `durationDelta` to the event's duration                                                                      // 9648\n\t// - assign `miscProps` to the event                                                                                  // 9649\n\t//                                                                                                                    // 9650\n\t// Returns a function that can be called to undo all the operations.                                                  // 9651\n\t//                                                                                                                    // 9652\n\t// TODO: don't use so many closures. possible memory issues when lots of events with same ID.                         // 9653\n\t//                                                                                                                    // 9654\n\tfunction mutateEvents(events, clearEnd, allDay, dateDelta, durationDelta, miscProps) {                                // 9655\n\t\tvar isAmbigTimezone = t.getIsAmbigTimezone();                                                                        // 9656\n\t\tvar undoFunctions = [];                                                                                              // 9657\n                                                                                                                       // 9658\n\t\t// normalize zero-length deltas to be null                                                                           // 9659\n\t\tif (dateDelta && !dateDelta.valueOf()) { dateDelta = null; }                                                         // 9660\n\t\tif (durationDelta && !durationDelta.valueOf()) { durationDelta = null; }                                             // 9661\n                                                                                                                       // 9662\n\t\t$.each(events, function(i, event) {                                                                                  // 9663\n\t\t\tvar oldProps;                                                                                                       // 9664\n\t\t\tvar newProps;                                                                                                       // 9665\n                                                                                                                       // 9666\n\t\t\t// build an object holding all the old values, both date-related and misc.                                          // 9667\n\t\t\t// for the undo function.                                                                                           // 9668\n\t\t\toldProps = {                                                                                                        // 9669\n\t\t\t\tstart: event.start.clone(),                                                                                        // 9670\n\t\t\t\tend: event.end ? event.end.clone() : null,                                                                         // 9671\n\t\t\t\tallDay: event.allDay                                                                                               // 9672\n\t\t\t};                                                                                                                  // 9673\n\t\t\t$.each(miscProps, function(name) {                                                                                  // 9674\n\t\t\t\toldProps[name] = event[name];                                                                                      // 9675\n\t\t\t});                                                                                                                 // 9676\n                                                                                                                       // 9677\n\t\t\t// new date-related properties. work off the original date snapshot.                                                // 9678\n\t\t\t// ok to use references because they will be thrown away when backupEventDates is called.                           // 9679\n\t\t\tnewProps = {                                                                                                        // 9680\n\t\t\t\tstart: event._start,                                                                                               // 9681\n\t\t\t\tend: event._end,                                                                                                   // 9682\n\t\t\t\tallDay: allDay // normalize the dates in the same regard as the new properties                                     // 9683\n\t\t\t};                                                                                                                  // 9684\n\t\t\tnormalizeEventRange(newProps); // massages start/end/allDay                                                         // 9685\n                                                                                                                       // 9686\n\t\t\t// strip or ensure the end date                                                                                     // 9687\n\t\t\tif (clearEnd) {                                                                                                     // 9688\n\t\t\t\tnewProps.end = null;                                                                                               // 9689\n\t\t\t}                                                                                                                   // 9690\n\t\t\telse if (durationDelta && !newProps.end) { // the duration translation requires an end date                         // 9691\n\t\t\t\tnewProps.end = t.getDefaultEventEnd(newProps.allDay, newProps.start);                                              // 9692\n\t\t\t}                                                                                                                   // 9693\n                                                                                                                       // 9694\n\t\t\tif (dateDelta) {                                                                                                    // 9695\n\t\t\t\tnewProps.start.add(dateDelta);                                                                                     // 9696\n\t\t\t\tif (newProps.end) {                                                                                                // 9697\n\t\t\t\t\tnewProps.end.add(dateDelta);                                                                                      // 9698\n\t\t\t\t}                                                                                                                  // 9699\n\t\t\t}                                                                                                                   // 9700\n                                                                                                                       // 9701\n\t\t\tif (durationDelta) {                                                                                                // 9702\n\t\t\t\tnewProps.end.add(durationDelta); // end already ensured above                                                      // 9703\n\t\t\t}                                                                                                                   // 9704\n                                                                                                                       // 9705\n\t\t\t// if the dates have changed, and we know it is impossible to recompute the                                         // 9706\n\t\t\t// timezone offsets, strip the zone.                                                                                // 9707\n\t\t\tif (                                                                                                                // 9708\n\t\t\t\tisAmbigTimezone &&                                                                                                 // 9709\n\t\t\t\t!newProps.allDay &&                                                                                                // 9710\n\t\t\t\t(dateDelta || durationDelta)                                                                                       // 9711\n\t\t\t) {                                                                                                                 // 9712\n\t\t\t\tnewProps.start.stripZone();                                                                                        // 9713\n\t\t\t\tif (newProps.end) {                                                                                                // 9714\n\t\t\t\t\tnewProps.end.stripZone();                                                                                         // 9715\n\t\t\t\t}                                                                                                                  // 9716\n\t\t\t}                                                                                                                   // 9717\n                                                                                                                       // 9718\n\t\t\t$.extend(event, miscProps, newProps); // copy over misc props, then date-related props                              // 9719\n\t\t\tbackupEventDates(event); // regenerate internal _start/_end/_allDay                                                 // 9720\n                                                                                                                       // 9721\n\t\t\tundoFunctions.push(function() {                                                                                     // 9722\n\t\t\t\t$.extend(event, oldProps);                                                                                         // 9723\n\t\t\t\tbackupEventDates(event); // regenerate internal _start/_end/_allDay                                                // 9724\n\t\t\t});                                                                                                                 // 9725\n\t\t});                                                                                                                  // 9726\n                                                                                                                       // 9727\n\t\treturn function() {                                                                                                  // 9728\n\t\t\tfor (var i = 0; i < undoFunctions.length; i++) {                                                                    // 9729\n\t\t\t\tundoFunctions[i]();                                                                                                // 9730\n\t\t\t}                                                                                                                   // 9731\n\t\t};                                                                                                                   // 9732\n\t}                                                                                                                     // 9733\n                                                                                                                       // 9734\n                                                                                                                       // 9735\n\t/* Business Hours                                                                                                     // 9736\n\t-----------------------------------------------------------------------------------------*/                           // 9737\n                                                                                                                       // 9738\n\tt.getBusinessHoursEvents = getBusinessHoursEvents;                                                                    // 9739\n                                                                                                                       // 9740\n                                                                                                                       // 9741\n\t// Returns an array of events as to when the business hours occur in the given view.                                  // 9742\n\t// Abuse of our event system :(                                                                                       // 9743\n\tfunction getBusinessHoursEvents(wholeDay) {                                                                           // 9744\n\t\tvar optionVal = options.businessHours;                                                                               // 9745\n\t\tvar defaultVal = {                                                                                                   // 9746\n\t\t\tclassName: 'fc-nonbusiness',                                                                                        // 9747\n\t\t\tstart: '09:00',                                                                                                     // 9748\n\t\t\tend: '17:00',                                                                                                       // 9749\n\t\t\tdow: [ 1, 2, 3, 4, 5 ], // monday - friday                                                                          // 9750\n\t\t\trendering: 'inverse-background'                                                                                     // 9751\n\t\t};                                                                                                                   // 9752\n\t\tvar view = t.getView();                                                                                              // 9753\n\t\tvar eventInput;                                                                                                      // 9754\n                                                                                                                       // 9755\n\t\tif (optionVal) { // `true` (which means \"use the defaults\") or an override object                                    // 9756\n\t\t\teventInput = $.extend(                                                                                              // 9757\n\t\t\t\t{}, // copy to a new object in either case                                                                         // 9758\n\t\t\t\tdefaultVal,                                                                                                        // 9759\n\t\t\t\ttypeof optionVal === 'object' ? optionVal : {} // override the defaults                                            // 9760\n\t\t\t);                                                                                                                  // 9761\n\t\t}                                                                                                                    // 9762\n                                                                                                                       // 9763\n\t\tif (eventInput) {                                                                                                    // 9764\n                                                                                                                       // 9765\n\t\t\t// if a whole-day series is requested, clear the start/end times                                                    // 9766\n\t\t\tif (wholeDay) {                                                                                                     // 9767\n\t\t\t\teventInput.start = null;                                                                                           // 9768\n\t\t\t\teventInput.end = null;                                                                                             // 9769\n\t\t\t}                                                                                                                   // 9770\n                                                                                                                       // 9771\n\t\t\treturn expandEvent(                                                                                                 // 9772\n\t\t\t\tbuildEventFromInput(eventInput),                                                                                   // 9773\n\t\t\t\tview.start,                                                                                                        // 9774\n\t\t\t\tview.end                                                                                                           // 9775\n\t\t\t);                                                                                                                  // 9776\n\t\t}                                                                                                                    // 9777\n                                                                                                                       // 9778\n\t\treturn [];                                                                                                           // 9779\n\t}                                                                                                                     // 9780\n                                                                                                                       // 9781\n                                                                                                                       // 9782\n\t/* Overlapping / Constraining                                                                                         // 9783\n\t-----------------------------------------------------------------------------------------*/                           // 9784\n                                                                                                                       // 9785\n\tt.isEventRangeAllowed = isEventRangeAllowed;                                                                          // 9786\n\tt.isSelectionRangeAllowed = isSelectionRangeAllowed;                                                                  // 9787\n\tt.isExternalDropRangeAllowed = isExternalDropRangeAllowed;                                                            // 9788\n                                                                                                                       // 9789\n                                                                                                                       // 9790\n\tfunction isEventRangeAllowed(range, event) {                                                                          // 9791\n\t\tvar source = event.source || {};                                                                                     // 9792\n\t\tvar constraint = firstDefined(                                                                                       // 9793\n\t\t\tevent.constraint,                                                                                                   // 9794\n\t\t\tsource.constraint,                                                                                                  // 9795\n\t\t\toptions.eventConstraint                                                                                             // 9796\n\t\t);                                                                                                                   // 9797\n\t\tvar overlap = firstDefined(                                                                                          // 9798\n\t\t\tevent.overlap,                                                                                                      // 9799\n\t\t\tsource.overlap,                                                                                                     // 9800\n\t\t\toptions.eventOverlap                                                                                                // 9801\n\t\t);                                                                                                                   // 9802\n                                                                                                                       // 9803\n\t\trange = ensureVisibleEventRange(range); // ensure a proper range with an end for isRangeAllowed                      // 9804\n                                                                                                                       // 9805\n\t\treturn isRangeAllowed(range, constraint, overlap, event);                                                            // 9806\n\t}                                                                                                                     // 9807\n                                                                                                                       // 9808\n                                                                                                                       // 9809\n\tfunction isSelectionRangeAllowed(range) {                                                                             // 9810\n\t\treturn isRangeAllowed(range, options.selectConstraint, options.selectOverlap);                                       // 9811\n\t}                                                                                                                     // 9812\n                                                                                                                       // 9813\n                                                                                                                       // 9814\n\t// when `eventProps` is defined, consider this an event.                                                              // 9815\n\t// `eventProps` can contain misc non-date-related info about the event.                                               // 9816\n\tfunction isExternalDropRangeAllowed(range, eventProps) {                                                              // 9817\n\t\tvar eventInput;                                                                                                      // 9818\n\t\tvar event;                                                                                                           // 9819\n                                                                                                                       // 9820\n\t\t// note: very similar logic is in View's reportExternalDrop                                                          // 9821\n\t\tif (eventProps) {                                                                                                    // 9822\n\t\t\teventInput = $.extend({}, eventProps, range);                                                                       // 9823\n\t\t\tevent = expandEvent(buildEventFromInput(eventInput))[0];                                                            // 9824\n\t\t}                                                                                                                    // 9825\n                                                                                                                       // 9826\n\t\tif (event) {                                                                                                         // 9827\n\t\t\treturn isEventRangeAllowed(range, event);                                                                           // 9828\n\t\t}                                                                                                                    // 9829\n\t\telse { // treat it as a selection                                                                                    // 9830\n                                                                                                                       // 9831\n\t\t\trange = ensureVisibleEventRange(range); // ensure a proper range with an end for isSelectionRangeAllowed            // 9832\n                                                                                                                       // 9833\n\t\t\treturn isSelectionRangeAllowed(range);                                                                              // 9834\n\t\t}                                                                                                                    // 9835\n\t}                                                                                                                     // 9836\n                                                                                                                       // 9837\n                                                                                                                       // 9838\n\t// Returns true if the given range (caused by an event drop/resize or a selection) is allowed to exist                // 9839\n\t// according to the constraint/overlap settings.                                                                      // 9840\n\t// `event` is not required if checking a selection.                                                                   // 9841\n\tfunction isRangeAllowed(range, constraint, overlap, event) {                                                          // 9842\n\t\tvar constraintEvents;                                                                                                // 9843\n\t\tvar anyContainment;                                                                                                  // 9844\n\t\tvar peerEvents;                                                                                                      // 9845\n\t\tvar i, peerEvent;                                                                                                    // 9846\n\t\tvar peerOverlap;                                                                                                     // 9847\n                                                                                                                       // 9848\n\t\t// normalize. fyi, we're normalizing in too many places :(                                                           // 9849\n\t\trange = $.extend({}, range); // copy all properties in case there are misc non-date properties                       // 9850\n\t\trange.start = range.start.clone().stripZone();                                                                       // 9851\n\t\trange.end = range.end.clone().stripZone();                                                                           // 9852\n                                                                                                                       // 9853\n\t\t// the range must be fully contained by at least one of produced constraint events                                   // 9854\n\t\tif (constraint != null) {                                                                                            // 9855\n                                                                                                                       // 9856\n\t\t\t// not treated as an event! intermediate data structure                                                             // 9857\n\t\t\t// TODO: use ranges in the future                                                                                   // 9858\n\t\t\tconstraintEvents = constraintToEvents(constraint);                                                                  // 9859\n                                                                                                                       // 9860\n\t\t\tanyContainment = false;                                                                                             // 9861\n\t\t\tfor (i = 0; i < constraintEvents.length; i++) {                                                                     // 9862\n\t\t\t\tif (eventContainsRange(constraintEvents[i], range)) {                                                              // 9863\n\t\t\t\t\tanyContainment = true;                                                                                            // 9864\n\t\t\t\t\tbreak;                                                                                                            // 9865\n\t\t\t\t}                                                                                                                  // 9866\n\t\t\t}                                                                                                                   // 9867\n                                                                                                                       // 9868\n\t\t\tif (!anyContainment) {                                                                                              // 9869\n\t\t\t\treturn false;                                                                                                      // 9870\n\t\t\t}                                                                                                                   // 9871\n\t\t}                                                                                                                    // 9872\n                                                                                                                       // 9873\n\t\tpeerEvents = t.getPeerEvents(event, range);                                                                          // 9874\n                                                                                                                       // 9875\n\t\tfor (i = 0; i < peerEvents.length; i++)  {                                                                           // 9876\n\t\t\tpeerEvent = peerEvents[i];                                                                                          // 9877\n                                                                                                                       // 9878\n\t\t\t// there needs to be an actual intersection before disallowing anything                                             // 9879\n\t\t\tif (eventIntersectsRange(peerEvent, range)) {                                                                       // 9880\n                                                                                                                       // 9881\n\t\t\t\t// evaluate overlap for the given range and short-circuit if necessary                                             // 9882\n\t\t\t\tif (overlap === false) {                                                                                           // 9883\n\t\t\t\t\treturn false;                                                                                                     // 9884\n\t\t\t\t}                                                                                                                  // 9885\n\t\t\t\t// if the event's overlap is a test function, pass the peer event in question as the first param                   // 9886\n\t\t\t\telse if (typeof overlap === 'function' && !overlap(peerEvent, event)) {                                            // 9887\n\t\t\t\t\treturn false;                                                                                                     // 9888\n\t\t\t\t}                                                                                                                  // 9889\n                                                                                                                       // 9890\n\t\t\t\t// if we are computing if the given range is allowable for an event, consider the other event's                    // 9891\n\t\t\t\t// EventObject-specific or Source-specific `overlap` property                                                      // 9892\n\t\t\t\tif (event) {                                                                                                       // 9893\n\t\t\t\t\tpeerOverlap = firstDefined(                                                                                       // 9894\n\t\t\t\t\t\tpeerEvent.overlap,                                                                                               // 9895\n\t\t\t\t\t\t(peerEvent.source || {}).overlap                                                                                 // 9896\n\t\t\t\t\t\t// we already considered the global `eventOverlap`                                                               // 9897\n\t\t\t\t\t);                                                                                                                // 9898\n\t\t\t\t\tif (peerOverlap === false) {                                                                                      // 9899\n\t\t\t\t\t\treturn false;                                                                                                    // 9900\n\t\t\t\t\t}                                                                                                                 // 9901\n\t\t\t\t\t// if the peer event's overlap is a test function, pass the subject event as the first param                      // 9902\n\t\t\t\t\tif (typeof peerOverlap === 'function' && !peerOverlap(event, peerEvent)) {                                        // 9903\n\t\t\t\t\t\treturn false;                                                                                                    // 9904\n\t\t\t\t\t}                                                                                                                 // 9905\n\t\t\t\t}                                                                                                                  // 9906\n\t\t\t}                                                                                                                   // 9907\n\t\t}                                                                                                                    // 9908\n                                                                                                                       // 9909\n\t\treturn true;                                                                                                         // 9910\n\t}                                                                                                                     // 9911\n                                                                                                                       // 9912\n                                                                                                                       // 9913\n\t// Given an event input from the API, produces an array of event objects. Possible event inputs:                      // 9914\n\t// 'businessHours'                                                                                                    // 9915\n\t// An event ID (number or string)                                                                                     // 9916\n\t// An object with specific start/end dates or a recurring event (like what businessHours accepts)                     // 9917\n\tfunction constraintToEvents(constraintInput) {                                                                        // 9918\n                                                                                                                       // 9919\n\t\tif (constraintInput === 'businessHours') {                                                                           // 9920\n\t\t\treturn getBusinessHoursEvents();                                                                                    // 9921\n\t\t}                                                                                                                    // 9922\n                                                                                                                       // 9923\n\t\tif (typeof constraintInput === 'object') {                                                                           // 9924\n\t\t\treturn expandEvent(buildEventFromInput(constraintInput));                                                           // 9925\n\t\t}                                                                                                                    // 9926\n                                                                                                                       // 9927\n\t\treturn clientEvents(constraintInput); // probably an ID                                                              // 9928\n\t}                                                                                                                     // 9929\n                                                                                                                       // 9930\n                                                                                                                       // 9931\n\t// Does the event's date range fully contain the given range?                                                         // 9932\n\t// start/end already assumed to have stripped zones :(                                                                // 9933\n\tfunction eventContainsRange(event, range) {                                                                           // 9934\n\t\tvar eventStart = event.start.clone().stripZone();                                                                    // 9935\n\t\tvar eventEnd = t.getEventEnd(event).stripZone();                                                                     // 9936\n                                                                                                                       // 9937\n\t\treturn range.start >= eventStart && range.end <= eventEnd;                                                           // 9938\n\t}                                                                                                                     // 9939\n                                                                                                                       // 9940\n                                                                                                                       // 9941\n\t// Does the event's date range intersect with the given range?                                                        // 9942\n\t// start/end already assumed to have stripped zones :(                                                                // 9943\n\tfunction eventIntersectsRange(event, range) {                                                                         // 9944\n\t\tvar eventStart = event.start.clone().stripZone();                                                                    // 9945\n\t\tvar eventEnd = t.getEventEnd(event).stripZone();                                                                     // 9946\n                                                                                                                       // 9947\n\t\treturn range.start < eventEnd && range.end > eventStart;                                                             // 9948\n\t}                                                                                                                     // 9949\n                                                                                                                       // 9950\n                                                                                                                       // 9951\n\tt.getEventCache = function() {                                                                                        // 9952\n\t\treturn cache;                                                                                                        // 9953\n\t};                                                                                                                    // 9954\n                                                                                                                       // 9955\n}                                                                                                                      // 9956\n                                                                                                                       // 9957\n                                                                                                                       // 9958\n// Returns a list of events that the given event should be compared against when being considered for a move to        // 9959\n// the specified range. Attached to the Calendar's prototype because EventManager is a mixin for a Calendar.           // 9960\nCalendar.prototype.getPeerEvents = function(event, range) {                                                            // 9961\n\tvar cache = this.getEventCache();                                                                                     // 9962\n\tvar peerEvents = [];                                                                                                  // 9963\n\tvar i, otherEvent;                                                                                                    // 9964\n                                                                                                                       // 9965\n\tfor (i = 0; i < cache.length; i++) {                                                                                  // 9966\n\t\totherEvent = cache[i];                                                                                               // 9967\n\t\tif (                                                                                                                 // 9968\n\t\t\t!event ||                                                                                                           // 9969\n\t\t\tevent._id !== otherEvent._id // don't compare the event to itself or other related [repeating] events               // 9970\n\t\t) {                                                                                                                  // 9971\n\t\t\tpeerEvents.push(otherEvent);                                                                                        // 9972\n\t\t}                                                                                                                    // 9973\n\t}                                                                                                                     // 9974\n                                                                                                                       // 9975\n\treturn peerEvents;                                                                                                    // 9976\n};                                                                                                                     // 9977\n                                                                                                                       // 9978\n                                                                                                                       // 9979\n// updates the \"backup\" properties, which are preserved in order to compute diffs later on.                            // 9980\nfunction backupEventDates(event) {                                                                                     // 9981\n\tevent._allDay = event.allDay;                                                                                         // 9982\n\tevent._start = event.start.clone();                                                                                   // 9983\n\tevent._end = event.end ? event.end.clone() : null;                                                                    // 9984\n}                                                                                                                      // 9985\n                                                                                                                       // 9986\n;;                                                                                                                     // 9987\n                                                                                                                       // 9988\n/* An abstract class for the \"basic\" views, as well as month view. Renders one or more rows of day cells.              // 9989\n----------------------------------------------------------------------------------------------------------------------*/\n// It is a manager for a DayGrid subcomponent, which does most of the heavy lifting.                                   // 9991\n// It is responsible for managing width/height.                                                                        // 9992\n                                                                                                                       // 9993\nvar BasicView = fcViews.basic = View.extend({                                                                          // 9994\n                                                                                                                       // 9995\n\tdayGrid: null, // the main subcomponent that does most of the heavy lifting                                           // 9996\n                                                                                                                       // 9997\n\tdayNumbersVisible: false, // display day numbers on each day cell?                                                    // 9998\n\tweekNumbersVisible: false, // display week numbers along the side?                                                    // 9999\n                                                                                                                       // 10000\n\tweekNumberWidth: null, // width of all the week-number cells running down the side                                    // 10001\n                                                                                                                       // 10002\n\theadRowEl: null, // the fake row element of the day-of-week header                                                    // 10003\n                                                                                                                       // 10004\n                                                                                                                       // 10005\n\tinitialize: function() {                                                                                              // 10006\n\t\tthis.dayGrid = new DayGrid(this);                                                                                    // 10007\n\t\tthis.coordMap = this.dayGrid.coordMap; // the view's date-to-cell mapping is identical to the subcomponent's         // 10008\n\t},                                                                                                                    // 10009\n                                                                                                                       // 10010\n                                                                                                                       // 10011\n\t// Sets the display range and computes all necessary dates                                                            // 10012\n\tsetRange: function(range) {                                                                                           // 10013\n\t\tView.prototype.setRange.call(this, range); // call the super-method                                                  // 10014\n                                                                                                                       // 10015\n\t\tthis.dayGrid.breakOnWeeks = /year|month|week/.test(this.intervalUnit); // do before setRange                         // 10016\n\t\tthis.dayGrid.setRange(range);                                                                                        // 10017\n\t},                                                                                                                    // 10018\n                                                                                                                       // 10019\n                                                                                                                       // 10020\n\t// Compute the value to feed into setRange. Overrides superclass.                                                     // 10021\n\tcomputeRange: function(date) {                                                                                        // 10022\n\t\tvar range = View.prototype.computeRange.call(this, date); // get value from the super-method                         // 10023\n                                                                                                                       // 10024\n\t\t// year and month views should be aligned with weeks. this is already done for week                                  // 10025\n\t\tif (/year|month/.test(range.intervalUnit)) {                                                                         // 10026\n\t\t\trange.start.startOf('week');                                                                                        // 10027\n\t\t\trange.start = this.skipHiddenDays(range.start);                                                                     // 10028\n                                                                                                                       // 10029\n\t\t\t// make end-of-week if not already                                                                                  // 10030\n\t\t\tif (range.end.weekday()) {                                                                                          // 10031\n\t\t\t\trange.end.add(1, 'week').startOf('week');                                                                          // 10032\n\t\t\t\trange.end = this.skipHiddenDays(range.end, -1, true); // exclusively move backwards                                // 10033\n\t\t\t}                                                                                                                   // 10034\n\t\t}                                                                                                                    // 10035\n                                                                                                                       // 10036\n\t\treturn range;                                                                                                        // 10037\n\t},                                                                                                                    // 10038\n                                                                                                                       // 10039\n                                                                                                                       // 10040\n\t// Renders the view into `this.el`, which should already be assigned                                                  // 10041\n\trender: function() {                                                                                                  // 10042\n                                                                                                                       // 10043\n\t\tthis.dayNumbersVisible = this.dayGrid.rowCnt > 1; // TODO: make grid responsible                                     // 10044\n\t\tthis.weekNumbersVisible = this.opt('weekNumbers');                                                                   // 10045\n\t\tthis.dayGrid.numbersVisible = this.dayNumbersVisible || this.weekNumbersVisible;                                     // 10046\n                                                                                                                       // 10047\n\t\tthis.el.addClass('fc-basic-view').html(this.renderHtml());                                                           // 10048\n                                                                                                                       // 10049\n\t\tthis.headRowEl = this.el.find('thead .fc-row');                                                                      // 10050\n                                                                                                                       // 10051\n\t\tthis.scrollerEl = this.el.find('.fc-day-grid-container');                                                            // 10052\n\t\tthis.dayGrid.coordMap.containerEl = this.scrollerEl; // constrain clicks/etc to the dimensions of the scroller       // 10053\n                                                                                                                       // 10054\n\t\tthis.dayGrid.setElement(this.el.find('.fc-day-grid'));                                                               // 10055\n\t\tthis.dayGrid.renderDates(this.hasRigidRows());                                                                       // 10056\n\t},                                                                                                                    // 10057\n                                                                                                                       // 10058\n                                                                                                                       // 10059\n\t// Unrenders the content of the view. Since we haven't separated skeleton rendering from date rendering,              // 10060\n\t// always completely kill the dayGrid's rendering.                                                                    // 10061\n\tdestroy: function() {                                                                                                 // 10062\n\t\tthis.dayGrid.destroyDates();                                                                                         // 10063\n\t\tthis.dayGrid.removeElement();                                                                                        // 10064\n\t},                                                                                                                    // 10065\n                                                                                                                       // 10066\n                                                                                                                       // 10067\n\trenderBusinessHours: function() {                                                                                     // 10068\n\t\tthis.dayGrid.renderBusinessHours();                                                                                  // 10069\n\t},                                                                                                                    // 10070\n                                                                                                                       // 10071\n                                                                                                                       // 10072\n\t// Builds the HTML skeleton for the view.                                                                             // 10073\n\t// The day-grid component will render inside of a container defined by this HTML.                                     // 10074\n\trenderHtml: function() {                                                                                              // 10075\n\t\treturn '' +                                                                                                          // 10076\n\t\t\t'<table>' +                                                                                                         // 10077\n\t\t\t\t'<thead class=\"fc-head\">' +                                                                                        // 10078\n\t\t\t\t\t'<tr>' +                                                                                                          // 10079\n\t\t\t\t\t\t'<td class=\"' + this.widgetHeaderClass + '\">' +                                                                  // 10080\n\t\t\t\t\t\t\tthis.dayGrid.headHtml() + // render the day-of-week headers                                                     // 10081\n\t\t\t\t\t\t'</td>' +                                                                                                        // 10082\n\t\t\t\t\t'</tr>' +                                                                                                         // 10083\n\t\t\t\t'</thead>' +                                                                                                       // 10084\n\t\t\t\t'<tbody class=\"fc-body\">' +                                                                                        // 10085\n\t\t\t\t\t'<tr>' +                                                                                                          // 10086\n\t\t\t\t\t\t'<td class=\"' + this.widgetContentClass + '\">' +                                                                 // 10087\n\t\t\t\t\t\t\t'<div class=\"fc-day-grid-container\">' +                                                                         // 10088\n\t\t\t\t\t\t\t\t'<div class=\"fc-day-grid\"/>' +                                                                                 // 10089\n\t\t\t\t\t\t\t'</div>' +                                                                                                      // 10090\n\t\t\t\t\t\t'</td>' +                                                                                                        // 10091\n\t\t\t\t\t'</tr>' +                                                                                                         // 10092\n\t\t\t\t'</tbody>' +                                                                                                       // 10093\n\t\t\t'</table>';                                                                                                         // 10094\n\t},                                                                                                                    // 10095\n                                                                                                                       // 10096\n                                                                                                                       // 10097\n\t// Generates the HTML that will go before the day-of week header cells.                                               // 10098\n\t// Queried by the DayGrid subcomponent when generating rows. Ordering depends on isRTL.                               // 10099\n\theadIntroHtml: function() {                                                                                           // 10100\n\t\tif (this.weekNumbersVisible) {                                                                                       // 10101\n\t\t\treturn '' +                                                                                                         // 10102\n\t\t\t\t'<th class=\"fc-week-number ' + this.widgetHeaderClass + '\" ' + this.weekNumberStyleAttr() + '>' +                  // 10103\n\t\t\t\t\t'<span>' + // needed for matchCellWidths                                                                          // 10104\n\t\t\t\t\t\thtmlEscape(this.opt('weekNumberTitle')) +                                                                        // 10105\n\t\t\t\t\t'</span>' +                                                                                                       // 10106\n\t\t\t\t'</th>';                                                                                                           // 10107\n\t\t}                                                                                                                    // 10108\n\t},                                                                                                                    // 10109\n                                                                                                                       // 10110\n                                                                                                                       // 10111\n\t// Generates the HTML that will go before content-skeleton cells that display the day/week numbers.                   // 10112\n\t// Queried by the DayGrid subcomponent. Ordering depends on isRTL.                                                    // 10113\n\tnumberIntroHtml: function(row) {                                                                                      // 10114\n\t\tif (this.weekNumbersVisible) {                                                                                       // 10115\n\t\t\treturn '' +                                                                                                         // 10116\n\t\t\t\t'<td class=\"fc-week-number\" ' + this.weekNumberStyleAttr() + '>' +                                                 // 10117\n\t\t\t\t\t'<span>' + // needed for matchCellWidths                                                                          // 10118\n\t\t\t\t\t\tthis.dayGrid.getCell(row, 0).start.format('w') +                                                                 // 10119\n\t\t\t\t\t'</span>' +                                                                                                       // 10120\n\t\t\t\t'</td>';                                                                                                           // 10121\n\t\t}                                                                                                                    // 10122\n\t},                                                                                                                    // 10123\n                                                                                                                       // 10124\n                                                                                                                       // 10125\n\t// Generates the HTML that goes before the day bg cells for each day-row.                                             // 10126\n\t// Queried by the DayGrid subcomponent. Ordering depends on isRTL.                                                    // 10127\n\tdayIntroHtml: function() {                                                                                            // 10128\n\t\tif (this.weekNumbersVisible) {                                                                                       // 10129\n\t\t\treturn '<td class=\"fc-week-number ' + this.widgetContentClass + '\" ' +                                              // 10130\n\t\t\t\tthis.weekNumberStyleAttr() + '></td>';                                                                             // 10131\n\t\t}                                                                                                                    // 10132\n\t},                                                                                                                    // 10133\n                                                                                                                       // 10134\n                                                                                                                       // 10135\n\t// Generates the HTML that goes before every other type of row generated by DayGrid. Ordering depends on isRTL.       // 10136\n\t// Affects helper-skeleton and highlight-skeleton rows.                                                               // 10137\n\tintroHtml: function() {                                                                                               // 10138\n\t\tif (this.weekNumbersVisible) {                                                                                       // 10139\n\t\t\treturn '<td class=\"fc-week-number\" ' + this.weekNumberStyleAttr() + '></td>';                                       // 10140\n\t\t}                                                                                                                    // 10141\n\t},                                                                                                                    // 10142\n                                                                                                                       // 10143\n                                                                                                                       // 10144\n\t// Generates the HTML for the <td>s of the \"number\" row in the DayGrid's content skeleton.                            // 10145\n\t// The number row will only exist if either day numbers or week numbers are turned on.                                // 10146\n\tnumberCellHtml: function(cell) {                                                                                      // 10147\n\t\tvar date = cell.start;                                                                                               // 10148\n\t\tvar classes;                                                                                                         // 10149\n                                                                                                                       // 10150\n\t\tif (!this.dayNumbersVisible) { // if there are week numbers but not day numbers                                      // 10151\n\t\t\treturn '<td/>'; //  will create an empty space above events :(                                                      // 10152\n\t\t}                                                                                                                    // 10153\n                                                                                                                       // 10154\n\t\tclasses = this.dayGrid.getDayClasses(date);                                                                          // 10155\n\t\tclasses.unshift('fc-day-number');                                                                                    // 10156\n                                                                                                                       // 10157\n\t\treturn '' +                                                                                                          // 10158\n\t\t\t'<td class=\"' + classes.join(' ') + '\" data-date=\"' + date.format() + '\">' +                                        // 10159\n\t\t\t\tdate.date() +                                                                                                      // 10160\n\t\t\t'</td>';                                                                                                            // 10161\n\t},                                                                                                                    // 10162\n                                                                                                                       // 10163\n                                                                                                                       // 10164\n\t// Generates an HTML attribute string for setting the width of the week number column, if it is known                 // 10165\n\tweekNumberStyleAttr: function() {                                                                                     // 10166\n\t\tif (this.weekNumberWidth !== null) {                                                                                 // 10167\n\t\t\treturn 'style=\"width:' + this.weekNumberWidth + 'px\"';                                                              // 10168\n\t\t}                                                                                                                    // 10169\n\t\treturn '';                                                                                                           // 10170\n\t},                                                                                                                    // 10171\n                                                                                                                       // 10172\n                                                                                                                       // 10173\n\t// Determines whether each row should have a constant height                                                          // 10174\n\thasRigidRows: function() {                                                                                            // 10175\n\t\tvar eventLimit = this.opt('eventLimit');                                                                             // 10176\n\t\treturn eventLimit && typeof eventLimit !== 'number';                                                                 // 10177\n\t},                                                                                                                    // 10178\n                                                                                                                       // 10179\n                                                                                                                       // 10180\n\t/* Dimensions                                                                                                         // 10181\n\t------------------------------------------------------------------------------------------------------------------*/  // 10182\n                                                                                                                       // 10183\n                                                                                                                       // 10184\n\t// Refreshes the horizontal dimensions of the view                                                                    // 10185\n\tupdateWidth: function() {                                                                                             // 10186\n\t\tif (this.weekNumbersVisible) {                                                                                       // 10187\n\t\t\t// Make sure all week number cells running down the side have the same width.                                       // 10188\n\t\t\t// Record the width for cells created later.                                                                        // 10189\n\t\t\tthis.weekNumberWidth = matchCellWidths(                                                                             // 10190\n\t\t\t\tthis.el.find('.fc-week-number')                                                                                    // 10191\n\t\t\t);                                                                                                                  // 10192\n\t\t}                                                                                                                    // 10193\n\t},                                                                                                                    // 10194\n                                                                                                                       // 10195\n                                                                                                                       // 10196\n\t// Adjusts the vertical dimensions of the view to the specified values                                                // 10197\n\tsetHeight: function(totalHeight, isAuto) {                                                                            // 10198\n\t\tvar eventLimit = this.opt('eventLimit');                                                                             // 10199\n\t\tvar scrollerHeight;                                                                                                  // 10200\n                                                                                                                       // 10201\n\t\t// reset all heights to be natural                                                                                   // 10202\n\t\tunsetScroller(this.scrollerEl);                                                                                      // 10203\n\t\tuncompensateScroll(this.headRowEl);                                                                                  // 10204\n                                                                                                                       // 10205\n\t\tthis.dayGrid.destroySegPopover(); // kill the \"more\" popover if displayed                                            // 10206\n                                                                                                                       // 10207\n\t\t// is the event limit a constant level number?                                                                       // 10208\n\t\tif (eventLimit && typeof eventLimit === 'number') {                                                                  // 10209\n\t\t\tthis.dayGrid.limitRows(eventLimit); // limit the levels first so the height can redistribute after                  // 10210\n\t\t}                                                                                                                    // 10211\n                                                                                                                       // 10212\n\t\tscrollerHeight = this.computeScrollerHeight(totalHeight);                                                            // 10213\n\t\tthis.setGridHeight(scrollerHeight, isAuto);                                                                          // 10214\n                                                                                                                       // 10215\n\t\t// is the event limit dynamically calculated?                                                                        // 10216\n\t\tif (eventLimit && typeof eventLimit !== 'number') {                                                                  // 10217\n\t\t\tthis.dayGrid.limitRows(eventLimit); // limit the levels after the grid's row heights have been set                  // 10218\n\t\t}                                                                                                                    // 10219\n                                                                                                                       // 10220\n\t\tif (!isAuto && setPotentialScroller(this.scrollerEl, scrollerHeight)) { // using scrollbars?                         // 10221\n                                                                                                                       // 10222\n\t\t\tcompensateScroll(this.headRowEl, getScrollbarWidths(this.scrollerEl));                                              // 10223\n                                                                                                                       // 10224\n\t\t\t// doing the scrollbar compensation might have created text overflow which created more height. redo                // 10225\n\t\t\tscrollerHeight = this.computeScrollerHeight(totalHeight);                                                           // 10226\n\t\t\tthis.scrollerEl.height(scrollerHeight);                                                                             // 10227\n\t\t}                                                                                                                    // 10228\n\t},                                                                                                                    // 10229\n                                                                                                                       // 10230\n                                                                                                                       // 10231\n\t// Sets the height of just the DayGrid component in this view                                                         // 10232\n\tsetGridHeight: function(height, isAuto) {                                                                             // 10233\n\t\tif (isAuto) {                                                                                                        // 10234\n\t\t\tundistributeHeight(this.dayGrid.rowEls); // let the rows be their natural height with no expanding                  // 10235\n\t\t}                                                                                                                    // 10236\n\t\telse {                                                                                                               // 10237\n\t\t\tdistributeHeight(this.dayGrid.rowEls, height, true); // true = compensate for height-hogging rows                   // 10238\n\t\t}                                                                                                                    // 10239\n\t},                                                                                                                    // 10240\n                                                                                                                       // 10241\n                                                                                                                       // 10242\n\t/* Events                                                                                                             // 10243\n\t------------------------------------------------------------------------------------------------------------------*/  // 10244\n                                                                                                                       // 10245\n                                                                                                                       // 10246\n\t// Renders the given events onto the view and populates the segments array                                            // 10247\n\trenderEvents: function(events) {                                                                                      // 10248\n\t\tthis.dayGrid.renderEvents(events);                                                                                   // 10249\n                                                                                                                       // 10250\n\t\tthis.updateHeight(); // must compensate for events that overflow the row                                             // 10251\n\t},                                                                                                                    // 10252\n                                                                                                                       // 10253\n                                                                                                                       // 10254\n\t// Retrieves all segment objects that are rendered in the view                                                        // 10255\n\tgetEventSegs: function() {                                                                                            // 10256\n\t\treturn this.dayGrid.getEventSegs();                                                                                  // 10257\n\t},                                                                                                                    // 10258\n                                                                                                                       // 10259\n                                                                                                                       // 10260\n\t// Unrenders all event elements and clears internal segment data                                                      // 10261\n\tdestroyEvents: function() {                                                                                           // 10262\n\t\tthis.dayGrid.destroyEvents();                                                                                        // 10263\n                                                                                                                       // 10264\n\t\t// we DON'T need to call updateHeight() because:                                                                     // 10265\n\t\t// A) a renderEvents() call always happens after this, which will eventually call updateHeight()                     // 10266\n\t\t// B) in IE8, this causes a flash whenever events are rerendered                                                     // 10267\n\t},                                                                                                                    // 10268\n                                                                                                                       // 10269\n                                                                                                                       // 10270\n\t/* Dragging (for both events and external elements)                                                                   // 10271\n\t------------------------------------------------------------------------------------------------------------------*/  // 10272\n                                                                                                                       // 10273\n                                                                                                                       // 10274\n\t// A returned value of `true` signals that a mock \"helper\" event has been rendered.                                   // 10275\n\trenderDrag: function(dropLocation, seg) {                                                                             // 10276\n\t\treturn this.dayGrid.renderDrag(dropLocation, seg);                                                                   // 10277\n\t},                                                                                                                    // 10278\n                                                                                                                       // 10279\n                                                                                                                       // 10280\n\tdestroyDrag: function() {                                                                                             // 10281\n\t\tthis.dayGrid.destroyDrag();                                                                                          // 10282\n\t},                                                                                                                    // 10283\n                                                                                                                       // 10284\n                                                                                                                       // 10285\n\t/* Selection                                                                                                          // 10286\n\t------------------------------------------------------------------------------------------------------------------*/  // 10287\n                                                                                                                       // 10288\n                                                                                                                       // 10289\n\t// Renders a visual indication of a selection                                                                         // 10290\n\trenderSelection: function(range) {                                                                                    // 10291\n\t\tthis.dayGrid.renderSelection(range);                                                                                 // 10292\n\t},                                                                                                                    // 10293\n                                                                                                                       // 10294\n                                                                                                                       // 10295\n\t// Unrenders a visual indications of a selection                                                                      // 10296\n\tdestroySelection: function() {                                                                                        // 10297\n\t\tthis.dayGrid.destroySelection();                                                                                     // 10298\n\t}                                                                                                                     // 10299\n                                                                                                                       // 10300\n});                                                                                                                    // 10301\n                                                                                                                       // 10302\n;;                                                                                                                     // 10303\n                                                                                                                       // 10304\n/* A month view with day cells running in rows (one-per-week) and columns                                              // 10305\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 10307\nvar MonthView = fcViews.month = BasicView.extend({                                                                     // 10308\n                                                                                                                       // 10309\n\t// Produces information about what range to display                                                                   // 10310\n\tcomputeRange: function(date) {                                                                                        // 10311\n\t\tvar range = BasicView.prototype.computeRange.call(this, date); // get value from super-method                        // 10312\n\t\tvar rowCnt;                                                                                                          // 10313\n                                                                                                                       // 10314\n\t\t// ensure 6 weeks                                                                                                    // 10315\n\t\tif (this.isFixedWeeks()) {                                                                                           // 10316\n\t\t\trowCnt = Math.ceil(range.end.diff(range.start, 'weeks', true)); // could be partial weeks due to hiddenDays         // 10317\n\t\t\trange.end.add(6 - rowCnt, 'weeks');                                                                                 // 10318\n\t\t}                                                                                                                    // 10319\n                                                                                                                       // 10320\n\t\treturn range;                                                                                                        // 10321\n\t},                                                                                                                    // 10322\n                                                                                                                       // 10323\n                                                                                                                       // 10324\n\t// Overrides the default BasicView behavior to have special multi-week auto-height logic                              // 10325\n\tsetGridHeight: function(height, isAuto) {                                                                             // 10326\n                                                                                                                       // 10327\n\t\tisAuto = isAuto || this.opt('weekMode') === 'variable'; // LEGACY: weekMode is deprecated                            // 10328\n                                                                                                                       // 10329\n\t\t// if auto, make the height of each row the height that it would be if there were 6 weeks                            // 10330\n\t\tif (isAuto) {                                                                                                        // 10331\n\t\t\theight *= this.rowCnt / 6;                                                                                          // 10332\n\t\t}                                                                                                                    // 10333\n                                                                                                                       // 10334\n\t\tdistributeHeight(this.dayGrid.rowEls, height, !isAuto); // if auto, don't compensate for height-hogging rows         // 10335\n\t},                                                                                                                    // 10336\n                                                                                                                       // 10337\n                                                                                                                       // 10338\n\tisFixedWeeks: function() {                                                                                            // 10339\n\t\tvar weekMode = this.opt('weekMode'); // LEGACY: weekMode is deprecated                                               // 10340\n\t\tif (weekMode) {                                                                                                      // 10341\n\t\t\treturn weekMode === 'fixed'; // if any other type of weekMode, assume NOT fixed                                     // 10342\n\t\t}                                                                                                                    // 10343\n                                                                                                                       // 10344\n\t\treturn this.opt('fixedWeekCount');                                                                                   // 10345\n\t}                                                                                                                     // 10346\n                                                                                                                       // 10347\n});                                                                                                                    // 10348\n                                                                                                                       // 10349\nMonthView.duration = { months: 1 }; // important for prev/next                                                         // 10350\n                                                                                                                       // 10351\nMonthView.defaults = {                                                                                                 // 10352\n\tfixedWeekCount: true                                                                                                  // 10353\n};                                                                                                                     // 10354\n;;                                                                                                                     // 10355\n                                                                                                                       // 10356\n/* A week view with simple day cells running horizontally                                                              // 10357\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 10359\nfcViews.basicWeek = {                                                                                                  // 10360\n\ttype: 'basic',                                                                                                        // 10361\n\tduration: { weeks: 1 }                                                                                                // 10362\n};                                                                                                                     // 10363\n;;                                                                                                                     // 10364\n                                                                                                                       // 10365\n/* A view with a single simple day cell                                                                                // 10366\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 10368\nfcViews.basicDay = {                                                                                                   // 10369\n\ttype: 'basic',                                                                                                        // 10370\n\tduration: { days: 1 }                                                                                                 // 10371\n};                                                                                                                     // 10372\n;;                                                                                                                     // 10373\n                                                                                                                       // 10374\n/* An abstract class for all agenda-related views. Displays one more columns with time slots running vertically.       // 10375\n----------------------------------------------------------------------------------------------------------------------*/\n// Is a manager for the TimeGrid subcomponent and possibly the DayGrid subcomponent (if allDaySlot is on).             // 10377\n// Responsible for managing width/height.                                                                              // 10378\n                                                                                                                       // 10379\nvar AGENDA_DEFAULTS = {                                                                                                // 10380\n\tallDaySlot: true,                                                                                                     // 10381\n\tallDayText: 'all-day',                                                                                                // 10382\n\tscrollTime: '06:00:00',                                                                                               // 10383\n\tslotDuration: '00:30:00',                                                                                             // 10384\n\tminTime: '00:00:00',                                                                                                  // 10385\n\tmaxTime: '24:00:00',                                                                                                  // 10386\n\tslotEventOverlap: true // a bad name. confused with overlap/constraint system                                         // 10387\n};                                                                                                                     // 10388\n                                                                                                                       // 10389\nvar AGENDA_ALL_DAY_EVENT_LIMIT = 5;                                                                                    // 10390\n                                                                                                                       // 10391\nvar AgendaView = fcViews.agenda = View.extend({                                                                        // 10392\n                                                                                                                       // 10393\n\ttimeGrid: null, // the main time-grid subcomponent of this view                                                       // 10394\n\tdayGrid: null, // the \"all-day\" subcomponent. if all-day is turned off, this will be null                             // 10395\n                                                                                                                       // 10396\n\taxisWidth: null, // the width of the time axis running down the side                                                  // 10397\n                                                                                                                       // 10398\n\tnoScrollRowEls: null, // set of fake row elements that must compensate when scrollerEl has scrollbars                 // 10399\n                                                                                                                       // 10400\n\t// when the time-grid isn't tall enough to occupy the given height, we render an <hr> underneath                      // 10401\n\tbottomRuleEl: null,                                                                                                   // 10402\n\tbottomRuleHeight: null,                                                                                               // 10403\n                                                                                                                       // 10404\n                                                                                                                       // 10405\n\tinitialize: function() {                                                                                              // 10406\n\t\tthis.timeGrid = new TimeGrid(this);                                                                                  // 10407\n                                                                                                                       // 10408\n\t\tif (this.opt('allDaySlot')) { // should we display the \"all-day\" area?                                               // 10409\n\t\t\tthis.dayGrid = new DayGrid(this); // the all-day subcomponent of this view                                          // 10410\n                                                                                                                       // 10411\n\t\t\t// the coordinate grid will be a combination of both subcomponents' grids                                           // 10412\n\t\t\tthis.coordMap = new ComboCoordMap([                                                                                 // 10413\n\t\t\t\tthis.dayGrid.coordMap,                                                                                             // 10414\n\t\t\t\tthis.timeGrid.coordMap                                                                                             // 10415\n\t\t\t]);                                                                                                                 // 10416\n\t\t}                                                                                                                    // 10417\n\t\telse {                                                                                                               // 10418\n\t\t\tthis.coordMap = this.timeGrid.coordMap;                                                                             // 10419\n\t\t}                                                                                                                    // 10420\n\t},                                                                                                                    // 10421\n                                                                                                                       // 10422\n                                                                                                                       // 10423\n\t/* Rendering                                                                                                          // 10424\n\t------------------------------------------------------------------------------------------------------------------*/  // 10425\n                                                                                                                       // 10426\n                                                                                                                       // 10427\n\t// Sets the display range and computes all necessary dates                                                            // 10428\n\tsetRange: function(range) {                                                                                           // 10429\n\t\tView.prototype.setRange.call(this, range); // call the super-method                                                  // 10430\n                                                                                                                       // 10431\n\t\tthis.timeGrid.setRange(range);                                                                                       // 10432\n\t\tif (this.dayGrid) {                                                                                                  // 10433\n\t\t\tthis.dayGrid.setRange(range);                                                                                       // 10434\n\t\t}                                                                                                                    // 10435\n\t},                                                                                                                    // 10436\n                                                                                                                       // 10437\n                                                                                                                       // 10438\n\t// Renders the view into `this.el`, which has already been assigned                                                   // 10439\n\trender: function() {                                                                                                  // 10440\n                                                                                                                       // 10441\n\t\tthis.el.addClass('fc-agenda-view').html(this.renderHtml());                                                          // 10442\n                                                                                                                       // 10443\n\t\t// the element that wraps the time-grid that will probably scroll                                                    // 10444\n\t\tthis.scrollerEl = this.el.find('.fc-time-grid-container');                                                           // 10445\n\t\tthis.timeGrid.coordMap.containerEl = this.scrollerEl; // don't accept clicks/etc outside of this                     // 10446\n                                                                                                                       // 10447\n\t\tthis.timeGrid.setElement(this.el.find('.fc-time-grid'));                                                             // 10448\n\t\tthis.timeGrid.renderDates();                                                                                         // 10449\n                                                                                                                       // 10450\n\t\t// the <hr> that sometimes displays under the time-grid                                                              // 10451\n\t\tthis.bottomRuleEl = $('<hr class=\"fc-divider ' + this.widgetHeaderClass + '\"/>')                                     // 10452\n\t\t\t.appendTo(this.timeGrid.el); // inject it into the time-grid                                                        // 10453\n                                                                                                                       // 10454\n\t\tif (this.dayGrid) {                                                                                                  // 10455\n\t\t\tthis.dayGrid.setElement(this.el.find('.fc-day-grid'));                                                              // 10456\n\t\t\tthis.dayGrid.renderDates();                                                                                         // 10457\n                                                                                                                       // 10458\n\t\t\t// have the day-grid extend it's coordinate area over the <hr> dividing the two grids                               // 10459\n\t\t\tthis.dayGrid.bottomCoordPadding = this.dayGrid.el.next('hr').outerHeight();                                         // 10460\n\t\t}                                                                                                                    // 10461\n                                                                                                                       // 10462\n\t\tthis.noScrollRowEls = this.el.find('.fc-row:not(.fc-scroller *)'); // fake rows not within the scroller              // 10463\n\t},                                                                                                                    // 10464\n                                                                                                                       // 10465\n                                                                                                                       // 10466\n\t// Unrenders the content of the view. Since we haven't separated skeleton rendering from date rendering,              // 10467\n\t// always completely kill each grid's rendering.                                                                      // 10468\n\tdestroy: function() {                                                                                                 // 10469\n\t\tthis.timeGrid.destroyDates();                                                                                        // 10470\n\t\tthis.timeGrid.removeElement();                                                                                       // 10471\n                                                                                                                       // 10472\n\t\tif (this.dayGrid) {                                                                                                  // 10473\n\t\t\tthis.dayGrid.destroyDates();                                                                                        // 10474\n\t\t\tthis.dayGrid.removeElement();                                                                                       // 10475\n\t\t}                                                                                                                    // 10476\n\t},                                                                                                                    // 10477\n                                                                                                                       // 10478\n                                                                                                                       // 10479\n\trenderBusinessHours: function() {                                                                                     // 10480\n\t\tthis.timeGrid.renderBusinessHours();                                                                                 // 10481\n                                                                                                                       // 10482\n\t\tif (this.dayGrid) {                                                                                                  // 10483\n\t\t\tthis.dayGrid.renderBusinessHours();                                                                                 // 10484\n\t\t}                                                                                                                    // 10485\n\t},                                                                                                                    // 10486\n                                                                                                                       // 10487\n                                                                                                                       // 10488\n\t// Builds the HTML skeleton for the view.                                                                             // 10489\n\t// The day-grid and time-grid components will render inside containers defined by this HTML.                          // 10490\n\trenderHtml: function() {                                                                                              // 10491\n\t\treturn '' +                                                                                                          // 10492\n\t\t\t'<table>' +                                                                                                         // 10493\n\t\t\t\t'<thead class=\"fc-head\">' +                                                                                        // 10494\n\t\t\t\t\t'<tr>' +                                                                                                          // 10495\n\t\t\t\t\t\t'<td class=\"' + this.widgetHeaderClass + '\">' +                                                                  // 10496\n\t\t\t\t\t\t\tthis.timeGrid.headHtml() + // render the day-of-week headers                                                    // 10497\n\t\t\t\t\t\t'</td>' +                                                                                                        // 10498\n\t\t\t\t\t'</tr>' +                                                                                                         // 10499\n\t\t\t\t'</thead>' +                                                                                                       // 10500\n\t\t\t\t'<tbody class=\"fc-body\">' +                                                                                        // 10501\n\t\t\t\t\t'<tr>' +                                                                                                          // 10502\n\t\t\t\t\t\t'<td class=\"' + this.widgetContentClass + '\">' +                                                                 // 10503\n\t\t\t\t\t\t\t(this.dayGrid ?                                                                                                 // 10504\n\t\t\t\t\t\t\t\t'<div class=\"fc-day-grid\"/>' +                                                                                 // 10505\n\t\t\t\t\t\t\t\t'<hr class=\"fc-divider ' + this.widgetHeaderClass + '\"/>' :                                                    // 10506\n\t\t\t\t\t\t\t\t''                                                                                                             // 10507\n\t\t\t\t\t\t\t\t) +                                                                                                            // 10508\n\t\t\t\t\t\t\t'<div class=\"fc-time-grid-container\">' +                                                                        // 10509\n\t\t\t\t\t\t\t\t'<div class=\"fc-time-grid\"/>' +                                                                                // 10510\n\t\t\t\t\t\t\t'</div>' +                                                                                                      // 10511\n\t\t\t\t\t\t'</td>' +                                                                                                        // 10512\n\t\t\t\t\t'</tr>' +                                                                                                         // 10513\n\t\t\t\t'</tbody>' +                                                                                                       // 10514\n\t\t\t'</table>';                                                                                                         // 10515\n\t},                                                                                                                    // 10516\n                                                                                                                       // 10517\n                                                                                                                       // 10518\n\t// Generates the HTML that will go before the day-of week header cells.                                               // 10519\n\t// Queried by the TimeGrid subcomponent when generating rows. Ordering depends on isRTL.                              // 10520\n\theadIntroHtml: function() {                                                                                           // 10521\n\t\tvar date;                                                                                                            // 10522\n\t\tvar weekText;                                                                                                        // 10523\n                                                                                                                       // 10524\n\t\tif (this.opt('weekNumbers')) {                                                                                       // 10525\n\t\t\tdate = this.timeGrid.getCell(0).start;                                                                              // 10526\n\t\t\tweekText = date.format(this.opt('smallWeekFormat'));                                                                // 10527\n                                                                                                                       // 10528\n\t\t\treturn '' +                                                                                                         // 10529\n\t\t\t\t'<th class=\"fc-axis fc-week-number ' + this.widgetHeaderClass + '\" ' + this.axisStyleAttr() + '>' +                // 10530\n\t\t\t\t\t'<span>' + // needed for matchCellWidths                                                                          // 10531\n\t\t\t\t\t\thtmlEscape(weekText) +                                                                                           // 10532\n\t\t\t\t\t'</span>' +                                                                                                       // 10533\n\t\t\t\t'</th>';                                                                                                           // 10534\n\t\t}                                                                                                                    // 10535\n\t\telse {                                                                                                               // 10536\n\t\t\treturn '<th class=\"fc-axis ' + this.widgetHeaderClass + '\" ' + this.axisStyleAttr() + '></th>';                     // 10537\n\t\t}                                                                                                                    // 10538\n\t},                                                                                                                    // 10539\n                                                                                                                       // 10540\n                                                                                                                       // 10541\n\t// Generates the HTML that goes before the all-day cells.                                                             // 10542\n\t// Queried by the DayGrid subcomponent when generating rows. Ordering depends on isRTL.                               // 10543\n\tdayIntroHtml: function() {                                                                                            // 10544\n\t\treturn '' +                                                                                                          // 10545\n\t\t\t'<td class=\"fc-axis ' + this.widgetContentClass + '\" ' + this.axisStyleAttr() + '>' +                               // 10546\n\t\t\t\t'<span>' + // needed for matchCellWidths                                                                           // 10547\n\t\t\t\t\t(this.opt('allDayHtml') || htmlEscape(this.opt('allDayText'))) +                                                  // 10548\n\t\t\t\t'</span>' +                                                                                                        // 10549\n\t\t\t'</td>';                                                                                                            // 10550\n\t},                                                                                                                    // 10551\n                                                                                                                       // 10552\n                                                                                                                       // 10553\n\t// Generates the HTML that goes before the bg of the TimeGrid slot area. Long vertical column.                        // 10554\n\tslotBgIntroHtml: function() {                                                                                         // 10555\n\t\treturn '<td class=\"fc-axis ' + this.widgetContentClass + '\" ' + this.axisStyleAttr() + '></td>';                     // 10556\n\t},                                                                                                                    // 10557\n                                                                                                                       // 10558\n                                                                                                                       // 10559\n\t// Generates the HTML that goes before all other types of cells.                                                      // 10560\n\t// Affects content-skeleton, helper-skeleton, highlight-skeleton for both the time-grid and day-grid.                 // 10561\n\t// Queried by the TimeGrid and DayGrid subcomponents when generating rows. Ordering depends on isRTL.                 // 10562\n\tintroHtml: function() {                                                                                               // 10563\n\t\treturn '<td class=\"fc-axis\" ' + this.axisStyleAttr() + '></td>';                                                     // 10564\n\t},                                                                                                                    // 10565\n                                                                                                                       // 10566\n                                                                                                                       // 10567\n\t// Generates an HTML attribute string for setting the width of the axis, if it is known                               // 10568\n\taxisStyleAttr: function() {                                                                                           // 10569\n\t\tif (this.axisWidth !== null) {                                                                                       // 10570\n\t\t\t return 'style=\"width:' + this.axisWidth + 'px\"';                                                                   // 10571\n\t\t}                                                                                                                    // 10572\n\t\treturn '';                                                                                                           // 10573\n\t},                                                                                                                    // 10574\n                                                                                                                       // 10575\n                                                                                                                       // 10576\n\t/* Dimensions                                                                                                         // 10577\n\t------------------------------------------------------------------------------------------------------------------*/  // 10578\n                                                                                                                       // 10579\n                                                                                                                       // 10580\n\tupdateSize: function(isResize) {                                                                                      // 10581\n\t\tthis.timeGrid.updateSize(isResize);                                                                                  // 10582\n                                                                                                                       // 10583\n\t\tView.prototype.updateSize.call(this, isResize); // call the super-method                                             // 10584\n\t},                                                                                                                    // 10585\n                                                                                                                       // 10586\n                                                                                                                       // 10587\n\t// Refreshes the horizontal dimensions of the view                                                                    // 10588\n\tupdateWidth: function() {                                                                                             // 10589\n\t\t// make all axis cells line up, and record the width so newly created axis cells will have it                        // 10590\n\t\tthis.axisWidth = matchCellWidths(this.el.find('.fc-axis'));                                                          // 10591\n\t},                                                                                                                    // 10592\n                                                                                                                       // 10593\n                                                                                                                       // 10594\n\t// Adjusts the vertical dimensions of the view to the specified values                                                // 10595\n\tsetHeight: function(totalHeight, isAuto) {                                                                            // 10596\n\t\tvar eventLimit;                                                                                                      // 10597\n\t\tvar scrollerHeight;                                                                                                  // 10598\n                                                                                                                       // 10599\n\t\tif (this.bottomRuleHeight === null) {                                                                                // 10600\n\t\t\t// calculate the height of the rule the very first time                                                             // 10601\n\t\t\tthis.bottomRuleHeight = this.bottomRuleEl.outerHeight();                                                            // 10602\n\t\t}                                                                                                                    // 10603\n\t\tthis.bottomRuleEl.hide(); // .show() will be called later if this <hr> is necessary                                  // 10604\n                                                                                                                       // 10605\n\t\t// reset all dimensions back to the original state                                                                   // 10606\n\t\tthis.scrollerEl.css('overflow', '');                                                                                 // 10607\n\t\tunsetScroller(this.scrollerEl);                                                                                      // 10608\n\t\tuncompensateScroll(this.noScrollRowEls);                                                                             // 10609\n                                                                                                                       // 10610\n\t\t// limit number of events in the all-day area                                                                        // 10611\n\t\tif (this.dayGrid) {                                                                                                  // 10612\n\t\t\tthis.dayGrid.destroySegPopover(); // kill the \"more\" popover if displayed                                           // 10613\n                                                                                                                       // 10614\n\t\t\teventLimit = this.opt('eventLimit');                                                                                // 10615\n\t\t\tif (eventLimit && typeof eventLimit !== 'number') {                                                                 // 10616\n\t\t\t\teventLimit = AGENDA_ALL_DAY_EVENT_LIMIT; // make sure \"auto\" goes to a real number                                 // 10617\n\t\t\t}                                                                                                                   // 10618\n\t\t\tif (eventLimit) {                                                                                                   // 10619\n\t\t\t\tthis.dayGrid.limitRows(eventLimit);                                                                                // 10620\n\t\t\t}                                                                                                                   // 10621\n\t\t}                                                                                                                    // 10622\n                                                                                                                       // 10623\n\t\tif (!isAuto) { // should we force dimensions of the scroll container, or let the contents be natural height?         // 10624\n                                                                                                                       // 10625\n\t\t\tscrollerHeight = this.computeScrollerHeight(totalHeight);                                                           // 10626\n\t\t\tif (setPotentialScroller(this.scrollerEl, scrollerHeight)) { // using scrollbars?                                   // 10627\n                                                                                                                       // 10628\n\t\t\t\t// make the all-day and header rows lines up                                                                       // 10629\n\t\t\t\tcompensateScroll(this.noScrollRowEls, getScrollbarWidths(this.scrollerEl));                                        // 10630\n                                                                                                                       // 10631\n\t\t\t\t// the scrollbar compensation might have changed text flow, which might affect height, so recalculate              // 10632\n\t\t\t\t// and reapply the desired height to the scroller.                                                                 // 10633\n\t\t\t\tscrollerHeight = this.computeScrollerHeight(totalHeight);                                                          // 10634\n\t\t\t\tthis.scrollerEl.height(scrollerHeight);                                                                            // 10635\n\t\t\t}                                                                                                                   // 10636\n\t\t\telse { // no scrollbars                                                                                             // 10637\n\t\t\t\t// still, force a height and display the bottom rule (marks the end of day)                                        // 10638\n\t\t\t\tthis.scrollerEl.height(scrollerHeight).css('overflow', 'hidden'); // in case <hr> goes outside                     // 10639\n\t\t\t\tthis.bottomRuleEl.show();                                                                                          // 10640\n\t\t\t}                                                                                                                   // 10641\n\t\t}                                                                                                                    // 10642\n\t},                                                                                                                    // 10643\n                                                                                                                       // 10644\n                                                                                                                       // 10645\n\t// Computes the initial pre-configured scroll state prior to allowing the user to change it                           // 10646\n\tcomputeInitialScroll: function() {                                                                                    // 10647\n\t\tvar scrollTime = moment.duration(this.opt('scrollTime'));                                                            // 10648\n\t\tvar top = this.timeGrid.computeTimeTop(scrollTime);                                                                  // 10649\n                                                                                                                       // 10650\n\t\t// zoom can give weird floating-point values. rather scroll a little bit further                                     // 10651\n\t\ttop = Math.ceil(top);                                                                                                // 10652\n                                                                                                                       // 10653\n\t\tif (top) {                                                                                                           // 10654\n\t\t\ttop++; // to overcome top border that slots beyond the first have. looks better                                     // 10655\n\t\t}                                                                                                                    // 10656\n                                                                                                                       // 10657\n\t\treturn top;                                                                                                          // 10658\n\t},                                                                                                                    // 10659\n                                                                                                                       // 10660\n                                                                                                                       // 10661\n\t/* Events                                                                                                             // 10662\n\t------------------------------------------------------------------------------------------------------------------*/  // 10663\n                                                                                                                       // 10664\n                                                                                                                       // 10665\n\t// Renders events onto the view and populates the View's segment array                                                // 10666\n\trenderEvents: function(events) {                                                                                      // 10667\n\t\tvar dayEvents = [];                                                                                                  // 10668\n\t\tvar timedEvents = [];                                                                                                // 10669\n\t\tvar daySegs = [];                                                                                                    // 10670\n\t\tvar timedSegs;                                                                                                       // 10671\n\t\tvar i;                                                                                                               // 10672\n                                                                                                                       // 10673\n\t\t// separate the events into all-day and timed                                                                        // 10674\n\t\tfor (i = 0; i < events.length; i++) {                                                                                // 10675\n\t\t\tif (events[i].allDay) {                                                                                             // 10676\n\t\t\t\tdayEvents.push(events[i]);                                                                                         // 10677\n\t\t\t}                                                                                                                   // 10678\n\t\t\telse {                                                                                                              // 10679\n\t\t\t\ttimedEvents.push(events[i]);                                                                                       // 10680\n\t\t\t}                                                                                                                   // 10681\n\t\t}                                                                                                                    // 10682\n                                                                                                                       // 10683\n\t\t// render the events in the subcomponents                                                                            // 10684\n\t\ttimedSegs = this.timeGrid.renderEvents(timedEvents);                                                                 // 10685\n\t\tif (this.dayGrid) {                                                                                                  // 10686\n\t\t\tdaySegs = this.dayGrid.renderEvents(dayEvents);                                                                     // 10687\n\t\t}                                                                                                                    // 10688\n                                                                                                                       // 10689\n\t\t// the all-day area is flexible and might have a lot of events, so shift the height                                  // 10690\n\t\tthis.updateHeight();                                                                                                 // 10691\n\t},                                                                                                                    // 10692\n                                                                                                                       // 10693\n                                                                                                                       // 10694\n\t// Retrieves all segment objects that are rendered in the view                                                        // 10695\n\tgetEventSegs: function() {                                                                                            // 10696\n\t\treturn this.timeGrid.getEventSegs().concat(                                                                          // 10697\n\t\t\tthis.dayGrid ? this.dayGrid.getEventSegs() : []                                                                     // 10698\n\t\t);                                                                                                                   // 10699\n\t},                                                                                                                    // 10700\n                                                                                                                       // 10701\n                                                                                                                       // 10702\n\t// Unrenders all event elements and clears internal segment data                                                      // 10703\n\tdestroyEvents: function() {                                                                                           // 10704\n                                                                                                                       // 10705\n\t\t// destroy the events in the subcomponents                                                                           // 10706\n\t\tthis.timeGrid.destroyEvents();                                                                                       // 10707\n\t\tif (this.dayGrid) {                                                                                                  // 10708\n\t\t\tthis.dayGrid.destroyEvents();                                                                                       // 10709\n\t\t}                                                                                                                    // 10710\n                                                                                                                       // 10711\n\t\t// we DON'T need to call updateHeight() because:                                                                     // 10712\n\t\t// A) a renderEvents() call always happens after this, which will eventually call updateHeight()                     // 10713\n\t\t// B) in IE8, this causes a flash whenever events are rerendered                                                     // 10714\n\t},                                                                                                                    // 10715\n                                                                                                                       // 10716\n                                                                                                                       // 10717\n\t/* Dragging (for events and external elements)                                                                        // 10718\n\t------------------------------------------------------------------------------------------------------------------*/  // 10719\n                                                                                                                       // 10720\n                                                                                                                       // 10721\n\t// A returned value of `true` signals that a mock \"helper\" event has been rendered.                                   // 10722\n\trenderDrag: function(dropLocation, seg) {                                                                             // 10723\n\t\tif (dropLocation.start.hasTime()) {                                                                                  // 10724\n\t\t\treturn this.timeGrid.renderDrag(dropLocation, seg);                                                                 // 10725\n\t\t}                                                                                                                    // 10726\n\t\telse if (this.dayGrid) {                                                                                             // 10727\n\t\t\treturn this.dayGrid.renderDrag(dropLocation, seg);                                                                  // 10728\n\t\t}                                                                                                                    // 10729\n\t},                                                                                                                    // 10730\n                                                                                                                       // 10731\n                                                                                                                       // 10732\n\tdestroyDrag: function() {                                                                                             // 10733\n\t\tthis.timeGrid.destroyDrag();                                                                                         // 10734\n\t\tif (this.dayGrid) {                                                                                                  // 10735\n\t\t\tthis.dayGrid.destroyDrag();                                                                                         // 10736\n\t\t}                                                                                                                    // 10737\n\t},                                                                                                                    // 10738\n                                                                                                                       // 10739\n                                                                                                                       // 10740\n\t/* Selection                                                                                                          // 10741\n\t------------------------------------------------------------------------------------------------------------------*/  // 10742\n                                                                                                                       // 10743\n                                                                                                                       // 10744\n\t// Renders a visual indication of a selection                                                                         // 10745\n\trenderSelection: function(range) {                                                                                    // 10746\n\t\tif (range.start.hasTime() || range.end.hasTime()) {                                                                  // 10747\n\t\t\tthis.timeGrid.renderSelection(range);                                                                               // 10748\n\t\t}                                                                                                                    // 10749\n\t\telse if (this.dayGrid) {                                                                                             // 10750\n\t\t\tthis.dayGrid.renderSelection(range);                                                                                // 10751\n\t\t}                                                                                                                    // 10752\n\t},                                                                                                                    // 10753\n                                                                                                                       // 10754\n                                                                                                                       // 10755\n\t// Unrenders a visual indications of a selection                                                                      // 10756\n\tdestroySelection: function() {                                                                                        // 10757\n\t\tthis.timeGrid.destroySelection();                                                                                    // 10758\n\t\tif (this.dayGrid) {                                                                                                  // 10759\n\t\t\tthis.dayGrid.destroySelection();                                                                                    // 10760\n\t\t}                                                                                                                    // 10761\n\t}                                                                                                                     // 10762\n                                                                                                                       // 10763\n});                                                                                                                    // 10764\n                                                                                                                       // 10765\nAgendaView.defaults = AGENDA_DEFAULTS;                                                                                 // 10766\n                                                                                                                       // 10767\n;;                                                                                                                     // 10768\n                                                                                                                       // 10769\n/* A week view with an all-day cell area at the top, and a time grid below                                             // 10770\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 10772\nfcViews.agendaWeek = {                                                                                                 // 10773\n\ttype: 'agenda',                                                                                                       // 10774\n\tduration: { weeks: 1 }                                                                                                // 10775\n};                                                                                                                     // 10776\n;;                                                                                                                     // 10777\n                                                                                                                       // 10778\n/* A day view with an all-day cell area at the top, and a time grid below                                              // 10779\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 10781\nfcViews.agendaDay = {                                                                                                  // 10782\n\ttype: 'agenda',                                                                                                       // 10783\n\tduration: { days: 1 }                                                                                                 // 10784\n};                                                                                                                     // 10785\n;;                                                                                                                     // 10786\n                                                                                                                       // 10787\nreturn fc; // export for Node/CommonJS                                                                                 // 10788\n});                                                                                                                    // 10789\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 10799\n}).call(this);                                                       // 10800\n                                                                     // 10801\n                                                                     // 10802\n                                                                     // 10803\n                                                                     // 10804\n                                                                     // 10805\n                                                                     // 10806\n(function () {                                                       // 10807\n                                                                     // 10808\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/rzymek:fullcalendar/fullcalendar/dist/lang-all.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n(function(e){\"function\"==typeof define&&define.amd?define([\"jquery\",\"moment\"],e):e(jQuery,moment)})(function(e,t){(function(){(t.defineLocale||t.lang).call(t,\"ar-ma\",{months:\"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر\".split(\"_\"),monthsShort:\"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر\".split(\"_\"),weekdays:\"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت\".split(\"_\"),weekdaysShort:\"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت\".split(\"_\"),weekdaysMin:\"ح_ن_ث_ر_خ_ج_س\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd D MMMM YYYY LT\"},calendar:{sameDay:\"[اليوم على الساعة] LT\",nextDay:\"[غدا على الساعة] LT\",nextWeek:\"dddd [على الساعة] LT\",lastDay:\"[أمس على الساعة] LT\",lastWeek:\"dddd [على الساعة] LT\",sameElse:\"L\"},relativeTime:{future:\"في %s\",past:\"منذ %s\",s:\"ثوان\",m:\"دقيقة\",mm:\"%d دقائق\",h:\"ساعة\",hh:\"%d ساعات\",d:\"يوم\",dd:\"%d أيام\",M:\"شهر\",MM:\"%d أشهر\",y:\"سنة\",yy:\"%d سنوات\"},week:{dow:6,doy:12}}),e.fullCalendar.datepickerLang(\"ar-ma\",\"ar\",{closeText:\"إغلاق\",prevText:\"&#x3C;السابق\",nextText:\"التالي&#x3E;\",currentText:\"اليوم\",monthNames:[\"كانون الثاني\",\"شباط\",\"آذار\",\"نيسان\",\"مايو\",\"حزيران\",\"تموز\",\"آب\",\"أيلول\",\"تشرين الأول\",\"تشرين الثاني\",\"كانون الأول\"],monthNamesShort:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],dayNames:[\"الأحد\",\"الاثنين\",\"الثلاثاء\",\"الأربعاء\",\"الخميس\",\"الجمعة\",\"السبت\"],dayNamesShort:[\"الأحد\",\"الاثنين\",\"الثلاثاء\",\"الأربعاء\",\"الخميس\",\"الجمعة\",\"السبت\"],dayNamesMin:[\"ح\",\"ن\",\"ث\",\"ر\",\"خ\",\"ج\",\"س\"],weekHeader:\"أسبوع\",dateFormat:\"dd/mm/yy\",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"ar-ma\",{buttonText:{month:\"شهر\",week:\"أسبوع\",day:\"يوم\",list:\"أجندة\"},allDayText:\"اليوم كله\",eventLimitText:\"أخرى\"})})(),function(){var a={1:\"١\",2:\"٢\",3:\"٣\",4:\"٤\",5:\"٥\",6:\"٦\",7:\"٧\",8:\"٨\",9:\"٩\",0:\"٠\"},n={\"١\":\"1\",\"٢\":\"2\",\"٣\":\"3\",\"٤\":\"4\",\"٥\":\"5\",\"٦\":\"6\",\"٧\":\"7\",\"٨\":\"8\",\"٩\":\"9\",\"٠\":\"0\"};(t.defineLocale||t.lang).call(t,\"ar-sa\",{months:\"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر\".split(\"_\"),monthsShort:\"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر\".split(\"_\"),weekdays:\"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت\".split(\"_\"),weekdaysShort:\"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت\".split(\"_\"),weekdaysMin:\"ح_ن_ث_ر_خ_ج_س\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"HH:mm:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd D MMMM YYYY LT\"},meridiemParse:/ص|م/,isPM:function(e){return\"م\"===e},meridiem:function(e){return 12>e?\"ص\":\"م\"},calendar:{sameDay:\"[اليوم على الساعة] LT\",nextDay:\"[غدا على الساعة] LT\",nextWeek:\"dddd [على الساعة] LT\",lastDay:\"[أمس على الساعة] LT\",lastWeek:\"dddd [على الساعة] LT\",sameElse:\"L\"},relativeTime:{future:\"في %s\",past:\"منذ %s\",s:\"ثوان\",m:\"دقيقة\",mm:\"%d دقائق\",h:\"ساعة\",hh:\"%d ساعات\",d:\"يوم\",dd:\"%d أيام\",M:\"شهر\",MM:\"%d أشهر\",y:\"سنة\",yy:\"%d سنوات\"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(e){return n[e]}).replace(/،/g,\",\")},postformat:function(e){return e.replace(/\\d/g,function(e){return a[e]}).replace(/,/g,\"،\")},week:{dow:6,doy:12}}),e.fullCalendar.datepickerLang(\"ar-sa\",\"ar\",{closeText:\"إغلاق\",prevText:\"&#x3C;السابق\",nextText:\"التالي&#x3E;\",currentText:\"اليوم\",monthNames:[\"كانون الثاني\",\"شباط\",\"آذار\",\"نيسان\",\"مايو\",\"حزيران\",\"تموز\",\"آب\",\"أيلول\",\"تشرين الأول\",\"تشرين الثاني\",\"كانون الأول\"],monthNamesShort:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],dayNames:[\"الأحد\",\"الاثنين\",\"الثلاثاء\",\"الأربعاء\",\"الخميس\",\"الجمعة\",\"السبت\"],dayNamesShort:[\"الأحد\",\"الاثنين\",\"الثلاثاء\",\"الأربعاء\",\"الخميس\",\"الجمعة\",\"السبت\"],dayNamesMin:[\"ح\",\"ن\",\"ث\",\"ر\",\"خ\",\"ج\",\"س\"],weekHeader:\"أسبوع\",dateFormat:\"dd/mm/yy\",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"ar-sa\",{buttonText:{month:\"شهر\",week:\"أسبوع\",day:\"يوم\",list:\"أجندة\"},allDayText:\"اليوم كله\",eventLimitText:\"أخرى\"})}(),function(){(t.defineLocale||t.lang).call(t,\"ar-tn\",{months:\"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر\".split(\"_\"),monthsShort:\"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر\".split(\"_\"),weekdays:\"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت\".split(\"_\"),weekdaysShort:\"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت\".split(\"_\"),weekdaysMin:\"ح_ن_ث_ر_خ_ج_س\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd D MMMM YYYY LT\"},calendar:{sameDay:\"[اليوم على الساعة] LT\",nextDay:\"[غدا على الساعة] LT\",nextWeek:\"dddd [على الساعة] LT\",lastDay:\"[أمس على الساعة] LT\",lastWeek:\"dddd [على الساعة] LT\",sameElse:\"L\"},relativeTime:{future:\"في %s\",past:\"منذ %s\",s:\"ثوان\",m:\"دقيقة\",mm:\"%d دقائق\",h:\"ساعة\",hh:\"%d ساعات\",d:\"يوم\",dd:\"%d أيام\",M:\"شهر\",MM:\"%d أشهر\",y:\"سنة\",yy:\"%d سنوات\"},week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"ar-tn\",\"ar\",{closeText:\"إغلاق\",prevText:\"&#x3C;السابق\",nextText:\"التالي&#x3E;\",currentText:\"اليوم\",monthNames:[\"كانون الثاني\",\"شباط\",\"آذار\",\"نيسان\",\"مايو\",\"حزيران\",\"تموز\",\"آب\",\"أيلول\",\"تشرين الأول\",\"تشرين الثاني\",\"كانون الأول\"],monthNamesShort:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],dayNames:[\"الأحد\",\"الاثنين\",\"الثلاثاء\",\"الأربعاء\",\"الخميس\",\"الجمعة\",\"السبت\"],dayNamesShort:[\"الأحد\",\"الاثنين\",\"الثلاثاء\",\"الأربعاء\",\"الخميس\",\"الجمعة\",\"السبت\"],dayNamesMin:[\"ح\",\"ن\",\"ث\",\"ر\",\"خ\",\"ج\",\"س\"],weekHeader:\"أسبوع\",dateFormat:\"dd/mm/yy\",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"ar-tn\",{buttonText:{month:\"شهر\",week:\"أسبوع\",day:\"يوم\",list:\"أجندة\"},allDayText:\"اليوم كله\",eventLimitText:\"أخرى\"})}(),function(){var a={1:\"١\",2:\"٢\",3:\"٣\",4:\"٤\",5:\"٥\",6:\"٦\",7:\"٧\",8:\"٨\",9:\"٩\",0:\"٠\"},n={\"١\":\"1\",\"٢\":\"2\",\"٣\":\"3\",\"٤\":\"4\",\"٥\":\"5\",\"٦\":\"6\",\"٧\":\"7\",\"٨\":\"8\",\"٩\":\"9\",\"٠\":\"0\"},r=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&10>=e%100?3:e%100>=11?4:5},i={s:[\"أقل من ثانية\",\"ثانية واحدة\",[\"ثانيتان\",\"ثانيتين\"],\"%d ثوان\",\"%d ثانية\",\"%d ثانية\"],m:[\"أقل من دقيقة\",\"دقيقة واحدة\",[\"دقيقتان\",\"دقيقتين\"],\"%d دقائق\",\"%d دقيقة\",\"%d دقيقة\"],h:[\"أقل من ساعة\",\"ساعة واحدة\",[\"ساعتان\",\"ساعتين\"],\"%d ساعات\",\"%d ساعة\",\"%d ساعة\"],d:[\"أقل من يوم\",\"يوم واحد\",[\"يومان\",\"يومين\"],\"%d أيام\",\"%d يومًا\",\"%d يوم\"],M:[\"أقل من شهر\",\"شهر واحد\",[\"شهران\",\"شهرين\"],\"%d أشهر\",\"%d شهرا\",\"%d شهر\"],y:[\"أقل من عام\",\"عام واحد\",[\"عامان\",\"عامين\"],\"%d أعوام\",\"%d عامًا\",\"%d عام\"]},s=function(e){return function(t,a){var n=r(t),s=i[e][r(t)];return 2===n&&(s=s[a?0:1]),s.replace(/%d/i,t)}},o=[\"كانون الثاني يناير\",\"شباط فبراير\",\"آذار مارس\",\"نيسان أبريل\",\"أيار مايو\",\"حزيران يونيو\",\"تموز يوليو\",\"آب أغسطس\",\"أيلول سبتمبر\",\"تشرين الأول أكتوبر\",\"تشرين الثاني نوفمبر\",\"كانون الأول ديسمبر\"];(t.defineLocale||t.lang).call(t,\"ar\",{months:o,monthsShort:o,weekdays:\"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت\".split(\"_\"),weekdaysShort:\"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت\".split(\"_\"),weekdaysMin:\"ح_ن_ث_ر_خ_ج_س\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"HH:mm:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd D MMMM YYYY LT\"},meridiemParse:/ص|م/,isPM:function(e){return\"م\"===e},meridiem:function(e){return 12>e?\"ص\":\"م\"},calendar:{sameDay:\"[اليوم عند الساعة] LT\",nextDay:\"[غدًا عند الساعة] LT\",nextWeek:\"dddd [عند الساعة] LT\",lastDay:\"[أمس عند الساعة] LT\",lastWeek:\"dddd [عند الساعة] LT\",sameElse:\"L\"},relativeTime:{future:\"بعد %s\",past:\"منذ %s\",s:s(\"s\"),m:s(\"m\"),mm:s(\"m\"),h:s(\"h\"),hh:s(\"h\"),d:s(\"d\"),dd:s(\"d\"),M:s(\"M\"),MM:s(\"M\"),y:s(\"y\"),yy:s(\"y\")},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(e){return n[e]}).replace(/،/g,\",\")},postformat:function(e){return e.replace(/\\d/g,function(e){return a[e]}).replace(/,/g,\"،\")},week:{dow:6,doy:12}}),e.fullCalendar.datepickerLang(\"ar\",\"ar\",{closeText:\"إغلاق\",prevText:\"&#x3C;السابق\",nextText:\"التالي&#x3E;\",currentText:\"اليوم\",monthNames:[\"كانون الثاني\",\"شباط\",\"آذار\",\"نيسان\",\"مايو\",\"حزيران\",\"تموز\",\"آب\",\"أيلول\",\"تشرين الأول\",\"تشرين الثاني\",\"كانون الأول\"],monthNamesShort:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],dayNames:[\"الأحد\",\"الاثنين\",\"الثلاثاء\",\"الأربعاء\",\"الخميس\",\"الجمعة\",\"السبت\"],dayNamesShort:[\"الأحد\",\"الاثنين\",\"الثلاثاء\",\"الأربعاء\",\"الخميس\",\"الجمعة\",\"السبت\"],dayNamesMin:[\"ح\",\"ن\",\"ث\",\"ر\",\"خ\",\"ج\",\"س\"],weekHeader:\"أسبوع\",dateFormat:\"dd/mm/yy\",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"ar\",{buttonText:{month:\"شهر\",week:\"أسبوع\",day:\"يوم\",list:\"أجندة\"},allDayText:\"اليوم كله\",eventLimitText:\"أخرى\"})}(),function(){(t.defineLocale||t.lang).call(t,\"bg\",{months:\"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември\".split(\"_\"),monthsShort:\"янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек\".split(\"_\"),weekdays:\"неделя_понеделник_вторник_сряда_четвъртък_петък_събота\".split(\"_\"),weekdaysShort:\"нед_пон_вто_сря_чет_пет_съб\".split(\"_\"),weekdaysMin:\"нд_пн_вт_ср_чт_пт_сб\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"D.MM.YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd, D MMMM YYYY LT\"},calendar:{sameDay:\"[Днес в] LT\",nextDay:\"[Утре в] LT\",nextWeek:\"dddd [в] LT\",lastDay:\"[Вчера в] LT\",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return\"[В изминалата] dddd [в] LT\";case 1:case 2:case 4:case 5:return\"[В изминалия] dddd [в] LT\"}},sameElse:\"L\"},relativeTime:{future:\"след %s\",past:\"преди %s\",s:\"няколко секунди\",m:\"минута\",mm:\"%d минути\",h:\"час\",hh:\"%d часа\",d:\"ден\",dd:\"%d дни\",M:\"месец\",MM:\"%d месеца\",y:\"година\",yy:\"%d години\"},ordinalParse:/\\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,a=e%100;return 0===e?e+\"-ев\":0===a?e+\"-ен\":a>10&&20>a?e+\"-ти\":1===t?e+\"-ви\":2===t?e+\"-ри\":7===t||8===t?e+\"-ми\":e+\"-ти\"},week:{dow:1,doy:7}}),e.fullCalendar.datepickerLang(\"bg\",\"bg\",{closeText:\"затвори\",prevText:\"&#x3C;назад\",nextText:\"напред&#x3E;\",nextBigText:\"&#x3E;&#x3E;\",currentText:\"днес\",monthNames:[\"Януари\",\"Февруари\",\"Март\",\"Април\",\"Май\",\"Юни\",\"Юли\",\"Август\",\"Септември\",\"Октомври\",\"Ноември\",\"Декември\"],monthNamesShort:[\"Яну\",\"Фев\",\"Мар\",\"Апр\",\"Май\",\"Юни\",\"Юли\",\"Авг\",\"Сеп\",\"Окт\",\"Нов\",\"Дек\"],dayNames:[\"Неделя\",\"Понеделник\",\"Вторник\",\"Сряда\",\"Четвъртък\",\"Петък\",\"Събота\"],dayNamesShort:[\"Нед\",\"Пон\",\"Вто\",\"Сря\",\"Чет\",\"Пет\",\"Съб\"],dayNamesMin:[\"Не\",\"По\",\"Вт\",\"Ср\",\"Че\",\"Пе\",\"Съ\"],weekHeader:\"Wk\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"bg\",{buttonText:{month:\"Месец\",week:\"Седмица\",day:\"Ден\",list:\"График\"},allDayText:\"Цял ден\",eventLimitText:function(e){return\"+още \"+e}})}(),function(){(t.defineLocale||t.lang).call(t,\"ca\",{months:\"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre\".split(\"_\"),monthsShort:\"gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.\".split(\"_\"),weekdays:\"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte\".split(\"_\"),weekdaysShort:\"dg._dl._dt._dc._dj._dv._ds.\".split(\"_\"),weekdaysMin:\"Dg_Dl_Dt_Dc_Dj_Dv_Ds\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd D MMMM YYYY LT\"},calendar:{sameDay:function(){return\"[avui a \"+(1!==this.hours()?\"les\":\"la\")+\"] LT\"},nextDay:function(){return\"[demà a \"+(1!==this.hours()?\"les\":\"la\")+\"] LT\"},nextWeek:function(){return\"dddd [a \"+(1!==this.hours()?\"les\":\"la\")+\"] LT\"},lastDay:function(){return\"[ahir a \"+(1!==this.hours()?\"les\":\"la\")+\"] LT\"},lastWeek:function(){return\"[el] dddd [passat a \"+(1!==this.hours()?\"les\":\"la\")+\"] LT\"},sameElse:\"L\"},relativeTime:{future:\"en %s\",past:\"fa %s\",s:\"uns segons\",m:\"un minut\",mm:\"%d minuts\",h:\"una hora\",hh:\"%d hores\",d:\"un dia\",dd:\"%d dies\",M:\"un mes\",MM:\"%d mesos\",y:\"un any\",yy:\"%d anys\"},ordinalParse:/\\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var a=1===e?\"r\":2===e?\"n\":3===e?\"r\":4===e?\"t\":\"è\";return(\"w\"===t||\"W\"===t)&&(a=\"a\"),e+a},week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"ca\",\"ca\",{closeText:\"Tanca\",prevText:\"Anterior\",nextText:\"Següent\",currentText:\"Avui\",monthNames:[\"gener\",\"febrer\",\"març\",\"abril\",\"maig\",\"juny\",\"juliol\",\"agost\",\"setembre\",\"octubre\",\"novembre\",\"desembre\"],monthNamesShort:[\"gen\",\"feb\",\"març\",\"abr\",\"maig\",\"juny\",\"jul\",\"ag\",\"set\",\"oct\",\"nov\",\"des\"],dayNames:[\"diumenge\",\"dilluns\",\"dimarts\",\"dimecres\",\"dijous\",\"divendres\",\"dissabte\"],dayNamesShort:[\"dg\",\"dl\",\"dt\",\"dc\",\"dj\",\"dv\",\"ds\"],dayNamesMin:[\"dg\",\"dl\",\"dt\",\"dc\",\"dj\",\"dv\",\"ds\"],weekHeader:\"Set\",dateFormat:\"dd/mm/yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"ca\",{buttonText:{month:\"Mes\",week:\"Setmana\",day:\"Dia\",list:\"Agenda\"},allDayText:\"Tot el dia\",eventLimitText:\"més\"})}(),function(){function a(e){return e>1&&5>e&&1!==~~(e/10)}function n(e,t,n,r){var i=e+\" \";switch(n){case\"s\":return t||r?\"pár sekund\":\"pár sekundami\";case\"m\":return t?\"minuta\":r?\"minutu\":\"minutou\";case\"mm\":return t||r?i+(a(e)?\"minuty\":\"minut\"):i+\"minutami\";case\"h\":return t?\"hodina\":r?\"hodinu\":\"hodinou\";case\"hh\":return t||r?i+(a(e)?\"hodiny\":\"hodin\"):i+\"hodinami\";case\"d\":return t||r?\"den\":\"dnem\";case\"dd\":return t||r?i+(a(e)?\"dny\":\"dní\"):i+\"dny\";case\"M\":return t||r?\"měsíc\":\"měsícem\";case\"MM\":return t||r?i+(a(e)?\"měsíce\":\"měsíců\"):i+\"měsíci\";case\"y\":return t||r?\"rok\":\"rokem\";case\"yy\":return t||r?i+(a(e)?\"roky\":\"let\"):i+\"lety\"}}var r=\"leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec\".split(\"_\"),i=\"led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro\".split(\"_\");(t.defineLocale||t.lang).call(t,\"cs\",{months:r,monthsShort:i,monthsParse:function(e,t){var a,n=[];for(a=0;12>a;a++)n[a]=RegExp(\"^\"+e[a]+\"$|^\"+t[a]+\"$\",\"i\");return n}(r,i),weekdays:\"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota\".split(\"_\"),weekdaysShort:\"ne_po_út_st_čt_pá_so\".split(\"_\"),weekdaysMin:\"ne_po_út_st_čt_pá_so\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD.MM.YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY LT\",LLLL:\"dddd D. MMMM YYYY LT\"},calendar:{sameDay:\"[dnes v] LT\",nextDay:\"[zítra v] LT\",nextWeek:function(){switch(this.day()){case 0:return\"[v neděli v] LT\";case 1:case 2:return\"[v] dddd [v] LT\";case 3:return\"[ve středu v] LT\";case 4:return\"[ve čtvrtek v] LT\";case 5:return\"[v pátek v] LT\";case 6:return\"[v sobotu v] LT\"}},lastDay:\"[včera v] LT\",lastWeek:function(){switch(this.day()){case 0:return\"[minulou neděli v] LT\";case 1:case 2:return\"[minulé] dddd [v] LT\";case 3:return\"[minulou středu v] LT\";case 4:case 5:return\"[minulý] dddd [v] LT\";case 6:return\"[minulou sobotu v] LT\"}},sameElse:\"L\"},relativeTime:{future:\"za %s\",past:\"před %s\",s:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"cs\",\"cs\",{closeText:\"Zavřít\",prevText:\"&#x3C;Dříve\",nextText:\"Později&#x3E;\",currentText:\"Nyní\",monthNames:[\"leden\",\"únor\",\"březen\",\"duben\",\"květen\",\"červen\",\"červenec\",\"srpen\",\"září\",\"říjen\",\"listopad\",\"prosinec\"],monthNamesShort:[\"led\",\"úno\",\"bře\",\"dub\",\"kvě\",\"čer\",\"čvc\",\"srp\",\"zář\",\"říj\",\"lis\",\"pro\"],dayNames:[\"neděle\",\"pondělí\",\"úterý\",\"středa\",\"čtvrtek\",\"pátek\",\"sobota\"],dayNamesShort:[\"ne\",\"po\",\"út\",\"st\",\"čt\",\"pá\",\"so\"],dayNamesMin:[\"ne\",\"po\",\"út\",\"st\",\"čt\",\"pá\",\"so\"],weekHeader:\"Týd\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"cs\",{buttonText:{month:\"Měsíc\",week:\"Týden\",day:\"Den\",list:\"Agenda\"},allDayText:\"Celý den\",eventLimitText:function(e){return\"+další: \"+e}})}(),function(){(t.defineLocale||t.lang).call(t,\"da\",{months:\"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december\".split(\"_\"),monthsShort:\"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec\".split(\"_\"),weekdays:\"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag\".split(\"_\"),weekdaysShort:\"søn_man_tir_ons_tor_fre_lør\".split(\"_\"),weekdaysMin:\"sø_ma_ti_on_to_fr_lø\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY LT\",LLLL:\"dddd [d.] D. MMMM YYYY LT\"},calendar:{sameDay:\"[I dag kl.] LT\",nextDay:\"[I morgen kl.] LT\",nextWeek:\"dddd [kl.] LT\",lastDay:\"[I går kl.] LT\",lastWeek:\"[sidste] dddd [kl] LT\",sameElse:\"L\"},relativeTime:{future:\"om %s\",past:\"%s siden\",s:\"få sekunder\",m:\"et minut\",mm:\"%d minutter\",h:\"en time\",hh:\"%d timer\",d:\"en dag\",dd:\"%d dage\",M:\"en måned\",MM:\"%d måneder\",y:\"et år\",yy:\"%d år\"},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"da\",\"da\",{closeText:\"Luk\",prevText:\"&#x3C;Forrige\",nextText:\"Næste&#x3E;\",currentText:\"Idag\",monthNames:[\"Januar\",\"Februar\",\"Marts\",\"April\",\"Maj\",\"Juni\",\"Juli\",\"August\",\"September\",\"Oktober\",\"November\",\"December\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"Maj\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Okt\",\"Nov\",\"Dec\"],dayNames:[\"Søndag\",\"Mandag\",\"Tirsdag\",\"Onsdag\",\"Torsdag\",\"Fredag\",\"Lørdag\"],dayNamesShort:[\"Søn\",\"Man\",\"Tir\",\"Ons\",\"Tor\",\"Fre\",\"Lør\"],dayNamesMin:[\"Sø\",\"Ma\",\"Ti\",\"On\",\"To\",\"Fr\",\"Lø\"],weekHeader:\"Uge\",dateFormat:\"dd-mm-yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"da\",{buttonText:{month:\"Måned\",week:\"Uge\",day:\"Dag\",list:\"Agenda\"},allDayText:\"Hele dagen\",eventLimitText:\"flere\"})}(),function(){function a(e,t,a){var n={m:[\"eine Minute\",\"einer Minute\"],h:[\"eine Stunde\",\"einer Stunde\"],d:[\"ein Tag\",\"einem Tag\"],dd:[e+\" Tage\",e+\" Tagen\"],M:[\"ein Monat\",\"einem Monat\"],MM:[e+\" Monate\",e+\" Monaten\"],y:[\"ein Jahr\",\"einem Jahr\"],yy:[e+\" Jahre\",e+\" Jahren\"]};return t?n[a][0]:n[a][1]}(t.defineLocale||t.lang).call(t,\"de-at\",{months:\"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember\".split(\"_\"),monthsShort:\"Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.\".split(\"_\"),weekdays:\"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag\".split(\"_\"),weekdaysShort:\"So._Mo._Di._Mi._Do._Fr._Sa.\".split(\"_\"),weekdaysMin:\"So_Mo_Di_Mi_Do_Fr_Sa\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"HH:mm:ss\",L:\"DD.MM.YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY LT\",LLLL:\"dddd, D. MMMM YYYY LT\"},calendar:{sameDay:\"[Heute um] LT [Uhr]\",sameElse:\"L\",nextDay:\"[Morgen um] LT [Uhr]\",nextWeek:\"dddd [um] LT [Uhr]\",lastDay:\"[Gestern um] LT [Uhr]\",lastWeek:\"[letzten] dddd [um] LT [Uhr]\"},relativeTime:{future:\"in %s\",past:\"vor %s\",s:\"ein paar Sekunden\",m:a,mm:\"%d Minuten\",h:a,hh:\"%d Stunden\",d:a,dd:a,M:a,MM:a,y:a,yy:a},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"de-at\",\"de\",{closeText:\"Schließen\",prevText:\"&#x3C;Zurück\",nextText:\"Vor&#x3E;\",currentText:\"Heute\",monthNames:[\"Januar\",\"Februar\",\"März\",\"April\",\"Mai\",\"Juni\",\"Juli\",\"August\",\"September\",\"Oktober\",\"November\",\"Dezember\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mär\",\"Apr\",\"Mai\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Okt\",\"Nov\",\"Dez\"],dayNames:[\"Sonntag\",\"Montag\",\"Dienstag\",\"Mittwoch\",\"Donnerstag\",\"Freitag\",\"Samstag\"],dayNamesShort:[\"So\",\"Mo\",\"Di\",\"Mi\",\"Do\",\"Fr\",\"Sa\"],dayNamesMin:[\"So\",\"Mo\",\"Di\",\"Mi\",\"Do\",\"Fr\",\"Sa\"],weekHeader:\"KW\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"de-at\",{buttonText:{month:\"Monat\",week:\"Woche\",day:\"Tag\",list:\"Terminübersicht\"},allDayText:\"Ganztägig\",eventLimitText:function(e){return\"+ weitere \"+e}})}(),function(){function a(e,t,a){var n={m:[\"eine Minute\",\"einer Minute\"],h:[\"eine Stunde\",\"einer Stunde\"],d:[\"ein Tag\",\"einem Tag\"],dd:[e+\" Tage\",e+\" Tagen\"],M:[\"ein Monat\",\"einem Monat\"],MM:[e+\" Monate\",e+\" Monaten\"],y:[\"ein Jahr\",\"einem Jahr\"],yy:[e+\" Jahre\",e+\" Jahren\"]};return t?n[a][0]:n[a][1]}(t.defineLocale||t.lang).call(t,\"de\",{months:\"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember\".split(\"_\"),monthsShort:\"Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.\".split(\"_\"),weekdays:\"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag\".split(\"_\"),weekdaysShort:\"So._Mo._Di._Mi._Do._Fr._Sa.\".split(\"_\"),weekdaysMin:\"So_Mo_Di_Mi_Do_Fr_Sa\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"HH:mm:ss\",L:\"DD.MM.YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY LT\",LLLL:\"dddd, D. MMMM YYYY LT\"},calendar:{sameDay:\"[Heute um] LT [Uhr]\",sameElse:\"L\",nextDay:\"[Morgen um] LT [Uhr]\",nextWeek:\"dddd [um] LT [Uhr]\",lastDay:\"[Gestern um] LT [Uhr]\",lastWeek:\"[letzten] dddd [um] LT [Uhr]\"},relativeTime:{future:\"in %s\",past:\"vor %s\",s:\"ein paar Sekunden\",m:a,mm:\"%d Minuten\",h:a,hh:\"%d Stunden\",d:a,dd:a,M:a,MM:a,y:a,yy:a},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"de\",\"de\",{closeText:\"Schließen\",prevText:\"&#x3C;Zurück\",nextText:\"Vor&#x3E;\",currentText:\"Heute\",monthNames:[\"Januar\",\"Februar\",\"März\",\"April\",\"Mai\",\"Juni\",\"Juli\",\"August\",\"September\",\"Oktober\",\"November\",\"Dezember\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mär\",\"Apr\",\"Mai\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Okt\",\"Nov\",\"Dez\"],dayNames:[\"Sonntag\",\"Montag\",\"Dienstag\",\"Mittwoch\",\"Donnerstag\",\"Freitag\",\"Samstag\"],dayNamesShort:[\"So\",\"Mo\",\"Di\",\"Mi\",\"Do\",\"Fr\",\"Sa\"],dayNamesMin:[\"So\",\"Mo\",\"Di\",\"Mi\",\"Do\",\"Fr\",\"Sa\"],weekHeader:\"KW\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"de\",{buttonText:{month:\"Monat\",week:\"Woche\",day:\"Tag\",list:\"Terminübersicht\"},allDayText:\"Ganztägig\",eventLimitText:function(e){return\"+ weitere \"+e}})}(),function(){(t.defineLocale||t.lang).call(t,\"el\",{monthsNominativeEl:\"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος\".split(\"_\"),monthsGenitiveEl:\"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου\".split(\"_\"),months:function(e,t){return/D/.test(t.substring(0,t.indexOf(\"MMMM\")))?this._monthsGenitiveEl[e.month()]:this._monthsNominativeEl[e.month()]},monthsShort:\"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ\".split(\"_\"),weekdays:\"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο\".split(\"_\"),weekdaysShort:\"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ\".split(\"_\"),weekdaysMin:\"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα\".split(\"_\"),meridiem:function(e,t,a){return e>11?a?\"μμ\":\"ΜΜ\":a?\"πμ\":\"ΠΜ\"},isPM:function(e){return\"μ\"===(e+\"\").toLowerCase()[0]},meridiemParse:/[ΠΜ]\\.?Μ?\\.?/i,longDateFormat:{LT:\"h:mm A\",LTS:\"h:mm:ss A\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd, D MMMM YYYY LT\"},calendarEl:{sameDay:\"[Σήμερα {}] LT\",nextDay:\"[Αύριο {}] LT\",nextWeek:\"dddd [{}] LT\",lastDay:\"[Χθες {}] LT\",lastWeek:function(){switch(this.day()){case 6:return\"[το προηγούμενο] dddd [{}] LT\";default:return\"[την προηγούμενη] dddd [{}] LT\"}},sameElse:\"L\"},calendar:function(e,t){var a=this._calendarEl[e],n=t&&t.hours();return\"function\"==typeof a&&(a=a.apply(t)),a.replace(\"{}\",1===n%12?\"στη\":\"στις\")},relativeTime:{future:\"σε %s\",past:\"%s πριν\",s:\"λίγα δευτερόλεπτα\",m:\"ένα λεπτό\",mm:\"%d λεπτά\",h:\"μία ώρα\",hh:\"%d ώρες\",d:\"μία μέρα\",dd:\"%d μέρες\",M:\"ένας μήνας\",MM:\"%d μήνες\",y:\"ένας χρόνος\",yy:\"%d χρόνια\"},ordinalParse:/\\d{1,2}η/,ordinal:\"%dη\",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"el\",\"el\",{closeText:\"Κλείσιμο\",prevText:\"Προηγούμενος\",nextText:\"Επόμενος\",currentText:\"Σήμερα\",monthNames:[\"Ιανουάριος\",\"Φεβρουάριος\",\"Μάρτιος\",\"Απρίλιος\",\"Μάιος\",\"Ιούνιος\",\"Ιούλιος\",\"Αύγουστος\",\"Σεπτέμβριος\",\"Οκτώβριος\",\"Νοέμβριος\",\"Δεκέμβριος\"],monthNamesShort:[\"Ιαν\",\"Φεβ\",\"Μαρ\",\"Απρ\",\"Μαι\",\"Ιουν\",\"Ιουλ\",\"Αυγ\",\"Σεπ\",\"Οκτ\",\"Νοε\",\"Δεκ\"],dayNames:[\"Κυριακή\",\"Δευτέρα\",\"Τρίτη\",\"Τετάρτη\",\"Πέμπτη\",\"Παρασκευή\",\"Σάββατο\"],dayNamesShort:[\"Κυρ\",\"Δευ\",\"Τρι\",\"Τετ\",\"Πεμ\",\"Παρ\",\"Σαβ\"],dayNamesMin:[\"Κυ\",\"Δε\",\"Τρ\",\"Τε\",\"Πε\",\"Πα\",\"Σα\"],weekHeader:\"Εβδ\",dateFormat:\"dd/mm/yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"el\",{buttonText:{month:\"Μήνας\",week:\"Εβδομάδα\",day:\"Ημέρα\",list:\"Ατζέντα\"},allDayText:\"Ολοήμερο\",eventLimitText:\"περισσότερα\"})}(),function(){(t.defineLocale||t.lang).call(t,\"en-au\",{months:\"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\"),monthsShort:\"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec\".split(\"_\"),weekdays:\"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),weekdaysShort:\"Sun_Mon_Tue_Wed_Thu_Fri_Sat\".split(\"_\"),weekdaysMin:\"Su_Mo_Tu_We_Th_Fr_Sa\".split(\"_\"),longDateFormat:{LT:\"h:mm A\",LTS:\"h:mm:ss A\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd, D MMMM YYYY LT\"},calendar:{sameDay:\"[Today at] LT\",nextDay:\"[Tomorrow at] LT\",nextWeek:\"dddd [at] LT\",lastDay:\"[Yesterday at] LT\",lastWeek:\"[Last] dddd [at] LT\",sameElse:\"L\"},relativeTime:{future:\"in %s\",past:\"%s ago\",s:\"a few seconds\",m:\"a minute\",mm:\"%d minutes\",h:\"an hour\",hh:\"%d hours\",d:\"a day\",dd:\"%d days\",M:\"a month\",MM:\"%d months\",y:\"a year\",yy:\"%d years\"},ordinalParse:/\\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,a=1===~~(e%100/10)?\"th\":1===t?\"st\":2===t?\"nd\":3===t?\"rd\":\"th\";return e+a},week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"en-au\",\"en-AU\",{closeText:\"Done\",prevText:\"Prev\",nextText:\"Next\",currentText:\"Today\",monthNames:[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],dayNames:[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"],dayNamesShort:[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],dayNamesMin:[\"Su\",\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\",\"Sa\"],weekHeader:\"Wk\",dateFormat:\"dd/mm/yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"en-au\")}(),function(){(t.defineLocale||t.lang).call(t,\"en-ca\",{months:\"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\"),monthsShort:\"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec\".split(\"_\"),weekdays:\"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),weekdaysShort:\"Sun_Mon_Tue_Wed_Thu_Fri_Sat\".split(\"_\"),weekdaysMin:\"Su_Mo_Tu_We_Th_Fr_Sa\".split(\"_\"),longDateFormat:{LT:\"h:mm A\",LTS:\"h:mm:ss A\",L:\"YYYY-MM-DD\",LL:\"D MMMM, YYYY\",LLL:\"D MMMM, YYYY LT\",LLLL:\"dddd, D MMMM, YYYY LT\"},calendar:{sameDay:\"[Today at] LT\",nextDay:\"[Tomorrow at] LT\",nextWeek:\"dddd [at] LT\",lastDay:\"[Yesterday at] LT\",lastWeek:\"[Last] dddd [at] LT\",sameElse:\"L\"},relativeTime:{future:\"in %s\",past:\"%s ago\",s:\"a few seconds\",m:\"a minute\",mm:\"%d minutes\",h:\"an hour\",hh:\"%d hours\",d:\"a day\",dd:\"%d days\",M:\"a month\",MM:\"%d months\",y:\"a year\",yy:\"%d years\"},ordinalParse:/\\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,a=1===~~(e%100/10)?\"th\":1===t?\"st\":2===t?\"nd\":3===t?\"rd\":\"th\";return e+a}}),e.fullCalendar.lang(\"en-ca\")}(),function(){(t.defineLocale||t.lang).call(t,\"en-gb\",{months:\"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\"),monthsShort:\"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec\".split(\"_\"),weekdays:\"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),weekdaysShort:\"Sun_Mon_Tue_Wed_Thu_Fri_Sat\".split(\"_\"),weekdaysMin:\"Su_Mo_Tu_We_Th_Fr_Sa\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"HH:mm:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd, D MMMM YYYY LT\"},calendar:{sameDay:\"[Today at] LT\",nextDay:\"[Tomorrow at] LT\",nextWeek:\"dddd [at] LT\",lastDay:\"[Yesterday at] LT\",lastWeek:\"[Last] dddd [at] LT\",sameElse:\"L\"},relativeTime:{future:\"in %s\",past:\"%s ago\",s:\"a few seconds\",m:\"a minute\",mm:\"%d minutes\",h:\"an hour\",hh:\"%d hours\",d:\"a day\",dd:\"%d days\",M:\"a month\",MM:\"%d months\",y:\"a year\",yy:\"%d years\"},ordinalParse:/\\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,a=1===~~(e%100/10)?\"th\":1===t?\"st\":2===t?\"nd\":3===t?\"rd\":\"th\";return e+a},week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"en-gb\",\"en-GB\",{closeText:\"Done\",prevText:\"Prev\",nextText:\"Next\",currentText:\"Today\",monthNames:[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],dayNames:[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"],dayNamesShort:[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],dayNamesMin:[\"Su\",\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\",\"Sa\"],weekHeader:\"Wk\",dateFormat:\"dd/mm/yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"en-gb\")}(),function(){var a=\"ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.\".split(\"_\"),n=\"ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic\".split(\"_\");(t.defineLocale||t.lang).call(t,\"es\",{months:\"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre\".split(\"_\"),monthsShort:function(e,t){return/-MMM-/.test(t)?n[e.month()]:a[e.month()]},weekdays:\"domingo_lunes_martes_miércoles_jueves_viernes_sábado\".split(\"_\"),weekdaysShort:\"dom._lun._mar._mié._jue._vie._sáb.\".split(\"_\"),weekdaysMin:\"Do_Lu_Ma_Mi_Ju_Vi_Sá\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D [de] MMMM [de] YYYY\",LLL:\"D [de] MMMM [de] YYYY LT\",LLLL:\"dddd, D [de] MMMM [de] YYYY LT\"},calendar:{sameDay:function(){return\"[hoy a la\"+(1!==this.hours()?\"s\":\"\")+\"] LT\"},nextDay:function(){return\"[mañana a la\"+(1!==this.hours()?\"s\":\"\")+\"] LT\"},nextWeek:function(){return\"dddd [a la\"+(1!==this.hours()?\"s\":\"\")+\"] LT\"},lastDay:function(){return\"[ayer a la\"+(1!==this.hours()?\"s\":\"\")+\"] LT\"},lastWeek:function(){return\"[el] dddd [pasado a la\"+(1!==this.hours()?\"s\":\"\")+\"] LT\"},sameElse:\"L\"},relativeTime:{future:\"en %s\",past:\"hace %s\",s:\"unos segundos\",m:\"un minuto\",mm:\"%d minutos\",h:\"una hora\",hh:\"%d horas\",d:\"un día\",dd:\"%d días\",M:\"un mes\",MM:\"%d meses\",y:\"un año\",yy:\"%d años\"},ordinalParse:/\\d{1,2}º/,ordinal:\"%dº\",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"es\",\"es\",{closeText:\"Cerrar\",prevText:\"&#x3C;Ant\",nextText:\"Sig&#x3E;\",currentText:\"Hoy\",monthNames:[\"enero\",\"febrero\",\"marzo\",\"abril\",\"mayo\",\"junio\",\"julio\",\"agosto\",\"septiembre\",\"octubre\",\"noviembre\",\"diciembre\"],monthNamesShort:[\"ene\",\"feb\",\"mar\",\"abr\",\"may\",\"jun\",\"jul\",\"ago\",\"sep\",\"oct\",\"nov\",\"dic\"],dayNames:[\"domingo\",\"lunes\",\"martes\",\"miércoles\",\"jueves\",\"viernes\",\"sábado\"],dayNamesShort:[\"dom\",\"lun\",\"mar\",\"mié\",\"jue\",\"vie\",\"sáb\"],dayNamesMin:[\"D\",\"L\",\"M\",\"X\",\"J\",\"V\",\"S\"],weekHeader:\"Sm\",dateFormat:\"dd/mm/yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"es\",{buttonText:{month:\"Mes\",week:\"Semana\",day:\"Día\",list:\"Agenda\"},allDayHtml:\"Todo<br/>el día\",eventLimitText:\"más\"})}(),function(){var a={1:\"۱\",2:\"۲\",3:\"۳\",4:\"۴\",5:\"۵\",6:\"۶\",7:\"۷\",8:\"۸\",9:\"۹\",0:\"۰\"},n={\"۱\":\"1\",\"۲\":\"2\",\"۳\":\"3\",\"۴\":\"4\",\"۵\":\"5\",\"۶\":\"6\",\"۷\":\"7\",\"۸\":\"8\",\"۹\":\"9\",\"۰\":\"0\"};(t.defineLocale||t.lang).call(t,\"fa\",{months:\"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر\".split(\"_\"),monthsShort:\"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر\".split(\"_\"),weekdays:\"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه\".split(\"_\"),weekdaysShort:\"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه\".split(\"_\"),weekdaysMin:\"ی_د_س_چ_پ_ج_ش\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd, D MMMM YYYY LT\"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(e){return/بعد از ظهر/.test(e)},meridiem:function(e){return 12>e?\"قبل از ظهر\":\"بعد از ظهر\"},calendar:{sameDay:\"[امروز ساعت] LT\",nextDay:\"[فردا ساعت] LT\",nextWeek:\"dddd [ساعت] LT\",lastDay:\"[دیروز ساعت] LT\",lastWeek:\"dddd [پیش] [ساعت] LT\",sameElse:\"L\"},relativeTime:{future:\"در %s\",past:\"%s پیش\",s:\"چندین ثانیه\",m:\"یک دقیقه\",mm:\"%d دقیقه\",h:\"یک ساعت\",hh:\"%d ساعت\",d:\"یک روز\",dd:\"%d روز\",M:\"یک ماه\",MM:\"%d ماه\",y:\"یک سال\",yy:\"%d سال\"},preparse:function(e){return e.replace(/[۰-۹]/g,function(e){return n[e]}).replace(/،/g,\",\")},postformat:function(e){return e.replace(/\\d/g,function(e){return a[e]}).replace(/,/g,\"،\")},ordinalParse:/\\d{1,2}م/,ordinal:\"%dم\",week:{dow:6,doy:12}}),e.fullCalendar.datepickerLang(\"fa\",\"fa\",{closeText:\"بستن\",prevText:\"&#x3C;قبلی\",nextText:\"بعدی&#x3E;\",currentText:\"امروز\",monthNames:[\"ژانویه\",\"فوریه\",\"مارس\",\"آوریل\",\"مه\",\"ژوئن\",\"ژوئیه\",\"اوت\",\"سپتامبر\",\"اکتبر\",\"نوامبر\",\"دسامبر\"],monthNamesShort:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],dayNames:[\"يکشنبه\",\"دوشنبه\",\"سه‌شنبه\",\"چهارشنبه\",\"پنجشنبه\",\"جمعه\",\"شنبه\"],dayNamesShort:[\"ی\",\"د\",\"س\",\"چ\",\"پ\",\"ج\",\"ش\"],dayNamesMin:[\"ی\",\"د\",\"س\",\"چ\",\"پ\",\"ج\",\"ش\"],weekHeader:\"هف\",dateFormat:\"yy/mm/dd\",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"fa\",{buttonText:{month:\"ماه\",week:\"هفته\",day:\"روز\",list:\"برنامه\"},allDayText:\"تمام روز\",eventLimitText:function(e){return\"بیش از \"+e\n}})}(),function(){function a(e,t,a,r){var i=\"\";switch(a){case\"s\":return r?\"muutaman sekunnin\":\"muutama sekunti\";case\"m\":return r?\"minuutin\":\"minuutti\";case\"mm\":i=r?\"minuutin\":\"minuuttia\";break;case\"h\":return r?\"tunnin\":\"tunti\";case\"hh\":i=r?\"tunnin\":\"tuntia\";break;case\"d\":return r?\"päivän\":\"päivä\";case\"dd\":i=r?\"päivän\":\"päivää\";break;case\"M\":return r?\"kuukauden\":\"kuukausi\";case\"MM\":i=r?\"kuukauden\":\"kuukautta\";break;case\"y\":return r?\"vuoden\":\"vuosi\";case\"yy\":i=r?\"vuoden\":\"vuotta\"}return i=n(e,r)+\" \"+i}function n(e,t){return 10>e?t?i[e]:r[e]:e}var r=\"nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän\".split(\" \"),i=[\"nolla\",\"yhden\",\"kahden\",\"kolmen\",\"neljän\",\"viiden\",\"kuuden\",r[7],r[8],r[9]];(t.defineLocale||t.lang).call(t,\"fi\",{months:\"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu\".split(\"_\"),monthsShort:\"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu\".split(\"_\"),weekdays:\"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai\".split(\"_\"),weekdaysShort:\"su_ma_ti_ke_to_pe_la\".split(\"_\"),weekdaysMin:\"su_ma_ti_ke_to_pe_la\".split(\"_\"),longDateFormat:{LT:\"HH.mm\",LTS:\"HH.mm.ss\",L:\"DD.MM.YYYY\",LL:\"Do MMMM[ta] YYYY\",LLL:\"Do MMMM[ta] YYYY, [klo] LT\",LLLL:\"dddd, Do MMMM[ta] YYYY, [klo] LT\",l:\"D.M.YYYY\",ll:\"Do MMM YYYY\",lll:\"Do MMM YYYY, [klo] LT\",llll:\"ddd, Do MMM YYYY, [klo] LT\"},calendar:{sameDay:\"[tänään] [klo] LT\",nextDay:\"[huomenna] [klo] LT\",nextWeek:\"dddd [klo] LT\",lastDay:\"[eilen] [klo] LT\",lastWeek:\"[viime] dddd[na] [klo] LT\",sameElse:\"L\"},relativeTime:{future:\"%s päästä\",past:\"%s sitten\",s:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"fi\",\"fi\",{closeText:\"Sulje\",prevText:\"&#xAB;Edellinen\",nextText:\"Seuraava&#xBB;\",currentText:\"Tänään\",monthNames:[\"Tammikuu\",\"Helmikuu\",\"Maaliskuu\",\"Huhtikuu\",\"Toukokuu\",\"Kesäkuu\",\"Heinäkuu\",\"Elokuu\",\"Syyskuu\",\"Lokakuu\",\"Marraskuu\",\"Joulukuu\"],monthNamesShort:[\"Tammi\",\"Helmi\",\"Maalis\",\"Huhti\",\"Touko\",\"Kesä\",\"Heinä\",\"Elo\",\"Syys\",\"Loka\",\"Marras\",\"Joulu\"],dayNamesShort:[\"Su\",\"Ma\",\"Ti\",\"Ke\",\"To\",\"Pe\",\"La\"],dayNames:[\"Sunnuntai\",\"Maanantai\",\"Tiistai\",\"Keskiviikko\",\"Torstai\",\"Perjantai\",\"Lauantai\"],dayNamesMin:[\"Su\",\"Ma\",\"Ti\",\"Ke\",\"To\",\"Pe\",\"La\"],weekHeader:\"Vk\",dateFormat:\"d.m.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"fi\",{buttonText:{month:\"Kuukausi\",week:\"Viikko\",day:\"Päivä\",list:\"Tapahtumat\"},allDayText:\"Koko päivä\",eventLimitText:\"lisää\"})}(),function(){(t.defineLocale||t.lang).call(t,\"fr-ca\",{months:\"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre\".split(\"_\"),monthsShort:\"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.\".split(\"_\"),weekdays:\"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi\".split(\"_\"),weekdaysShort:\"dim._lun._mar._mer._jeu._ven._sam.\".split(\"_\"),weekdaysMin:\"Di_Lu_Ma_Me_Je_Ve_Sa\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"YYYY-MM-DD\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd D MMMM YYYY LT\"},calendar:{sameDay:\"[Aujourd'hui à] LT\",nextDay:\"[Demain à] LT\",nextWeek:\"dddd [à] LT\",lastDay:\"[Hier à] LT\",lastWeek:\"dddd [dernier à] LT\",sameElse:\"L\"},relativeTime:{future:\"dans %s\",past:\"il y a %s\",s:\"quelques secondes\",m:\"une minute\",mm:\"%d minutes\",h:\"une heure\",hh:\"%d heures\",d:\"un jour\",dd:\"%d jours\",M:\"un mois\",MM:\"%d mois\",y:\"un an\",yy:\"%d ans\"},ordinalParse:/\\d{1,2}(er|)/,ordinal:function(e){return e+(1===e?\"er\":\"\")}}),e.fullCalendar.datepickerLang(\"fr-ca\",\"fr-CA\",{closeText:\"Fermer\",prevText:\"Précédent\",nextText:\"Suivant\",currentText:\"Aujourd'hui\",monthNames:[\"janvier\",\"février\",\"mars\",\"avril\",\"mai\",\"juin\",\"juillet\",\"août\",\"septembre\",\"octobre\",\"novembre\",\"décembre\"],monthNamesShort:[\"janv.\",\"févr.\",\"mars\",\"avril\",\"mai\",\"juin\",\"juil.\",\"août\",\"sept.\",\"oct.\",\"nov.\",\"déc.\"],dayNames:[\"dimanche\",\"lundi\",\"mardi\",\"mercredi\",\"jeudi\",\"vendredi\",\"samedi\"],dayNamesShort:[\"dim.\",\"lun.\",\"mar.\",\"mer.\",\"jeu.\",\"ven.\",\"sam.\"],dayNamesMin:[\"D\",\"L\",\"M\",\"M\",\"J\",\"V\",\"S\"],weekHeader:\"Sem.\",dateFormat:\"yy-mm-dd\",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"fr-ca\",{buttonText:{month:\"Mois\",week:\"Semaine\",day:\"Jour\",list:\"Mon planning\"},allDayHtml:\"Toute la<br/>journée\",eventLimitText:\"en plus\"})}(),function(){(t.defineLocale||t.lang).call(t,\"fr\",{months:\"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre\".split(\"_\"),monthsShort:\"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.\".split(\"_\"),weekdays:\"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi\".split(\"_\"),weekdaysShort:\"dim._lun._mar._mer._jeu._ven._sam.\".split(\"_\"),weekdaysMin:\"Di_Lu_Ma_Me_Je_Ve_Sa\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd D MMMM YYYY LT\"},calendar:{sameDay:\"[Aujourd'hui à] LT\",nextDay:\"[Demain à] LT\",nextWeek:\"dddd [à] LT\",lastDay:\"[Hier à] LT\",lastWeek:\"dddd [dernier à] LT\",sameElse:\"L\"},relativeTime:{future:\"dans %s\",past:\"il y a %s\",s:\"quelques secondes\",m:\"une minute\",mm:\"%d minutes\",h:\"une heure\",hh:\"%d heures\",d:\"un jour\",dd:\"%d jours\",M:\"un mois\",MM:\"%d mois\",y:\"un an\",yy:\"%d ans\"},ordinalParse:/\\d{1,2}(er|)/,ordinal:function(e){return e+(1===e?\"er\":\"\")},week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"fr\",\"fr\",{closeText:\"Fermer\",prevText:\"Précédent\",nextText:\"Suivant\",currentText:\"Aujourd'hui\",monthNames:[\"janvier\",\"février\",\"mars\",\"avril\",\"mai\",\"juin\",\"juillet\",\"août\",\"septembre\",\"octobre\",\"novembre\",\"décembre\"],monthNamesShort:[\"janv.\",\"févr.\",\"mars\",\"avr.\",\"mai\",\"juin\",\"juil.\",\"août\",\"sept.\",\"oct.\",\"nov.\",\"déc.\"],dayNames:[\"dimanche\",\"lundi\",\"mardi\",\"mercredi\",\"jeudi\",\"vendredi\",\"samedi\"],dayNamesShort:[\"dim.\",\"lun.\",\"mar.\",\"mer.\",\"jeu.\",\"ven.\",\"sam.\"],dayNamesMin:[\"D\",\"L\",\"M\",\"M\",\"J\",\"V\",\"S\"],weekHeader:\"Sem.\",dateFormat:\"dd/mm/yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"fr\",{buttonText:{month:\"Mois\",week:\"Semaine\",day:\"Jour\",list:\"Mon planning\"},allDayHtml:\"Toute la<br/>journée\",eventLimitText:\"en plus\"})}(),function(){(t.defineLocale||t.lang).call(t,\"he\",{months:\"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר\".split(\"_\"),monthsShort:\"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳\".split(\"_\"),weekdays:\"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת\".split(\"_\"),weekdaysShort:\"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳\".split(\"_\"),weekdaysMin:\"א_ב_ג_ד_ה_ו_ש\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D [ב]MMMM YYYY\",LLL:\"D [ב]MMMM YYYY LT\",LLLL:\"dddd, D [ב]MMMM YYYY LT\",l:\"D/M/YYYY\",ll:\"D MMM YYYY\",lll:\"D MMM YYYY LT\",llll:\"ddd, D MMM YYYY LT\"},calendar:{sameDay:\"[היום ב־]LT\",nextDay:\"[מחר ב־]LT\",nextWeek:\"dddd [בשעה] LT\",lastDay:\"[אתמול ב־]LT\",lastWeek:\"[ביום] dddd [האחרון בשעה] LT\",sameElse:\"L\"},relativeTime:{future:\"בעוד %s\",past:\"לפני %s\",s:\"מספר שניות\",m:\"דקה\",mm:\"%d דקות\",h:\"שעה\",hh:function(e){return 2===e?\"שעתיים\":e+\" שעות\"},d:\"יום\",dd:function(e){return 2===e?\"יומיים\":e+\" ימים\"},M:\"חודש\",MM:function(e){return 2===e?\"חודשיים\":e+\" חודשים\"},y:\"שנה\",yy:function(e){return 2===e?\"שנתיים\":0===e%10&&10!==e?e+\" שנה\":e+\" שנים\"}}}),e.fullCalendar.datepickerLang(\"he\",\"he\",{closeText:\"סגור\",prevText:\"&#x3C;הקודם\",nextText:\"הבא&#x3E;\",currentText:\"היום\",monthNames:[\"ינואר\",\"פברואר\",\"מרץ\",\"אפריל\",\"מאי\",\"יוני\",\"יולי\",\"אוגוסט\",\"ספטמבר\",\"אוקטובר\",\"נובמבר\",\"דצמבר\"],monthNamesShort:[\"ינו\",\"פבר\",\"מרץ\",\"אפר\",\"מאי\",\"יוני\",\"יולי\",\"אוג\",\"ספט\",\"אוק\",\"נוב\",\"דצמ\"],dayNames:[\"ראשון\",\"שני\",\"שלישי\",\"רביעי\",\"חמישי\",\"שישי\",\"שבת\"],dayNamesShort:[\"א'\",\"ב'\",\"ג'\",\"ד'\",\"ה'\",\"ו'\",\"שבת\"],dayNamesMin:[\"א'\",\"ב'\",\"ג'\",\"ד'\",\"ה'\",\"ו'\",\"שבת\"],weekHeader:\"Wk\",dateFormat:\"dd/mm/yy\",firstDay:0,isRTL:!0,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"he\",{defaultButtonText:{month:\"חודש\",week:\"שבוע\",day:\"יום\",list:\"סדר יום\"},weekNumberTitle:\"שבוע\",allDayText:\"כל היום\",eventLimitText:\"אחר\"})}(),function(){var a={1:\"१\",2:\"२\",3:\"३\",4:\"४\",5:\"५\",6:\"६\",7:\"७\",8:\"८\",9:\"९\",0:\"०\"},n={\"१\":\"1\",\"२\":\"2\",\"३\":\"3\",\"४\":\"4\",\"५\":\"5\",\"६\":\"6\",\"७\":\"7\",\"८\":\"8\",\"९\":\"9\",\"०\":\"0\"};(t.defineLocale||t.lang).call(t,\"hi\",{months:\"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर\".split(\"_\"),monthsShort:\"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.\".split(\"_\"),weekdays:\"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार\".split(\"_\"),weekdaysShort:\"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि\".split(\"_\"),weekdaysMin:\"र_सो_मं_बु_गु_शु_श\".split(\"_\"),longDateFormat:{LT:\"A h:mm बजे\",LTS:\"A h:mm:ss बजे\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY, LT\",LLLL:\"dddd, D MMMM YYYY, LT\"},calendar:{sameDay:\"[आज] LT\",nextDay:\"[कल] LT\",nextWeek:\"dddd, LT\",lastDay:\"[कल] LT\",lastWeek:\"[पिछले] dddd, LT\",sameElse:\"L\"},relativeTime:{future:\"%s में\",past:\"%s पहले\",s:\"कुछ ही क्षण\",m:\"एक मिनट\",mm:\"%d मिनट\",h:\"एक घंटा\",hh:\"%d घंटे\",d:\"एक दिन\",dd:\"%d दिन\",M:\"एक महीने\",MM:\"%d महीने\",y:\"एक वर्ष\",yy:\"%d वर्ष\"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\\d/g,function(e){return a[e]})},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(e,t){return 12===e&&(e=0),\"रात\"===t?4>e?e:e+12:\"सुबह\"===t?e:\"दोपहर\"===t?e>=10?e:e+12:\"शाम\"===t?e+12:void 0},meridiem:function(e){return 4>e?\"रात\":10>e?\"सुबह\":17>e?\"दोपहर\":20>e?\"शाम\":\"रात\"},week:{dow:0,doy:6}}),e.fullCalendar.datepickerLang(\"hi\",\"hi\",{closeText:\"बंद\",prevText:\"पिछला\",nextText:\"अगला\",currentText:\"आज\",monthNames:[\"जनवरी \",\"फरवरी\",\"मार्च\",\"अप्रेल\",\"मई\",\"जून\",\"जूलाई\",\"अगस्त \",\"सितम्बर\",\"अक्टूबर\",\"नवम्बर\",\"दिसम्बर\"],monthNamesShort:[\"जन\",\"फर\",\"मार्च\",\"अप्रेल\",\"मई\",\"जून\",\"जूलाई\",\"अग\",\"सित\",\"अक्ट\",\"नव\",\"दि\"],dayNames:[\"रविवार\",\"सोमवार\",\"मंगलवार\",\"बुधवार\",\"गुरुवार\",\"शुक्रवार\",\"शनिवार\"],dayNamesShort:[\"रवि\",\"सोम\",\"मंगल\",\"बुध\",\"गुरु\",\"शुक्र\",\"शनि\"],dayNamesMin:[\"रवि\",\"सोम\",\"मंगल\",\"बुध\",\"गुरु\",\"शुक्र\",\"शनि\"],weekHeader:\"हफ्ता\",dateFormat:\"dd/mm/yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"hi\",{buttonText:{month:\"महीना\",week:\"सप्ताह\",day:\"दिन\",list:\"कार्यसूची\"},allDayText:\"सभी दिन\",eventLimitText:function(e){return\"+अधिक \"+e}})}(),function(){function a(e,t,a){var n=e+\" \";switch(a){case\"m\":return t?\"jedna minuta\":\"jedne minute\";case\"mm\":return n+=1===e?\"minuta\":2===e||3===e||4===e?\"minute\":\"minuta\";case\"h\":return t?\"jedan sat\":\"jednog sata\";case\"hh\":return n+=1===e?\"sat\":2===e||3===e||4===e?\"sata\":\"sati\";case\"dd\":return n+=1===e?\"dan\":\"dana\";case\"MM\":return n+=1===e?\"mjesec\":2===e||3===e||4===e?\"mjeseca\":\"mjeseci\";case\"yy\":return n+=1===e?\"godina\":2===e||3===e||4===e?\"godine\":\"godina\"}}(t.defineLocale||t.lang).call(t,\"hr\",{months:\"sječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac\".split(\"_\"),monthsShort:\"sje._vel._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.\".split(\"_\"),weekdays:\"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota\".split(\"_\"),weekdaysShort:\"ned._pon._uto._sri._čet._pet._sub.\".split(\"_\"),weekdaysMin:\"ne_po_ut_sr_če_pe_su\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD. MM. YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY LT\",LLLL:\"dddd, D. MMMM YYYY LT\"},calendar:{sameDay:\"[danas u] LT\",nextDay:\"[sutra u] LT\",nextWeek:function(){switch(this.day()){case 0:return\"[u] [nedjelju] [u] LT\";case 3:return\"[u] [srijedu] [u] LT\";case 6:return\"[u] [subotu] [u] LT\";case 1:case 2:case 4:case 5:return\"[u] dddd [u] LT\"}},lastDay:\"[jučer u] LT\",lastWeek:function(){switch(this.day()){case 0:case 3:return\"[prošlu] dddd [u] LT\";case 6:return\"[prošle] [subote] [u] LT\";case 1:case 2:case 4:case 5:return\"[prošli] dddd [u] LT\"}},sameElse:\"L\"},relativeTime:{future:\"za %s\",past:\"prije %s\",s:\"par sekundi\",m:a,mm:a,h:a,hh:a,d:\"dan\",dd:a,M:\"mjesec\",MM:a,y:\"godinu\",yy:a},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:7}}),e.fullCalendar.datepickerLang(\"hr\",\"hr\",{closeText:\"Zatvori\",prevText:\"&#x3C;\",nextText:\"&#x3E;\",currentText:\"Danas\",monthNames:[\"Siječanj\",\"Veljača\",\"Ožujak\",\"Travanj\",\"Svibanj\",\"Lipanj\",\"Srpanj\",\"Kolovoz\",\"Rujan\",\"Listopad\",\"Studeni\",\"Prosinac\"],monthNamesShort:[\"Sij\",\"Velj\",\"Ožu\",\"Tra\",\"Svi\",\"Lip\",\"Srp\",\"Kol\",\"Ruj\",\"Lis\",\"Stu\",\"Pro\"],dayNames:[\"Nedjelja\",\"Ponedjeljak\",\"Utorak\",\"Srijeda\",\"Četvrtak\",\"Petak\",\"Subota\"],dayNamesShort:[\"Ned\",\"Pon\",\"Uto\",\"Sri\",\"Čet\",\"Pet\",\"Sub\"],dayNamesMin:[\"Ne\",\"Po\",\"Ut\",\"Sr\",\"Če\",\"Pe\",\"Su\"],weekHeader:\"Tje\",dateFormat:\"dd.mm.yy.\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"hr\",{buttonText:{month:\"Mjesec\",week:\"Tjedan\",day:\"Dan\",list:\"Raspored\"},allDayText:\"Cijeli dan\",eventLimitText:function(e){return\"+ još \"+e}})}(),function(){function a(e,t,a,n){var r=e;switch(a){case\"s\":return n||t?\"néhány másodperc\":\"néhány másodperce\";case\"m\":return\"egy\"+(n||t?\" perc\":\" perce\");case\"mm\":return r+(n||t?\" perc\":\" perce\");case\"h\":return\"egy\"+(n||t?\" óra\":\" órája\");case\"hh\":return r+(n||t?\" óra\":\" órája\");case\"d\":return\"egy\"+(n||t?\" nap\":\" napja\");case\"dd\":return r+(n||t?\" nap\":\" napja\");case\"M\":return\"egy\"+(n||t?\" hónap\":\" hónapja\");case\"MM\":return r+(n||t?\" hónap\":\" hónapja\");case\"y\":return\"egy\"+(n||t?\" év\":\" éve\");case\"yy\":return r+(n||t?\" év\":\" éve\")}return\"\"}function n(e){return(e?\"\":\"[múlt] \")+\"[\"+r[this.day()]+\"] LT[-kor]\"}var r=\"vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton\".split(\" \");(t.defineLocale||t.lang).call(t,\"hu\",{months:\"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december\".split(\"_\"),monthsShort:\"jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec\".split(\"_\"),weekdays:\"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat\".split(\"_\"),weekdaysShort:\"vas_hét_kedd_sze_csüt_pén_szo\".split(\"_\"),weekdaysMin:\"v_h_k_sze_cs_p_szo\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"YYYY.MM.DD.\",LL:\"YYYY. MMMM D.\",LLL:\"YYYY. MMMM D., LT\",LLLL:\"YYYY. MMMM D., dddd LT\"},meridiemParse:/de|du/i,isPM:function(e){return\"u\"===e.charAt(1).toLowerCase()},meridiem:function(e,t,a){return 12>e?a===!0?\"de\":\"DE\":a===!0?\"du\":\"DU\"},calendar:{sameDay:\"[ma] LT[-kor]\",nextDay:\"[holnap] LT[-kor]\",nextWeek:function(){return n.call(this,!0)},lastDay:\"[tegnap] LT[-kor]\",lastWeek:function(){return n.call(this,!1)},sameElse:\"L\"},relativeTime:{future:\"%s múlva\",past:\"%s\",s:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:7}}),e.fullCalendar.datepickerLang(\"hu\",\"hu\",{closeText:\"bezár\",prevText:\"vissza\",nextText:\"előre\",currentText:\"ma\",monthNames:[\"Január\",\"Február\",\"Március\",\"Április\",\"Május\",\"Június\",\"Július\",\"Augusztus\",\"Szeptember\",\"Október\",\"November\",\"December\"],monthNamesShort:[\"Jan\",\"Feb\",\"Már\",\"Ápr\",\"Máj\",\"Jún\",\"Júl\",\"Aug\",\"Szep\",\"Okt\",\"Nov\",\"Dec\"],dayNames:[\"Vasárnap\",\"Hétfő\",\"Kedd\",\"Szerda\",\"Csütörtök\",\"Péntek\",\"Szombat\"],dayNamesShort:[\"Vas\",\"Hét\",\"Ked\",\"Sze\",\"Csü\",\"Pén\",\"Szo\"],dayNamesMin:[\"V\",\"H\",\"K\",\"Sze\",\"Cs\",\"P\",\"Szo\"],weekHeader:\"Hét\",dateFormat:\"yy.mm.dd.\",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:\"\"}),e.fullCalendar.lang(\"hu\",{buttonText:{month:\"Hónap\",week:\"Hét\",day:\"Nap\",list:\"Napló\"},allDayText:\"Egész nap\",eventLimitText:\"további\"})}(),function(){(t.defineLocale||t.lang).call(t,\"id\",{months:\"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember\".split(\"_\"),monthsShort:\"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des\".split(\"_\"),weekdays:\"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu\".split(\"_\"),weekdaysShort:\"Min_Sen_Sel_Rab_Kam_Jum_Sab\".split(\"_\"),weekdaysMin:\"Mg_Sn_Sl_Rb_Km_Jm_Sb\".split(\"_\"),longDateFormat:{LT:\"HH.mm\",LTS:\"LT.ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY [pukul] LT\",LLLL:\"dddd, D MMMM YYYY [pukul] LT\"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),\"pagi\"===t?e:\"siang\"===t?e>=11?e:e+12:\"sore\"===t||\"malam\"===t?e+12:void 0},meridiem:function(e){return 11>e?\"pagi\":15>e?\"siang\":19>e?\"sore\":\"malam\"},calendar:{sameDay:\"[Hari ini pukul] LT\",nextDay:\"[Besok pukul] LT\",nextWeek:\"dddd [pukul] LT\",lastDay:\"[Kemarin pukul] LT\",lastWeek:\"dddd [lalu pukul] LT\",sameElse:\"L\"},relativeTime:{future:\"dalam %s\",past:\"%s yang lalu\",s:\"beberapa detik\",m:\"semenit\",mm:\"%d menit\",h:\"sejam\",hh:\"%d jam\",d:\"sehari\",dd:\"%d hari\",M:\"sebulan\",MM:\"%d bulan\",y:\"setahun\",yy:\"%d tahun\"},week:{dow:1,doy:7}}),e.fullCalendar.datepickerLang(\"id\",\"id\",{closeText:\"Tutup\",prevText:\"&#x3C;mundur\",nextText:\"maju&#x3E;\",currentText:\"hari ini\",monthNames:[\"Januari\",\"Februari\",\"Maret\",\"April\",\"Mei\",\"Juni\",\"Juli\",\"Agustus\",\"September\",\"Oktober\",\"Nopember\",\"Desember\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"Mei\",\"Jun\",\"Jul\",\"Agus\",\"Sep\",\"Okt\",\"Nop\",\"Des\"],dayNames:[\"Minggu\",\"Senin\",\"Selasa\",\"Rabu\",\"Kamis\",\"Jumat\",\"Sabtu\"],dayNamesShort:[\"Min\",\"Sen\",\"Sel\",\"Rab\",\"kam\",\"Jum\",\"Sab\"],dayNamesMin:[\"Mg\",\"Sn\",\"Sl\",\"Rb\",\"Km\",\"jm\",\"Sb\"],weekHeader:\"Mg\",dateFormat:\"dd/mm/yy\",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"id\",{buttonText:{month:\"Bulan\",week:\"Minggu\",day:\"Hari\",list:\"Agenda\"},allDayHtml:\"Sehari<br/>penuh\",eventLimitText:\"lebih\"})}(),function(){function a(e){return 11===e%100?!0:1===e%10?!1:!0}function n(e,t,n,r){var i=e+\" \";switch(n){case\"s\":return t||r?\"nokkrar sekúndur\":\"nokkrum sekúndum\";case\"m\":return t?\"mínúta\":\"mínútu\";case\"mm\":return a(e)?i+(t||r?\"mínútur\":\"mínútum\"):t?i+\"mínúta\":i+\"mínútu\";case\"hh\":return a(e)?i+(t||r?\"klukkustundir\":\"klukkustundum\"):i+\"klukkustund\";case\"d\":return t?\"dagur\":r?\"dag\":\"degi\";case\"dd\":return a(e)?t?i+\"dagar\":i+(r?\"daga\":\"dögum\"):t?i+\"dagur\":i+(r?\"dag\":\"degi\");case\"M\":return t?\"mánuður\":r?\"mánuð\":\"mánuði\";case\"MM\":return a(e)?t?i+\"mánuðir\":i+(r?\"mánuði\":\"mánuðum\"):t?i+\"mánuður\":i+(r?\"mánuð\":\"mánuði\");case\"y\":return t||r?\"ár\":\"ári\";case\"yy\":return a(e)?i+(t||r?\"ár\":\"árum\"):i+(t||r?\"ár\":\"ári\")}}(t.defineLocale||t.lang).call(t,\"is\",{months:\"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember\".split(\"_\"),monthsShort:\"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des\".split(\"_\"),weekdays:\"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur\".split(\"_\"),weekdaysShort:\"sun_mán_þri_mið_fim_fös_lau\".split(\"_\"),weekdaysMin:\"Su_Má_Þr_Mi_Fi_Fö_La\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY [kl.] LT\",LLLL:\"dddd, D. MMMM YYYY [kl.] LT\"},calendar:{sameDay:\"[í dag kl.] LT\",nextDay:\"[á morgun kl.] LT\",nextWeek:\"dddd [kl.] LT\",lastDay:\"[í gær kl.] LT\",lastWeek:\"[síðasta] dddd [kl.] LT\",sameElse:\"L\"},relativeTime:{future:\"eftir %s\",past:\"fyrir %s síðan\",s:n,m:n,mm:n,h:\"klukkustund\",hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"is\",\"is\",{closeText:\"Loka\",prevText:\"&#x3C; Fyrri\",nextText:\"Næsti &#x3E;\",currentText:\"Í dag\",monthNames:[\"Janúar\",\"Febrúar\",\"Mars\",\"Apríl\",\"Maí\",\"Júní\",\"Júlí\",\"Ágúst\",\"September\",\"Október\",\"Nóvember\",\"Desember\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"Maí\",\"Jún\",\"Júl\",\"Ágú\",\"Sep\",\"Okt\",\"Nóv\",\"Des\"],dayNames:[\"Sunnudagur\",\"Mánudagur\",\"Þriðjudagur\",\"Miðvikudagur\",\"Fimmtudagur\",\"Föstudagur\",\"Laugardagur\"],dayNamesShort:[\"Sun\",\"Mán\",\"Þri\",\"Mið\",\"Fim\",\"Fös\",\"Lau\"],dayNamesMin:[\"Su\",\"Má\",\"Þr\",\"Mi\",\"Fi\",\"Fö\",\"La\"],weekHeader:\"Vika\",dateFormat:\"dd.mm.yy\",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"is\",{buttonText:{month:\"Mánuður\",week:\"Vika\",day:\"Dagur\",list:\"Dagskrá\"},allDayHtml:\"Allan<br/>daginn\",eventLimitText:\"meira\"})}(),function(){(t.defineLocale||t.lang).call(t,\"it\",{months:\"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre\".split(\"_\"),monthsShort:\"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic\".split(\"_\"),weekdays:\"Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato\".split(\"_\"),weekdaysShort:\"Dom_Lun_Mar_Mer_Gio_Ven_Sab\".split(\"_\"),weekdaysMin:\"D_L_Ma_Me_G_V_S\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd, D MMMM YYYY LT\"},calendar:{sameDay:\"[Oggi alle] LT\",nextDay:\"[Domani alle] LT\",nextWeek:\"dddd [alle] LT\",lastDay:\"[Ieri alle] LT\",lastWeek:function(){switch(this.day()){case 0:return\"[la scorsa] dddd [alle] LT\";default:return\"[lo scorso] dddd [alle] LT\"}},sameElse:\"L\"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?\"tra\":\"in\")+\" \"+e},past:\"%s fa\",s:\"alcuni secondi\",m:\"un minuto\",mm:\"%d minuti\",h:\"un'ora\",hh:\"%d ore\",d:\"un giorno\",dd:\"%d giorni\",M:\"un mese\",MM:\"%d mesi\",y:\"un anno\",yy:\"%d anni\"},ordinalParse:/\\d{1,2}º/,ordinal:\"%dº\",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"it\",\"it\",{closeText:\"Chiudi\",prevText:\"&#x3C;Prec\",nextText:\"Succ&#x3E;\",currentText:\"Oggi\",monthNames:[\"Gennaio\",\"Febbraio\",\"Marzo\",\"Aprile\",\"Maggio\",\"Giugno\",\"Luglio\",\"Agosto\",\"Settembre\",\"Ottobre\",\"Novembre\",\"Dicembre\"],monthNamesShort:[\"Gen\",\"Feb\",\"Mar\",\"Apr\",\"Mag\",\"Giu\",\"Lug\",\"Ago\",\"Set\",\"Ott\",\"Nov\",\"Dic\"],dayNames:[\"Domenica\",\"Lunedì\",\"Martedì\",\"Mercoledì\",\"Giovedì\",\"Venerdì\",\"Sabato\"],dayNamesShort:[\"Dom\",\"Lun\",\"Mar\",\"Mer\",\"Gio\",\"Ven\",\"Sab\"],dayNamesMin:[\"Do\",\"Lu\",\"Ma\",\"Me\",\"Gi\",\"Ve\",\"Sa\"],weekHeader:\"Sm\",dateFormat:\"dd/mm/yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"it\",{buttonText:{month:\"Mese\",week:\"Settimana\",day:\"Giorno\",list:\"Agenda\"},allDayHtml:\"Tutto il<br/>giorno\",eventLimitText:function(e){return\"+altri \"+e}})}(),function(){(t.defineLocale||t.lang).call(t,\"ja\",{months:\"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月\".split(\"_\"),monthsShort:\"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月\".split(\"_\"),weekdays:\"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日\".split(\"_\"),weekdaysShort:\"日_月_火_水_木_金_土\".split(\"_\"),weekdaysMin:\"日_月_火_水_木_金_土\".split(\"_\"),longDateFormat:{LT:\"Ah時m分\",LTS:\"LTs秒\",L:\"YYYY/MM/DD\",LL:\"YYYY年M月D日\",LLL:\"YYYY年M月D日LT\",LLLL:\"YYYY年M月D日LT dddd\"},meridiemParse:/午前|午後/i,isPM:function(e){return\"午後\"===e},meridiem:function(e){return 12>e?\"午前\":\"午後\"},calendar:{sameDay:\"[今日] LT\",nextDay:\"[明日] LT\",nextWeek:\"[来週]dddd LT\",lastDay:\"[昨日] LT\",lastWeek:\"[前週]dddd LT\",sameElse:\"L\"},relativeTime:{future:\"%s後\",past:\"%s前\",s:\"数秒\",m:\"1分\",mm:\"%d分\",h:\"1時間\",hh:\"%d時間\",d:\"1日\",dd:\"%d日\",M:\"1ヶ月\",MM:\"%dヶ月\",y:\"1年\",yy:\"%d年\"}}),e.fullCalendar.datepickerLang(\"ja\",\"ja\",{closeText:\"閉じる\",prevText:\"&#x3C;前\",nextText:\"次&#x3E;\",currentText:\"今日\",monthNames:[\"1月\",\"2月\",\"3月\",\"4月\",\"5月\",\"6月\",\"7月\",\"8月\",\"9月\",\"10月\",\"11月\",\"12月\"],monthNamesShort:[\"1月\",\"2月\",\"3月\",\"4月\",\"5月\",\"6月\",\"7月\",\"8月\",\"9月\",\"10月\",\"11月\",\"12月\"],dayNames:[\"日曜日\",\"月曜日\",\"火曜日\",\"水曜日\",\"木曜日\",\"金曜日\",\"土曜日\"],dayNamesShort:[\"日\",\"月\",\"火\",\"水\",\"木\",\"金\",\"土\"],dayNamesMin:[\"日\",\"月\",\"火\",\"水\",\"木\",\"金\",\"土\"],weekHeader:\"週\",dateFormat:\"yy/mm/dd\",firstDay:0,isRTL:!1,showMonthAfterYear:!0,yearSuffix:\"年\"}),e.fullCalendar.lang(\"ja\",{buttonText:{month:\"月\",week:\"週\",day:\"日\",list:\"予定リスト\"},allDayText:\"終日\",eventLimitText:function(e){return\"他 \"+e+\" 件\"}})}(),function(){(t.defineLocale||t.lang).call(t,\"ko\",{months:\"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월\".split(\"_\"),monthsShort:\"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월\".split(\"_\"),weekdays:\"일요일_월요일_화요일_수요일_목요일_금요일_토요일\".split(\"_\"),weekdaysShort:\"일_월_화_수_목_금_토\".split(\"_\"),weekdaysMin:\"일_월_화_수_목_금_토\".split(\"_\"),longDateFormat:{LT:\"A h시 m분\",LTS:\"A h시 m분 s초\",L:\"YYYY.MM.DD\",LL:\"YYYY년 MMMM D일\",LLL:\"YYYY년 MMMM D일 LT\",LLLL:\"YYYY년 MMMM D일 dddd LT\"},calendar:{sameDay:\"오늘 LT\",nextDay:\"내일 LT\",nextWeek:\"dddd LT\",lastDay:\"어제 LT\",lastWeek:\"지난주 dddd LT\",sameElse:\"L\"},relativeTime:{future:\"%s 후\",past:\"%s 전\",s:\"몇초\",ss:\"%d초\",m:\"일분\",mm:\"%d분\",h:\"한시간\",hh:\"%d시간\",d:\"하루\",dd:\"%d일\",M:\"한달\",MM:\"%d달\",y:\"일년\",yy:\"%d년\"},ordinalParse:/\\d{1,2}일/,ordinal:\"%d일\",meridiemParse:/오전|오후/,isPM:function(e){return\"오후\"===e},meridiem:function(e){return 12>e?\"오전\":\"오후\"}}),e.fullCalendar.datepickerLang(\"ko\",\"ko\",{closeText:\"닫기\",prevText:\"이전달\",nextText:\"다음달\",currentText:\"오늘\",monthNames:[\"1월\",\"2월\",\"3월\",\"4월\",\"5월\",\"6월\",\"7월\",\"8월\",\"9월\",\"10월\",\"11월\",\"12월\"],monthNamesShort:[\"1월\",\"2월\",\"3월\",\"4월\",\"5월\",\"6월\",\"7월\",\"8월\",\"9월\",\"10월\",\"11월\",\"12월\"],dayNames:[\"일요일\",\"월요일\",\"화요일\",\"수요일\",\"목요일\",\"금요일\",\"토요일\"],dayNamesShort:[\"일\",\"월\",\"화\",\"수\",\"목\",\"금\",\"토\"],dayNamesMin:[\"일\",\"월\",\"화\",\"수\",\"목\",\"금\",\"토\"],weekHeader:\"Wk\",dateFormat:\"yy-mm-dd\",firstDay:0,isRTL:!1,showMonthAfterYear:!0,yearSuffix:\"년\"}),e.fullCalendar.lang(\"ko\",{buttonText:{month:\"월\",week:\"주\",day:\"일\",list:\"일정목록\"},allDayText:\"종일\",eventLimitText:\"개\"})}(),function(){function a(e,t,a,n){return t?\"kelios sekundės\":n?\"kelių sekundžių\":\"kelias sekundes\"}function n(e,t,a,n){return t?i(a)[0]:n?i(a)[1]:i(a)[2]}function r(e){return 0===e%10||e>10&&20>e}function i(e){return d[e].split(\"_\")}function s(e,t,a,s){var o=e+\" \";return 1===e?o+n(e,t,a[0],s):t?o+(r(e)?i(a)[1]:i(a)[0]):s?o+i(a)[1]:o+(r(e)?i(a)[1]:i(a)[2])}function o(e,t){var a=-1===t.indexOf(\"dddd HH:mm\"),n=l[e.day()];return a?n:n.substring(0,n.length-2)+\"į\"}var d={m:\"minutė_minutės_minutę\",mm:\"minutės_minučių_minutes\",h:\"valanda_valandos_valandą\",hh:\"valandos_valandų_valandas\",d:\"diena_dienos_dieną\",dd:\"dienos_dienų_dienas\",M:\"mėnuo_mėnesio_mėnesį\",MM:\"mėnesiai_mėnesių_mėnesius\",y:\"metai_metų_metus\",yy:\"metai_metų_metus\"},l=\"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis\".split(\"_\");(t.defineLocale||t.lang).call(t,\"lt\",{months:\"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio\".split(\"_\"),monthsShort:\"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd\".split(\"_\"),weekdays:o,weekdaysShort:\"Sek_Pir_Ant_Tre_Ket_Pen_Šeš\".split(\"_\"),weekdaysMin:\"S_P_A_T_K_Pn_Š\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"YYYY-MM-DD\",LL:\"YYYY [m.] MMMM D [d.]\",LLL:\"YYYY [m.] MMMM D [d.], LT [val.]\",LLLL:\"YYYY [m.] MMMM D [d.], dddd, LT [val.]\",l:\"YYYY-MM-DD\",ll:\"YYYY [m.] MMMM D [d.]\",lll:\"YYYY [m.] MMMM D [d.], LT [val.]\",llll:\"YYYY [m.] MMMM D [d.], ddd, LT [val.]\"},calendar:{sameDay:\"[Šiandien] LT\",nextDay:\"[Rytoj] LT\",nextWeek:\"dddd LT\",lastDay:\"[Vakar] LT\",lastWeek:\"[Praėjusį] dddd LT\",sameElse:\"L\"},relativeTime:{future:\"po %s\",past:\"prieš %s\",s:a,m:n,mm:s,h:n,hh:s,d:n,dd:s,M:n,MM:s,y:n,yy:s},ordinalParse:/\\d{1,2}-oji/,ordinal:function(e){return e+\"-oji\"},week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"lt\",\"lt\",{closeText:\"Uždaryti\",prevText:\"&#x3C;Atgal\",nextText:\"Pirmyn&#x3E;\",currentText:\"Šiandien\",monthNames:[\"Sausis\",\"Vasaris\",\"Kovas\",\"Balandis\",\"Gegužė\",\"Birželis\",\"Liepa\",\"Rugpjūtis\",\"Rugsėjis\",\"Spalis\",\"Lapkritis\",\"Gruodis\"],monthNamesShort:[\"Sau\",\"Vas\",\"Kov\",\"Bal\",\"Geg\",\"Bir\",\"Lie\",\"Rugp\",\"Rugs\",\"Spa\",\"Lap\",\"Gru\"],dayNames:[\"sekmadienis\",\"pirmadienis\",\"antradienis\",\"trečiadienis\",\"ketvirtadienis\",\"penktadienis\",\"šeštadienis\"],dayNamesShort:[\"sek\",\"pir\",\"ant\",\"tre\",\"ket\",\"pen\",\"šeš\"],dayNamesMin:[\"Se\",\"Pr\",\"An\",\"Tr\",\"Ke\",\"Pe\",\"Še\"],weekHeader:\"SAV\",dateFormat:\"yy-mm-dd\",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:\"\"}),e.fullCalendar.lang(\"lt\",{buttonText:{month:\"Mėnuo\",week:\"Savaitė\",day:\"Diena\",list:\"Darbotvarkė\"},allDayText:\"Visą dieną\",eventLimitText:\"daugiau\"})}(),function(){function a(e,t,a){var n=e.split(\"_\");return a?1===t%10&&11!==t?n[2]:n[3]:1===t%10&&11!==t?n[0]:n[1]}function n(e,t,n){return e+\" \"+a(r[n],e,t)}var r={mm:\"minūti_minūtes_minūte_minūtes\",hh:\"stundu_stundas_stunda_stundas\",dd:\"dienu_dienas_diena_dienas\",MM:\"mēnesi_mēnešus_mēnesis_mēneši\",yy:\"gadu_gadus_gads_gadi\"};(t.defineLocale||t.lang).call(t,\"lv\",{months:\"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris\".split(\"_\"),monthsShort:\"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec\".split(\"_\"),weekdays:\"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena\".split(\"_\"),weekdaysShort:\"Sv_P_O_T_C_Pk_S\".split(\"_\"),weekdaysMin:\"Sv_P_O_T_C_Pk_S\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD.MM.YYYY\",LL:\"YYYY. [gada] D. MMMM\",LLL:\"YYYY. [gada] D. MMMM, LT\",LLLL:\"YYYY. [gada] D. MMMM, dddd, LT\"},calendar:{sameDay:\"[Šodien pulksten] LT\",nextDay:\"[Rīt pulksten] LT\",nextWeek:\"dddd [pulksten] LT\",lastDay:\"[Vakar pulksten] LT\",lastWeek:\"[Pagājušā] dddd [pulksten] LT\",sameElse:\"L\"},relativeTime:{future:\"%s vēlāk\",past:\"%s agrāk\",s:\"dažas sekundes\",m:\"minūti\",mm:n,h:\"stundu\",hh:n,d:\"dienu\",dd:n,M:\"mēnesi\",MM:n,y:\"gadu\",yy:n},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"lv\",\"lv\",{closeText:\"Aizvērt\",prevText:\"Iepr.\",nextText:\"Nāk.\",currentText:\"Šodien\",monthNames:[\"Janvāris\",\"Februāris\",\"Marts\",\"Aprīlis\",\"Maijs\",\"Jūnijs\",\"Jūlijs\",\"Augusts\",\"Septembris\",\"Oktobris\",\"Novembris\",\"Decembris\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"Mai\",\"Jūn\",\"Jūl\",\"Aug\",\"Sep\",\"Okt\",\"Nov\",\"Dec\"],dayNames:[\"svētdiena\",\"pirmdiena\",\"otrdiena\",\"trešdiena\",\"ceturtdiena\",\"piektdiena\",\"sestdiena\"],dayNamesShort:[\"svt\",\"prm\",\"otr\",\"tre\",\"ctr\",\"pkt\",\"sst\"],dayNamesMin:[\"Sv\",\"Pr\",\"Ot\",\"Tr\",\"Ct\",\"Pk\",\"Ss\"],weekHeader:\"Ned.\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"lv\",{buttonText:{month:\"Mēnesis\",week:\"Nedēļa\",day:\"Diena\",list:\"Dienas kārtība\"},allDayText:\"Visu dienu\",eventLimitText:function(e){return\"+vēl \"+e}})}(),function(){(t.defineLocale||t.lang).call(t,\"nb\",{months:\"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember\".split(\"_\"),monthsShort:\"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des\".split(\"_\"),weekdays:\"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag\".split(\"_\"),weekdaysShort:\"søn_man_tirs_ons_tors_fre_lør\".split(\"_\"),weekdaysMin:\"sø_ma_ti_on_to_fr_lø\".split(\"_\"),longDateFormat:{LT:\"H.mm\",LTS:\"LT.ss\",L:\"DD.MM.YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY [kl.] LT\",LLLL:\"dddd D. MMMM YYYY [kl.] LT\"},calendar:{sameDay:\"[i dag kl.] LT\",nextDay:\"[i morgen kl.] LT\",nextWeek:\"dddd [kl.] LT\",lastDay:\"[i går kl.] LT\",lastWeek:\"[forrige] dddd [kl.] LT\",sameElse:\"L\"},relativeTime:{future:\"om %s\",past:\"for %s siden\",s:\"noen sekunder\",m:\"ett minutt\",mm:\"%d minutter\",h:\"en time\",hh:\"%d timer\",d:\"en dag\",dd:\"%d dager\",M:\"en måned\",MM:\"%d måneder\",y:\"ett år\",yy:\"%d år\"},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"nb\",\"nb\",{closeText:\"Lukk\",prevText:\"&#xAB;Forrige\",nextText:\"Neste&#xBB;\",currentText:\"I dag\",monthNames:[\"januar\",\"februar\",\"mars\",\"april\",\"mai\",\"juni\",\"juli\",\"august\",\"september\",\"oktober\",\"november\",\"desember\"],monthNamesShort:[\"jan\",\"feb\",\"mar\",\"apr\",\"mai\",\"jun\",\"jul\",\"aug\",\"sep\",\"okt\",\"nov\",\"des\"],dayNamesShort:[\"søn\",\"man\",\"tir\",\"ons\",\"tor\",\"fre\",\"lør\"],dayNames:[\"søndag\",\"mandag\",\"tirsdag\",\"onsdag\",\"torsdag\",\"fredag\",\"lørdag\"],dayNamesMin:[\"sø\",\"ma\",\"ti\",\"on\",\"to\",\"fr\",\"lø\"],weekHeader:\"Uke\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"nb\",{buttonText:{month:\"Måned\",week:\"Uke\",day:\"Dag\",list:\"Agenda\"},allDayText:\"Hele dagen\",eventLimitText:\"til\"})}(),function(){var a=\"jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.\".split(\"_\"),n=\"jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec\".split(\"_\");(t.defineLocale||t.lang).call(t,\"nl\",{months:\"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december\".split(\"_\"),monthsShort:function(e,t){return/-MMM-/.test(t)?n[e.month()]:a[e.month()]},weekdays:\"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag\".split(\"_\"),weekdaysShort:\"zo._ma._di._wo._do._vr._za.\".split(\"_\"),weekdaysMin:\"Zo_Ma_Di_Wo_Do_Vr_Za\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD-MM-YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd D MMMM YYYY LT\"},calendar:{sameDay:\"[vandaag om] LT\",nextDay:\"[morgen om] LT\",nextWeek:\"dddd [om] LT\",lastDay:\"[gisteren om] LT\",lastWeek:\"[afgelopen] dddd [om] LT\",sameElse:\"L\"},relativeTime:{future:\"over %s\",past:\"%s geleden\",s:\"een paar seconden\",m:\"één minuut\",mm:\"%d minuten\",h:\"één uur\",hh:\"%d uur\",d:\"één dag\",dd:\"%d dagen\",M:\"één maand\",MM:\"%d maanden\",y:\"één jaar\",yy:\"%d jaar\"},ordinalParse:/\\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?\"ste\":\"de\")},week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"nl\",\"nl\",{closeText:\"Sluiten\",prevText:\"←\",nextText:\"→\",currentText:\"Vandaag\",monthNames:[\"januari\",\"februari\",\"maart\",\"april\",\"mei\",\"juni\",\"juli\",\"augustus\",\"september\",\"oktober\",\"november\",\"december\"],monthNamesShort:[\"jan\",\"feb\",\"mrt\",\"apr\",\"mei\",\"jun\",\"jul\",\"aug\",\"sep\",\"okt\",\"nov\",\"dec\"],dayNames:[\"zondag\",\"maandag\",\"dinsdag\",\"woensdag\",\"donderdag\",\"vrijdag\",\"zaterdag\"],dayNamesShort:[\"zon\",\"maa\",\"din\",\"woe\",\"don\",\"vri\",\"zat\"],dayNamesMin:[\"zo\",\"ma\",\"di\",\"wo\",\"do\",\"vr\",\"za\"],weekHeader:\"Wk\",dateFormat:\"dd-mm-yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"nl\",{buttonText:{month:\"Maand\",week:\"Week\",day:\"Dag\",list:\"Agenda\"},allDayText:\"Hele dag\",eventLimitText:\"extra\"})\n}(),function(){function a(e){return 5>e%10&&e%10>1&&1!==~~(e/10)%10}function n(e,t,n){var r=e+\" \";switch(n){case\"m\":return t?\"minuta\":\"minutę\";case\"mm\":return r+(a(e)?\"minuty\":\"minut\");case\"h\":return t?\"godzina\":\"godzinę\";case\"hh\":return r+(a(e)?\"godziny\":\"godzin\");case\"MM\":return r+(a(e)?\"miesiące\":\"miesięcy\");case\"yy\":return r+(a(e)?\"lata\":\"lat\")}}var r=\"styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień\".split(\"_\"),i=\"stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia\".split(\"_\");(t.defineLocale||t.lang).call(t,\"pl\",{months:function(e,t){return/D MMMM/.test(t)?i[e.month()]:r[e.month()]},monthsShort:\"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru\".split(\"_\"),weekdays:\"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota\".split(\"_\"),weekdaysShort:\"nie_pon_wt_śr_czw_pt_sb\".split(\"_\"),weekdaysMin:\"N_Pn_Wt_Śr_Cz_Pt_So\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD.MM.YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd, D MMMM YYYY LT\"},calendar:{sameDay:\"[Dziś o] LT\",nextDay:\"[Jutro o] LT\",nextWeek:\"[W] dddd [o] LT\",lastDay:\"[Wczoraj o] LT\",lastWeek:function(){switch(this.day()){case 0:return\"[W zeszłą niedzielę o] LT\";case 3:return\"[W zeszłą środę o] LT\";case 6:return\"[W zeszłą sobotę o] LT\";default:return\"[W zeszły] dddd [o] LT\"}},sameElse:\"L\"},relativeTime:{future:\"za %s\",past:\"%s temu\",s:\"kilka sekund\",m:n,mm:n,h:n,hh:n,d:\"1 dzień\",dd:\"%d dni\",M:\"miesiąc\",MM:n,y:\"rok\",yy:n},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"pl\",\"pl\",{closeText:\"Zamknij\",prevText:\"&#x3C;Poprzedni\",nextText:\"Następny&#x3E;\",currentText:\"Dziś\",monthNames:[\"Styczeń\",\"Luty\",\"Marzec\",\"Kwiecień\",\"Maj\",\"Czerwiec\",\"Lipiec\",\"Sierpień\",\"Wrzesień\",\"Październik\",\"Listopad\",\"Grudzień\"],monthNamesShort:[\"Sty\",\"Lu\",\"Mar\",\"Kw\",\"Maj\",\"Cze\",\"Lip\",\"Sie\",\"Wrz\",\"Pa\",\"Lis\",\"Gru\"],dayNames:[\"Niedziela\",\"Poniedziałek\",\"Wtorek\",\"Środa\",\"Czwartek\",\"Piątek\",\"Sobota\"],dayNamesShort:[\"Nie\",\"Pn\",\"Wt\",\"Śr\",\"Czw\",\"Pt\",\"So\"],dayNamesMin:[\"N\",\"Pn\",\"Wt\",\"Śr\",\"Cz\",\"Pt\",\"So\"],weekHeader:\"Tydz\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"pl\",{buttonText:{month:\"Miesiąc\",week:\"Tydzień\",day:\"Dzień\",list:\"Plan dnia\"},allDayText:\"Cały dzień\",eventLimitText:\"więcej\"})}(),function(){(t.defineLocale||t.lang).call(t,\"pt-br\",{months:\"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro\".split(\"_\"),monthsShort:\"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez\".split(\"_\"),weekdays:\"domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado\".split(\"_\"),weekdaysShort:\"dom_seg_ter_qua_qui_sex_sáb\".split(\"_\"),weekdaysMin:\"dom_2ª_3ª_4ª_5ª_6ª_sáb\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D [de] MMMM [de] YYYY\",LLL:\"D [de] MMMM [de] YYYY [às] LT\",LLLL:\"dddd, D [de] MMMM [de] YYYY [às] LT\"},calendar:{sameDay:\"[Hoje às] LT\",nextDay:\"[Amanhã às] LT\",nextWeek:\"dddd [às] LT\",lastDay:\"[Ontem às] LT\",lastWeek:function(){return 0===this.day()||6===this.day()?\"[Último] dddd [às] LT\":\"[Última] dddd [às] LT\"},sameElse:\"L\"},relativeTime:{future:\"em %s\",past:\"%s atrás\",s:\"segundos\",m:\"um minuto\",mm:\"%d minutos\",h:\"uma hora\",hh:\"%d horas\",d:\"um dia\",dd:\"%d dias\",M:\"um mês\",MM:\"%d meses\",y:\"um ano\",yy:\"%d anos\"},ordinalParse:/\\d{1,2}º/,ordinal:\"%dº\"}),e.fullCalendar.datepickerLang(\"pt-br\",\"pt-BR\",{closeText:\"Fechar\",prevText:\"&#x3C;Anterior\",nextText:\"Próximo&#x3E;\",currentText:\"Hoje\",monthNames:[\"Janeiro\",\"Fevereiro\",\"Março\",\"Abril\",\"Maio\",\"Junho\",\"Julho\",\"Agosto\",\"Setembro\",\"Outubro\",\"Novembro\",\"Dezembro\"],monthNamesShort:[\"Jan\",\"Fev\",\"Mar\",\"Abr\",\"Mai\",\"Jun\",\"Jul\",\"Ago\",\"Set\",\"Out\",\"Nov\",\"Dez\"],dayNames:[\"Domingo\",\"Segunda-feira\",\"Terça-feira\",\"Quarta-feira\",\"Quinta-feira\",\"Sexta-feira\",\"Sábado\"],dayNamesShort:[\"Dom\",\"Seg\",\"Ter\",\"Qua\",\"Qui\",\"Sex\",\"Sáb\"],dayNamesMin:[\"Dom\",\"Seg\",\"Ter\",\"Qua\",\"Qui\",\"Sex\",\"Sáb\"],weekHeader:\"Sm\",dateFormat:\"dd/mm/yy\",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"pt-br\",{buttonText:{month:\"Mês\",week:\"Semana\",day:\"Dia\",list:\"Compromissos\"},allDayText:\"dia inteiro\",eventLimitText:function(e){return\"mais +\"+e}})}(),function(){(t.defineLocale||t.lang).call(t,\"pt\",{months:\"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro\".split(\"_\"),monthsShort:\"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez\".split(\"_\"),weekdays:\"domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado\".split(\"_\"),weekdaysShort:\"dom_seg_ter_qua_qui_sex_sáb\".split(\"_\"),weekdaysMin:\"dom_2ª_3ª_4ª_5ª_6ª_sáb\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D [de] MMMM [de] YYYY\",LLL:\"D [de] MMMM [de] YYYY LT\",LLLL:\"dddd, D [de] MMMM [de] YYYY LT\"},calendar:{sameDay:\"[Hoje às] LT\",nextDay:\"[Amanhã às] LT\",nextWeek:\"dddd [às] LT\",lastDay:\"[Ontem às] LT\",lastWeek:function(){return 0===this.day()||6===this.day()?\"[Último] dddd [às] LT\":\"[Última] dddd [às] LT\"},sameElse:\"L\"},relativeTime:{future:\"em %s\",past:\"há %s\",s:\"segundos\",m:\"um minuto\",mm:\"%d minutos\",h:\"uma hora\",hh:\"%d horas\",d:\"um dia\",dd:\"%d dias\",M:\"um mês\",MM:\"%d meses\",y:\"um ano\",yy:\"%d anos\"},ordinalParse:/\\d{1,2}º/,ordinal:\"%dº\",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"pt\",\"pt\",{closeText:\"Fechar\",prevText:\"Anterior\",nextText:\"Seguinte\",currentText:\"Hoje\",monthNames:[\"Janeiro\",\"Fevereiro\",\"Março\",\"Abril\",\"Maio\",\"Junho\",\"Julho\",\"Agosto\",\"Setembro\",\"Outubro\",\"Novembro\",\"Dezembro\"],monthNamesShort:[\"Jan\",\"Fev\",\"Mar\",\"Abr\",\"Mai\",\"Jun\",\"Jul\",\"Ago\",\"Set\",\"Out\",\"Nov\",\"Dez\"],dayNames:[\"Domingo\",\"Segunda-feira\",\"Terça-feira\",\"Quarta-feira\",\"Quinta-feira\",\"Sexta-feira\",\"Sábado\"],dayNamesShort:[\"Dom\",\"Seg\",\"Ter\",\"Qua\",\"Qui\",\"Sex\",\"Sáb\"],dayNamesMin:[\"Dom\",\"Seg\",\"Ter\",\"Qua\",\"Qui\",\"Sex\",\"Sáb\"],weekHeader:\"Sem\",dateFormat:\"dd/mm/yy\",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"pt\",{buttonText:{month:\"Mês\",week:\"Semana\",day:\"Dia\",list:\"Agenda\"},allDayText:\"Todo o dia\",eventLimitText:\"mais\"})}(),function(){function a(e,t,a){var n={mm:\"minute\",hh:\"ore\",dd:\"zile\",MM:\"luni\",yy:\"ani\"},r=\" \";return(e%100>=20||e>=100&&0===e%100)&&(r=\" de \"),e+r+n[a]}(t.defineLocale||t.lang).call(t,\"ro\",{months:\"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie\".split(\"_\"),monthsShort:\"ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.\".split(\"_\"),weekdays:\"duminică_luni_marți_miercuri_joi_vineri_sâmbătă\".split(\"_\"),weekdaysShort:\"Dum_Lun_Mar_Mie_Joi_Vin_Sâm\".split(\"_\"),weekdaysMin:\"Du_Lu_Ma_Mi_Jo_Vi_Sâ\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD.MM.YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY H:mm\",LLLL:\"dddd, D MMMM YYYY H:mm\"},calendar:{sameDay:\"[azi la] LT\",nextDay:\"[mâine la] LT\",nextWeek:\"dddd [la] LT\",lastDay:\"[ieri la] LT\",lastWeek:\"[fosta] dddd [la] LT\",sameElse:\"L\"},relativeTime:{future:\"peste %s\",past:\"%s în urmă\",s:\"câteva secunde\",m:\"un minut\",mm:a,h:\"o oră\",hh:a,d:\"o zi\",dd:a,M:\"o lună\",MM:a,y:\"un an\",yy:a},week:{dow:1,doy:7}}),e.fullCalendar.datepickerLang(\"ro\",\"ro\",{closeText:\"Închide\",prevText:\"&#xAB; Luna precedentă\",nextText:\"Luna următoare &#xBB;\",currentText:\"Azi\",monthNames:[\"Ianuarie\",\"Februarie\",\"Martie\",\"Aprilie\",\"Mai\",\"Iunie\",\"Iulie\",\"August\",\"Septembrie\",\"Octombrie\",\"Noiembrie\",\"Decembrie\"],monthNamesShort:[\"Ian\",\"Feb\",\"Mar\",\"Apr\",\"Mai\",\"Iun\",\"Iul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],dayNames:[\"Duminică\",\"Luni\",\"Marţi\",\"Miercuri\",\"Joi\",\"Vineri\",\"Sâmbătă\"],dayNamesShort:[\"Dum\",\"Lun\",\"Mar\",\"Mie\",\"Joi\",\"Vin\",\"Sâm\"],dayNamesMin:[\"Du\",\"Lu\",\"Ma\",\"Mi\",\"Jo\",\"Vi\",\"Sâ\"],weekHeader:\"Săpt\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"ro\",{buttonText:{prev:\"precedentă\",next:\"următoare\",month:\"Lună\",week:\"Săptămână\",day:\"Zi\",list:\"Agendă\"},allDayText:\"Toată ziua\",eventLimitText:function(e){return\"+alte \"+e}})}(),function(){function a(e,t){var a=e.split(\"_\");return 1===t%10&&11!==t%100?a[0]:t%10>=2&&4>=t%10&&(10>t%100||t%100>=20)?a[1]:a[2]}function n(e,t,n){var r={mm:t?\"минута_минуты_минут\":\"минуту_минуты_минут\",hh:\"час_часа_часов\",dd:\"день_дня_дней\",MM:\"месяц_месяца_месяцев\",yy:\"год_года_лет\"};return\"m\"===n?t?\"минута\":\"минуту\":e+\" \"+a(r[n],+e)}function r(e,t){var a={nominative:\"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь\".split(\"_\"),accusative:\"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря\".split(\"_\")},n=/D[oD]?(\\[[^\\[\\]]*\\]|\\s+)+MMMM?/.test(t)?\"accusative\":\"nominative\";return a[n][e.month()]}function i(e,t){var a={nominative:\"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек\".split(\"_\"),accusative:\"янв_фев_мар_апр_мая_июня_июля_авг_сен_окт_ноя_дек\".split(\"_\")},n=/D[oD]?(\\[[^\\[\\]]*\\]|\\s+)+MMMM?/.test(t)?\"accusative\":\"nominative\";return a[n][e.month()]}function s(e,t){var a={nominative:\"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота\".split(\"_\"),accusative:\"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу\".split(\"_\")},n=/\\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\\] ?dddd/.test(t)?\"accusative\":\"nominative\";return a[n][e.day()]}(t.defineLocale||t.lang).call(t,\"ru\",{months:r,monthsShort:i,weekdays:s,weekdaysShort:\"вс_пн_вт_ср_чт_пт_сб\".split(\"_\"),weekdaysMin:\"вс_пн_вт_ср_чт_пт_сб\".split(\"_\"),monthsParse:[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[й|я]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i],longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD.MM.YYYY\",LL:\"D MMMM YYYY г.\",LLL:\"D MMMM YYYY г., LT\",LLLL:\"dddd, D MMMM YYYY г., LT\"},calendar:{sameDay:\"[Сегодня в] LT\",nextDay:\"[Завтра в] LT\",lastDay:\"[Вчера в] LT\",nextWeek:function(){return 2===this.day()?\"[Во] dddd [в] LT\":\"[В] dddd [в] LT\"},lastWeek:function(e){if(e.week()===this.week())return 2===this.day()?\"[Во] dddd [в] LT\":\"[В] dddd [в] LT\";switch(this.day()){case 0:return\"[В прошлое] dddd [в] LT\";case 1:case 2:case 4:return\"[В прошлый] dddd [в] LT\";case 3:case 5:case 6:return\"[В прошлую] dddd [в] LT\"}},sameElse:\"L\"},relativeTime:{future:\"через %s\",past:\"%s назад\",s:\"несколько секунд\",m:n,mm:n,h:\"час\",hh:n,d:\"день\",dd:n,M:\"месяц\",MM:n,y:\"год\",yy:n},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(e){return/^(дня|вечера)$/.test(e)},meridiem:function(e){return 4>e?\"ночи\":12>e?\"утра\":17>e?\"дня\":\"вечера\"},ordinalParse:/\\d{1,2}-(й|го|я)/,ordinal:function(e,t){switch(t){case\"M\":case\"d\":case\"DDD\":return e+\"-й\";case\"D\":return e+\"-го\";case\"w\":case\"W\":return e+\"-я\";default:return e}},week:{dow:1,doy:7}}),e.fullCalendar.datepickerLang(\"ru\",\"ru\",{closeText:\"Закрыть\",prevText:\"&#x3C;Пред\",nextText:\"След&#x3E;\",currentText:\"Сегодня\",monthNames:[\"Январь\",\"Февраль\",\"Март\",\"Апрель\",\"Май\",\"Июнь\",\"Июль\",\"Август\",\"Сентябрь\",\"Октябрь\",\"Ноябрь\",\"Декабрь\"],monthNamesShort:[\"Янв\",\"Фев\",\"Мар\",\"Апр\",\"Май\",\"Июн\",\"Июл\",\"Авг\",\"Сен\",\"Окт\",\"Ноя\",\"Дек\"],dayNames:[\"воскресенье\",\"понедельник\",\"вторник\",\"среда\",\"четверг\",\"пятница\",\"суббота\"],dayNamesShort:[\"вск\",\"пнд\",\"втр\",\"срд\",\"чтв\",\"птн\",\"сбт\"],dayNamesMin:[\"Вс\",\"Пн\",\"Вт\",\"Ср\",\"Чт\",\"Пт\",\"Сб\"],weekHeader:\"Нед\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"ru\",{buttonText:{month:\"Месяц\",week:\"Неделя\",day:\"День\",list:\"Повестка дня\"},allDayText:\"Весь день\",eventLimitText:function(e){return\"+ ещё \"+e}})}(),function(){function a(e){return e>1&&5>e}function n(e,t,n,r){var i=e+\" \";switch(n){case\"s\":return t||r?\"pár sekúnd\":\"pár sekundami\";case\"m\":return t?\"minúta\":r?\"minútu\":\"minútou\";case\"mm\":return t||r?i+(a(e)?\"minúty\":\"minút\"):i+\"minútami\";case\"h\":return t?\"hodina\":r?\"hodinu\":\"hodinou\";case\"hh\":return t||r?i+(a(e)?\"hodiny\":\"hodín\"):i+\"hodinami\";case\"d\":return t||r?\"deň\":\"dňom\";case\"dd\":return t||r?i+(a(e)?\"dni\":\"dní\"):i+\"dňami\";case\"M\":return t||r?\"mesiac\":\"mesiacom\";case\"MM\":return t||r?i+(a(e)?\"mesiace\":\"mesiacov\"):i+\"mesiacmi\";case\"y\":return t||r?\"rok\":\"rokom\";case\"yy\":return t||r?i+(a(e)?\"roky\":\"rokov\"):i+\"rokmi\"}}var r=\"január_február_marec_apríl_máj_jún_júl_august_september_október_november_december\".split(\"_\"),i=\"jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec\".split(\"_\");(t.defineLocale||t.lang).call(t,\"sk\",{months:r,monthsShort:i,monthsParse:function(e,t){var a,n=[];for(a=0;12>a;a++)n[a]=RegExp(\"^\"+e[a]+\"$|^\"+t[a]+\"$\",\"i\");return n}(r,i),weekdays:\"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota\".split(\"_\"),weekdaysShort:\"ne_po_ut_st_št_pi_so\".split(\"_\"),weekdaysMin:\"ne_po_ut_st_št_pi_so\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD.MM.YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY LT\",LLLL:\"dddd D. MMMM YYYY LT\"},calendar:{sameDay:\"[dnes o] LT\",nextDay:\"[zajtra o] LT\",nextWeek:function(){switch(this.day()){case 0:return\"[v nedeľu o] LT\";case 1:case 2:return\"[v] dddd [o] LT\";case 3:return\"[v stredu o] LT\";case 4:return\"[vo štvrtok o] LT\";case 5:return\"[v piatok o] LT\";case 6:return\"[v sobotu o] LT\"}},lastDay:\"[včera o] LT\",lastWeek:function(){switch(this.day()){case 0:return\"[minulú nedeľu o] LT\";case 1:case 2:return\"[minulý] dddd [o] LT\";case 3:return\"[minulú stredu o] LT\";case 4:case 5:return\"[minulý] dddd [o] LT\";case 6:return\"[minulú sobotu o] LT\"}},sameElse:\"L\"},relativeTime:{future:\"za %s\",past:\"pred %s\",s:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"sk\",\"sk\",{closeText:\"Zavrieť\",prevText:\"&#x3C;Predchádzajúci\",nextText:\"Nasledujúci&#x3E;\",currentText:\"Dnes\",monthNames:[\"január\",\"február\",\"marec\",\"apríl\",\"máj\",\"jún\",\"júl\",\"august\",\"september\",\"október\",\"november\",\"december\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"Máj\",\"Jún\",\"Júl\",\"Aug\",\"Sep\",\"Okt\",\"Nov\",\"Dec\"],dayNames:[\"nedeľa\",\"pondelok\",\"utorok\",\"streda\",\"štvrtok\",\"piatok\",\"sobota\"],dayNamesShort:[\"Ned\",\"Pon\",\"Uto\",\"Str\",\"Štv\",\"Pia\",\"Sob\"],dayNamesMin:[\"Ne\",\"Po\",\"Ut\",\"St\",\"Št\",\"Pia\",\"So\"],weekHeader:\"Ty\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"sk\",{buttonText:{month:\"Mesiac\",week:\"Týždeň\",day:\"Deň\",list:\"Rozvrh\"},allDayText:\"Celý deň\",eventLimitText:function(e){return\"+ďalšie: \"+e}})}(),function(){function a(e,t,a){var n=e+\" \";switch(a){case\"m\":return t?\"ena minuta\":\"eno minuto\";case\"mm\":return n+=1===e?\"minuta\":2===e?\"minuti\":3===e||4===e?\"minute\":\"minut\";case\"h\":return t?\"ena ura\":\"eno uro\";case\"hh\":return n+=1===e?\"ura\":2===e?\"uri\":3===e||4===e?\"ure\":\"ur\";case\"dd\":return n+=1===e?\"dan\":\"dni\";case\"MM\":return n+=1===e?\"mesec\":2===e?\"meseca\":3===e||4===e?\"mesece\":\"mesecev\";case\"yy\":return n+=1===e?\"leto\":2===e?\"leti\":3===e||4===e?\"leta\":\"let\"}}(t.defineLocale||t.lang).call(t,\"sl\",{months:\"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december\".split(\"_\"),monthsShort:\"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.\".split(\"_\"),weekdays:\"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota\".split(\"_\"),weekdaysShort:\"ned._pon._tor._sre._čet._pet._sob.\".split(\"_\"),weekdaysMin:\"ne_po_to_sr_če_pe_so\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD. MM. YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY LT\",LLLL:\"dddd, D. MMMM YYYY LT\"},calendar:{sameDay:\"[danes ob] LT\",nextDay:\"[jutri ob] LT\",nextWeek:function(){switch(this.day()){case 0:return\"[v] [nedeljo] [ob] LT\";case 3:return\"[v] [sredo] [ob] LT\";case 6:return\"[v] [soboto] [ob] LT\";case 1:case 2:case 4:case 5:return\"[v] dddd [ob] LT\"}},lastDay:\"[včeraj ob] LT\",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return\"[prejšnja] dddd [ob] LT\";case 1:case 2:case 4:case 5:return\"[prejšnji] dddd [ob] LT\"}},sameElse:\"L\"},relativeTime:{future:\"čez %s\",past:\"%s nazaj\",s:\"nekaj sekund\",m:a,mm:a,h:a,hh:a,d:\"en dan\",dd:a,M:\"en mesec\",MM:a,y:\"eno leto\",yy:a},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:7}}),e.fullCalendar.datepickerLang(\"sl\",\"sl\",{closeText:\"Zapri\",prevText:\"&#x3C;Prejšnji\",nextText:\"Naslednji&#x3E;\",currentText:\"Trenutni\",monthNames:[\"Januar\",\"Februar\",\"Marec\",\"April\",\"Maj\",\"Junij\",\"Julij\",\"Avgust\",\"September\",\"Oktober\",\"November\",\"December\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"Maj\",\"Jun\",\"Jul\",\"Avg\",\"Sep\",\"Okt\",\"Nov\",\"Dec\"],dayNames:[\"Nedelja\",\"Ponedeljek\",\"Torek\",\"Sreda\",\"Četrtek\",\"Petek\",\"Sobota\"],dayNamesShort:[\"Ned\",\"Pon\",\"Tor\",\"Sre\",\"Čet\",\"Pet\",\"Sob\"],dayNamesMin:[\"Ne\",\"Po\",\"To\",\"Sr\",\"Če\",\"Pe\",\"So\"],weekHeader:\"Teden\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"sl\",{buttonText:{month:\"Mesec\",week:\"Teden\",day:\"Dan\",list:\"Dnevni red\"},allDayText:\"Ves dan\",eventLimitText:\"več\"})}(),function(){var a={words:{m:[\"један минут\",\"једне минуте\"],mm:[\"минут\",\"минуте\",\"минута\"],h:[\"један сат\",\"једног сата\"],hh:[\"сат\",\"сата\",\"сати\"],dd:[\"дан\",\"дана\",\"дана\"],MM:[\"месец\",\"месеца\",\"месеци\"],yy:[\"година\",\"године\",\"година\"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&4>=e?t[1]:t[2]},translate:function(e,t,n){var r=a.words[n];return 1===n.length?t?r[0]:r[1]:e+\" \"+a.correctGrammaticalCase(e,r)}};(t.defineLocale||t.lang).call(t,\"sr-cyrl\",{months:[\"јануар\",\"фебруар\",\"март\",\"април\",\"мај\",\"јун\",\"јул\",\"август\",\"септембар\",\"октобар\",\"новембар\",\"децембар\"],monthsShort:[\"јан.\",\"феб.\",\"мар.\",\"апр.\",\"мај\",\"јун\",\"јул\",\"авг.\",\"сеп.\",\"окт.\",\"нов.\",\"дец.\"],weekdays:[\"недеља\",\"понедељак\",\"уторак\",\"среда\",\"четвртак\",\"петак\",\"субота\"],weekdaysShort:[\"нед.\",\"пон.\",\"уто.\",\"сре.\",\"чет.\",\"пет.\",\"суб.\"],weekdaysMin:[\"не\",\"по\",\"ут\",\"ср\",\"че\",\"пе\",\"су\"],longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD. MM. YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY LT\",LLLL:\"dddd, D. MMMM YYYY LT\"},calendar:{sameDay:\"[данас у] LT\",nextDay:\"[сутра у] LT\",nextWeek:function(){switch(this.day()){case 0:return\"[у] [недељу] [у] LT\";case 3:return\"[у] [среду] [у] LT\";case 6:return\"[у] [суботу] [у] LT\";case 1:case 2:case 4:case 5:return\"[у] dddd [у] LT\"}},lastDay:\"[јуче у] LT\",lastWeek:function(){var e=[\"[прошле] [недеље] [у] LT\",\"[прошлог] [понедељка] [у] LT\",\"[прошлог] [уторка] [у] LT\",\"[прошле] [среде] [у] LT\",\"[прошлог] [четвртка] [у] LT\",\"[прошлог] [петка] [у] LT\",\"[прошле] [суботе] [у] LT\"];return e[this.day()]},sameElse:\"L\"},relativeTime:{future:\"за %s\",past:\"пре %s\",s:\"неколико секунди\",m:a.translate,mm:a.translate,h:a.translate,hh:a.translate,d:\"дан\",dd:a.translate,M:\"месец\",MM:a.translate,y:\"годину\",yy:a.translate},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:7}}),e.fullCalendar.datepickerLang(\"sr-cyrl\",\"sr\",{closeText:\"Затвори\",prevText:\"&#x3C;\",nextText:\"&#x3E;\",currentText:\"Данас\",monthNames:[\"Јануар\",\"Фебруар\",\"Март\",\"Април\",\"Мај\",\"Јун\",\"Јул\",\"Август\",\"Септембар\",\"Октобар\",\"Новембар\",\"Децембар\"],monthNamesShort:[\"Јан\",\"Феб\",\"Мар\",\"Апр\",\"Мај\",\"Јун\",\"Јул\",\"Авг\",\"Сеп\",\"Окт\",\"Нов\",\"Дец\"],dayNames:[\"Недеља\",\"Понедељак\",\"Уторак\",\"Среда\",\"Четвртак\",\"Петак\",\"Субота\"],dayNamesShort:[\"Нед\",\"Пон\",\"Уто\",\"Сре\",\"Чет\",\"Пет\",\"Суб\"],dayNamesMin:[\"Не\",\"По\",\"Ут\",\"Ср\",\"Че\",\"Пе\",\"Су\"],weekHeader:\"Сед\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"sr-cyrl\",{buttonText:{month:\"Месец\",week:\"Недеља\",day:\"Дан\",list:\"Планер\"},allDayText:\"Цео дан\",eventLimitText:function(e){return\"+ још \"+e}})}(),function(){var a={words:{m:[\"jedan minut\",\"jedne minute\"],mm:[\"minut\",\"minute\",\"minuta\"],h:[\"jedan sat\",\"jednog sata\"],hh:[\"sat\",\"sata\",\"sati\"],dd:[\"dan\",\"dana\",\"dana\"],MM:[\"mesec\",\"meseca\",\"meseci\"],yy:[\"godina\",\"godine\",\"godina\"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&4>=e?t[1]:t[2]},translate:function(e,t,n){var r=a.words[n];return 1===n.length?t?r[0]:r[1]:e+\" \"+a.correctGrammaticalCase(e,r)}};(t.defineLocale||t.lang).call(t,\"sr\",{months:[\"januar\",\"februar\",\"mart\",\"april\",\"maj\",\"jun\",\"jul\",\"avgust\",\"septembar\",\"oktobar\",\"novembar\",\"decembar\"],monthsShort:[\"jan.\",\"feb.\",\"mar.\",\"apr.\",\"maj\",\"jun\",\"jul\",\"avg.\",\"sep.\",\"okt.\",\"nov.\",\"dec.\"],weekdays:[\"nedelja\",\"ponedeljak\",\"utorak\",\"sreda\",\"četvrtak\",\"petak\",\"subota\"],weekdaysShort:[\"ned.\",\"pon.\",\"uto.\",\"sre.\",\"čet.\",\"pet.\",\"sub.\"],weekdaysMin:[\"ne\",\"po\",\"ut\",\"sr\",\"če\",\"pe\",\"su\"],longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD. MM. YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY LT\",LLLL:\"dddd, D. MMMM YYYY LT\"},calendar:{sameDay:\"[danas u] LT\",nextDay:\"[sutra u] LT\",nextWeek:function(){switch(this.day()){case 0:return\"[u] [nedelju] [u] LT\";case 3:return\"[u] [sredu] [u] LT\";case 6:return\"[u] [subotu] [u] LT\";case 1:case 2:case 4:case 5:return\"[u] dddd [u] LT\"}},lastDay:\"[juče u] LT\",lastWeek:function(){var e=[\"[prošle] [nedelje] [u] LT\",\"[prošlog] [ponedeljka] [u] LT\",\"[prošlog] [utorka] [u] LT\",\"[prošle] [srede] [u] LT\",\"[prošlog] [četvrtka] [u] LT\",\"[prošlog] [petka] [u] LT\",\"[prošle] [subote] [u] LT\"];return e[this.day()]},sameElse:\"L\"},relativeTime:{future:\"za %s\",past:\"pre %s\",s:\"nekoliko sekundi\",m:a.translate,mm:a.translate,h:a.translate,hh:a.translate,d:\"dan\",dd:a.translate,M:\"mesec\",MM:a.translate,y:\"godinu\",yy:a.translate},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:7}}),e.fullCalendar.datepickerLang(\"sr\",\"sr\",{closeText:\"Затвори\",prevText:\"&#x3C;\",nextText:\"&#x3E;\",currentText:\"Данас\",monthNames:[\"Јануар\",\"Фебруар\",\"Март\",\"Април\",\"Мај\",\"Јун\",\"Јул\",\"Август\",\"Септембар\",\"Октобар\",\"Новембар\",\"Децембар\"],monthNamesShort:[\"Јан\",\"Феб\",\"Мар\",\"Апр\",\"Мај\",\"Јун\",\"Јул\",\"Авг\",\"Сеп\",\"Окт\",\"Нов\",\"Дец\"],dayNames:[\"Недеља\",\"Понедељак\",\"Уторак\",\"Среда\",\"Четвртак\",\"Петак\",\"Субота\"],dayNamesShort:[\"Нед\",\"Пон\",\"Уто\",\"Сре\",\"Чет\",\"Пет\",\"Суб\"],dayNamesMin:[\"Не\",\"По\",\"Ут\",\"Ср\",\"Че\",\"Пе\",\"Су\"],weekHeader:\"Сед\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"sr\",{buttonText:{month:\"Месец\",week:\"Недеља\",day:\"Дан\",list:\"Планер\"},allDayText:\"Цео дан\",eventLimitText:function(e){return\"+ још \"+e}})}(),function(){(t.defineLocale||t.lang).call(t,\"sv\",{months:\"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december\".split(\"_\"),monthsShort:\"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec\".split(\"_\"),weekdays:\"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag\".split(\"_\"),weekdaysShort:\"sön_mån_tis_ons_tor_fre_lör\".split(\"_\"),weekdaysMin:\"sö_må_ti_on_to_fr_lö\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"YYYY-MM-DD\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd D MMMM YYYY LT\"},calendar:{sameDay:\"[Idag] LT\",nextDay:\"[Imorgon] LT\",lastDay:\"[Igår] LT\",nextWeek:\"dddd LT\",lastWeek:\"[Förra] dddd[en] LT\",sameElse:\"L\"},relativeTime:{future:\"om %s\",past:\"för %s sedan\",s:\"några sekunder\",m:\"en minut\",mm:\"%d minuter\",h:\"en timme\",hh:\"%d timmar\",d:\"en dag\",dd:\"%d dagar\",M:\"en månad\",MM:\"%d månader\",y:\"ett år\",yy:\"%d år\"},ordinalParse:/\\d{1,2}(e|a)/,ordinal:function(e){var t=e%10,a=1===~~(e%100/10)?\"e\":1===t?\"a\":2===t?\"a\":3===t?\"e\":\"e\";return e+a},week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"sv\",\"sv\",{closeText:\"Stäng\",prevText:\"&#xAB;Förra\",nextText:\"Nästa&#xBB;\",currentText:\"Idag\",monthNames:[\"Januari\",\"Februari\",\"Mars\",\"April\",\"Maj\",\"Juni\",\"Juli\",\"Augusti\",\"September\",\"Oktober\",\"November\",\"December\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"Maj\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Okt\",\"Nov\",\"Dec\"],dayNamesShort:[\"Sön\",\"Mån\",\"Tis\",\"Ons\",\"Tor\",\"Fre\",\"Lör\"],dayNames:[\"Söndag\",\"Måndag\",\"Tisdag\",\"Onsdag\",\"Torsdag\",\"Fredag\",\"Lördag\"],dayNamesMin:[\"Sö\",\"Må\",\"Ti\",\"On\",\"To\",\"Fr\",\"Lö\"],weekHeader:\"Ve\",dateFormat:\"yy-mm-dd\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"sv\",{buttonText:{month:\"Månad\",week:\"Vecka\",day:\"Dag\",list:\"Program\"},allDayText:\"Heldag\",eventLimitText:\"till\"})}(),function(){(t.defineLocale||t.lang).call(t,\"th\",{months:\"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม\".split(\"_\"),monthsShort:\"มกรา_กุมภา_มีนา_เมษา_พฤษภา_มิถุนา_กรกฎา_สิงหา_กันยา_ตุลา_พฤศจิกา_ธันวา\".split(\"_\"),weekdays:\"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์\".split(\"_\"),weekdaysShort:\"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์\".split(\"_\"),weekdaysMin:\"อา._จ._อ._พ._พฤ._ศ._ส.\".split(\"_\"),longDateFormat:{LT:\"H นาฬิกา m นาที\",LTS:\"LT s วินาที\",L:\"YYYY/MM/DD\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY เวลา LT\",LLLL:\"วันddddที่ D MMMM YYYY เวลา LT\"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(e){return\"หลังเที่ยง\"===e},meridiem:function(e){return 12>e?\"ก่อนเที่ยง\":\"หลังเที่ยง\"},calendar:{sameDay:\"[วันนี้ เวลา] LT\",nextDay:\"[พรุ่งนี้ เวลา] LT\",nextWeek:\"dddd[หน้า เวลา] LT\",lastDay:\"[เมื่อวานนี้ เวลา] LT\",lastWeek:\"[วัน]dddd[ที่แล้ว เวลา] LT\",sameElse:\"L\"},relativeTime:{future:\"อีก %s\",past:\"%sที่แล้ว\",s:\"ไม่กี่วินาที\",m:\"1 นาที\",mm:\"%d นาที\",h:\"1 ชั่วโมง\",hh:\"%d ชั่วโมง\",d:\"1 วัน\",dd:\"%d วัน\",M:\"1 เดือน\",MM:\"%d เดือน\",y:\"1 ปี\",yy:\"%d ปี\"}}),e.fullCalendar.datepickerLang(\"th\",\"th\",{closeText:\"ปิด\",prevText:\"&#xAB;&#xA0;ย้อน\",nextText:\"ถัดไป&#xA0;&#xBB;\",currentText:\"วันนี้\",monthNames:[\"มกราคม\",\"กุมภาพันธ์\",\"มีนาคม\",\"เมษายน\",\"พฤษภาคม\",\"มิถุนายน\",\"กรกฎาคม\",\"สิงหาคม\",\"กันยายน\",\"ตุลาคม\",\"พฤศจิกายน\",\"ธันวาคม\"],monthNamesShort:[\"ม.ค.\",\"ก.พ.\",\"มี.ค.\",\"เม.ย.\",\"พ.ค.\",\"มิ.ย.\",\"ก.ค.\",\"ส.ค.\",\"ก.ย.\",\"ต.ค.\",\"พ.ย.\",\"ธ.ค.\"],dayNames:[\"อาทิตย์\",\"จันทร์\",\"อังคาร\",\"พุธ\",\"พฤหัสบดี\",\"ศุกร์\",\"เสาร์\"],dayNamesShort:[\"อา.\",\"จ.\",\"อ.\",\"พ.\",\"พฤ.\",\"ศ.\",\"ส.\"],dayNamesMin:[\"อา.\",\"จ.\",\"อ.\",\"พ.\",\"พฤ.\",\"ศ.\",\"ส.\"],weekHeader:\"Wk\",dateFormat:\"dd/mm/yy\",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"th\",{buttonText:{month:\"เดือน\",week:\"สัปดาห์\",day:\"วัน\",list:\"แผนงาน\"},allDayText:\"ตลอดวัน\",eventLimitText:\"เพิ่มเติม\"})}(),function(){var a={1:\"'inci\",5:\"'inci\",8:\"'inci\",70:\"'inci\",80:\"'inci\",2:\"'nci\",7:\"'nci\",20:\"'nci\",50:\"'nci\",3:\"'üncü\",4:\"'üncü\",100:\"'üncü\",6:\"'ncı\",9:\"'uncu\",10:\"'uncu\",30:\"'uncu\",60:\"'ıncı\",90:\"'ıncı\"};(t.defineLocale||t.lang).call(t,\"tr\",{months:\"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık\".split(\"_\"),monthsShort:\"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara\".split(\"_\"),weekdays:\"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi\".split(\"_\"),weekdaysShort:\"Paz_Pts_Sal_Çar_Per_Cum_Cts\".split(\"_\"),weekdaysMin:\"Pz_Pt_Sa_Ça_Pe_Cu_Ct\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD.MM.YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd, D MMMM YYYY LT\"},calendar:{sameDay:\"[bugün saat] LT\",nextDay:\"[yarın saat] LT\",nextWeek:\"[haftaya] dddd [saat] LT\",lastDay:\"[dün] LT\",lastWeek:\"[geçen hafta] dddd [saat] LT\",sameElse:\"L\"},relativeTime:{future:\"%s sonra\",past:\"%s önce\",s:\"birkaç saniye\",m:\"bir dakika\",mm:\"%d dakika\",h:\"bir saat\",hh:\"%d saat\",d:\"bir gün\",dd:\"%d gün\",M:\"bir ay\",MM:\"%d ay\",y:\"bir yıl\",yy:\"%d yıl\"},ordinalParse:/\\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,ordinal:function(e){if(0===e)return e+\"'ıncı\";var t=e%10,n=e%100-t,r=e>=100?100:null;return e+(a[t]||a[n]||a[r])},week:{dow:1,doy:7}}),e.fullCalendar.datepickerLang(\"tr\",\"tr\",{closeText:\"kapat\",prevText:\"&#x3C;geri\",nextText:\"ileri&#x3e\",currentText:\"bugün\",monthNames:[\"Ocak\",\"Şubat\",\"Mart\",\"Nisan\",\"Mayıs\",\"Haziran\",\"Temmuz\",\"Ağustos\",\"Eylül\",\"Ekim\",\"Kasım\",\"Aralık\"],monthNamesShort:[\"Oca\",\"Şub\",\"Mar\",\"Nis\",\"May\",\"Haz\",\"Tem\",\"Ağu\",\"Eyl\",\"Eki\",\"Kas\",\"Ara\"],dayNames:[\"Pazar\",\"Pazartesi\",\"Salı\",\"Çarşamba\",\"Perşembe\",\"Cuma\",\"Cumartesi\"],dayNamesShort:[\"Pz\",\"Pt\",\"Sa\",\"Ça\",\"Pe\",\"Cu\",\"Ct\"],dayNamesMin:[\"Pz\",\"Pt\",\"Sa\",\"Ça\",\"Pe\",\"Cu\",\"Ct\"],weekHeader:\"Hf\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"tr\",{buttonText:{next:\"ileri\",month:\"Ay\",week:\"Hafta\",day:\"Gün\",list:\"Ajanda\"},allDayText:\"Tüm gün\",eventLimitText:\"daha fazla\"})}(),function(){function a(e,t){var a=e.split(\"_\");return 1===t%10&&11!==t%100?a[0]:t%10>=2&&4>=t%10&&(10>t%100||t%100>=20)?a[1]:a[2]}function n(e,t,n){var r={mm:\"хвилина_хвилини_хвилин\",hh:\"година_години_годин\",dd:\"день_дні_днів\",MM:\"місяць_місяці_місяців\",yy:\"рік_роки_років\"};return\"m\"===n?t?\"хвилина\":\"хвилину\":\"h\"===n?t?\"година\":\"годину\":e+\" \"+a(r[n],+e)}function r(e,t){var a={nominative:\"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень\".split(\"_\"),accusative:\"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня\".split(\"_\")},n=/D[oD]? *MMMM?/.test(t)?\"accusative\":\"nominative\";return a[n][e.month()]}function i(e,t){var a={nominative:\"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота\".split(\"_\"),accusative:\"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу\".split(\"_\"),genitive:\"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи\".split(\"_\")},n=/(\\[[ВвУу]\\]) ?dddd/.test(t)?\"accusative\":/\\[?(?:минулої|наступної)? ?\\] ?dddd/.test(t)?\"genitive\":\"nominative\";return a[n][e.day()]}function s(e){return function(){return e+\"о\"+(11===this.hours()?\"б\":\"\")+\"] LT\"}}(t.defineLocale||t.lang).call(t,\"uk\",{months:r,monthsShort:\"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд\".split(\"_\"),weekdays:i,weekdaysShort:\"нд_пн_вт_ср_чт_пт_сб\".split(\"_\"),weekdaysMin:\"нд_пн_вт_ср_чт_пт_сб\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD.MM.YYYY\",LL:\"D MMMM YYYY р.\",LLL:\"D MMMM YYYY р., LT\",LLLL:\"dddd, D MMMM YYYY р., LT\"},calendar:{sameDay:s(\"[Сьогодні \"),nextDay:s(\"[Завтра \"),lastDay:s(\"[Вчора \"),nextWeek:s(\"[У] dddd [\"),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return s(\"[Минулої] dddd [\").call(this);case 1:case 2:case 4:return s(\"[Минулого] dddd [\").call(this)}},sameElse:\"L\"},relativeTime:{future:\"за %s\",past:\"%s тому\",s:\"декілька секунд\",m:n,mm:n,h:\"годину\",hh:n,d:\"день\",dd:n,M:\"місяць\",MM:n,y:\"рік\",yy:n},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(e){return/^(дня|вечора)$/.test(e)},meridiem:function(e){return 4>e?\"ночі\":12>e?\"ранку\":17>e?\"дня\":\"вечора\"},ordinalParse:/\\d{1,2}-(й|го)/,ordinal:function(e,t){switch(t){case\"M\":case\"d\":case\"DDD\":case\"w\":case\"W\":return e+\"-й\";case\"D\":return e+\"-го\";default:return e}},week:{dow:1,doy:7}}),e.fullCalendar.datepickerLang(\"uk\",\"uk\",{closeText:\"Закрити\",prevText:\"&#x3C;\",nextText:\"&#x3E;\",currentText:\"Сьогодні\",monthNames:[\"Січень\",\"Лютий\",\"Березень\",\"Квітень\",\"Травень\",\"Червень\",\"Липень\",\"Серпень\",\"Вересень\",\"Жовтень\",\"Листопад\",\"Грудень\"],monthNamesShort:[\"Січ\",\"Лют\",\"Бер\",\"Кві\",\"Тра\",\"Чер\",\"Лип\",\"Сер\",\"Вер\",\"Жов\",\"Лис\",\"Гру\"],dayNames:[\"неділя\",\"понеділок\",\"вівторок\",\"середа\",\"четвер\",\"п’ятниця\",\"субота\"],dayNamesShort:[\"нед\",\"пнд\",\"вів\",\"срд\",\"чтв\",\"птн\",\"сбт\"],dayNamesMin:[\"Нд\",\"Пн\",\"Вт\",\"Ср\",\"Чт\",\"Пт\",\"Сб\"],weekHeader:\"Тиж\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"uk\",{buttonText:{month:\"Місяць\",week:\"Тиждень\",day:\"День\",list:\"Порядок денний\"},allDayText:\"Увесь день\",eventLimitText:function(e){return\"+ще \"+e+\"...\"}})}(),function(){(t.defineLocale||t.lang).call(t,\"vi\",{months:\"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12\".split(\"_\"),monthsShort:\"Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12\".split(\"_\"),weekdays:\"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy\".split(\"_\"),weekdaysShort:\"CN_T2_T3_T4_T5_T6_T7\".split(\"_\"),weekdaysMin:\"CN_T2_T3_T4_T5_T6_T7\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM [năm] YYYY\",LLL:\"D MMMM [năm] YYYY LT\",LLLL:\"dddd, D MMMM [năm] YYYY LT\",l:\"DD/M/YYYY\",ll:\"D MMM YYYY\",lll:\"D MMM YYYY LT\",llll:\"ddd, D MMM YYYY LT\"},calendar:{sameDay:\"[Hôm nay lúc] LT\",nextDay:\"[Ngày mai lúc] LT\",nextWeek:\"dddd [tuần tới lúc] LT\",lastDay:\"[Hôm qua lúc] LT\",lastWeek:\"dddd [tuần rồi lúc] LT\",sameElse:\"L\"},relativeTime:{future:\"%s tới\",past:\"%s trước\",s:\"vài giây\",m:\"một phút\",mm:\"%d phút\",h:\"một giờ\",hh:\"%d giờ\",d:\"một ngày\",dd:\"%d ngày\",M:\"một tháng\",MM:\"%d tháng\",y:\"một năm\",yy:\"%d năm\"},ordinalParse:/\\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"vi\",\"vi\",{closeText:\"Đóng\",prevText:\"&#x3C;Trước\",nextText:\"Tiếp&#x3E;\",currentText:\"Hôm nay\",monthNames:[\"Tháng Một\",\"Tháng Hai\",\"Tháng Ba\",\"Tháng Tư\",\"Tháng Năm\",\"Tháng Sáu\",\"Tháng Bảy\",\"Tháng Tám\",\"Tháng Chín\",\"Tháng Mười\",\"Tháng Mười Một\",\"Tháng Mười Hai\"],monthNamesShort:[\"Tháng 1\",\"Tháng 2\",\"Tháng 3\",\"Tháng 4\",\"Tháng 5\",\"Tháng 6\",\"Tháng 7\",\"Tháng 8\",\"Tháng 9\",\"Tháng 10\",\"Tháng 11\",\"Tháng 12\"],dayNames:[\"Chủ Nhật\",\"Thứ Hai\",\"Thứ Ba\",\"Thứ Tư\",\"Thứ Năm\",\"Thứ Sáu\",\"Thứ Bảy\"],dayNamesShort:[\"CN\",\"T2\",\"T3\",\"T4\",\"T5\",\"T6\",\"T7\"],dayNamesMin:[\"CN\",\"T2\",\"T3\",\"T4\",\"T5\",\"T6\",\"T7\"],weekHeader:\"Tu\",dateFormat:\"dd/mm/yy\",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"vi\",{buttonText:{month:\"Tháng\",week:\"Tuần\",day:\"Ngày\",list:\"Lịch biểu\"},allDayText:\"Cả ngày\",eventLimitText:function(e){return\"+ thêm \"+e\n}})}(),function(){(t.defineLocale||t.lang).call(t,\"zh-cn\",{months:\"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月\".split(\"_\"),monthsShort:\"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月\".split(\"_\"),weekdays:\"星期日_星期一_星期二_星期三_星期四_星期五_星期六\".split(\"_\"),weekdaysShort:\"周日_周一_周二_周三_周四_周五_周六\".split(\"_\"),weekdaysMin:\"日_一_二_三_四_五_六\".split(\"_\"),longDateFormat:{LT:\"Ah点mm\",LTS:\"Ah点m分s秒\",L:\"YYYY-MM-DD\",LL:\"YYYY年MMMD日\",LLL:\"YYYY年MMMD日LT\",LLLL:\"YYYY年MMMD日ddddLT\",l:\"YYYY-MM-DD\",ll:\"YYYY年MMMD日\",lll:\"YYYY年MMMD日LT\",llll:\"YYYY年MMMD日ddddLT\"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),\"凌晨\"===t||\"早上\"===t||\"上午\"===t?e:\"下午\"===t||\"晚上\"===t?e+12:e>=11?e:e+12},meridiem:function(e,t){var a=100*e+t;return 600>a?\"凌晨\":900>a?\"早上\":1130>a?\"上午\":1230>a?\"中午\":1800>a?\"下午\":\"晚上\"},calendar:{sameDay:function(){return 0===this.minutes()?\"[今天]Ah[点整]\":\"[今天]LT\"},nextDay:function(){return 0===this.minutes()?\"[明天]Ah[点整]\":\"[明天]LT\"},lastDay:function(){return 0===this.minutes()?\"[昨天]Ah[点整]\":\"[昨天]LT\"},nextWeek:function(){var e,a;return e=t().startOf(\"week\"),a=this.unix()-e.unix()>=604800?\"[下]\":\"[本]\",0===this.minutes()?a+\"dddAh点整\":a+\"dddAh点mm\"},lastWeek:function(){var e,a;return e=t().startOf(\"week\"),a=this.unix()<e.unix()?\"[上]\":\"[本]\",0===this.minutes()?a+\"dddAh点整\":a+\"dddAh点mm\"},sameElse:\"LL\"},ordinalParse:/\\d{1,2}(日|月|周)/,ordinal:function(e,t){switch(t){case\"d\":case\"D\":case\"DDD\":return e+\"日\";case\"M\":return e+\"月\";case\"w\":case\"W\":return e+\"周\";default:return e}},relativeTime:{future:\"%s内\",past:\"%s前\",s:\"几秒\",m:\"1分钟\",mm:\"%d分钟\",h:\"1小时\",hh:\"%d小时\",d:\"1天\",dd:\"%d天\",M:\"1个月\",MM:\"%d个月\",y:\"1年\",yy:\"%d年\"},week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"zh-cn\",\"zh-CN\",{closeText:\"关闭\",prevText:\"&#x3C;上月\",nextText:\"下月&#x3E;\",currentText:\"今天\",monthNames:[\"一月\",\"二月\",\"三月\",\"四月\",\"五月\",\"六月\",\"七月\",\"八月\",\"九月\",\"十月\",\"十一月\",\"十二月\"],monthNamesShort:[\"一月\",\"二月\",\"三月\",\"四月\",\"五月\",\"六月\",\"七月\",\"八月\",\"九月\",\"十月\",\"十一月\",\"十二月\"],dayNames:[\"星期日\",\"星期一\",\"星期二\",\"星期三\",\"星期四\",\"星期五\",\"星期六\"],dayNamesShort:[\"周日\",\"周一\",\"周二\",\"周三\",\"周四\",\"周五\",\"周六\"],dayNamesMin:[\"日\",\"一\",\"二\",\"三\",\"四\",\"五\",\"六\"],weekHeader:\"周\",dateFormat:\"yy-mm-dd\",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:\"年\"}),e.fullCalendar.lang(\"zh-cn\",{buttonText:{month:\"月\",week:\"周\",day:\"日\",list:\"日程\"},allDayText:\"全天\",eventLimitText:function(e){return\"另外 \"+e+\" 个\"}})}(),function(){(t.defineLocale||t.lang).call(t,\"zh-tw\",{months:\"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月\".split(\"_\"),monthsShort:\"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月\".split(\"_\"),weekdays:\"星期日_星期一_星期二_星期三_星期四_星期五_星期六\".split(\"_\"),weekdaysShort:\"週日_週一_週二_週三_週四_週五_週六\".split(\"_\"),weekdaysMin:\"日_一_二_三_四_五_六\".split(\"_\"),longDateFormat:{LT:\"Ah點mm\",LTS:\"Ah點m分s秒\",L:\"YYYY年MMMD日\",LL:\"YYYY年MMMD日\",LLL:\"YYYY年MMMD日LT\",LLLL:\"YYYY年MMMD日ddddLT\",l:\"YYYY年MMMD日\",ll:\"YYYY年MMMD日\",lll:\"YYYY年MMMD日LT\",llll:\"YYYY年MMMD日ddddLT\"},meridiemParse:/早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),\"早上\"===t||\"上午\"===t?e:\"中午\"===t?e>=11?e:e+12:\"下午\"===t||\"晚上\"===t?e+12:void 0},meridiem:function(e,t){var a=100*e+t;return 900>a?\"早上\":1130>a?\"上午\":1230>a?\"中午\":1800>a?\"下午\":\"晚上\"},calendar:{sameDay:\"[今天]LT\",nextDay:\"[明天]LT\",nextWeek:\"[下]ddddLT\",lastDay:\"[昨天]LT\",lastWeek:\"[上]ddddLT\",sameElse:\"L\"},ordinalParse:/\\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case\"d\":case\"D\":case\"DDD\":return e+\"日\";case\"M\":return e+\"月\";case\"w\":case\"W\":return e+\"週\";default:return e}},relativeTime:{future:\"%s內\",past:\"%s前\",s:\"幾秒\",m:\"一分鐘\",mm:\"%d分鐘\",h:\"一小時\",hh:\"%d小時\",d:\"一天\",dd:\"%d天\",M:\"一個月\",MM:\"%d個月\",y:\"一年\",yy:\"%d年\"}}),e.fullCalendar.datepickerLang(\"zh-tw\",\"zh-TW\",{closeText:\"關閉\",prevText:\"&#x3C;上月\",nextText:\"下月&#x3E;\",currentText:\"今天\",monthNames:[\"一月\",\"二月\",\"三月\",\"四月\",\"五月\",\"六月\",\"七月\",\"八月\",\"九月\",\"十月\",\"十一月\",\"十二月\"],monthNamesShort:[\"一月\",\"二月\",\"三月\",\"四月\",\"五月\",\"六月\",\"七月\",\"八月\",\"九月\",\"十月\",\"十一月\",\"十二月\"],dayNames:[\"星期日\",\"星期一\",\"星期二\",\"星期三\",\"星期四\",\"星期五\",\"星期六\"],dayNamesShort:[\"周日\",\"周一\",\"周二\",\"周三\",\"周四\",\"周五\",\"周六\"],dayNamesMin:[\"日\",\"一\",\"二\",\"三\",\"四\",\"五\",\"六\"],weekHeader:\"周\",dateFormat:\"yy/mm/dd\",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:\"年\"}),e.fullCalendar.lang(\"zh-tw\",{buttonText:{month:\"月\",week:\"週\",day:\"天\",list:\"待辦事項\"},allDayText:\"全天\",eventLimitText:\"更多\"})}(),(t.locale||t.lang).call(t,\"en\"),e.fullCalendar.lang(\"en\"),e.datepicker&&e.datepicker.setDefaults(e.datepicker.regional[\"\"])});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 10820\n}).call(this);                                                       // 10821\n                                                                     // 10822\n                                                                     // 10823\n                                                                     // 10824\n                                                                     // 10825\n                                                                     // 10826\n                                                                     // 10827\n(function () {                                                       // 10828\n                                                                     // 10829\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/rzymek:fullcalendar/fullcalendar/dist/gcal.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*!                                                                                                                    // 1\n * FullCalendar v2.3.1 Google Calendar Plugin                                                                          // 2\n * Docs & License: http://fullcalendar.io/                                                                             // 3\n * (c) 2015 Adam Shaw                                                                                                  // 4\n */                                                                                                                    // 5\n                                                                                                                       // 6\n(function(factory) {                                                                                                   // 7\n\tif (typeof define === 'function' && define.amd) {                                                                     // 8\n\t\tdefine([ 'jquery' ], factory);                                                                                       // 9\n\t}                                                                                                                     // 10\n\telse if (typeof exports === 'object') { // Node/CommonJS                                                              // 11\n\t\tmodule.exports = factory(require('jquery'));                                                                         // 12\n\t}                                                                                                                     // 13\n\telse {                                                                                                                // 14\n\t\tfactory(jQuery);                                                                                                     // 15\n\t}                                                                                                                     // 16\n})(function($) {                                                                                                       // 17\n                                                                                                                       // 18\n                                                                                                                       // 19\nvar API_BASE = 'https://www.googleapis.com/calendar/v3/calendars';                                                     // 20\nvar fc = $.fullCalendar;                                                                                               // 21\nvar applyAll = fc.applyAll;                                                                                            // 22\n                                                                                                                       // 23\n                                                                                                                       // 24\nfc.sourceNormalizers.push(function(sourceOptions) {                                                                    // 25\n\tvar googleCalendarId = sourceOptions.googleCalendarId;                                                                // 26\n\tvar url = sourceOptions.url;                                                                                          // 27\n\tvar match;                                                                                                            // 28\n                                                                                                                       // 29\n\t// if the Google Calendar ID hasn't been explicitly defined                                                           // 30\n\tif (!googleCalendarId && url) {                                                                                       // 31\n                                                                                                                       // 32\n\t\t// detect if the ID was specified as a single string.                                                                // 33\n\t\t// will match calendars like \"asdf1234@calendar.google.com\" in addition to person email calendars.                   // 34\n\t\tif (/^[^\\/]+@([^\\/\\.]+\\.)*(google|googlemail|gmail)\\.com$/.test(url)) {                                              // 35\n\t\t\tgoogleCalendarId = url;                                                                                             // 36\n\t\t}                                                                                                                    // 37\n\t\t// try to scrape it out of a V1 or V3 API feed URL                                                                   // 38\n\t\telse if (                                                                                                            // 39\n\t\t\t(match = /^https:\\/\\/www.googleapis.com\\/calendar\\/v3\\/calendars\\/([^\\/]*)/.exec(url)) ||                           // 40\n\t\t\t(match = /^https?:\\/\\/www.google.com\\/calendar\\/feeds\\/([^\\/]*)/.exec(url))                                         // 41\n\t\t) {                                                                                                                  // 42\n\t\t\tgoogleCalendarId = decodeURIComponent(match[1]);                                                                    // 43\n\t\t}                                                                                                                    // 44\n                                                                                                                       // 45\n\t\tif (googleCalendarId) {                                                                                              // 46\n\t\t\tsourceOptions.googleCalendarId = googleCalendarId;                                                                  // 47\n\t\t}                                                                                                                    // 48\n\t}                                                                                                                     // 49\n                                                                                                                       // 50\n                                                                                                                       // 51\n\tif (googleCalendarId) { // is this a Google Calendar?                                                                 // 52\n                                                                                                                       // 53\n\t\t// make each Google Calendar source uneditable by default                                                            // 54\n\t\tif (sourceOptions.editable == null) {                                                                                // 55\n\t\t\tsourceOptions.editable = false;                                                                                     // 56\n\t\t}                                                                                                                    // 57\n                                                                                                                       // 58\n\t\t// We want removeEventSource to work, but it won't know about the googleCalendarId primitive.                        // 59\n\t\t// Shoehorn it into the url, which will function as the unique primitive. Won't cause side effects.                  // 60\n\t\t// This hack is obsolete since 2.2.3, but keep it so this plugin file is compatible with old versions.               // 61\n\t\tsourceOptions.url = googleCalendarId;                                                                                // 62\n\t}                                                                                                                     // 63\n});                                                                                                                    // 64\n                                                                                                                       // 65\n                                                                                                                       // 66\nfc.sourceFetchers.push(function(sourceOptions, start, end, timezone) {                                                 // 67\n\tif (sourceOptions.googleCalendarId) {                                                                                 // 68\n\t\treturn transformOptions(sourceOptions, start, end, timezone, this); // `this` is the calendar                        // 69\n\t}                                                                                                                     // 70\n});                                                                                                                    // 71\n                                                                                                                       // 72\n                                                                                                                       // 73\nfunction transformOptions(sourceOptions, start, end, timezone, calendar) {                                             // 74\n\tvar url = API_BASE + '/' + encodeURIComponent(sourceOptions.googleCalendarId) + '/events?callback=?'; // jsonp        // 75\n\tvar apiKey = sourceOptions.googleCalendarApiKey || calendar.options.googleCalendarApiKey;                             // 76\n\tvar success = sourceOptions.success;                                                                                  // 77\n\tvar data;                                                                                                             // 78\n\tvar timezoneArg; // populated when a specific timezone. escaped to Google's liking                                    // 79\n                                                                                                                       // 80\n\tfunction reportError(message, apiErrorObjs) {                                                                         // 81\n\t\tvar errorObjs = apiErrorObjs || [ { message: message } ]; // to be passed into error handlers                        // 82\n\t\tvar consoleObj = window.console;                                                                                     // 83\n\t\tvar consoleWarnFunc = consoleObj ? (consoleObj.warn || consoleObj.log) : null;                                       // 84\n                                                                                                                       // 85\n\t\t// call error handlers                                                                                               // 86\n\t\t(sourceOptions.googleCalendarError || $.noop).apply(calendar, errorObjs);                                            // 87\n\t\t(calendar.options.googleCalendarError || $.noop).apply(calendar, errorObjs);                                         // 88\n                                                                                                                       // 89\n\t\t// print error to debug console                                                                                      // 90\n\t\tif (consoleWarnFunc) {                                                                                               // 91\n\t\t\tconsoleWarnFunc.apply(consoleObj, [ message ].concat(apiErrorObjs || []));                                          // 92\n\t\t}                                                                                                                    // 93\n\t}                                                                                                                     // 94\n                                                                                                                       // 95\n\tif (!apiKey) {                                                                                                        // 96\n\t\treportError(\"Specify a googleCalendarApiKey. See http://fullcalendar.io/docs/google_calendar/\");                     // 97\n\t\treturn {}; // an empty source to use instead. won't fetch anything.                                                  // 98\n\t}                                                                                                                     // 99\n                                                                                                                       // 100\n\t// The API expects an ISO8601 datetime with a time and timezone part.                                                 // 101\n\t// Since the calendar's timezone offset isn't always known, request the date in UTC and pad it by a day on each       // 102\n\t// side, guaranteeing we will receive all events in the desired range, albeit a superset.                             // 103\n\t// .utc() will set a zone and give it a 00:00:00 time.                                                                // 104\n\tif (!start.hasZone()) {                                                                                               // 105\n\t\tstart = start.clone().utc().add(-1, 'day');                                                                          // 106\n\t}                                                                                                                     // 107\n\tif (!end.hasZone()) {                                                                                                 // 108\n\t\tend = end.clone().utc().add(1, 'day');                                                                               // 109\n\t}                                                                                                                     // 110\n                                                                                                                       // 111\n\t// when sending timezone names to Google, only accepts underscores, not spaces                                        // 112\n\tif (timezone && timezone != 'local') {                                                                                // 113\n\t\ttimezoneArg = timezone.replace(' ', '_');                                                                            // 114\n\t}                                                                                                                     // 115\n                                                                                                                       // 116\n\tdata = $.extend({}, sourceOptions.data || {}, {                                                                       // 117\n\t\tkey: apiKey,                                                                                                         // 118\n\t\ttimeMin: start.format(),                                                                                             // 119\n\t\ttimeMax: end.format(),                                                                                               // 120\n\t\ttimeZone: timezoneArg,                                                                                               // 121\n\t\tsingleEvents: true,                                                                                                  // 122\n\t\tmaxResults: 9999                                                                                                     // 123\n\t});                                                                                                                   // 124\n                                                                                                                       // 125\n\treturn $.extend({}, sourceOptions, {                                                                                  // 126\n\t\tgoogleCalendarId: null, // prevents source-normalizing from happening again                                          // 127\n\t\turl: url,                                                                                                            // 128\n\t\tdata: data,                                                                                                          // 129\n\t\tstartParam: false, // `false` omits this parameter. we already included it above                                     // 130\n\t\tendParam: false, // same                                                                                             // 131\n\t\ttimezoneParam: false, // same                                                                                        // 132\n\t\tsuccess: function(data) {                                                                                            // 133\n\t\t\tvar events = [];                                                                                                    // 134\n\t\t\tvar successArgs;                                                                                                    // 135\n\t\t\tvar successRes;                                                                                                     // 136\n                                                                                                                       // 137\n\t\t\tif (data.error) {                                                                                                   // 138\n\t\t\t\treportError('Google Calendar API: ' + data.error.message, data.error.errors);                                      // 139\n\t\t\t}                                                                                                                   // 140\n\t\t\telse if (data.items) {                                                                                              // 141\n\t\t\t\t$.each(data.items, function(i, entry) {                                                                            // 142\n\t\t\t\t\tvar url = entry.htmlLink;                                                                                         // 143\n                                                                                                                       // 144\n\t\t\t\t\t// make the URLs for each event show times in the correct timezone                                                // 145\n\t\t\t\t\tif (timezoneArg) {                                                                                                // 146\n\t\t\t\t\t\turl = injectQsComponent(url, 'ctz=' + timezoneArg);                                                              // 147\n\t\t\t\t\t}                                                                                                                 // 148\n                                                                                                                       // 149\n\t\t\t\t\tevents.push({                                                                                                     // 150\n\t\t\t\t\t\tid: entry.id,                                                                                                    // 151\n\t\t\t\t\t\ttitle: entry.summary,                                                                                            // 152\n\t\t\t\t\t\tstart: entry.start.dateTime || entry.start.date, // try timed. will fall back to all-day                         // 153\n\t\t\t\t\t\tend: entry.end.dateTime || entry.end.date, // same                                                               // 154\n\t\t\t\t\t\turl: url,                                                                                                        // 155\n\t\t\t\t\t\tlocation: entry.location,                                                                                        // 156\n\t\t\t\t\t\tdescription: entry.description                                                                                   // 157\n\t\t\t\t\t});                                                                                                               // 158\n\t\t\t\t});                                                                                                                // 159\n                                                                                                                       // 160\n\t\t\t\t// call the success handler(s) and allow it to return a new events array                                           // 161\n\t\t\t\tsuccessArgs = [ events ].concat(Array.prototype.slice.call(arguments, 1)); // forward other jq args                // 162\n\t\t\t\tsuccessRes = applyAll(success, this, successArgs);                                                                 // 163\n\t\t\t\tif ($.isArray(successRes)) {                                                                                       // 164\n\t\t\t\t\treturn successRes;                                                                                                // 165\n\t\t\t\t}                                                                                                                  // 166\n\t\t\t}                                                                                                                   // 167\n                                                                                                                       // 168\n\t\t\treturn events;                                                                                                      // 169\n\t\t}                                                                                                                    // 170\n\t});                                                                                                                   // 171\n}                                                                                                                      // 172\n                                                                                                                       // 173\n                                                                                                                       // 174\n// Injects a string like \"arg=value\" into the querystring of a URL                                                     // 175\nfunction injectQsComponent(url, component) {                                                                           // 176\n\t// inject it after the querystring but before the fragment                                                            // 177\n\treturn url.replace(/(\\?.*?)?(#|$)/, function(whole, qs, hash) {                                                       // 178\n\t\treturn (qs ? qs + '&' : '?') + component + hash;                                                                     // 179\n\t});                                                                                                                   // 180\n}                                                                                                                      // 181\n                                                                                                                       // 182\n                                                                                                                       // 183\n});                                                                                                                    // 184\n                                                                                                                       // 185\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 11022\n}).call(this);                                                       // 11023\n                                                                     // 11024\n                                                                     // 11025\n                                                                     // 11026\n                                                                     // 11027\n                                                                     // 11028\n                                                                     // 11029\n(function () {                                                       // 11030\n                                                                     // 11031\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/rzymek:fullcalendar/template.template.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"fullcalendar\");                                                                                  // 2\nTemplate[\"fullcalendar\"] = new Template(\"Template.fullcalendar\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.Raw(\"<div></div>\");                                                                                      // 5\n}));                                                                                                                   // 6\n                                                                                                                       // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 11046\n}).call(this);                                                       // 11047\n                                                                     // 11048\n                                                                     // 11049\n                                                                     // 11050\n                                                                     // 11051\n                                                                     // 11052\n                                                                     // 11053\n(function () {                                                       // 11054\n                                                                     // 11055\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/rzymek:fullcalendar/template.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.fullcalendar.rendered = function() {                                                                          // 1\n    var div = this.$(this.firstNode);                                                                                  // 2\n    //jquery takes care of undefined values, no need to check here                                                     // 3\n    div.attr('id',this.data.id);                                                                                       // 4\n    div.addClass(this.data.class);                                                                                     // 5\n    div.fullCalendar(this.data);                                                                                       // 6\n};                                                                                                                     // 7\n                                                                                                                       // 8\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 11071\n}).call(this);                                                       // 11072\n                                                                     // 11073\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['rzymek:fullcalendar'] = {};\n\n})();\n","servePath":"/packages/rzymek_fullcalendar.js","sourceMap":{"version":3,"sources":["/packages/rzymek_fullcalendar/packages/rzymek_fullcalendar.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6E","file":"/packages/rzymek_fullcalendar.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/rzymek:fullcalendar/fullcalendar/dist/fullcalendar.js                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*!                                                                                                                    // 1\n * FullCalendar v2.3.1                                                                                                 // 2\n * Docs & License: http://fullcalendar.io/                                                                             // 3\n * (c) 2015 Adam Shaw                                                                                                  // 4\n */                                                                                                                    // 5\n                                                                                                                       // 6\n(function(factory) {                                                                                                   // 7\n\tif (typeof define === 'function' && define.amd) {                                                                     // 8\n\t\tdefine([ 'jquery', 'moment' ], factory);                                                                             // 9\n\t}                                                                                                                     // 10\n\telse if (typeof exports === 'object') { // Node/CommonJS                                                              // 11\n\t\tmodule.exports = factory(require('jquery'), require('moment'));                                                      // 12\n\t}                                                                                                                     // 13\n\telse {                                                                                                                // 14\n\t\tfactory(jQuery, moment);                                                                                             // 15\n\t}                                                                                                                     // 16\n})(function($, moment) {                                                                                               // 17\n                                                                                                                       // 18\n;;                                                                                                                     // 19\n                                                                                                                       // 20\nvar fc = $.fullCalendar = { version: \"2.3.1\" };                                                                        // 21\nvar fcViews = fc.views = {};                                                                                           // 22\n                                                                                                                       // 23\n                                                                                                                       // 24\n$.fn.fullCalendar = function(options) {                                                                                // 25\n\tvar args = Array.prototype.slice.call(arguments, 1); // for a possible method call                                    // 26\n\tvar res = this; // what this function will return (this jQuery object by default)                                     // 27\n                                                                                                                       // 28\n\tthis.each(function(i, _element) { // loop each DOM element involved                                                   // 29\n\t\tvar element = $(_element);                                                                                           // 30\n\t\tvar calendar = element.data('fullCalendar'); // get the existing calendar object (if any)                            // 31\n\t\tvar singleRes; // the returned value of this single method call                                                      // 32\n                                                                                                                       // 33\n\t\t// a method call                                                                                                     // 34\n\t\tif (typeof options === 'string') {                                                                                   // 35\n\t\t\tif (calendar && $.isFunction(calendar[options])) {                                                                  // 36\n\t\t\t\tsingleRes = calendar[options].apply(calendar, args);                                                               // 37\n\t\t\t\tif (!i) {                                                                                                          // 38\n\t\t\t\t\tres = singleRes; // record the first method call result                                                           // 39\n\t\t\t\t}                                                                                                                  // 40\n\t\t\t\tif (options === 'destroy') { // for the destroy method, must remove Calendar object data                           // 41\n\t\t\t\t\telement.removeData('fullCalendar');                                                                               // 42\n\t\t\t\t}                                                                                                                  // 43\n\t\t\t}                                                                                                                   // 44\n\t\t}                                                                                                                    // 45\n\t\t// a new calendar initialization                                                                                     // 46\n\t\telse if (!calendar) { // don't initialize twice                                                                      // 47\n\t\t\tcalendar = new fc.CalendarBase(element, options);                                                                   // 48\n\t\t\telement.data('fullCalendar', calendar);                                                                             // 49\n\t\t\tcalendar.render();                                                                                                  // 50\n\t\t}                                                                                                                    // 51\n\t});                                                                                                                   // 52\n\t                                                                                                                      // 53\n\treturn res;                                                                                                           // 54\n};                                                                                                                     // 55\n                                                                                                                       // 56\n                                                                                                                       // 57\nvar complexOptions = [ // names of options that are objects whose properties should be combined                        // 58\n\t'header',                                                                                                             // 59\n\t'buttonText',                                                                                                         // 60\n\t'buttonIcons',                                                                                                        // 61\n\t'themeButtonIcons'                                                                                                    // 62\n];                                                                                                                     // 63\n                                                                                                                       // 64\n                                                                                                                       // 65\n// Recursively combines all passed-in option-hash arguments into a new single option-hash.                             // 66\n// Given option-hashes are ordered from lowest to highest priority.                                                    // 67\nfunction mergeOptions() {                                                                                              // 68\n\tvar chain = Array.prototype.slice.call(arguments); // convert to a real array                                         // 69\n\tvar complexVals = {}; // hash for each complex option's combined values                                               // 70\n\tvar i, name;                                                                                                          // 71\n\tvar combinedVal;                                                                                                      // 72\n\tvar j;                                                                                                                // 73\n\tvar val;                                                                                                              // 74\n                                                                                                                       // 75\n\t// for each complex option, loop through each option-hash and accumulate the combined values                          // 76\n\tfor (i = 0; i < complexOptions.length; i++) {                                                                         // 77\n\t\tname = complexOptions[i];                                                                                            // 78\n\t\tcombinedVal = null; // an object holding the merge of all the values                                                 // 79\n                                                                                                                       // 80\n\t\tfor (j = 0; j < chain.length; j++) {                                                                                 // 81\n\t\t\tval = chain[j][name];                                                                                               // 82\n                                                                                                                       // 83\n\t\t\tif ($.isPlainObject(val)) {                                                                                         // 84\n\t\t\t\tcombinedVal = $.extend(combinedVal || {}, val); // merge new properties                                            // 85\n\t\t\t}                                                                                                                   // 86\n\t\t\telse if (val != null) { // a non-null non-undefined atomic option                                                   // 87\n\t\t\t\tcombinedVal = null; // signal to use the atomic value                                                              // 88\n\t\t\t}                                                                                                                   // 89\n\t\t}                                                                                                                    // 90\n                                                                                                                       // 91\n\t\t// if not null, the final value was a combination of other objects. record it                                        // 92\n\t\tif (combinedVal !== null) {                                                                                          // 93\n\t\t\tcomplexVals[name] = combinedVal;                                                                                    // 94\n\t\t}                                                                                                                    // 95\n\t}                                                                                                                     // 96\n                                                                                                                       // 97\n\tchain.unshift({}); // $.extend will mutate this with the result                                                       // 98\n\tchain.push(complexVals); // computed complex values are applied last                                                  // 99\n\treturn $.extend.apply($, chain); // combine                                                                           // 100\n}                                                                                                                      // 101\n                                                                                                                       // 102\n                                                                                                                       // 103\n// Given options specified for the calendar's constructor, massages any legacy options into a non-legacy form.         // 104\n// Converts View-Option-Hashes into the View-Specific-Options format.                                                  // 105\nfunction massageOverrides(input) {                                                                                     // 106\n\tvar overrides = { views: input.views || {} }; // the output. ensure a `views` hash                                    // 107\n\tvar subObj;                                                                                                           // 108\n                                                                                                                       // 109\n\t// iterate through all option override properties (except `views`)                                                    // 110\n\t$.each(input, function(name, val) {                                                                                   // 111\n\t\tif (name != 'views') {                                                                                               // 112\n                                                                                                                       // 113\n\t\t\t// could the value be a legacy View-Option-Hash?                                                                    // 114\n\t\t\tif (                                                                                                                // 115\n\t\t\t\t$.isPlainObject(val) &&                                                                                            // 116\n\t\t\t\t!/(time|duration|interval)$/i.test(name) && // exclude duration options. might be given as objects                 // 117\n\t\t\t\t$.inArray(name, complexOptions) == -1 // complex options aren't allowed to be View-Option-Hashes                   // 118\n\t\t\t) {                                                                                                                 // 119\n\t\t\t\tsubObj = null;                                                                                                     // 120\n                                                                                                                       // 121\n\t\t\t\t// iterate through the properties of this possible View-Option-Hash value                                          // 122\n\t\t\t\t$.each(val, function(subName, subVal) {                                                                            // 123\n                                                                                                                       // 124\n\t\t\t\t\t// is the property targeting a view?                                                                              // 125\n\t\t\t\t\tif (/^(month|week|day|default|basic(Week|Day)?|agenda(Week|Day)?)$/.test(subName)) {                              // 126\n\t\t\t\t\t\tif (!overrides.views[subName]) { // ensure the view-target entry exists                                          // 127\n\t\t\t\t\t\t\toverrides.views[subName] = {};                                                                                  // 128\n\t\t\t\t\t\t}                                                                                                                // 129\n\t\t\t\t\t\toverrides.views[subName][name] = subVal; // record the value in the `views` object                               // 130\n\t\t\t\t\t}                                                                                                                 // 131\n\t\t\t\t\telse { // a non-View-Option-Hash property                                                                         // 132\n\t\t\t\t\t\tif (!subObj) {                                                                                                   // 133\n\t\t\t\t\t\t\tsubObj = {};                                                                                                    // 134\n\t\t\t\t\t\t}                                                                                                                // 135\n\t\t\t\t\t\tsubObj[subName] = subVal; // accumulate these unrelated values for later                                         // 136\n\t\t\t\t\t}                                                                                                                 // 137\n\t\t\t\t});                                                                                                                // 138\n                                                                                                                       // 139\n\t\t\t\tif (subObj) { // non-View-Option-Hash properties? transfer them as-is                                              // 140\n\t\t\t\t\toverrides[name] = subObj;                                                                                         // 141\n\t\t\t\t}                                                                                                                  // 142\n\t\t\t}                                                                                                                   // 143\n\t\t\telse {                                                                                                              // 144\n\t\t\t\toverrides[name] = val; // transfer normal options as-is                                                            // 145\n\t\t\t}                                                                                                                   // 146\n\t\t}                                                                                                                    // 147\n\t});                                                                                                                   // 148\n                                                                                                                       // 149\n\treturn overrides;                                                                                                     // 150\n}                                                                                                                      // 151\n                                                                                                                       // 152\n;;                                                                                                                     // 153\n                                                                                                                       // 154\n// exports                                                                                                             // 155\nfc.intersectionToSeg = intersectionToSeg;                                                                              // 156\nfc.applyAll = applyAll;                                                                                                // 157\nfc.debounce = debounce;                                                                                                // 158\nfc.isInt = isInt;                                                                                                      // 159\nfc.htmlEscape = htmlEscape;                                                                                            // 160\nfc.cssToStr = cssToStr;                                                                                                // 161\nfc.proxy = proxy;                                                                                                      // 162\n                                                                                                                       // 163\n                                                                                                                       // 164\n/* FullCalendar-specific DOM Utilities                                                                                 // 165\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 167\n                                                                                                                       // 168\n// Given the scrollbar widths of some other container, create borders/margins on rowEls in order to match the left     // 169\n// and right space that was offset by the scrollbars. A 1-pixel border first, then margin beyond that.                 // 170\nfunction compensateScroll(rowEls, scrollbarWidths) {                                                                   // 171\n\tif (scrollbarWidths.left) {                                                                                           // 172\n\t\trowEls.css({                                                                                                         // 173\n\t\t\t'border-left-width': 1,                                                                                             // 174\n\t\t\t'margin-left': scrollbarWidths.left - 1                                                                             // 175\n\t\t});                                                                                                                  // 176\n\t}                                                                                                                     // 177\n\tif (scrollbarWidths.right) {                                                                                          // 178\n\t\trowEls.css({                                                                                                         // 179\n\t\t\t'border-right-width': 1,                                                                                            // 180\n\t\t\t'margin-right': scrollbarWidths.right - 1                                                                           // 181\n\t\t});                                                                                                                  // 182\n\t}                                                                                                                     // 183\n}                                                                                                                      // 184\n                                                                                                                       // 185\n                                                                                                                       // 186\n// Undoes compensateScroll and restores all borders/margins                                                            // 187\nfunction uncompensateScroll(rowEls) {                                                                                  // 188\n\trowEls.css({                                                                                                          // 189\n\t\t'margin-left': '',                                                                                                   // 190\n\t\t'margin-right': '',                                                                                                  // 191\n\t\t'border-left-width': '',                                                                                             // 192\n\t\t'border-right-width': ''                                                                                             // 193\n\t});                                                                                                                   // 194\n}                                                                                                                      // 195\n                                                                                                                       // 196\n                                                                                                                       // 197\n// Make the mouse cursor express that an event is not allowed in the current area                                      // 198\nfunction disableCursor() {                                                                                             // 199\n\t$('body').addClass('fc-not-allowed');                                                                                 // 200\n}                                                                                                                      // 201\n                                                                                                                       // 202\n                                                                                                                       // 203\n// Returns the mouse cursor to its original look                                                                       // 204\nfunction enableCursor() {                                                                                              // 205\n\t$('body').removeClass('fc-not-allowed');                                                                              // 206\n}                                                                                                                      // 207\n                                                                                                                       // 208\n                                                                                                                       // 209\n// Given a total available height to fill, have `els` (essentially child rows) expand to accomodate.                   // 210\n// By default, all elements that are shorter than the recommended height are expanded uniformly, not considering       // 211\n// any other els that are already too tall. if `shouldRedistribute` is on, it considers these tall rows and            // 212\n// reduces the available height.                                                                                       // 213\nfunction distributeHeight(els, availableHeight, shouldRedistribute) {                                                  // 214\n                                                                                                                       // 215\n\t// *FLOORING NOTE*: we floor in certain places because zoom can give inaccurate floating-point dimensions,            // 216\n\t// and it is better to be shorter than taller, to avoid creating unnecessary scrollbars.                              // 217\n                                                                                                                       // 218\n\tvar minOffset1 = Math.floor(availableHeight / els.length); // for non-last element                                    // 219\n\tvar minOffset2 = Math.floor(availableHeight - minOffset1 * (els.length - 1)); // for last element *FLOORING NOTE*     // 220\n\tvar flexEls = []; // elements that are allowed to expand. array of DOM nodes                                          // 221\n\tvar flexOffsets = []; // amount of vertical space it takes up                                                         // 222\n\tvar flexHeights = []; // actual css height                                                                            // 223\n\tvar usedHeight = 0;                                                                                                   // 224\n                                                                                                                       // 225\n\tundistributeHeight(els); // give all elements their natural height                                                    // 226\n                                                                                                                       // 227\n\t// find elements that are below the recommended height (expandable).                                                  // 228\n\t// important to query for heights in a single first pass (to avoid reflow oscillation).                               // 229\n\tels.each(function(i, el) {                                                                                            // 230\n\t\tvar minOffset = i === els.length - 1 ? minOffset2 : minOffset1;                                                      // 231\n\t\tvar naturalOffset = $(el).outerHeight(true);                                                                         // 232\n                                                                                                                       // 233\n\t\tif (naturalOffset < minOffset) {                                                                                     // 234\n\t\t\tflexEls.push(el);                                                                                                   // 235\n\t\t\tflexOffsets.push(naturalOffset);                                                                                    // 236\n\t\t\tflexHeights.push($(el).height());                                                                                   // 237\n\t\t}                                                                                                                    // 238\n\t\telse {                                                                                                               // 239\n\t\t\t// this element stretches past recommended height (non-expandable). mark the space as occupied.                     // 240\n\t\t\tusedHeight += naturalOffset;                                                                                        // 241\n\t\t}                                                                                                                    // 242\n\t});                                                                                                                   // 243\n                                                                                                                       // 244\n\t// readjust the recommended height to only consider the height available to non-maxed-out rows.                       // 245\n\tif (shouldRedistribute) {                                                                                             // 246\n\t\tavailableHeight -= usedHeight;                                                                                       // 247\n\t\tminOffset1 = Math.floor(availableHeight / flexEls.length);                                                           // 248\n\t\tminOffset2 = Math.floor(availableHeight - minOffset1 * (flexEls.length - 1)); // *FLOORING NOTE*                     // 249\n\t}                                                                                                                     // 250\n                                                                                                                       // 251\n\t// assign heights to all expandable elements                                                                          // 252\n\t$(flexEls).each(function(i, el) {                                                                                     // 253\n\t\tvar minOffset = i === flexEls.length - 1 ? minOffset2 : minOffset1;                                                  // 254\n\t\tvar naturalOffset = flexOffsets[i];                                                                                  // 255\n\t\tvar naturalHeight = flexHeights[i];                                                                                  // 256\n\t\tvar newHeight = minOffset - (naturalOffset - naturalHeight); // subtract the margin/padding                          // 257\n                                                                                                                       // 258\n\t\tif (naturalOffset < minOffset) { // we check this again because redistribution might have changed things             // 259\n\t\t\t$(el).height(newHeight);                                                                                            // 260\n\t\t}                                                                                                                    // 261\n\t});                                                                                                                   // 262\n}                                                                                                                      // 263\n                                                                                                                       // 264\n                                                                                                                       // 265\n// Undoes distrubuteHeight, restoring all els to their natural height                                                  // 266\nfunction undistributeHeight(els) {                                                                                     // 267\n\tels.height('');                                                                                                       // 268\n}                                                                                                                      // 269\n                                                                                                                       // 270\n                                                                                                                       // 271\n// Given `els`, a jQuery set of <td> cells, find the cell with the largest natural width and set the widths of all the // 272\n// cells to be that width.                                                                                             // 273\n// PREREQUISITE: if you want a cell to take up width, it needs to have a single inner element w/ display:inline        // 274\nfunction matchCellWidths(els) {                                                                                        // 275\n\tvar maxInnerWidth = 0;                                                                                                // 276\n                                                                                                                       // 277\n\tels.find('> *').each(function(i, innerEl) {                                                                           // 278\n\t\tvar innerWidth = $(innerEl).outerWidth();                                                                            // 279\n\t\tif (innerWidth > maxInnerWidth) {                                                                                    // 280\n\t\t\tmaxInnerWidth = innerWidth;                                                                                         // 281\n\t\t}                                                                                                                    // 282\n\t});                                                                                                                   // 283\n                                                                                                                       // 284\n\tmaxInnerWidth++; // sometimes not accurate of width the text needs to stay on one line. insurance                     // 285\n                                                                                                                       // 286\n\tels.width(maxInnerWidth);                                                                                             // 287\n                                                                                                                       // 288\n\treturn maxInnerWidth;                                                                                                 // 289\n}                                                                                                                      // 290\n                                                                                                                       // 291\n                                                                                                                       // 292\n// Turns a container element into a scroller if its contents is taller than the allotted height.                       // 293\n// Returns true if the element is now a scroller, false otherwise.                                                     // 294\n// NOTE: this method is best because it takes weird zooming dimensions into account                                    // 295\nfunction setPotentialScroller(containerEl, height) {                                                                   // 296\n\tcontainerEl.height(height).addClass('fc-scroller');                                                                   // 297\n                                                                                                                       // 298\n\t// are scrollbars needed?                                                                                             // 299\n\tif (containerEl[0].scrollHeight - 1 > containerEl[0].clientHeight) { // !!! -1 because IE is often off-by-one :(      // 300\n\t\treturn true;                                                                                                         // 301\n\t}                                                                                                                     // 302\n                                                                                                                       // 303\n\tunsetScroller(containerEl); // undo                                                                                   // 304\n\treturn false;                                                                                                         // 305\n}                                                                                                                      // 306\n                                                                                                                       // 307\n                                                                                                                       // 308\n// Takes an element that might have been a scroller, and turns it back into a normal element.                          // 309\nfunction unsetScroller(containerEl) {                                                                                  // 310\n\tcontainerEl.height('').removeClass('fc-scroller');                                                                    // 311\n}                                                                                                                      // 312\n                                                                                                                       // 313\n                                                                                                                       // 314\n/* General DOM Utilities                                                                                               // 315\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 317\nfc.getClientRect = getClientRect;                                                                                      // 318\nfc.getContentRect = getContentRect;                                                                                    // 319\nfc.getScrollbarWidths = getScrollbarWidths;                                                                            // 320\n                                                                                                                       // 321\n                                                                                                                       // 322\n// borrowed from https://github.com/jquery/jquery-ui/blob/1.11.0/ui/core.js#L51                                        // 323\nfunction getScrollParent(el) {                                                                                         // 324\n\tvar position = el.css('position'),                                                                                    // 325\n\t\tscrollParent = el.parents().filter(function() {                                                                      // 326\n\t\t\tvar parent = $(this);                                                                                               // 327\n\t\t\treturn (/(auto|scroll)/).test(                                                                                      // 328\n\t\t\t\tparent.css('overflow') + parent.css('overflow-y') + parent.css('overflow-x')                                       // 329\n\t\t\t);                                                                                                                  // 330\n\t\t}).eq(0);                                                                                                            // 331\n                                                                                                                       // 332\n\treturn position === 'fixed' || !scrollParent.length ? $(el[0].ownerDocument || document) : scrollParent;              // 333\n}                                                                                                                      // 334\n                                                                                                                       // 335\n                                                                                                                       // 336\n// Queries the outer bounding area of a jQuery element.                                                                // 337\n// Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).                    // 338\nfunction getOuterRect(el) {                                                                                            // 339\n\tvar offset = el.offset();                                                                                             // 340\n                                                                                                                       // 341\n\treturn {                                                                                                              // 342\n\t\tleft: offset.left,                                                                                                   // 343\n\t\tright: offset.left + el.outerWidth(),                                                                                // 344\n\t\ttop: offset.top,                                                                                                     // 345\n\t\tbottom: offset.top + el.outerHeight()                                                                                // 346\n\t};                                                                                                                    // 347\n}                                                                                                                      // 348\n                                                                                                                       // 349\n                                                                                                                       // 350\n// Queries the area within the margin/border/scrollbars of a jQuery element. Does not go within the padding.           // 351\n// Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).                    // 352\n// NOTE: should use clientLeft/clientTop, but very unreliable cross-browser.                                           // 353\nfunction getClientRect(el) {                                                                                           // 354\n\tvar offset = el.offset();                                                                                             // 355\n\tvar scrollbarWidths = getScrollbarWidths(el);                                                                         // 356\n\tvar left = offset.left + getCssFloat(el, 'border-left-width') + scrollbarWidths.left;                                 // 357\n\tvar top = offset.top + getCssFloat(el, 'border-top-width') + scrollbarWidths.top;                                     // 358\n                                                                                                                       // 359\n\treturn {                                                                                                              // 360\n\t\tleft: left,                                                                                                          // 361\n\t\tright: left + el[0].clientWidth, // clientWidth includes padding but NOT scrollbars                                  // 362\n\t\ttop: top,                                                                                                            // 363\n\t\tbottom: top + el[0].clientHeight // clientHeight includes padding but NOT scrollbars                                 // 364\n\t};                                                                                                                    // 365\n}                                                                                                                      // 366\n                                                                                                                       // 367\n                                                                                                                       // 368\n// Queries the area within the margin/border/padding of a jQuery element. Assumed not to have scrollbars.              // 369\n// Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).                    // 370\nfunction getContentRect(el) {                                                                                          // 371\n\tvar offset = el.offset(); // just outside of border, margin not included                                              // 372\n\tvar left = offset.left + getCssFloat(el, 'border-left-width') + getCssFloat(el, 'padding-left');                      // 373\n\tvar top = offset.top + getCssFloat(el, 'border-top-width') + getCssFloat(el, 'padding-top');                          // 374\n                                                                                                                       // 375\n\treturn {                                                                                                              // 376\n\t\tleft: left,                                                                                                          // 377\n\t\tright: left + el.width(),                                                                                            // 378\n\t\ttop: top,                                                                                                            // 379\n\t\tbottom: top + el.height()                                                                                            // 380\n\t};                                                                                                                    // 381\n}                                                                                                                      // 382\n                                                                                                                       // 383\n                                                                                                                       // 384\n// Returns the computed left/right/top/bottom scrollbar widths for the given jQuery element.                           // 385\n// NOTE: should use clientLeft/clientTop, but very unreliable cross-browser.                                           // 386\nfunction getScrollbarWidths(el) {                                                                                      // 387\n\tvar leftRightWidth = el.innerWidth() - el[0].clientWidth; // the paddings cancel out, leaving the scrollbars          // 388\n\tvar widths = {                                                                                                        // 389\n\t\tleft: 0,                                                                                                             // 390\n\t\tright: 0,                                                                                                            // 391\n\t\ttop: 0,                                                                                                              // 392\n\t\tbottom: el.innerHeight() - el[0].clientHeight // the paddings cancel out, leaving the bottom scrollbar               // 393\n\t};                                                                                                                    // 394\n                                                                                                                       // 395\n\tif (getIsLeftRtlScrollbars() && el.css('direction') == 'rtl') { // is the scrollbar on the left side?                 // 396\n\t\twidths.left = leftRightWidth;                                                                                        // 397\n\t}                                                                                                                     // 398\n\telse {                                                                                                                // 399\n\t\twidths.right = leftRightWidth;                                                                                       // 400\n\t}                                                                                                                     // 401\n                                                                                                                       // 402\n\treturn widths;                                                                                                        // 403\n}                                                                                                                      // 404\n                                                                                                                       // 405\n                                                                                                                       // 406\n// Logic for determining if, when the element is right-to-left, the scrollbar appears on the left side                 // 407\n                                                                                                                       // 408\nvar _isLeftRtlScrollbars = null;                                                                                       // 409\n                                                                                                                       // 410\nfunction getIsLeftRtlScrollbars() { // responsible for caching the computation                                         // 411\n\tif (_isLeftRtlScrollbars === null) {                                                                                  // 412\n\t\t_isLeftRtlScrollbars = computeIsLeftRtlScrollbars();                                                                 // 413\n\t}                                                                                                                     // 414\n\treturn _isLeftRtlScrollbars;                                                                                          // 415\n}                                                                                                                      // 416\n                                                                                                                       // 417\nfunction computeIsLeftRtlScrollbars() { // creates an offscreen test element, then removes it                          // 418\n\tvar el = $('<div><div/></div>')                                                                                       // 419\n\t\t.css({                                                                                                               // 420\n\t\t\tposition: 'absolute',                                                                                               // 421\n\t\t\ttop: -1000,                                                                                                         // 422\n\t\t\tleft: 0,                                                                                                            // 423\n\t\t\tborder: 0,                                                                                                          // 424\n\t\t\tpadding: 0,                                                                                                         // 425\n\t\t\toverflow: 'scroll',                                                                                                 // 426\n\t\t\tdirection: 'rtl'                                                                                                    // 427\n\t\t})                                                                                                                   // 428\n\t\t.appendTo('body');                                                                                                   // 429\n\tvar innerEl = el.children();                                                                                          // 430\n\tvar res = innerEl.offset().left > el.offset().left; // is the inner div shifted to accommodate a left scrollbar?      // 431\n\tel.remove();                                                                                                          // 432\n\treturn res;                                                                                                           // 433\n}                                                                                                                      // 434\n                                                                                                                       // 435\n                                                                                                                       // 436\n// Retrieves a jQuery element's computed CSS value as a floating-point number.                                         // 437\n// If the queried value is non-numeric (ex: IE can return \"medium\" for border width), will just return zero.           // 438\nfunction getCssFloat(el, prop) {                                                                                       // 439\n\treturn parseFloat(el.css(prop)) || 0;                                                                                 // 440\n}                                                                                                                      // 441\n                                                                                                                       // 442\n                                                                                                                       // 443\n// Returns a boolean whether this was a left mouse click and no ctrl key (which means right click on Mac)              // 444\nfunction isPrimaryMouseButton(ev) {                                                                                    // 445\n\treturn ev.which == 1 && !ev.ctrlKey;                                                                                  // 446\n}                                                                                                                      // 447\n                                                                                                                       // 448\n                                                                                                                       // 449\n/* Geometry                                                                                                            // 450\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 452\n                                                                                                                       // 453\n// Returns a new rectangle that is the intersection of the two rectangles. If they don't intersect, returns false      // 454\nfunction intersectRects(rect1, rect2) {                                                                                // 455\n\tvar res = {                                                                                                           // 456\n\t\tleft: Math.max(rect1.left, rect2.left),                                                                              // 457\n\t\tright: Math.min(rect1.right, rect2.right),                                                                           // 458\n\t\ttop: Math.max(rect1.top, rect2.top),                                                                                 // 459\n\t\tbottom: Math.min(rect1.bottom, rect2.bottom)                                                                         // 460\n\t};                                                                                                                    // 461\n                                                                                                                       // 462\n\tif (res.left < res.right && res.top < res.bottom) {                                                                   // 463\n\t\treturn res;                                                                                                          // 464\n\t}                                                                                                                     // 465\n\treturn false;                                                                                                         // 466\n}                                                                                                                      // 467\n                                                                                                                       // 468\n                                                                                                                       // 469\n// Returns a new point that will have been moved to reside within the given rectangle                                  // 470\nfunction constrainPoint(point, rect) {                                                                                 // 471\n\treturn {                                                                                                              // 472\n\t\tleft: Math.min(Math.max(point.left, rect.left), rect.right),                                                         // 473\n\t\ttop: Math.min(Math.max(point.top, rect.top), rect.bottom)                                                            // 474\n\t};                                                                                                                    // 475\n}                                                                                                                      // 476\n                                                                                                                       // 477\n                                                                                                                       // 478\n// Returns a point that is the center of the given rectangle                                                           // 479\nfunction getRectCenter(rect) {                                                                                         // 480\n\treturn {                                                                                                              // 481\n\t\tleft: (rect.left + rect.right) / 2,                                                                                  // 482\n\t\ttop: (rect.top + rect.bottom) / 2                                                                                    // 483\n\t};                                                                                                                    // 484\n}                                                                                                                      // 485\n                                                                                                                       // 486\n                                                                                                                       // 487\n// Subtracts point2's coordinates from point1's coordinates, returning a delta                                         // 488\nfunction diffPoints(point1, point2) {                                                                                  // 489\n\treturn {                                                                                                              // 490\n\t\tleft: point1.left - point2.left,                                                                                     // 491\n\t\ttop: point1.top - point2.top                                                                                         // 492\n\t};                                                                                                                    // 493\n}                                                                                                                      // 494\n                                                                                                                       // 495\n                                                                                                                       // 496\n/* FullCalendar-specific Misc Utilities                                                                                // 497\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 499\n                                                                                                                       // 500\n// Creates a basic segment with the intersection of the two ranges. Returns undefined if no intersection.              // 501\n// Expects all dates to be normalized to the same timezone beforehand.                                                 // 502\n// TODO: move to date section?                                                                                         // 503\nfunction intersectionToSeg(subjectRange, constraintRange) {                                                            // 504\n\tvar subjectStart = subjectRange.start;                                                                                // 505\n\tvar subjectEnd = subjectRange.end;                                                                                    // 506\n\tvar constraintStart = constraintRange.start;                                                                          // 507\n\tvar constraintEnd = constraintRange.end;                                                                              // 508\n\tvar segStart, segEnd;                                                                                                 // 509\n\tvar isStart, isEnd;                                                                                                   // 510\n                                                                                                                       // 511\n\tif (subjectEnd > constraintStart && subjectStart < constraintEnd) { // in bounds at all?                              // 512\n                                                                                                                       // 513\n\t\tif (subjectStart >= constraintStart) {                                                                               // 514\n\t\t\tsegStart = subjectStart.clone();                                                                                    // 515\n\t\t\tisStart = true;                                                                                                     // 516\n\t\t}                                                                                                                    // 517\n\t\telse {                                                                                                               // 518\n\t\t\tsegStart = constraintStart.clone();                                                                                 // 519\n\t\t\tisStart =  false;                                                                                                   // 520\n\t\t}                                                                                                                    // 521\n                                                                                                                       // 522\n\t\tif (subjectEnd <= constraintEnd) {                                                                                   // 523\n\t\t\tsegEnd = subjectEnd.clone();                                                                                        // 524\n\t\t\tisEnd = true;                                                                                                       // 525\n\t\t}                                                                                                                    // 526\n\t\telse {                                                                                                               // 527\n\t\t\tsegEnd = constraintEnd.clone();                                                                                     // 528\n\t\t\tisEnd = false;                                                                                                      // 529\n\t\t}                                                                                                                    // 530\n                                                                                                                       // 531\n\t\treturn {                                                                                                             // 532\n\t\t\tstart: segStart,                                                                                                    // 533\n\t\t\tend: segEnd,                                                                                                        // 534\n\t\t\tisStart: isStart,                                                                                                   // 535\n\t\t\tisEnd: isEnd                                                                                                        // 536\n\t\t};                                                                                                                   // 537\n\t}                                                                                                                     // 538\n}                                                                                                                      // 539\n                                                                                                                       // 540\n                                                                                                                       // 541\n/* Date Utilities                                                                                                      // 542\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 544\nfc.computeIntervalUnit = computeIntervalUnit;                                                                          // 545\nfc.durationHasTime = durationHasTime;                                                                                  // 546\n                                                                                                                       // 547\nvar dayIDs = [ 'sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat' ];                                                      // 548\nvar intervalUnits = [ 'year', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond' ];                     // 549\n                                                                                                                       // 550\n                                                                                                                       // 551\n// Diffs the two moments into a Duration where full-days are recorded first, then the remaining time.                  // 552\n// Moments will have their timezones normalized.                                                                       // 553\nfunction diffDayTime(a, b) {                                                                                           // 554\n\treturn moment.duration({                                                                                              // 555\n\t\tdays: a.clone().stripTime().diff(b.clone().stripTime(), 'days'),                                                     // 556\n\t\tms: a.time() - b.time() // time-of-day from day start. disregards timezone                                           // 557\n\t});                                                                                                                   // 558\n}                                                                                                                      // 559\n                                                                                                                       // 560\n                                                                                                                       // 561\n// Diffs the two moments via their start-of-day (regardless of timezone). Produces whole-day durations.                // 562\nfunction diffDay(a, b) {                                                                                               // 563\n\treturn moment.duration({                                                                                              // 564\n\t\tdays: a.clone().stripTime().diff(b.clone().stripTime(), 'days')                                                      // 565\n\t});                                                                                                                   // 566\n}                                                                                                                      // 567\n                                                                                                                       // 568\n                                                                                                                       // 569\n// Diffs two moments, producing a duration, made of a whole-unit-increment of the given unit. Uses rounding.           // 570\nfunction diffByUnit(a, b, unit) {                                                                                      // 571\n\treturn moment.duration(                                                                                               // 572\n\t\tMath.round(a.diff(b, unit, true)), // returnFloat=true                                                               // 573\n\t\tunit                                                                                                                 // 574\n\t);                                                                                                                    // 575\n}                                                                                                                      // 576\n                                                                                                                       // 577\n                                                                                                                       // 578\n// Computes the unit name of the largest whole-unit period of time.                                                    // 579\n// For example, 48 hours will be \"days\" whereas 49 hours will be \"hours\".                                              // 580\n// Accepts start/end, a range object, or an original duration object.                                                  // 581\nfunction computeIntervalUnit(start, end) {                                                                             // 582\n\tvar i, unit;                                                                                                          // 583\n\tvar val;                                                                                                              // 584\n                                                                                                                       // 585\n\tfor (i = 0; i < intervalUnits.length; i++) {                                                                          // 586\n\t\tunit = intervalUnits[i];                                                                                             // 587\n\t\tval = computeRangeAs(unit, start, end);                                                                              // 588\n                                                                                                                       // 589\n\t\tif (val >= 1 && isInt(val)) {                                                                                        // 590\n\t\t\tbreak;                                                                                                              // 591\n\t\t}                                                                                                                    // 592\n\t}                                                                                                                     // 593\n                                                                                                                       // 594\n\treturn unit; // will be \"milliseconds\" if nothing else matches                                                        // 595\n}                                                                                                                      // 596\n                                                                                                                       // 597\n                                                                                                                       // 598\n// Computes the number of units (like \"hours\") in the given range.                                                     // 599\n// Range can be a {start,end} object, separate start/end args, or a Duration.                                          // 600\n// Results are based on Moment's .as() and .diff() methods, so results can depend on internal handling                 // 601\n// of month-diffing logic (which tends to vary from version to version).                                               // 602\nfunction computeRangeAs(unit, start, end) {                                                                            // 603\n                                                                                                                       // 604\n\tif (end != null) { // given start, end                                                                                // 605\n\t\treturn end.diff(start, unit, true);                                                                                  // 606\n\t}                                                                                                                     // 607\n\telse if (moment.isDuration(start)) { // given duration                                                                // 608\n\t\treturn start.as(unit);                                                                                               // 609\n\t}                                                                                                                     // 610\n\telse { // given { start, end } range object                                                                           // 611\n\t\treturn start.end.diff(start.start, unit, true);                                                                      // 612\n\t}                                                                                                                     // 613\n}                                                                                                                      // 614\n                                                                                                                       // 615\n                                                                                                                       // 616\n// Returns a boolean about whether the given duration has any time parts (hours/minutes/seconds/ms)                    // 617\nfunction durationHasTime(dur) {                                                                                        // 618\n\treturn Boolean(dur.hours() || dur.minutes() || dur.seconds() || dur.milliseconds());                                  // 619\n}                                                                                                                      // 620\n                                                                                                                       // 621\n                                                                                                                       // 622\nfunction isNativeDate(input) {                                                                                         // 623\n\treturn  Object.prototype.toString.call(input) === '[object Date]' || input instanceof Date;                           // 624\n}                                                                                                                      // 625\n                                                                                                                       // 626\n                                                                                                                       // 627\n// Returns a boolean about whether the given input is a time string, like \"06:40:00\" or \"06:00\"                        // 628\nfunction isTimeString(str) {                                                                                           // 629\n\treturn /^\\d+\\:\\d+(?:\\:\\d+\\.?(?:\\d{3})?)?$/.test(str);                                                                 // 630\n}                                                                                                                      // 631\n                                                                                                                       // 632\n                                                                                                                       // 633\n/* General Utilities                                                                                                   // 634\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 636\nvar hasOwnPropMethod = {}.hasOwnProperty;                                                                              // 637\n                                                                                                                       // 638\n                                                                                                                       // 639\n// Create an object that has the given prototype. Just like Object.create                                              // 640\nfunction createObject(proto) {                                                                                         // 641\n\tvar f = function() {};                                                                                                // 642\n\tf.prototype = proto;                                                                                                  // 643\n\treturn new f();                                                                                                       // 644\n}                                                                                                                      // 645\n                                                                                                                       // 646\n                                                                                                                       // 647\nfunction copyOwnProps(src, dest) {                                                                                     // 648\n\tfor (var name in src) {                                                                                               // 649\n\t\tif (hasOwnProp(src, name)) {                                                                                         // 650\n\t\t\tdest[name] = src[name];                                                                                             // 651\n\t\t}                                                                                                                    // 652\n\t}                                                                                                                     // 653\n}                                                                                                                      // 654\n                                                                                                                       // 655\n                                                                                                                       // 656\n// Copies over certain methods with the same names as Object.prototype methods. Overcomes an IE<=8 bug:                // 657\n// https://developer.mozilla.org/en-US/docs/ECMAScript_DontEnum_attribute#JScript_DontEnum_Bug                         // 658\nfunction copyNativeMethods(src, dest) {                                                                                // 659\n\tvar names = [ 'constructor', 'toString', 'valueOf' ];                                                                 // 660\n\tvar i, name;                                                                                                          // 661\n                                                                                                                       // 662\n\tfor (i = 0; i < names.length; i++) {                                                                                  // 663\n\t\tname = names[i];                                                                                                     // 664\n                                                                                                                       // 665\n\t\tif (src[name] !== Object.prototype[name]) {                                                                          // 666\n\t\t\tdest[name] = src[name];                                                                                             // 667\n\t\t}                                                                                                                    // 668\n\t}                                                                                                                     // 669\n}                                                                                                                      // 670\n                                                                                                                       // 671\n                                                                                                                       // 672\nfunction hasOwnProp(obj, name) {                                                                                       // 673\n\treturn hasOwnPropMethod.call(obj, name);                                                                              // 674\n}                                                                                                                      // 675\n                                                                                                                       // 676\n                                                                                                                       // 677\n// Is the given value a non-object non-function value?                                                                 // 678\nfunction isAtomic(val) {                                                                                               // 679\n\treturn /undefined|null|boolean|number|string/.test($.type(val));                                                      // 680\n}                                                                                                                      // 681\n                                                                                                                       // 682\n                                                                                                                       // 683\nfunction applyAll(functions, thisObj, args) {                                                                          // 684\n\tif ($.isFunction(functions)) {                                                                                        // 685\n\t\tfunctions = [ functions ];                                                                                           // 686\n\t}                                                                                                                     // 687\n\tif (functions) {                                                                                                      // 688\n\t\tvar i;                                                                                                               // 689\n\t\tvar ret;                                                                                                             // 690\n\t\tfor (i=0; i<functions.length; i++) {                                                                                 // 691\n\t\t\tret = functions[i].apply(thisObj, args) || ret;                                                                     // 692\n\t\t}                                                                                                                    // 693\n\t\treturn ret;                                                                                                          // 694\n\t}                                                                                                                     // 695\n}                                                                                                                      // 696\n                                                                                                                       // 697\n                                                                                                                       // 698\nfunction firstDefined() {                                                                                              // 699\n\tfor (var i=0; i<arguments.length; i++) {                                                                              // 700\n\t\tif (arguments[i] !== undefined) {                                                                                    // 701\n\t\t\treturn arguments[i];                                                                                                // 702\n\t\t}                                                                                                                    // 703\n\t}                                                                                                                     // 704\n}                                                                                                                      // 705\n                                                                                                                       // 706\n                                                                                                                       // 707\nfunction htmlEscape(s) {                                                                                               // 708\n\treturn (s + '').replace(/&/g, '&amp;')                                                                                // 709\n\t\t.replace(/</g, '&lt;')                                                                                               // 710\n\t\t.replace(/>/g, '&gt;')                                                                                               // 711\n\t\t.replace(/'/g, '&#039;')                                                                                             // 712\n\t\t.replace(/\"/g, '&quot;')                                                                                             // 713\n\t\t.replace(/\\n/g, '<br />');                                                                                           // 714\n}                                                                                                                      // 715\n                                                                                                                       // 716\n                                                                                                                       // 717\nfunction stripHtmlEntities(text) {                                                                                     // 718\n\treturn text.replace(/&.*?;/g, '');                                                                                    // 719\n}                                                                                                                      // 720\n                                                                                                                       // 721\n                                                                                                                       // 722\n// Given a hash of CSS properties, returns a string of CSS.                                                            // 723\n// Uses property names as-is (no camel-case conversion). Will not make statements for null/undefined values.           // 724\nfunction cssToStr(cssProps) {                                                                                          // 725\n\tvar statements = [];                                                                                                  // 726\n                                                                                                                       // 727\n\t$.each(cssProps, function(name, val) {                                                                                // 728\n\t\tif (val != null) {                                                                                                   // 729\n\t\t\tstatements.push(name + ':' + val);                                                                                  // 730\n\t\t}                                                                                                                    // 731\n\t});                                                                                                                   // 732\n                                                                                                                       // 733\n\treturn statements.join(';');                                                                                          // 734\n}                                                                                                                      // 735\n                                                                                                                       // 736\n                                                                                                                       // 737\nfunction capitaliseFirstLetter(str) {                                                                                  // 738\n\treturn str.charAt(0).toUpperCase() + str.slice(1);                                                                    // 739\n}                                                                                                                      // 740\n                                                                                                                       // 741\n                                                                                                                       // 742\nfunction compareNumbers(a, b) { // for .sort()                                                                         // 743\n\treturn a - b;                                                                                                         // 744\n}                                                                                                                      // 745\n                                                                                                                       // 746\n                                                                                                                       // 747\nfunction isInt(n) {                                                                                                    // 748\n\treturn n % 1 === 0;                                                                                                   // 749\n}                                                                                                                      // 750\n                                                                                                                       // 751\n                                                                                                                       // 752\n// Returns a method bound to the given object context.                                                                 // 753\n// Just like one of the jQuery.proxy signatures, but without the undesired behavior of treating the same method with   // 754\n// different contexts as identical when binding/unbinding events.                                                      // 755\nfunction proxy(obj, methodName) {                                                                                      // 756\n\tvar method = obj[methodName];                                                                                         // 757\n                                                                                                                       // 758\n\treturn function() {                                                                                                   // 759\n\t\treturn method.apply(obj, arguments);                                                                                 // 760\n\t};                                                                                                                    // 761\n}                                                                                                                      // 762\n                                                                                                                       // 763\n                                                                                                                       // 764\n// Returns a function, that, as long as it continues to be invoked, will not                                           // 765\n// be triggered. The function will be called after it stops being called for                                           // 766\n// N milliseconds.                                                                                                     // 767\n// https://github.com/jashkenas/underscore/blob/1.6.0/underscore.js#L714                                               // 768\nfunction debounce(func, wait) {                                                                                        // 769\n\tvar timeoutId;                                                                                                        // 770\n\tvar args;                                                                                                             // 771\n\tvar context;                                                                                                          // 772\n\tvar timestamp; // of most recent call                                                                                 // 773\n\tvar later = function() {                                                                                              // 774\n\t\tvar last = +new Date() - timestamp;                                                                                  // 775\n\t\tif (last < wait && last > 0) {                                                                                       // 776\n\t\t\ttimeoutId = setTimeout(later, wait - last);                                                                         // 777\n\t\t}                                                                                                                    // 778\n\t\telse {                                                                                                               // 779\n\t\t\ttimeoutId = null;                                                                                                   // 780\n\t\t\tfunc.apply(context, args);                                                                                          // 781\n\t\t\tif (!timeoutId) {                                                                                                   // 782\n\t\t\t\tcontext = args = null;                                                                                             // 783\n\t\t\t}                                                                                                                   // 784\n\t\t}                                                                                                                    // 785\n\t};                                                                                                                    // 786\n                                                                                                                       // 787\n\treturn function() {                                                                                                   // 788\n\t\tcontext = this;                                                                                                      // 789\n\t\targs = arguments;                                                                                                    // 790\n\t\ttimestamp = +new Date();                                                                                             // 791\n\t\tif (!timeoutId) {                                                                                                    // 792\n\t\t\ttimeoutId = setTimeout(later, wait);                                                                                // 793\n\t\t}                                                                                                                    // 794\n\t};                                                                                                                    // 795\n}                                                                                                                      // 796\n                                                                                                                       // 797\n;;                                                                                                                     // 798\n                                                                                                                       // 799\nvar ambigDateOfMonthRegex = /^\\s*\\d{4}-\\d\\d$/;                                                                         // 800\nvar ambigTimeOrZoneRegex =                                                                                             // 801\n\t/^\\s*\\d{4}-(?:(\\d\\d-\\d\\d)|(W\\d\\d$)|(W\\d\\d-\\d)|(\\d\\d\\d))((T| )(\\d\\d(:\\d\\d(:\\d\\d(\\.\\d+)?)?)?)?)?$/;                     // 802\nvar newMomentProto = moment.fn; // where we will attach our new methods                                                // 803\nvar oldMomentProto = $.extend({}, newMomentProto); // copy of original moment methods                                  // 804\nvar allowValueOptimization;                                                                                            // 805\nvar setUTCValues; // function defined below                                                                            // 806\nvar setLocalValues; // function defined below                                                                          // 807\n                                                                                                                       // 808\n                                                                                                                       // 809\n// Creating                                                                                                            // 810\n// -------------------------------------------------------------------------------------------------                   // 811\n                                                                                                                       // 812\n// Creates a new moment, similar to the vanilla moment(...) constructor, but with                                      // 813\n// extra features (ambiguous time, enhanced formatting). When given an existing moment,                                // 814\n// it will function as a clone (and retain the zone of the moment). Anything else will                                 // 815\n// result in a moment in the local zone.                                                                               // 816\nfc.moment = function() {                                                                                               // 817\n\treturn makeMoment(arguments);                                                                                         // 818\n};                                                                                                                     // 819\n                                                                                                                       // 820\n// Sames as fc.moment, but forces the resulting moment to be in the UTC timezone.                                      // 821\nfc.moment.utc = function() {                                                                                           // 822\n\tvar mom = makeMoment(arguments, true);                                                                                // 823\n                                                                                                                       // 824\n\t// Force it into UTC because makeMoment doesn't guarantee it                                                          // 825\n\t// (if given a pre-existing moment for example)                                                                       // 826\n\tif (mom.hasTime()) { // don't give ambiguously-timed moments a UTC zone                                               // 827\n\t\tmom.utc();                                                                                                           // 828\n\t}                                                                                                                     // 829\n                                                                                                                       // 830\n\treturn mom;                                                                                                           // 831\n};                                                                                                                     // 832\n                                                                                                                       // 833\n// Same as fc.moment, but when given an ISO8601 string, the timezone offset is preserved.                              // 834\n// ISO8601 strings with no timezone offset will become ambiguously zoned.                                              // 835\nfc.moment.parseZone = function() {                                                                                     // 836\n\treturn makeMoment(arguments, true, true);                                                                             // 837\n};                                                                                                                     // 838\n                                                                                                                       // 839\n// Builds an enhanced moment from args. When given an existing moment, it clones. When given a                         // 840\n// native Date, or called with no arguments (the current time), the resulting moment will be local.                    // 841\n// Anything else needs to be \"parsed\" (a string or an array), and will be affected by:                                 // 842\n//    parseAsUTC - if there is no zone information, should we parse the input in UTC?                                  // 843\n//    parseZone - if there is zone information, should we force the zone of the moment?                                // 844\nfunction makeMoment(args, parseAsUTC, parseZone) {                                                                     // 845\n\tvar input = args[0];                                                                                                  // 846\n\tvar isSingleString = args.length == 1 && typeof input === 'string';                                                   // 847\n\tvar isAmbigTime;                                                                                                      // 848\n\tvar isAmbigZone;                                                                                                      // 849\n\tvar ambigMatch;                                                                                                       // 850\n\tvar mom;                                                                                                              // 851\n                                                                                                                       // 852\n\tif (moment.isMoment(input)) {                                                                                         // 853\n\t\tmom = moment.apply(null, args); // clone it                                                                          // 854\n\t\ttransferAmbigs(input, mom); // the ambig flags weren't transfered with the clone                                     // 855\n\t}                                                                                                                     // 856\n\telse if (isNativeDate(input) || input === undefined) {                                                                // 857\n\t\tmom = moment.apply(null, args); // will be local                                                                     // 858\n\t}                                                                                                                     // 859\n\telse { // \"parsing\" is required                                                                                       // 860\n\t\tisAmbigTime = false;                                                                                                 // 861\n\t\tisAmbigZone = false;                                                                                                 // 862\n                                                                                                                       // 863\n\t\tif (isSingleString) {                                                                                                // 864\n\t\t\tif (ambigDateOfMonthRegex.test(input)) {                                                                            // 865\n\t\t\t\t// accept strings like '2014-05', but convert to the first of the month                                            // 866\n\t\t\t\tinput += '-01';                                                                                                    // 867\n\t\t\t\targs = [ input ]; // for when we pass it on to moment's constructor                                                // 868\n\t\t\t\tisAmbigTime = true;                                                                                                // 869\n\t\t\t\tisAmbigZone = true;                                                                                                // 870\n\t\t\t}                                                                                                                   // 871\n\t\t\telse if ((ambigMatch = ambigTimeOrZoneRegex.exec(input))) {                                                         // 872\n\t\t\t\tisAmbigTime = !ambigMatch[5]; // no time part?                                                                     // 873\n\t\t\t\tisAmbigZone = true;                                                                                                // 874\n\t\t\t}                                                                                                                   // 875\n\t\t}                                                                                                                    // 876\n\t\telse if ($.isArray(input)) {                                                                                         // 877\n\t\t\t// arrays have no timezone information, so assume ambiguous zone                                                    // 878\n\t\t\tisAmbigZone = true;                                                                                                 // 879\n\t\t}                                                                                                                    // 880\n\t\t// otherwise, probably a string with a format                                                                        // 881\n                                                                                                                       // 882\n\t\tif (parseAsUTC || isAmbigTime) {                                                                                     // 883\n\t\t\tmom = moment.utc.apply(moment, args);                                                                               // 884\n\t\t}                                                                                                                    // 885\n\t\telse {                                                                                                               // 886\n\t\t\tmom = moment.apply(null, args);                                                                                     // 887\n\t\t}                                                                                                                    // 888\n                                                                                                                       // 889\n\t\tif (isAmbigTime) {                                                                                                   // 890\n\t\t\tmom._ambigTime = true;                                                                                              // 891\n\t\t\tmom._ambigZone = true; // ambiguous time always means ambiguous zone                                                // 892\n\t\t}                                                                                                                    // 893\n\t\telse if (parseZone) { // let's record the inputted zone somehow                                                      // 894\n\t\t\tif (isAmbigZone) {                                                                                                  // 895\n\t\t\t\tmom._ambigZone = true;                                                                                             // 896\n\t\t\t}                                                                                                                   // 897\n\t\t\telse if (isSingleString) {                                                                                          // 898\n\t\t\t\tif (mom.utcOffset) {                                                                                               // 899\n\t\t\t\t\tmom.utcOffset(input); // if not a valid zone, will assign UTC                                                     // 900\n\t\t\t\t}                                                                                                                  // 901\n\t\t\t\telse {                                                                                                             // 902\n\t\t\t\t\tmom.zone(input); // for moment-pre-2.9                                                                            // 903\n\t\t\t\t}                                                                                                                  // 904\n\t\t\t}                                                                                                                   // 905\n\t\t}                                                                                                                    // 906\n\t}                                                                                                                     // 907\n                                                                                                                       // 908\n\tmom._fullCalendar = true; // flag for extended functionality                                                          // 909\n                                                                                                                       // 910\n\treturn mom;                                                                                                           // 911\n}                                                                                                                      // 912\n                                                                                                                       // 913\n                                                                                                                       // 914\n// A clone method that works with the flags related to our enhanced functionality.                                     // 915\n// In the future, use moment.momentProperties                                                                          // 916\nnewMomentProto.clone = function() {                                                                                    // 917\n\tvar mom = oldMomentProto.clone.apply(this, arguments);                                                                // 918\n                                                                                                                       // 919\n\t// these flags weren't transfered with the clone                                                                      // 920\n\ttransferAmbigs(this, mom);                                                                                            // 921\n\tif (this._fullCalendar) {                                                                                             // 922\n\t\tmom._fullCalendar = true;                                                                                            // 923\n\t}                                                                                                                     // 924\n                                                                                                                       // 925\n\treturn mom;                                                                                                           // 926\n};                                                                                                                     // 927\n                                                                                                                       // 928\n                                                                                                                       // 929\n// Week Number                                                                                                         // 930\n// -------------------------------------------------------------------------------------------------                   // 931\n                                                                                                                       // 932\n                                                                                                                       // 933\n// Returns the week number, considering the locale's custom week number calcuation                                     // 934\n// `weeks` is an alias for `week`                                                                                      // 935\nnewMomentProto.week = newMomentProto.weeks = function(input) {                                                         // 936\n\tvar weekCalc = (this._locale || this._lang) // works pre-moment-2.8                                                   // 937\n\t\t._fullCalendar_weekCalc;                                                                                             // 938\n                                                                                                                       // 939\n\tif (input == null && typeof weekCalc === 'function') { // custom function only works for getter                       // 940\n\t\treturn weekCalc(this);                                                                                               // 941\n\t}                                                                                                                     // 942\n\telse if (weekCalc === 'ISO') {                                                                                        // 943\n\t\treturn oldMomentProto.isoWeek.apply(this, arguments); // ISO getter/setter                                           // 944\n\t}                                                                                                                     // 945\n                                                                                                                       // 946\n\treturn oldMomentProto.week.apply(this, arguments); // local getter/setter                                             // 947\n};                                                                                                                     // 948\n                                                                                                                       // 949\n                                                                                                                       // 950\n// Time-of-day                                                                                                         // 951\n// -------------------------------------------------------------------------------------------------                   // 952\n                                                                                                                       // 953\n// GETTER                                                                                                              // 954\n// Returns a Duration with the hours/minutes/seconds/ms values of the moment.                                          // 955\n// If the moment has an ambiguous time, a duration of 00:00 will be returned.                                          // 956\n//                                                                                                                     // 957\n// SETTER                                                                                                              // 958\n// You can supply a Duration, a Moment, or a Duration-like argument.                                                   // 959\n// When setting the time, and the moment has an ambiguous time, it then becomes unambiguous.                           // 960\nnewMomentProto.time = function(time) {                                                                                 // 961\n                                                                                                                       // 962\n\t// Fallback to the original method (if there is one) if this moment wasn't created via FullCalendar.                  // 963\n\t// `time` is a generic enough method name where this precaution is necessary to avoid collisions w/ other plugins.    // 964\n\tif (!this._fullCalendar) {                                                                                            // 965\n\t\treturn oldMomentProto.time.apply(this, arguments);                                                                   // 966\n\t}                                                                                                                     // 967\n                                                                                                                       // 968\n\tif (time == null) { // getter                                                                                         // 969\n\t\treturn moment.duration({                                                                                             // 970\n\t\t\thours: this.hours(),                                                                                                // 971\n\t\t\tminutes: this.minutes(),                                                                                            // 972\n\t\t\tseconds: this.seconds(),                                                                                            // 973\n\t\t\tmilliseconds: this.milliseconds()                                                                                   // 974\n\t\t});                                                                                                                  // 975\n\t}                                                                                                                     // 976\n\telse { // setter                                                                                                      // 977\n                                                                                                                       // 978\n\t\tthis._ambigTime = false; // mark that the moment now has a time                                                      // 979\n                                                                                                                       // 980\n\t\tif (!moment.isDuration(time) && !moment.isMoment(time)) {                                                            // 981\n\t\t\ttime = moment.duration(time);                                                                                       // 982\n\t\t}                                                                                                                    // 983\n                                                                                                                       // 984\n\t\t// The day value should cause overflow (so 24 hours becomes 00:00:00 of next day).                                   // 985\n\t\t// Only for Duration times, not Moment times.                                                                        // 986\n\t\tvar dayHours = 0;                                                                                                    // 987\n\t\tif (moment.isDuration(time)) {                                                                                       // 988\n\t\t\tdayHours = Math.floor(time.asDays()) * 24;                                                                          // 989\n\t\t}                                                                                                                    // 990\n                                                                                                                       // 991\n\t\t// We need to set the individual fields.                                                                             // 992\n\t\t// Can't use startOf('day') then add duration. In case of DST at start of day.                                       // 993\n\t\treturn this.hours(dayHours + time.hours())                                                                           // 994\n\t\t\t.minutes(time.minutes())                                                                                            // 995\n\t\t\t.seconds(time.seconds())                                                                                            // 996\n\t\t\t.milliseconds(time.milliseconds());                                                                                 // 997\n\t}                                                                                                                     // 998\n};                                                                                                                     // 999\n                                                                                                                       // 1000\n// Converts the moment to UTC, stripping out its time-of-day and timezone offset,                                      // 1001\n// but preserving its YMD. A moment with a stripped time will display no time                                          // 1002\n// nor timezone offset when .format() is called.                                                                       // 1003\nnewMomentProto.stripTime = function() {                                                                                // 1004\n\tvar a;                                                                                                                // 1005\n                                                                                                                       // 1006\n\tif (!this._ambigTime) {                                                                                               // 1007\n                                                                                                                       // 1008\n\t\t// get the values before any conversion happens                                                                      // 1009\n\t\ta = this.toArray(); // array of y/m/d/h/m/s/ms                                                                       // 1010\n                                                                                                                       // 1011\n\t\t// TODO: use keepLocalTime in the future                                                                             // 1012\n\t\tthis.utc(); // set the internal UTC flag (will clear the ambig flags)                                                // 1013\n\t\tsetUTCValues(this, a.slice(0, 3)); // set the year/month/date. time will be zero                                     // 1014\n                                                                                                                       // 1015\n\t\t// Mark the time as ambiguous. This needs to happen after the .utc() call, which might call .utcOffset(),            // 1016\n\t\t// which clears all ambig flags. Same with setUTCValues with moment-timezone.                                        // 1017\n\t\tthis._ambigTime = true;                                                                                              // 1018\n\t\tthis._ambigZone = true; // if ambiguous time, also ambiguous timezone offset                                         // 1019\n\t}                                                                                                                     // 1020\n                                                                                                                       // 1021\n\treturn this; // for chaining                                                                                          // 1022\n};                                                                                                                     // 1023\n                                                                                                                       // 1024\n// Returns if the moment has a non-ambiguous time (boolean)                                                            // 1025\nnewMomentProto.hasTime = function() {                                                                                  // 1026\n\treturn !this._ambigTime;                                                                                              // 1027\n};                                                                                                                     // 1028\n                                                                                                                       // 1029\n                                                                                                                       // 1030\n// Timezone                                                                                                            // 1031\n// -------------------------------------------------------------------------------------------------                   // 1032\n                                                                                                                       // 1033\n// Converts the moment to UTC, stripping out its timezone offset, but preserving its                                   // 1034\n// YMD and time-of-day. A moment with a stripped timezone offset will display no                                       // 1035\n// timezone offset when .format() is called.                                                                           // 1036\n// TODO: look into Moment's keepLocalTime functionality                                                                // 1037\nnewMomentProto.stripZone = function() {                                                                                // 1038\n\tvar a, wasAmbigTime;                                                                                                  // 1039\n                                                                                                                       // 1040\n\tif (!this._ambigZone) {                                                                                               // 1041\n                                                                                                                       // 1042\n\t\t// get the values before any conversion happens                                                                      // 1043\n\t\ta = this.toArray(); // array of y/m/d/h/m/s/ms                                                                       // 1044\n\t\twasAmbigTime = this._ambigTime;                                                                                      // 1045\n                                                                                                                       // 1046\n\t\tthis.utc(); // set the internal UTC flag (might clear the ambig flags, depending on Moment internals)                // 1047\n\t\tsetUTCValues(this, a); // will set the year/month/date/hours/minutes/seconds/ms                                      // 1048\n                                                                                                                       // 1049\n\t\t// the above call to .utc()/.utcOffset() unfortunately might clear the ambig flags, so restore                       // 1050\n\t\tthis._ambigTime = wasAmbigTime || false;                                                                             // 1051\n                                                                                                                       // 1052\n\t\t// Mark the zone as ambiguous. This needs to happen after the .utc() call, which might call .utcOffset(),            // 1053\n\t\t// which clears the ambig flags. Same with setUTCValues with moment-timezone.                                        // 1054\n\t\tthis._ambigZone = true;                                                                                              // 1055\n\t}                                                                                                                     // 1056\n                                                                                                                       // 1057\n\treturn this; // for chaining                                                                                          // 1058\n};                                                                                                                     // 1059\n                                                                                                                       // 1060\n// Returns of the moment has a non-ambiguous timezone offset (boolean)                                                 // 1061\nnewMomentProto.hasZone = function() {                                                                                  // 1062\n\treturn !this._ambigZone;                                                                                              // 1063\n};                                                                                                                     // 1064\n                                                                                                                       // 1065\n                                                                                                                       // 1066\n// this method implicitly marks a zone                                                                                 // 1067\nnewMomentProto.local = function() {                                                                                    // 1068\n\tvar a = this.toArray(); // year,month,date,hours,minutes,seconds,ms as an array                                       // 1069\n\tvar wasAmbigZone = this._ambigZone;                                                                                   // 1070\n                                                                                                                       // 1071\n\toldMomentProto.local.apply(this, arguments);                                                                          // 1072\n                                                                                                                       // 1073\n\t// ensure non-ambiguous                                                                                               // 1074\n\t// this probably already happened via local() -> utcOffset(), but don't rely on Moment's internals                    // 1075\n\tthis._ambigTime = false;                                                                                              // 1076\n\tthis._ambigZone = false;                                                                                              // 1077\n                                                                                                                       // 1078\n\tif (wasAmbigZone) {                                                                                                   // 1079\n\t\t// If the moment was ambiguously zoned, the date fields were stored as UTC.                                          // 1080\n\t\t// We want to preserve these, but in local time.                                                                     // 1081\n\t\t// TODO: look into Moment's keepLocalTime functionality                                                              // 1082\n\t\tsetLocalValues(this, a);                                                                                             // 1083\n\t}                                                                                                                     // 1084\n                                                                                                                       // 1085\n\treturn this; // for chaining                                                                                          // 1086\n};                                                                                                                     // 1087\n                                                                                                                       // 1088\n                                                                                                                       // 1089\n// implicitly marks a zone                                                                                             // 1090\nnewMomentProto.utc = function() {                                                                                      // 1091\n\toldMomentProto.utc.apply(this, arguments);                                                                            // 1092\n                                                                                                                       // 1093\n\t// ensure non-ambiguous                                                                                               // 1094\n\t// this probably already happened via utc() -> utcOffset(), but don't rely on Moment's internals                      // 1095\n\tthis._ambigTime = false;                                                                                              // 1096\n\tthis._ambigZone = false;                                                                                              // 1097\n                                                                                                                       // 1098\n\treturn this;                                                                                                          // 1099\n};                                                                                                                     // 1100\n                                                                                                                       // 1101\n                                                                                                                       // 1102\n// methods for arbitrarily manipulating timezone offset.                                                               // 1103\n// should clear time/zone ambiguity when called.                                                                       // 1104\n$.each([                                                                                                               // 1105\n\t'zone', // only in moment-pre-2.9. deprecated afterwards                                                              // 1106\n\t'utcOffset'                                                                                                           // 1107\n], function(i, name) {                                                                                                 // 1108\n\tif (oldMomentProto[name]) { // original method exists?                                                                // 1109\n                                                                                                                       // 1110\n\t\t// this method implicitly marks a zone (will probably get called upon .utc() and .local())                           // 1111\n\t\tnewMomentProto[name] = function(tzo) {                                                                               // 1112\n                                                                                                                       // 1113\n\t\t\tif (tzo != null) { // setter                                                                                        // 1114\n\t\t\t\t// these assignments needs to happen before the original zone method is called.                                    // 1115\n\t\t\t\t// I forget why, something to do with a browser crash.                                                             // 1116\n\t\t\t\tthis._ambigTime = false;                                                                                           // 1117\n\t\t\t\tthis._ambigZone = false;                                                                                           // 1118\n\t\t\t}                                                                                                                   // 1119\n                                                                                                                       // 1120\n\t\t\treturn oldMomentProto[name].apply(this, arguments);                                                                 // 1121\n\t\t};                                                                                                                   // 1122\n\t}                                                                                                                     // 1123\n});                                                                                                                    // 1124\n                                                                                                                       // 1125\n                                                                                                                       // 1126\n// Formatting                                                                                                          // 1127\n// -------------------------------------------------------------------------------------------------                   // 1128\n                                                                                                                       // 1129\nnewMomentProto.format = function() {                                                                                   // 1130\n\tif (this._fullCalendar && arguments[0]) { // an enhanced moment? and a format string provided?                        // 1131\n\t\treturn formatDate(this, arguments[0]); // our extended formatting                                                    // 1132\n\t}                                                                                                                     // 1133\n\tif (this._ambigTime) {                                                                                                // 1134\n\t\treturn oldMomentFormat(this, 'YYYY-MM-DD');                                                                          // 1135\n\t}                                                                                                                     // 1136\n\tif (this._ambigZone) {                                                                                                // 1137\n\t\treturn oldMomentFormat(this, 'YYYY-MM-DD[T]HH:mm:ss');                                                               // 1138\n\t}                                                                                                                     // 1139\n\treturn oldMomentProto.format.apply(this, arguments);                                                                  // 1140\n};                                                                                                                     // 1141\n                                                                                                                       // 1142\nnewMomentProto.toISOString = function() {                                                                              // 1143\n\tif (this._ambigTime) {                                                                                                // 1144\n\t\treturn oldMomentFormat(this, 'YYYY-MM-DD');                                                                          // 1145\n\t}                                                                                                                     // 1146\n\tif (this._ambigZone) {                                                                                                // 1147\n\t\treturn oldMomentFormat(this, 'YYYY-MM-DD[T]HH:mm:ss');                                                               // 1148\n\t}                                                                                                                     // 1149\n\treturn oldMomentProto.toISOString.apply(this, arguments);                                                             // 1150\n};                                                                                                                     // 1151\n                                                                                                                       // 1152\n                                                                                                                       // 1153\n// Querying                                                                                                            // 1154\n// -------------------------------------------------------------------------------------------------                   // 1155\n                                                                                                                       // 1156\n// Is the moment within the specified range? `end` is exclusive.                                                       // 1157\n// FYI, this method is not a standard Moment method, so always do our enhanced logic.                                  // 1158\nnewMomentProto.isWithin = function(start, end) {                                                                       // 1159\n\tvar a = commonlyAmbiguate([ this, start, end ]);                                                                      // 1160\n\treturn a[0] >= a[1] && a[0] < a[2];                                                                                   // 1161\n};                                                                                                                     // 1162\n                                                                                                                       // 1163\n// When isSame is called with units, timezone ambiguity is normalized before the comparison happens.                   // 1164\n// If no units specified, the two moments must be identically the same, with matching ambig flags.                     // 1165\nnewMomentProto.isSame = function(input, units) {                                                                       // 1166\n\tvar a;                                                                                                                // 1167\n                                                                                                                       // 1168\n\t// only do custom logic if this is an enhanced moment                                                                 // 1169\n\tif (!this._fullCalendar) {                                                                                            // 1170\n\t\treturn oldMomentProto.isSame.apply(this, arguments);                                                                 // 1171\n\t}                                                                                                                     // 1172\n                                                                                                                       // 1173\n\tif (units) {                                                                                                          // 1174\n\t\ta = commonlyAmbiguate([ this, input ], true); // normalize timezones but don't erase times                           // 1175\n\t\treturn oldMomentProto.isSame.call(a[0], a[1], units);                                                                // 1176\n\t}                                                                                                                     // 1177\n\telse {                                                                                                                // 1178\n\t\tinput = fc.moment.parseZone(input); // normalize input                                                               // 1179\n\t\treturn oldMomentProto.isSame.call(this, input) &&                                                                    // 1180\n\t\t\tBoolean(this._ambigTime) === Boolean(input._ambigTime) &&                                                           // 1181\n\t\t\tBoolean(this._ambigZone) === Boolean(input._ambigZone);                                                             // 1182\n\t}                                                                                                                     // 1183\n};                                                                                                                     // 1184\n                                                                                                                       // 1185\n// Make these query methods work with ambiguous moments                                                                // 1186\n$.each([                                                                                                               // 1187\n\t'isBefore',                                                                                                           // 1188\n\t'isAfter'                                                                                                             // 1189\n], function(i, methodName) {                                                                                           // 1190\n\tnewMomentProto[methodName] = function(input, units) {                                                                 // 1191\n\t\tvar a;                                                                                                               // 1192\n                                                                                                                       // 1193\n\t\t// only do custom logic if this is an enhanced moment                                                                // 1194\n\t\tif (!this._fullCalendar) {                                                                                           // 1195\n\t\t\treturn oldMomentProto[methodName].apply(this, arguments);                                                           // 1196\n\t\t}                                                                                                                    // 1197\n                                                                                                                       // 1198\n\t\ta = commonlyAmbiguate([ this, input ]);                                                                              // 1199\n\t\treturn oldMomentProto[methodName].call(a[0], a[1], units);                                                           // 1200\n\t};                                                                                                                    // 1201\n});                                                                                                                    // 1202\n                                                                                                                       // 1203\n                                                                                                                       // 1204\n// Misc Internals                                                                                                      // 1205\n// -------------------------------------------------------------------------------------------------                   // 1206\n                                                                                                                       // 1207\n// given an array of moment-like inputs, return a parallel array w/ moments similarly ambiguated.                      // 1208\n// for example, of one moment has ambig time, but not others, all moments will have their time stripped.               // 1209\n// set `preserveTime` to `true` to keep times, but only normalize zone ambiguity.                                      // 1210\n// returns the original moments if no modifications are necessary.                                                     // 1211\nfunction commonlyAmbiguate(inputs, preserveTime) {                                                                     // 1212\n\tvar anyAmbigTime = false;                                                                                             // 1213\n\tvar anyAmbigZone = false;                                                                                             // 1214\n\tvar len = inputs.length;                                                                                              // 1215\n\tvar moms = [];                                                                                                        // 1216\n\tvar i, mom;                                                                                                           // 1217\n                                                                                                                       // 1218\n\t// parse inputs into real moments and query their ambig flags                                                         // 1219\n\tfor (i = 0; i < len; i++) {                                                                                           // 1220\n\t\tmom = inputs[i];                                                                                                     // 1221\n\t\tif (!moment.isMoment(mom)) {                                                                                         // 1222\n\t\t\tmom = fc.moment.parseZone(mom);                                                                                     // 1223\n\t\t}                                                                                                                    // 1224\n\t\tanyAmbigTime = anyAmbigTime || mom._ambigTime;                                                                       // 1225\n\t\tanyAmbigZone = anyAmbigZone || mom._ambigZone;                                                                       // 1226\n\t\tmoms.push(mom);                                                                                                      // 1227\n\t}                                                                                                                     // 1228\n                                                                                                                       // 1229\n\t// strip each moment down to lowest common ambiguity                                                                  // 1230\n\t// use clones to avoid modifying the original moments                                                                 // 1231\n\tfor (i = 0; i < len; i++) {                                                                                           // 1232\n\t\tmom = moms[i];                                                                                                       // 1233\n\t\tif (!preserveTime && anyAmbigTime && !mom._ambigTime) {                                                              // 1234\n\t\t\tmoms[i] = mom.clone().stripTime();                                                                                  // 1235\n\t\t}                                                                                                                    // 1236\n\t\telse if (anyAmbigZone && !mom._ambigZone) {                                                                          // 1237\n\t\t\tmoms[i] = mom.clone().stripZone();                                                                                  // 1238\n\t\t}                                                                                                                    // 1239\n\t}                                                                                                                     // 1240\n                                                                                                                       // 1241\n\treturn moms;                                                                                                          // 1242\n}                                                                                                                      // 1243\n                                                                                                                       // 1244\n// Transfers all the flags related to ambiguous time/zone from the `src` moment to the `dest` moment                   // 1245\n// TODO: look into moment.momentProperties for this.                                                                   // 1246\nfunction transferAmbigs(src, dest) {                                                                                   // 1247\n\tif (src._ambigTime) {                                                                                                 // 1248\n\t\tdest._ambigTime = true;                                                                                              // 1249\n\t}                                                                                                                     // 1250\n\telse if (dest._ambigTime) {                                                                                           // 1251\n\t\tdest._ambigTime = false;                                                                                             // 1252\n\t}                                                                                                                     // 1253\n                                                                                                                       // 1254\n\tif (src._ambigZone) {                                                                                                 // 1255\n\t\tdest._ambigZone = true;                                                                                              // 1256\n\t}                                                                                                                     // 1257\n\telse if (dest._ambigZone) {                                                                                           // 1258\n\t\tdest._ambigZone = false;                                                                                             // 1259\n\t}                                                                                                                     // 1260\n}                                                                                                                      // 1261\n                                                                                                                       // 1262\n                                                                                                                       // 1263\n// Sets the year/month/date/etc values of the moment from the given array.                                             // 1264\n// Inefficient because it calls each individual setter.                                                                // 1265\nfunction setMomentValues(mom, a) {                                                                                     // 1266\n\tmom.year(a[0] || 0)                                                                                                   // 1267\n\t\t.month(a[1] || 0)                                                                                                    // 1268\n\t\t.date(a[2] || 0)                                                                                                     // 1269\n\t\t.hours(a[3] || 0)                                                                                                    // 1270\n\t\t.minutes(a[4] || 0)                                                                                                  // 1271\n\t\t.seconds(a[5] || 0)                                                                                                  // 1272\n\t\t.milliseconds(a[6] || 0);                                                                                            // 1273\n}                                                                                                                      // 1274\n                                                                                                                       // 1275\n// Can we set the moment's internal date directly?                                                                     // 1276\nallowValueOptimization = '_d' in moment() && 'updateOffset' in moment;                                                 // 1277\n                                                                                                                       // 1278\n// Utility function. Accepts a moment and an array of the UTC year/month/date/etc values to set.                       // 1279\n// Assumes the given moment is already in UTC mode.                                                                    // 1280\nsetUTCValues = allowValueOptimization ? function(mom, a) {                                                             // 1281\n\t// simlate what moment's accessors do                                                                                 // 1282\n\tmom._d.setTime(Date.UTC.apply(Date, a));                                                                              // 1283\n\tmoment.updateOffset(mom, false); // keepTime=false                                                                    // 1284\n} : setMomentValues;                                                                                                   // 1285\n                                                                                                                       // 1286\n// Utility function. Accepts a moment and an array of the local year/month/date/etc values to set.                     // 1287\n// Assumes the given moment is already in local mode.                                                                  // 1288\nsetLocalValues = allowValueOptimization ? function(mom, a) {                                                           // 1289\n\t// simlate what moment's accessors do                                                                                 // 1290\n\tmom._d.setTime(+new Date( // FYI, there is now way to apply an array of args to a constructor                         // 1291\n\t\ta[0] || 0,                                                                                                           // 1292\n\t\ta[1] || 0,                                                                                                           // 1293\n\t\ta[2] || 0,                                                                                                           // 1294\n\t\ta[3] || 0,                                                                                                           // 1295\n\t\ta[4] || 0,                                                                                                           // 1296\n\t\ta[5] || 0,                                                                                                           // 1297\n\t\ta[6] || 0                                                                                                            // 1298\n\t));                                                                                                                   // 1299\n\tmoment.updateOffset(mom, false); // keepTime=false                                                                    // 1300\n} : setMomentValues;                                                                                                   // 1301\n                                                                                                                       // 1302\n;;                                                                                                                     // 1303\n                                                                                                                       // 1304\n// Single Date Formatting                                                                                              // 1305\n// -------------------------------------------------------------------------------------------------                   // 1306\n                                                                                                                       // 1307\n                                                                                                                       // 1308\n// call this if you want Moment's original format method to be used                                                    // 1309\nfunction oldMomentFormat(mom, formatStr) {                                                                             // 1310\n\treturn oldMomentProto.format.call(mom, formatStr); // oldMomentProto defined in moment-ext.js                         // 1311\n}                                                                                                                      // 1312\n                                                                                                                       // 1313\n                                                                                                                       // 1314\n// Formats `date` with a Moment formatting string, but allow our non-zero areas and                                    // 1315\n// additional token.                                                                                                   // 1316\nfunction formatDate(date, formatStr) {                                                                                 // 1317\n\treturn formatDateWithChunks(date, getFormatStringChunks(formatStr));                                                  // 1318\n}                                                                                                                      // 1319\n                                                                                                                       // 1320\n                                                                                                                       // 1321\nfunction formatDateWithChunks(date, chunks) {                                                                          // 1322\n\tvar s = '';                                                                                                           // 1323\n\tvar i;                                                                                                                // 1324\n                                                                                                                       // 1325\n\tfor (i=0; i<chunks.length; i++) {                                                                                     // 1326\n\t\ts += formatDateWithChunk(date, chunks[i]);                                                                           // 1327\n\t}                                                                                                                     // 1328\n                                                                                                                       // 1329\n\treturn s;                                                                                                             // 1330\n}                                                                                                                      // 1331\n                                                                                                                       // 1332\n                                                                                                                       // 1333\n// addition formatting tokens we want recognized                                                                       // 1334\nvar tokenOverrides = {                                                                                                 // 1335\n\tt: function(date) { // \"a\" or \"p\"                                                                                     // 1336\n\t\treturn oldMomentFormat(date, 'a').charAt(0);                                                                         // 1337\n\t},                                                                                                                    // 1338\n\tT: function(date) { // \"A\" or \"P\"                                                                                     // 1339\n\t\treturn oldMomentFormat(date, 'A').charAt(0);                                                                         // 1340\n\t}                                                                                                                     // 1341\n};                                                                                                                     // 1342\n                                                                                                                       // 1343\n                                                                                                                       // 1344\nfunction formatDateWithChunk(date, chunk) {                                                                            // 1345\n\tvar token;                                                                                                            // 1346\n\tvar maybeStr;                                                                                                         // 1347\n                                                                                                                       // 1348\n\tif (typeof chunk === 'string') { // a literal string                                                                  // 1349\n\t\treturn chunk;                                                                                                        // 1350\n\t}                                                                                                                     // 1351\n\telse if ((token = chunk.token)) { // a token, like \"YYYY\"                                                             // 1352\n\t\tif (tokenOverrides[token]) {                                                                                         // 1353\n\t\t\treturn tokenOverrides[token](date); // use our custom token                                                         // 1354\n\t\t}                                                                                                                    // 1355\n\t\treturn oldMomentFormat(date, token);                                                                                 // 1356\n\t}                                                                                                                     // 1357\n\telse if (chunk.maybe) { // a grouping of other chunks that must be non-zero                                           // 1358\n\t\tmaybeStr = formatDateWithChunks(date, chunk.maybe);                                                                  // 1359\n\t\tif (maybeStr.match(/[1-9]/)) {                                                                                       // 1360\n\t\t\treturn maybeStr;                                                                                                    // 1361\n\t\t}                                                                                                                    // 1362\n\t}                                                                                                                     // 1363\n                                                                                                                       // 1364\n\treturn '';                                                                                                            // 1365\n}                                                                                                                      // 1366\n                                                                                                                       // 1367\n                                                                                                                       // 1368\n// Date Range Formatting                                                                                               // 1369\n// -------------------------------------------------------------------------------------------------                   // 1370\n// TODO: make it work with timezone offset                                                                             // 1371\n                                                                                                                       // 1372\n// Using a formatting string meant for a single date, generate a range string, like                                    // 1373\n// \"Sep 2 - 9 2013\", that intelligently inserts a separator where the dates differ.                                    // 1374\n// If the dates are the same as far as the format string is concerned, just return a single                            // 1375\n// rendering of one date, without any separator.                                                                       // 1376\nfunction formatRange(date1, date2, formatStr, separator, isRTL) {                                                      // 1377\n\tvar localeData;                                                                                                       // 1378\n                                                                                                                       // 1379\n\tdate1 = fc.moment.parseZone(date1);                                                                                   // 1380\n\tdate2 = fc.moment.parseZone(date2);                                                                                   // 1381\n                                                                                                                       // 1382\n\tlocaleData = (date1.localeData || date1.lang).call(date1); // works with moment-pre-2.8                               // 1383\n                                                                                                                       // 1384\n\t// Expand localized format strings, like \"LL\" -> \"MMMM D YYYY\"                                                        // 1385\n\tformatStr = localeData.longDateFormat(formatStr) || formatStr;                                                        // 1386\n\t// BTW, this is not important for `formatDate` because it is impossible to put custom tokens                          // 1387\n\t// or non-zero areas in Moment's localized format strings.                                                            // 1388\n                                                                                                                       // 1389\n\tseparator = separator || ' - ';                                                                                       // 1390\n                                                                                                                       // 1391\n\treturn formatRangeWithChunks(                                                                                         // 1392\n\t\tdate1,                                                                                                               // 1393\n\t\tdate2,                                                                                                               // 1394\n\t\tgetFormatStringChunks(formatStr),                                                                                    // 1395\n\t\tseparator,                                                                                                           // 1396\n\t\tisRTL                                                                                                                // 1397\n\t);                                                                                                                    // 1398\n}                                                                                                                      // 1399\nfc.formatRange = formatRange; // expose                                                                                // 1400\n                                                                                                                       // 1401\n                                                                                                                       // 1402\nfunction formatRangeWithChunks(date1, date2, chunks, separator, isRTL) {                                               // 1403\n\tvar chunkStr; // the rendering of the chunk                                                                           // 1404\n\tvar leftI;                                                                                                            // 1405\n\tvar leftStr = '';                                                                                                     // 1406\n\tvar rightI;                                                                                                           // 1407\n\tvar rightStr = '';                                                                                                    // 1408\n\tvar middleI;                                                                                                          // 1409\n\tvar middleStr1 = '';                                                                                                  // 1410\n\tvar middleStr2 = '';                                                                                                  // 1411\n\tvar middleStr = '';                                                                                                   // 1412\n                                                                                                                       // 1413\n\t// Start at the leftmost side of the formatting string and continue until you hit a token                             // 1414\n\t// that is not the same between dates.                                                                                // 1415\n\tfor (leftI=0; leftI<chunks.length; leftI++) {                                                                         // 1416\n\t\tchunkStr = formatSimilarChunk(date1, date2, chunks[leftI]);                                                          // 1417\n\t\tif (chunkStr === false) {                                                                                            // 1418\n\t\t\tbreak;                                                                                                              // 1419\n\t\t}                                                                                                                    // 1420\n\t\tleftStr += chunkStr;                                                                                                 // 1421\n\t}                                                                                                                     // 1422\n                                                                                                                       // 1423\n\t// Similarly, start at the rightmost side of the formatting string and move left                                      // 1424\n\tfor (rightI=chunks.length-1; rightI>leftI; rightI--) {                                                                // 1425\n\t\tchunkStr = formatSimilarChunk(date1, date2, chunks[rightI]);                                                         // 1426\n\t\tif (chunkStr === false) {                                                                                            // 1427\n\t\t\tbreak;                                                                                                              // 1428\n\t\t}                                                                                                                    // 1429\n\t\trightStr = chunkStr + rightStr;                                                                                      // 1430\n\t}                                                                                                                     // 1431\n                                                                                                                       // 1432\n\t// The area in the middle is different for both of the dates.                                                         // 1433\n\t// Collect them distinctly so we can jam them together later.                                                         // 1434\n\tfor (middleI=leftI; middleI<=rightI; middleI++) {                                                                     // 1435\n\t\tmiddleStr1 += formatDateWithChunk(date1, chunks[middleI]);                                                           // 1436\n\t\tmiddleStr2 += formatDateWithChunk(date2, chunks[middleI]);                                                           // 1437\n\t}                                                                                                                     // 1438\n                                                                                                                       // 1439\n\tif (middleStr1 || middleStr2) {                                                                                       // 1440\n\t\tif (isRTL) {                                                                                                         // 1441\n\t\t\tmiddleStr = middleStr2 + separator + middleStr1;                                                                    // 1442\n\t\t}                                                                                                                    // 1443\n\t\telse {                                                                                                               // 1444\n\t\t\tmiddleStr = middleStr1 + separator + middleStr2;                                                                    // 1445\n\t\t}                                                                                                                    // 1446\n\t}                                                                                                                     // 1447\n                                                                                                                       // 1448\n\treturn leftStr + middleStr + rightStr;                                                                                // 1449\n}                                                                                                                      // 1450\n                                                                                                                       // 1451\n                                                                                                                       // 1452\nvar similarUnitMap = {                                                                                                 // 1453\n\tY: 'year',                                                                                                            // 1454\n\tM: 'month',                                                                                                           // 1455\n\tD: 'day', // day of month                                                                                             // 1456\n\td: 'day', // day of week                                                                                              // 1457\n\t// prevents a separator between anything time-related...                                                              // 1458\n\tA: 'second', // AM/PM                                                                                                 // 1459\n\ta: 'second', // am/pm                                                                                                 // 1460\n\tT: 'second', // A/P                                                                                                   // 1461\n\tt: 'second', // a/p                                                                                                   // 1462\n\tH: 'second', // hour (24)                                                                                             // 1463\n\th: 'second', // hour (12)                                                                                             // 1464\n\tm: 'second', // minute                                                                                                // 1465\n\ts: 'second' // second                                                                                                 // 1466\n};                                                                                                                     // 1467\n// TODO: week maybe?                                                                                                   // 1468\n                                                                                                                       // 1469\n                                                                                                                       // 1470\n// Given a formatting chunk, and given that both dates are similar in the regard the                                   // 1471\n// formatting chunk is concerned, format date1 against `chunk`. Otherwise, return `false`.                             // 1472\nfunction formatSimilarChunk(date1, date2, chunk) {                                                                     // 1473\n\tvar token;                                                                                                            // 1474\n\tvar unit;                                                                                                             // 1475\n                                                                                                                       // 1476\n\tif (typeof chunk === 'string') { // a literal string                                                                  // 1477\n\t\treturn chunk;                                                                                                        // 1478\n\t}                                                                                                                     // 1479\n\telse if ((token = chunk.token)) {                                                                                     // 1480\n\t\tunit = similarUnitMap[token.charAt(0)];                                                                              // 1481\n\t\t// are the dates the same for this unit of measurement?                                                              // 1482\n\t\tif (unit && date1.isSame(date2, unit)) {                                                                             // 1483\n\t\t\treturn oldMomentFormat(date1, token); // would be the same if we used `date2`                                       // 1484\n\t\t\t// BTW, don't support custom tokens                                                                                 // 1485\n\t\t}                                                                                                                    // 1486\n\t}                                                                                                                     // 1487\n                                                                                                                       // 1488\n\treturn false; // the chunk is NOT the same for the two dates                                                          // 1489\n\t// BTW, don't support splitting on non-zero areas                                                                     // 1490\n}                                                                                                                      // 1491\n                                                                                                                       // 1492\n                                                                                                                       // 1493\n// Chunking Utils                                                                                                      // 1494\n// -------------------------------------------------------------------------------------------------                   // 1495\n                                                                                                                       // 1496\n                                                                                                                       // 1497\nvar formatStringChunkCache = {};                                                                                       // 1498\n                                                                                                                       // 1499\n                                                                                                                       // 1500\nfunction getFormatStringChunks(formatStr) {                                                                            // 1501\n\tif (formatStr in formatStringChunkCache) {                                                                            // 1502\n\t\treturn formatStringChunkCache[formatStr];                                                                            // 1503\n\t}                                                                                                                     // 1504\n\treturn (formatStringChunkCache[formatStr] = chunkFormatString(formatStr));                                            // 1505\n}                                                                                                                      // 1506\n                                                                                                                       // 1507\n                                                                                                                       // 1508\n// Break the formatting string into an array of chunks                                                                 // 1509\nfunction chunkFormatString(formatStr) {                                                                                // 1510\n\tvar chunks = [];                                                                                                      // 1511\n\tvar chunker = /\\[([^\\]]*)\\]|\\(([^\\)]*)\\)|(LTS|LT|(\\w)\\4*o?)|([^\\w\\[\\(]+)/g; // TODO: more descrimination              // 1512\n\tvar match;                                                                                                            // 1513\n                                                                                                                       // 1514\n\twhile ((match = chunker.exec(formatStr))) {                                                                           // 1515\n\t\tif (match[1]) { // a literal string inside [ ... ]                                                                   // 1516\n\t\t\tchunks.push(match[1]);                                                                                              // 1517\n\t\t}                                                                                                                    // 1518\n\t\telse if (match[2]) { // non-zero formatting inside ( ... )                                                           // 1519\n\t\t\tchunks.push({ maybe: chunkFormatString(match[2]) });                                                                // 1520\n\t\t}                                                                                                                    // 1521\n\t\telse if (match[3]) { // a formatting token                                                                           // 1522\n\t\t\tchunks.push({ token: match[3] });                                                                                   // 1523\n\t\t}                                                                                                                    // 1524\n\t\telse if (match[5]) { // an unenclosed literal string                                                                 // 1525\n\t\t\tchunks.push(match[5]);                                                                                              // 1526\n\t\t}                                                                                                                    // 1527\n\t}                                                                                                                     // 1528\n                                                                                                                       // 1529\n\treturn chunks;                                                                                                        // 1530\n}                                                                                                                      // 1531\n                                                                                                                       // 1532\n;;                                                                                                                     // 1533\n                                                                                                                       // 1534\nfc.Class = Class; // export                                                                                            // 1535\n                                                                                                                       // 1536\n// class that all other classes will inherit from                                                                      // 1537\nfunction Class() { }                                                                                                   // 1538\n                                                                                                                       // 1539\n// called upon a class to create a subclass                                                                            // 1540\nClass.extend = function(members) {                                                                                     // 1541\n\tvar superClass = this;                                                                                                // 1542\n\tvar subClass;                                                                                                         // 1543\n                                                                                                                       // 1544\n\tmembers = members || {};                                                                                              // 1545\n                                                                                                                       // 1546\n\t// ensure a constructor for the subclass, forwarding all arguments to the super-constructor if it doesn't exist       // 1547\n\tif (hasOwnProp(members, 'constructor')) {                                                                             // 1548\n\t\tsubClass = members.constructor;                                                                                      // 1549\n\t}                                                                                                                     // 1550\n\tif (typeof subClass !== 'function') {                                                                                 // 1551\n\t\tsubClass = members.constructor = function() {                                                                        // 1552\n\t\t\tsuperClass.apply(this, arguments);                                                                                  // 1553\n\t\t};                                                                                                                   // 1554\n\t}                                                                                                                     // 1555\n                                                                                                                       // 1556\n\t// build the base prototype for the subclass, which is an new object chained to the superclass's prototype            // 1557\n\tsubClass.prototype = createObject(superClass.prototype);                                                              // 1558\n                                                                                                                       // 1559\n\t// copy each member variable/method onto the the subclass's prototype                                                 // 1560\n\tcopyOwnProps(members, subClass.prototype);                                                                            // 1561\n\tcopyNativeMethods(members, subClass.prototype); // hack for IE8                                                       // 1562\n                                                                                                                       // 1563\n\t// copy over all class variables/methods to the subclass, such as `extend` and `mixin`                                // 1564\n\tcopyOwnProps(superClass, subClass);                                                                                   // 1565\n                                                                                                                       // 1566\n\treturn subClass;                                                                                                      // 1567\n};                                                                                                                     // 1568\n                                                                                                                       // 1569\n// adds new member variables/methods to the class's prototype.                                                         // 1570\n// can be called with another class, or a plain object hash containing new members.                                    // 1571\nClass.mixin = function(members) {                                                                                      // 1572\n\tcopyOwnProps(members.prototype || members, this.prototype);                                                           // 1573\n};                                                                                                                     // 1574\n;;                                                                                                                     // 1575\n                                                                                                                       // 1576\n/* A rectangular panel that is absolutely positioned over other content                                                // 1577\n------------------------------------------------------------------------------------------------------------------------\nOptions:                                                                                                               // 1579\n\t- className (string)                                                                                                  // 1580\n\t- content (HTML string or jQuery element set)                                                                         // 1581\n\t- parentEl                                                                                                            // 1582\n\t- top                                                                                                                 // 1583\n\t- left                                                                                                                // 1584\n\t- right (the x coord of where the right edge should be. not a \"CSS\" right)                                            // 1585\n\t- autoHide (boolean)                                                                                                  // 1586\n\t- show (callback)                                                                                                     // 1587\n\t- hide (callback)                                                                                                     // 1588\n*/                                                                                                                     // 1589\n                                                                                                                       // 1590\nvar Popover = Class.extend({                                                                                           // 1591\n                                                                                                                       // 1592\n\tisHidden: true,                                                                                                       // 1593\n\toptions: null,                                                                                                        // 1594\n\tel: null, // the container element for the popover. generated by this object                                          // 1595\n\tdocumentMousedownProxy: null, // document mousedown handler bound to `this`                                           // 1596\n\tmargin: 10, // the space required between the popover and the edges of the scroll container                           // 1597\n                                                                                                                       // 1598\n                                                                                                                       // 1599\n\tconstructor: function(options) {                                                                                      // 1600\n\t\tthis.options = options || {};                                                                                        // 1601\n\t},                                                                                                                    // 1602\n                                                                                                                       // 1603\n                                                                                                                       // 1604\n\t// Shows the popover on the specified position. Renders it if not already                                             // 1605\n\tshow: function() {                                                                                                    // 1606\n\t\tif (this.isHidden) {                                                                                                 // 1607\n\t\t\tif (!this.el) {                                                                                                     // 1608\n\t\t\t\tthis.render();                                                                                                     // 1609\n\t\t\t}                                                                                                                   // 1610\n\t\t\tthis.el.show();                                                                                                     // 1611\n\t\t\tthis.position();                                                                                                    // 1612\n\t\t\tthis.isHidden = false;                                                                                              // 1613\n\t\t\tthis.trigger('show');                                                                                               // 1614\n\t\t}                                                                                                                    // 1615\n\t},                                                                                                                    // 1616\n                                                                                                                       // 1617\n                                                                                                                       // 1618\n\t// Hides the popover, through CSS, but does not remove it from the DOM                                                // 1619\n\thide: function() {                                                                                                    // 1620\n\t\tif (!this.isHidden) {                                                                                                // 1621\n\t\t\tthis.el.hide();                                                                                                     // 1622\n\t\t\tthis.isHidden = true;                                                                                               // 1623\n\t\t\tthis.trigger('hide');                                                                                               // 1624\n\t\t}                                                                                                                    // 1625\n\t},                                                                                                                    // 1626\n                                                                                                                       // 1627\n                                                                                                                       // 1628\n\t// Creates `this.el` and renders content inside of it                                                                 // 1629\n\trender: function() {                                                                                                  // 1630\n\t\tvar _this = this;                                                                                                    // 1631\n\t\tvar options = this.options;                                                                                          // 1632\n                                                                                                                       // 1633\n\t\tthis.el = $('<div class=\"fc-popover\"/>')                                                                             // 1634\n\t\t\t.addClass(options.className || '')                                                                                  // 1635\n\t\t\t.css({                                                                                                              // 1636\n\t\t\t\t// position initially to the top left to avoid creating scrollbars                                                 // 1637\n\t\t\t\ttop: 0,                                                                                                            // 1638\n\t\t\t\tleft: 0                                                                                                            // 1639\n\t\t\t})                                                                                                                  // 1640\n\t\t\t.append(options.content)                                                                                            // 1641\n\t\t\t.appendTo(options.parentEl);                                                                                        // 1642\n                                                                                                                       // 1643\n\t\t// when a click happens on anything inside with a 'fc-close' className, hide the popover                             // 1644\n\t\tthis.el.on('click', '.fc-close', function() {                                                                        // 1645\n\t\t\t_this.hide();                                                                                                       // 1646\n\t\t});                                                                                                                  // 1647\n                                                                                                                       // 1648\n\t\tif (options.autoHide) {                                                                                              // 1649\n\t\t\t$(document).on('mousedown', this.documentMousedownProxy = proxy(this, 'documentMousedown'));                        // 1650\n\t\t}                                                                                                                    // 1651\n\t},                                                                                                                    // 1652\n                                                                                                                       // 1653\n                                                                                                                       // 1654\n\t// Triggered when the user clicks *anywhere* in the document, for the autoHide feature                                // 1655\n\tdocumentMousedown: function(ev) {                                                                                     // 1656\n\t\t// only hide the popover if the click happened outside the popover                                                   // 1657\n\t\tif (this.el && !$(ev.target).closest(this.el).length) {                                                              // 1658\n\t\t\tthis.hide();                                                                                                        // 1659\n\t\t}                                                                                                                    // 1660\n\t},                                                                                                                    // 1661\n                                                                                                                       // 1662\n                                                                                                                       // 1663\n\t// Hides and unregisters any handlers                                                                                 // 1664\n\tdestroy: function() {                                                                                                 // 1665\n\t\tthis.hide();                                                                                                         // 1666\n                                                                                                                       // 1667\n\t\tif (this.el) {                                                                                                       // 1668\n\t\t\tthis.el.remove();                                                                                                   // 1669\n\t\t\tthis.el = null;                                                                                                     // 1670\n\t\t}                                                                                                                    // 1671\n                                                                                                                       // 1672\n\t\t$(document).off('mousedown', this.documentMousedownProxy);                                                           // 1673\n\t},                                                                                                                    // 1674\n                                                                                                                       // 1675\n                                                                                                                       // 1676\n\t// Positions the popover optimally, using the top/left/right options                                                  // 1677\n\tposition: function() {                                                                                                // 1678\n\t\tvar options = this.options;                                                                                          // 1679\n\t\tvar origin = this.el.offsetParent().offset();                                                                        // 1680\n\t\tvar width = this.el.outerWidth();                                                                                    // 1681\n\t\tvar height = this.el.outerHeight();                                                                                  // 1682\n\t\tvar windowEl = $(window);                                                                                            // 1683\n\t\tvar viewportEl = getScrollParent(this.el);                                                                           // 1684\n\t\tvar viewportTop;                                                                                                     // 1685\n\t\tvar viewportLeft;                                                                                                    // 1686\n\t\tvar viewportOffset;                                                                                                  // 1687\n\t\tvar top; // the \"position\" (not \"offset\") values for the popover                                                     // 1688\n\t\tvar left; //                                                                                                         // 1689\n                                                                                                                       // 1690\n\t\t// compute top and left                                                                                              // 1691\n\t\ttop = options.top || 0;                                                                                              // 1692\n\t\tif (options.left !== undefined) {                                                                                    // 1693\n\t\t\tleft = options.left;                                                                                                // 1694\n\t\t}                                                                                                                    // 1695\n\t\telse if (options.right !== undefined) {                                                                              // 1696\n\t\t\tleft = options.right - width; // derive the left value from the right value                                         // 1697\n\t\t}                                                                                                                    // 1698\n\t\telse {                                                                                                               // 1699\n\t\t\tleft = 0;                                                                                                           // 1700\n\t\t}                                                                                                                    // 1701\n                                                                                                                       // 1702\n\t\tif (viewportEl.is(window) || viewportEl.is(document)) { // normalize getScrollParent's result                        // 1703\n\t\t\tviewportEl = windowEl;                                                                                              // 1704\n\t\t\tviewportTop = 0; // the window is always at the top left                                                            // 1705\n\t\t\tviewportLeft = 0; // (and .offset() won't work if called here)                                                      // 1706\n\t\t}                                                                                                                    // 1707\n\t\telse {                                                                                                               // 1708\n\t\t\tviewportOffset = viewportEl.offset();                                                                               // 1709\n\t\t\tviewportTop = viewportOffset.top;                                                                                   // 1710\n\t\t\tviewportLeft = viewportOffset.left;                                                                                 // 1711\n\t\t}                                                                                                                    // 1712\n                                                                                                                       // 1713\n\t\t// if the window is scrolled, it causes the visible area to be further down                                          // 1714\n\t\tviewportTop += windowEl.scrollTop();                                                                                 // 1715\n\t\tviewportLeft += windowEl.scrollLeft();                                                                               // 1716\n                                                                                                                       // 1717\n\t\t// constrain to the view port. if constrained by two edges, give precedence to top/left                              // 1718\n\t\tif (options.viewportConstrain !== false) {                                                                           // 1719\n\t\t\ttop = Math.min(top, viewportTop + viewportEl.outerHeight() - height - this.margin);                                 // 1720\n\t\t\ttop = Math.max(top, viewportTop + this.margin);                                                                     // 1721\n\t\t\tleft = Math.min(left, viewportLeft + viewportEl.outerWidth() - width - this.margin);                                // 1722\n\t\t\tleft = Math.max(left, viewportLeft + this.margin);                                                                  // 1723\n\t\t}                                                                                                                    // 1724\n                                                                                                                       // 1725\n\t\tthis.el.css({                                                                                                        // 1726\n\t\t\ttop: top - origin.top,                                                                                              // 1727\n\t\t\tleft: left - origin.left                                                                                            // 1728\n\t\t});                                                                                                                  // 1729\n\t},                                                                                                                    // 1730\n                                                                                                                       // 1731\n                                                                                                                       // 1732\n\t// Triggers a callback. Calls a function in the option hash of the same name.                                         // 1733\n\t// Arguments beyond the first `name` are forwarded on.                                                                // 1734\n\t// TODO: better code reuse for this. Repeat code                                                                      // 1735\n\ttrigger: function(name) {                                                                                             // 1736\n\t\tif (this.options[name]) {                                                                                            // 1737\n\t\t\tthis.options[name].apply(this, Array.prototype.slice.call(arguments, 1));                                           // 1738\n\t\t}                                                                                                                    // 1739\n\t}                                                                                                                     // 1740\n                                                                                                                       // 1741\n});                                                                                                                    // 1742\n                                                                                                                       // 1743\n;;                                                                                                                     // 1744\n                                                                                                                       // 1745\n/* A \"coordinate map\" converts pixel coordinates into an associated cell, which has an associated date                 // 1746\n------------------------------------------------------------------------------------------------------------------------\nCommon interface:                                                                                                      // 1748\n                                                                                                                       // 1749\n\tCoordMap.prototype = {                                                                                                // 1750\n\t\tbuild: function() {},                                                                                                // 1751\n\t\tgetCell: function(x, y) {}                                                                                           // 1752\n\t};                                                                                                                    // 1753\n                                                                                                                       // 1754\n*/                                                                                                                     // 1755\n                                                                                                                       // 1756\n/* Coordinate map for a grid component                                                                                 // 1757\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 1759\nvar GridCoordMap = Class.extend({                                                                                      // 1760\n                                                                                                                       // 1761\n\tgrid: null, // reference to the Grid                                                                                  // 1762\n\trowCoords: null, // array of {top,bottom} objects                                                                     // 1763\n\tcolCoords: null, // array of {left,right} objects                                                                     // 1764\n                                                                                                                       // 1765\n\tcontainerEl: null, // container element that all coordinates are constrained to. optionally assigned                  // 1766\n\tbounds: null,                                                                                                         // 1767\n                                                                                                                       // 1768\n                                                                                                                       // 1769\n\tconstructor: function(grid) {                                                                                         // 1770\n\t\tthis.grid = grid;                                                                                                    // 1771\n\t},                                                                                                                    // 1772\n                                                                                                                       // 1773\n                                                                                                                       // 1774\n\t// Queries the grid for the coordinates of all the cells                                                              // 1775\n\tbuild: function() {                                                                                                   // 1776\n\t\tthis.rowCoords = this.grid.computeRowCoords();                                                                       // 1777\n\t\tthis.colCoords = this.grid.computeColCoords();                                                                       // 1778\n\t\tthis.computeBounds();                                                                                                // 1779\n\t},                                                                                                                    // 1780\n                                                                                                                       // 1781\n                                                                                                                       // 1782\n\t// Clears the coordinates data to free up memory                                                                      // 1783\n\tclear: function() {                                                                                                   // 1784\n\t\tthis.rowCoords = null;                                                                                               // 1785\n\t\tthis.colCoords = null;                                                                                               // 1786\n\t},                                                                                                                    // 1787\n                                                                                                                       // 1788\n                                                                                                                       // 1789\n\t// Given a coordinate of the document, gets the associated cell. If no cell is underneath, returns null               // 1790\n\tgetCell: function(x, y) {                                                                                             // 1791\n\t\tvar rowCoords = this.rowCoords;                                                                                      // 1792\n\t\tvar rowCnt = rowCoords.length;                                                                                       // 1793\n\t\tvar colCoords = this.colCoords;                                                                                      // 1794\n\t\tvar colCnt = colCoords.length;                                                                                       // 1795\n\t\tvar hitRow = null;                                                                                                   // 1796\n\t\tvar hitCol = null;                                                                                                   // 1797\n\t\tvar i, coords;                                                                                                       // 1798\n\t\tvar cell;                                                                                                            // 1799\n                                                                                                                       // 1800\n\t\tif (this.inBounds(x, y)) {                                                                                           // 1801\n                                                                                                                       // 1802\n\t\t\tfor (i = 0; i < rowCnt; i++) {                                                                                      // 1803\n\t\t\t\tcoords = rowCoords[i];                                                                                             // 1804\n\t\t\t\tif (y >= coords.top && y < coords.bottom) {                                                                        // 1805\n\t\t\t\t\thitRow = i;                                                                                                       // 1806\n\t\t\t\t\tbreak;                                                                                                            // 1807\n\t\t\t\t}                                                                                                                  // 1808\n\t\t\t}                                                                                                                   // 1809\n                                                                                                                       // 1810\n\t\t\tfor (i = 0; i < colCnt; i++) {                                                                                      // 1811\n\t\t\t\tcoords = colCoords[i];                                                                                             // 1812\n\t\t\t\tif (x >= coords.left && x < coords.right) {                                                                        // 1813\n\t\t\t\t\thitCol = i;                                                                                                       // 1814\n\t\t\t\t\tbreak;                                                                                                            // 1815\n\t\t\t\t}                                                                                                                  // 1816\n\t\t\t}                                                                                                                   // 1817\n                                                                                                                       // 1818\n\t\t\tif (hitRow !== null && hitCol !== null) {                                                                           // 1819\n                                                                                                                       // 1820\n\t\t\t\tcell = this.grid.getCell(hitRow, hitCol); // expected to return a fresh object we can modify                       // 1821\n\t\t\t\tcell.grid = this.grid; // for CellDragListener's isCellsEqual. dragging between grids                              // 1822\n                                                                                                                       // 1823\n\t\t\t\t// make the coordinates available on the cell object                                                               // 1824\n\t\t\t\t$.extend(cell, rowCoords[hitRow], colCoords[hitCol]);                                                              // 1825\n                                                                                                                       // 1826\n\t\t\t\treturn cell;                                                                                                       // 1827\n\t\t\t}                                                                                                                   // 1828\n\t\t}                                                                                                                    // 1829\n                                                                                                                       // 1830\n\t\treturn null;                                                                                                         // 1831\n\t},                                                                                                                    // 1832\n                                                                                                                       // 1833\n                                                                                                                       // 1834\n\t// If there is a containerEl, compute the bounds into min/max values                                                  // 1835\n\tcomputeBounds: function() {                                                                                           // 1836\n\t\tthis.bounds = this.containerEl ?                                                                                     // 1837\n\t\t\tgetClientRect(this.containerEl) : // area within scrollbars                                                         // 1838\n\t\t\tnull;                                                                                                               // 1839\n\t},                                                                                                                    // 1840\n                                                                                                                       // 1841\n                                                                                                                       // 1842\n\t// Determines if the given coordinates are in bounds. If no `containerEl`, always true                                // 1843\n\tinBounds: function(x, y) {                                                                                            // 1844\n\t\tvar bounds = this.bounds;                                                                                            // 1845\n                                                                                                                       // 1846\n\t\tif (bounds) {                                                                                                        // 1847\n\t\t\treturn x >= bounds.left && x < bounds.right && y >= bounds.top && y < bounds.bottom;                                // 1848\n\t\t}                                                                                                                    // 1849\n                                                                                                                       // 1850\n\t\treturn true;                                                                                                         // 1851\n\t}                                                                                                                     // 1852\n                                                                                                                       // 1853\n});                                                                                                                    // 1854\n                                                                                                                       // 1855\n                                                                                                                       // 1856\n/* Coordinate map that is a combination of multiple other coordinate maps                                              // 1857\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 1859\nvar ComboCoordMap = Class.extend({                                                                                     // 1860\n                                                                                                                       // 1861\n\tcoordMaps: null, // an array of CoordMaps                                                                             // 1862\n                                                                                                                       // 1863\n                                                                                                                       // 1864\n\tconstructor: function(coordMaps) {                                                                                    // 1865\n\t\tthis.coordMaps = coordMaps;                                                                                          // 1866\n\t},                                                                                                                    // 1867\n                                                                                                                       // 1868\n                                                                                                                       // 1869\n\t// Builds all coordMaps                                                                                               // 1870\n\tbuild: function() {                                                                                                   // 1871\n\t\tvar coordMaps = this.coordMaps;                                                                                      // 1872\n\t\tvar i;                                                                                                               // 1873\n                                                                                                                       // 1874\n\t\tfor (i = 0; i < coordMaps.length; i++) {                                                                             // 1875\n\t\t\tcoordMaps[i].build();                                                                                               // 1876\n\t\t}                                                                                                                    // 1877\n\t},                                                                                                                    // 1878\n                                                                                                                       // 1879\n                                                                                                                       // 1880\n\t// Queries all coordMaps for the cell underneath the given coordinates, returning the first result                    // 1881\n\tgetCell: function(x, y) {                                                                                             // 1882\n\t\tvar coordMaps = this.coordMaps;                                                                                      // 1883\n\t\tvar cell = null;                                                                                                     // 1884\n\t\tvar i;                                                                                                               // 1885\n                                                                                                                       // 1886\n\t\tfor (i = 0; i < coordMaps.length && !cell; i++) {                                                                    // 1887\n\t\t\tcell = coordMaps[i].getCell(x, y);                                                                                  // 1888\n\t\t}                                                                                                                    // 1889\n                                                                                                                       // 1890\n\t\treturn cell;                                                                                                         // 1891\n\t},                                                                                                                    // 1892\n                                                                                                                       // 1893\n                                                                                                                       // 1894\n\t// Clears all coordMaps                                                                                               // 1895\n\tclear: function() {                                                                                                   // 1896\n\t\tvar coordMaps = this.coordMaps;                                                                                      // 1897\n\t\tvar i;                                                                                                               // 1898\n                                                                                                                       // 1899\n\t\tfor (i = 0; i < coordMaps.length; i++) {                                                                             // 1900\n\t\t\tcoordMaps[i].clear();                                                                                               // 1901\n\t\t}                                                                                                                    // 1902\n\t}                                                                                                                     // 1903\n                                                                                                                       // 1904\n});                                                                                                                    // 1905\n                                                                                                                       // 1906\n;;                                                                                                                     // 1907\n                                                                                                                       // 1908\n/* Tracks a drag's mouse movement, firing various handlers                                                             // 1909\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 1911\nvar DragListener = fc.DragListener = Class.extend({                                                                    // 1912\n                                                                                                                       // 1913\n\toptions: null,                                                                                                        // 1914\n                                                                                                                       // 1915\n\tisListening: false,                                                                                                   // 1916\n\tisDragging: false,                                                                                                    // 1917\n                                                                                                                       // 1918\n\t// coordinates of the initial mousedown                                                                               // 1919\n\toriginX: null,                                                                                                        // 1920\n\toriginY: null,                                                                                                        // 1921\n                                                                                                                       // 1922\n\t// handler attached to the document, bound to the DragListener's `this`                                               // 1923\n\tmousemoveProxy: null,                                                                                                 // 1924\n\tmouseupProxy: null,                                                                                                   // 1925\n                                                                                                                       // 1926\n\t// for IE8 bug-fighting behavior, for now                                                                             // 1927\n\tsubjectEl: null, // the element being draged. optional                                                                // 1928\n\tsubjectHref: null,                                                                                                    // 1929\n                                                                                                                       // 1930\n\tscrollEl: null,                                                                                                       // 1931\n\tscrollBounds: null, // { top, bottom, left, right }                                                                   // 1932\n\tscrollTopVel: null, // pixels per second                                                                              // 1933\n\tscrollLeftVel: null, // pixels per second                                                                             // 1934\n\tscrollIntervalId: null, // ID of setTimeout for scrolling animation loop                                              // 1935\n\tscrollHandlerProxy: null, // this-scoped function for handling when scrollEl is scrolled                              // 1936\n                                                                                                                       // 1937\n\tscrollSensitivity: 30, // pixels from edge for scrolling to start                                                     // 1938\n\tscrollSpeed: 200, // pixels per second, at maximum speed                                                              // 1939\n\tscrollIntervalMs: 50, // millisecond wait between scroll increment                                                    // 1940\n                                                                                                                       // 1941\n                                                                                                                       // 1942\n\tconstructor: function(options) {                                                                                      // 1943\n\t\toptions = options || {};                                                                                             // 1944\n\t\tthis.options = options;                                                                                              // 1945\n\t\tthis.subjectEl = options.subjectEl;                                                                                  // 1946\n\t},                                                                                                                    // 1947\n                                                                                                                       // 1948\n                                                                                                                       // 1949\n\t// Call this when the user does a mousedown. Will probably lead to startListening                                     // 1950\n\tmousedown: function(ev) {                                                                                             // 1951\n\t\tif (isPrimaryMouseButton(ev)) {                                                                                      // 1952\n                                                                                                                       // 1953\n\t\t\tev.preventDefault(); // prevents native selection in most browsers                                                  // 1954\n                                                                                                                       // 1955\n\t\t\tthis.startListening(ev);                                                                                            // 1956\n                                                                                                                       // 1957\n\t\t\t// start the drag immediately if there is no minimum distance for a drag start                                      // 1958\n\t\t\tif (!this.options.distance) {                                                                                       // 1959\n\t\t\t\tthis.startDrag(ev);                                                                                                // 1960\n\t\t\t}                                                                                                                   // 1961\n\t\t}                                                                                                                    // 1962\n\t},                                                                                                                    // 1963\n                                                                                                                       // 1964\n                                                                                                                       // 1965\n\t// Call this to start tracking mouse movements                                                                        // 1966\n\tstartListening: function(ev) {                                                                                        // 1967\n\t\tvar scrollParent;                                                                                                    // 1968\n                                                                                                                       // 1969\n\t\tif (!this.isListening) {                                                                                             // 1970\n                                                                                                                       // 1971\n\t\t\t// grab scroll container and attach handler                                                                         // 1972\n\t\t\tif (ev && this.options.scroll) {                                                                                    // 1973\n\t\t\t\tscrollParent = getScrollParent($(ev.target));                                                                      // 1974\n\t\t\t\tif (!scrollParent.is(window) && !scrollParent.is(document)) {                                                      // 1975\n\t\t\t\t\tthis.scrollEl = scrollParent;                                                                                     // 1976\n                                                                                                                       // 1977\n\t\t\t\t\t// scope to `this`, and use `debounce` to make sure rapid calls don't happen                                      // 1978\n\t\t\t\t\tthis.scrollHandlerProxy = debounce(proxy(this, 'scrollHandler'), 100);                                            // 1979\n\t\t\t\t\tthis.scrollEl.on('scroll', this.scrollHandlerProxy);                                                              // 1980\n\t\t\t\t}                                                                                                                  // 1981\n\t\t\t}                                                                                                                   // 1982\n                                                                                                                       // 1983\n\t\t\t$(document)                                                                                                         // 1984\n\t\t\t\t.on('mousemove', this.mousemoveProxy = proxy(this, 'mousemove'))                                                   // 1985\n\t\t\t\t.on('mouseup', this.mouseupProxy = proxy(this, 'mouseup'))                                                         // 1986\n\t\t\t\t.on('selectstart', this.preventDefault); // prevents native selection in IE<=8                                     // 1987\n                                                                                                                       // 1988\n\t\t\tif (ev) {                                                                                                           // 1989\n\t\t\t\tthis.originX = ev.pageX;                                                                                           // 1990\n\t\t\t\tthis.originY = ev.pageY;                                                                                           // 1991\n\t\t\t}                                                                                                                   // 1992\n\t\t\telse {                                                                                                              // 1993\n\t\t\t\t// if no starting information was given, origin will be the topleft corner of the screen.                          // 1994\n\t\t\t\t// if so, dx/dy in the future will be the absolute coordinates.                                                    // 1995\n\t\t\t\tthis.originX = 0;                                                                                                  // 1996\n\t\t\t\tthis.originY = 0;                                                                                                  // 1997\n\t\t\t}                                                                                                                   // 1998\n                                                                                                                       // 1999\n\t\t\tthis.isListening = true;                                                                                            // 2000\n\t\t\tthis.listenStart(ev);                                                                                               // 2001\n\t\t}                                                                                                                    // 2002\n\t},                                                                                                                    // 2003\n                                                                                                                       // 2004\n                                                                                                                       // 2005\n\t// Called when drag listening has started (but a real drag has not necessarily began)                                 // 2006\n\tlistenStart: function(ev) {                                                                                           // 2007\n\t\tthis.trigger('listenStart', ev);                                                                                     // 2008\n\t},                                                                                                                    // 2009\n                                                                                                                       // 2010\n                                                                                                                       // 2011\n\t// Called when the user moves the mouse                                                                               // 2012\n\tmousemove: function(ev) {                                                                                             // 2013\n\t\tvar dx = ev.pageX - this.originX;                                                                                    // 2014\n\t\tvar dy = ev.pageY - this.originY;                                                                                    // 2015\n\t\tvar minDistance;                                                                                                     // 2016\n\t\tvar distanceSq; // current distance from the origin, squared                                                         // 2017\n                                                                                                                       // 2018\n\t\tif (!this.isDragging) { // if not already dragging...                                                                // 2019\n\t\t\t// then start the drag if the minimum distance criteria is met                                                      // 2020\n\t\t\tminDistance = this.options.distance || 1;                                                                           // 2021\n\t\t\tdistanceSq = dx * dx + dy * dy;                                                                                     // 2022\n\t\t\tif (distanceSq >= minDistance * minDistance) { // use pythagorean theorem                                           // 2023\n\t\t\t\tthis.startDrag(ev);                                                                                                // 2024\n\t\t\t}                                                                                                                   // 2025\n\t\t}                                                                                                                    // 2026\n                                                                                                                       // 2027\n\t\tif (this.isDragging) {                                                                                               // 2028\n\t\t\tthis.drag(dx, dy, ev); // report a drag, even if this mousemove initiated the drag                                  // 2029\n\t\t}                                                                                                                    // 2030\n\t},                                                                                                                    // 2031\n                                                                                                                       // 2032\n                                                                                                                       // 2033\n\t// Call this to initiate a legitimate drag.                                                                           // 2034\n\t// This function is called internally from this class, but can also be called explicitly from outside                 // 2035\n\tstartDrag: function(ev) {                                                                                             // 2036\n                                                                                                                       // 2037\n\t\tif (!this.isListening) { // startDrag must have manually initiated                                                   // 2038\n\t\t\tthis.startListening();                                                                                              // 2039\n\t\t}                                                                                                                    // 2040\n                                                                                                                       // 2041\n\t\tif (!this.isDragging) {                                                                                              // 2042\n\t\t\tthis.isDragging = true;                                                                                             // 2043\n\t\t\tthis.dragStart(ev);                                                                                                 // 2044\n\t\t}                                                                                                                    // 2045\n\t},                                                                                                                    // 2046\n                                                                                                                       // 2047\n                                                                                                                       // 2048\n\t// Called when the actual drag has started (went beyond minDistance)                                                  // 2049\n\tdragStart: function(ev) {                                                                                             // 2050\n\t\tvar subjectEl = this.subjectEl;                                                                                      // 2051\n                                                                                                                       // 2052\n\t\tthis.trigger('dragStart', ev);                                                                                       // 2053\n                                                                                                                       // 2054\n\t\t// remove a mousedown'd <a>'s href so it is not visited (IE8 bug)                                                    // 2055\n\t\tif ((this.subjectHref = subjectEl ? subjectEl.attr('href') : null)) {                                                // 2056\n\t\t\tsubjectEl.removeAttr('href');                                                                                       // 2057\n\t\t}                                                                                                                    // 2058\n\t},                                                                                                                    // 2059\n                                                                                                                       // 2060\n                                                                                                                       // 2061\n\t// Called while the mouse is being moved and when we know a legitimate drag is taking place                           // 2062\n\tdrag: function(dx, dy, ev) {                                                                                          // 2063\n\t\tthis.trigger('drag', dx, dy, ev);                                                                                    // 2064\n\t\tthis.updateScroll(ev); // will possibly cause scrolling                                                              // 2065\n\t},                                                                                                                    // 2066\n                                                                                                                       // 2067\n                                                                                                                       // 2068\n\t// Called when the user does a mouseup                                                                                // 2069\n\tmouseup: function(ev) {                                                                                               // 2070\n\t\tthis.stopListening(ev);                                                                                              // 2071\n\t},                                                                                                                    // 2072\n                                                                                                                       // 2073\n                                                                                                                       // 2074\n\t// Called when the drag is over. Will not cause listening to stop however.                                            // 2075\n\t// A concluding 'cellOut' event will NOT be triggered.                                                                // 2076\n\tstopDrag: function(ev) {                                                                                              // 2077\n\t\tif (this.isDragging) {                                                                                               // 2078\n\t\t\tthis.stopScrolling();                                                                                               // 2079\n\t\t\tthis.dragStop(ev);                                                                                                  // 2080\n\t\t\tthis.isDragging = false;                                                                                            // 2081\n\t\t}                                                                                                                    // 2082\n\t},                                                                                                                    // 2083\n                                                                                                                       // 2084\n                                                                                                                       // 2085\n\t// Called when dragging has been stopped                                                                              // 2086\n\tdragStop: function(ev) {                                                                                              // 2087\n\t\tvar _this = this;                                                                                                    // 2088\n                                                                                                                       // 2089\n\t\tthis.trigger('dragStop', ev);                                                                                        // 2090\n                                                                                                                       // 2091\n\t\t// restore a mousedown'd <a>'s href (for IE8 bug)                                                                    // 2092\n\t\tsetTimeout(function() { // must be outside of the click's execution                                                  // 2093\n\t\t\tif (_this.subjectHref) {                                                                                            // 2094\n\t\t\t\t_this.subjectEl.attr('href', _this.subjectHref);                                                                   // 2095\n\t\t\t}                                                                                                                   // 2096\n\t\t}, 0);                                                                                                               // 2097\n\t},                                                                                                                    // 2098\n                                                                                                                       // 2099\n                                                                                                                       // 2100\n\t// Call this to stop listening to the user's mouse events                                                             // 2101\n\tstopListening: function(ev) {                                                                                         // 2102\n\t\tthis.stopDrag(ev); // if there's a current drag, kill it                                                             // 2103\n                                                                                                                       // 2104\n\t\tif (this.isListening) {                                                                                              // 2105\n                                                                                                                       // 2106\n\t\t\t// remove the scroll handler if there is a scrollEl                                                                 // 2107\n\t\t\tif (this.scrollEl) {                                                                                                // 2108\n\t\t\t\tthis.scrollEl.off('scroll', this.scrollHandlerProxy);                                                              // 2109\n\t\t\t\tthis.scrollHandlerProxy = null;                                                                                    // 2110\n\t\t\t}                                                                                                                   // 2111\n                                                                                                                       // 2112\n\t\t\t$(document)                                                                                                         // 2113\n\t\t\t\t.off('mousemove', this.mousemoveProxy)                                                                             // 2114\n\t\t\t\t.off('mouseup', this.mouseupProxy)                                                                                 // 2115\n\t\t\t\t.off('selectstart', this.preventDefault);                                                                          // 2116\n                                                                                                                       // 2117\n\t\t\tthis.mousemoveProxy = null;                                                                                         // 2118\n\t\t\tthis.mouseupProxy = null;                                                                                           // 2119\n                                                                                                                       // 2120\n\t\t\tthis.isListening = false;                                                                                           // 2121\n\t\t\tthis.listenStop(ev);                                                                                                // 2122\n\t\t}                                                                                                                    // 2123\n\t},                                                                                                                    // 2124\n                                                                                                                       // 2125\n                                                                                                                       // 2126\n\t// Called when drag listening has stopped                                                                             // 2127\n\tlistenStop: function(ev) {                                                                                            // 2128\n\t\tthis.trigger('listenStop', ev);                                                                                      // 2129\n\t},                                                                                                                    // 2130\n                                                                                                                       // 2131\n                                                                                                                       // 2132\n\t// Triggers a callback. Calls a function in the option hash of the same name.                                         // 2133\n\t// Arguments beyond the first `name` are forwarded on.                                                                // 2134\n\ttrigger: function(name) {                                                                                             // 2135\n\t\tif (this.options[name]) {                                                                                            // 2136\n\t\t\tthis.options[name].apply(this, Array.prototype.slice.call(arguments, 1));                                           // 2137\n\t\t}                                                                                                                    // 2138\n\t},                                                                                                                    // 2139\n                                                                                                                       // 2140\n                                                                                                                       // 2141\n\t// Stops a given mouse event from doing it's native browser action. In our case, text selection.                      // 2142\n\tpreventDefault: function(ev) {                                                                                        // 2143\n\t\tev.preventDefault();                                                                                                 // 2144\n\t},                                                                                                                    // 2145\n                                                                                                                       // 2146\n                                                                                                                       // 2147\n\t/* Scrolling                                                                                                          // 2148\n\t------------------------------------------------------------------------------------------------------------------*/  // 2149\n                                                                                                                       // 2150\n                                                                                                                       // 2151\n\t// Computes and stores the bounding rectangle of scrollEl                                                             // 2152\n\tcomputeScrollBounds: function() {                                                                                     // 2153\n\t\tvar el = this.scrollEl;                                                                                              // 2154\n                                                                                                                       // 2155\n\t\tthis.scrollBounds = el ? getOuterRect(el) : null;                                                                    // 2156\n\t\t\t// TODO: use getClientRect in future. but prevents auto scrolling when on top of scrollbars                         // 2157\n\t},                                                                                                                    // 2158\n                                                                                                                       // 2159\n                                                                                                                       // 2160\n\t// Called when the dragging is in progress and scrolling should be updated                                            // 2161\n\tupdateScroll: function(ev) {                                                                                          // 2162\n\t\tvar sensitivity = this.scrollSensitivity;                                                                            // 2163\n\t\tvar bounds = this.scrollBounds;                                                                                      // 2164\n\t\tvar topCloseness, bottomCloseness;                                                                                   // 2165\n\t\tvar leftCloseness, rightCloseness;                                                                                   // 2166\n\t\tvar topVel = 0;                                                                                                      // 2167\n\t\tvar leftVel = 0;                                                                                                     // 2168\n                                                                                                                       // 2169\n\t\tif (bounds) { // only scroll if scrollEl exists                                                                      // 2170\n                                                                                                                       // 2171\n\t\t\t// compute closeness to edges. valid range is from 0.0 - 1.0                                                        // 2172\n\t\t\ttopCloseness = (sensitivity - (ev.pageY - bounds.top)) / sensitivity;                                               // 2173\n\t\t\tbottomCloseness = (sensitivity - (bounds.bottom - ev.pageY)) / sensitivity;                                         // 2174\n\t\t\tleftCloseness = (sensitivity - (ev.pageX - bounds.left)) / sensitivity;                                             // 2175\n\t\t\trightCloseness = (sensitivity - (bounds.right - ev.pageX)) / sensitivity;                                           // 2176\n                                                                                                                       // 2177\n\t\t\t// translate vertical closeness into velocity.                                                                      // 2178\n\t\t\t// mouse must be completely in bounds for velocity to happen.                                                       // 2179\n\t\t\tif (topCloseness >= 0 && topCloseness <= 1) {                                                                       // 2180\n\t\t\t\ttopVel = topCloseness * this.scrollSpeed * -1; // negative. for scrolling up                                       // 2181\n\t\t\t}                                                                                                                   // 2182\n\t\t\telse if (bottomCloseness >= 0 && bottomCloseness <= 1) {                                                            // 2183\n\t\t\t\ttopVel = bottomCloseness * this.scrollSpeed;                                                                       // 2184\n\t\t\t}                                                                                                                   // 2185\n                                                                                                                       // 2186\n\t\t\t// translate horizontal closeness into velocity                                                                     // 2187\n\t\t\tif (leftCloseness >= 0 && leftCloseness <= 1) {                                                                     // 2188\n\t\t\t\tleftVel = leftCloseness * this.scrollSpeed * -1; // negative. for scrolling left                                   // 2189\n\t\t\t}                                                                                                                   // 2190\n\t\t\telse if (rightCloseness >= 0 && rightCloseness <= 1) {                                                              // 2191\n\t\t\t\tleftVel = rightCloseness * this.scrollSpeed;                                                                       // 2192\n\t\t\t}                                                                                                                   // 2193\n\t\t}                                                                                                                    // 2194\n                                                                                                                       // 2195\n\t\tthis.setScrollVel(topVel, leftVel);                                                                                  // 2196\n\t},                                                                                                                    // 2197\n                                                                                                                       // 2198\n                                                                                                                       // 2199\n\t// Sets the speed-of-scrolling for the scrollEl                                                                       // 2200\n\tsetScrollVel: function(topVel, leftVel) {                                                                             // 2201\n                                                                                                                       // 2202\n\t\tthis.scrollTopVel = topVel;                                                                                          // 2203\n\t\tthis.scrollLeftVel = leftVel;                                                                                        // 2204\n                                                                                                                       // 2205\n\t\tthis.constrainScrollVel(); // massages into realistic values                                                         // 2206\n                                                                                                                       // 2207\n\t\t// if there is non-zero velocity, and an animation loop hasn't already started, then START                           // 2208\n\t\tif ((this.scrollTopVel || this.scrollLeftVel) && !this.scrollIntervalId) {                                           // 2209\n\t\t\tthis.scrollIntervalId = setInterval(                                                                                // 2210\n\t\t\t\tproxy(this, 'scrollIntervalFunc'), // scope to `this`                                                              // 2211\n\t\t\t\tthis.scrollIntervalMs                                                                                              // 2212\n\t\t\t);                                                                                                                  // 2213\n\t\t}                                                                                                                    // 2214\n\t},                                                                                                                    // 2215\n                                                                                                                       // 2216\n                                                                                                                       // 2217\n\t// Forces scrollTopVel and scrollLeftVel to be zero if scrolling has already gone all the way                         // 2218\n\tconstrainScrollVel: function() {                                                                                      // 2219\n\t\tvar el = this.scrollEl;                                                                                              // 2220\n                                                                                                                       // 2221\n\t\tif (this.scrollTopVel < 0) { // scrolling up?                                                                        // 2222\n\t\t\tif (el.scrollTop() <= 0) { // already scrolled all the way up?                                                      // 2223\n\t\t\t\tthis.scrollTopVel = 0;                                                                                             // 2224\n\t\t\t}                                                                                                                   // 2225\n\t\t}                                                                                                                    // 2226\n\t\telse if (this.scrollTopVel > 0) { // scrolling down?                                                                 // 2227\n\t\t\tif (el.scrollTop() + el[0].clientHeight >= el[0].scrollHeight) { // already scrolled all the way down?              // 2228\n\t\t\t\tthis.scrollTopVel = 0;                                                                                             // 2229\n\t\t\t}                                                                                                                   // 2230\n\t\t}                                                                                                                    // 2231\n                                                                                                                       // 2232\n\t\tif (this.scrollLeftVel < 0) { // scrolling left?                                                                     // 2233\n\t\t\tif (el.scrollLeft() <= 0) { // already scrolled all the left?                                                       // 2234\n\t\t\t\tthis.scrollLeftVel = 0;                                                                                            // 2235\n\t\t\t}                                                                                                                   // 2236\n\t\t}                                                                                                                    // 2237\n\t\telse if (this.scrollLeftVel > 0) { // scrolling right?                                                               // 2238\n\t\t\tif (el.scrollLeft() + el[0].clientWidth >= el[0].scrollWidth) { // already scrolled all the way right?              // 2239\n\t\t\t\tthis.scrollLeftVel = 0;                                                                                            // 2240\n\t\t\t}                                                                                                                   // 2241\n\t\t}                                                                                                                    // 2242\n\t},                                                                                                                    // 2243\n                                                                                                                       // 2244\n                                                                                                                       // 2245\n\t// This function gets called during every iteration of the scrolling animation loop                                   // 2246\n\tscrollIntervalFunc: function() {                                                                                      // 2247\n\t\tvar el = this.scrollEl;                                                                                              // 2248\n\t\tvar frac = this.scrollIntervalMs / 1000; // considering animation frequency, what the vel should be mult'd by        // 2249\n                                                                                                                       // 2250\n\t\t// change the value of scrollEl's scroll                                                                             // 2251\n\t\tif (this.scrollTopVel) {                                                                                             // 2252\n\t\t\tel.scrollTop(el.scrollTop() + this.scrollTopVel * frac);                                                            // 2253\n\t\t}                                                                                                                    // 2254\n\t\tif (this.scrollLeftVel) {                                                                                            // 2255\n\t\t\tel.scrollLeft(el.scrollLeft() + this.scrollLeftVel * frac);                                                         // 2256\n\t\t}                                                                                                                    // 2257\n                                                                                                                       // 2258\n\t\tthis.constrainScrollVel(); // since the scroll values changed, recompute the velocities                              // 2259\n                                                                                                                       // 2260\n\t\t// if scrolled all the way, which causes the vels to be zero, stop the animation loop                                // 2261\n\t\tif (!this.scrollTopVel && !this.scrollLeftVel) {                                                                     // 2262\n\t\t\tthis.stopScrolling();                                                                                               // 2263\n\t\t}                                                                                                                    // 2264\n\t},                                                                                                                    // 2265\n                                                                                                                       // 2266\n                                                                                                                       // 2267\n\t// Kills any existing scrolling animation loop                                                                        // 2268\n\tstopScrolling: function() {                                                                                           // 2269\n\t\tif (this.scrollIntervalId) {                                                                                         // 2270\n\t\t\tclearInterval(this.scrollIntervalId);                                                                               // 2271\n\t\t\tthis.scrollIntervalId = null;                                                                                       // 2272\n                                                                                                                       // 2273\n\t\t\t// when all done with scrolling, recompute positions since they probably changed                                    // 2274\n\t\t\tthis.scrollStop();                                                                                                  // 2275\n\t\t}                                                                                                                    // 2276\n\t},                                                                                                                    // 2277\n                                                                                                                       // 2278\n                                                                                                                       // 2279\n\t// Get called when the scrollEl is scrolled (NOTE: this is delayed via debounce)                                      // 2280\n\tscrollHandler: function() {                                                                                           // 2281\n\t\t// recompute all coordinates, but *only* if this is *not* part of our scrolling animation                            // 2282\n\t\tif (!this.scrollIntervalId) {                                                                                        // 2283\n\t\t\tthis.scrollStop();                                                                                                  // 2284\n\t\t}                                                                                                                    // 2285\n\t},                                                                                                                    // 2286\n                                                                                                                       // 2287\n                                                                                                                       // 2288\n\t// Called when scrolling has stopped, whether through auto scroll, or the user scrolling                              // 2289\n\tscrollStop: function() {                                                                                              // 2290\n\t}                                                                                                                     // 2291\n                                                                                                                       // 2292\n});                                                                                                                    // 2293\n                                                                                                                       // 2294\n;;                                                                                                                     // 2295\n                                                                                                                       // 2296\n/* Tracks mouse movements over a CoordMap and raises events about which cell the mouse is over.                        // 2297\n------------------------------------------------------------------------------------------------------------------------\noptions:                                                                                                               // 2299\n- subjectEl                                                                                                            // 2300\n- subjectCenter                                                                                                        // 2301\n*/                                                                                                                     // 2302\n                                                                                                                       // 2303\nvar CellDragListener = DragListener.extend({                                                                           // 2304\n                                                                                                                       // 2305\n\tcoordMap: null, // converts coordinates to date cells                                                                 // 2306\n\torigCell: null, // the cell the mouse was over when listening started                                                 // 2307\n\tcell: null, // the cell the mouse is over                                                                             // 2308\n\tcoordAdjust: null, // delta that will be added to the mouse coordinates when computing collisions                     // 2309\n                                                                                                                       // 2310\n                                                                                                                       // 2311\n\tconstructor: function(coordMap, options) {                                                                            // 2312\n\t\tDragListener.prototype.constructor.call(this, options); // call the super-constructor                                // 2313\n                                                                                                                       // 2314\n\t\tthis.coordMap = coordMap;                                                                                            // 2315\n\t},                                                                                                                    // 2316\n                                                                                                                       // 2317\n                                                                                                                       // 2318\n\t// Called when drag listening starts (but a real drag has not necessarily began).                                     // 2319\n\t// ev might be undefined if dragging was started manually.                                                            // 2320\n\tlistenStart: function(ev) {                                                                                           // 2321\n\t\tvar subjectEl = this.subjectEl;                                                                                      // 2322\n\t\tvar subjectRect;                                                                                                     // 2323\n\t\tvar origPoint;                                                                                                       // 2324\n\t\tvar point;                                                                                                           // 2325\n                                                                                                                       // 2326\n\t\tDragListener.prototype.listenStart.apply(this, arguments); // call the super-method                                  // 2327\n                                                                                                                       // 2328\n\t\tthis.computeCoords();                                                                                                // 2329\n                                                                                                                       // 2330\n\t\tif (ev) {                                                                                                            // 2331\n\t\t\torigPoint = { left: ev.pageX, top: ev.pageY };                                                                      // 2332\n\t\t\tpoint = origPoint;                                                                                                  // 2333\n                                                                                                                       // 2334\n\t\t\t// constrain the point to bounds of the element being dragged                                                       // 2335\n\t\t\tif (subjectEl) {                                                                                                    // 2336\n\t\t\t\tsubjectRect = getOuterRect(subjectEl); // used for centering as well                                               // 2337\n\t\t\t\tpoint = constrainPoint(point, subjectRect);                                                                        // 2338\n\t\t\t}                                                                                                                   // 2339\n                                                                                                                       // 2340\n\t\t\tthis.origCell = this.getCell(point.left, point.top);                                                                // 2341\n                                                                                                                       // 2342\n\t\t\t// treat the center of the subject as the collision point?                                                          // 2343\n\t\t\tif (subjectEl && this.options.subjectCenter) {                                                                      // 2344\n                                                                                                                       // 2345\n\t\t\t\t// only consider the area the subject overlaps the cell. best for large subjects                                   // 2346\n\t\t\t\tif (this.origCell) {                                                                                               // 2347\n\t\t\t\t\tsubjectRect = intersectRects(this.origCell, subjectRect) ||                                                       // 2348\n\t\t\t\t\t\tsubjectRect; // in case there is no intersection                                                                 // 2349\n\t\t\t\t}                                                                                                                  // 2350\n                                                                                                                       // 2351\n\t\t\t\tpoint = getRectCenter(subjectRect);                                                                                // 2352\n\t\t\t}                                                                                                                   // 2353\n                                                                                                                       // 2354\n\t\t\tthis.coordAdjust = diffPoints(point, origPoint); // point - origPoint                                               // 2355\n\t\t}                                                                                                                    // 2356\n\t\telse {                                                                                                               // 2357\n\t\t\tthis.origCell = null;                                                                                               // 2358\n\t\t\tthis.coordAdjust = null;                                                                                            // 2359\n\t\t}                                                                                                                    // 2360\n\t},                                                                                                                    // 2361\n                                                                                                                       // 2362\n                                                                                                                       // 2363\n\t// Recomputes the drag-critical positions of elements                                                                 // 2364\n\tcomputeCoords: function() {                                                                                           // 2365\n\t\tthis.coordMap.build();                                                                                               // 2366\n\t\tthis.computeScrollBounds();                                                                                          // 2367\n\t},                                                                                                                    // 2368\n                                                                                                                       // 2369\n                                                                                                                       // 2370\n\t// Called when the actual drag has started                                                                            // 2371\n\tdragStart: function(ev) {                                                                                             // 2372\n\t\tvar cell;                                                                                                            // 2373\n                                                                                                                       // 2374\n\t\tDragListener.prototype.dragStart.apply(this, arguments); // call the super-method                                    // 2375\n                                                                                                                       // 2376\n\t\tcell = this.getCell(ev.pageX, ev.pageY); // might be different from this.origCell if the min-distance is large       // 2377\n                                                                                                                       // 2378\n\t\t// report the initial cell the mouse is over                                                                         // 2379\n\t\t// especially important if no min-distance and drag starts immediately                                               // 2380\n\t\tif (cell) {                                                                                                          // 2381\n\t\t\tthis.cellOver(cell);                                                                                                // 2382\n\t\t}                                                                                                                    // 2383\n\t},                                                                                                                    // 2384\n                                                                                                                       // 2385\n                                                                                                                       // 2386\n\t// Called when the drag moves                                                                                         // 2387\n\tdrag: function(dx, dy, ev) {                                                                                          // 2388\n\t\tvar cell;                                                                                                            // 2389\n                                                                                                                       // 2390\n\t\tDragListener.prototype.drag.apply(this, arguments); // call the super-method                                         // 2391\n                                                                                                                       // 2392\n\t\tcell = this.getCell(ev.pageX, ev.pageY);                                                                             // 2393\n                                                                                                                       // 2394\n\t\tif (!isCellsEqual(cell, this.cell)) { // a different cell than before?                                               // 2395\n\t\t\tif (this.cell) {                                                                                                    // 2396\n\t\t\t\tthis.cellOut();                                                                                                    // 2397\n\t\t\t}                                                                                                                   // 2398\n\t\t\tif (cell) {                                                                                                         // 2399\n\t\t\t\tthis.cellOver(cell);                                                                                               // 2400\n\t\t\t}                                                                                                                   // 2401\n\t\t}                                                                                                                    // 2402\n\t},                                                                                                                    // 2403\n                                                                                                                       // 2404\n                                                                                                                       // 2405\n\t// Called when dragging has been stopped                                                                              // 2406\n\tdragStop: function() {                                                                                                // 2407\n\t\tthis.cellDone();                                                                                                     // 2408\n\t\tDragListener.prototype.dragStop.apply(this, arguments); // call the super-method                                     // 2409\n\t},                                                                                                                    // 2410\n                                                                                                                       // 2411\n                                                                                                                       // 2412\n\t// Called when a the mouse has just moved over a new cell                                                             // 2413\n\tcellOver: function(cell) {                                                                                            // 2414\n\t\tthis.cell = cell;                                                                                                    // 2415\n\t\tthis.trigger('cellOver', cell, isCellsEqual(cell, this.origCell), this.origCell);                                    // 2416\n\t},                                                                                                                    // 2417\n                                                                                                                       // 2418\n                                                                                                                       // 2419\n\t// Called when the mouse has just moved out of a cell                                                                 // 2420\n\tcellOut: function() {                                                                                                 // 2421\n\t\tif (this.cell) {                                                                                                     // 2422\n\t\t\tthis.trigger('cellOut', this.cell);                                                                                 // 2423\n\t\t\tthis.cellDone();                                                                                                    // 2424\n\t\t\tthis.cell = null;                                                                                                   // 2425\n\t\t}                                                                                                                    // 2426\n\t},                                                                                                                    // 2427\n                                                                                                                       // 2428\n                                                                                                                       // 2429\n\t// Called after a cellOut. Also called before a dragStop                                                              // 2430\n\tcellDone: function() {                                                                                                // 2431\n\t\tif (this.cell) {                                                                                                     // 2432\n\t\t\tthis.trigger('cellDone', this.cell);                                                                                // 2433\n\t\t}                                                                                                                    // 2434\n\t},                                                                                                                    // 2435\n                                                                                                                       // 2436\n                                                                                                                       // 2437\n\t// Called when drag listening has stopped                                                                             // 2438\n\tlistenStop: function() {                                                                                              // 2439\n\t\tDragListener.prototype.listenStop.apply(this, arguments); // call the super-method                                   // 2440\n                                                                                                                       // 2441\n\t\tthis.origCell = this.cell = null;                                                                                    // 2442\n\t\tthis.coordMap.clear();                                                                                               // 2443\n\t},                                                                                                                    // 2444\n                                                                                                                       // 2445\n                                                                                                                       // 2446\n\t// Called when scrolling has stopped, whether through auto scroll, or the user scrolling                              // 2447\n\tscrollStop: function() {                                                                                              // 2448\n\t\tDragListener.prototype.scrollStop.apply(this, arguments); // call the super-method                                   // 2449\n                                                                                                                       // 2450\n\t\tthis.computeCoords(); // cells' absolute positions will be in new places. recompute                                  // 2451\n\t},                                                                                                                    // 2452\n                                                                                                                       // 2453\n                                                                                                                       // 2454\n\t// Gets the cell underneath the coordinates for the given mouse event                                                 // 2455\n\tgetCell: function(left, top) {                                                                                        // 2456\n                                                                                                                       // 2457\n\t\tif (this.coordAdjust) {                                                                                              // 2458\n\t\t\tleft += this.coordAdjust.left;                                                                                      // 2459\n\t\t\ttop += this.coordAdjust.top;                                                                                        // 2460\n\t\t}                                                                                                                    // 2461\n                                                                                                                       // 2462\n\t\treturn this.coordMap.getCell(left, top);                                                                             // 2463\n\t}                                                                                                                     // 2464\n                                                                                                                       // 2465\n});                                                                                                                    // 2466\n                                                                                                                       // 2467\n                                                                                                                       // 2468\n// Returns `true` if the cells are identically equal. `false` otherwise.                                               // 2469\n// They must have the same row, col, and be from the same grid.                                                        // 2470\n// Two null values will be considered equal, as two \"out of the grid\" states are the same.                             // 2471\nfunction isCellsEqual(cell1, cell2) {                                                                                  // 2472\n                                                                                                                       // 2473\n\tif (!cell1 && !cell2) {                                                                                               // 2474\n\t\treturn true;                                                                                                         // 2475\n\t}                                                                                                                     // 2476\n                                                                                                                       // 2477\n\tif (cell1 && cell2) {                                                                                                 // 2478\n\t\treturn cell1.grid === cell2.grid &&                                                                                  // 2479\n\t\t\tcell1.row === cell2.row &&                                                                                          // 2480\n\t\t\tcell1.col === cell2.col;                                                                                            // 2481\n\t}                                                                                                                     // 2482\n                                                                                                                       // 2483\n\treturn false;                                                                                                         // 2484\n}                                                                                                                      // 2485\n                                                                                                                       // 2486\n;;                                                                                                                     // 2487\n                                                                                                                       // 2488\n/* Creates a clone of an element and lets it track the mouse as it moves                                               // 2489\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 2491\nvar MouseFollower = Class.extend({                                                                                     // 2492\n                                                                                                                       // 2493\n\toptions: null,                                                                                                        // 2494\n                                                                                                                       // 2495\n\tsourceEl: null, // the element that will be cloned and made to look like it is dragging                               // 2496\n\tel: null, // the clone of `sourceEl` that will track the mouse                                                        // 2497\n\tparentEl: null, // the element that `el` (the clone) will be attached to                                              // 2498\n                                                                                                                       // 2499\n\t// the initial position of el, relative to the offset parent. made to match the initial offset of sourceEl            // 2500\n\ttop0: null,                                                                                                           // 2501\n\tleft0: null,                                                                                                          // 2502\n                                                                                                                       // 2503\n\t// the initial position of the mouse                                                                                  // 2504\n\tmouseY0: null,                                                                                                        // 2505\n\tmouseX0: null,                                                                                                        // 2506\n                                                                                                                       // 2507\n\t// the number of pixels the mouse has moved from its initial position                                                 // 2508\n\ttopDelta: null,                                                                                                       // 2509\n\tleftDelta: null,                                                                                                      // 2510\n                                                                                                                       // 2511\n\tmousemoveProxy: null, // document mousemove handler, bound to the MouseFollower's `this`                              // 2512\n                                                                                                                       // 2513\n\tisFollowing: false,                                                                                                   // 2514\n\tisHidden: false,                                                                                                      // 2515\n\tisAnimating: false, // doing the revert animation?                                                                    // 2516\n                                                                                                                       // 2517\n\tconstructor: function(sourceEl, options) {                                                                            // 2518\n\t\tthis.options = options = options || {};                                                                              // 2519\n\t\tthis.sourceEl = sourceEl;                                                                                            // 2520\n\t\tthis.parentEl = options.parentEl ? $(options.parentEl) : sourceEl.parent(); // default to sourceEl's parent          // 2521\n\t},                                                                                                                    // 2522\n                                                                                                                       // 2523\n                                                                                                                       // 2524\n\t// Causes the element to start following the mouse                                                                    // 2525\n\tstart: function(ev) {                                                                                                 // 2526\n\t\tif (!this.isFollowing) {                                                                                             // 2527\n\t\t\tthis.isFollowing = true;                                                                                            // 2528\n                                                                                                                       // 2529\n\t\t\tthis.mouseY0 = ev.pageY;                                                                                            // 2530\n\t\t\tthis.mouseX0 = ev.pageX;                                                                                            // 2531\n\t\t\tthis.topDelta = 0;                                                                                                  // 2532\n\t\t\tthis.leftDelta = 0;                                                                                                 // 2533\n                                                                                                                       // 2534\n\t\t\tif (!this.isHidden) {                                                                                               // 2535\n\t\t\t\tthis.updatePosition();                                                                                             // 2536\n\t\t\t}                                                                                                                   // 2537\n                                                                                                                       // 2538\n\t\t\t$(document).on('mousemove', this.mousemoveProxy = proxy(this, 'mousemove'));                                        // 2539\n\t\t}                                                                                                                    // 2540\n\t},                                                                                                                    // 2541\n                                                                                                                       // 2542\n                                                                                                                       // 2543\n\t// Causes the element to stop following the mouse. If shouldRevert is true, will animate back to original position.   // 2544\n\t// `callback` gets invoked when the animation is complete. If no animation, it is invoked immediately.                // 2545\n\tstop: function(shouldRevert, callback) {                                                                              // 2546\n\t\tvar _this = this;                                                                                                    // 2547\n\t\tvar revertDuration = this.options.revertDuration;                                                                    // 2548\n                                                                                                                       // 2549\n\t\tfunction complete() {                                                                                                // 2550\n\t\t\tthis.isAnimating = false;                                                                                           // 2551\n\t\t\t_this.destroyEl();                                                                                                  // 2552\n                                                                                                                       // 2553\n\t\t\tthis.top0 = this.left0 = null; // reset state for future updatePosition calls                                       // 2554\n                                                                                                                       // 2555\n\t\t\tif (callback) {                                                                                                     // 2556\n\t\t\t\tcallback();                                                                                                        // 2557\n\t\t\t}                                                                                                                   // 2558\n\t\t}                                                                                                                    // 2559\n                                                                                                                       // 2560\n\t\tif (this.isFollowing && !this.isAnimating) { // disallow more than one stop animation at a time                      // 2561\n\t\t\tthis.isFollowing = false;                                                                                           // 2562\n                                                                                                                       // 2563\n\t\t\t$(document).off('mousemove', this.mousemoveProxy);                                                                  // 2564\n                                                                                                                       // 2565\n\t\t\tif (shouldRevert && revertDuration && !this.isHidden) { // do a revert animation?                                   // 2566\n\t\t\t\tthis.isAnimating = true;                                                                                           // 2567\n\t\t\t\tthis.el.animate({                                                                                                  // 2568\n\t\t\t\t\ttop: this.top0,                                                                                                   // 2569\n\t\t\t\t\tleft: this.left0                                                                                                  // 2570\n\t\t\t\t}, {                                                                                                               // 2571\n\t\t\t\t\tduration: revertDuration,                                                                                         // 2572\n\t\t\t\t\tcomplete: complete                                                                                                // 2573\n\t\t\t\t});                                                                                                                // 2574\n\t\t\t}                                                                                                                   // 2575\n\t\t\telse {                                                                                                              // 2576\n\t\t\t\tcomplete();                                                                                                        // 2577\n\t\t\t}                                                                                                                   // 2578\n\t\t}                                                                                                                    // 2579\n\t},                                                                                                                    // 2580\n                                                                                                                       // 2581\n                                                                                                                       // 2582\n\t// Gets the tracking element. Create it if necessary                                                                  // 2583\n\tgetEl: function() {                                                                                                   // 2584\n\t\tvar el = this.el;                                                                                                    // 2585\n                                                                                                                       // 2586\n\t\tif (!el) {                                                                                                           // 2587\n\t\t\tthis.sourceEl.width(); // hack to force IE8 to compute correct bounding box                                         // 2588\n\t\t\tel = this.el = this.sourceEl.clone()                                                                                // 2589\n\t\t\t\t.css({                                                                                                             // 2590\n\t\t\t\t\tposition: 'absolute',                                                                                             // 2591\n\t\t\t\t\tvisibility: '', // in case original element was hidden (commonly through hideEvents())                            // 2592\n\t\t\t\t\tdisplay: this.isHidden ? 'none' : '', // for when initially hidden                                                // 2593\n\t\t\t\t\tmargin: 0,                                                                                                        // 2594\n\t\t\t\t\tright: 'auto', // erase and set width instead                                                                     // 2595\n\t\t\t\t\tbottom: 'auto', // erase and set height instead                                                                   // 2596\n\t\t\t\t\twidth: this.sourceEl.width(), // explicit height in case there was a 'right' value                                // 2597\n\t\t\t\t\theight: this.sourceEl.height(), // explicit width in case there was a 'bottom' value                              // 2598\n\t\t\t\t\topacity: this.options.opacity || '',                                                                              // 2599\n\t\t\t\t\tzIndex: this.options.zIndex                                                                                       // 2600\n\t\t\t\t})                                                                                                                 // 2601\n\t\t\t\t.appendTo(this.parentEl);                                                                                          // 2602\n\t\t}                                                                                                                    // 2603\n                                                                                                                       // 2604\n\t\treturn el;                                                                                                           // 2605\n\t},                                                                                                                    // 2606\n                                                                                                                       // 2607\n                                                                                                                       // 2608\n\t// Removes the tracking element if it has already been created                                                        // 2609\n\tdestroyEl: function() {                                                                                               // 2610\n\t\tif (this.el) {                                                                                                       // 2611\n\t\t\tthis.el.remove();                                                                                                   // 2612\n\t\t\tthis.el = null;                                                                                                     // 2613\n\t\t}                                                                                                                    // 2614\n\t},                                                                                                                    // 2615\n                                                                                                                       // 2616\n                                                                                                                       // 2617\n\t// Update the CSS position of the tracking element                                                                    // 2618\n\tupdatePosition: function() {                                                                                          // 2619\n\t\tvar sourceOffset;                                                                                                    // 2620\n\t\tvar origin;                                                                                                          // 2621\n                                                                                                                       // 2622\n\t\tthis.getEl(); // ensure this.el                                                                                      // 2623\n                                                                                                                       // 2624\n\t\t// make sure origin info was computed                                                                                // 2625\n\t\tif (this.top0 === null) {                                                                                            // 2626\n\t\t\tthis.sourceEl.width(); // hack to force IE8 to compute correct bounding box                                         // 2627\n\t\t\tsourceOffset = this.sourceEl.offset();                                                                              // 2628\n\t\t\torigin = this.el.offsetParent().offset();                                                                           // 2629\n\t\t\tthis.top0 = sourceOffset.top - origin.top;                                                                          // 2630\n\t\t\tthis.left0 = sourceOffset.left - origin.left;                                                                       // 2631\n\t\t}                                                                                                                    // 2632\n                                                                                                                       // 2633\n\t\tthis.el.css({                                                                                                        // 2634\n\t\t\ttop: this.top0 + this.topDelta,                                                                                     // 2635\n\t\t\tleft: this.left0 + this.leftDelta                                                                                   // 2636\n\t\t});                                                                                                                  // 2637\n\t},                                                                                                                    // 2638\n                                                                                                                       // 2639\n                                                                                                                       // 2640\n\t// Gets called when the user moves the mouse                                                                          // 2641\n\tmousemove: function(ev) {                                                                                             // 2642\n\t\tthis.topDelta = ev.pageY - this.mouseY0;                                                                             // 2643\n\t\tthis.leftDelta = ev.pageX - this.mouseX0;                                                                            // 2644\n                                                                                                                       // 2645\n\t\tif (!this.isHidden) {                                                                                                // 2646\n\t\t\tthis.updatePosition();                                                                                              // 2647\n\t\t}                                                                                                                    // 2648\n\t},                                                                                                                    // 2649\n                                                                                                                       // 2650\n                                                                                                                       // 2651\n\t// Temporarily makes the tracking element invisible. Can be called before following starts                            // 2652\n\thide: function() {                                                                                                    // 2653\n\t\tif (!this.isHidden) {                                                                                                // 2654\n\t\t\tthis.isHidden = true;                                                                                               // 2655\n\t\t\tif (this.el) {                                                                                                      // 2656\n\t\t\t\tthis.el.hide();                                                                                                    // 2657\n\t\t\t}                                                                                                                   // 2658\n\t\t}                                                                                                                    // 2659\n\t},                                                                                                                    // 2660\n                                                                                                                       // 2661\n                                                                                                                       // 2662\n\t// Show the tracking element after it has been temporarily hidden                                                     // 2663\n\tshow: function() {                                                                                                    // 2664\n\t\tif (this.isHidden) {                                                                                                 // 2665\n\t\t\tthis.isHidden = false;                                                                                              // 2666\n\t\t\tthis.updatePosition();                                                                                              // 2667\n\t\t\tthis.getEl().show();                                                                                                // 2668\n\t\t}                                                                                                                    // 2669\n\t}                                                                                                                     // 2670\n                                                                                                                       // 2671\n});                                                                                                                    // 2672\n                                                                                                                       // 2673\n;;                                                                                                                     // 2674\n                                                                                                                       // 2675\n/* A utility class for rendering <tr> rows.                                                                            // 2676\n----------------------------------------------------------------------------------------------------------------------*/\n// It leverages methods of the subclass and the View to determine custom rendering behavior for each row \"type\"        // 2678\n// (such as highlight rows, day rows, helper rows, etc).                                                               // 2679\n                                                                                                                       // 2680\nvar RowRenderer = Class.extend({                                                                                       // 2681\n                                                                                                                       // 2682\n\tview: null, // a View object                                                                                          // 2683\n\tisRTL: null, // shortcut to the view's isRTL option                                                                   // 2684\n\tcellHtml: '<td/>', // plain default HTML used for a cell when no other is available                                   // 2685\n                                                                                                                       // 2686\n                                                                                                                       // 2687\n\tconstructor: function(view) {                                                                                         // 2688\n\t\tthis.view = view;                                                                                                    // 2689\n\t\tthis.isRTL = view.opt('isRTL');                                                                                      // 2690\n\t},                                                                                                                    // 2691\n                                                                                                                       // 2692\n                                                                                                                       // 2693\n\t// Renders the HTML for a row, leveraging custom cell-HTML-renderers based on the `rowType`.                          // 2694\n\t// Also applies the \"intro\" and \"outro\" cells, which are specified by the subclass and views.                         // 2695\n\t// `row` is an optional row number.                                                                                   // 2696\n\trowHtml: function(rowType, row) {                                                                                     // 2697\n\t\tvar renderCell = this.getHtmlRenderer('cell', rowType);                                                              // 2698\n\t\tvar rowCellHtml = '';                                                                                                // 2699\n\t\tvar col;                                                                                                             // 2700\n\t\tvar cell;                                                                                                            // 2701\n                                                                                                                       // 2702\n\t\trow = row || 0;                                                                                                      // 2703\n                                                                                                                       // 2704\n\t\tfor (col = 0; col < this.colCnt; col++) {                                                                            // 2705\n\t\t\tcell = this.getCell(row, col);                                                                                      // 2706\n\t\t\trowCellHtml += renderCell(cell);                                                                                    // 2707\n\t\t}                                                                                                                    // 2708\n                                                                                                                       // 2709\n\t\trowCellHtml = this.bookendCells(rowCellHtml, rowType, row); // apply intro and outro                                 // 2710\n                                                                                                                       // 2711\n\t\treturn '<tr>' + rowCellHtml + '</tr>';                                                                               // 2712\n\t},                                                                                                                    // 2713\n                                                                                                                       // 2714\n                                                                                                                       // 2715\n\t// Applies the \"intro\" and \"outro\" HTML to the given cells.                                                           // 2716\n\t// Intro means the leftmost cell when the calendar is LTR and the rightmost cell when RTL. Vice-versa for outro.      // 2717\n\t// `cells` can be an HTML string of <td>'s or a jQuery <tr> element                                                   // 2718\n\t// `row` is an optional row number.                                                                                   // 2719\n\tbookendCells: function(cells, rowType, row) {                                                                         // 2720\n\t\tvar intro = this.getHtmlRenderer('intro', rowType)(row || 0);                                                        // 2721\n\t\tvar outro = this.getHtmlRenderer('outro', rowType)(row || 0);                                                        // 2722\n\t\tvar prependHtml = this.isRTL ? outro : intro;                                                                        // 2723\n\t\tvar appendHtml = this.isRTL ? intro : outro;                                                                         // 2724\n                                                                                                                       // 2725\n\t\tif (typeof cells === 'string') {                                                                                     // 2726\n\t\t\treturn prependHtml + cells + appendHtml;                                                                            // 2727\n\t\t}                                                                                                                    // 2728\n\t\telse { // a jQuery <tr> element                                                                                      // 2729\n\t\t\treturn cells.prepend(prependHtml).append(appendHtml);                                                               // 2730\n\t\t}                                                                                                                    // 2731\n\t},                                                                                                                    // 2732\n                                                                                                                       // 2733\n                                                                                                                       // 2734\n\t// Returns an HTML-rendering function given a specific `rendererName` (like cell, intro, or outro) and a specific     // 2735\n\t// `rowType` (like day, eventSkeleton, helperSkeleton), which is optional.                                            // 2736\n\t// If a renderer for the specific rowType doesn't exist, it will fall back to a generic renderer.                     // 2737\n\t// We will query the View object first for any custom rendering functions, then the methods of the subclass.          // 2738\n\tgetHtmlRenderer: function(rendererName, rowType) {                                                                    // 2739\n\t\tvar view = this.view;                                                                                                // 2740\n\t\tvar generalName; // like \"cellHtml\"                                                                                  // 2741\n\t\tvar specificName; // like \"dayCellHtml\". based on rowType                                                            // 2742\n\t\tvar provider; // either the View or the RowRenderer subclass, whichever provided the method                          // 2743\n\t\tvar renderer;                                                                                                        // 2744\n                                                                                                                       // 2745\n\t\tgeneralName = rendererName + 'Html';                                                                                 // 2746\n\t\tif (rowType) {                                                                                                       // 2747\n\t\t\tspecificName = rowType + capitaliseFirstLetter(rendererName) + 'Html';                                              // 2748\n\t\t}                                                                                                                    // 2749\n                                                                                                                       // 2750\n\t\tif (specificName && (renderer = view[specificName])) {                                                               // 2751\n\t\t\tprovider = view;                                                                                                    // 2752\n\t\t}                                                                                                                    // 2753\n\t\telse if (specificName && (renderer = this[specificName])) {                                                          // 2754\n\t\t\tprovider = this;                                                                                                    // 2755\n\t\t}                                                                                                                    // 2756\n\t\telse if ((renderer = view[generalName])) {                                                                           // 2757\n\t\t\tprovider = view;                                                                                                    // 2758\n\t\t}                                                                                                                    // 2759\n\t\telse if ((renderer = this[generalName])) {                                                                           // 2760\n\t\t\tprovider = this;                                                                                                    // 2761\n\t\t}                                                                                                                    // 2762\n                                                                                                                       // 2763\n\t\tif (typeof renderer === 'function') {                                                                                // 2764\n\t\t\treturn function() {                                                                                                 // 2765\n\t\t\t\treturn renderer.apply(provider, arguments) || ''; // use correct `this` and always return a string                 // 2766\n\t\t\t};                                                                                                                  // 2767\n\t\t}                                                                                                                    // 2768\n                                                                                                                       // 2769\n\t\t// the rendered can be a plain string as well. if not specified, always an empty string.                             // 2770\n\t\treturn function() {                                                                                                  // 2771\n\t\t\treturn renderer || '';                                                                                              // 2772\n\t\t};                                                                                                                   // 2773\n\t}                                                                                                                     // 2774\n                                                                                                                       // 2775\n});                                                                                                                    // 2776\n                                                                                                                       // 2777\n;;                                                                                                                     // 2778\n                                                                                                                       // 2779\n/* An abstract class comprised of a \"grid\" of cells that each represent a specific datetime                            // 2780\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 2782\nvar Grid = fc.Grid = RowRenderer.extend({                                                                              // 2783\n                                                                                                                       // 2784\n\tstart: null, // the date of the first cell                                                                            // 2785\n\tend: null, // the date after the last cell                                                                            // 2786\n                                                                                                                       // 2787\n\trowCnt: 0, // number of rows                                                                                          // 2788\n\tcolCnt: 0, // number of cols                                                                                          // 2789\n\trowData: null, // array of objects, holding misc data for each row                                                    // 2790\n\tcolData: null, // array of objects, holding misc data for each column                                                 // 2791\n                                                                                                                       // 2792\n\tel: null, // the containing element                                                                                   // 2793\n\tcoordMap: null, // a GridCoordMap that converts pixel values to datetimes                                             // 2794\n\telsByFill: null, // a hash of jQuery element sets used for rendering each fill. Keyed by fill name.                   // 2795\n                                                                                                                       // 2796\n\texternalDragStartProxy: null, // binds the Grid's scope to externalDragStart (in DayGrid.events)                      // 2797\n                                                                                                                       // 2798\n\t// derived from options                                                                                               // 2799\n\tcolHeadFormat: null, // TODO: move to another class. not applicable to all Grids                                      // 2800\n\teventTimeFormat: null,                                                                                                // 2801\n\tdisplayEventTime: null,                                                                                               // 2802\n\tdisplayEventEnd: null,                                                                                                // 2803\n                                                                                                                       // 2804\n\t// if all cells are the same length of time, the duration they all share. optional.                                   // 2805\n\t// when defined, allows the computeCellRange shortcut, as well as improved resizing behavior.                         // 2806\n\tcellDuration: null,                                                                                                   // 2807\n                                                                                                                       // 2808\n\t// if defined, holds the unit identified (ex: \"year\" or \"month\") that determines the level of granularity             // 2809\n\t// of the date cells. if not defined, assumes to be day and time granularity.                                         // 2810\n\tlargeUnit: null,                                                                                                      // 2811\n                                                                                                                       // 2812\n                                                                                                                       // 2813\n\tconstructor: function() {                                                                                             // 2814\n\t\tRowRenderer.apply(this, arguments); // call the super-constructor                                                    // 2815\n                                                                                                                       // 2816\n\t\tthis.coordMap = new GridCoordMap(this);                                                                              // 2817\n\t\tthis.elsByFill = {};                                                                                                 // 2818\n\t\tthis.externalDragStartProxy = proxy(this, 'externalDragStart');                                                      // 2819\n\t},                                                                                                                    // 2820\n                                                                                                                       // 2821\n                                                                                                                       // 2822\n\t/* Options                                                                                                            // 2823\n\t------------------------------------------------------------------------------------------------------------------*/  // 2824\n                                                                                                                       // 2825\n                                                                                                                       // 2826\n\t// Generates the format string used for the text in column headers, if not explicitly defined by 'columnFormat'       // 2827\n\t// TODO: move to another class. not applicable to all Grids                                                           // 2828\n\tcomputeColHeadFormat: function() {                                                                                    // 2829\n\t\t// subclasses must implement if they want to use headHtml()                                                          // 2830\n\t},                                                                                                                    // 2831\n                                                                                                                       // 2832\n                                                                                                                       // 2833\n\t// Generates the format string used for event time text, if not explicitly defined by 'timeFormat'                    // 2834\n\tcomputeEventTimeFormat: function() {                                                                                  // 2835\n\t\treturn this.view.opt('smallTimeFormat');                                                                             // 2836\n\t},                                                                                                                    // 2837\n                                                                                                                       // 2838\n                                                                                                                       // 2839\n\t// Determines whether events should have their end times displayed, if not explicitly defined by 'displayEventTime'.  // 2840\n\t// Only applies to non-all-day events.                                                                                // 2841\n\tcomputeDisplayEventTime: function() {                                                                                 // 2842\n\t\treturn true;                                                                                                         // 2843\n\t},                                                                                                                    // 2844\n                                                                                                                       // 2845\n                                                                                                                       // 2846\n\t// Determines whether events should have their end times displayed, if not explicitly defined by 'displayEventEnd'    // 2847\n\tcomputeDisplayEventEnd: function() {                                                                                  // 2848\n\t\treturn true;                                                                                                         // 2849\n\t},                                                                                                                    // 2850\n                                                                                                                       // 2851\n                                                                                                                       // 2852\n\t/* Dates                                                                                                              // 2853\n\t------------------------------------------------------------------------------------------------------------------*/  // 2854\n                                                                                                                       // 2855\n                                                                                                                       // 2856\n\t// Tells the grid about what period of time to display. Grid will subsequently compute dates for cell system.         // 2857\n\tsetRange: function(range) {                                                                                           // 2858\n\t\tvar view = this.view;                                                                                                // 2859\n\t\tvar displayEventTime;                                                                                                // 2860\n\t\tvar displayEventEnd;                                                                                                 // 2861\n                                                                                                                       // 2862\n\t\tthis.start = range.start.clone();                                                                                    // 2863\n\t\tthis.end = range.end.clone();                                                                                        // 2864\n                                                                                                                       // 2865\n\t\tthis.rowData = [];                                                                                                   // 2866\n\t\tthis.colData = [];                                                                                                   // 2867\n\t\tthis.updateCells();                                                                                                  // 2868\n                                                                                                                       // 2869\n\t\t// Populate option-derived settings. Look for override first, then compute if necessary.                             // 2870\n\t\tthis.colHeadFormat = view.opt('columnFormat') || this.computeColHeadFormat();                                        // 2871\n                                                                                                                       // 2872\n\t\tthis.eventTimeFormat =                                                                                               // 2873\n\t\t\tview.opt('eventTimeFormat') ||                                                                                      // 2874\n\t\t\tview.opt('timeFormat') || // deprecated                                                                             // 2875\n\t\t\tthis.computeEventTimeFormat();                                                                                      // 2876\n                                                                                                                       // 2877\n\t\tdisplayEventTime = view.opt('displayEventTime');                                                                     // 2878\n\t\tif (displayEventTime == null) {                                                                                      // 2879\n\t\t\tdisplayEventTime = this.computeDisplayEventTime(); // might be based off of range                                   // 2880\n\t\t}                                                                                                                    // 2881\n                                                                                                                       // 2882\n\t\tdisplayEventEnd = view.opt('displayEventEnd');                                                                       // 2883\n\t\tif (displayEventEnd == null) {                                                                                       // 2884\n\t\t\tdisplayEventEnd = this.computeDisplayEventEnd(); // might be based off of range                                     // 2885\n\t\t}                                                                                                                    // 2886\n                                                                                                                       // 2887\n\t\tthis.displayEventTime = displayEventTime;                                                                            // 2888\n\t\tthis.displayEventEnd = displayEventEnd;                                                                              // 2889\n\t},                                                                                                                    // 2890\n                                                                                                                       // 2891\n                                                                                                                       // 2892\n\t// Responsible for setting rowCnt/colCnt and any other row/col data                                                   // 2893\n\tupdateCells: function() {                                                                                             // 2894\n\t\t// subclasses must implement                                                                                         // 2895\n\t},                                                                                                                    // 2896\n                                                                                                                       // 2897\n                                                                                                                       // 2898\n\t// Converts a range with an inclusive `start` and an exclusive `end` into an array of segment objects                 // 2899\n\trangeToSegs: function(range) {                                                                                        // 2900\n\t\t// subclasses must implement                                                                                         // 2901\n\t},                                                                                                                    // 2902\n                                                                                                                       // 2903\n                                                                                                                       // 2904\n\t// Diffs the two dates, returning a duration, based on granularity of the grid                                        // 2905\n\tdiffDates: function(a, b) {                                                                                           // 2906\n\t\tif (this.largeUnit) {                                                                                                // 2907\n\t\t\treturn diffByUnit(a, b, this.largeUnit);                                                                            // 2908\n\t\t}                                                                                                                    // 2909\n\t\telse {                                                                                                               // 2910\n\t\t\treturn diffDayTime(a, b);                                                                                           // 2911\n\t\t}                                                                                                                    // 2912\n\t},                                                                                                                    // 2913\n                                                                                                                       // 2914\n                                                                                                                       // 2915\n\t/* Cells                                                                                                              // 2916\n\t------------------------------------------------------------------------------------------------------------------*/  // 2917\n\t// NOTE: columns are ordered left-to-right                                                                            // 2918\n                                                                                                                       // 2919\n                                                                                                                       // 2920\n\t// Gets an object containing row/col number, misc data, and range information about the cell.                         // 2921\n\t// Accepts row/col values, an object with row/col properties, or a single-number offset from the first cell.          // 2922\n\tgetCell: function(row, col) {                                                                                         // 2923\n\t\tvar cell;                                                                                                            // 2924\n                                                                                                                       // 2925\n\t\tif (col == null) {                                                                                                   // 2926\n\t\t\tif (typeof row === 'number') { // a single-number offset                                                            // 2927\n\t\t\t\tcol = row % this.colCnt;                                                                                           // 2928\n\t\t\t\trow = Math.floor(row / this.colCnt);                                                                               // 2929\n\t\t\t}                                                                                                                   // 2930\n\t\t\telse { // an object with row/col properties                                                                         // 2931\n\t\t\t\tcol = row.col;                                                                                                     // 2932\n\t\t\t\trow = row.row;                                                                                                     // 2933\n\t\t\t}                                                                                                                   // 2934\n\t\t}                                                                                                                    // 2935\n                                                                                                                       // 2936\n\t\tcell = { row: row, col: col };                                                                                       // 2937\n                                                                                                                       // 2938\n\t\t$.extend(cell, this.getRowData(row), this.getColData(col));                                                          // 2939\n\t\t$.extend(cell, this.computeCellRange(cell));                                                                         // 2940\n                                                                                                                       // 2941\n\t\treturn cell;                                                                                                         // 2942\n\t},                                                                                                                    // 2943\n                                                                                                                       // 2944\n                                                                                                                       // 2945\n\t// Given a cell object with index and misc data, generates a range object                                             // 2946\n\t// If the grid is leveraging cellDuration, this doesn't need to be defined. Only computeCellDate does.                // 2947\n\t// If being overridden, should return a range with reference-free date copies.                                        // 2948\n\tcomputeCellRange: function(cell) {                                                                                    // 2949\n\t\tvar date = this.computeCellDate(cell);                                                                               // 2950\n                                                                                                                       // 2951\n\t\treturn {                                                                                                             // 2952\n\t\t\tstart: date,                                                                                                        // 2953\n\t\t\tend: date.clone().add(this.cellDuration)                                                                            // 2954\n\t\t};                                                                                                                   // 2955\n\t},                                                                                                                    // 2956\n                                                                                                                       // 2957\n                                                                                                                       // 2958\n\t// Given a cell, returns its start date. Should return a reference-free date copy.                                    // 2959\n\tcomputeCellDate: function(cell) {                                                                                     // 2960\n\t\t// subclasses can implement                                                                                          // 2961\n\t},                                                                                                                    // 2962\n                                                                                                                       // 2963\n                                                                                                                       // 2964\n\t// Retrieves misc data about the given row                                                                            // 2965\n\tgetRowData: function(row) {                                                                                           // 2966\n\t\treturn this.rowData[row] || {};                                                                                      // 2967\n\t},                                                                                                                    // 2968\n                                                                                                                       // 2969\n                                                                                                                       // 2970\n\t// Retrieves misc data baout the given column                                                                         // 2971\n\tgetColData: function(col) {                                                                                           // 2972\n\t\treturn this.colData[col] || {};                                                                                      // 2973\n\t},                                                                                                                    // 2974\n                                                                                                                       // 2975\n                                                                                                                       // 2976\n\t// Retrieves the element representing the given row                                                                   // 2977\n\tgetRowEl: function(row) {                                                                                             // 2978\n\t\t// subclasses should implement if leveraging the default getCellDayEl() or computeRowCoords()                        // 2979\n\t},                                                                                                                    // 2980\n                                                                                                                       // 2981\n                                                                                                                       // 2982\n\t// Retrieves the element representing the given column                                                                // 2983\n\tgetColEl: function(col) {                                                                                             // 2984\n\t\t// subclasses should implement if leveraging the default getCellDayEl() or computeColCoords()                        // 2985\n\t},                                                                                                                    // 2986\n                                                                                                                       // 2987\n                                                                                                                       // 2988\n\t// Given a cell object, returns the element that represents the cell's whole-day                                      // 2989\n\tgetCellDayEl: function(cell) {                                                                                        // 2990\n\t\treturn this.getColEl(cell.col) || this.getRowEl(cell.row);                                                           // 2991\n\t},                                                                                                                    // 2992\n                                                                                                                       // 2993\n                                                                                                                       // 2994\n\t/* Cell Coordinates                                                                                                   // 2995\n\t------------------------------------------------------------------------------------------------------------------*/  // 2996\n                                                                                                                       // 2997\n                                                                                                                       // 2998\n\t// Computes the top/bottom coordinates of all rows.                                                                   // 2999\n\t// By default, queries the dimensions of the element provided by getRowEl().                                          // 3000\n\tcomputeRowCoords: function() {                                                                                        // 3001\n\t\tvar items = [];                                                                                                      // 3002\n\t\tvar i, el;                                                                                                           // 3003\n\t\tvar top;                                                                                                             // 3004\n                                                                                                                       // 3005\n\t\tfor (i = 0; i < this.rowCnt; i++) {                                                                                  // 3006\n\t\t\tel = this.getRowEl(i);                                                                                              // 3007\n\t\t\ttop = el.offset().top;                                                                                              // 3008\n\t\t\titems.push({                                                                                                        // 3009\n\t\t\t\ttop: top,                                                                                                          // 3010\n\t\t\t\tbottom: top + el.outerHeight()                                                                                     // 3011\n\t\t\t});                                                                                                                 // 3012\n\t\t}                                                                                                                    // 3013\n                                                                                                                       // 3014\n\t\treturn items;                                                                                                        // 3015\n\t},                                                                                                                    // 3016\n                                                                                                                       // 3017\n                                                                                                                       // 3018\n\t// Computes the left/right coordinates of all rows.                                                                   // 3019\n\t// By default, queries the dimensions of the element provided by getColEl(). Columns can be LTR or RTL.               // 3020\n\tcomputeColCoords: function() {                                                                                        // 3021\n\t\tvar items = [];                                                                                                      // 3022\n\t\tvar i, el;                                                                                                           // 3023\n\t\tvar left;                                                                                                            // 3024\n                                                                                                                       // 3025\n\t\tfor (i = 0; i < this.colCnt; i++) {                                                                                  // 3026\n\t\t\tel = this.getColEl(i);                                                                                              // 3027\n\t\t\tleft = el.offset().left;                                                                                            // 3028\n\t\t\titems.push({                                                                                                        // 3029\n\t\t\t\tleft: left,                                                                                                        // 3030\n\t\t\t\tright: left + el.outerWidth()                                                                                      // 3031\n\t\t\t});                                                                                                                 // 3032\n\t\t}                                                                                                                    // 3033\n                                                                                                                       // 3034\n\t\treturn items;                                                                                                        // 3035\n\t},                                                                                                                    // 3036\n                                                                                                                       // 3037\n                                                                                                                       // 3038\n\t/* Rendering                                                                                                          // 3039\n\t------------------------------------------------------------------------------------------------------------------*/  // 3040\n                                                                                                                       // 3041\n                                                                                                                       // 3042\n\t// Sets the container element that the grid should render inside of.                                                  // 3043\n\t// Does other DOM-related initializations.                                                                            // 3044\n\tsetElement: function(el) {                                                                                            // 3045\n\t\tvar _this = this;                                                                                                    // 3046\n                                                                                                                       // 3047\n\t\tthis.el = el;                                                                                                        // 3048\n                                                                                                                       // 3049\n\t\t// attach a handler to the grid's root element.                                                                      // 3050\n\t\t// jQuery will take care of unregistering them when removeElement gets called.                                       // 3051\n\t\tel.on('mousedown', function(ev) {                                                                                    // 3052\n\t\t\tif (                                                                                                                // 3053\n\t\t\t\t!$(ev.target).is('.fc-event-container *, .fc-more') && // not an an event element, or \"more..\" link                // 3054\n\t\t\t\t!$(ev.target).closest('.fc-popover').length // not on a popover (like the \"more..\" events one)                     // 3055\n\t\t\t) {                                                                                                                 // 3056\n\t\t\t\t_this.dayMousedown(ev);                                                                                            // 3057\n\t\t\t}                                                                                                                   // 3058\n\t\t});                                                                                                                  // 3059\n                                                                                                                       // 3060\n\t\t// attach event-element-related handlers. in Grid.events                                                             // 3061\n\t\t// same garbage collection note as above.                                                                            // 3062\n\t\tthis.bindSegHandlers();                                                                                              // 3063\n                                                                                                                       // 3064\n\t\tthis.bindGlobalHandlers();                                                                                           // 3065\n\t},                                                                                                                    // 3066\n                                                                                                                       // 3067\n                                                                                                                       // 3068\n\t// Removes the grid's container element from the DOM. Undoes any other DOM-related attachments.                       // 3069\n\t// DOES NOT remove any content before hand (doens't clear events or call destroyDates), unlike View                   // 3070\n\tremoveElement: function() {                                                                                           // 3071\n\t\tthis.unbindGlobalHandlers();                                                                                         // 3072\n                                                                                                                       // 3073\n\t\tthis.el.remove();                                                                                                    // 3074\n                                                                                                                       // 3075\n\t\t// NOTE: we don't null-out this.el for the same reasons we don't do it within View::removeElement                    // 3076\n\t},                                                                                                                    // 3077\n                                                                                                                       // 3078\n                                                                                                                       // 3079\n\t// Renders the basic structure of grid view before any content is rendered                                            // 3080\n\trenderSkeleton: function() {                                                                                          // 3081\n\t\t// subclasses should implement                                                                                       // 3082\n\t},                                                                                                                    // 3083\n                                                                                                                       // 3084\n                                                                                                                       // 3085\n\t// Renders the grid's date-related content (like cells that represent days/times).                                    // 3086\n\t// Assumes setRange has already been called and the skeleton has already been rendered.                               // 3087\n\trenderDates: function() {                                                                                             // 3088\n\t\t// subclasses should implement                                                                                       // 3089\n\t},                                                                                                                    // 3090\n                                                                                                                       // 3091\n                                                                                                                       // 3092\n\t// Unrenders the grid's date-related content                                                                          // 3093\n\tdestroyDates: function() {                                                                                            // 3094\n\t\t// subclasses should implement                                                                                       // 3095\n\t},                                                                                                                    // 3096\n                                                                                                                       // 3097\n                                                                                                                       // 3098\n\t/* Handlers                                                                                                           // 3099\n\t------------------------------------------------------------------------------------------------------------------*/  // 3100\n                                                                                                                       // 3101\n                                                                                                                       // 3102\n\t// Binds DOM handlers to elements that reside outside the grid, such as the document                                  // 3103\n\tbindGlobalHandlers: function() {                                                                                      // 3104\n\t\t$(document).on('dragstart sortstart', this.externalDragStartProxy); // jqui                                          // 3105\n\t},                                                                                                                    // 3106\n                                                                                                                       // 3107\n                                                                                                                       // 3108\n\t// Unbinds DOM handlers from elements that reside outside the grid                                                    // 3109\n\tunbindGlobalHandlers: function() {                                                                                    // 3110\n\t\t$(document).off('dragstart sortstart', this.externalDragStartProxy); // jqui                                         // 3111\n\t},                                                                                                                    // 3112\n                                                                                                                       // 3113\n                                                                                                                       // 3114\n\t// Process a mousedown on an element that represents a day. For day clicking and selecting.                           // 3115\n\tdayMousedown: function(ev) {                                                                                          // 3116\n\t\tvar _this = this;                                                                                                    // 3117\n\t\tvar view = this.view;                                                                                                // 3118\n\t\tvar isSelectable = view.opt('selectable');                                                                           // 3119\n\t\tvar dayClickCell; // null if invalid dayClick                                                                        // 3120\n\t\tvar selectionRange; // null if invalid selection                                                                     // 3121\n                                                                                                                       // 3122\n\t\t// this listener tracks a mousedown on a day element, and a subsequent drag.                                         // 3123\n\t\t// if the drag ends on the same day, it is a 'dayClick'.                                                             // 3124\n\t\t// if 'selectable' is enabled, this listener also detects selections.                                                // 3125\n\t\tvar dragListener = new CellDragListener(this.coordMap, {                                                             // 3126\n\t\t\t//distance: 5, // needs more work if we want dayClick to fire correctly                                             // 3127\n\t\t\tscroll: view.opt('dragScroll'),                                                                                     // 3128\n\t\t\tdragStart: function() {                                                                                             // 3129\n\t\t\t\tview.unselect(); // since we could be rendering a new selection, we want to clear any old one                      // 3130\n\t\t\t},                                                                                                                  // 3131\n\t\t\tcellOver: function(cell, isOrig, origCell) {                                                                        // 3132\n\t\t\t\tif (origCell) { // click needs to have started on a cell                                                           // 3133\n\t\t\t\t\tdayClickCell = isOrig ? cell : null; // single-cell selection is a day click                                      // 3134\n\t\t\t\t\tif (isSelectable) {                                                                                               // 3135\n\t\t\t\t\t\tselectionRange = _this.computeSelection(origCell, cell);                                                         // 3136\n\t\t\t\t\t\tif (selectionRange) {                                                                                            // 3137\n\t\t\t\t\t\t\t_this.renderSelection(selectionRange);                                                                          // 3138\n\t\t\t\t\t\t}                                                                                                                // 3139\n\t\t\t\t\t\telse {                                                                                                           // 3140\n\t\t\t\t\t\t\tdisableCursor();                                                                                                // 3141\n\t\t\t\t\t\t}                                                                                                                // 3142\n\t\t\t\t\t}                                                                                                                 // 3143\n\t\t\t\t}                                                                                                                  // 3144\n\t\t\t},                                                                                                                  // 3145\n\t\t\tcellOut: function(cell) {                                                                                           // 3146\n\t\t\t\tdayClickCell = null;                                                                                               // 3147\n\t\t\t\tselectionRange = null;                                                                                             // 3148\n\t\t\t\t_this.destroySelection();                                                                                          // 3149\n\t\t\t\tenableCursor();                                                                                                    // 3150\n\t\t\t},                                                                                                                  // 3151\n\t\t\tlistenStop: function(ev) {                                                                                          // 3152\n\t\t\t\tif (dayClickCell) {                                                                                                // 3153\n\t\t\t\t\tview.trigger('dayClick', _this.getCellDayEl(dayClickCell), dayClickCell.start, ev);                               // 3154\n\t\t\t\t}                                                                                                                  // 3155\n\t\t\t\tif (selectionRange) {                                                                                              // 3156\n\t\t\t\t\t// the selection will already have been rendered. just report it                                                  // 3157\n\t\t\t\t\tview.reportSelection(selectionRange, ev);                                                                         // 3158\n\t\t\t\t}                                                                                                                  // 3159\n\t\t\t\tenableCursor();                                                                                                    // 3160\n\t\t\t}                                                                                                                   // 3161\n\t\t});                                                                                                                  // 3162\n                                                                                                                       // 3163\n\t\tdragListener.mousedown(ev); // start listening, which will eventually initiate a dragStart                           // 3164\n\t},                                                                                                                    // 3165\n                                                                                                                       // 3166\n                                                                                                                       // 3167\n\t/* Event Helper                                                                                                       // 3168\n\t------------------------------------------------------------------------------------------------------------------*/  // 3169\n\t// TODO: should probably move this to Grid.events, like we did event dragging / resizing                              // 3170\n                                                                                                                       // 3171\n                                                                                                                       // 3172\n\t// Renders a mock event over the given range                                                                          // 3173\n\trenderRangeHelper: function(range, sourceSeg) {                                                                       // 3174\n\t\tvar fakeEvent = this.fabricateHelperEvent(range, sourceSeg);                                                         // 3175\n                                                                                                                       // 3176\n\t\tthis.renderHelper(fakeEvent, sourceSeg); // do the actual rendering                                                  // 3177\n\t},                                                                                                                    // 3178\n                                                                                                                       // 3179\n                                                                                                                       // 3180\n\t// Builds a fake event given a date range it should cover, and a segment is should be inspired from.                  // 3181\n\t// The range's end can be null, in which case the mock event that is rendered will have a null end time.              // 3182\n\t// `sourceSeg` is the internal segment object involved in the drag. If null, something external is dragging.          // 3183\n\tfabricateHelperEvent: function(range, sourceSeg) {                                                                    // 3184\n\t\tvar fakeEvent = sourceSeg ? createObject(sourceSeg.event) : {}; // mask the original event object if possible        // 3185\n                                                                                                                       // 3186\n\t\tfakeEvent.start = range.start.clone();                                                                               // 3187\n\t\tfakeEvent.end = range.end ? range.end.clone() : null;                                                                // 3188\n\t\tfakeEvent.allDay = null; // force it to be freshly computed by normalizeEventRange                                   // 3189\n\t\tthis.view.calendar.normalizeEventRange(fakeEvent);                                                                   // 3190\n                                                                                                                       // 3191\n\t\t// this extra className will be useful for differentiating real events from mock events in CSS                       // 3192\n\t\tfakeEvent.className = (fakeEvent.className || []).concat('fc-helper');                                               // 3193\n                                                                                                                       // 3194\n\t\t// if something external is being dragged in, don't render a resizer                                                 // 3195\n\t\tif (!sourceSeg) {                                                                                                    // 3196\n\t\t\tfakeEvent.editable = false;                                                                                         // 3197\n\t\t}                                                                                                                    // 3198\n                                                                                                                       // 3199\n\t\treturn fakeEvent;                                                                                                    // 3200\n\t},                                                                                                                    // 3201\n                                                                                                                       // 3202\n                                                                                                                       // 3203\n\t// Renders a mock event                                                                                               // 3204\n\trenderHelper: function(event, sourceSeg) {                                                                            // 3205\n\t\t// subclasses must implement                                                                                         // 3206\n\t},                                                                                                                    // 3207\n                                                                                                                       // 3208\n                                                                                                                       // 3209\n\t// Unrenders a mock event                                                                                             // 3210\n\tdestroyHelper: function() {                                                                                           // 3211\n\t\t// subclasses must implement                                                                                         // 3212\n\t},                                                                                                                    // 3213\n                                                                                                                       // 3214\n                                                                                                                       // 3215\n\t/* Selection                                                                                                          // 3216\n\t------------------------------------------------------------------------------------------------------------------*/  // 3217\n                                                                                                                       // 3218\n                                                                                                                       // 3219\n\t// Renders a visual indication of a selection. Will highlight by default but can be overridden by subclasses.         // 3220\n\trenderSelection: function(range) {                                                                                    // 3221\n\t\tthis.renderHighlight(range);                                                                                         // 3222\n\t},                                                                                                                    // 3223\n                                                                                                                       // 3224\n                                                                                                                       // 3225\n\t// Unrenders any visual indications of a selection. Will unrender a highlight by default.                             // 3226\n\tdestroySelection: function() {                                                                                        // 3227\n\t\tthis.destroyHighlight();                                                                                             // 3228\n\t},                                                                                                                    // 3229\n                                                                                                                       // 3230\n                                                                                                                       // 3231\n\t// Given the first and last cells of a selection, returns a range object.                                             // 3232\n\t// Will return something falsy if the selection is invalid (when outside of selectionConstraint for example).         // 3233\n\t// Subclasses can override and provide additional data in the range object. Will be passed to renderSelection().      // 3234\n\tcomputeSelection: function(firstCell, lastCell) {                                                                     // 3235\n\t\tvar dates = [                                                                                                        // 3236\n\t\t\tfirstCell.start,                                                                                                    // 3237\n\t\t\tfirstCell.end,                                                                                                      // 3238\n\t\t\tlastCell.start,                                                                                                     // 3239\n\t\t\tlastCell.end                                                                                                        // 3240\n\t\t];                                                                                                                   // 3241\n\t\tvar range;                                                                                                           // 3242\n                                                                                                                       // 3243\n\t\tdates.sort(compareNumbers); // sorts chronologically. works with Moments                                             // 3244\n                                                                                                                       // 3245\n\t\trange = {                                                                                                            // 3246\n\t\t\tstart: dates[0].clone(),                                                                                            // 3247\n\t\t\tend: dates[3].clone()                                                                                               // 3248\n\t\t};                                                                                                                   // 3249\n                                                                                                                       // 3250\n\t\tif (!this.view.calendar.isSelectionRangeAllowed(range)) {                                                            // 3251\n\t\t\treturn null;                                                                                                        // 3252\n\t\t}                                                                                                                    // 3253\n                                                                                                                       // 3254\n\t\treturn range;                                                                                                        // 3255\n\t},                                                                                                                    // 3256\n                                                                                                                       // 3257\n                                                                                                                       // 3258\n\t/* Highlight                                                                                                          // 3259\n\t------------------------------------------------------------------------------------------------------------------*/  // 3260\n                                                                                                                       // 3261\n                                                                                                                       // 3262\n\t// Renders an emphasis on the given date range. `start` is inclusive. `end` is exclusive.                             // 3263\n\trenderHighlight: function(range) {                                                                                    // 3264\n\t\tthis.renderFill('highlight', this.rangeToSegs(range));                                                               // 3265\n\t},                                                                                                                    // 3266\n                                                                                                                       // 3267\n                                                                                                                       // 3268\n\t// Unrenders the emphasis on a date range                                                                             // 3269\n\tdestroyHighlight: function() {                                                                                        // 3270\n\t\tthis.destroyFill('highlight');                                                                                       // 3271\n\t},                                                                                                                    // 3272\n                                                                                                                       // 3273\n                                                                                                                       // 3274\n\t// Generates an array of classNames for rendering the highlight. Used by the fill system.                             // 3275\n\thighlightSegClasses: function() {                                                                                     // 3276\n\t\treturn [ 'fc-highlight' ];                                                                                           // 3277\n\t},                                                                                                                    // 3278\n                                                                                                                       // 3279\n                                                                                                                       // 3280\n\t/* Fill System (highlight, background events, business hours)                                                         // 3281\n\t------------------------------------------------------------------------------------------------------------------*/  // 3282\n                                                                                                                       // 3283\n                                                                                                                       // 3284\n\t// Renders a set of rectangles over the given segments of time.                                                       // 3285\n\t// Returns a subset of segs, the segs that were actually rendered.                                                    // 3286\n\t// Responsible for populating this.elsByFill. TODO: better API for expressing this requirement                        // 3287\n\trenderFill: function(type, segs) {                                                                                    // 3288\n\t\t// subclasses must implement                                                                                         // 3289\n\t},                                                                                                                    // 3290\n                                                                                                                       // 3291\n                                                                                                                       // 3292\n\t// Unrenders a specific type of fill that is currently rendered on the grid                                           // 3293\n\tdestroyFill: function(type) {                                                                                         // 3294\n\t\tvar el = this.elsByFill[type];                                                                                       // 3295\n                                                                                                                       // 3296\n\t\tif (el) {                                                                                                            // 3297\n\t\t\tel.remove();                                                                                                        // 3298\n\t\t\tdelete this.elsByFill[type];                                                                                        // 3299\n\t\t}                                                                                                                    // 3300\n\t},                                                                                                                    // 3301\n                                                                                                                       // 3302\n                                                                                                                       // 3303\n\t// Renders and assigns an `el` property for each fill segment. Generic enough to work with different types.           // 3304\n\t// Only returns segments that successfully rendered.                                                                  // 3305\n\t// To be harnessed by renderFill (implemented by subclasses).                                                         // 3306\n\t// Analagous to renderFgSegEls.                                                                                       // 3307\n\trenderFillSegEls: function(type, segs) {                                                                              // 3308\n\t\tvar _this = this;                                                                                                    // 3309\n\t\tvar segElMethod = this[type + 'SegEl'];                                                                              // 3310\n\t\tvar html = '';                                                                                                       // 3311\n\t\tvar renderedSegs = [];                                                                                               // 3312\n\t\tvar i;                                                                                                               // 3313\n                                                                                                                       // 3314\n\t\tif (segs.length) {                                                                                                   // 3315\n                                                                                                                       // 3316\n\t\t\t// build a large concatenation of segment HTML                                                                      // 3317\n\t\t\tfor (i = 0; i < segs.length; i++) {                                                                                 // 3318\n\t\t\t\thtml += this.fillSegHtml(type, segs[i]);                                                                           // 3319\n\t\t\t}                                                                                                                   // 3320\n                                                                                                                       // 3321\n\t\t\t// Grab individual elements from the combined HTML string. Use each as the default rendering.                       // 3322\n\t\t\t// Then, compute the 'el' for each segment.                                                                         // 3323\n\t\t\t$(html).each(function(i, node) {                                                                                    // 3324\n\t\t\t\tvar seg = segs[i];                                                                                                 // 3325\n\t\t\t\tvar el = $(node);                                                                                                  // 3326\n                                                                                                                       // 3327\n\t\t\t\t// allow custom filter methods per-type                                                                            // 3328\n\t\t\t\tif (segElMethod) {                                                                                                 // 3329\n\t\t\t\t\tel = segElMethod.call(_this, seg, el);                                                                            // 3330\n\t\t\t\t}                                                                                                                  // 3331\n                                                                                                                       // 3332\n\t\t\t\tif (el) { // custom filters did not cancel the render                                                              // 3333\n\t\t\t\t\tel = $(el); // allow custom filter to return raw DOM node                                                         // 3334\n                                                                                                                       // 3335\n\t\t\t\t\t// correct element type? (would be bad if a non-TD were inserted into a table for example)                        // 3336\n\t\t\t\t\tif (el.is(_this.fillSegTag)) {                                                                                    // 3337\n\t\t\t\t\t\tseg.el = el;                                                                                                     // 3338\n\t\t\t\t\t\trenderedSegs.push(seg);                                                                                          // 3339\n\t\t\t\t\t}                                                                                                                 // 3340\n\t\t\t\t}                                                                                                                  // 3341\n\t\t\t});                                                                                                                 // 3342\n\t\t}                                                                                                                    // 3343\n                                                                                                                       // 3344\n\t\treturn renderedSegs;                                                                                                 // 3345\n\t},                                                                                                                    // 3346\n                                                                                                                       // 3347\n                                                                                                                       // 3348\n\tfillSegTag: 'div', // subclasses can override                                                                         // 3349\n                                                                                                                       // 3350\n                                                                                                                       // 3351\n\t// Builds the HTML needed for one fill segment. Generic enought o work with different types.                          // 3352\n\tfillSegHtml: function(type, seg) {                                                                                    // 3353\n                                                                                                                       // 3354\n\t\t// custom hooks per-type                                                                                             // 3355\n\t\tvar classesMethod = this[type + 'SegClasses'];                                                                       // 3356\n\t\tvar cssMethod = this[type + 'SegCss'];                                                                               // 3357\n                                                                                                                       // 3358\n\t\tvar classes = classesMethod ? classesMethod.call(this, seg) : [];                                                    // 3359\n\t\tvar css = cssToStr(cssMethod ? cssMethod.call(this, seg) : {});                                                      // 3360\n                                                                                                                       // 3361\n\t\treturn '<' + this.fillSegTag +                                                                                       // 3362\n\t\t\t(classes.length ? ' class=\"' + classes.join(' ') + '\"' : '') +                                                      // 3363\n\t\t\t(css ? ' style=\"' + css + '\"' : '') +                                                                               // 3364\n\t\t\t' />';                                                                                                              // 3365\n\t},                                                                                                                    // 3366\n                                                                                                                       // 3367\n                                                                                                                       // 3368\n\t/* Generic rendering utilities for subclasses                                                                         // 3369\n\t------------------------------------------------------------------------------------------------------------------*/  // 3370\n                                                                                                                       // 3371\n                                                                                                                       // 3372\n\t// Renders a day-of-week header row.                                                                                  // 3373\n\t// TODO: move to another class. not applicable to all Grids                                                           // 3374\n\theadHtml: function() {                                                                                                // 3375\n\t\treturn '' +                                                                                                          // 3376\n\t\t\t'<div class=\"fc-row ' + this.view.widgetHeaderClass + '\">' +                                                        // 3377\n\t\t\t\t'<table>' +                                                                                                        // 3378\n\t\t\t\t\t'<thead>' +                                                                                                       // 3379\n\t\t\t\t\t\tthis.rowHtml('head') + // leverages RowRenderer                                                                  // 3380\n\t\t\t\t\t'</thead>' +                                                                                                      // 3381\n\t\t\t\t'</table>' +                                                                                                       // 3382\n\t\t\t'</div>';                                                                                                           // 3383\n\t},                                                                                                                    // 3384\n                                                                                                                       // 3385\n                                                                                                                       // 3386\n\t// Used by the `headHtml` method, via RowRenderer, for rendering the HTML of a day-of-week header cell                // 3387\n\t// TODO: move to another class. not applicable to all Grids                                                           // 3388\n\theadCellHtml: function(cell) {                                                                                        // 3389\n\t\tvar view = this.view;                                                                                                // 3390\n\t\tvar date = cell.start;                                                                                               // 3391\n                                                                                                                       // 3392\n\t\treturn '' +                                                                                                          // 3393\n\t\t\t'<th class=\"fc-day-header ' + view.widgetHeaderClass + ' fc-' + dayIDs[date.day()] + '\">' +                         // 3394\n\t\t\t\thtmlEscape(date.format(this.colHeadFormat)) +                                                                      // 3395\n\t\t\t'</th>';                                                                                                            // 3396\n\t},                                                                                                                    // 3397\n                                                                                                                       // 3398\n                                                                                                                       // 3399\n\t// Renders the HTML for a single-day background cell                                                                  // 3400\n\tbgCellHtml: function(cell) {                                                                                          // 3401\n\t\tvar view = this.view;                                                                                                // 3402\n\t\tvar date = cell.start;                                                                                               // 3403\n\t\tvar classes = this.getDayClasses(date);                                                                              // 3404\n                                                                                                                       // 3405\n\t\tclasses.unshift('fc-day', view.widgetContentClass);                                                                  // 3406\n                                                                                                                       // 3407\n\t\treturn '<td class=\"' + classes.join(' ') + '\"' +                                                                     // 3408\n\t\t\t' data-date=\"' + date.format('YYYY-MM-DD') + '\"' + // if date has a time, won't format it                           // 3409\n\t\t\t'></td>';                                                                                                           // 3410\n\t},                                                                                                                    // 3411\n                                                                                                                       // 3412\n                                                                                                                       // 3413\n\t// Computes HTML classNames for a single-day cell                                                                     // 3414\n\tgetDayClasses: function(date) {                                                                                       // 3415\n\t\tvar view = this.view;                                                                                                // 3416\n\t\tvar today = view.calendar.getNow().stripTime();                                                                      // 3417\n\t\tvar classes = [ 'fc-' + dayIDs[date.day()] ];                                                                        // 3418\n                                                                                                                       // 3419\n\t\tif (                                                                                                                 // 3420\n\t\t\tview.intervalDuration.as('months') == 1 &&                                                                          // 3421\n\t\t\tdate.month() != view.intervalStart.month()                                                                          // 3422\n\t\t) {                                                                                                                  // 3423\n\t\t\tclasses.push('fc-other-month');                                                                                     // 3424\n\t\t}                                                                                                                    // 3425\n                                                                                                                       // 3426\n\t\tif (date.isSame(today, 'day')) {                                                                                     // 3427\n\t\t\tclasses.push(                                                                                                       // 3428\n\t\t\t\t'fc-today',                                                                                                        // 3429\n\t\t\t\tview.highlightStateClass                                                                                           // 3430\n\t\t\t);                                                                                                                  // 3431\n\t\t}                                                                                                                    // 3432\n\t\telse if (date < today) {                                                                                             // 3433\n\t\t\tclasses.push('fc-past');                                                                                            // 3434\n\t\t}                                                                                                                    // 3435\n\t\telse {                                                                                                               // 3436\n\t\t\tclasses.push('fc-future');                                                                                          // 3437\n\t\t}                                                                                                                    // 3438\n                                                                                                                       // 3439\n\t\treturn classes;                                                                                                      // 3440\n\t}                                                                                                                     // 3441\n                                                                                                                       // 3442\n});                                                                                                                    // 3443\n                                                                                                                       // 3444\n;;                                                                                                                     // 3445\n                                                                                                                       // 3446\n/* Event-rendering and event-interaction methods for the abstract Grid class                                           // 3447\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 3449\nGrid.mixin({                                                                                                           // 3450\n                                                                                                                       // 3451\n\tmousedOverSeg: null, // the segment object the user's mouse is over. null if over nothing                             // 3452\n\tisDraggingSeg: false, // is a segment being dragged? boolean                                                          // 3453\n\tisResizingSeg: false, // is a segment being resized? boolean                                                          // 3454\n\tisDraggingExternal: false, // jqui-dragging an external element? boolean                                              // 3455\n\tsegs: null, // the event segments currently rendered in the grid                                                      // 3456\n                                                                                                                       // 3457\n                                                                                                                       // 3458\n\t// Renders the given events onto the grid                                                                             // 3459\n\trenderEvents: function(events) {                                                                                      // 3460\n\t\tvar segs = this.eventsToSegs(events);                                                                                // 3461\n\t\tvar bgSegs = [];                                                                                                     // 3462\n\t\tvar fgSegs = [];                                                                                                     // 3463\n\t\tvar i, seg;                                                                                                          // 3464\n                                                                                                                       // 3465\n\t\tfor (i = 0; i < segs.length; i++) {                                                                                  // 3466\n\t\t\tseg = segs[i];                                                                                                      // 3467\n                                                                                                                       // 3468\n\t\t\tif (isBgEvent(seg.event)) {                                                                                         // 3469\n\t\t\t\tbgSegs.push(seg);                                                                                                  // 3470\n\t\t\t}                                                                                                                   // 3471\n\t\t\telse {                                                                                                              // 3472\n\t\t\t\tfgSegs.push(seg);                                                                                                  // 3473\n\t\t\t}                                                                                                                   // 3474\n\t\t}                                                                                                                    // 3475\n                                                                                                                       // 3476\n\t\t// Render each different type of segment.                                                                            // 3477\n\t\t// Each function may return a subset of the segs, segs that were actually rendered.                                  // 3478\n\t\tbgSegs = this.renderBgSegs(bgSegs) || bgSegs;                                                                        // 3479\n\t\tfgSegs = this.renderFgSegs(fgSegs) || fgSegs;                                                                        // 3480\n                                                                                                                       // 3481\n\t\tthis.segs = bgSegs.concat(fgSegs);                                                                                   // 3482\n\t},                                                                                                                    // 3483\n                                                                                                                       // 3484\n                                                                                                                       // 3485\n\t// Unrenders all events currently rendered on the grid                                                                // 3486\n\tdestroyEvents: function() {                                                                                           // 3487\n\t\tthis.triggerSegMouseout(); // trigger an eventMouseout if user's mouse is over an event                              // 3488\n                                                                                                                       // 3489\n\t\tthis.destroyFgSegs();                                                                                                // 3490\n\t\tthis.destroyBgSegs();                                                                                                // 3491\n                                                                                                                       // 3492\n\t\tthis.segs = null;                                                                                                    // 3493\n\t},                                                                                                                    // 3494\n                                                                                                                       // 3495\n                                                                                                                       // 3496\n\t// Retrieves all rendered segment objects currently rendered on the grid                                              // 3497\n\tgetEventSegs: function() {                                                                                            // 3498\n\t\treturn this.segs || [];                                                                                              // 3499\n\t},                                                                                                                    // 3500\n                                                                                                                       // 3501\n                                                                                                                       // 3502\n\t/* Foreground Segment Rendering                                                                                       // 3503\n\t------------------------------------------------------------------------------------------------------------------*/  // 3504\n                                                                                                                       // 3505\n                                                                                                                       // 3506\n\t// Renders foreground event segments onto the grid. May return a subset of segs that were rendered.                   // 3507\n\trenderFgSegs: function(segs) {                                                                                        // 3508\n\t\t// subclasses must implement                                                                                         // 3509\n\t},                                                                                                                    // 3510\n                                                                                                                       // 3511\n                                                                                                                       // 3512\n\t// Unrenders all currently rendered foreground segments                                                               // 3513\n\tdestroyFgSegs: function() {                                                                                           // 3514\n\t\t// subclasses must implement                                                                                         // 3515\n\t},                                                                                                                    // 3516\n                                                                                                                       // 3517\n                                                                                                                       // 3518\n\t// Renders and assigns an `el` property for each foreground event segment.                                            // 3519\n\t// Only returns segments that successfully rendered.                                                                  // 3520\n\t// A utility that subclasses may use.                                                                                 // 3521\n\trenderFgSegEls: function(segs, disableResizing) {                                                                     // 3522\n\t\tvar view = this.view;                                                                                                // 3523\n\t\tvar html = '';                                                                                                       // 3524\n\t\tvar renderedSegs = [];                                                                                               // 3525\n\t\tvar i;                                                                                                               // 3526\n                                                                                                                       // 3527\n\t\tif (segs.length) { // don't build an empty html string                                                               // 3528\n                                                                                                                       // 3529\n\t\t\t// build a large concatenation of event segment HTML                                                                // 3530\n\t\t\tfor (i = 0; i < segs.length; i++) {                                                                                 // 3531\n\t\t\t\thtml += this.fgSegHtml(segs[i], disableResizing);                                                                  // 3532\n\t\t\t}                                                                                                                   // 3533\n                                                                                                                       // 3534\n\t\t\t// Grab individual elements from the combined HTML string. Use each as the default rendering.                       // 3535\n\t\t\t// Then, compute the 'el' for each segment. An el might be null if the eventRender callback returned false.         // 3536\n\t\t\t$(html).each(function(i, node) {                                                                                    // 3537\n\t\t\t\tvar seg = segs[i];                                                                                                 // 3538\n\t\t\t\tvar el = view.resolveEventEl(seg.event, $(node));                                                                  // 3539\n                                                                                                                       // 3540\n\t\t\t\tif (el) {                                                                                                          // 3541\n\t\t\t\t\tel.data('fc-seg', seg); // used by handlers                                                                       // 3542\n\t\t\t\t\tseg.el = el;                                                                                                      // 3543\n\t\t\t\t\trenderedSegs.push(seg);                                                                                           // 3544\n\t\t\t\t}                                                                                                                  // 3545\n\t\t\t});                                                                                                                 // 3546\n\t\t}                                                                                                                    // 3547\n                                                                                                                       // 3548\n\t\treturn renderedSegs;                                                                                                 // 3549\n\t},                                                                                                                    // 3550\n                                                                                                                       // 3551\n                                                                                                                       // 3552\n\t// Generates the HTML for the default rendering of a foreground event segment. Used by renderFgSegEls()               // 3553\n\tfgSegHtml: function(seg, disableResizing) {                                                                           // 3554\n\t\t// subclasses should implement                                                                                       // 3555\n\t},                                                                                                                    // 3556\n                                                                                                                       // 3557\n                                                                                                                       // 3558\n\t/* Background Segment Rendering                                                                                       // 3559\n\t------------------------------------------------------------------------------------------------------------------*/  // 3560\n                                                                                                                       // 3561\n                                                                                                                       // 3562\n\t// Renders the given background event segments onto the grid.                                                         // 3563\n\t// Returns a subset of the segs that were actually rendered.                                                          // 3564\n\trenderBgSegs: function(segs) {                                                                                        // 3565\n\t\treturn this.renderFill('bgEvent', segs);                                                                             // 3566\n\t},                                                                                                                    // 3567\n                                                                                                                       // 3568\n                                                                                                                       // 3569\n\t// Unrenders all the currently rendered background event segments                                                     // 3570\n\tdestroyBgSegs: function() {                                                                                           // 3571\n\t\tthis.destroyFill('bgEvent');                                                                                         // 3572\n\t},                                                                                                                    // 3573\n                                                                                                                       // 3574\n                                                                                                                       // 3575\n\t// Renders a background event element, given the default rendering. Called by the fill system.                        // 3576\n\tbgEventSegEl: function(seg, el) {                                                                                     // 3577\n\t\treturn this.view.resolveEventEl(seg.event, el); // will filter through eventRender                                   // 3578\n\t},                                                                                                                    // 3579\n                                                                                                                       // 3580\n                                                                                                                       // 3581\n\t// Generates an array of classNames to be used for the default rendering of a background event.                       // 3582\n\t// Called by the fill system.                                                                                         // 3583\n\tbgEventSegClasses: function(seg) {                                                                                    // 3584\n\t\tvar event = seg.event;                                                                                               // 3585\n\t\tvar source = event.source || {};                                                                                     // 3586\n                                                                                                                       // 3587\n\t\treturn [ 'fc-bgevent' ].concat(                                                                                      // 3588\n\t\t\tevent.className,                                                                                                    // 3589\n\t\t\tsource.className || []                                                                                              // 3590\n\t\t);                                                                                                                   // 3591\n\t},                                                                                                                    // 3592\n                                                                                                                       // 3593\n                                                                                                                       // 3594\n\t// Generates a semicolon-separated CSS string to be used for the default rendering of a background event.             // 3595\n\t// Called by the fill system.                                                                                         // 3596\n\t// TODO: consolidate with getEventSkinCss?                                                                            // 3597\n\tbgEventSegCss: function(seg) {                                                                                        // 3598\n\t\tvar view = this.view;                                                                                                // 3599\n\t\tvar event = seg.event;                                                                                               // 3600\n\t\tvar source = event.source || {};                                                                                     // 3601\n                                                                                                                       // 3602\n\t\treturn {                                                                                                             // 3603\n\t\t\t'background-color':                                                                                                 // 3604\n\t\t\t\tevent.backgroundColor ||                                                                                           // 3605\n\t\t\t\tevent.color ||                                                                                                     // 3606\n\t\t\t\tsource.backgroundColor ||                                                                                          // 3607\n\t\t\t\tsource.color ||                                                                                                    // 3608\n\t\t\t\tview.opt('eventBackgroundColor') ||                                                                                // 3609\n\t\t\t\tview.opt('eventColor')                                                                                             // 3610\n\t\t};                                                                                                                   // 3611\n\t},                                                                                                                    // 3612\n                                                                                                                       // 3613\n                                                                                                                       // 3614\n\t// Generates an array of classNames to be used for the rendering business hours overlay. Called by the fill system.   // 3615\n\tbusinessHoursSegClasses: function(seg) {                                                                              // 3616\n\t\treturn [ 'fc-nonbusiness', 'fc-bgevent' ];                                                                           // 3617\n\t},                                                                                                                    // 3618\n                                                                                                                       // 3619\n                                                                                                                       // 3620\n\t/* Handlers                                                                                                           // 3621\n\t------------------------------------------------------------------------------------------------------------------*/  // 3622\n                                                                                                                       // 3623\n                                                                                                                       // 3624\n\t// Attaches event-element-related handlers to the container element and leverage bubbling                             // 3625\n\tbindSegHandlers: function() {                                                                                         // 3626\n\t\tvar _this = this;                                                                                                    // 3627\n\t\tvar view = this.view;                                                                                                // 3628\n                                                                                                                       // 3629\n\t\t$.each(                                                                                                              // 3630\n\t\t\t{                                                                                                                   // 3631\n\t\t\t\tmouseenter: function(seg, ev) {                                                                                    // 3632\n\t\t\t\t\t_this.triggerSegMouseover(seg, ev);                                                                               // 3633\n\t\t\t\t},                                                                                                                 // 3634\n\t\t\t\tmouseleave: function(seg, ev) {                                                                                    // 3635\n\t\t\t\t\t_this.triggerSegMouseout(seg, ev);                                                                                // 3636\n\t\t\t\t},                                                                                                                 // 3637\n\t\t\t\tclick: function(seg, ev) {                                                                                         // 3638\n\t\t\t\t\treturn view.trigger('eventClick', this, seg.event, ev); // can return `false` to cancel                           // 3639\n\t\t\t\t},                                                                                                                 // 3640\n\t\t\t\tmousedown: function(seg, ev) {                                                                                     // 3641\n\t\t\t\t\tif ($(ev.target).is('.fc-resizer') && view.isEventResizable(seg.event)) {                                         // 3642\n\t\t\t\t\t\t_this.segResizeMousedown(seg, ev, $(ev.target).is('.fc-start-resizer'));                                         // 3643\n\t\t\t\t\t}                                                                                                                 // 3644\n\t\t\t\t\telse if (view.isEventDraggable(seg.event)) {                                                                      // 3645\n\t\t\t\t\t\t_this.segDragMousedown(seg, ev);                                                                                 // 3646\n\t\t\t\t\t}                                                                                                                 // 3647\n\t\t\t\t}                                                                                                                  // 3648\n\t\t\t},                                                                                                                  // 3649\n\t\t\tfunction(name, func) {                                                                                              // 3650\n\t\t\t\t// attach the handler to the container element and only listen for real event elements via bubbling                // 3651\n\t\t\t\t_this.el.on(name, '.fc-event-container > *', function(ev) {                                                        // 3652\n\t\t\t\t\tvar seg = $(this).data('fc-seg'); // grab segment data. put there by View::renderEvents                           // 3653\n                                                                                                                       // 3654\n\t\t\t\t\t// only call the handlers if there is not a drag/resize in progress                                               // 3655\n\t\t\t\t\tif (seg && !_this.isDraggingSeg && !_this.isResizingSeg) {                                                        // 3656\n\t\t\t\t\t\treturn func.call(this, seg, ev); // `this` will be the event element                                             // 3657\n\t\t\t\t\t}                                                                                                                 // 3658\n\t\t\t\t});                                                                                                                // 3659\n\t\t\t}                                                                                                                   // 3660\n\t\t);                                                                                                                   // 3661\n\t},                                                                                                                    // 3662\n                                                                                                                       // 3663\n                                                                                                                       // 3664\n\t// Updates internal state and triggers handlers for when an event element is moused over                              // 3665\n\ttriggerSegMouseover: function(seg, ev) {                                                                              // 3666\n\t\tif (!this.mousedOverSeg) {                                                                                           // 3667\n\t\t\tthis.mousedOverSeg = seg;                                                                                           // 3668\n\t\t\tthis.view.trigger('eventMouseover', seg.el[0], seg.event, ev);                                                      // 3669\n\t\t}                                                                                                                    // 3670\n\t},                                                                                                                    // 3671\n                                                                                                                       // 3672\n                                                                                                                       // 3673\n\t// Updates internal state and triggers handlers for when an event element is moused out.                              // 3674\n\t// Can be given no arguments, in which case it will mouseout the segment that was previously moused over.             // 3675\n\ttriggerSegMouseout: function(seg, ev) {                                                                               // 3676\n\t\tev = ev || {}; // if given no args, make a mock mouse event                                                          // 3677\n                                                                                                                       // 3678\n\t\tif (this.mousedOverSeg) {                                                                                            // 3679\n\t\t\tseg = seg || this.mousedOverSeg; // if given no args, use the currently moused-over segment                         // 3680\n\t\t\tthis.mousedOverSeg = null;                                                                                          // 3681\n\t\t\tthis.view.trigger('eventMouseout', seg.el[0], seg.event, ev);                                                       // 3682\n\t\t}                                                                                                                    // 3683\n\t},                                                                                                                    // 3684\n                                                                                                                       // 3685\n                                                                                                                       // 3686\n\t/* Event Dragging                                                                                                     // 3687\n\t------------------------------------------------------------------------------------------------------------------*/  // 3688\n                                                                                                                       // 3689\n                                                                                                                       // 3690\n\t// Called when the user does a mousedown on an event, which might lead to dragging.                                   // 3691\n\t// Generic enough to work with any type of Grid.                                                                      // 3692\n\tsegDragMousedown: function(seg, ev) {                                                                                 // 3693\n\t\tvar _this = this;                                                                                                    // 3694\n\t\tvar view = this.view;                                                                                                // 3695\n\t\tvar calendar = view.calendar;                                                                                        // 3696\n\t\tvar el = seg.el;                                                                                                     // 3697\n\t\tvar event = seg.event;                                                                                               // 3698\n\t\tvar dropLocation;                                                                                                    // 3699\n                                                                                                                       // 3700\n\t\t// A clone of the original element that will move with the mouse                                                     // 3701\n\t\tvar mouseFollower = new MouseFollower(seg.el, {                                                                      // 3702\n\t\t\tparentEl: view.el,                                                                                                  // 3703\n\t\t\topacity: view.opt('dragOpacity'),                                                                                   // 3704\n\t\t\trevertDuration: view.opt('dragRevertDuration'),                                                                     // 3705\n\t\t\tzIndex: 2 // one above the .fc-view                                                                                 // 3706\n\t\t});                                                                                                                  // 3707\n                                                                                                                       // 3708\n\t\t// Tracks mouse movement over the *view's* coordinate map. Allows dragging and dropping between subcomponents        // 3709\n\t\t// of the view.                                                                                                      // 3710\n\t\tvar dragListener = new CellDragListener(view.coordMap, {                                                             // 3711\n\t\t\tdistance: 5,                                                                                                        // 3712\n\t\t\tscroll: view.opt('dragScroll'),                                                                                     // 3713\n\t\t\tsubjectEl: el,                                                                                                      // 3714\n\t\t\tsubjectCenter: true,                                                                                                // 3715\n\t\t\tlistenStart: function(ev) {                                                                                         // 3716\n\t\t\t\tmouseFollower.hide(); // don't show until we know this is a real drag                                              // 3717\n\t\t\t\tmouseFollower.start(ev);                                                                                           // 3718\n\t\t\t},                                                                                                                  // 3719\n\t\t\tdragStart: function(ev) {                                                                                           // 3720\n\t\t\t\t_this.triggerSegMouseout(seg, ev); // ensure a mouseout on the manipulated event has been reported                 // 3721\n\t\t\t\t_this.segDragStart(seg, ev);                                                                                       // 3722\n\t\t\t\tview.hideEvent(event); // hide all event segments. our mouseFollower will take over                                // 3723\n\t\t\t},                                                                                                                  // 3724\n\t\t\tcellOver: function(cell, isOrig, origCell) {                                                                        // 3725\n                                                                                                                       // 3726\n\t\t\t\t// starting cell could be forced (DayGrid.limit)                                                                   // 3727\n\t\t\t\tif (seg.cell) {                                                                                                    // 3728\n\t\t\t\t\torigCell = seg.cell;                                                                                              // 3729\n\t\t\t\t}                                                                                                                  // 3730\n                                                                                                                       // 3731\n\t\t\t\tdropLocation = _this.computeEventDrop(origCell, cell, event);                                                      // 3732\n                                                                                                                       // 3733\n\t\t\t\tif (dropLocation && !calendar.isEventRangeAllowed(dropLocation, event)) {                                          // 3734\n\t\t\t\t\tdisableCursor();                                                                                                  // 3735\n\t\t\t\t\tdropLocation = null;                                                                                              // 3736\n\t\t\t\t}                                                                                                                  // 3737\n                                                                                                                       // 3738\n\t\t\t\t// if a valid drop location, have the subclass render a visual indication                                          // 3739\n\t\t\t\tif (dropLocation && view.renderDrag(dropLocation, seg)) {                                                          // 3740\n\t\t\t\t\tmouseFollower.hide(); // if the subclass is already using a mock event \"helper\", hide our own                     // 3741\n\t\t\t\t}                                                                                                                  // 3742\n\t\t\t\telse {                                                                                                             // 3743\n\t\t\t\t\tmouseFollower.show(); // otherwise, have the helper follow the mouse (no snapping)                                // 3744\n\t\t\t\t}                                                                                                                  // 3745\n                                                                                                                       // 3746\n\t\t\t\tif (isOrig) {                                                                                                      // 3747\n\t\t\t\t\tdropLocation = null; // needs to have moved cells to be a valid drop                                              // 3748\n\t\t\t\t}                                                                                                                  // 3749\n\t\t\t},                                                                                                                  // 3750\n\t\t\tcellOut: function() { // called before mouse moves to a different cell OR moved out of all cells                    // 3751\n\t\t\t\tview.destroyDrag(); // unrender whatever was done in renderDrag                                                    // 3752\n\t\t\t\tmouseFollower.show(); // show in case we are moving out of all cells                                               // 3753\n\t\t\t\tdropLocation = null;                                                                                               // 3754\n\t\t\t},                                                                                                                  // 3755\n\t\t\tcellDone: function() { // Called after a cellOut OR before a dragStop                                               // 3756\n\t\t\t\tenableCursor();                                                                                                    // 3757\n\t\t\t},                                                                                                                  // 3758\n\t\t\tdragStop: function(ev) {                                                                                            // 3759\n\t\t\t\t// do revert animation if hasn't changed. calls a callback when finished (whether animation or not)                // 3760\n\t\t\t\tmouseFollower.stop(!dropLocation, function() {                                                                     // 3761\n\t\t\t\t\tview.destroyDrag();                                                                                               // 3762\n\t\t\t\t\tview.showEvent(event);                                                                                            // 3763\n\t\t\t\t\t_this.segDragStop(seg, ev);                                                                                       // 3764\n                                                                                                                       // 3765\n\t\t\t\t\tif (dropLocation) {                                                                                               // 3766\n\t\t\t\t\t\tview.reportEventDrop(event, dropLocation, this.largeUnit, el, ev);                                               // 3767\n\t\t\t\t\t}                                                                                                                 // 3768\n\t\t\t\t});                                                                                                                // 3769\n\t\t\t},                                                                                                                  // 3770\n\t\t\tlistenStop: function() {                                                                                            // 3771\n\t\t\t\tmouseFollower.stop(); // put in listenStop in case there was a mousedown but the drag never started                // 3772\n\t\t\t}                                                                                                                   // 3773\n\t\t});                                                                                                                  // 3774\n                                                                                                                       // 3775\n\t\tdragListener.mousedown(ev); // start listening, which will eventually lead to a dragStart                            // 3776\n\t},                                                                                                                    // 3777\n                                                                                                                       // 3778\n                                                                                                                       // 3779\n\t// Called before event segment dragging starts                                                                        // 3780\n\tsegDragStart: function(seg, ev) {                                                                                     // 3781\n\t\tthis.isDraggingSeg = true;                                                                                           // 3782\n\t\tthis.view.trigger('eventDragStart', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy                    // 3783\n\t},                                                                                                                    // 3784\n                                                                                                                       // 3785\n                                                                                                                       // 3786\n\t// Called after event segment dragging stops                                                                          // 3787\n\tsegDragStop: function(seg, ev) {                                                                                      // 3788\n\t\tthis.isDraggingSeg = false;                                                                                          // 3789\n\t\tthis.view.trigger('eventDragStop', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy                     // 3790\n\t},                                                                                                                    // 3791\n                                                                                                                       // 3792\n                                                                                                                       // 3793\n\t// Given the cell an event drag began, and the cell event was dropped, calculates the new start/end/allDay            // 3794\n\t// values for the event. Subclasses may override and set additional properties to be used by renderDrag.              // 3795\n\t// A falsy returned value indicates an invalid drop.                                                                  // 3796\n\tcomputeEventDrop: function(startCell, endCell, event) {                                                               // 3797\n\t\tvar calendar = this.view.calendar;                                                                                   // 3798\n\t\tvar dragStart = startCell.start;                                                                                     // 3799\n\t\tvar dragEnd = endCell.start;                                                                                         // 3800\n\t\tvar delta;                                                                                                           // 3801\n\t\tvar dropLocation;                                                                                                    // 3802\n                                                                                                                       // 3803\n\t\tif (dragStart.hasTime() === dragEnd.hasTime()) {                                                                     // 3804\n\t\t\tdelta = this.diffDates(dragEnd, dragStart);                                                                         // 3805\n                                                                                                                       // 3806\n\t\t\t// if an all-day event was in a timed area and it was dragged to a different time,                                  // 3807\n\t\t\t// guarantee an end and adjust start/end to have times                                                              // 3808\n\t\t\tif (event.allDay && durationHasTime(delta)) {                                                                       // 3809\n\t\t\t\tdropLocation = {                                                                                                   // 3810\n\t\t\t\t\tstart: event.start.clone(),                                                                                       // 3811\n\t\t\t\t\tend: calendar.getEventEnd(event), // will be an ambig day                                                         // 3812\n\t\t\t\t\tallDay: false // for normalizeEventRangeTimes                                                                     // 3813\n\t\t\t\t};                                                                                                                 // 3814\n\t\t\t\tcalendar.normalizeEventRangeTimes(dropLocation);                                                                   // 3815\n\t\t\t}                                                                                                                   // 3816\n\t\t\t// othewise, work off existing values                                                                               // 3817\n\t\t\telse {                                                                                                              // 3818\n\t\t\t\tdropLocation = {                                                                                                   // 3819\n\t\t\t\t\tstart: event.start.clone(),                                                                                       // 3820\n\t\t\t\t\tend: event.end ? event.end.clone() : null,                                                                        // 3821\n\t\t\t\t\tallDay: event.allDay // keep it the same                                                                          // 3822\n\t\t\t\t};                                                                                                                 // 3823\n\t\t\t}                                                                                                                   // 3824\n                                                                                                                       // 3825\n\t\t\tdropLocation.start.add(delta);                                                                                      // 3826\n\t\t\tif (dropLocation.end) {                                                                                             // 3827\n\t\t\t\tdropLocation.end.add(delta);                                                                                       // 3828\n\t\t\t}                                                                                                                   // 3829\n\t\t}                                                                                                                    // 3830\n\t\telse {                                                                                                               // 3831\n\t\t\t// if switching from day <-> timed, start should be reset to the dropped date, and the end cleared                  // 3832\n\t\t\tdropLocation = {                                                                                                    // 3833\n\t\t\t\tstart: dragEnd.clone(),                                                                                            // 3834\n\t\t\t\tend: null, // end should be cleared                                                                                // 3835\n\t\t\t\tallDay: !dragEnd.hasTime()                                                                                         // 3836\n\t\t\t};                                                                                                                  // 3837\n\t\t}                                                                                                                    // 3838\n                                                                                                                       // 3839\n\t\treturn dropLocation;                                                                                                 // 3840\n\t},                                                                                                                    // 3841\n                                                                                                                       // 3842\n                                                                                                                       // 3843\n\t// Utility for apply dragOpacity to a jQuery set                                                                      // 3844\n\tapplyDragOpacity: function(els) {                                                                                     // 3845\n\t\tvar opacity = this.view.opt('dragOpacity');                                                                          // 3846\n                                                                                                                       // 3847\n\t\tif (opacity != null) {                                                                                               // 3848\n\t\t\tels.each(function(i, node) {                                                                                        // 3849\n\t\t\t\t// Don't use jQuery (will set an IE filter), do it the old fashioned way.                                          // 3850\n\t\t\t\t// In IE8, a helper element will disappears if there's a filter.                                                   // 3851\n\t\t\t\tnode.style.opacity = opacity;                                                                                      // 3852\n\t\t\t});                                                                                                                 // 3853\n\t\t}                                                                                                                    // 3854\n\t},                                                                                                                    // 3855\n                                                                                                                       // 3856\n                                                                                                                       // 3857\n\t/* External Element Dragging                                                                                          // 3858\n\t------------------------------------------------------------------------------------------------------------------*/  // 3859\n                                                                                                                       // 3860\n                                                                                                                       // 3861\n\t// Called when a jQuery UI drag is initiated anywhere in the DOM                                                      // 3862\n\texternalDragStart: function(ev, ui) {                                                                                 // 3863\n\t\tvar view = this.view;                                                                                                // 3864\n\t\tvar el;                                                                                                              // 3865\n\t\tvar accept;                                                                                                          // 3866\n                                                                                                                       // 3867\n\t\tif (view.opt('droppable')) { // only listen if this setting is on                                                    // 3868\n\t\t\tel = $((ui ? ui.item : null) || ev.target);                                                                         // 3869\n                                                                                                                       // 3870\n\t\t\t// Test that the dragged element passes the dropAccept selector or filter function.                                 // 3871\n\t\t\t// FYI, the default is \"*\" (matches all)                                                                            // 3872\n\t\t\taccept = view.opt('dropAccept');                                                                                    // 3873\n\t\t\tif ($.isFunction(accept) ? accept.call(el[0], el) : el.is(accept)) {                                                // 3874\n\t\t\t\tif (!this.isDraggingExternal) { // prevent double-listening if fired twice                                         // 3875\n\t\t\t\t\tthis.listenToExternalDrag(el, ev, ui);                                                                            // 3876\n\t\t\t\t}                                                                                                                  // 3877\n\t\t\t}                                                                                                                   // 3878\n\t\t}                                                                                                                    // 3879\n\t},                                                                                                                    // 3880\n                                                                                                                       // 3881\n                                                                                                                       // 3882\n\t// Called when a jQuery UI drag starts and it needs to be monitored for cell dropping                                 // 3883\n\tlistenToExternalDrag: function(el, ev, ui) {                                                                          // 3884\n\t\tvar _this = this;                                                                                                    // 3885\n\t\tvar meta = getDraggedElMeta(el); // extra data about event drop, including possible event to create                  // 3886\n\t\tvar dragListener;                                                                                                    // 3887\n\t\tvar dropLocation; // a null value signals an unsuccessful drag                                                       // 3888\n                                                                                                                       // 3889\n\t\t// listener that tracks mouse movement over date-associated pixel regions                                            // 3890\n\t\tdragListener = new CellDragListener(this.coordMap, {                                                                 // 3891\n\t\t\tlistenStart: function() {                                                                                           // 3892\n\t\t\t\t_this.isDraggingExternal = true;                                                                                   // 3893\n\t\t\t},                                                                                                                  // 3894\n\t\t\tcellOver: function(cell) {                                                                                          // 3895\n\t\t\t\tdropLocation = _this.computeExternalDrop(cell, meta);                                                              // 3896\n\t\t\t\tif (dropLocation) {                                                                                                // 3897\n\t\t\t\t\t_this.renderDrag(dropLocation); // called without a seg parameter                                                 // 3898\n\t\t\t\t}                                                                                                                  // 3899\n\t\t\t\telse { // invalid drop cell                                                                                        // 3900\n\t\t\t\t\tdisableCursor();                                                                                                  // 3901\n\t\t\t\t}                                                                                                                  // 3902\n\t\t\t},                                                                                                                  // 3903\n\t\t\tcellOut: function() {                                                                                               // 3904\n\t\t\t\tdropLocation = null; // signal unsuccessful                                                                        // 3905\n\t\t\t\t_this.destroyDrag();                                                                                               // 3906\n\t\t\t\tenableCursor();                                                                                                    // 3907\n\t\t\t},                                                                                                                  // 3908\n\t\t\tdragStop: function() {                                                                                              // 3909\n\t\t\t\t_this.destroyDrag();                                                                                               // 3910\n\t\t\t\tenableCursor();                                                                                                    // 3911\n                                                                                                                       // 3912\n\t\t\t\tif (dropLocation) { // element was dropped on a valid date/time cell                                               // 3913\n\t\t\t\t\t_this.view.reportExternalDrop(meta, dropLocation, el, ev, ui);                                                    // 3914\n\t\t\t\t}                                                                                                                  // 3915\n\t\t\t},                                                                                                                  // 3916\n\t\t\tlistenStop: function() {                                                                                            // 3917\n\t\t\t\t_this.isDraggingExternal = false;                                                                                  // 3918\n\t\t\t}                                                                                                                   // 3919\n\t\t});                                                                                                                  // 3920\n                                                                                                                       // 3921\n\t\tdragListener.startDrag(ev); // start listening immediately                                                           // 3922\n\t},                                                                                                                    // 3923\n                                                                                                                       // 3924\n                                                                                                                       // 3925\n\t// Given a cell to be dropped upon, and misc data associated with the jqui drag (guaranteed to be a plain object),    // 3926\n\t// returns start/end dates for the event that would result from the hypothetical drop. end might be null.             // 3927\n\t// Returning a null value signals an invalid drop cell.                                                               // 3928\n\tcomputeExternalDrop: function(cell, meta) {                                                                           // 3929\n\t\tvar dropLocation = {                                                                                                 // 3930\n\t\t\tstart: cell.start.clone(),                                                                                          // 3931\n\t\t\tend: null                                                                                                           // 3932\n\t\t};                                                                                                                   // 3933\n                                                                                                                       // 3934\n\t\t// if dropped on an all-day cell, and element's metadata specified a time, set it                                    // 3935\n\t\tif (meta.startTime && !dropLocation.start.hasTime()) {                                                               // 3936\n\t\t\tdropLocation.start.time(meta.startTime);                                                                            // 3937\n\t\t}                                                                                                                    // 3938\n                                                                                                                       // 3939\n\t\tif (meta.duration) {                                                                                                 // 3940\n\t\t\tdropLocation.end = dropLocation.start.clone().add(meta.duration);                                                   // 3941\n\t\t}                                                                                                                    // 3942\n                                                                                                                       // 3943\n\t\tif (!this.view.calendar.isExternalDropRangeAllowed(dropLocation, meta.eventProps)) {                                 // 3944\n\t\t\treturn null;                                                                                                        // 3945\n\t\t}                                                                                                                    // 3946\n                                                                                                                       // 3947\n\t\treturn dropLocation;                                                                                                 // 3948\n\t},                                                                                                                    // 3949\n                                                                                                                       // 3950\n                                                                                                                       // 3951\n                                                                                                                       // 3952\n\t/* Drag Rendering (for both events and an external elements)                                                          // 3953\n\t------------------------------------------------------------------------------------------------------------------*/  // 3954\n                                                                                                                       // 3955\n                                                                                                                       // 3956\n\t// Renders a visual indication of an event or external element being dragged.                                         // 3957\n\t// `dropLocation` contains hypothetical start/end/allDay values the event would have if dropped. end can be null.     // 3958\n\t// `seg` is the internal segment object that is being dragged. If dragging an external element, `seg` is null.        // 3959\n\t// A truthy returned value indicates this method has rendered a helper element.                                       // 3960\n\trenderDrag: function(dropLocation, seg) {                                                                             // 3961\n\t\t// subclasses must implement                                                                                         // 3962\n\t},                                                                                                                    // 3963\n                                                                                                                       // 3964\n                                                                                                                       // 3965\n\t// Unrenders a visual indication of an event or external element being dragged                                        // 3966\n\tdestroyDrag: function() {                                                                                             // 3967\n\t\t// subclasses must implement                                                                                         // 3968\n\t},                                                                                                                    // 3969\n                                                                                                                       // 3970\n                                                                                                                       // 3971\n\t/* Resizing                                                                                                           // 3972\n\t------------------------------------------------------------------------------------------------------------------*/  // 3973\n                                                                                                                       // 3974\n                                                                                                                       // 3975\n\t// Called when the user does a mousedown on an event's resizer, which might lead to resizing.                         // 3976\n\t// Generic enough to work with any type of Grid.                                                                      // 3977\n\tsegResizeMousedown: function(seg, ev, isStart) {                                                                      // 3978\n\t\tvar _this = this;                                                                                                    // 3979\n\t\tvar view = this.view;                                                                                                // 3980\n\t\tvar calendar = view.calendar;                                                                                        // 3981\n\t\tvar el = seg.el;                                                                                                     // 3982\n\t\tvar event = seg.event;                                                                                               // 3983\n\t\tvar eventEnd = calendar.getEventEnd(event);                                                                          // 3984\n\t\tvar dragListener;                                                                                                    // 3985\n\t\tvar resizeLocation; // falsy if invalid resize                                                                       // 3986\n                                                                                                                       // 3987\n\t\t// Tracks mouse movement over the *grid's* coordinate map                                                            // 3988\n\t\tdragListener = new CellDragListener(this.coordMap, {                                                                 // 3989\n\t\t\tdistance: 5,                                                                                                        // 3990\n\t\t\tscroll: view.opt('dragScroll'),                                                                                     // 3991\n\t\t\tsubjectEl: el,                                                                                                      // 3992\n\t\t\tdragStart: function(ev) {                                                                                           // 3993\n\t\t\t\t_this.triggerSegMouseout(seg, ev); // ensure a mouseout on the manipulated event has been reported                 // 3994\n\t\t\t\t_this.segResizeStart(seg, ev);                                                                                     // 3995\n\t\t\t},                                                                                                                  // 3996\n\t\t\tcellOver: function(cell, isOrig, origCell) {                                                                        // 3997\n\t\t\t\tresizeLocation = isStart ?                                                                                         // 3998\n\t\t\t\t\t_this.computeEventStartResize(origCell, cell, event) :                                                            // 3999\n\t\t\t\t\t_this.computeEventEndResize(origCell, cell, event);                                                               // 4000\n                                                                                                                       // 4001\n\t\t\t\tif (resizeLocation) {                                                                                              // 4002\n\t\t\t\t\tif (!calendar.isEventRangeAllowed(resizeLocation, event)) {                                                       // 4003\n\t\t\t\t\t\tdisableCursor();                                                                                                 // 4004\n\t\t\t\t\t\tresizeLocation = null;                                                                                           // 4005\n\t\t\t\t\t}                                                                                                                 // 4006\n\t\t\t\t\t// no change? (TODO: how does this work with timezones?)                                                          // 4007\n\t\t\t\t\telse if (resizeLocation.start.isSame(event.start) && resizeLocation.end.isSame(eventEnd)) {                       // 4008\n\t\t\t\t\t\tresizeLocation = null;                                                                                           // 4009\n\t\t\t\t\t}                                                                                                                 // 4010\n\t\t\t\t}                                                                                                                  // 4011\n                                                                                                                       // 4012\n\t\t\t\tif (resizeLocation) {                                                                                              // 4013\n\t\t\t\t\tview.hideEvent(event);                                                                                            // 4014\n\t\t\t\t\t_this.renderEventResize(resizeLocation, seg);                                                                     // 4015\n\t\t\t\t}                                                                                                                  // 4016\n\t\t\t},                                                                                                                  // 4017\n\t\t\tcellOut: function() { // called before mouse moves to a different cell OR moved out of all cells                    // 4018\n\t\t\t\tresizeLocation = null;                                                                                             // 4019\n\t\t\t},                                                                                                                  // 4020\n\t\t\tcellDone: function() { // resets the rendering to show the original event                                           // 4021\n\t\t\t\t_this.destroyEventResize();                                                                                        // 4022\n\t\t\t\tview.showEvent(event);                                                                                             // 4023\n\t\t\t\tenableCursor();                                                                                                    // 4024\n\t\t\t},                                                                                                                  // 4025\n\t\t\tdragStop: function(ev) {                                                                                            // 4026\n\t\t\t\t_this.segResizeStop(seg, ev);                                                                                      // 4027\n                                                                                                                       // 4028\n\t\t\t\tif (resizeLocation) { // valid date to resize to?                                                                  // 4029\n\t\t\t\t\tview.reportEventResize(event, resizeLocation, this.largeUnit, el, ev);                                            // 4030\n\t\t\t\t}                                                                                                                  // 4031\n\t\t\t}                                                                                                                   // 4032\n\t\t});                                                                                                                  // 4033\n                                                                                                                       // 4034\n\t\tdragListener.mousedown(ev); // start listening, which will eventually lead to a dragStart                            // 4035\n\t},                                                                                                                    // 4036\n                                                                                                                       // 4037\n                                                                                                                       // 4038\n\t// Called before event segment resizing starts                                                                        // 4039\n\tsegResizeStart: function(seg, ev) {                                                                                   // 4040\n\t\tthis.isResizingSeg = true;                                                                                           // 4041\n\t\tthis.view.trigger('eventResizeStart', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy                  // 4042\n\t},                                                                                                                    // 4043\n                                                                                                                       // 4044\n                                                                                                                       // 4045\n\t// Called after event segment resizing stops                                                                          // 4046\n\tsegResizeStop: function(seg, ev) {                                                                                    // 4047\n\t\tthis.isResizingSeg = false;                                                                                          // 4048\n\t\tthis.view.trigger('eventResizeStop', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy                   // 4049\n\t},                                                                                                                    // 4050\n                                                                                                                       // 4051\n                                                                                                                       // 4052\n\t// Returns new date-information for an event segment being resized from its start                                     // 4053\n\tcomputeEventStartResize: function(startCell, endCell, event) {                                                        // 4054\n\t\treturn this.computeEventResize('start', startCell, endCell, event);                                                  // 4055\n\t},                                                                                                                    // 4056\n                                                                                                                       // 4057\n                                                                                                                       // 4058\n\t// Returns new date-information for an event segment being resized from its end                                       // 4059\n\tcomputeEventEndResize: function(startCell, endCell, event) {                                                          // 4060\n\t\treturn this.computeEventResize('end', startCell, endCell, event);                                                    // 4061\n\t},                                                                                                                    // 4062\n                                                                                                                       // 4063\n                                                                                                                       // 4064\n\t// Returns new date-information for an event segment being resized from its start OR end                              // 4065\n\t// `type` is either 'start' or 'end'                                                                                  // 4066\n\tcomputeEventResize: function(type, startCell, endCell, event) {                                                       // 4067\n\t\tvar calendar = this.view.calendar;                                                                                   // 4068\n\t\tvar delta = this.diffDates(endCell[type], startCell[type]);                                                          // 4069\n\t\tvar range;                                                                                                           // 4070\n\t\tvar defaultDuration;                                                                                                 // 4071\n                                                                                                                       // 4072\n\t\t// build original values to work from, guaranteeing a start and end                                                  // 4073\n\t\trange = {                                                                                                            // 4074\n\t\t\tstart: event.start.clone(),                                                                                         // 4075\n\t\t\tend: calendar.getEventEnd(event),                                                                                   // 4076\n\t\t\tallDay: event.allDay                                                                                                // 4077\n\t\t};                                                                                                                   // 4078\n                                                                                                                       // 4079\n\t\t// if an all-day event was in a timed area and was resized to a time, adjust start/end to have times                 // 4080\n\t\tif (range.allDay && durationHasTime(delta)) {                                                                        // 4081\n\t\t\trange.allDay = false;                                                                                               // 4082\n\t\t\tcalendar.normalizeEventRangeTimes(range);                                                                           // 4083\n\t\t}                                                                                                                    // 4084\n                                                                                                                       // 4085\n\t\trange[type].add(delta); // apply delta to start or end                                                               // 4086\n                                                                                                                       // 4087\n\t\t// if the event was compressed too small, find a new reasonable duration for it                                      // 4088\n\t\tif (!range.start.isBefore(range.end)) {                                                                              // 4089\n                                                                                                                       // 4090\n\t\t\tdefaultDuration = event.allDay ?                                                                                    // 4091\n\t\t\t\tcalendar.defaultAllDayEventDuration :                                                                              // 4092\n\t\t\t\tcalendar.defaultTimedEventDuration;                                                                                // 4093\n                                                                                                                       // 4094\n\t\t\t// between the cell's duration and the event's default duration, use the smaller of the two.                        // 4095\n\t\t\t// example: if year-length slots, and compressed to one slot, we don't want the event to be a year long             // 4096\n\t\t\tif (this.cellDuration && this.cellDuration < defaultDuration) {                                                     // 4097\n\t\t\t\tdefaultDuration = this.cellDuration;                                                                               // 4098\n\t\t\t}                                                                                                                   // 4099\n                                                                                                                       // 4100\n\t\t\tif (type == 'start') { // resizing the start?                                                                       // 4101\n\t\t\t\trange.start = range.end.clone().subtract(defaultDuration);                                                         // 4102\n\t\t\t}                                                                                                                   // 4103\n\t\t\telse { // resizing the end?                                                                                         // 4104\n\t\t\t\trange.end = range.start.clone().add(defaultDuration);                                                              // 4105\n\t\t\t}                                                                                                                   // 4106\n\t\t}                                                                                                                    // 4107\n                                                                                                                       // 4108\n\t\treturn range;                                                                                                        // 4109\n\t},                                                                                                                    // 4110\n                                                                                                                       // 4111\n                                                                                                                       // 4112\n\t// Renders a visual indication of an event being resized.                                                             // 4113\n\t// `range` has the updated dates of the event. `seg` is the original segment object involved in the drag.             // 4114\n\trenderEventResize: function(range, seg) {                                                                             // 4115\n\t\t// subclasses must implement                                                                                         // 4116\n\t},                                                                                                                    // 4117\n                                                                                                                       // 4118\n                                                                                                                       // 4119\n\t// Unrenders a visual indication of an event being resized.                                                           // 4120\n\tdestroyEventResize: function() {                                                                                      // 4121\n\t\t// subclasses must implement                                                                                         // 4122\n\t},                                                                                                                    // 4123\n                                                                                                                       // 4124\n                                                                                                                       // 4125\n\t/* Rendering Utils                                                                                                    // 4126\n\t------------------------------------------------------------------------------------------------------------------*/  // 4127\n                                                                                                                       // 4128\n                                                                                                                       // 4129\n\t// Compute the text that should be displayed on an event's element.                                                   // 4130\n\t// `range` can be the Event object itself, or something range-like, with at least a `start`.                          // 4131\n\t// If event times are disabled, or the event has no time, will return a blank string.                                 // 4132\n\t// If not specified, formatStr will default to the eventTimeFormat setting,                                           // 4133\n\t// and displayEnd will default to the displayEventEnd setting.                                                        // 4134\n\tgetEventTimeText: function(range, formatStr, displayEnd) {                                                            // 4135\n                                                                                                                       // 4136\n\t\tif (formatStr == null) {                                                                                             // 4137\n\t\t\tformatStr = this.eventTimeFormat;                                                                                   // 4138\n\t\t}                                                                                                                    // 4139\n                                                                                                                       // 4140\n\t\tif (displayEnd == null) {                                                                                            // 4141\n\t\t\tdisplayEnd = this.displayEventEnd;                                                                                  // 4142\n\t\t}                                                                                                                    // 4143\n                                                                                                                       // 4144\n\t\tif (this.displayEventTime && range.start.hasTime()) {                                                                // 4145\n\t\t\tif (displayEnd && range.end) {                                                                                      // 4146\n\t\t\t\treturn this.view.formatRange(range, formatStr);                                                                    // 4147\n\t\t\t}                                                                                                                   // 4148\n\t\t\telse {                                                                                                              // 4149\n\t\t\t\treturn range.start.format(formatStr);                                                                              // 4150\n\t\t\t}                                                                                                                   // 4151\n\t\t}                                                                                                                    // 4152\n                                                                                                                       // 4153\n\t\treturn '';                                                                                                           // 4154\n\t},                                                                                                                    // 4155\n                                                                                                                       // 4156\n                                                                                                                       // 4157\n\t// Generic utility for generating the HTML classNames for an event segment's element                                  // 4158\n\tgetSegClasses: function(seg, isDraggable, isResizable) {                                                              // 4159\n\t\tvar event = seg.event;                                                                                               // 4160\n\t\tvar classes = [                                                                                                      // 4161\n\t\t\t'fc-event',                                                                                                         // 4162\n\t\t\tseg.isStart ? 'fc-start' : 'fc-not-start',                                                                          // 4163\n\t\t\tseg.isEnd ? 'fc-end' : 'fc-not-end'                                                                                 // 4164\n\t\t].concat(                                                                                                            // 4165\n\t\t\tevent.className,                                                                                                    // 4166\n\t\t\tevent.source ? event.source.className : []                                                                          // 4167\n\t\t);                                                                                                                   // 4168\n                                                                                                                       // 4169\n\t\tif (isDraggable) {                                                                                                   // 4170\n\t\t\tclasses.push('fc-draggable');                                                                                       // 4171\n\t\t}                                                                                                                    // 4172\n\t\tif (isResizable) {                                                                                                   // 4173\n\t\t\tclasses.push('fc-resizable');                                                                                       // 4174\n\t\t}                                                                                                                    // 4175\n                                                                                                                       // 4176\n\t\treturn classes;                                                                                                      // 4177\n\t},                                                                                                                    // 4178\n                                                                                                                       // 4179\n                                                                                                                       // 4180\n\t// Utility for generating event skin-related CSS properties                                                           // 4181\n\tgetEventSkinCss: function(event) {                                                                                    // 4182\n\t\tvar view = this.view;                                                                                                // 4183\n\t\tvar source = event.source || {};                                                                                     // 4184\n\t\tvar eventColor = event.color;                                                                                        // 4185\n\t\tvar sourceColor = source.color;                                                                                      // 4186\n\t\tvar optionColor = view.opt('eventColor');                                                                            // 4187\n                                                                                                                       // 4188\n\t\treturn {                                                                                                             // 4189\n\t\t\t'background-color':                                                                                                 // 4190\n\t\t\t\tevent.backgroundColor ||                                                                                           // 4191\n\t\t\t\teventColor ||                                                                                                      // 4192\n\t\t\t\tsource.backgroundColor ||                                                                                          // 4193\n\t\t\t\tsourceColor ||                                                                                                     // 4194\n\t\t\t\tview.opt('eventBackgroundColor') ||                                                                                // 4195\n\t\t\t\toptionColor,                                                                                                       // 4196\n\t\t\t'border-color':                                                                                                     // 4197\n\t\t\t\tevent.borderColor ||                                                                                               // 4198\n\t\t\t\teventColor ||                                                                                                      // 4199\n\t\t\t\tsource.borderColor ||                                                                                              // 4200\n\t\t\t\tsourceColor ||                                                                                                     // 4201\n\t\t\t\tview.opt('eventBorderColor') ||                                                                                    // 4202\n\t\t\t\toptionColor,                                                                                                       // 4203\n\t\t\tcolor:                                                                                                              // 4204\n\t\t\t\tevent.textColor ||                                                                                                 // 4205\n\t\t\t\tsource.textColor ||                                                                                                // 4206\n\t\t\t\tview.opt('eventTextColor')                                                                                         // 4207\n\t\t};                                                                                                                   // 4208\n\t},                                                                                                                    // 4209\n                                                                                                                       // 4210\n                                                                                                                       // 4211\n\t/* Converting events -> ranges -> segs                                                                                // 4212\n\t------------------------------------------------------------------------------------------------------------------*/  // 4213\n                                                                                                                       // 4214\n                                                                                                                       // 4215\n\t// Converts an array of event objects into an array of event segment objects.                                         // 4216\n\t// A custom `rangeToSegsFunc` may be given for arbitrarily slicing up events.                                         // 4217\n\t// Doesn't guarantee an order for the resulting array.                                                                // 4218\n\teventsToSegs: function(events, rangeToSegsFunc) {                                                                     // 4219\n\t\tvar eventRanges = this.eventsToRanges(events);                                                                       // 4220\n\t\tvar segs = [];                                                                                                       // 4221\n\t\tvar i;                                                                                                               // 4222\n                                                                                                                       // 4223\n\t\tfor (i = 0; i < eventRanges.length; i++) {                                                                           // 4224\n\t\t\tsegs.push.apply(                                                                                                    // 4225\n\t\t\t\tsegs,                                                                                                              // 4226\n\t\t\t\tthis.eventRangeToSegs(eventRanges[i], rangeToSegsFunc)                                                             // 4227\n\t\t\t);                                                                                                                  // 4228\n\t\t}                                                                                                                    // 4229\n                                                                                                                       // 4230\n\t\treturn segs;                                                                                                         // 4231\n\t},                                                                                                                    // 4232\n                                                                                                                       // 4233\n                                                                                                                       // 4234\n\t// Converts an array of events into an array of \"range\" objects.                                                      // 4235\n\t// A \"range\" object is a plain object with start/end properties denoting the time it covers. Also an event property.  // 4236\n\t// For \"normal\" events, this will be identical to the event's start/end, but for \"inverse-background\" events,         // 4237\n\t// will create an array of ranges that span the time *not* covered by the given event.                                // 4238\n\t// Doesn't guarantee an order for the resulting array.                                                                // 4239\n\teventsToRanges: function(events) {                                                                                    // 4240\n\t\tvar _this = this;                                                                                                    // 4241\n\t\tvar eventsById = groupEventsById(events);                                                                            // 4242\n\t\tvar ranges = [];                                                                                                     // 4243\n                                                                                                                       // 4244\n\t\t// group by ID so that related inverse-background events can be rendered together                                    // 4245\n\t\t$.each(eventsById, function(id, eventGroup) {                                                                        // 4246\n\t\t\tif (eventGroup.length) {                                                                                            // 4247\n\t\t\t\tranges.push.apply(                                                                                                 // 4248\n\t\t\t\t\tranges,                                                                                                           // 4249\n\t\t\t\t\tisInverseBgEvent(eventGroup[0]) ?                                                                                 // 4250\n\t\t\t\t\t\t_this.eventsToInverseRanges(eventGroup) :                                                                        // 4251\n\t\t\t\t\t\t_this.eventsToNormalRanges(eventGroup)                                                                           // 4252\n\t\t\t\t);                                                                                                                 // 4253\n\t\t\t}                                                                                                                   // 4254\n\t\t});                                                                                                                  // 4255\n                                                                                                                       // 4256\n\t\treturn ranges;                                                                                                       // 4257\n\t},                                                                                                                    // 4258\n                                                                                                                       // 4259\n                                                                                                                       // 4260\n\t// Converts an array of \"normal\" events (not inverted rendering) into a parallel array of ranges                      // 4261\n\teventsToNormalRanges: function(events) {                                                                              // 4262\n\t\tvar calendar = this.view.calendar;                                                                                   // 4263\n\t\tvar ranges = [];                                                                                                     // 4264\n\t\tvar i, event;                                                                                                        // 4265\n\t\tvar eventStart, eventEnd;                                                                                            // 4266\n                                                                                                                       // 4267\n\t\tfor (i = 0; i < events.length; i++) {                                                                                // 4268\n\t\t\tevent = events[i];                                                                                                  // 4269\n                                                                                                                       // 4270\n\t\t\t// make copies and normalize by stripping timezone                                                                  // 4271\n\t\t\teventStart = event.start.clone().stripZone();                                                                       // 4272\n\t\t\teventEnd = calendar.getEventEnd(event).stripZone();                                                                 // 4273\n                                                                                                                       // 4274\n\t\t\tranges.push({                                                                                                       // 4275\n\t\t\t\tevent: event,                                                                                                      // 4276\n\t\t\t\tstart: eventStart,                                                                                                 // 4277\n\t\t\t\tend: eventEnd,                                                                                                     // 4278\n\t\t\t\teventStartMS: +eventStart,                                                                                         // 4279\n\t\t\t\teventDurationMS: eventEnd - eventStart                                                                             // 4280\n\t\t\t});                                                                                                                 // 4281\n\t\t}                                                                                                                    // 4282\n                                                                                                                       // 4283\n\t\treturn ranges;                                                                                                       // 4284\n\t},                                                                                                                    // 4285\n                                                                                                                       // 4286\n                                                                                                                       // 4287\n\t// Converts an array of events, with inverse-background rendering, into an array of range objects.                    // 4288\n\t// The range objects will cover all the time NOT covered by the events.                                               // 4289\n\teventsToInverseRanges: function(events) {                                                                             // 4290\n\t\tvar view = this.view;                                                                                                // 4291\n\t\tvar viewStart = view.start.clone().stripZone(); // normalize timezone                                                // 4292\n\t\tvar viewEnd = view.end.clone().stripZone(); // normalize timezone                                                    // 4293\n\t\tvar normalRanges = this.eventsToNormalRanges(events); // will give us normalized dates we can use w/o copies         // 4294\n\t\tvar inverseRanges = [];                                                                                              // 4295\n\t\tvar event0 = events[0]; // assign this to each range's `.event`                                                      // 4296\n\t\tvar start = viewStart; // the end of the previous range. the start of the new range                                  // 4297\n\t\tvar i, normalRange;                                                                                                  // 4298\n                                                                                                                       // 4299\n\t\t// ranges need to be in order. required for our date-walking algorithm                                               // 4300\n\t\tnormalRanges.sort(compareNormalRanges);                                                                              // 4301\n                                                                                                                       // 4302\n\t\tfor (i = 0; i < normalRanges.length; i++) {                                                                          // 4303\n\t\t\tnormalRange = normalRanges[i];                                                                                      // 4304\n                                                                                                                       // 4305\n\t\t\t// add the span of time before the event (if there is any)                                                          // 4306\n\t\t\tif (normalRange.start > start) { // compare millisecond time (skip any ambig logic)                                 // 4307\n\t\t\t\tinverseRanges.push({                                                                                               // 4308\n\t\t\t\t\tevent: event0,                                                                                                    // 4309\n\t\t\t\t\tstart: start,                                                                                                     // 4310\n\t\t\t\t\tend: normalRange.start                                                                                            // 4311\n\t\t\t\t});                                                                                                                // 4312\n\t\t\t}                                                                                                                   // 4313\n                                                                                                                       // 4314\n\t\t\tstart = normalRange.end;                                                                                            // 4315\n\t\t}                                                                                                                    // 4316\n                                                                                                                       // 4317\n\t\t// add the span of time after the last event (if there is any)                                                       // 4318\n\t\tif (start < viewEnd) { // compare millisecond time (skip any ambig logic)                                            // 4319\n\t\t\tinverseRanges.push({                                                                                                // 4320\n\t\t\t\tevent: event0,                                                                                                     // 4321\n\t\t\t\tstart: start,                                                                                                      // 4322\n\t\t\t\tend: viewEnd                                                                                                       // 4323\n\t\t\t});                                                                                                                 // 4324\n\t\t}                                                                                                                    // 4325\n                                                                                                                       // 4326\n\t\treturn inverseRanges;                                                                                                // 4327\n\t},                                                                                                                    // 4328\n                                                                                                                       // 4329\n                                                                                                                       // 4330\n\t// Slices the given event range into one or more segment objects.                                                     // 4331\n\t// A `rangeToSegsFunc` custom slicing function can be given.                                                          // 4332\n\teventRangeToSegs: function(eventRange, rangeToSegsFunc) {                                                             // 4333\n\t\tvar segs;                                                                                                            // 4334\n\t\tvar i, seg;                                                                                                          // 4335\n                                                                                                                       // 4336\n\t\tif (rangeToSegsFunc) {                                                                                               // 4337\n\t\t\tsegs = rangeToSegsFunc(eventRange);                                                                                 // 4338\n\t\t}                                                                                                                    // 4339\n\t\telse {                                                                                                               // 4340\n\t\t\tsegs = this.rangeToSegs(eventRange); // defined by the subclass                                                     // 4341\n\t\t}                                                                                                                    // 4342\n                                                                                                                       // 4343\n\t\tfor (i = 0; i < segs.length; i++) {                                                                                  // 4344\n\t\t\tseg = segs[i];                                                                                                      // 4345\n\t\t\tseg.event = eventRange.event;                                                                                       // 4346\n\t\t\tseg.eventStartMS = eventRange.eventStartMS;                                                                         // 4347\n\t\t\tseg.eventDurationMS = eventRange.eventDurationMS;                                                                   // 4348\n\t\t}                                                                                                                    // 4349\n                                                                                                                       // 4350\n\t\treturn segs;                                                                                                         // 4351\n\t}                                                                                                                     // 4352\n                                                                                                                       // 4353\n});                                                                                                                    // 4354\n                                                                                                                       // 4355\n                                                                                                                       // 4356\n/* Utilities                                                                                                           // 4357\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 4359\n                                                                                                                       // 4360\nfunction isBgEvent(event) { // returns true if background OR inverse-background                                        // 4361\n\tvar rendering = getEventRendering(event);                                                                             // 4362\n\treturn rendering === 'background' || rendering === 'inverse-background';                                              // 4363\n}                                                                                                                      // 4364\n                                                                                                                       // 4365\n                                                                                                                       // 4366\nfunction isInverseBgEvent(event) {                                                                                     // 4367\n\treturn getEventRendering(event) === 'inverse-background';                                                             // 4368\n}                                                                                                                      // 4369\n                                                                                                                       // 4370\n                                                                                                                       // 4371\nfunction getEventRendering(event) {                                                                                    // 4372\n\treturn firstDefined((event.source || {}).rendering, event.rendering);                                                 // 4373\n}                                                                                                                      // 4374\n                                                                                                                       // 4375\n                                                                                                                       // 4376\nfunction groupEventsById(events) {                                                                                     // 4377\n\tvar eventsById = {};                                                                                                  // 4378\n\tvar i, event;                                                                                                         // 4379\n                                                                                                                       // 4380\n\tfor (i = 0; i < events.length; i++) {                                                                                 // 4381\n\t\tevent = events[i];                                                                                                   // 4382\n\t\t(eventsById[event._id] || (eventsById[event._id] = [])).push(event);                                                 // 4383\n\t}                                                                                                                     // 4384\n                                                                                                                       // 4385\n\treturn eventsById;                                                                                                    // 4386\n}                                                                                                                      // 4387\n                                                                                                                       // 4388\n                                                                                                                       // 4389\n// A cmp function for determining which non-inverted \"ranges\" (see above) happen earlier                               // 4390\nfunction compareNormalRanges(range1, range2) {                                                                         // 4391\n\treturn range1.eventStartMS - range2.eventStartMS; // earlier ranges go first                                          // 4392\n}                                                                                                                      // 4393\n                                                                                                                       // 4394\n                                                                                                                       // 4395\n// A cmp function for determining which segments should take visual priority                                           // 4396\n// DOES NOT WORK ON INVERTED BACKGROUND EVENTS because they have no eventStartMS/eventDurationMS                       // 4397\nfunction compareSegs(seg1, seg2) {                                                                                     // 4398\n\treturn seg1.eventStartMS - seg2.eventStartMS || // earlier events go first                                            // 4399\n\t\tseg2.eventDurationMS - seg1.eventDurationMS || // tie? longer events go first                                        // 4400\n\t\tseg2.event.allDay - seg1.event.allDay || // tie? put all-day events first (booleans cast to 0/1)                     // 4401\n\t\t(seg1.event.title || '').localeCompare(seg2.event.title); // tie? alphabetically by title                            // 4402\n}                                                                                                                      // 4403\n                                                                                                                       // 4404\nfc.compareSegs = compareSegs; // export                                                                                // 4405\n                                                                                                                       // 4406\n                                                                                                                       // 4407\n/* External-Dragging-Element Data                                                                                      // 4408\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 4410\n// Require all HTML5 data-* attributes used by FullCalendar to have this prefix.                                       // 4411\n// A value of '' will query attributes like data-event. A value of 'fc' will query attributes like data-fc-event.      // 4412\nfc.dataAttrPrefix = '';                                                                                                // 4413\n                                                                                                                       // 4414\n// Given a jQuery element that might represent a dragged FullCalendar event, returns an intermediate data structure    // 4415\n// to be used for Event Object creation.                                                                               // 4416\n// A defined `.eventProps`, even when empty, indicates that an event should be created.                                // 4417\nfunction getDraggedElMeta(el) {                                                                                        // 4418\n\tvar prefix = fc.dataAttrPrefix;                                                                                       // 4419\n\tvar eventProps; // properties for creating the event, not related to date/time                                        // 4420\n\tvar startTime; // a Duration                                                                                          // 4421\n\tvar duration;                                                                                                         // 4422\n\tvar stick;                                                                                                            // 4423\n                                                                                                                       // 4424\n\tif (prefix) { prefix += '-'; }                                                                                        // 4425\n\teventProps = el.data(prefix + 'event') || null;                                                                       // 4426\n                                                                                                                       // 4427\n\tif (eventProps) {                                                                                                     // 4428\n\t\tif (typeof eventProps === 'object') {                                                                                // 4429\n\t\t\teventProps = $.extend({}, eventProps); // make a copy                                                               // 4430\n\t\t}                                                                                                                    // 4431\n\t\telse { // something like 1 or true. still signal event creation                                                      // 4432\n\t\t\teventProps = {};                                                                                                    // 4433\n\t\t}                                                                                                                    // 4434\n                                                                                                                       // 4435\n\t\t// pluck special-cased date/time properties                                                                          // 4436\n\t\tstartTime = eventProps.start;                                                                                        // 4437\n\t\tif (startTime == null) { startTime = eventProps.time; } // accept 'time' as well                                     // 4438\n\t\tduration = eventProps.duration;                                                                                      // 4439\n\t\tstick = eventProps.stick;                                                                                            // 4440\n\t\tdelete eventProps.start;                                                                                             // 4441\n\t\tdelete eventProps.time;                                                                                              // 4442\n\t\tdelete eventProps.duration;                                                                                          // 4443\n\t\tdelete eventProps.stick;                                                                                             // 4444\n\t}                                                                                                                     // 4445\n                                                                                                                       // 4446\n\t// fallback to standalone attribute values for each of the date/time properties                                       // 4447\n\tif (startTime == null) { startTime = el.data(prefix + 'start'); }                                                     // 4448\n\tif (startTime == null) { startTime = el.data(prefix + 'time'); } // accept 'time' as well                             // 4449\n\tif (duration == null) { duration = el.data(prefix + 'duration'); }                                                    // 4450\n\tif (stick == null) { stick = el.data(prefix + 'stick'); }                                                             // 4451\n                                                                                                                       // 4452\n\t// massage into correct data types                                                                                    // 4453\n\tstartTime = startTime != null ? moment.duration(startTime) : null;                                                    // 4454\n\tduration = duration != null ? moment.duration(duration) : null;                                                       // 4455\n\tstick = Boolean(stick);                                                                                               // 4456\n                                                                                                                       // 4457\n\treturn { eventProps: eventProps, startTime: startTime, duration: duration, stick: stick };                            // 4458\n}                                                                                                                      // 4459\n                                                                                                                       // 4460\n                                                                                                                       // 4461\n;;                                                                                                                     // 4462\n                                                                                                                       // 4463\n/* A component that renders a grid of whole-days that runs horizontally. There can be multiple rows, one per week.     // 4464\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 4466\nvar DayGrid = Grid.extend({                                                                                            // 4467\n                                                                                                                       // 4468\n\tnumbersVisible: false, // should render a row for day/week numbers? set by outside view. TODO: make internal          // 4469\n\tbottomCoordPadding: 0, // hack for extending the hit area for the last row of the coordinate grid                     // 4470\n\tbreakOnWeeks: null, // should create a new row for each week? set by outside view                                     // 4471\n                                                                                                                       // 4472\n\tcellDates: null, // flat chronological array of each cell's dates                                                     // 4473\n\tdayToCellOffsets: null, // maps days offsets from grid's start date, to cell offsets                                  // 4474\n                                                                                                                       // 4475\n\trowEls: null, // set of fake row elements                                                                             // 4476\n\tdayEls: null, // set of whole-day elements comprising the row's background                                            // 4477\n\thelperEls: null, // set of cell skeleton elements for rendering the mock event \"helper\"                               // 4478\n                                                                                                                       // 4479\n                                                                                                                       // 4480\n\tconstructor: function() {                                                                                             // 4481\n\t\tGrid.apply(this, arguments);                                                                                         // 4482\n                                                                                                                       // 4483\n\t\tthis.cellDuration = moment.duration(1, 'day'); // for Grid system                                                    // 4484\n\t},                                                                                                                    // 4485\n                                                                                                                       // 4486\n                                                                                                                       // 4487\n\t// Renders the rows and columns into the component's `this.el`, which should already be assigned.                     // 4488\n\t// isRigid determins whether the individual rows should ignore the contents and be a constant height.                 // 4489\n\t// Relies on the view's colCnt and rowCnt. In the future, this component should probably be self-sufficient.          // 4490\n\trenderDates: function(isRigid) {                                                                                      // 4491\n\t\tvar view = this.view;                                                                                                // 4492\n\t\tvar rowCnt = this.rowCnt;                                                                                            // 4493\n\t\tvar colCnt = this.colCnt;                                                                                            // 4494\n\t\tvar cellCnt = rowCnt * colCnt;                                                                                       // 4495\n\t\tvar html = '';                                                                                                       // 4496\n\t\tvar row;                                                                                                             // 4497\n\t\tvar i, cell;                                                                                                         // 4498\n                                                                                                                       // 4499\n\t\tfor (row = 0; row < rowCnt; row++) {                                                                                 // 4500\n\t\t\thtml += this.dayRowHtml(row, isRigid);                                                                              // 4501\n\t\t}                                                                                                                    // 4502\n\t\tthis.el.html(html);                                                                                                  // 4503\n                                                                                                                       // 4504\n\t\tthis.rowEls = this.el.find('.fc-row');                                                                               // 4505\n\t\tthis.dayEls = this.el.find('.fc-day');                                                                               // 4506\n                                                                                                                       // 4507\n\t\t// trigger dayRender with each cell's element                                                                        // 4508\n\t\tfor (i = 0; i < cellCnt; i++) {                                                                                      // 4509\n\t\t\tcell = this.getCell(i);                                                                                             // 4510\n\t\t\tview.trigger('dayRender', null, cell.start, this.dayEls.eq(i));                                                     // 4511\n\t\t}                                                                                                                    // 4512\n\t},                                                                                                                    // 4513\n                                                                                                                       // 4514\n                                                                                                                       // 4515\n\tdestroyDates: function() {                                                                                            // 4516\n\t\tthis.destroySegPopover();                                                                                            // 4517\n\t},                                                                                                                    // 4518\n                                                                                                                       // 4519\n                                                                                                                       // 4520\n\trenderBusinessHours: function() {                                                                                     // 4521\n\t\tvar events = this.view.calendar.getBusinessHoursEvents(true); // wholeDay=true                                       // 4522\n\t\tvar segs = this.eventsToSegs(events);                                                                                // 4523\n                                                                                                                       // 4524\n\t\tthis.renderFill('businessHours', segs, 'bgevent');                                                                   // 4525\n\t},                                                                                                                    // 4526\n                                                                                                                       // 4527\n                                                                                                                       // 4528\n\t// Generates the HTML for a single row. `row` is the row number.                                                      // 4529\n\tdayRowHtml: function(row, isRigid) {                                                                                  // 4530\n\t\tvar view = this.view;                                                                                                // 4531\n\t\tvar classes = [ 'fc-row', 'fc-week', view.widgetContentClass ];                                                      // 4532\n                                                                                                                       // 4533\n\t\tif (isRigid) {                                                                                                       // 4534\n\t\t\tclasses.push('fc-rigid');                                                                                           // 4535\n\t\t}                                                                                                                    // 4536\n                                                                                                                       // 4537\n\t\treturn '' +                                                                                                          // 4538\n\t\t\t'<div class=\"' + classes.join(' ') + '\">' +                                                                         // 4539\n\t\t\t\t'<div class=\"fc-bg\">' +                                                                                            // 4540\n\t\t\t\t\t'<table>' +                                                                                                       // 4541\n\t\t\t\t\t\tthis.rowHtml('day', row) + // leverages RowRenderer. calls dayCellHtml()                                         // 4542\n\t\t\t\t\t'</table>' +                                                                                                      // 4543\n\t\t\t\t'</div>' +                                                                                                         // 4544\n\t\t\t\t'<div class=\"fc-content-skeleton\">' +                                                                              // 4545\n\t\t\t\t\t'<table>' +                                                                                                       // 4546\n\t\t\t\t\t\t(this.numbersVisible ?                                                                                           // 4547\n\t\t\t\t\t\t\t'<thead>' +                                                                                                     // 4548\n\t\t\t\t\t\t\t\tthis.rowHtml('number', row) + // leverages RowRenderer. View will define render method                         // 4549\n\t\t\t\t\t\t\t'</thead>' :                                                                                                    // 4550\n\t\t\t\t\t\t\t''                                                                                                              // 4551\n\t\t\t\t\t\t\t) +                                                                                                             // 4552\n\t\t\t\t\t'</table>' +                                                                                                      // 4553\n\t\t\t\t'</div>' +                                                                                                         // 4554\n\t\t\t'</div>';                                                                                                           // 4555\n\t},                                                                                                                    // 4556\n                                                                                                                       // 4557\n                                                                                                                       // 4558\n\t// Renders the HTML for a whole-day cell. Will eventually end up in the day-row's background.                         // 4559\n\t// We go through a 'day' row type instead of just doing a 'bg' row type so that the View can do custom rendering      // 4560\n\t// specifically for whole-day rows, whereas a 'bg' might also be used for other purposes (TimeGrid bg for example).   // 4561\n\tdayCellHtml: function(cell) {                                                                                         // 4562\n\t\treturn this.bgCellHtml(cell);                                                                                        // 4563\n\t},                                                                                                                    // 4564\n                                                                                                                       // 4565\n                                                                                                                       // 4566\n\t/* Options                                                                                                            // 4567\n\t------------------------------------------------------------------------------------------------------------------*/  // 4568\n                                                                                                                       // 4569\n                                                                                                                       // 4570\n\t// Computes a default column header formatting string if `colFormat` is not explicitly defined                        // 4571\n\tcomputeColHeadFormat: function() {                                                                                    // 4572\n\t\tif (this.rowCnt > 1) { // more than one week row. day numbers will be in each cell                                   // 4573\n\t\t\treturn 'ddd'; // \"Sat\"                                                                                              // 4574\n\t\t}                                                                                                                    // 4575\n\t\telse if (this.colCnt > 1) { // multiple days, so full single date string WON'T be in title text                      // 4576\n\t\t\treturn this.view.opt('dayOfMonthFormat'); // \"Sat 12/10\"                                                            // 4577\n\t\t}                                                                                                                    // 4578\n\t\telse { // single day, so full single date string will probably be in title text                                      // 4579\n\t\t\treturn 'dddd'; // \"Saturday\"                                                                                        // 4580\n\t\t}                                                                                                                    // 4581\n\t},                                                                                                                    // 4582\n                                                                                                                       // 4583\n                                                                                                                       // 4584\n\t// Computes a default event time formatting string if `timeFormat` is not explicitly defined                          // 4585\n\tcomputeEventTimeFormat: function() {                                                                                  // 4586\n\t\treturn this.view.opt('extraSmallTimeFormat'); // like \"6p\" or \"6:30p\"                                                // 4587\n\t},                                                                                                                    // 4588\n                                                                                                                       // 4589\n                                                                                                                       // 4590\n\t// Computes a default `displayEventEnd` value if one is not expliclty defined                                         // 4591\n\tcomputeDisplayEventEnd: function() {                                                                                  // 4592\n\t\treturn this.colCnt == 1; // we'll likely have space if there's only one day                                          // 4593\n\t},                                                                                                                    // 4594\n                                                                                                                       // 4595\n                                                                                                                       // 4596\n\t/* Cell System                                                                                                        // 4597\n\t------------------------------------------------------------------------------------------------------------------*/  // 4598\n                                                                                                                       // 4599\n                                                                                                                       // 4600\n\t// Initializes row/col information                                                                                    // 4601\n\tupdateCells: function() {                                                                                             // 4602\n\t\tvar cellDates;                                                                                                       // 4603\n\t\tvar firstDay;                                                                                                        // 4604\n\t\tvar rowCnt;                                                                                                          // 4605\n\t\tvar colCnt;                                                                                                          // 4606\n                                                                                                                       // 4607\n\t\tthis.updateCellDates(); // populates cellDates and dayToCellOffsets                                                  // 4608\n\t\tcellDates = this.cellDates;                                                                                          // 4609\n                                                                                                                       // 4610\n\t\tif (this.breakOnWeeks) {                                                                                             // 4611\n\t\t\t// count columns until the day-of-week repeats                                                                      // 4612\n\t\t\tfirstDay = cellDates[0].day();                                                                                      // 4613\n\t\t\tfor (colCnt = 1; colCnt < cellDates.length; colCnt++) {                                                             // 4614\n\t\t\t\tif (cellDates[colCnt].day() == firstDay) {                                                                         // 4615\n\t\t\t\t\tbreak;                                                                                                            // 4616\n\t\t\t\t}                                                                                                                  // 4617\n\t\t\t}                                                                                                                   // 4618\n\t\t\trowCnt = Math.ceil(cellDates.length / colCnt);                                                                      // 4619\n\t\t}                                                                                                                    // 4620\n\t\telse {                                                                                                               // 4621\n\t\t\trowCnt = 1;                                                                                                         // 4622\n\t\t\tcolCnt = cellDates.length;                                                                                          // 4623\n\t\t}                                                                                                                    // 4624\n                                                                                                                       // 4625\n\t\tthis.rowCnt = rowCnt;                                                                                                // 4626\n\t\tthis.colCnt = colCnt;                                                                                                // 4627\n\t},                                                                                                                    // 4628\n                                                                                                                       // 4629\n                                                                                                                       // 4630\n\t// Populates cellDates and dayToCellOffsets                                                                           // 4631\n\tupdateCellDates: function() {                                                                                         // 4632\n\t\tvar view = this.view;                                                                                                // 4633\n\t\tvar date = this.start.clone();                                                                                       // 4634\n\t\tvar dates = [];                                                                                                      // 4635\n\t\tvar offset = -1;                                                                                                     // 4636\n\t\tvar offsets = [];                                                                                                    // 4637\n                                                                                                                       // 4638\n\t\twhile (date.isBefore(this.end)) { // loop each day from start to end                                                 // 4639\n\t\t\tif (view.isHiddenDay(date)) {                                                                                       // 4640\n\t\t\t\toffsets.push(offset + 0.5); // mark that it's between offsets                                                      // 4641\n\t\t\t}                                                                                                                   // 4642\n\t\t\telse {                                                                                                              // 4643\n\t\t\t\toffset++;                                                                                                          // 4644\n\t\t\t\toffsets.push(offset);                                                                                              // 4645\n\t\t\t\tdates.push(date.clone());                                                                                          // 4646\n\t\t\t}                                                                                                                   // 4647\n\t\t\tdate.add(1, 'days');                                                                                                // 4648\n\t\t}                                                                                                                    // 4649\n                                                                                                                       // 4650\n\t\tthis.cellDates = dates;                                                                                              // 4651\n\t\tthis.dayToCellOffsets = offsets;                                                                                     // 4652\n\t},                                                                                                                    // 4653\n                                                                                                                       // 4654\n                                                                                                                       // 4655\n\t// Given a cell object, generates its start date. Returns a reference-free copy.                                      // 4656\n\tcomputeCellDate: function(cell) {                                                                                     // 4657\n\t\tvar colCnt = this.colCnt;                                                                                            // 4658\n\t\tvar index = cell.row * colCnt + (this.isRTL ? colCnt - cell.col - 1 : cell.col);                                     // 4659\n                                                                                                                       // 4660\n\t\treturn this.cellDates[index].clone();                                                                                // 4661\n\t},                                                                                                                    // 4662\n                                                                                                                       // 4663\n                                                                                                                       // 4664\n\t// Retrieves the element representing the given row                                                                   // 4665\n\tgetRowEl: function(row) {                                                                                             // 4666\n\t\treturn this.rowEls.eq(row);                                                                                          // 4667\n\t},                                                                                                                    // 4668\n                                                                                                                       // 4669\n                                                                                                                       // 4670\n\t// Retrieves the element representing the given column                                                                // 4671\n\tgetColEl: function(col) {                                                                                             // 4672\n\t\treturn this.dayEls.eq(col);                                                                                          // 4673\n\t},                                                                                                                    // 4674\n                                                                                                                       // 4675\n                                                                                                                       // 4676\n\t// Gets the whole-day element associated with the cell                                                                // 4677\n\tgetCellDayEl: function(cell) {                                                                                        // 4678\n\t\treturn this.dayEls.eq(cell.row * this.colCnt + cell.col);                                                            // 4679\n\t},                                                                                                                    // 4680\n                                                                                                                       // 4681\n                                                                                                                       // 4682\n\t// Overrides Grid's method for when row coordinates are computed                                                      // 4683\n\tcomputeRowCoords: function() {                                                                                        // 4684\n\t\tvar rowCoords = Grid.prototype.computeRowCoords.call(this); // call the super-method                                 // 4685\n                                                                                                                       // 4686\n\t\t// hack for extending last row (used by AgendaView)                                                                  // 4687\n\t\trowCoords[rowCoords.length - 1].bottom += this.bottomCoordPadding;                                                   // 4688\n                                                                                                                       // 4689\n\t\treturn rowCoords;                                                                                                    // 4690\n\t},                                                                                                                    // 4691\n                                                                                                                       // 4692\n                                                                                                                       // 4693\n\t/* Dates                                                                                                              // 4694\n\t------------------------------------------------------------------------------------------------------------------*/  // 4695\n                                                                                                                       // 4696\n                                                                                                                       // 4697\n\t// Slices up a date range by row into an array of segments                                                            // 4698\n\trangeToSegs: function(range) {                                                                                        // 4699\n\t\tvar isRTL = this.isRTL;                                                                                              // 4700\n\t\tvar rowCnt = this.rowCnt;                                                                                            // 4701\n\t\tvar colCnt = this.colCnt;                                                                                            // 4702\n\t\tvar segs = [];                                                                                                       // 4703\n\t\tvar first, last; // inclusive cell-offset range for given range                                                      // 4704\n\t\tvar row;                                                                                                             // 4705\n\t\tvar rowFirst, rowLast; // inclusive cell-offset range for current row                                                // 4706\n\t\tvar isStart, isEnd;                                                                                                  // 4707\n\t\tvar segFirst, segLast; // inclusive cell-offset range for segment                                                    // 4708\n\t\tvar seg;                                                                                                             // 4709\n                                                                                                                       // 4710\n\t\trange = this.view.computeDayRange(range); // make whole-day range, considering nextDayThreshold                      // 4711\n\t\tfirst = this.dateToCellOffset(range.start);                                                                          // 4712\n\t\tlast = this.dateToCellOffset(range.end.subtract(1, 'days')); // offset of inclusive end date                         // 4713\n                                                                                                                       // 4714\n\t\tfor (row = 0; row < rowCnt; row++) {                                                                                 // 4715\n\t\t\trowFirst = row * colCnt;                                                                                            // 4716\n\t\t\trowLast = rowFirst + colCnt - 1;                                                                                    // 4717\n                                                                                                                       // 4718\n\t\t\t// intersect segment's offset range with the row's                                                                  // 4719\n\t\t\tsegFirst = Math.max(rowFirst, first);                                                                               // 4720\n\t\t\tsegLast = Math.min(rowLast, last);                                                                                  // 4721\n                                                                                                                       // 4722\n\t\t\t// deal with in-between indices                                                                                     // 4723\n\t\t\tsegFirst = Math.ceil(segFirst); // in-between starts round to next cell                                             // 4724\n\t\t\tsegLast = Math.floor(segLast); // in-between ends round to prev cell                                                // 4725\n                                                                                                                       // 4726\n\t\t\tif (segFirst <= segLast) { // was there any intersection with the current row?                                      // 4727\n                                                                                                                       // 4728\n\t\t\t\t// must be matching integers to be the segment's start/end                                                         // 4729\n\t\t\t\tisStart = segFirst === first;                                                                                      // 4730\n\t\t\t\tisEnd = segLast === last;                                                                                          // 4731\n                                                                                                                       // 4732\n\t\t\t\t// translate offsets to be relative to start-of-row                                                                // 4733\n\t\t\t\tsegFirst -= rowFirst;                                                                                              // 4734\n\t\t\t\tsegLast -= rowFirst;                                                                                               // 4735\n                                                                                                                       // 4736\n\t\t\t\tseg = { row: row, isStart: isStart, isEnd: isEnd };                                                                // 4737\n\t\t\t\tif (isRTL) {                                                                                                       // 4738\n\t\t\t\t\tseg.leftCol = colCnt - segLast - 1;                                                                               // 4739\n\t\t\t\t\tseg.rightCol = colCnt - segFirst - 1;                                                                             // 4740\n\t\t\t\t}                                                                                                                  // 4741\n\t\t\t\telse {                                                                                                             // 4742\n\t\t\t\t\tseg.leftCol = segFirst;                                                                                           // 4743\n\t\t\t\t\tseg.rightCol = segLast;                                                                                           // 4744\n\t\t\t\t}                                                                                                                  // 4745\n\t\t\t\tsegs.push(seg);                                                                                                    // 4746\n\t\t\t}                                                                                                                   // 4747\n\t\t}                                                                                                                    // 4748\n                                                                                                                       // 4749\n\t\treturn segs;                                                                                                         // 4750\n\t},                                                                                                                    // 4751\n                                                                                                                       // 4752\n                                                                                                                       // 4753\n\t// Given a date, returns its chronolocial cell-offset from the first cell of the grid.                                // 4754\n\t// If the date lies between cells (because of hiddenDays), returns a floating-point value between offsets.            // 4755\n\t// If before the first offset, returns a negative number.                                                             // 4756\n\t// If after the last offset, returns an offset past the last cell offset.                                             // 4757\n\t// Only works for *start* dates of cells. Will not work for exclusive end dates for cells.                            // 4758\n\tdateToCellOffset: function(date) {                                                                                    // 4759\n\t\tvar offsets = this.dayToCellOffsets;                                                                                 // 4760\n\t\tvar day = date.diff(this.start, 'days');                                                                             // 4761\n                                                                                                                       // 4762\n\t\tif (day < 0) {                                                                                                       // 4763\n\t\t\treturn offsets[0] - 1;                                                                                              // 4764\n\t\t}                                                                                                                    // 4765\n\t\telse if (day >= offsets.length) {                                                                                    // 4766\n\t\t\treturn offsets[offsets.length - 1] + 1;                                                                             // 4767\n\t\t}                                                                                                                    // 4768\n\t\telse {                                                                                                               // 4769\n\t\t\treturn offsets[day];                                                                                                // 4770\n\t\t}                                                                                                                    // 4771\n\t},                                                                                                                    // 4772\n                                                                                                                       // 4773\n                                                                                                                       // 4774\n\t/* Event Drag Visualization                                                                                           // 4775\n\t------------------------------------------------------------------------------------------------------------------*/  // 4776\n\t// TODO: move to DayGrid.event, similar to what we did with Grid's drag methods                                       // 4777\n                                                                                                                       // 4778\n                                                                                                                       // 4779\n\t// Renders a visual indication of an event or external element being dragged.                                         // 4780\n\t// The dropLocation's end can be null. seg can be null. See Grid::renderDrag for more info.                           // 4781\n\trenderDrag: function(dropLocation, seg) {                                                                             // 4782\n                                                                                                                       // 4783\n\t\t// always render a highlight underneath                                                                              // 4784\n\t\tthis.renderHighlight(                                                                                                // 4785\n\t\t\tthis.view.calendar.ensureVisibleEventRange(dropLocation) // needs to be a proper range                              // 4786\n\t\t);                                                                                                                   // 4787\n                                                                                                                       // 4788\n\t\t// if a segment from the same calendar but another component is being dragged, render a helper event                 // 4789\n\t\tif (seg && !seg.el.closest(this.el).length) {                                                                        // 4790\n                                                                                                                       // 4791\n\t\t\tthis.renderRangeHelper(dropLocation, seg);                                                                          // 4792\n\t\t\tthis.applyDragOpacity(this.helperEls);                                                                              // 4793\n                                                                                                                       // 4794\n\t\t\treturn true; // a helper has been rendered                                                                          // 4795\n\t\t}                                                                                                                    // 4796\n\t},                                                                                                                    // 4797\n                                                                                                                       // 4798\n                                                                                                                       // 4799\n\t// Unrenders any visual indication of a hovering event                                                                // 4800\n\tdestroyDrag: function() {                                                                                             // 4801\n\t\tthis.destroyHighlight();                                                                                             // 4802\n\t\tthis.destroyHelper();                                                                                                // 4803\n\t},                                                                                                                    // 4804\n                                                                                                                       // 4805\n                                                                                                                       // 4806\n\t/* Event Resize Visualization                                                                                         // 4807\n\t------------------------------------------------------------------------------------------------------------------*/  // 4808\n                                                                                                                       // 4809\n                                                                                                                       // 4810\n\t// Renders a visual indication of an event being resized                                                              // 4811\n\trenderEventResize: function(range, seg) {                                                                             // 4812\n\t\tthis.renderHighlight(range);                                                                                         // 4813\n\t\tthis.renderRangeHelper(range, seg);                                                                                  // 4814\n\t},                                                                                                                    // 4815\n                                                                                                                       // 4816\n                                                                                                                       // 4817\n\t// Unrenders a visual indication of an event being resized                                                            // 4818\n\tdestroyEventResize: function() {                                                                                      // 4819\n\t\tthis.destroyHighlight();                                                                                             // 4820\n\t\tthis.destroyHelper();                                                                                                // 4821\n\t},                                                                                                                    // 4822\n                                                                                                                       // 4823\n                                                                                                                       // 4824\n\t/* Event Helper                                                                                                       // 4825\n\t------------------------------------------------------------------------------------------------------------------*/  // 4826\n                                                                                                                       // 4827\n                                                                                                                       // 4828\n\t// Renders a mock \"helper\" event. `sourceSeg` is the associated internal segment object. It can be null.              // 4829\n\trenderHelper: function(event, sourceSeg) {                                                                            // 4830\n\t\tvar helperNodes = [];                                                                                                // 4831\n\t\tvar segs = this.eventsToSegs([ event ]);                                                                             // 4832\n\t\tvar rowStructs;                                                                                                      // 4833\n                                                                                                                       // 4834\n\t\tsegs = this.renderFgSegEls(segs); // assigns each seg's el and returns a subset of segs that were rendered           // 4835\n\t\trowStructs = this.renderSegRows(segs);                                                                               // 4836\n                                                                                                                       // 4837\n\t\t// inject each new event skeleton into each associated row                                                           // 4838\n\t\tthis.rowEls.each(function(row, rowNode) {                                                                            // 4839\n\t\t\tvar rowEl = $(rowNode); // the .fc-row                                                                              // 4840\n\t\t\tvar skeletonEl = $('<div class=\"fc-helper-skeleton\"><table/></div>'); // will be absolutely positioned              // 4841\n\t\t\tvar skeletonTop;                                                                                                    // 4842\n                                                                                                                       // 4843\n\t\t\t// If there is an original segment, match the top position. Otherwise, put it at the row's top level                // 4844\n\t\t\tif (sourceSeg && sourceSeg.row === row) {                                                                           // 4845\n\t\t\t\tskeletonTop = sourceSeg.el.position().top;                                                                         // 4846\n\t\t\t}                                                                                                                   // 4847\n\t\t\telse {                                                                                                              // 4848\n\t\t\t\tskeletonTop = rowEl.find('.fc-content-skeleton tbody').position().top;                                             // 4849\n\t\t\t}                                                                                                                   // 4850\n                                                                                                                       // 4851\n\t\t\tskeletonEl.css('top', skeletonTop)                                                                                  // 4852\n\t\t\t\t.find('table')                                                                                                     // 4853\n\t\t\t\t\t.append(rowStructs[row].tbodyEl);                                                                                 // 4854\n                                                                                                                       // 4855\n\t\t\trowEl.append(skeletonEl);                                                                                           // 4856\n\t\t\thelperNodes.push(skeletonEl[0]);                                                                                    // 4857\n\t\t});                                                                                                                  // 4858\n                                                                                                                       // 4859\n\t\tthis.helperEls = $(helperNodes); // array -> jQuery set                                                              // 4860\n\t},                                                                                                                    // 4861\n                                                                                                                       // 4862\n                                                                                                                       // 4863\n\t// Unrenders any visual indication of a mock helper event                                                             // 4864\n\tdestroyHelper: function() {                                                                                           // 4865\n\t\tif (this.helperEls) {                                                                                                // 4866\n\t\t\tthis.helperEls.remove();                                                                                            // 4867\n\t\t\tthis.helperEls = null;                                                                                              // 4868\n\t\t}                                                                                                                    // 4869\n\t},                                                                                                                    // 4870\n                                                                                                                       // 4871\n                                                                                                                       // 4872\n\t/* Fill System (highlight, background events, business hours)                                                         // 4873\n\t------------------------------------------------------------------------------------------------------------------*/  // 4874\n                                                                                                                       // 4875\n                                                                                                                       // 4876\n\tfillSegTag: 'td', // override the default tag name                                                                    // 4877\n                                                                                                                       // 4878\n                                                                                                                       // 4879\n\t// Renders a set of rectangles over the given segments of days.                                                       // 4880\n\t// Only returns segments that successfully rendered.                                                                  // 4881\n\trenderFill: function(type, segs, className) {                                                                         // 4882\n\t\tvar nodes = [];                                                                                                      // 4883\n\t\tvar i, seg;                                                                                                          // 4884\n\t\tvar skeletonEl;                                                                                                      // 4885\n                                                                                                                       // 4886\n\t\tsegs = this.renderFillSegEls(type, segs); // assignes `.el` to each seg. returns successfully rendered segs          // 4887\n                                                                                                                       // 4888\n\t\tfor (i = 0; i < segs.length; i++) {                                                                                  // 4889\n\t\t\tseg = segs[i];                                                                                                      // 4890\n\t\t\tskeletonEl = this.renderFillRow(type, seg, className);                                                              // 4891\n\t\t\tthis.rowEls.eq(seg.row).append(skeletonEl);                                                                         // 4892\n\t\t\tnodes.push(skeletonEl[0]);                                                                                          // 4893\n\t\t}                                                                                                                    // 4894\n                                                                                                                       // 4895\n\t\tthis.elsByFill[type] = $(nodes);                                                                                     // 4896\n                                                                                                                       // 4897\n\t\treturn segs;                                                                                                         // 4898\n\t},                                                                                                                    // 4899\n                                                                                                                       // 4900\n                                                                                                                       // 4901\n\t// Generates the HTML needed for one row of a fill. Requires the seg's el to be rendered.                             // 4902\n\trenderFillRow: function(type, seg, className) {                                                                       // 4903\n\t\tvar colCnt = this.colCnt;                                                                                            // 4904\n\t\tvar startCol = seg.leftCol;                                                                                          // 4905\n\t\tvar endCol = seg.rightCol + 1;                                                                                       // 4906\n\t\tvar skeletonEl;                                                                                                      // 4907\n\t\tvar trEl;                                                                                                            // 4908\n                                                                                                                       // 4909\n\t\tclassName = className || type.toLowerCase();                                                                         // 4910\n                                                                                                                       // 4911\n\t\tskeletonEl = $(                                                                                                      // 4912\n\t\t\t'<div class=\"fc-' + className + '-skeleton\">' +                                                                     // 4913\n\t\t\t\t'<table><tr/></table>' +                                                                                           // 4914\n\t\t\t'</div>'                                                                                                            // 4915\n\t\t);                                                                                                                   // 4916\n\t\ttrEl = skeletonEl.find('tr');                                                                                        // 4917\n                                                                                                                       // 4918\n\t\tif (startCol > 0) {                                                                                                  // 4919\n\t\t\ttrEl.append('<td colspan=\"' + startCol + '\"/>');                                                                    // 4920\n\t\t}                                                                                                                    // 4921\n                                                                                                                       // 4922\n\t\ttrEl.append(                                                                                                         // 4923\n\t\t\tseg.el.attr('colspan', endCol - startCol)                                                                           // 4924\n\t\t);                                                                                                                   // 4925\n                                                                                                                       // 4926\n\t\tif (endCol < colCnt) {                                                                                               // 4927\n\t\t\ttrEl.append('<td colspan=\"' + (colCnt - endCol) + '\"/>');                                                           // 4928\n\t\t}                                                                                                                    // 4929\n                                                                                                                       // 4930\n\t\tthis.bookendCells(trEl, type);                                                                                       // 4931\n                                                                                                                       // 4932\n\t\treturn skeletonEl;                                                                                                   // 4933\n\t}                                                                                                                     // 4934\n                                                                                                                       // 4935\n});                                                                                                                    // 4936\n                                                                                                                       // 4937\n;;                                                                                                                     // 4938\n                                                                                                                       // 4939\n/* Event-rendering methods for the DayGrid class                                                                       // 4940\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 4942\nDayGrid.mixin({                                                                                                        // 4943\n                                                                                                                       // 4944\n\trowStructs: null, // an array of objects, each holding information about a row's foreground event-rendering           // 4945\n                                                                                                                       // 4946\n                                                                                                                       // 4947\n\t// Unrenders all events currently rendered on the grid                                                                // 4948\n\tdestroyEvents: function() {                                                                                           // 4949\n\t\tthis.destroySegPopover(); // removes the \"more..\" events popover                                                     // 4950\n\t\tGrid.prototype.destroyEvents.apply(this, arguments); // calls the super-method                                       // 4951\n\t},                                                                                                                    // 4952\n                                                                                                                       // 4953\n                                                                                                                       // 4954\n\t// Retrieves all rendered segment objects currently rendered on the grid                                              // 4955\n\tgetEventSegs: function() {                                                                                            // 4956\n\t\treturn Grid.prototype.getEventSegs.call(this) // get the segments from the super-method                              // 4957\n\t\t\t.concat(this.popoverSegs || []); // append the segments from the \"more...\" popover                                  // 4958\n\t},                                                                                                                    // 4959\n                                                                                                                       // 4960\n                                                                                                                       // 4961\n\t// Renders the given background event segments onto the grid                                                          // 4962\n\trenderBgSegs: function(segs) {                                                                                        // 4963\n                                                                                                                       // 4964\n\t\t// don't render timed background events                                                                              // 4965\n\t\tvar allDaySegs = $.grep(segs, function(seg) {                                                                        // 4966\n\t\t\treturn seg.event.allDay;                                                                                            // 4967\n\t\t});                                                                                                                  // 4968\n                                                                                                                       // 4969\n\t\treturn Grid.prototype.renderBgSegs.call(this, allDaySegs); // call the super-method                                  // 4970\n\t},                                                                                                                    // 4971\n                                                                                                                       // 4972\n                                                                                                                       // 4973\n\t// Renders the given foreground event segments onto the grid                                                          // 4974\n\trenderFgSegs: function(segs) {                                                                                        // 4975\n\t\tvar rowStructs;                                                                                                      // 4976\n                                                                                                                       // 4977\n\t\t// render an `.el` on each seg                                                                                       // 4978\n\t\t// returns a subset of the segs. segs that were actually rendered                                                    // 4979\n\t\tsegs = this.renderFgSegEls(segs);                                                                                    // 4980\n                                                                                                                       // 4981\n\t\trowStructs = this.rowStructs = this.renderSegRows(segs);                                                             // 4982\n                                                                                                                       // 4983\n\t\t// append to each row's content skeleton                                                                             // 4984\n\t\tthis.rowEls.each(function(i, rowNode) {                                                                              // 4985\n\t\t\t$(rowNode).find('.fc-content-skeleton > table').append(                                                             // 4986\n\t\t\t\trowStructs[i].tbodyEl                                                                                              // 4987\n\t\t\t);                                                                                                                  // 4988\n\t\t});                                                                                                                  // 4989\n                                                                                                                       // 4990\n\t\treturn segs; // return only the segs that were actually rendered                                                     // 4991\n\t},                                                                                                                    // 4992\n                                                                                                                       // 4993\n                                                                                                                       // 4994\n\t// Unrenders all currently rendered foreground event segments                                                         // 4995\n\tdestroyFgSegs: function() {                                                                                           // 4996\n\t\tvar rowStructs = this.rowStructs || [];                                                                              // 4997\n\t\tvar rowStruct;                                                                                                       // 4998\n                                                                                                                       // 4999\n\t\twhile ((rowStruct = rowStructs.pop())) {                                                                             // 5000\n\t\t\trowStruct.tbodyEl.remove();                                                                                         // 5001\n\t\t}                                                                                                                    // 5002\n                                                                                                                       // 5003\n\t\tthis.rowStructs = null;                                                                                              // 5004\n\t},                                                                                                                    // 5005\n                                                                                                                       // 5006\n                                                                                                                       // 5007\n\t// Uses the given events array to generate <tbody> elements that should be appended to each row's content skeleton.   // 5008\n\t// Returns an array of rowStruct objects (see the bottom of `renderSegRow`).                                          // 5009\n\t// PRECONDITION: each segment shoud already have a rendered and assigned `.el`                                        // 5010\n\trenderSegRows: function(segs) {                                                                                       // 5011\n\t\tvar rowStructs = [];                                                                                                 // 5012\n\t\tvar segRows;                                                                                                         // 5013\n\t\tvar row;                                                                                                             // 5014\n                                                                                                                       // 5015\n\t\tsegRows = this.groupSegRows(segs); // group into nested arrays                                                       // 5016\n                                                                                                                       // 5017\n\t\t// iterate each row of segment groupings                                                                             // 5018\n\t\tfor (row = 0; row < segRows.length; row++) {                                                                         // 5019\n\t\t\trowStructs.push(                                                                                                    // 5020\n\t\t\t\tthis.renderSegRow(row, segRows[row])                                                                               // 5021\n\t\t\t);                                                                                                                  // 5022\n\t\t}                                                                                                                    // 5023\n                                                                                                                       // 5024\n\t\treturn rowStructs;                                                                                                   // 5025\n\t},                                                                                                                    // 5026\n                                                                                                                       // 5027\n                                                                                                                       // 5028\n\t// Builds the HTML to be used for the default element for an individual segment                                       // 5029\n\tfgSegHtml: function(seg, disableResizing) {                                                                           // 5030\n\t\tvar view = this.view;                                                                                                // 5031\n\t\tvar event = seg.event;                                                                                               // 5032\n\t\tvar isDraggable = view.isEventDraggable(event);                                                                      // 5033\n\t\tvar isResizableFromStart = !disableResizing && event.allDay &&                                                       // 5034\n\t\t\tseg.isStart && view.isEventResizableFromStart(event);                                                               // 5035\n\t\tvar isResizableFromEnd = !disableResizing && event.allDay &&                                                         // 5036\n\t\t\tseg.isEnd && view.isEventResizableFromEnd(event);                                                                   // 5037\n\t\tvar classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd);                      // 5038\n\t\tvar skinCss = cssToStr(this.getEventSkinCss(event));                                                                 // 5039\n\t\tvar timeHtml = '';                                                                                                   // 5040\n\t\tvar timeText;                                                                                                        // 5041\n\t\tvar titleHtml;                                                                                                       // 5042\n                                                                                                                       // 5043\n\t\tclasses.unshift('fc-day-grid-event', 'fc-h-event');                                                                  // 5044\n                                                                                                                       // 5045\n\t\t// Only display a timed events time if it is the starting segment                                                    // 5046\n\t\tif (seg.isStart) {                                                                                                   // 5047\n\t\t\ttimeText = this.getEventTimeText(event);                                                                            // 5048\n\t\t\tif (timeText) {                                                                                                     // 5049\n\t\t\t\ttimeHtml = '<span class=\"fc-time\">' + htmlEscape(timeText) + '</span>';                                            // 5050\n\t\t\t}                                                                                                                   // 5051\n\t\t}                                                                                                                    // 5052\n                                                                                                                       // 5053\n\t\ttitleHtml =                                                                                                          // 5054\n\t\t\t'<span class=\"fc-title\">' +                                                                                         // 5055\n\t\t\t\t(htmlEscape(event.title || '') || '&nbsp;') + // we always want one line of height                                 // 5056\n\t\t\t'</span>';                                                                                                          // 5057\n\t\t                                                                                                                     // 5058\n\t\treturn '<a class=\"' + classes.join(' ') + '\"' +                                                                      // 5059\n\t\t\t\t(event.url ?                                                                                                       // 5060\n\t\t\t\t\t' href=\"' + htmlEscape(event.url) + '\"' :                                                                         // 5061\n\t\t\t\t\t''                                                                                                                // 5062\n\t\t\t\t\t) +                                                                                                               // 5063\n\t\t\t\t(skinCss ?                                                                                                         // 5064\n\t\t\t\t\t' style=\"' + skinCss + '\"' :                                                                                      // 5065\n\t\t\t\t\t''                                                                                                                // 5066\n\t\t\t\t\t) +                                                                                                               // 5067\n\t\t\t'>' +                                                                                                               // 5068\n\t\t\t\t'<div class=\"fc-content\">' +                                                                                       // 5069\n\t\t\t\t\t(this.isRTL ?                                                                                                     // 5070\n\t\t\t\t\t\ttitleHtml + ' ' + timeHtml : // put a natural space in between                                                   // 5071\n\t\t\t\t\t\ttimeHtml + ' ' + titleHtml   //                                                                                  // 5072\n\t\t\t\t\t\t) +                                                                                                              // 5073\n\t\t\t\t'</div>' +                                                                                                         // 5074\n\t\t\t\t(isResizableFromStart ?                                                                                            // 5075\n\t\t\t\t\t'<div class=\"fc-resizer fc-start-resizer\" />' :                                                                   // 5076\n\t\t\t\t\t''                                                                                                                // 5077\n\t\t\t\t\t) +                                                                                                               // 5078\n\t\t\t\t(isResizableFromEnd ?                                                                                              // 5079\n\t\t\t\t\t'<div class=\"fc-resizer fc-end-resizer\" />' :                                                                     // 5080\n\t\t\t\t\t''                                                                                                                // 5081\n\t\t\t\t\t) +                                                                                                               // 5082\n\t\t\t'</a>';                                                                                                             // 5083\n\t},                                                                                                                    // 5084\n                                                                                                                       // 5085\n                                                                                                                       // 5086\n\t// Given a row # and an array of segments all in the same row, render a <tbody> element, a skeleton that contains     // 5087\n\t// the segments. Returns object with a bunch of internal data about how the render was calculated.                    // 5088\n\t// NOTE: modifies rowSegs                                                                                             // 5089\n\trenderSegRow: function(row, rowSegs) {                                                                                // 5090\n\t\tvar colCnt = this.colCnt;                                                                                            // 5091\n\t\tvar segLevels = this.buildSegLevels(rowSegs); // group into sub-arrays of levels                                     // 5092\n\t\tvar levelCnt = Math.max(1, segLevels.length); // ensure at least one level                                           // 5093\n\t\tvar tbody = $('<tbody/>');                                                                                           // 5094\n\t\tvar segMatrix = []; // lookup for which segments are rendered into which level+col cells                             // 5095\n\t\tvar cellMatrix = []; // lookup for all <td> elements of the level+col matrix                                         // 5096\n\t\tvar loneCellMatrix = []; // lookup for <td> elements that only take up a single column                               // 5097\n\t\tvar i, levelSegs;                                                                                                    // 5098\n\t\tvar col;                                                                                                             // 5099\n\t\tvar tr;                                                                                                              // 5100\n\t\tvar j, seg;                                                                                                          // 5101\n\t\tvar td;                                                                                                              // 5102\n                                                                                                                       // 5103\n\t\t// populates empty cells from the current column (`col`) to `endCol`                                                 // 5104\n\t\tfunction emptyCellsUntil(endCol) {                                                                                   // 5105\n\t\t\twhile (col < endCol) {                                                                                              // 5106\n\t\t\t\t// try to grab a cell from the level above and extend its rowspan. otherwise, create a fresh cell                  // 5107\n\t\t\t\ttd = (loneCellMatrix[i - 1] || [])[col];                                                                           // 5108\n\t\t\t\tif (td) {                                                                                                          // 5109\n\t\t\t\t\ttd.attr(                                                                                                          // 5110\n\t\t\t\t\t\t'rowspan',                                                                                                       // 5111\n\t\t\t\t\t\tparseInt(td.attr('rowspan') || 1, 10) + 1                                                                        // 5112\n\t\t\t\t\t);                                                                                                                // 5113\n\t\t\t\t}                                                                                                                  // 5114\n\t\t\t\telse {                                                                                                             // 5115\n\t\t\t\t\ttd = $('<td/>');                                                                                                  // 5116\n\t\t\t\t\ttr.append(td);                                                                                                    // 5117\n\t\t\t\t}                                                                                                                  // 5118\n\t\t\t\tcellMatrix[i][col] = td;                                                                                           // 5119\n\t\t\t\tloneCellMatrix[i][col] = td;                                                                                       // 5120\n\t\t\t\tcol++;                                                                                                             // 5121\n\t\t\t}                                                                                                                   // 5122\n\t\t}                                                                                                                    // 5123\n                                                                                                                       // 5124\n\t\tfor (i = 0; i < levelCnt; i++) { // iterate through all levels                                                       // 5125\n\t\t\tlevelSegs = segLevels[i];                                                                                           // 5126\n\t\t\tcol = 0;                                                                                                            // 5127\n\t\t\ttr = $('<tr/>');                                                                                                    // 5128\n                                                                                                                       // 5129\n\t\t\tsegMatrix.push([]);                                                                                                 // 5130\n\t\t\tcellMatrix.push([]);                                                                                                // 5131\n\t\t\tloneCellMatrix.push([]);                                                                                            // 5132\n                                                                                                                       // 5133\n\t\t\t// levelCnt might be 1 even though there are no actual levels. protect against this.                                // 5134\n\t\t\t// this single empty row is useful for styling.                                                                     // 5135\n\t\t\tif (levelSegs) {                                                                                                    // 5136\n\t\t\t\tfor (j = 0; j < levelSegs.length; j++) { // iterate through segments in level                                      // 5137\n\t\t\t\t\tseg = levelSegs[j];                                                                                               // 5138\n                                                                                                                       // 5139\n\t\t\t\t\temptyCellsUntil(seg.leftCol);                                                                                     // 5140\n                                                                                                                       // 5141\n\t\t\t\t\t// create a container that occupies or more columns. append the event element.                                    // 5142\n\t\t\t\t\ttd = $('<td class=\"fc-event-container\"/>').append(seg.el);                                                        // 5143\n\t\t\t\t\tif (seg.leftCol != seg.rightCol) {                                                                                // 5144\n\t\t\t\t\t\ttd.attr('colspan', seg.rightCol - seg.leftCol + 1);                                                              // 5145\n\t\t\t\t\t}                                                                                                                 // 5146\n\t\t\t\t\telse { // a single-column segment                                                                                 // 5147\n\t\t\t\t\t\tloneCellMatrix[i][col] = td;                                                                                     // 5148\n\t\t\t\t\t}                                                                                                                 // 5149\n                                                                                                                       // 5150\n\t\t\t\t\twhile (col <= seg.rightCol) {                                                                                     // 5151\n\t\t\t\t\t\tcellMatrix[i][col] = td;                                                                                         // 5152\n\t\t\t\t\t\tsegMatrix[i][col] = seg;                                                                                         // 5153\n\t\t\t\t\t\tcol++;                                                                                                           // 5154\n\t\t\t\t\t}                                                                                                                 // 5155\n                                                                                                                       // 5156\n\t\t\t\t\ttr.append(td);                                                                                                    // 5157\n\t\t\t\t}                                                                                                                  // 5158\n\t\t\t}                                                                                                                   // 5159\n                                                                                                                       // 5160\n\t\t\temptyCellsUntil(colCnt); // finish off the row                                                                      // 5161\n\t\t\tthis.bookendCells(tr, 'eventSkeleton');                                                                             // 5162\n\t\t\ttbody.append(tr);                                                                                                   // 5163\n\t\t}                                                                                                                    // 5164\n                                                                                                                       // 5165\n\t\treturn { // a \"rowStruct\"                                                                                            // 5166\n\t\t\trow: row, // the row number                                                                                         // 5167\n\t\t\ttbodyEl: tbody,                                                                                                     // 5168\n\t\t\tcellMatrix: cellMatrix,                                                                                             // 5169\n\t\t\tsegMatrix: segMatrix,                                                                                               // 5170\n\t\t\tsegLevels: segLevels,                                                                                               // 5171\n\t\t\tsegs: rowSegs                                                                                                       // 5172\n\t\t};                                                                                                                   // 5173\n\t},                                                                                                                    // 5174\n                                                                                                                       // 5175\n                                                                                                                       // 5176\n\t// Stacks a flat array of segments, which are all assumed to be in the same row, into subarrays of vertical levels.   // 5177\n\t// NOTE: modifies segs                                                                                                // 5178\n\tbuildSegLevels: function(segs) {                                                                                      // 5179\n\t\tvar levels = [];                                                                                                     // 5180\n\t\tvar i, seg;                                                                                                          // 5181\n\t\tvar j;                                                                                                               // 5182\n                                                                                                                       // 5183\n\t\t// Give preference to elements with certain criteria, so they have                                                   // 5184\n\t\t// a chance to be closer to the top.                                                                                 // 5185\n\t\tsegs.sort(compareSegs);                                                                                              // 5186\n\t\t                                                                                                                     // 5187\n\t\tfor (i = 0; i < segs.length; i++) {                                                                                  // 5188\n\t\t\tseg = segs[i];                                                                                                      // 5189\n                                                                                                                       // 5190\n\t\t\t// loop through levels, starting with the topmost, until the segment doesn't collide with other segments            // 5191\n\t\t\tfor (j = 0; j < levels.length; j++) {                                                                               // 5192\n\t\t\t\tif (!isDaySegCollision(seg, levels[j])) {                                                                          // 5193\n\t\t\t\t\tbreak;                                                                                                            // 5194\n\t\t\t\t}                                                                                                                  // 5195\n\t\t\t}                                                                                                                   // 5196\n\t\t\t// `j` now holds the desired subrow index                                                                           // 5197\n\t\t\tseg.level = j;                                                                                                      // 5198\n                                                                                                                       // 5199\n\t\t\t// create new level array if needed and append segment                                                              // 5200\n\t\t\t(levels[j] || (levels[j] = [])).push(seg);                                                                          // 5201\n\t\t}                                                                                                                    // 5202\n                                                                                                                       // 5203\n\t\t// order segments left-to-right. very important if calendar is RTL                                                   // 5204\n\t\tfor (j = 0; j < levels.length; j++) {                                                                                // 5205\n\t\t\tlevels[j].sort(compareDaySegCols);                                                                                  // 5206\n\t\t}                                                                                                                    // 5207\n                                                                                                                       // 5208\n\t\treturn levels;                                                                                                       // 5209\n\t},                                                                                                                    // 5210\n                                                                                                                       // 5211\n                                                                                                                       // 5212\n\t// Given a flat array of segments, return an array of sub-arrays, grouped by each segment's row                       // 5213\n\tgroupSegRows: function(segs) {                                                                                        // 5214\n\t\tvar segRows = [];                                                                                                    // 5215\n\t\tvar i;                                                                                                               // 5216\n                                                                                                                       // 5217\n\t\tfor (i = 0; i < this.rowCnt; i++) {                                                                                  // 5218\n\t\t\tsegRows.push([]);                                                                                                   // 5219\n\t\t}                                                                                                                    // 5220\n                                                                                                                       // 5221\n\t\tfor (i = 0; i < segs.length; i++) {                                                                                  // 5222\n\t\t\tsegRows[segs[i].row].push(segs[i]);                                                                                 // 5223\n\t\t}                                                                                                                    // 5224\n                                                                                                                       // 5225\n\t\treturn segRows;                                                                                                      // 5226\n\t}                                                                                                                     // 5227\n                                                                                                                       // 5228\n});                                                                                                                    // 5229\n                                                                                                                       // 5230\n                                                                                                                       // 5231\n// Computes whether two segments' columns collide. They are assumed to be in the same row.                             // 5232\nfunction isDaySegCollision(seg, otherSegs) {                                                                           // 5233\n\tvar i, otherSeg;                                                                                                      // 5234\n                                                                                                                       // 5235\n\tfor (i = 0; i < otherSegs.length; i++) {                                                                              // 5236\n\t\totherSeg = otherSegs[i];                                                                                             // 5237\n                                                                                                                       // 5238\n\t\tif (                                                                                                                 // 5239\n\t\t\totherSeg.leftCol <= seg.rightCol &&                                                                                 // 5240\n\t\t\totherSeg.rightCol >= seg.leftCol                                                                                    // 5241\n\t\t) {                                                                                                                  // 5242\n\t\t\treturn true;                                                                                                        // 5243\n\t\t}                                                                                                                    // 5244\n\t}                                                                                                                     // 5245\n                                                                                                                       // 5246\n\treturn false;                                                                                                         // 5247\n}                                                                                                                      // 5248\n                                                                                                                       // 5249\n                                                                                                                       // 5250\n// A cmp function for determining the leftmost event                                                                   // 5251\nfunction compareDaySegCols(a, b) {                                                                                     // 5252\n\treturn a.leftCol - b.leftCol;                                                                                         // 5253\n}                                                                                                                      // 5254\n                                                                                                                       // 5255\n;;                                                                                                                     // 5256\n                                                                                                                       // 5257\n/* Methods relate to limiting the number events for a given day on a DayGrid                                           // 5258\n----------------------------------------------------------------------------------------------------------------------*/\n// NOTE: all the segs being passed around in here are foreground segs                                                  // 5260\n                                                                                                                       // 5261\nDayGrid.mixin({                                                                                                        // 5262\n                                                                                                                       // 5263\n\tsegPopover: null, // the Popover that holds events that can't fit in a cell. null when not visible                    // 5264\n\tpopoverSegs: null, // an array of segment objects that the segPopover holds. null when not visible                    // 5265\n                                                                                                                       // 5266\n                                                                                                                       // 5267\n\tdestroySegPopover: function() {                                                                                       // 5268\n\t\tif (this.segPopover) {                                                                                               // 5269\n\t\t\tthis.segPopover.hide(); // will trigger destruction of `segPopover` and `popoverSegs`                               // 5270\n\t\t}                                                                                                                    // 5271\n\t},                                                                                                                    // 5272\n                                                                                                                       // 5273\n                                                                                                                       // 5274\n\t// Limits the number of \"levels\" (vertically stacking layers of events) for each row of the grid.                     // 5275\n\t// `levelLimit` can be false (don't limit), a number, or true (should be computed).                                   // 5276\n\tlimitRows: function(levelLimit) {                                                                                     // 5277\n\t\tvar rowStructs = this.rowStructs || [];                                                                              // 5278\n\t\tvar row; // row #                                                                                                    // 5279\n\t\tvar rowLevelLimit;                                                                                                   // 5280\n                                                                                                                       // 5281\n\t\tfor (row = 0; row < rowStructs.length; row++) {                                                                      // 5282\n\t\t\tthis.unlimitRow(row);                                                                                               // 5283\n                                                                                                                       // 5284\n\t\t\tif (!levelLimit) {                                                                                                  // 5285\n\t\t\t\trowLevelLimit = false;                                                                                             // 5286\n\t\t\t}                                                                                                                   // 5287\n\t\t\telse if (typeof levelLimit === 'number') {                                                                          // 5288\n\t\t\t\trowLevelLimit = levelLimit;                                                                                        // 5289\n\t\t\t}                                                                                                                   // 5290\n\t\t\telse {                                                                                                              // 5291\n\t\t\t\trowLevelLimit = this.computeRowLevelLimit(row);                                                                    // 5292\n\t\t\t}                                                                                                                   // 5293\n                                                                                                                       // 5294\n\t\t\tif (rowLevelLimit !== false) {                                                                                      // 5295\n\t\t\t\tthis.limitRow(row, rowLevelLimit);                                                                                 // 5296\n\t\t\t}                                                                                                                   // 5297\n\t\t}                                                                                                                    // 5298\n\t},                                                                                                                    // 5299\n                                                                                                                       // 5300\n                                                                                                                       // 5301\n\t// Computes the number of levels a row will accomodate without going outside its bounds.                              // 5302\n\t// Assumes the row is \"rigid\" (maintains a constant height regardless of what is inside).                             // 5303\n\t// `row` is the row number.                                                                                           // 5304\n\tcomputeRowLevelLimit: function(row) {                                                                                 // 5305\n\t\tvar rowEl = this.rowEls.eq(row); // the containing \"fake\" row div                                                    // 5306\n\t\tvar rowHeight = rowEl.height(); // TODO: cache somehow?                                                              // 5307\n\t\tvar trEls = this.rowStructs[row].tbodyEl.children();                                                                 // 5308\n\t\tvar i, trEl;                                                                                                         // 5309\n\t\tvar trHeight;                                                                                                        // 5310\n                                                                                                                       // 5311\n\t\tfunction iterInnerHeights(i, childNode) {                                                                            // 5312\n\t\t\ttrHeight = Math.max(trHeight, $(childNode).outerHeight());                                                          // 5313\n\t\t}                                                                                                                    // 5314\n                                                                                                                       // 5315\n\t\t// Reveal one level <tr> at a time and stop when we find one out of bounds                                           // 5316\n\t\tfor (i = 0; i < trEls.length; i++) {                                                                                 // 5317\n\t\t\ttrEl = trEls.eq(i).removeClass('fc-limited'); // reset to original state (reveal)                                   // 5318\n                                                                                                                       // 5319\n\t\t\t// with rowspans>1 and IE8, trEl.outerHeight() would return the height of the largest cell,                         // 5320\n\t\t\t// so instead, find the tallest inner content element.                                                              // 5321\n\t\t\ttrHeight = 0;                                                                                                       // 5322\n\t\t\ttrEl.find('> td > :first-child').each(iterInnerHeights);                                                            // 5323\n                                                                                                                       // 5324\n\t\t\tif (trEl.position().top + trHeight > rowHeight) {                                                                   // 5325\n\t\t\t\treturn i;                                                                                                          // 5326\n\t\t\t}                                                                                                                   // 5327\n\t\t}                                                                                                                    // 5328\n                                                                                                                       // 5329\n\t\treturn false; // should not limit at all                                                                             // 5330\n\t},                                                                                                                    // 5331\n                                                                                                                       // 5332\n                                                                                                                       // 5333\n\t// Limits the given grid row to the maximum number of levels and injects \"more\" links if necessary.                   // 5334\n\t// `row` is the row number.                                                                                           // 5335\n\t// `levelLimit` is a number for the maximum (inclusive) number of levels allowed.                                     // 5336\n\tlimitRow: function(row, levelLimit) {                                                                                 // 5337\n\t\tvar _this = this;                                                                                                    // 5338\n\t\tvar rowStruct = this.rowStructs[row];                                                                                // 5339\n\t\tvar moreNodes = []; // array of \"more\" <a> links and <td> DOM nodes                                                  // 5340\n\t\tvar col = 0; // col #, left-to-right (not chronologically)                                                           // 5341\n\t\tvar cell;                                                                                                            // 5342\n\t\tvar levelSegs; // array of segment objects in the last allowable level, ordered left-to-right                        // 5343\n\t\tvar cellMatrix; // a matrix (by level, then column) of all <td> jQuery elements in the row                           // 5344\n\t\tvar limitedNodes; // array of temporarily hidden level <tr> and segment <td> DOM nodes                               // 5345\n\t\tvar i, seg;                                                                                                          // 5346\n\t\tvar segsBelow; // array of segment objects below `seg` in the current `col`                                          // 5347\n\t\tvar totalSegsBelow; // total number of segments below `seg` in any of the columns `seg` occupies                     // 5348\n\t\tvar colSegsBelow; // array of segment arrays, below seg, one for each column (offset from segs's first column)       // 5349\n\t\tvar td, rowspan;                                                                                                     // 5350\n\t\tvar segMoreNodes; // array of \"more\" <td> cells that will stand-in for the current seg's cell                        // 5351\n\t\tvar j;                                                                                                               // 5352\n\t\tvar moreTd, moreWrap, moreLink;                                                                                      // 5353\n                                                                                                                       // 5354\n\t\t// Iterates through empty level cells and places \"more\" links inside if need be                                      // 5355\n\t\tfunction emptyCellsUntil(endCol) { // goes from current `col` to `endCol`                                            // 5356\n\t\t\twhile (col < endCol) {                                                                                              // 5357\n\t\t\t\tcell = _this.getCell(row, col);                                                                                    // 5358\n\t\t\t\tsegsBelow = _this.getCellSegs(cell, levelLimit);                                                                   // 5359\n\t\t\t\tif (segsBelow.length) {                                                                                            // 5360\n\t\t\t\t\ttd = cellMatrix[levelLimit - 1][col];                                                                             // 5361\n\t\t\t\t\tmoreLink = _this.renderMoreLink(cell, segsBelow);                                                                 // 5362\n\t\t\t\t\tmoreWrap = $('<div/>').append(moreLink);                                                                          // 5363\n\t\t\t\t\ttd.append(moreWrap);                                                                                              // 5364\n\t\t\t\t\tmoreNodes.push(moreWrap[0]);                                                                                      // 5365\n\t\t\t\t}                                                                                                                  // 5366\n\t\t\t\tcol++;                                                                                                             // 5367\n\t\t\t}                                                                                                                   // 5368\n\t\t}                                                                                                                    // 5369\n                                                                                                                       // 5370\n\t\tif (levelLimit && levelLimit < rowStruct.segLevels.length) { // is it actually over the limit?                       // 5371\n\t\t\tlevelSegs = rowStruct.segLevels[levelLimit - 1];                                                                    // 5372\n\t\t\tcellMatrix = rowStruct.cellMatrix;                                                                                  // 5373\n                                                                                                                       // 5374\n\t\t\tlimitedNodes = rowStruct.tbodyEl.children().slice(levelLimit) // get level <tr> elements past the limit             // 5375\n\t\t\t\t.addClass('fc-limited').get(); // hide elements and get a simple DOM-nodes array                                   // 5376\n                                                                                                                       // 5377\n\t\t\t// iterate though segments in the last allowable level                                                              // 5378\n\t\t\tfor (i = 0; i < levelSegs.length; i++) {                                                                            // 5379\n\t\t\t\tseg = levelSegs[i];                                                                                                // 5380\n\t\t\t\temptyCellsUntil(seg.leftCol); // process empty cells before the segment                                            // 5381\n                                                                                                                       // 5382\n\t\t\t\t// determine *all* segments below `seg` that occupy the same columns                                               // 5383\n\t\t\t\tcolSegsBelow = [];                                                                                                 // 5384\n\t\t\t\ttotalSegsBelow = 0;                                                                                                // 5385\n\t\t\t\twhile (col <= seg.rightCol) {                                                                                      // 5386\n\t\t\t\t\tcell = this.getCell(row, col);                                                                                    // 5387\n\t\t\t\t\tsegsBelow = this.getCellSegs(cell, levelLimit);                                                                   // 5388\n\t\t\t\t\tcolSegsBelow.push(segsBelow);                                                                                     // 5389\n\t\t\t\t\ttotalSegsBelow += segsBelow.length;                                                                               // 5390\n\t\t\t\t\tcol++;                                                                                                            // 5391\n\t\t\t\t}                                                                                                                  // 5392\n                                                                                                                       // 5393\n\t\t\t\tif (totalSegsBelow) { // do we need to replace this segment with one or many \"more\" links?                         // 5394\n\t\t\t\t\ttd = cellMatrix[levelLimit - 1][seg.leftCol]; // the segment's parent cell                                        // 5395\n\t\t\t\t\trowspan = td.attr('rowspan') || 1;                                                                                // 5396\n\t\t\t\t\tsegMoreNodes = [];                                                                                                // 5397\n                                                                                                                       // 5398\n\t\t\t\t\t// make a replacement <td> for each column the segment occupies. will be one for each colspan                     // 5399\n\t\t\t\t\tfor (j = 0; j < colSegsBelow.length; j++) {                                                                       // 5400\n\t\t\t\t\t\tmoreTd = $('<td class=\"fc-more-cell\"/>').attr('rowspan', rowspan);                                               // 5401\n\t\t\t\t\t\tsegsBelow = colSegsBelow[j];                                                                                     // 5402\n\t\t\t\t\t\tcell = this.getCell(row, seg.leftCol + j);                                                                       // 5403\n\t\t\t\t\t\tmoreLink = this.renderMoreLink(cell, [ seg ].concat(segsBelow)); // count seg as hidden too                      // 5404\n\t\t\t\t\t\tmoreWrap = $('<div/>').append(moreLink);                                                                         // 5405\n\t\t\t\t\t\tmoreTd.append(moreWrap);                                                                                         // 5406\n\t\t\t\t\t\tsegMoreNodes.push(moreTd[0]);                                                                                    // 5407\n\t\t\t\t\t\tmoreNodes.push(moreTd[0]);                                                                                       // 5408\n\t\t\t\t\t}                                                                                                                 // 5409\n                                                                                                                       // 5410\n\t\t\t\t\ttd.addClass('fc-limited').after($(segMoreNodes)); // hide original <td> and inject replacements                   // 5411\n\t\t\t\t\tlimitedNodes.push(td[0]);                                                                                         // 5412\n\t\t\t\t}                                                                                                                  // 5413\n\t\t\t}                                                                                                                   // 5414\n                                                                                                                       // 5415\n\t\t\temptyCellsUntil(this.colCnt); // finish off the level                                                               // 5416\n\t\t\trowStruct.moreEls = $(moreNodes); // for easy undoing later                                                         // 5417\n\t\t\trowStruct.limitedEls = $(limitedNodes); // for easy undoing later                                                   // 5418\n\t\t}                                                                                                                    // 5419\n\t},                                                                                                                    // 5420\n                                                                                                                       // 5421\n                                                                                                                       // 5422\n\t// Reveals all levels and removes all \"more\"-related elements for a grid's row.                                       // 5423\n\t// `row` is a row number.                                                                                             // 5424\n\tunlimitRow: function(row) {                                                                                           // 5425\n\t\tvar rowStruct = this.rowStructs[row];                                                                                // 5426\n                                                                                                                       // 5427\n\t\tif (rowStruct.moreEls) {                                                                                             // 5428\n\t\t\trowStruct.moreEls.remove();                                                                                         // 5429\n\t\t\trowStruct.moreEls = null;                                                                                           // 5430\n\t\t}                                                                                                                    // 5431\n                                                                                                                       // 5432\n\t\tif (rowStruct.limitedEls) {                                                                                          // 5433\n\t\t\trowStruct.limitedEls.removeClass('fc-limited');                                                                     // 5434\n\t\t\trowStruct.limitedEls = null;                                                                                        // 5435\n\t\t}                                                                                                                    // 5436\n\t},                                                                                                                    // 5437\n                                                                                                                       // 5438\n                                                                                                                       // 5439\n\t// Renders an <a> element that represents hidden event element for a cell.                                            // 5440\n\t// Responsible for attaching click handler as well.                                                                   // 5441\n\trenderMoreLink: function(cell, hiddenSegs) {                                                                          // 5442\n\t\tvar _this = this;                                                                                                    // 5443\n\t\tvar view = this.view;                                                                                                // 5444\n                                                                                                                       // 5445\n\t\treturn $('<a class=\"fc-more\"/>')                                                                                     // 5446\n\t\t\t.text(                                                                                                              // 5447\n\t\t\t\tthis.getMoreLinkText(hiddenSegs.length)                                                                            // 5448\n\t\t\t)                                                                                                                   // 5449\n\t\t\t.on('click', function(ev) {                                                                                         // 5450\n\t\t\t\tvar clickOption = view.opt('eventLimitClick');                                                                     // 5451\n\t\t\t\tvar date = cell.start;                                                                                             // 5452\n\t\t\t\tvar moreEl = $(this);                                                                                              // 5453\n\t\t\t\tvar dayEl = _this.getCellDayEl(cell);                                                                              // 5454\n\t\t\t\tvar allSegs = _this.getCellSegs(cell);                                                                             // 5455\n                                                                                                                       // 5456\n\t\t\t\t// rescope the segments to be within the cell's date                                                               // 5457\n\t\t\t\tvar reslicedAllSegs = _this.resliceDaySegs(allSegs, date);                                                         // 5458\n\t\t\t\tvar reslicedHiddenSegs = _this.resliceDaySegs(hiddenSegs, date);                                                   // 5459\n                                                                                                                       // 5460\n\t\t\t\tif (typeof clickOption === 'function') {                                                                           // 5461\n\t\t\t\t\t// the returned value can be an atomic option                                                                     // 5462\n\t\t\t\t\tclickOption = view.trigger('eventLimitClick', null, {                                                             // 5463\n\t\t\t\t\t\tdate: date,                                                                                                      // 5464\n\t\t\t\t\t\tdayEl: dayEl,                                                                                                    // 5465\n\t\t\t\t\t\tmoreEl: moreEl,                                                                                                  // 5466\n\t\t\t\t\t\tsegs: reslicedAllSegs,                                                                                           // 5467\n\t\t\t\t\t\thiddenSegs: reslicedHiddenSegs                                                                                   // 5468\n\t\t\t\t\t}, ev);                                                                                                           // 5469\n\t\t\t\t}                                                                                                                  // 5470\n                                                                                                                       // 5471\n\t\t\t\tif (clickOption === 'popover') {                                                                                   // 5472\n\t\t\t\t\t_this.showSegPopover(cell, moreEl, reslicedAllSegs);                                                              // 5473\n\t\t\t\t}                                                                                                                  // 5474\n\t\t\t\telse if (typeof clickOption === 'string') { // a view name                                                         // 5475\n\t\t\t\t\tview.calendar.zoomTo(date, clickOption);                                                                          // 5476\n\t\t\t\t}                                                                                                                  // 5477\n\t\t\t});                                                                                                                 // 5478\n\t},                                                                                                                    // 5479\n                                                                                                                       // 5480\n                                                                                                                       // 5481\n\t// Reveals the popover that displays all events within a cell                                                         // 5482\n\tshowSegPopover: function(cell, moreLink, segs) {                                                                      // 5483\n\t\tvar _this = this;                                                                                                    // 5484\n\t\tvar view = this.view;                                                                                                // 5485\n\t\tvar moreWrap = moreLink.parent(); // the <div> wrapper around the <a>                                                // 5486\n\t\tvar topEl; // the element we want to match the top coordinate of                                                     // 5487\n\t\tvar options;                                                                                                         // 5488\n                                                                                                                       // 5489\n\t\tif (this.rowCnt == 1) {                                                                                              // 5490\n\t\t\ttopEl = view.el; // will cause the popover to cover any sort of header                                              // 5491\n\t\t}                                                                                                                    // 5492\n\t\telse {                                                                                                               // 5493\n\t\t\ttopEl = this.rowEls.eq(cell.row); // will align with top of row                                                     // 5494\n\t\t}                                                                                                                    // 5495\n                                                                                                                       // 5496\n\t\toptions = {                                                                                                          // 5497\n\t\t\tclassName: 'fc-more-popover',                                                                                       // 5498\n\t\t\tcontent: this.renderSegPopoverContent(cell, segs),                                                                  // 5499\n\t\t\tparentEl: this.el,                                                                                                  // 5500\n\t\t\ttop: topEl.offset().top,                                                                                            // 5501\n\t\t\tautoHide: true, // when the user clicks elsewhere, hide the popover                                                 // 5502\n\t\t\tviewportConstrain: view.opt('popoverViewportConstrain'),                                                            // 5503\n\t\t\thide: function() {                                                                                                  // 5504\n\t\t\t\t// destroy everything when the popover is hidden                                                                   // 5505\n\t\t\t\t_this.segPopover.destroy();                                                                                        // 5506\n\t\t\t\t_this.segPopover = null;                                                                                           // 5507\n\t\t\t\t_this.popoverSegs = null;                                                                                          // 5508\n\t\t\t}                                                                                                                   // 5509\n\t\t};                                                                                                                   // 5510\n                                                                                                                       // 5511\n\t\t// Determine horizontal coordinate.                                                                                  // 5512\n\t\t// We use the moreWrap instead of the <td> to avoid border confusion.                                                // 5513\n\t\tif (this.isRTL) {                                                                                                    // 5514\n\t\t\toptions.right = moreWrap.offset().left + moreWrap.outerWidth() + 1; // +1 to be over cell border                    // 5515\n\t\t}                                                                                                                    // 5516\n\t\telse {                                                                                                               // 5517\n\t\t\toptions.left = moreWrap.offset().left - 1; // -1 to be over cell border                                             // 5518\n\t\t}                                                                                                                    // 5519\n                                                                                                                       // 5520\n\t\tthis.segPopover = new Popover(options);                                                                              // 5521\n\t\tthis.segPopover.show();                                                                                              // 5522\n\t},                                                                                                                    // 5523\n                                                                                                                       // 5524\n                                                                                                                       // 5525\n\t// Builds the inner DOM contents of the segment popover                                                               // 5526\n\trenderSegPopoverContent: function(cell, segs) {                                                                       // 5527\n\t\tvar view = this.view;                                                                                                // 5528\n\t\tvar isTheme = view.opt('theme');                                                                                     // 5529\n\t\tvar title = cell.start.format(view.opt('dayPopoverFormat'));                                                         // 5530\n\t\tvar content = $(                                                                                                     // 5531\n\t\t\t'<div class=\"fc-header ' + view.widgetHeaderClass + '\">' +                                                          // 5532\n\t\t\t\t'<span class=\"fc-close ' +                                                                                         // 5533\n\t\t\t\t\t(isTheme ? 'ui-icon ui-icon-closethick' : 'fc-icon fc-icon-x') +                                                  // 5534\n\t\t\t\t'\"></span>' +                                                                                                      // 5535\n\t\t\t\t'<span class=\"fc-title\">' +                                                                                        // 5536\n\t\t\t\t\thtmlEscape(title) +                                                                                               // 5537\n\t\t\t\t'</span>' +                                                                                                        // 5538\n\t\t\t\t'<div class=\"fc-clear\"/>' +                                                                                        // 5539\n\t\t\t'</div>' +                                                                                                          // 5540\n\t\t\t'<div class=\"fc-body ' + view.widgetContentClass + '\">' +                                                           // 5541\n\t\t\t\t'<div class=\"fc-event-container\"></div>' +                                                                         // 5542\n\t\t\t'</div>'                                                                                                            // 5543\n\t\t);                                                                                                                   // 5544\n\t\tvar segContainer = content.find('.fc-event-container');                                                              // 5545\n\t\tvar i;                                                                                                               // 5546\n                                                                                                                       // 5547\n\t\t// render each seg's `el` and only return the visible segs                                                           // 5548\n\t\tsegs = this.renderFgSegEls(segs, true); // disableResizing=true                                                      // 5549\n\t\tthis.popoverSegs = segs;                                                                                             // 5550\n                                                                                                                       // 5551\n\t\tfor (i = 0; i < segs.length; i++) {                                                                                  // 5552\n                                                                                                                       // 5553\n\t\t\t// because segments in the popover are not part of a grid coordinate system, provide a hint to any                  // 5554\n\t\t\t// grids that want to do drag-n-drop about which cell it came from                                                  // 5555\n\t\t\tsegs[i].cell = cell;                                                                                                // 5556\n                                                                                                                       // 5557\n\t\t\tsegContainer.append(segs[i].el);                                                                                    // 5558\n\t\t}                                                                                                                    // 5559\n                                                                                                                       // 5560\n\t\treturn content;                                                                                                      // 5561\n\t},                                                                                                                    // 5562\n                                                                                                                       // 5563\n                                                                                                                       // 5564\n\t// Given the events within an array of segment objects, reslice them to be in a single day                            // 5565\n\tresliceDaySegs: function(segs, dayDate) {                                                                             // 5566\n                                                                                                                       // 5567\n\t\t// build an array of the original events                                                                             // 5568\n\t\tvar events = $.map(segs, function(seg) {                                                                             // 5569\n\t\t\treturn seg.event;                                                                                                   // 5570\n\t\t});                                                                                                                  // 5571\n                                                                                                                       // 5572\n\t\tvar dayStart = dayDate.clone().stripTime();                                                                          // 5573\n\t\tvar dayEnd = dayStart.clone().add(1, 'days');                                                                        // 5574\n\t\tvar dayRange = { start: dayStart, end: dayEnd };                                                                     // 5575\n                                                                                                                       // 5576\n\t\t// slice the events with a custom slicing function                                                                   // 5577\n\t\tsegs = this.eventsToSegs(                                                                                            // 5578\n\t\t\tevents,                                                                                                             // 5579\n\t\t\tfunction(range) {                                                                                                   // 5580\n\t\t\t\tvar seg = intersectionToSeg(range, dayRange); // undefind if no intersection                                       // 5581\n\t\t\t\treturn seg ? [ seg ] : []; // must return an array of segments                                                     // 5582\n\t\t\t}                                                                                                                   // 5583\n\t\t);                                                                                                                   // 5584\n                                                                                                                       // 5585\n\t\t// force an order because eventsToSegs doesn't guarantee one                                                         // 5586\n\t\tsegs.sort(compareSegs);                                                                                              // 5587\n                                                                                                                       // 5588\n\t\treturn segs;                                                                                                         // 5589\n\t},                                                                                                                    // 5590\n                                                                                                                       // 5591\n                                                                                                                       // 5592\n\t// Generates the text that should be inside a \"more\" link, given the number of events it represents                   // 5593\n\tgetMoreLinkText: function(num) {                                                                                      // 5594\n\t\tvar opt = this.view.opt('eventLimitText');                                                                           // 5595\n                                                                                                                       // 5596\n\t\tif (typeof opt === 'function') {                                                                                     // 5597\n\t\t\treturn opt(num);                                                                                                    // 5598\n\t\t}                                                                                                                    // 5599\n\t\telse {                                                                                                               // 5600\n\t\t\treturn '+' + num + ' ' + opt;                                                                                       // 5601\n\t\t}                                                                                                                    // 5602\n\t},                                                                                                                    // 5603\n                                                                                                                       // 5604\n                                                                                                                       // 5605\n\t// Returns segments within a given cell.                                                                              // 5606\n\t// If `startLevel` is specified, returns only events including and below that level. Otherwise returns all segs.      // 5607\n\tgetCellSegs: function(cell, startLevel) {                                                                             // 5608\n\t\tvar segMatrix = this.rowStructs[cell.row].segMatrix;                                                                 // 5609\n\t\tvar level = startLevel || 0;                                                                                         // 5610\n\t\tvar segs = [];                                                                                                       // 5611\n\t\tvar seg;                                                                                                             // 5612\n                                                                                                                       // 5613\n\t\twhile (level < segMatrix.length) {                                                                                   // 5614\n\t\t\tseg = segMatrix[level][cell.col];                                                                                   // 5615\n\t\t\tif (seg) {                                                                                                          // 5616\n\t\t\t\tsegs.push(seg);                                                                                                    // 5617\n\t\t\t}                                                                                                                   // 5618\n\t\t\tlevel++;                                                                                                            // 5619\n\t\t}                                                                                                                    // 5620\n                                                                                                                       // 5621\n\t\treturn segs;                                                                                                         // 5622\n\t}                                                                                                                     // 5623\n                                                                                                                       // 5624\n});                                                                                                                    // 5625\n                                                                                                                       // 5626\n;;                                                                                                                     // 5627\n                                                                                                                       // 5628\n/* A component that renders one or more columns of vertical time slots                                                 // 5629\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 5631\nvar TimeGrid = Grid.extend({                                                                                           // 5632\n                                                                                                                       // 5633\n\tslotDuration: null, // duration of a \"slot\", a distinct time segment on given day, visualized by lines                // 5634\n\tsnapDuration: null, // granularity of time for dragging and selecting                                                 // 5635\n                                                                                                                       // 5636\n\tminTime: null, // Duration object that denotes the first visible time of any given day                                // 5637\n\tmaxTime: null, // Duration object that denotes the exclusive visible end time of any given day                        // 5638\n                                                                                                                       // 5639\n\taxisFormat: null, // formatting string for times running along vertical axis                                          // 5640\n                                                                                                                       // 5641\n\tdayEls: null, // cells elements in the day-row background                                                             // 5642\n\tslatEls: null, // elements running horizontally across all columns                                                    // 5643\n                                                                                                                       // 5644\n\tslatTops: null, // an array of top positions, relative to the container. last item holds bottom of last slot          // 5645\n                                                                                                                       // 5646\n\thelperEl: null, // cell skeleton element for rendering the mock event \"helper\"                                        // 5647\n                                                                                                                       // 5648\n\tbusinessHourSegs: null,                                                                                               // 5649\n                                                                                                                       // 5650\n                                                                                                                       // 5651\n\tconstructor: function() {                                                                                             // 5652\n\t\tGrid.apply(this, arguments); // call the super-constructor                                                           // 5653\n\t\tthis.processOptions();                                                                                               // 5654\n\t},                                                                                                                    // 5655\n                                                                                                                       // 5656\n                                                                                                                       // 5657\n\t// Renders the time grid into `this.el`, which should already be assigned.                                            // 5658\n\t// Relies on the view's colCnt. In the future, this component should probably be self-sufficient.                     // 5659\n\trenderDates: function() {                                                                                             // 5660\n\t\tthis.el.html(this.renderHtml());                                                                                     // 5661\n\t\tthis.dayEls = this.el.find('.fc-day');                                                                               // 5662\n\t\tthis.slatEls = this.el.find('.fc-slats tr');                                                                         // 5663\n\t},                                                                                                                    // 5664\n                                                                                                                       // 5665\n                                                                                                                       // 5666\n\trenderBusinessHours: function() {                                                                                     // 5667\n\t\tvar events = this.view.calendar.getBusinessHoursEvents();                                                            // 5668\n\t\tthis.businessHourSegs = this.renderFill('businessHours', this.eventsToSegs(events), 'bgevent');                      // 5669\n\t},                                                                                                                    // 5670\n                                                                                                                       // 5671\n                                                                                                                       // 5672\n\t// Renders the basic HTML skeleton for the grid                                                                       // 5673\n\trenderHtml: function() {                                                                                              // 5674\n\t\treturn '' +                                                                                                          // 5675\n\t\t\t'<div class=\"fc-bg\">' +                                                                                             // 5676\n\t\t\t\t'<table>' +                                                                                                        // 5677\n\t\t\t\t\tthis.rowHtml('slotBg') + // leverages RowRenderer, which will call slotBgCellHtml                                 // 5678\n\t\t\t\t'</table>' +                                                                                                       // 5679\n\t\t\t'</div>' +                                                                                                          // 5680\n\t\t\t'<div class=\"fc-slats\">' +                                                                                          // 5681\n\t\t\t\t'<table>' +                                                                                                        // 5682\n\t\t\t\t\tthis.slatRowHtml() +                                                                                              // 5683\n\t\t\t\t'</table>' +                                                                                                       // 5684\n\t\t\t'</div>';                                                                                                           // 5685\n\t},                                                                                                                    // 5686\n                                                                                                                       // 5687\n                                                                                                                       // 5688\n\t// Renders the HTML for a vertical background cell behind the slots.                                                  // 5689\n\t// This method is distinct from 'bg' because we wanted a new `rowType` so the View could customize the rendering.     // 5690\n\tslotBgCellHtml: function(cell) {                                                                                      // 5691\n\t\treturn this.bgCellHtml(cell);                                                                                        // 5692\n\t},                                                                                                                    // 5693\n                                                                                                                       // 5694\n                                                                                                                       // 5695\n\t// Generates the HTML for the horizontal \"slats\" that run width-wise. Has a time axis on a side. Depends on RTL.      // 5696\n\tslatRowHtml: function() {                                                                                             // 5697\n\t\tvar view = this.view;                                                                                                // 5698\n\t\tvar isRTL = this.isRTL;                                                                                              // 5699\n\t\tvar html = '';                                                                                                       // 5700\n\t\tvar slotNormal = this.slotDuration.asMinutes() % 15 === 0;                                                           // 5701\n\t\tvar slotTime = moment.duration(+this.minTime); // wish there was .clone() for durations                              // 5702\n\t\tvar slotDate; // will be on the view's first day, but we only care about its time                                    // 5703\n\t\tvar minutes;                                                                                                         // 5704\n\t\tvar axisHtml;                                                                                                        // 5705\n                                                                                                                       // 5706\n\t\t// Calculate the time for each slot                                                                                  // 5707\n\t\twhile (slotTime < this.maxTime) {                                                                                    // 5708\n\t\t\tslotDate = this.start.clone().time(slotTime); // will be in UTC but that's good. to avoid DST issues                // 5709\n\t\t\tminutes = slotDate.minutes();                                                                                       // 5710\n                                                                                                                       // 5711\n\t\t\taxisHtml =                                                                                                          // 5712\n\t\t\t\t'<td class=\"fc-axis fc-time ' + view.widgetContentClass + '\" ' + view.axisStyleAttr() + '>' +                      // 5713\n\t\t\t\t\t((!slotNormal || !minutes) ? // if irregular slot duration, or on the hour, then display the time                 // 5714\n\t\t\t\t\t\t'<span>' + // for matchCellWidths                                                                                // 5715\n\t\t\t\t\t\t\thtmlEscape(slotDate.format(this.axisFormat)) +                                                                  // 5716\n\t\t\t\t\t\t'</span>' :                                                                                                      // 5717\n\t\t\t\t\t\t''                                                                                                               // 5718\n\t\t\t\t\t\t) +                                                                                                              // 5719\n\t\t\t\t'</td>';                                                                                                           // 5720\n                                                                                                                       // 5721\n\t\t\thtml +=                                                                                                             // 5722\n\t\t\t\t'<tr ' + (!minutes ? '' : 'class=\"fc-minor\"') + '>' +                                                              // 5723\n\t\t\t\t\t(!isRTL ? axisHtml : '') +                                                                                        // 5724\n\t\t\t\t\t'<td class=\"' + view.widgetContentClass + '\"/>' +                                                                 // 5725\n\t\t\t\t\t(isRTL ? axisHtml : '') +                                                                                         // 5726\n\t\t\t\t\"</tr>\";                                                                                                           // 5727\n                                                                                                                       // 5728\n\t\t\tslotTime.add(this.slotDuration);                                                                                    // 5729\n\t\t}                                                                                                                    // 5730\n                                                                                                                       // 5731\n\t\treturn html;                                                                                                         // 5732\n\t},                                                                                                                    // 5733\n                                                                                                                       // 5734\n                                                                                                                       // 5735\n\t/* Options                                                                                                            // 5736\n\t------------------------------------------------------------------------------------------------------------------*/  // 5737\n                                                                                                                       // 5738\n                                                                                                                       // 5739\n\t// Parses various options into properties of this object                                                              // 5740\n\tprocessOptions: function() {                                                                                          // 5741\n\t\tvar view = this.view;                                                                                                // 5742\n\t\tvar slotDuration = view.opt('slotDuration');                                                                         // 5743\n\t\tvar snapDuration = view.opt('snapDuration');                                                                         // 5744\n                                                                                                                       // 5745\n\t\tslotDuration = moment.duration(slotDuration);                                                                        // 5746\n\t\tsnapDuration = snapDuration ? moment.duration(snapDuration) : slotDuration;                                          // 5747\n                                                                                                                       // 5748\n\t\tthis.slotDuration = slotDuration;                                                                                    // 5749\n\t\tthis.snapDuration = snapDuration;                                                                                    // 5750\n\t\tthis.cellDuration = snapDuration; // for Grid system                                                                 // 5751\n                                                                                                                       // 5752\n\t\tthis.minTime = moment.duration(view.opt('minTime'));                                                                 // 5753\n\t\tthis.maxTime = moment.duration(view.opt('maxTime'));                                                                 // 5754\n                                                                                                                       // 5755\n\t\tthis.axisFormat = view.opt('axisFormat') || view.opt('smallTimeFormat');                                             // 5756\n\t},                                                                                                                    // 5757\n                                                                                                                       // 5758\n                                                                                                                       // 5759\n\t// Computes a default column header formatting string if `colFormat` is not explicitly defined                        // 5760\n\tcomputeColHeadFormat: function() {                                                                                    // 5761\n\t\tif (this.colCnt > 1) { // multiple days, so full single date string WON'T be in title text                           // 5762\n\t\t\treturn this.view.opt('dayOfMonthFormat'); // \"Sat 12/10\"                                                            // 5763\n\t\t}                                                                                                                    // 5764\n\t\telse { // single day, so full single date string will probably be in title text                                      // 5765\n\t\t\treturn 'dddd'; // \"Saturday\"                                                                                        // 5766\n\t\t}                                                                                                                    // 5767\n\t},                                                                                                                    // 5768\n                                                                                                                       // 5769\n                                                                                                                       // 5770\n\t// Computes a default event time formatting string if `timeFormat` is not explicitly defined                          // 5771\n\tcomputeEventTimeFormat: function() {                                                                                  // 5772\n\t\treturn this.view.opt('noMeridiemTimeFormat'); // like \"6:30\" (no AM/PM)                                              // 5773\n\t},                                                                                                                    // 5774\n                                                                                                                       // 5775\n                                                                                                                       // 5776\n\t// Computes a default `displayEventEnd` value if one is not expliclty defined                                         // 5777\n\tcomputeDisplayEventEnd: function() {                                                                                  // 5778\n\t\treturn true;                                                                                                         // 5779\n\t},                                                                                                                    // 5780\n                                                                                                                       // 5781\n                                                                                                                       // 5782\n\t/* Cell System                                                                                                        // 5783\n\t------------------------------------------------------------------------------------------------------------------*/  // 5784\n                                                                                                                       // 5785\n                                                                                                                       // 5786\n\t// Initializes row/col information                                                                                    // 5787\n\tupdateCells: function() {                                                                                             // 5788\n\t\tvar view = this.view;                                                                                                // 5789\n\t\tvar colData = [];                                                                                                    // 5790\n\t\tvar date;                                                                                                            // 5791\n                                                                                                                       // 5792\n\t\tdate = this.start.clone();                                                                                           // 5793\n\t\twhile (date.isBefore(this.end)) {                                                                                    // 5794\n\t\t\tcolData.push({                                                                                                      // 5795\n\t\t\t\tday: date.clone()                                                                                                  // 5796\n\t\t\t});                                                                                                                 // 5797\n\t\t\tdate.add(1, 'day');                                                                                                 // 5798\n\t\t\tdate = view.skipHiddenDays(date);                                                                                   // 5799\n\t\t}                                                                                                                    // 5800\n                                                                                                                       // 5801\n\t\tif (this.isRTL) {                                                                                                    // 5802\n\t\t\tcolData.reverse();                                                                                                  // 5803\n\t\t}                                                                                                                    // 5804\n                                                                                                                       // 5805\n\t\tthis.colData = colData;                                                                                              // 5806\n\t\tthis.colCnt = colData.length;                                                                                        // 5807\n\t\tthis.rowCnt = Math.ceil((this.maxTime - this.minTime) / this.snapDuration); // # of vertical snaps                   // 5808\n\t},                                                                                                                    // 5809\n                                                                                                                       // 5810\n                                                                                                                       // 5811\n\t// Given a cell object, generates its start date. Returns a reference-free copy.                                      // 5812\n\tcomputeCellDate: function(cell) {                                                                                     // 5813\n\t\tvar time = this.computeSnapTime(cell.row);                                                                           // 5814\n                                                                                                                       // 5815\n\t\treturn this.view.calendar.rezoneDate(cell.day).time(time);                                                           // 5816\n\t},                                                                                                                    // 5817\n                                                                                                                       // 5818\n                                                                                                                       // 5819\n\t// Retrieves the element representing the given column                                                                // 5820\n\tgetColEl: function(col) {                                                                                             // 5821\n\t\treturn this.dayEls.eq(col);                                                                                          // 5822\n\t},                                                                                                                    // 5823\n                                                                                                                       // 5824\n                                                                                                                       // 5825\n\t/* Dates                                                                                                              // 5826\n\t------------------------------------------------------------------------------------------------------------------*/  // 5827\n                                                                                                                       // 5828\n                                                                                                                       // 5829\n\t// Given a row number of the grid, representing a \"snap\", returns a time (Duration) from its start-of-day             // 5830\n\tcomputeSnapTime: function(row) {                                                                                      // 5831\n\t\treturn moment.duration(this.minTime + this.snapDuration * row);                                                      // 5832\n\t},                                                                                                                    // 5833\n                                                                                                                       // 5834\n                                                                                                                       // 5835\n\t// Slices up a date range by column into an array of segments                                                         // 5836\n\trangeToSegs: function(range) {                                                                                        // 5837\n\t\tvar colCnt = this.colCnt;                                                                                            // 5838\n\t\tvar segs = [];                                                                                                       // 5839\n\t\tvar seg;                                                                                                             // 5840\n\t\tvar col;                                                                                                             // 5841\n\t\tvar colDate;                                                                                                         // 5842\n\t\tvar colRange;                                                                                                        // 5843\n                                                                                                                       // 5844\n\t\t// normalize :(                                                                                                      // 5845\n\t\trange = {                                                                                                            // 5846\n\t\t\tstart: range.start.clone().stripZone(),                                                                             // 5847\n\t\t\tend: range.end.clone().stripZone()                                                                                  // 5848\n\t\t};                                                                                                                   // 5849\n                                                                                                                       // 5850\n\t\tfor (col = 0; col < colCnt; col++) {                                                                                 // 5851\n\t\t\tcolDate = this.colData[col].day; // will be ambig time/timezone                                                     // 5852\n\t\t\tcolRange = {                                                                                                        // 5853\n\t\t\t\tstart: colDate.clone().time(this.minTime),                                                                         // 5854\n\t\t\t\tend: colDate.clone().time(this.maxTime)                                                                            // 5855\n\t\t\t};                                                                                                                  // 5856\n\t\t\tseg = intersectionToSeg(range, colRange); // both will be ambig timezone                                            // 5857\n\t\t\tif (seg) {                                                                                                          // 5858\n\t\t\t\tseg.col = col;                                                                                                     // 5859\n\t\t\t\tsegs.push(seg);                                                                                                    // 5860\n\t\t\t}                                                                                                                   // 5861\n\t\t}                                                                                                                    // 5862\n                                                                                                                       // 5863\n\t\treturn segs;                                                                                                         // 5864\n\t},                                                                                                                    // 5865\n                                                                                                                       // 5866\n                                                                                                                       // 5867\n\t/* Coordinates                                                                                                        // 5868\n\t------------------------------------------------------------------------------------------------------------------*/  // 5869\n                                                                                                                       // 5870\n                                                                                                                       // 5871\n\tupdateSize: function(isResize) { // NOT a standard Grid method                                                        // 5872\n\t\tthis.computeSlatTops();                                                                                              // 5873\n                                                                                                                       // 5874\n\t\tif (isResize) {                                                                                                      // 5875\n\t\t\tthis.updateSegVerticals();                                                                                          // 5876\n\t\t}                                                                                                                    // 5877\n\t},                                                                                                                    // 5878\n                                                                                                                       // 5879\n                                                                                                                       // 5880\n\t// Computes the top/bottom coordinates of each \"snap\" rows                                                            // 5881\n\tcomputeRowCoords: function() {                                                                                        // 5882\n\t\tvar originTop = this.el.offset().top;                                                                                // 5883\n\t\tvar items = [];                                                                                                      // 5884\n\t\tvar i;                                                                                                               // 5885\n\t\tvar item;                                                                                                            // 5886\n                                                                                                                       // 5887\n\t\tfor (i = 0; i < this.rowCnt; i++) {                                                                                  // 5888\n\t\t\titem = {                                                                                                            // 5889\n\t\t\t\ttop: originTop + this.computeTimeTop(this.computeSnapTime(i))                                                      // 5890\n\t\t\t};                                                                                                                  // 5891\n\t\t\tif (i > 0) {                                                                                                        // 5892\n\t\t\t\titems[i - 1].bottom = item.top;                                                                                    // 5893\n\t\t\t}                                                                                                                   // 5894\n\t\t\titems.push(item);                                                                                                   // 5895\n\t\t}                                                                                                                    // 5896\n\t\titem.bottom = item.top + this.computeTimeTop(this.computeSnapTime(i));                                               // 5897\n                                                                                                                       // 5898\n\t\treturn items;                                                                                                        // 5899\n\t},                                                                                                                    // 5900\n                                                                                                                       // 5901\n                                                                                                                       // 5902\n\t// Computes the top coordinate, relative to the bounds of the grid, of the given date.                                // 5903\n\t// A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.                                // 5904\n\tcomputeDateTop: function(date, startOfDayDate) {                                                                      // 5905\n\t\treturn this.computeTimeTop(                                                                                          // 5906\n\t\t\tmoment.duration(                                                                                                    // 5907\n\t\t\t\tdate.clone().stripZone() - startOfDayDate.clone().stripTime()                                                      // 5908\n\t\t\t)                                                                                                                   // 5909\n\t\t);                                                                                                                   // 5910\n\t},                                                                                                                    // 5911\n                                                                                                                       // 5912\n                                                                                                                       // 5913\n\t// Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).                   // 5914\n\tcomputeTimeTop: function(time) {                                                                                      // 5915\n\t\tvar slatCoverage = (time - this.minTime) / this.slotDuration; // floating-point value of # of slots covered          // 5916\n\t\tvar slatIndex;                                                                                                       // 5917\n\t\tvar slatRemainder;                                                                                                   // 5918\n\t\tvar slatTop;                                                                                                         // 5919\n\t\tvar slatBottom;                                                                                                      // 5920\n                                                                                                                       // 5921\n\t\t// constrain. because minTime/maxTime might be customized                                                            // 5922\n\t\tslatCoverage = Math.max(0, slatCoverage);                                                                            // 5923\n\t\tslatCoverage = Math.min(this.slatEls.length, slatCoverage);                                                          // 5924\n                                                                                                                       // 5925\n\t\tslatIndex = Math.floor(slatCoverage); // an integer index of the furthest whole slot                                 // 5926\n\t\tslatRemainder = slatCoverage - slatIndex;                                                                            // 5927\n\t\tslatTop = this.slatTops[slatIndex]; // the top position of the furthest whole slot                                   // 5928\n                                                                                                                       // 5929\n\t\tif (slatRemainder) { // time spans part-way into the slot                                                            // 5930\n\t\t\tslatBottom = this.slatTops[slatIndex + 1];                                                                          // 5931\n\t\t\treturn slatTop + (slatBottom - slatTop) * slatRemainder; // part-way between slots                                  // 5932\n\t\t}                                                                                                                    // 5933\n\t\telse {                                                                                                               // 5934\n\t\t\treturn slatTop;                                                                                                     // 5935\n\t\t}                                                                                                                    // 5936\n\t},                                                                                                                    // 5937\n                                                                                                                       // 5938\n                                                                                                                       // 5939\n\t// Queries each `slatEl` for its position relative to the grid's container and stores it in `slatTops`.               // 5940\n\t// Includes the the bottom of the last slat as the last item in the array.                                            // 5941\n\tcomputeSlatTops: function() {                                                                                         // 5942\n\t\tvar tops = [];                                                                                                       // 5943\n\t\tvar top;                                                                                                             // 5944\n                                                                                                                       // 5945\n\t\tthis.slatEls.each(function(i, node) {                                                                                // 5946\n\t\t\ttop = $(node).position().top;                                                                                       // 5947\n\t\t\ttops.push(top);                                                                                                     // 5948\n\t\t});                                                                                                                  // 5949\n                                                                                                                       // 5950\n\t\ttops.push(top + this.slatEls.last().outerHeight()); // bottom of the last slat                                       // 5951\n                                                                                                                       // 5952\n\t\tthis.slatTops = tops;                                                                                                // 5953\n\t},                                                                                                                    // 5954\n                                                                                                                       // 5955\n                                                                                                                       // 5956\n\t/* Event Drag Visualization                                                                                           // 5957\n\t------------------------------------------------------------------------------------------------------------------*/  // 5958\n                                                                                                                       // 5959\n                                                                                                                       // 5960\n\t// Renders a visual indication of an event being dragged over the specified date(s).                                  // 5961\n\t// dropLocation's end might be null, as well as `seg`. See Grid::renderDrag for more info.                            // 5962\n\t// A returned value of `true` signals that a mock \"helper\" event has been rendered.                                   // 5963\n\trenderDrag: function(dropLocation, seg) {                                                                             // 5964\n                                                                                                                       // 5965\n\t\tif (seg) { // if there is event information for this drag, render a helper event                                     // 5966\n\t\t\tthis.renderRangeHelper(dropLocation, seg);                                                                          // 5967\n\t\t\tthis.applyDragOpacity(this.helperEl);                                                                               // 5968\n                                                                                                                       // 5969\n\t\t\treturn true; // signal that a helper has been rendered                                                              // 5970\n\t\t}                                                                                                                    // 5971\n\t\telse {                                                                                                               // 5972\n\t\t\t// otherwise, just render a highlight                                                                               // 5973\n\t\t\tthis.renderHighlight(                                                                                               // 5974\n\t\t\t\tthis.view.calendar.ensureVisibleEventRange(dropLocation) // needs to be a proper range                             // 5975\n\t\t\t);                                                                                                                  // 5976\n\t\t}                                                                                                                    // 5977\n\t},                                                                                                                    // 5978\n                                                                                                                       // 5979\n                                                                                                                       // 5980\n\t// Unrenders any visual indication of an event being dragged                                                          // 5981\n\tdestroyDrag: function() {                                                                                             // 5982\n\t\tthis.destroyHelper();                                                                                                // 5983\n\t\tthis.destroyHighlight();                                                                                             // 5984\n\t},                                                                                                                    // 5985\n                                                                                                                       // 5986\n                                                                                                                       // 5987\n\t/* Event Resize Visualization                                                                                         // 5988\n\t------------------------------------------------------------------------------------------------------------------*/  // 5989\n                                                                                                                       // 5990\n                                                                                                                       // 5991\n\t// Renders a visual indication of an event being resized                                                              // 5992\n\trenderEventResize: function(range, seg) {                                                                             // 5993\n\t\tthis.renderRangeHelper(range, seg);                                                                                  // 5994\n\t},                                                                                                                    // 5995\n                                                                                                                       // 5996\n                                                                                                                       // 5997\n\t// Unrenders any visual indication of an event being resized                                                          // 5998\n\tdestroyEventResize: function() {                                                                                      // 5999\n\t\tthis.destroyHelper();                                                                                                // 6000\n\t},                                                                                                                    // 6001\n                                                                                                                       // 6002\n                                                                                                                       // 6003\n\t/* Event Helper                                                                                                       // 6004\n\t------------------------------------------------------------------------------------------------------------------*/  // 6005\n                                                                                                                       // 6006\n                                                                                                                       // 6007\n\t// Renders a mock \"helper\" event. `sourceSeg` is the original segment object and might be null (an external drag)     // 6008\n\trenderHelper: function(event, sourceSeg) {                                                                            // 6009\n\t\tvar segs = this.eventsToSegs([ event ]);                                                                             // 6010\n\t\tvar tableEl;                                                                                                         // 6011\n\t\tvar i, seg;                                                                                                          // 6012\n\t\tvar sourceEl;                                                                                                        // 6013\n                                                                                                                       // 6014\n\t\tsegs = this.renderFgSegEls(segs); // assigns each seg's el and returns a subset of segs that were rendered           // 6015\n\t\ttableEl = this.renderSegTable(segs);                                                                                 // 6016\n                                                                                                                       // 6017\n\t\t// Try to make the segment that is in the same row as sourceSeg look the same                                        // 6018\n\t\tfor (i = 0; i < segs.length; i++) {                                                                                  // 6019\n\t\t\tseg = segs[i];                                                                                                      // 6020\n\t\t\tif (sourceSeg && sourceSeg.col === seg.col) {                                                                       // 6021\n\t\t\t\tsourceEl = sourceSeg.el;                                                                                           // 6022\n\t\t\t\tseg.el.css({                                                                                                       // 6023\n\t\t\t\t\tleft: sourceEl.css('left'),                                                                                       // 6024\n\t\t\t\t\tright: sourceEl.css('right'),                                                                                     // 6025\n\t\t\t\t\t'margin-left': sourceEl.css('margin-left'),                                                                       // 6026\n\t\t\t\t\t'margin-right': sourceEl.css('margin-right')                                                                      // 6027\n\t\t\t\t});                                                                                                                // 6028\n\t\t\t}                                                                                                                   // 6029\n\t\t}                                                                                                                    // 6030\n                                                                                                                       // 6031\n\t\tthis.helperEl = $('<div class=\"fc-helper-skeleton\"/>')                                                               // 6032\n\t\t\t.append(tableEl)                                                                                                    // 6033\n\t\t\t\t.appendTo(this.el);                                                                                                // 6034\n\t},                                                                                                                    // 6035\n                                                                                                                       // 6036\n                                                                                                                       // 6037\n\t// Unrenders any mock helper event                                                                                    // 6038\n\tdestroyHelper: function() {                                                                                           // 6039\n\t\tif (this.helperEl) {                                                                                                 // 6040\n\t\t\tthis.helperEl.remove();                                                                                             // 6041\n\t\t\tthis.helperEl = null;                                                                                               // 6042\n\t\t}                                                                                                                    // 6043\n\t},                                                                                                                    // 6044\n                                                                                                                       // 6045\n                                                                                                                       // 6046\n\t/* Selection                                                                                                          // 6047\n\t------------------------------------------------------------------------------------------------------------------*/  // 6048\n                                                                                                                       // 6049\n                                                                                                                       // 6050\n\t// Renders a visual indication of a selection. Overrides the default, which was to simply render a highlight.         // 6051\n\trenderSelection: function(range) {                                                                                    // 6052\n\t\tif (this.view.opt('selectHelper')) { // this setting signals that a mock helper event should be rendered             // 6053\n\t\t\tthis.renderRangeHelper(range);                                                                                      // 6054\n\t\t}                                                                                                                    // 6055\n\t\telse {                                                                                                               // 6056\n\t\t\tthis.renderHighlight(range);                                                                                        // 6057\n\t\t}                                                                                                                    // 6058\n\t},                                                                                                                    // 6059\n                                                                                                                       // 6060\n                                                                                                                       // 6061\n\t// Unrenders any visual indication of a selection                                                                     // 6062\n\tdestroySelection: function() {                                                                                        // 6063\n\t\tthis.destroyHelper();                                                                                                // 6064\n\t\tthis.destroyHighlight();                                                                                             // 6065\n\t},                                                                                                                    // 6066\n                                                                                                                       // 6067\n                                                                                                                       // 6068\n\t/* Fill System (highlight, background events, business hours)                                                         // 6069\n\t------------------------------------------------------------------------------------------------------------------*/  // 6070\n                                                                                                                       // 6071\n                                                                                                                       // 6072\n\t// Renders a set of rectangles over the given time segments.                                                          // 6073\n\t// Only returns segments that successfully rendered.                                                                  // 6074\n\trenderFill: function(type, segs, className) {                                                                         // 6075\n\t\tvar segCols;                                                                                                         // 6076\n\t\tvar skeletonEl;                                                                                                      // 6077\n\t\tvar trEl;                                                                                                            // 6078\n\t\tvar col, colSegs;                                                                                                    // 6079\n\t\tvar tdEl;                                                                                                            // 6080\n\t\tvar containerEl;                                                                                                     // 6081\n\t\tvar dayDate;                                                                                                         // 6082\n\t\tvar i, seg;                                                                                                          // 6083\n                                                                                                                       // 6084\n\t\tif (segs.length) {                                                                                                   // 6085\n                                                                                                                       // 6086\n\t\t\tsegs = this.renderFillSegEls(type, segs); // assignes `.el` to each seg. returns successfully rendered segs         // 6087\n\t\t\tsegCols = this.groupSegCols(segs); // group into sub-arrays, and assigns 'col' to each seg                          // 6088\n                                                                                                                       // 6089\n\t\t\tclassName = className || type.toLowerCase();                                                                        // 6090\n\t\t\tskeletonEl = $(                                                                                                     // 6091\n\t\t\t\t'<div class=\"fc-' + className + '-skeleton\">' +                                                                    // 6092\n\t\t\t\t\t'<table><tr/></table>' +                                                                                          // 6093\n\t\t\t\t'</div>'                                                                                                           // 6094\n\t\t\t);                                                                                                                  // 6095\n\t\t\ttrEl = skeletonEl.find('tr');                                                                                       // 6096\n                                                                                                                       // 6097\n\t\t\tfor (col = 0; col < segCols.length; col++) {                                                                        // 6098\n\t\t\t\tcolSegs = segCols[col];                                                                                            // 6099\n\t\t\t\ttdEl = $('<td/>').appendTo(trEl);                                                                                  // 6100\n                                                                                                                       // 6101\n\t\t\t\tif (colSegs.length) {                                                                                              // 6102\n\t\t\t\t\tcontainerEl = $('<div class=\"fc-' + className + '-container\"/>').appendTo(tdEl);                                  // 6103\n\t\t\t\t\tdayDate = this.colData[col].day;                                                                                  // 6104\n                                                                                                                       // 6105\n\t\t\t\t\tfor (i = 0; i < colSegs.length; i++) {                                                                            // 6106\n\t\t\t\t\t\tseg = colSegs[i];                                                                                                // 6107\n\t\t\t\t\t\tcontainerEl.append(                                                                                              // 6108\n\t\t\t\t\t\t\tseg.el.css({                                                                                                    // 6109\n\t\t\t\t\t\t\t\ttop: this.computeDateTop(seg.start, dayDate),                                                                  // 6110\n\t\t\t\t\t\t\t\tbottom: -this.computeDateTop(seg.end, dayDate) // the y position of the bottom edge                            // 6111\n\t\t\t\t\t\t\t})                                                                                                              // 6112\n\t\t\t\t\t\t);                                                                                                               // 6113\n\t\t\t\t\t}                                                                                                                 // 6114\n\t\t\t\t}                                                                                                                  // 6115\n\t\t\t}                                                                                                                   // 6116\n                                                                                                                       // 6117\n\t\t\tthis.bookendCells(trEl, type);                                                                                      // 6118\n                                                                                                                       // 6119\n\t\t\tthis.el.append(skeletonEl);                                                                                         // 6120\n\t\t\tthis.elsByFill[type] = skeletonEl;                                                                                  // 6121\n\t\t}                                                                                                                    // 6122\n                                                                                                                       // 6123\n\t\treturn segs;                                                                                                         // 6124\n\t}                                                                                                                     // 6125\n                                                                                                                       // 6126\n});                                                                                                                    // 6127\n                                                                                                                       // 6128\n;;                                                                                                                     // 6129\n                                                                                                                       // 6130\n/* Event-rendering methods for the TimeGrid class                                                                      // 6131\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 6133\nTimeGrid.mixin({                                                                                                       // 6134\n                                                                                                                       // 6135\n\teventSkeletonEl: null, // has cells with event-containers, which contain absolutely positioned event elements         // 6136\n                                                                                                                       // 6137\n                                                                                                                       // 6138\n\t// Renders the given foreground event segments onto the grid                                                          // 6139\n\trenderFgSegs: function(segs) {                                                                                        // 6140\n\t\tsegs = this.renderFgSegEls(segs); // returns a subset of the segs. segs that were actually rendered                  // 6141\n                                                                                                                       // 6142\n\t\tthis.el.append(                                                                                                      // 6143\n\t\t\tthis.eventSkeletonEl = $('<div class=\"fc-content-skeleton\"/>')                                                      // 6144\n\t\t\t\t.append(this.renderSegTable(segs))                                                                                 // 6145\n\t\t);                                                                                                                   // 6146\n                                                                                                                       // 6147\n\t\treturn segs; // return only the segs that were actually rendered                                                     // 6148\n\t},                                                                                                                    // 6149\n                                                                                                                       // 6150\n                                                                                                                       // 6151\n\t// Unrenders all currently rendered foreground event segments                                                         // 6152\n\tdestroyFgSegs: function(segs) {                                                                                       // 6153\n\t\tif (this.eventSkeletonEl) {                                                                                          // 6154\n\t\t\tthis.eventSkeletonEl.remove();                                                                                      // 6155\n\t\t\tthis.eventSkeletonEl = null;                                                                                        // 6156\n\t\t}                                                                                                                    // 6157\n\t},                                                                                                                    // 6158\n                                                                                                                       // 6159\n                                                                                                                       // 6160\n\t// Renders and returns the <table> portion of the event-skeleton.                                                     // 6161\n\t// Returns an object with properties 'tbodyEl' and 'segs'.                                                            // 6162\n\trenderSegTable: function(segs) {                                                                                      // 6163\n\t\tvar tableEl = $('<table><tr/></table>');                                                                             // 6164\n\t\tvar trEl = tableEl.find('tr');                                                                                       // 6165\n\t\tvar segCols;                                                                                                         // 6166\n\t\tvar i, seg;                                                                                                          // 6167\n\t\tvar col, colSegs;                                                                                                    // 6168\n\t\tvar containerEl;                                                                                                     // 6169\n                                                                                                                       // 6170\n\t\tsegCols = this.groupSegCols(segs); // group into sub-arrays, and assigns 'col' to each seg                           // 6171\n                                                                                                                       // 6172\n\t\tthis.computeSegVerticals(segs); // compute and assign top/bottom                                                     // 6173\n                                                                                                                       // 6174\n\t\tfor (col = 0; col < segCols.length; col++) { // iterate each column grouping                                         // 6175\n\t\t\tcolSegs = segCols[col];                                                                                             // 6176\n\t\t\tplaceSlotSegs(colSegs); // compute horizontal coordinates, z-index's, and reorder the array                         // 6177\n                                                                                                                       // 6178\n\t\t\tcontainerEl = $('<div class=\"fc-event-container\"/>');                                                               // 6179\n                                                                                                                       // 6180\n\t\t\t// assign positioning CSS and insert into container                                                                 // 6181\n\t\t\tfor (i = 0; i < colSegs.length; i++) {                                                                              // 6182\n\t\t\t\tseg = colSegs[i];                                                                                                  // 6183\n\t\t\t\tseg.el.css(this.generateSegPositionCss(seg));                                                                      // 6184\n                                                                                                                       // 6185\n\t\t\t\t// if the height is short, add a className for alternate styling                                                   // 6186\n\t\t\t\tif (seg.bottom - seg.top < 30) {                                                                                   // 6187\n\t\t\t\t\tseg.el.addClass('fc-short');                                                                                      // 6188\n\t\t\t\t}                                                                                                                  // 6189\n                                                                                                                       // 6190\n\t\t\t\tcontainerEl.append(seg.el);                                                                                        // 6191\n\t\t\t}                                                                                                                   // 6192\n                                                                                                                       // 6193\n\t\t\ttrEl.append($('<td/>').append(containerEl));                                                                        // 6194\n\t\t}                                                                                                                    // 6195\n                                                                                                                       // 6196\n\t\tthis.bookendCells(trEl, 'eventSkeleton');                                                                            // 6197\n                                                                                                                       // 6198\n\t\treturn tableEl;                                                                                                      // 6199\n\t},                                                                                                                    // 6200\n                                                                                                                       // 6201\n                                                                                                                       // 6202\n\t// Refreshes the CSS top/bottom coordinates for each segment element. Probably after a window resize/zoom.            // 6203\n\t// Repositions business hours segs too, so not just for events. Maybe shouldn't be here.                              // 6204\n\tupdateSegVerticals: function() {                                                                                      // 6205\n\t\tvar allSegs = (this.segs || []).concat(this.businessHourSegs || []);                                                 // 6206\n\t\tvar i;                                                                                                               // 6207\n                                                                                                                       // 6208\n\t\tthis.computeSegVerticals(allSegs);                                                                                   // 6209\n                                                                                                                       // 6210\n\t\tfor (i = 0; i < allSegs.length; i++) {                                                                               // 6211\n\t\t\tallSegs[i].el.css(                                                                                                  // 6212\n\t\t\t\tthis.generateSegVerticalCss(allSegs[i])                                                                            // 6213\n\t\t\t);                                                                                                                  // 6214\n\t\t}                                                                                                                    // 6215\n\t},                                                                                                                    // 6216\n                                                                                                                       // 6217\n                                                                                                                       // 6218\n\t// For each segment in an array, computes and assigns its top and bottom properties                                   // 6219\n\tcomputeSegVerticals: function(segs) {                                                                                 // 6220\n\t\tvar i, seg;                                                                                                          // 6221\n                                                                                                                       // 6222\n\t\tfor (i = 0; i < segs.length; i++) {                                                                                  // 6223\n\t\t\tseg = segs[i];                                                                                                      // 6224\n\t\t\tseg.top = this.computeDateTop(seg.start, seg.start);                                                                // 6225\n\t\t\tseg.bottom = this.computeDateTop(seg.end, seg.start);                                                               // 6226\n\t\t}                                                                                                                    // 6227\n\t},                                                                                                                    // 6228\n                                                                                                                       // 6229\n                                                                                                                       // 6230\n\t// Renders the HTML for a single event segment's default rendering                                                    // 6231\n\tfgSegHtml: function(seg, disableResizing) {                                                                           // 6232\n\t\tvar view = this.view;                                                                                                // 6233\n\t\tvar event = seg.event;                                                                                               // 6234\n\t\tvar isDraggable = view.isEventDraggable(event);                                                                      // 6235\n\t\tvar isResizableFromStart = !disableResizing && seg.isStart && view.isEventResizableFromStart(event);                 // 6236\n\t\tvar isResizableFromEnd = !disableResizing && seg.isEnd && view.isEventResizableFromEnd(event);                       // 6237\n\t\tvar classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd);                      // 6238\n\t\tvar skinCss = cssToStr(this.getEventSkinCss(event));                                                                 // 6239\n\t\tvar timeText;                                                                                                        // 6240\n\t\tvar fullTimeText; // more verbose time text. for the print stylesheet                                                // 6241\n\t\tvar startTimeText; // just the start time text                                                                       // 6242\n                                                                                                                       // 6243\n\t\tclasses.unshift('fc-time-grid-event', 'fc-v-event');                                                                 // 6244\n                                                                                                                       // 6245\n\t\tif (view.isMultiDayEvent(event)) { // if the event appears to span more than one day...                              // 6246\n\t\t\t// Don't display time text on segments that run entirely through a day.                                             // 6247\n\t\t\t// That would appear as midnight-midnight and would look dumb.                                                      // 6248\n\t\t\t// Otherwise, display the time text for the *segment's* times (like 6pm-midnight or midnight-10am)                  // 6249\n\t\t\tif (seg.isStart || seg.isEnd) {                                                                                     // 6250\n\t\t\t\ttimeText = this.getEventTimeText(seg);                                                                             // 6251\n\t\t\t\tfullTimeText = this.getEventTimeText(seg, 'LT');                                                                   // 6252\n\t\t\t\tstartTimeText = this.getEventTimeText(seg, null, false); // displayEnd=false                                       // 6253\n\t\t\t}                                                                                                                   // 6254\n\t\t} else {                                                                                                             // 6255\n\t\t\t// Display the normal time text for the *event's* times                                                             // 6256\n\t\t\ttimeText = this.getEventTimeText(event);                                                                            // 6257\n\t\t\tfullTimeText = this.getEventTimeText(event, 'LT');                                                                  // 6258\n\t\t\tstartTimeText = this.getEventTimeText(event, null, false); // displayEnd=false                                      // 6259\n\t\t}                                                                                                                    // 6260\n                                                                                                                       // 6261\n\t\treturn '<a class=\"' + classes.join(' ') + '\"' +                                                                      // 6262\n\t\t\t(event.url ?                                                                                                        // 6263\n\t\t\t\t' href=\"' + htmlEscape(event.url) + '\"' :                                                                          // 6264\n\t\t\t\t''                                                                                                                 // 6265\n\t\t\t\t) +                                                                                                                // 6266\n\t\t\t(skinCss ?                                                                                                          // 6267\n\t\t\t\t' style=\"' + skinCss + '\"' :                                                                                       // 6268\n\t\t\t\t''                                                                                                                 // 6269\n\t\t\t\t) +                                                                                                                // 6270\n\t\t\t'>' +                                                                                                               // 6271\n\t\t\t\t'<div class=\"fc-content\">' +                                                                                       // 6272\n\t\t\t\t\t(timeText ?                                                                                                       // 6273\n\t\t\t\t\t\t'<div class=\"fc-time\"' +                                                                                         // 6274\n\t\t\t\t\t\t' data-start=\"' + htmlEscape(startTimeText) + '\"' +                                                              // 6275\n\t\t\t\t\t\t' data-full=\"' + htmlEscape(fullTimeText) + '\"' +                                                                // 6276\n\t\t\t\t\t\t'>' +                                                                                                            // 6277\n\t\t\t\t\t\t\t'<span>' + htmlEscape(timeText) + '</span>' +                                                                   // 6278\n\t\t\t\t\t\t'</div>' :                                                                                                       // 6279\n\t\t\t\t\t\t''                                                                                                               // 6280\n\t\t\t\t\t\t) +                                                                                                              // 6281\n\t\t\t\t\t(event.title ?                                                                                                    // 6282\n\t\t\t\t\t\t'<div class=\"fc-title\">' +                                                                                       // 6283\n\t\t\t\t\t\t\thtmlEscape(event.title) +                                                                                       // 6284\n\t\t\t\t\t\t'</div>' :                                                                                                       // 6285\n\t\t\t\t\t\t''                                                                                                               // 6286\n\t\t\t\t\t\t) +                                                                                                              // 6287\n\t\t\t\t'</div>' +                                                                                                         // 6288\n\t\t\t\t'<div class=\"fc-bg\"/>' +                                                                                           // 6289\n\t\t\t\t/* TODO: write CSS for this                                                                                        // 6290\n\t\t\t\t(isResizableFromStart ?                                                                                            // 6291\n\t\t\t\t\t'<div class=\"fc-resizer fc-start-resizer\" />' :                                                                   // 6292\n\t\t\t\t\t''                                                                                                                // 6293\n\t\t\t\t\t) +                                                                                                               // 6294\n\t\t\t\t*/                                                                                                                 // 6295\n\t\t\t\t(isResizableFromEnd ?                                                                                              // 6296\n\t\t\t\t\t'<div class=\"fc-resizer fc-end-resizer\" />' :                                                                     // 6297\n\t\t\t\t\t''                                                                                                                // 6298\n\t\t\t\t\t) +                                                                                                               // 6299\n\t\t\t'</a>';                                                                                                             // 6300\n\t},                                                                                                                    // 6301\n                                                                                                                       // 6302\n                                                                                                                       // 6303\n\t// Generates an object with CSS properties/values that should be applied to an event segment element.                 // 6304\n\t// Contains important positioning-related properties that should be applied to any event element, customized or not.  // 6305\n\tgenerateSegPositionCss: function(seg) {                                                                               // 6306\n\t\tvar shouldOverlap = this.view.opt('slotEventOverlap');                                                               // 6307\n\t\tvar backwardCoord = seg.backwardCoord; // the left side if LTR. the right side if RTL. floating-point                // 6308\n\t\tvar forwardCoord = seg.forwardCoord; // the right side if LTR. the left side if RTL. floating-point                  // 6309\n\t\tvar props = this.generateSegVerticalCss(seg); // get top/bottom first                                                // 6310\n\t\tvar left; // amount of space from left edge, a fraction of the total width                                           // 6311\n\t\tvar right; // amount of space from right edge, a fraction of the total width                                         // 6312\n                                                                                                                       // 6313\n\t\tif (shouldOverlap) {                                                                                                 // 6314\n\t\t\t// double the width, but don't go beyond the maximum forward coordinate (1.0)                                       // 6315\n\t\t\tforwardCoord = Math.min(1, backwardCoord + (forwardCoord - backwardCoord) * 2);                                     // 6316\n\t\t}                                                                                                                    // 6317\n                                                                                                                       // 6318\n\t\tif (this.isRTL) {                                                                                                    // 6319\n\t\t\tleft = 1 - forwardCoord;                                                                                            // 6320\n\t\t\tright = backwardCoord;                                                                                              // 6321\n\t\t}                                                                                                                    // 6322\n\t\telse {                                                                                                               // 6323\n\t\t\tleft = backwardCoord;                                                                                               // 6324\n\t\t\tright = 1 - forwardCoord;                                                                                           // 6325\n\t\t}                                                                                                                    // 6326\n                                                                                                                       // 6327\n\t\tprops.zIndex = seg.level + 1; // convert from 0-base to 1-based                                                      // 6328\n\t\tprops.left = left * 100 + '%';                                                                                       // 6329\n\t\tprops.right = right * 100 + '%';                                                                                     // 6330\n                                                                                                                       // 6331\n\t\tif (shouldOverlap && seg.forwardPressure) {                                                                          // 6332\n\t\t\t// add padding to the edge so that forward stacked events don't cover the resizer's icon                            // 6333\n\t\t\tprops[this.isRTL ? 'marginLeft' : 'marginRight'] = 10 * 2; // 10 is a guesstimate of the icon's width               // 6334\n\t\t}                                                                                                                    // 6335\n                                                                                                                       // 6336\n\t\treturn props;                                                                                                        // 6337\n\t},                                                                                                                    // 6338\n                                                                                                                       // 6339\n                                                                                                                       // 6340\n\t// Generates an object with CSS properties for the top/bottom coordinates of a segment element                        // 6341\n\tgenerateSegVerticalCss: function(seg) {                                                                               // 6342\n\t\treturn {                                                                                                             // 6343\n\t\t\ttop: seg.top,                                                                                                       // 6344\n\t\t\tbottom: -seg.bottom // flipped because needs to be space beyond bottom edge of event container                      // 6345\n\t\t};                                                                                                                   // 6346\n\t},                                                                                                                    // 6347\n                                                                                                                       // 6348\n                                                                                                                       // 6349\n\t// Given a flat array of segments, return an array of sub-arrays, grouped by each segment's col                       // 6350\n\tgroupSegCols: function(segs) {                                                                                        // 6351\n\t\tvar segCols = [];                                                                                                    // 6352\n\t\tvar i;                                                                                                               // 6353\n                                                                                                                       // 6354\n\t\tfor (i = 0; i < this.colCnt; i++) {                                                                                  // 6355\n\t\t\tsegCols.push([]);                                                                                                   // 6356\n\t\t}                                                                                                                    // 6357\n                                                                                                                       // 6358\n\t\tfor (i = 0; i < segs.length; i++) {                                                                                  // 6359\n\t\t\tsegCols[segs[i].col].push(segs[i]);                                                                                 // 6360\n\t\t}                                                                                                                    // 6361\n                                                                                                                       // 6362\n\t\treturn segCols;                                                                                                      // 6363\n\t}                                                                                                                     // 6364\n                                                                                                                       // 6365\n});                                                                                                                    // 6366\n                                                                                                                       // 6367\n                                                                                                                       // 6368\n// Given an array of segments that are all in the same column, sets the backwardCoord and forwardCoord on each.        // 6369\n// NOTE: Also reorders the given array by date!                                                                        // 6370\nfunction placeSlotSegs(segs) {                                                                                         // 6371\n\tvar levels;                                                                                                           // 6372\n\tvar level0;                                                                                                           // 6373\n\tvar i;                                                                                                                // 6374\n                                                                                                                       // 6375\n\tsegs.sort(compareSegs); // order by date                                                                              // 6376\n\tlevels = buildSlotSegLevels(segs);                                                                                    // 6377\n\tcomputeForwardSlotSegs(levels);                                                                                       // 6378\n                                                                                                                       // 6379\n\tif ((level0 = levels[0])) {                                                                                           // 6380\n                                                                                                                       // 6381\n\t\tfor (i = 0; i < level0.length; i++) {                                                                                // 6382\n\t\t\tcomputeSlotSegPressures(level0[i]);                                                                                 // 6383\n\t\t}                                                                                                                    // 6384\n                                                                                                                       // 6385\n\t\tfor (i = 0; i < level0.length; i++) {                                                                                // 6386\n\t\t\tcomputeSlotSegCoords(level0[i], 0, 0);                                                                              // 6387\n\t\t}                                                                                                                    // 6388\n\t}                                                                                                                     // 6389\n}                                                                                                                      // 6390\n                                                                                                                       // 6391\n                                                                                                                       // 6392\n// Builds an array of segments \"levels\". The first level will be the leftmost tier of segments if the calendar is      // 6393\n// left-to-right, or the rightmost if the calendar is right-to-left. Assumes the segments are already ordered by date. // 6394\nfunction buildSlotSegLevels(segs) {                                                                                    // 6395\n\tvar levels = [];                                                                                                      // 6396\n\tvar i, seg;                                                                                                           // 6397\n\tvar j;                                                                                                                // 6398\n                                                                                                                       // 6399\n\tfor (i=0; i<segs.length; i++) {                                                                                       // 6400\n\t\tseg = segs[i];                                                                                                       // 6401\n                                                                                                                       // 6402\n\t\t// go through all the levels and stop on the first level where there are no collisions                               // 6403\n\t\tfor (j=0; j<levels.length; j++) {                                                                                    // 6404\n\t\t\tif (!computeSlotSegCollisions(seg, levels[j]).length) {                                                             // 6405\n\t\t\t\tbreak;                                                                                                             // 6406\n\t\t\t}                                                                                                                   // 6407\n\t\t}                                                                                                                    // 6408\n                                                                                                                       // 6409\n\t\tseg.level = j;                                                                                                       // 6410\n                                                                                                                       // 6411\n\t\t(levels[j] || (levels[j] = [])).push(seg);                                                                           // 6412\n\t}                                                                                                                     // 6413\n                                                                                                                       // 6414\n\treturn levels;                                                                                                        // 6415\n}                                                                                                                      // 6416\n                                                                                                                       // 6417\n                                                                                                                       // 6418\n// For every segment, figure out the other segments that are in subsequent                                             // 6419\n// levels that also occupy the same vertical space. Accumulate in seg.forwardSegs                                      // 6420\nfunction computeForwardSlotSegs(levels) {                                                                              // 6421\n\tvar i, level;                                                                                                         // 6422\n\tvar j, seg;                                                                                                           // 6423\n\tvar k;                                                                                                                // 6424\n                                                                                                                       // 6425\n\tfor (i=0; i<levels.length; i++) {                                                                                     // 6426\n\t\tlevel = levels[i];                                                                                                   // 6427\n                                                                                                                       // 6428\n\t\tfor (j=0; j<level.length; j++) {                                                                                     // 6429\n\t\t\tseg = level[j];                                                                                                     // 6430\n                                                                                                                       // 6431\n\t\t\tseg.forwardSegs = [];                                                                                               // 6432\n\t\t\tfor (k=i+1; k<levels.length; k++) {                                                                                 // 6433\n\t\t\t\tcomputeSlotSegCollisions(seg, levels[k], seg.forwardSegs);                                                         // 6434\n\t\t\t}                                                                                                                   // 6435\n\t\t}                                                                                                                    // 6436\n\t}                                                                                                                     // 6437\n}                                                                                                                      // 6438\n                                                                                                                       // 6439\n                                                                                                                       // 6440\n// Figure out which path forward (via seg.forwardSegs) results in the longest path until                               // 6441\n// the furthest edge is reached. The number of segments in this path will be seg.forwardPressure                       // 6442\nfunction computeSlotSegPressures(seg) {                                                                                // 6443\n\tvar forwardSegs = seg.forwardSegs;                                                                                    // 6444\n\tvar forwardPressure = 0;                                                                                              // 6445\n\tvar i, forwardSeg;                                                                                                    // 6446\n                                                                                                                       // 6447\n\tif (seg.forwardPressure === undefined) { // not already computed                                                      // 6448\n                                                                                                                       // 6449\n\t\tfor (i=0; i<forwardSegs.length; i++) {                                                                               // 6450\n\t\t\tforwardSeg = forwardSegs[i];                                                                                        // 6451\n                                                                                                                       // 6452\n\t\t\t// figure out the child's maximum forward path                                                                      // 6453\n\t\t\tcomputeSlotSegPressures(forwardSeg);                                                                                // 6454\n                                                                                                                       // 6455\n\t\t\t// either use the existing maximum, or use the child's forward pressure                                             // 6456\n\t\t\t// plus one (for the forwardSeg itself)                                                                             // 6457\n\t\t\tforwardPressure = Math.max(                                                                                         // 6458\n\t\t\t\tforwardPressure,                                                                                                   // 6459\n\t\t\t\t1 + forwardSeg.forwardPressure                                                                                     // 6460\n\t\t\t);                                                                                                                  // 6461\n\t\t}                                                                                                                    // 6462\n                                                                                                                       // 6463\n\t\tseg.forwardPressure = forwardPressure;                                                                               // 6464\n\t}                                                                                                                     // 6465\n}                                                                                                                      // 6466\n                                                                                                                       // 6467\n                                                                                                                       // 6468\n// Calculate seg.forwardCoord and seg.backwardCoord for the segment, where both values range                           // 6469\n// from 0 to 1. If the calendar is left-to-right, the seg.backwardCoord maps to \"left\" and                             // 6470\n// seg.forwardCoord maps to \"right\" (via percentage). Vice-versa if the calendar is right-to-left.                     // 6471\n//                                                                                                                     // 6472\n// The segment might be part of a \"series\", which means consecutive segments with the same pressure                    // 6473\n// who's width is unknown until an edge has been hit. `seriesBackwardPressure` is the number of                        // 6474\n// segments behind this one in the current series, and `seriesBackwardCoord` is the starting                           // 6475\n// coordinate of the first segment in the series.                                                                      // 6476\nfunction computeSlotSegCoords(seg, seriesBackwardPressure, seriesBackwardCoord) {                                      // 6477\n\tvar forwardSegs = seg.forwardSegs;                                                                                    // 6478\n\tvar i;                                                                                                                // 6479\n                                                                                                                       // 6480\n\tif (seg.forwardCoord === undefined) { // not already computed                                                         // 6481\n                                                                                                                       // 6482\n\t\tif (!forwardSegs.length) {                                                                                           // 6483\n                                                                                                                       // 6484\n\t\t\t// if there are no forward segments, this segment should butt up against the edge                                   // 6485\n\t\t\tseg.forwardCoord = 1;                                                                                               // 6486\n\t\t}                                                                                                                    // 6487\n\t\telse {                                                                                                               // 6488\n                                                                                                                       // 6489\n\t\t\t// sort highest pressure first                                                                                      // 6490\n\t\t\tforwardSegs.sort(compareForwardSlotSegs);                                                                           // 6491\n                                                                                                                       // 6492\n\t\t\t// this segment's forwardCoord will be calculated from the backwardCoord of the                                     // 6493\n\t\t\t// highest-pressure forward segment.                                                                                // 6494\n\t\t\tcomputeSlotSegCoords(forwardSegs[0], seriesBackwardPressure + 1, seriesBackwardCoord);                              // 6495\n\t\t\tseg.forwardCoord = forwardSegs[0].backwardCoord;                                                                    // 6496\n\t\t}                                                                                                                    // 6497\n                                                                                                                       // 6498\n\t\t// calculate the backwardCoord from the forwardCoord. consider the series                                            // 6499\n\t\tseg.backwardCoord = seg.forwardCoord -                                                                               // 6500\n\t\t\t(seg.forwardCoord - seriesBackwardCoord) / // available width for series                                            // 6501\n\t\t\t(seriesBackwardPressure + 1); // # of segments in the series                                                        // 6502\n                                                                                                                       // 6503\n\t\t// use this segment's coordinates to computed the coordinates of the less-pressurized                                // 6504\n\t\t// forward segments                                                                                                  // 6505\n\t\tfor (i=0; i<forwardSegs.length; i++) {                                                                               // 6506\n\t\t\tcomputeSlotSegCoords(forwardSegs[i], 0, seg.forwardCoord);                                                          // 6507\n\t\t}                                                                                                                    // 6508\n\t}                                                                                                                     // 6509\n}                                                                                                                      // 6510\n                                                                                                                       // 6511\n                                                                                                                       // 6512\n// Find all the segments in `otherSegs` that vertically collide with `seg`.                                            // 6513\n// Append into an optionally-supplied `results` array and return.                                                      // 6514\nfunction computeSlotSegCollisions(seg, otherSegs, results) {                                                           // 6515\n\tresults = results || [];                                                                                              // 6516\n                                                                                                                       // 6517\n\tfor (var i=0; i<otherSegs.length; i++) {                                                                              // 6518\n\t\tif (isSlotSegCollision(seg, otherSegs[i])) {                                                                         // 6519\n\t\t\tresults.push(otherSegs[i]);                                                                                         // 6520\n\t\t}                                                                                                                    // 6521\n\t}                                                                                                                     // 6522\n                                                                                                                       // 6523\n\treturn results;                                                                                                       // 6524\n}                                                                                                                      // 6525\n                                                                                                                       // 6526\n                                                                                                                       // 6527\n// Do these segments occupy the same vertical space?                                                                   // 6528\nfunction isSlotSegCollision(seg1, seg2) {                                                                              // 6529\n\treturn seg1.bottom > seg2.top && seg1.top < seg2.bottom;                                                              // 6530\n}                                                                                                                      // 6531\n                                                                                                                       // 6532\n                                                                                                                       // 6533\n// A cmp function for determining which forward segment to rely on more when computing coordinates.                    // 6534\nfunction compareForwardSlotSegs(seg1, seg2) {                                                                          // 6535\n\t// put higher-pressure first                                                                                          // 6536\n\treturn seg2.forwardPressure - seg1.forwardPressure ||                                                                 // 6537\n\t\t// put segments that are closer to initial edge first (and favor ones with no coords yet)                            // 6538\n\t\t(seg1.backwardCoord || 0) - (seg2.backwardCoord || 0) ||                                                             // 6539\n\t\t// do normal sorting...                                                                                              // 6540\n\t\tcompareSegs(seg1, seg2);                                                                                             // 6541\n}                                                                                                                      // 6542\n                                                                                                                       // 6543\n;;                                                                                                                     // 6544\n                                                                                                                       // 6545\n/* An abstract class from which other views inherit from                                                               // 6546\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 6548\nvar View = fc.View = Class.extend({                                                                                    // 6549\n                                                                                                                       // 6550\n\ttype: null, // subclass' view name (string)                                                                           // 6551\n\tname: null, // deprecated. use `type` instead                                                                         // 6552\n\ttitle: null, // the text that will be displayed in the header's title                                                 // 6553\n                                                                                                                       // 6554\n\tcalendar: null, // owner Calendar object                                                                              // 6555\n\toptions: null, // hash containing all options. already merged with view-specific-options                              // 6556\n\tcoordMap: null, // a CoordMap object for converting pixel regions to dates                                            // 6557\n\tel: null, // the view's containing element. set by Calendar                                                           // 6558\n                                                                                                                       // 6559\n\tisDisplayed: false,                                                                                                   // 6560\n\tisSkeletonRendered: false,                                                                                            // 6561\n\tisEventsRendered: false,                                                                                              // 6562\n                                                                                                                       // 6563\n\t// range the view is actually displaying (moments)                                                                    // 6564\n\tstart: null,                                                                                                          // 6565\n\tend: null, // exclusive                                                                                               // 6566\n                                                                                                                       // 6567\n\t// range the view is formally responsible for (moments)                                                               // 6568\n\t// may be different from start/end. for example, a month view might have 1st-31st, excluding padded dates             // 6569\n\tintervalStart: null,                                                                                                  // 6570\n\tintervalEnd: null, // exclusive                                                                                       // 6571\n\tintervalDuration: null,                                                                                               // 6572\n\tintervalUnit: null, // name of largest unit being displayed, like \"month\" or \"week\"                                   // 6573\n                                                                                                                       // 6574\n\tisSelected: false, // boolean whether a range of time is user-selected or not                                         // 6575\n                                                                                                                       // 6576\n\t// subclasses can optionally use a scroll container                                                                   // 6577\n\tscrollerEl: null, // the element that will most likely scroll when content is too tall                                // 6578\n\tscrollTop: null, // cached vertical scroll value                                                                      // 6579\n                                                                                                                       // 6580\n\t// classNames styled by jqui themes                                                                                   // 6581\n\twidgetHeaderClass: null,                                                                                              // 6582\n\twidgetContentClass: null,                                                                                             // 6583\n\thighlightStateClass: null,                                                                                            // 6584\n                                                                                                                       // 6585\n\t// for date utils, computed from options                                                                              // 6586\n\tnextDayThreshold: null,                                                                                               // 6587\n\tisHiddenDayHash: null,                                                                                                // 6588\n                                                                                                                       // 6589\n\t// document handlers, bound to `this` object                                                                          // 6590\n\tdocumentMousedownProxy: null, // TODO: doesn't work with touch                                                        // 6591\n                                                                                                                       // 6592\n                                                                                                                       // 6593\n\tconstructor: function(calendar, type, options, intervalDuration) {                                                    // 6594\n                                                                                                                       // 6595\n\t\tthis.calendar = calendar;                                                                                            // 6596\n\t\tthis.type = this.name = type; // .name is deprecated                                                                 // 6597\n\t\tthis.options = options;                                                                                              // 6598\n\t\tthis.intervalDuration = intervalDuration || moment.duration(1, 'day');                                               // 6599\n                                                                                                                       // 6600\n\t\tthis.nextDayThreshold = moment.duration(this.opt('nextDayThreshold'));                                               // 6601\n\t\tthis.initThemingProps();                                                                                             // 6602\n\t\tthis.initHiddenDays();                                                                                               // 6603\n                                                                                                                       // 6604\n\t\tthis.documentMousedownProxy = proxy(this, 'documentMousedown');                                                      // 6605\n                                                                                                                       // 6606\n\t\tthis.initialize();                                                                                                   // 6607\n\t},                                                                                                                    // 6608\n                                                                                                                       // 6609\n                                                                                                                       // 6610\n\t// A good place for subclasses to initialize member variables                                                         // 6611\n\tinitialize: function() {                                                                                              // 6612\n\t\t// subclasses can implement                                                                                          // 6613\n\t},                                                                                                                    // 6614\n                                                                                                                       // 6615\n                                                                                                                       // 6616\n\t// Retrieves an option with the given name                                                                            // 6617\n\topt: function(name) {                                                                                                 // 6618\n\t\treturn this.options[name];                                                                                           // 6619\n\t},                                                                                                                    // 6620\n                                                                                                                       // 6621\n                                                                                                                       // 6622\n\t// Triggers handlers that are view-related. Modifies args before passing to calendar.                                 // 6623\n\ttrigger: function(name, thisObj) { // arguments beyond thisObj are passed along                                       // 6624\n\t\tvar calendar = this.calendar;                                                                                        // 6625\n                                                                                                                       // 6626\n\t\treturn calendar.trigger.apply(                                                                                       // 6627\n\t\t\tcalendar,                                                                                                           // 6628\n\t\t\t[name, thisObj || this].concat(                                                                                     // 6629\n\t\t\t\tArray.prototype.slice.call(arguments, 2), // arguments beyond thisObj                                              // 6630\n\t\t\t\t[ this ] // always make the last argument a reference to the view. TODO: deprecate                                 // 6631\n\t\t\t)                                                                                                                   // 6632\n\t\t);                                                                                                                   // 6633\n\t},                                                                                                                    // 6634\n                                                                                                                       // 6635\n                                                                                                                       // 6636\n\t/* Dates                                                                                                              // 6637\n\t------------------------------------------------------------------------------------------------------------------*/  // 6638\n                                                                                                                       // 6639\n                                                                                                                       // 6640\n\t// Updates all internal dates to center around the given current date                                                 // 6641\n\tsetDate: function(date) {                                                                                             // 6642\n\t\tthis.setRange(this.computeRange(date));                                                                              // 6643\n\t},                                                                                                                    // 6644\n                                                                                                                       // 6645\n                                                                                                                       // 6646\n\t// Updates all internal dates for displaying the given range.                                                         // 6647\n\t// Expects all values to be normalized (like what computeRange does).                                                 // 6648\n\tsetRange: function(range) {                                                                                           // 6649\n\t\t$.extend(this, range);                                                                                               // 6650\n\t\tthis.updateTitle();                                                                                                  // 6651\n\t},                                                                                                                    // 6652\n                                                                                                                       // 6653\n                                                                                                                       // 6654\n\t// Given a single current date, produce information about what range to display.                                      // 6655\n\t// Subclasses can override. Must return all properties.                                                               // 6656\n\tcomputeRange: function(date) {                                                                                        // 6657\n\t\tvar intervalUnit = computeIntervalUnit(this.intervalDuration);                                                       // 6658\n\t\tvar intervalStart = date.clone().startOf(intervalUnit);                                                              // 6659\n\t\tvar intervalEnd = intervalStart.clone().add(this.intervalDuration);                                                  // 6660\n\t\tvar start, end;                                                                                                      // 6661\n                                                                                                                       // 6662\n\t\t// normalize the range's time-ambiguity                                                                              // 6663\n\t\tif (/year|month|week|day/.test(intervalUnit)) { // whole-days?                                                       // 6664\n\t\t\tintervalStart.stripTime();                                                                                          // 6665\n\t\t\tintervalEnd.stripTime();                                                                                            // 6666\n\t\t}                                                                                                                    // 6667\n\t\telse { // needs to have a time?                                                                                      // 6668\n\t\t\tif (!intervalStart.hasTime()) {                                                                                     // 6669\n\t\t\t\tintervalStart = this.calendar.rezoneDate(intervalStart); // convert to current timezone, with 00:00                // 6670\n\t\t\t}                                                                                                                   // 6671\n\t\t\tif (!intervalEnd.hasTime()) {                                                                                       // 6672\n\t\t\t\tintervalEnd = this.calendar.rezoneDate(intervalEnd); // convert to current timezone, with 00:00                    // 6673\n\t\t\t}                                                                                                                   // 6674\n\t\t}                                                                                                                    // 6675\n                                                                                                                       // 6676\n\t\tstart = intervalStart.clone();                                                                                       // 6677\n\t\tstart = this.skipHiddenDays(start);                                                                                  // 6678\n\t\tend = intervalEnd.clone();                                                                                           // 6679\n\t\tend = this.skipHiddenDays(end, -1, true); // exclusively move backwards                                              // 6680\n                                                                                                                       // 6681\n\t\treturn {                                                                                                             // 6682\n\t\t\tintervalUnit: intervalUnit,                                                                                         // 6683\n\t\t\tintervalStart: intervalStart,                                                                                       // 6684\n\t\t\tintervalEnd: intervalEnd,                                                                                           // 6685\n\t\t\tstart: start,                                                                                                       // 6686\n\t\t\tend: end                                                                                                            // 6687\n\t\t};                                                                                                                   // 6688\n\t},                                                                                                                    // 6689\n                                                                                                                       // 6690\n                                                                                                                       // 6691\n\t// Computes the new date when the user hits the prev button, given the current date                                   // 6692\n\tcomputePrevDate: function(date) {                                                                                     // 6693\n\t\treturn this.massageCurrentDate(                                                                                      // 6694\n\t\t\tdate.clone().startOf(this.intervalUnit).subtract(this.intervalDuration), -1                                         // 6695\n\t\t);                                                                                                                   // 6696\n\t},                                                                                                                    // 6697\n                                                                                                                       // 6698\n                                                                                                                       // 6699\n\t// Computes the new date when the user hits the next button, given the current date                                   // 6700\n\tcomputeNextDate: function(date) {                                                                                     // 6701\n\t\treturn this.massageCurrentDate(                                                                                      // 6702\n\t\t\tdate.clone().startOf(this.intervalUnit).add(this.intervalDuration)                                                  // 6703\n\t\t);                                                                                                                   // 6704\n\t},                                                                                                                    // 6705\n                                                                                                                       // 6706\n                                                                                                                       // 6707\n\t// Given an arbitrarily calculated current date of the calendar, returns a date that is ensured to be completely      // 6708\n\t// visible. `direction` is optional and indicates which direction the current date was being                          // 6709\n\t// incremented or decremented (1 or -1).                                                                              // 6710\n\tmassageCurrentDate: function(date, direction) {                                                                       // 6711\n\t\tif (this.intervalDuration.as('days') <= 1) { // if the view displays a single day or smaller                         // 6712\n\t\t\tif (this.isHiddenDay(date)) {                                                                                       // 6713\n\t\t\t\tdate = this.skipHiddenDays(date, direction);                                                                       // 6714\n\t\t\t\tdate.startOf('day');                                                                                               // 6715\n\t\t\t}                                                                                                                   // 6716\n\t\t}                                                                                                                    // 6717\n                                                                                                                       // 6718\n\t\treturn date;                                                                                                         // 6719\n\t},                                                                                                                    // 6720\n                                                                                                                       // 6721\n                                                                                                                       // 6722\n\t/* Title and Date Formatting                                                                                          // 6723\n\t------------------------------------------------------------------------------------------------------------------*/  // 6724\n                                                                                                                       // 6725\n                                                                                                                       // 6726\n\t// Sets the view's title property to the most updated computed value                                                  // 6727\n\tupdateTitle: function() {                                                                                             // 6728\n\t\tthis.title = this.computeTitle();                                                                                    // 6729\n\t},                                                                                                                    // 6730\n                                                                                                                       // 6731\n                                                                                                                       // 6732\n\t// Computes what the title at the top of the calendar should be for this view                                         // 6733\n\tcomputeTitle: function() {                                                                                            // 6734\n\t\treturn this.formatRange(                                                                                             // 6735\n\t\t\t{ start: this.intervalStart, end: this.intervalEnd },                                                               // 6736\n\t\t\tthis.opt('titleFormat') || this.computeTitleFormat(),                                                               // 6737\n\t\t\tthis.opt('titleRangeSeparator')                                                                                     // 6738\n\t\t);                                                                                                                   // 6739\n\t},                                                                                                                    // 6740\n                                                                                                                       // 6741\n                                                                                                                       // 6742\n\t// Generates the format string that should be used to generate the title for the current date range.                  // 6743\n\t// Attempts to compute the most appropriate format if not explicitly specified with `titleFormat`.                    // 6744\n\tcomputeTitleFormat: function() {                                                                                      // 6745\n\t\tif (this.intervalUnit == 'year') {                                                                                   // 6746\n\t\t\treturn 'YYYY';                                                                                                      // 6747\n\t\t}                                                                                                                    // 6748\n\t\telse if (this.intervalUnit == 'month') {                                                                             // 6749\n\t\t\treturn this.opt('monthYearFormat'); // like \"September 2014\"                                                        // 6750\n\t\t}                                                                                                                    // 6751\n\t\telse if (this.intervalDuration.as('days') > 1) {                                                                     // 6752\n\t\t\treturn 'll'; // multi-day range. shorter, like \"Sep 9 - 10 2014\"                                                    // 6753\n\t\t}                                                                                                                    // 6754\n\t\telse {                                                                                                               // 6755\n\t\t\treturn 'LL'; // one day. longer, like \"September 9 2014\"                                                            // 6756\n\t\t}                                                                                                                    // 6757\n\t},                                                                                                                    // 6758\n                                                                                                                       // 6759\n                                                                                                                       // 6760\n\t// Utility for formatting a range. Accepts a range object, formatting string, and optional separator.                 // 6761\n\t// Displays all-day ranges naturally, with an inclusive end. Takes the current isRTL into account.                    // 6762\n\tformatRange: function(range, formatStr, separator) {                                                                  // 6763\n\t\tvar end = range.end;                                                                                                 // 6764\n                                                                                                                       // 6765\n\t\tif (!end.hasTime()) { // all-day?                                                                                    // 6766\n\t\t\tend = end.clone().subtract(1); // convert to inclusive. last ms of previous day                                     // 6767\n\t\t}                                                                                                                    // 6768\n                                                                                                                       // 6769\n\t\treturn formatRange(range.start, end, formatStr, separator, this.opt('isRTL'));                                       // 6770\n\t},                                                                                                                    // 6771\n                                                                                                                       // 6772\n                                                                                                                       // 6773\n\t/* Rendering                                                                                                          // 6774\n\t------------------------------------------------------------------------------------------------------------------*/  // 6775\n                                                                                                                       // 6776\n                                                                                                                       // 6777\n\t// Sets the container element that the view should render inside of.                                                  // 6778\n\t// Does other DOM-related initializations.                                                                            // 6779\n\tsetElement: function(el) {                                                                                            // 6780\n\t\tthis.el = el;                                                                                                        // 6781\n\t\tthis.bindGlobalHandlers();                                                                                           // 6782\n\t},                                                                                                                    // 6783\n                                                                                                                       // 6784\n                                                                                                                       // 6785\n\t// Removes the view's container element from the DOM, clearing any content beforehand.                                // 6786\n\t// Undoes any other DOM-related attachments.                                                                          // 6787\n\tremoveElement: function() {                                                                                           // 6788\n\t\tthis.clear(); // clears all content                                                                                  // 6789\n                                                                                                                       // 6790\n\t\t// clean up the skeleton                                                                                             // 6791\n\t\tif (this.isSkeletonRendered) {                                                                                       // 6792\n\t\t\tthis.destroySkeleton();                                                                                             // 6793\n\t\t\tthis.isSkeletonRendered = false;                                                                                    // 6794\n\t\t}                                                                                                                    // 6795\n                                                                                                                       // 6796\n\t\tthis.unbindGlobalHandlers();                                                                                         // 6797\n                                                                                                                       // 6798\n\t\tthis.el.remove();                                                                                                    // 6799\n                                                                                                                       // 6800\n\t\t// NOTE: don't null-out this.el in case the View was destroyed within an API callback.                               // 6801\n\t\t// We don't null-out the View's other jQuery element references upon destroy, so why should we kill this.el?         // 6802\n\t},                                                                                                                    // 6803\n                                                                                                                       // 6804\n                                                                                                                       // 6805\n\t// Does everything necessary to display the view centered around the given date.                                      // 6806\n\t// Does every type of rendering EXCEPT rendering events.                                                              // 6807\n\tdisplay: function(date) {                                                                                             // 6808\n\t\tvar scrollState = null;                                                                                              // 6809\n                                                                                                                       // 6810\n\t\tif (this.isDisplayed) {                                                                                              // 6811\n\t\t\tscrollState = this.queryScroll();                                                                                   // 6812\n\t\t}                                                                                                                    // 6813\n                                                                                                                       // 6814\n\t\tthis.clear(); // clear the old content                                                                               // 6815\n\t\tthis.setDate(date);                                                                                                  // 6816\n\t\tthis.render();                                                                                                       // 6817\n\t\tthis.updateSize();                                                                                                   // 6818\n\t\tthis.renderBusinessHours(); // might need coordinates, so should go after updateSize()                               // 6819\n\t\tthis.isDisplayed = true;                                                                                             // 6820\n                                                                                                                       // 6821\n\t\tscrollState = this.computeInitialScroll(scrollState);                                                                // 6822\n\t\tthis.forceScroll(scrollState);                                                                                       // 6823\n                                                                                                                       // 6824\n\t\tthis.triggerRender();                                                                                                // 6825\n\t},                                                                                                                    // 6826\n                                                                                                                       // 6827\n                                                                                                                       // 6828\n\t// Does everything necessary to clear the content of the view.                                                        // 6829\n\t// Clears dates and events. Does not clear the skeleton.                                                              // 6830\n\tclear: function() { // clears the view of *content* but not the skeleton                                              // 6831\n\t\tif (this.isDisplayed) {                                                                                              // 6832\n\t\t\tthis.unselect();                                                                                                    // 6833\n\t\t\tthis.clearEvents();                                                                                                 // 6834\n\t\t\tthis.triggerDestroy();                                                                                              // 6835\n\t\t\tthis.destroyBusinessHours();                                                                                        // 6836\n\t\t\tthis.destroy();                                                                                                     // 6837\n\t\t\tthis.isDisplayed = false;                                                                                           // 6838\n\t\t}                                                                                                                    // 6839\n\t},                                                                                                                    // 6840\n                                                                                                                       // 6841\n                                                                                                                       // 6842\n\t// Renders the view's date-related content, rendering the view's non-content skeleton if necessary                    // 6843\n\trender: function() {                                                                                                  // 6844\n\t\tif (!this.isSkeletonRendered) {                                                                                      // 6845\n\t\t\tthis.renderSkeleton();                                                                                              // 6846\n\t\t\tthis.isSkeletonRendered = true;                                                                                     // 6847\n\t\t}                                                                                                                    // 6848\n\t\tthis.renderDates();                                                                                                  // 6849\n\t},                                                                                                                    // 6850\n                                                                                                                       // 6851\n                                                                                                                       // 6852\n\t// Unrenders the view's date-related content.                                                                         // 6853\n\t// Call this instead of destroyDates directly in case the View subclass wants to use a render/destroy pattern         // 6854\n\t// where both the skeleton and the content always get rendered/unrendered together.                                   // 6855\n\tdestroy: function() {                                                                                                 // 6856\n\t\tthis.destroyDates();                                                                                                 // 6857\n\t},                                                                                                                    // 6858\n                                                                                                                       // 6859\n                                                                                                                       // 6860\n\t// Renders the basic structure of the view before any content is rendered                                             // 6861\n\trenderSkeleton: function() {                                                                                          // 6862\n\t\t// subclasses should implement                                                                                       // 6863\n\t},                                                                                                                    // 6864\n                                                                                                                       // 6865\n                                                                                                                       // 6866\n\t// Unrenders the basic structure of the view                                                                          // 6867\n\tdestroySkeleton: function() {                                                                                         // 6868\n\t\t// subclasses should implement                                                                                       // 6869\n\t},                                                                                                                    // 6870\n                                                                                                                       // 6871\n                                                                                                                       // 6872\n\t// Renders the view's date-related content (like cells that represent days/times).                                    // 6873\n\t// Assumes setRange has already been called and the skeleton has already been rendered.                               // 6874\n\trenderDates: function() {                                                                                             // 6875\n\t\t// subclasses should implement                                                                                       // 6876\n\t},                                                                                                                    // 6877\n                                                                                                                       // 6878\n                                                                                                                       // 6879\n\t// Unrenders the view's date-related content                                                                          // 6880\n\tdestroyDates: function() {                                                                                            // 6881\n\t\t// subclasses should override                                                                                        // 6882\n\t},                                                                                                                    // 6883\n                                                                                                                       // 6884\n                                                                                                                       // 6885\n\t// Renders business-hours onto the view. Assumes updateSize has already been called.                                  // 6886\n\trenderBusinessHours: function() {                                                                                     // 6887\n\t\t// subclasses should implement                                                                                       // 6888\n\t},                                                                                                                    // 6889\n                                                                                                                       // 6890\n                                                                                                                       // 6891\n\t// Unrenders previously-rendered business-hours                                                                       // 6892\n\tdestroyBusinessHours: function() {                                                                                    // 6893\n\t\t// subclasses should implement                                                                                       // 6894\n\t},                                                                                                                    // 6895\n                                                                                                                       // 6896\n                                                                                                                       // 6897\n\t// Signals that the view's content has been rendered                                                                  // 6898\n\ttriggerRender: function() {                                                                                           // 6899\n\t\tthis.trigger('viewRender', this, this, this.el);                                                                     // 6900\n\t},                                                                                                                    // 6901\n                                                                                                                       // 6902\n                                                                                                                       // 6903\n\t// Signals that the view's content is about to be unrendered                                                          // 6904\n\ttriggerDestroy: function() {                                                                                          // 6905\n\t\tthis.trigger('viewDestroy', this, this, this.el);                                                                    // 6906\n\t},                                                                                                                    // 6907\n                                                                                                                       // 6908\n                                                                                                                       // 6909\n\t// Binds DOM handlers to elements that reside outside the view container, such as the document                        // 6910\n\tbindGlobalHandlers: function() {                                                                                      // 6911\n\t\t$(document).on('mousedown', this.documentMousedownProxy);                                                            // 6912\n\t},                                                                                                                    // 6913\n                                                                                                                       // 6914\n                                                                                                                       // 6915\n\t// Unbinds DOM handlers from elements that reside outside the view container                                          // 6916\n\tunbindGlobalHandlers: function() {                                                                                    // 6917\n\t\t$(document).off('mousedown', this.documentMousedownProxy);                                                           // 6918\n\t},                                                                                                                    // 6919\n                                                                                                                       // 6920\n                                                                                                                       // 6921\n\t// Initializes internal variables related to theming                                                                  // 6922\n\tinitThemingProps: function() {                                                                                        // 6923\n\t\tvar tm = this.opt('theme') ? 'ui' : 'fc';                                                                            // 6924\n                                                                                                                       // 6925\n\t\tthis.widgetHeaderClass = tm + '-widget-header';                                                                      // 6926\n\t\tthis.widgetContentClass = tm + '-widget-content';                                                                    // 6927\n\t\tthis.highlightStateClass = tm + '-state-highlight';                                                                  // 6928\n\t},                                                                                                                    // 6929\n                                                                                                                       // 6930\n                                                                                                                       // 6931\n\t/* Dimensions                                                                                                         // 6932\n\t------------------------------------------------------------------------------------------------------------------*/  // 6933\n                                                                                                                       // 6934\n                                                                                                                       // 6935\n\t// Refreshes anything dependant upon sizing of the container element of the grid                                      // 6936\n\tupdateSize: function(isResize) {                                                                                      // 6937\n\t\tvar scrollState;                                                                                                     // 6938\n                                                                                                                       // 6939\n\t\tif (isResize) {                                                                                                      // 6940\n\t\t\tscrollState = this.queryScroll();                                                                                   // 6941\n\t\t}                                                                                                                    // 6942\n                                                                                                                       // 6943\n\t\tthis.updateHeight();                                                                                                 // 6944\n\t\tthis.updateWidth();                                                                                                  // 6945\n                                                                                                                       // 6946\n\t\tif (isResize) {                                                                                                      // 6947\n\t\t\tthis.setScroll(scrollState);                                                                                        // 6948\n\t\t}                                                                                                                    // 6949\n\t},                                                                                                                    // 6950\n                                                                                                                       // 6951\n                                                                                                                       // 6952\n\t// Refreshes the horizontal dimensions of the calendar                                                                // 6953\n\tupdateWidth: function() {                                                                                             // 6954\n\t\t// subclasses should implement                                                                                       // 6955\n\t},                                                                                                                    // 6956\n                                                                                                                       // 6957\n                                                                                                                       // 6958\n\t// Refreshes the vertical dimensions of the calendar                                                                  // 6959\n\tupdateHeight: function() {                                                                                            // 6960\n\t\tvar calendar = this.calendar; // we poll the calendar for height information                                         // 6961\n                                                                                                                       // 6962\n\t\tthis.setHeight(                                                                                                      // 6963\n\t\t\tcalendar.getSuggestedViewHeight(),                                                                                  // 6964\n\t\t\tcalendar.isHeightAuto()                                                                                             // 6965\n\t\t);                                                                                                                   // 6966\n\t},                                                                                                                    // 6967\n                                                                                                                       // 6968\n                                                                                                                       // 6969\n\t// Updates the vertical dimensions of the calendar to the specified height.                                           // 6970\n\t// if `isAuto` is set to true, height becomes merely a suggestion and the view should use its \"natural\" height.       // 6971\n\tsetHeight: function(height, isAuto) {                                                                                 // 6972\n\t\t// subclasses should implement                                                                                       // 6973\n\t},                                                                                                                    // 6974\n                                                                                                                       // 6975\n                                                                                                                       // 6976\n\t/* Scroller                                                                                                           // 6977\n\t------------------------------------------------------------------------------------------------------------------*/  // 6978\n                                                                                                                       // 6979\n                                                                                                                       // 6980\n\t// Given the total height of the view, return the number of pixels that should be used for the scroller.              // 6981\n\t// Utility for subclasses.                                                                                            // 6982\n\tcomputeScrollerHeight: function(totalHeight) {                                                                        // 6983\n\t\tvar scrollerEl = this.scrollerEl;                                                                                    // 6984\n\t\tvar both;                                                                                                            // 6985\n\t\tvar otherHeight; // cumulative height of everything that is not the scrollerEl in the view (header+borders)          // 6986\n                                                                                                                       // 6987\n\t\tboth = this.el.add(scrollerEl);                                                                                      // 6988\n                                                                                                                       // 6989\n\t\t// fuckin IE8/9/10/11 sometimes returns 0 for dimensions. this weird hack was the only thing that worked             // 6990\n\t\tboth.css({                                                                                                           // 6991\n\t\t\tposition: 'relative', // cause a reflow, which will force fresh dimension recalculation                             // 6992\n\t\t\tleft: -1 // ensure reflow in case the el was already relative. negative is less likely to cause new scroll          // 6993\n\t\t});                                                                                                                  // 6994\n\t\totherHeight = this.el.outerHeight() - scrollerEl.height(); // grab the dimensions                                    // 6995\n\t\tboth.css({ position: '', left: '' }); // undo hack                                                                   // 6996\n                                                                                                                       // 6997\n\t\treturn totalHeight - otherHeight;                                                                                    // 6998\n\t},                                                                                                                    // 6999\n                                                                                                                       // 7000\n                                                                                                                       // 7001\n\t// Computes the initial pre-configured scroll state prior to allowing the user to change it.                          // 7002\n\t// Given the scroll state from the previous rendering. If first time rendering, given null.                           // 7003\n\tcomputeInitialScroll: function(previousScrollState) {                                                                 // 7004\n\t\treturn 0;                                                                                                            // 7005\n\t},                                                                                                                    // 7006\n                                                                                                                       // 7007\n                                                                                                                       // 7008\n\t// Retrieves the view's current natural scroll state. Can return an arbitrary format.                                 // 7009\n\tqueryScroll: function() {                                                                                             // 7010\n\t\tif (this.scrollerEl) {                                                                                               // 7011\n\t\t\treturn this.scrollerEl.scrollTop(); // operates on scrollerEl by default                                            // 7012\n\t\t}                                                                                                                    // 7013\n\t},                                                                                                                    // 7014\n                                                                                                                       // 7015\n                                                                                                                       // 7016\n\t// Sets the view's scroll state. Will accept the same format computeInitialScroll and queryScroll produce.            // 7017\n\tsetScroll: function(scrollState) {                                                                                    // 7018\n\t\tif (this.scrollerEl) {                                                                                               // 7019\n\t\t\treturn this.scrollerEl.scrollTop(scrollState); // operates on scrollerEl by default                                 // 7020\n\t\t}                                                                                                                    // 7021\n\t},                                                                                                                    // 7022\n                                                                                                                       // 7023\n                                                                                                                       // 7024\n\t// Sets the scroll state, making sure to overcome any predefined scroll value the browser has in mind                 // 7025\n\tforceScroll: function(scrollState) {                                                                                  // 7026\n\t\tvar _this = this;                                                                                                    // 7027\n                                                                                                                       // 7028\n\t\tthis.setScroll(scrollState);                                                                                         // 7029\n\t\tsetTimeout(function() {                                                                                              // 7030\n\t\t\t_this.setScroll(scrollState);                                                                                       // 7031\n\t\t}, 0);                                                                                                               // 7032\n\t},                                                                                                                    // 7033\n                                                                                                                       // 7034\n                                                                                                                       // 7035\n\t/* Event Elements / Segments                                                                                          // 7036\n\t------------------------------------------------------------------------------------------------------------------*/  // 7037\n                                                                                                                       // 7038\n                                                                                                                       // 7039\n\t// Does everything necessary to display the given events onto the current view                                        // 7040\n\tdisplayEvents: function(events) {                                                                                     // 7041\n\t\tvar scrollState = this.queryScroll();                                                                                // 7042\n                                                                                                                       // 7043\n\t\tthis.clearEvents();                                                                                                  // 7044\n\t\tthis.renderEvents(events);                                                                                           // 7045\n\t\tthis.isEventsRendered = true;                                                                                        // 7046\n\t\tthis.setScroll(scrollState);                                                                                         // 7047\n\t\tthis.triggerEventRender();                                                                                           // 7048\n\t},                                                                                                                    // 7049\n                                                                                                                       // 7050\n                                                                                                                       // 7051\n\t// Does everything necessary to clear the view's currently-rendered events                                            // 7052\n\tclearEvents: function() {                                                                                             // 7053\n\t\tif (this.isEventsRendered) {                                                                                         // 7054\n\t\t\tthis.triggerEventDestroy();                                                                                         // 7055\n\t\t\tthis.destroyEvents();                                                                                               // 7056\n\t\t\tthis.isEventsRendered = false;                                                                                      // 7057\n\t\t}                                                                                                                    // 7058\n\t},                                                                                                                    // 7059\n                                                                                                                       // 7060\n                                                                                                                       // 7061\n\t// Renders the events onto the view.                                                                                  // 7062\n\trenderEvents: function(events) {                                                                                      // 7063\n\t\t// subclasses should implement                                                                                       // 7064\n\t},                                                                                                                    // 7065\n                                                                                                                       // 7066\n                                                                                                                       // 7067\n\t// Removes event elements from the view.                                                                              // 7068\n\tdestroyEvents: function() {                                                                                           // 7069\n\t\t// subclasses should implement                                                                                       // 7070\n\t},                                                                                                                    // 7071\n                                                                                                                       // 7072\n                                                                                                                       // 7073\n\t// Signals that all events have been rendered                                                                         // 7074\n\ttriggerEventRender: function() {                                                                                      // 7075\n\t\tthis.renderedEventSegEach(function(seg) {                                                                            // 7076\n\t\t\tthis.trigger('eventAfterRender', seg.event, seg.event, seg.el);                                                     // 7077\n\t\t});                                                                                                                  // 7078\n\t\tthis.trigger('eventAfterAllRender');                                                                                 // 7079\n\t},                                                                                                                    // 7080\n                                                                                                                       // 7081\n                                                                                                                       // 7082\n\t// Signals that all event elements are about to be removed                                                            // 7083\n\ttriggerEventDestroy: function() {                                                                                     // 7084\n\t\tthis.renderedEventSegEach(function(seg) {                                                                            // 7085\n\t\t\tthis.trigger('eventDestroy', seg.event, seg.event, seg.el);                                                         // 7086\n\t\t});                                                                                                                  // 7087\n\t},                                                                                                                    // 7088\n                                                                                                                       // 7089\n                                                                                                                       // 7090\n\t// Given an event and the default element used for rendering, returns the element that should actually be used.       // 7091\n\t// Basically runs events and elements through the eventRender hook.                                                   // 7092\n\tresolveEventEl: function(event, el) {                                                                                 // 7093\n\t\tvar custom = this.trigger('eventRender', event, event, el);                                                          // 7094\n                                                                                                                       // 7095\n\t\tif (custom === false) { // means don't render at all                                                                 // 7096\n\t\t\tel = null;                                                                                                          // 7097\n\t\t}                                                                                                                    // 7098\n\t\telse if (custom && custom !== true) {                                                                                // 7099\n\t\t\tel = $(custom);                                                                                                     // 7100\n\t\t}                                                                                                                    // 7101\n                                                                                                                       // 7102\n\t\treturn el;                                                                                                           // 7103\n\t},                                                                                                                    // 7104\n                                                                                                                       // 7105\n                                                                                                                       // 7106\n\t// Hides all rendered event segments linked to the given event                                                        // 7107\n\tshowEvent: function(event) {                                                                                          // 7108\n\t\tthis.renderedEventSegEach(function(seg) {                                                                            // 7109\n\t\t\tseg.el.css('visibility', '');                                                                                       // 7110\n\t\t}, event);                                                                                                           // 7111\n\t},                                                                                                                    // 7112\n                                                                                                                       // 7113\n                                                                                                                       // 7114\n\t// Shows all rendered event segments linked to the given event                                                        // 7115\n\thideEvent: function(event) {                                                                                          // 7116\n\t\tthis.renderedEventSegEach(function(seg) {                                                                            // 7117\n\t\t\tseg.el.css('visibility', 'hidden');                                                                                 // 7118\n\t\t}, event);                                                                                                           // 7119\n\t},                                                                                                                    // 7120\n                                                                                                                       // 7121\n                                                                                                                       // 7122\n\t// Iterates through event segments that have been rendered (have an el). Goes through all by default.                 // 7123\n\t// If the optional `event` argument is specified, only iterates through segments linked to that event.                // 7124\n\t// The `this` value of the callback function will be the view.                                                        // 7125\n\trenderedEventSegEach: function(func, event) {                                                                         // 7126\n\t\tvar segs = this.getEventSegs();                                                                                      // 7127\n\t\tvar i;                                                                                                               // 7128\n                                                                                                                       // 7129\n\t\tfor (i = 0; i < segs.length; i++) {                                                                                  // 7130\n\t\t\tif (!event || segs[i].event._id === event._id) {                                                                    // 7131\n\t\t\t\tif (segs[i].el) {                                                                                                  // 7132\n\t\t\t\t\tfunc.call(this, segs[i]);                                                                                         // 7133\n\t\t\t\t}                                                                                                                  // 7134\n\t\t\t}                                                                                                                   // 7135\n\t\t}                                                                                                                    // 7136\n\t},                                                                                                                    // 7137\n                                                                                                                       // 7138\n                                                                                                                       // 7139\n\t// Retrieves all the rendered segment objects for the view                                                            // 7140\n\tgetEventSegs: function() {                                                                                            // 7141\n\t\t// subclasses must implement                                                                                         // 7142\n\t\treturn [];                                                                                                           // 7143\n\t},                                                                                                                    // 7144\n                                                                                                                       // 7145\n                                                                                                                       // 7146\n\t/* Event Drag-n-Drop                                                                                                  // 7147\n\t------------------------------------------------------------------------------------------------------------------*/  // 7148\n                                                                                                                       // 7149\n                                                                                                                       // 7150\n\t// Computes if the given event is allowed to be dragged by the user                                                   // 7151\n\tisEventDraggable: function(event) {                                                                                   // 7152\n\t\tvar source = event.source || {};                                                                                     // 7153\n                                                                                                                       // 7154\n\t\treturn firstDefined(                                                                                                 // 7155\n\t\t\tevent.startEditable,                                                                                                // 7156\n\t\t\tsource.startEditable,                                                                                               // 7157\n\t\t\tthis.opt('eventStartEditable'),                                                                                     // 7158\n\t\t\tevent.editable,                                                                                                     // 7159\n\t\t\tsource.editable,                                                                                                    // 7160\n\t\t\tthis.opt('editable')                                                                                                // 7161\n\t\t);                                                                                                                   // 7162\n\t},                                                                                                                    // 7163\n                                                                                                                       // 7164\n                                                                                                                       // 7165\n\t// Must be called when an event in the view is dropped onto new location.                                             // 7166\n\t// `dropLocation` is an object that contains the new start/end/allDay values for the event.                           // 7167\n\treportEventDrop: function(event, dropLocation, largeUnit, el, ev) {                                                   // 7168\n\t\tvar calendar = this.calendar;                                                                                        // 7169\n\t\tvar mutateResult = calendar.mutateEvent(event, dropLocation, largeUnit);                                             // 7170\n\t\tvar undoFunc = function() {                                                                                          // 7171\n\t\t\tmutateResult.undo();                                                                                                // 7172\n\t\t\tcalendar.reportEventChange();                                                                                       // 7173\n\t\t};                                                                                                                   // 7174\n                                                                                                                       // 7175\n\t\tthis.triggerEventDrop(event, mutateResult.dateDelta, undoFunc, el, ev);                                              // 7176\n\t\tcalendar.reportEventChange(); // will rerender events                                                                // 7177\n\t},                                                                                                                    // 7178\n                                                                                                                       // 7179\n                                                                                                                       // 7180\n\t// Triggers event-drop handlers that have subscribed via the API                                                      // 7181\n\ttriggerEventDrop: function(event, dateDelta, undoFunc, el, ev) {                                                      // 7182\n\t\tthis.trigger('eventDrop', el[0], event, dateDelta, undoFunc, ev, {}); // {} = jqui dummy                             // 7183\n\t},                                                                                                                    // 7184\n                                                                                                                       // 7185\n                                                                                                                       // 7186\n\t/* External Element Drag-n-Drop                                                                                       // 7187\n\t------------------------------------------------------------------------------------------------------------------*/  // 7188\n                                                                                                                       // 7189\n                                                                                                                       // 7190\n\t// Must be called when an external element, via jQuery UI, has been dropped onto the calendar.                        // 7191\n\t// `meta` is the parsed data that has been embedded into the dragging event.                                          // 7192\n\t// `dropLocation` is an object that contains the new start/end/allDay values for the event.                           // 7193\n\treportExternalDrop: function(meta, dropLocation, el, ev, ui) {                                                        // 7194\n\t\tvar eventProps = meta.eventProps;                                                                                    // 7195\n\t\tvar eventInput;                                                                                                      // 7196\n\t\tvar event;                                                                                                           // 7197\n                                                                                                                       // 7198\n\t\t// Try to build an event object and render it. TODO: decouple the two                                                // 7199\n\t\tif (eventProps) {                                                                                                    // 7200\n\t\t\teventInput = $.extend({}, eventProps, dropLocation);                                                                // 7201\n\t\t\tevent = this.calendar.renderEvent(eventInput, meta.stick)[0]; // renderEvent returns an array                       // 7202\n\t\t}                                                                                                                    // 7203\n                                                                                                                       // 7204\n\t\tthis.triggerExternalDrop(event, dropLocation, el, ev, ui);                                                           // 7205\n\t},                                                                                                                    // 7206\n                                                                                                                       // 7207\n                                                                                                                       // 7208\n\t// Triggers external-drop handlers that have subscribed via the API                                                   // 7209\n\ttriggerExternalDrop: function(event, dropLocation, el, ev, ui) {                                                      // 7210\n                                                                                                                       // 7211\n\t\t// trigger 'drop' regardless of whether element represents an event                                                  // 7212\n\t\tthis.trigger('drop', el[0], dropLocation.start, ev, ui);                                                             // 7213\n                                                                                                                       // 7214\n\t\tif (event) {                                                                                                         // 7215\n\t\t\tthis.trigger('eventReceive', null, event); // signal an external event landed                                       // 7216\n\t\t}                                                                                                                    // 7217\n\t},                                                                                                                    // 7218\n                                                                                                                       // 7219\n                                                                                                                       // 7220\n\t/* Drag-n-Drop Rendering (for both events and external elements)                                                      // 7221\n\t------------------------------------------------------------------------------------------------------------------*/  // 7222\n                                                                                                                       // 7223\n                                                                                                                       // 7224\n\t// Renders a visual indication of a event or external-element drag over the given drop zone.                          // 7225\n\t// If an external-element, seg will be `null`                                                                         // 7226\n\trenderDrag: function(dropLocation, seg) {                                                                             // 7227\n\t\t// subclasses must implement                                                                                         // 7228\n\t},                                                                                                                    // 7229\n                                                                                                                       // 7230\n                                                                                                                       // 7231\n\t// Unrenders a visual indication of an event or external-element being dragged.                                       // 7232\n\tdestroyDrag: function() {                                                                                             // 7233\n\t\t// subclasses must implement                                                                                         // 7234\n\t},                                                                                                                    // 7235\n                                                                                                                       // 7236\n                                                                                                                       // 7237\n\t/* Event Resizing                                                                                                     // 7238\n\t------------------------------------------------------------------------------------------------------------------*/  // 7239\n                                                                                                                       // 7240\n                                                                                                                       // 7241\n\t// Computes if the given event is allowed to be resized from its starting edge                                        // 7242\n\tisEventResizableFromStart: function(event) {                                                                          // 7243\n\t\treturn this.opt('eventResizableFromStart') && this.isEventResizable(event);                                          // 7244\n\t},                                                                                                                    // 7245\n                                                                                                                       // 7246\n                                                                                                                       // 7247\n\t// Computes if the given event is allowed to be resized from its ending edge                                          // 7248\n\tisEventResizableFromEnd: function(event) {                                                                            // 7249\n\t\treturn this.isEventResizable(event);                                                                                 // 7250\n\t},                                                                                                                    // 7251\n                                                                                                                       // 7252\n                                                                                                                       // 7253\n\t// Computes if the given event is allowed to be resized by the user at all                                            // 7254\n\tisEventResizable: function(event) {                                                                                   // 7255\n\t\tvar source = event.source || {};                                                                                     // 7256\n                                                                                                                       // 7257\n\t\treturn firstDefined(                                                                                                 // 7258\n\t\t\tevent.durationEditable,                                                                                             // 7259\n\t\t\tsource.durationEditable,                                                                                            // 7260\n\t\t\tthis.opt('eventDurationEditable'),                                                                                  // 7261\n\t\t\tevent.editable,                                                                                                     // 7262\n\t\t\tsource.editable,                                                                                                    // 7263\n\t\t\tthis.opt('editable')                                                                                                // 7264\n\t\t);                                                                                                                   // 7265\n\t},                                                                                                                    // 7266\n                                                                                                                       // 7267\n                                                                                                                       // 7268\n\t// Must be called when an event in the view has been resized to a new length                                          // 7269\n\treportEventResize: function(event, resizeLocation, largeUnit, el, ev) {                                               // 7270\n\t\tvar calendar = this.calendar;                                                                                        // 7271\n\t\tvar mutateResult = calendar.mutateEvent(event, resizeLocation, largeUnit);                                           // 7272\n\t\tvar undoFunc = function() {                                                                                          // 7273\n\t\t\tmutateResult.undo();                                                                                                // 7274\n\t\t\tcalendar.reportEventChange();                                                                                       // 7275\n\t\t};                                                                                                                   // 7276\n                                                                                                                       // 7277\n\t\tthis.triggerEventResize(event, mutateResult.durationDelta, undoFunc, el, ev);                                        // 7278\n\t\tcalendar.reportEventChange(); // will rerender events                                                                // 7279\n\t},                                                                                                                    // 7280\n                                                                                                                       // 7281\n                                                                                                                       // 7282\n\t// Triggers event-resize handlers that have subscribed via the API                                                    // 7283\n\ttriggerEventResize: function(event, durationDelta, undoFunc, el, ev) {                                                // 7284\n\t\tthis.trigger('eventResize', el[0], event, durationDelta, undoFunc, ev, {}); // {} = jqui dummy                       // 7285\n\t},                                                                                                                    // 7286\n                                                                                                                       // 7287\n                                                                                                                       // 7288\n\t/* Selection                                                                                                          // 7289\n\t------------------------------------------------------------------------------------------------------------------*/  // 7290\n                                                                                                                       // 7291\n                                                                                                                       // 7292\n\t// Selects a date range on the view. `start` and `end` are both Moments.                                              // 7293\n\t// `ev` is the native mouse event that begin the interaction.                                                         // 7294\n\tselect: function(range, ev) {                                                                                         // 7295\n\t\tthis.unselect(ev);                                                                                                   // 7296\n\t\tthis.renderSelection(range);                                                                                         // 7297\n\t\tthis.reportSelection(range, ev);                                                                                     // 7298\n\t},                                                                                                                    // 7299\n                                                                                                                       // 7300\n                                                                                                                       // 7301\n\t// Renders a visual indication of the selection                                                                       // 7302\n\trenderSelection: function(range) {                                                                                    // 7303\n\t\t// subclasses should implement                                                                                       // 7304\n\t},                                                                                                                    // 7305\n                                                                                                                       // 7306\n                                                                                                                       // 7307\n\t// Called when a new selection is made. Updates internal state and triggers handlers.                                 // 7308\n\treportSelection: function(range, ev) {                                                                                // 7309\n\t\tthis.isSelected = true;                                                                                              // 7310\n\t\tthis.trigger('select', null, range.start, range.end, ev);                                                            // 7311\n\t},                                                                                                                    // 7312\n                                                                                                                       // 7313\n                                                                                                                       // 7314\n\t// Undoes a selection. updates in the internal state and triggers handlers.                                           // 7315\n\t// `ev` is the native mouse event that began the interaction.                                                         // 7316\n\tunselect: function(ev) {                                                                                              // 7317\n\t\tif (this.isSelected) {                                                                                               // 7318\n\t\t\tthis.isSelected = false;                                                                                            // 7319\n\t\t\tthis.destroySelection();                                                                                            // 7320\n\t\t\tthis.trigger('unselect', null, ev);                                                                                 // 7321\n\t\t}                                                                                                                    // 7322\n\t},                                                                                                                    // 7323\n                                                                                                                       // 7324\n                                                                                                                       // 7325\n\t// Unrenders a visual indication of selection                                                                         // 7326\n\tdestroySelection: function() {                                                                                        // 7327\n\t\t// subclasses should implement                                                                                       // 7328\n\t},                                                                                                                    // 7329\n                                                                                                                       // 7330\n                                                                                                                       // 7331\n\t// Handler for unselecting when the user clicks something and the 'unselectAuto' setting is on                        // 7332\n\tdocumentMousedown: function(ev) {                                                                                     // 7333\n\t\tvar ignore;                                                                                                          // 7334\n                                                                                                                       // 7335\n\t\t// is there a selection, and has the user made a proper left click?                                                  // 7336\n\t\tif (this.isSelected && this.opt('unselectAuto') && isPrimaryMouseButton(ev)) {                                       // 7337\n                                                                                                                       // 7338\n\t\t\t// only unselect if the clicked element is not identical to or inside of an 'unselectCancel' element                // 7339\n\t\t\tignore = this.opt('unselectCancel');                                                                                // 7340\n\t\t\tif (!ignore || !$(ev.target).closest(ignore).length) {                                                              // 7341\n\t\t\t\tthis.unselect(ev);                                                                                                 // 7342\n\t\t\t}                                                                                                                   // 7343\n\t\t}                                                                                                                    // 7344\n\t},                                                                                                                    // 7345\n                                                                                                                       // 7346\n                                                                                                                       // 7347\n\t/* Date Utils                                                                                                         // 7348\n\t------------------------------------------------------------------------------------------------------------------*/  // 7349\n                                                                                                                       // 7350\n                                                                                                                       // 7351\n\t// Initializes internal variables related to calculating hidden days-of-week                                          // 7352\n\tinitHiddenDays: function() {                                                                                          // 7353\n\t\tvar hiddenDays = this.opt('hiddenDays') || []; // array of day-of-week indices that are hidden                       // 7354\n\t\tvar isHiddenDayHash = []; // is the day-of-week hidden? (hash with day-of-week-index -> bool)                        // 7355\n\t\tvar dayCnt = 0;                                                                                                      // 7356\n\t\tvar i;                                                                                                               // 7357\n                                                                                                                       // 7358\n\t\tif (this.opt('weekends') === false) {                                                                                // 7359\n\t\t\thiddenDays.push(0, 6); // 0=sunday, 6=saturday                                                                      // 7360\n\t\t}                                                                                                                    // 7361\n                                                                                                                       // 7362\n\t\tfor (i = 0; i < 7; i++) {                                                                                            // 7363\n\t\t\tif (                                                                                                                // 7364\n\t\t\t\t!(isHiddenDayHash[i] = $.inArray(i, hiddenDays) !== -1)                                                            // 7365\n\t\t\t) {                                                                                                                 // 7366\n\t\t\t\tdayCnt++;                                                                                                          // 7367\n\t\t\t}                                                                                                                   // 7368\n\t\t}                                                                                                                    // 7369\n                                                                                                                       // 7370\n\t\tif (!dayCnt) {                                                                                                       // 7371\n\t\t\tthrow 'invalid hiddenDays'; // all days were hidden? bad.                                                           // 7372\n\t\t}                                                                                                                    // 7373\n                                                                                                                       // 7374\n\t\tthis.isHiddenDayHash = isHiddenDayHash;                                                                              // 7375\n\t},                                                                                                                    // 7376\n                                                                                                                       // 7377\n                                                                                                                       // 7378\n\t// Is the current day hidden?                                                                                         // 7379\n\t// `day` is a day-of-week index (0-6), or a Moment                                                                    // 7380\n\tisHiddenDay: function(day) {                                                                                          // 7381\n\t\tif (moment.isMoment(day)) {                                                                                          // 7382\n\t\t\tday = day.day();                                                                                                    // 7383\n\t\t}                                                                                                                    // 7384\n\t\treturn this.isHiddenDayHash[day];                                                                                    // 7385\n\t},                                                                                                                    // 7386\n                                                                                                                       // 7387\n                                                                                                                       // 7388\n\t// Incrementing the current day until it is no longer a hidden day, returning a copy.                                 // 7389\n\t// If the initial value of `date` is not a hidden day, don't do anything.                                             // 7390\n\t// Pass `isExclusive` as `true` if you are dealing with an end date.                                                  // 7391\n\t// `inc` defaults to `1` (increment one day forward each time)                                                        // 7392\n\tskipHiddenDays: function(date, inc, isExclusive) {                                                                    // 7393\n\t\tvar out = date.clone();                                                                                              // 7394\n\t\tinc = inc || 1;                                                                                                      // 7395\n\t\twhile (                                                                                                              // 7396\n\t\t\tthis.isHiddenDayHash[(out.day() + (isExclusive ? inc : 0) + 7) % 7]                                                 // 7397\n\t\t) {                                                                                                                  // 7398\n\t\t\tout.add(inc, 'days');                                                                                               // 7399\n\t\t}                                                                                                                    // 7400\n\t\treturn out;                                                                                                          // 7401\n\t},                                                                                                                    // 7402\n                                                                                                                       // 7403\n                                                                                                                       // 7404\n\t// Returns the date range of the full days the given range visually appears to occupy.                                // 7405\n\t// Returns a new range object.                                                                                        // 7406\n\tcomputeDayRange: function(range) {                                                                                    // 7407\n\t\tvar startDay = range.start.clone().stripTime(); // the beginning of the day the range starts                         // 7408\n\t\tvar end = range.end;                                                                                                 // 7409\n\t\tvar endDay = null;                                                                                                   // 7410\n\t\tvar endTimeMS;                                                                                                       // 7411\n                                                                                                                       // 7412\n\t\tif (end) {                                                                                                           // 7413\n\t\t\tendDay = end.clone().stripTime(); // the beginning of the day the range exclusively ends                            // 7414\n\t\t\tendTimeMS = +end.time(); // # of milliseconds into `endDay`                                                         // 7415\n                                                                                                                       // 7416\n\t\t\t// If the end time is actually inclusively part of the next day and is equal to or                                  // 7417\n\t\t\t// beyond the next day threshold, adjust the end to be the exclusive end of `endDay`.                               // 7418\n\t\t\t// Otherwise, leaving it as inclusive will cause it to exclude `endDay`.                                            // 7419\n\t\t\tif (endTimeMS && endTimeMS >= this.nextDayThreshold) {                                                              // 7420\n\t\t\t\tendDay.add(1, 'days');                                                                                             // 7421\n\t\t\t}                                                                                                                   // 7422\n\t\t}                                                                                                                    // 7423\n                                                                                                                       // 7424\n\t\t// If no end was specified, or if it is within `startDay` but not past nextDayThreshold,                             // 7425\n\t\t// assign the default duration of one day.                                                                           // 7426\n\t\tif (!end || endDay <= startDay) {                                                                                    // 7427\n\t\t\tendDay = startDay.clone().add(1, 'days');                                                                           // 7428\n\t\t}                                                                                                                    // 7429\n                                                                                                                       // 7430\n\t\treturn { start: startDay, end: endDay };                                                                             // 7431\n\t},                                                                                                                    // 7432\n                                                                                                                       // 7433\n                                                                                                                       // 7434\n\t// Does the given event visually appear to occupy more than one day?                                                  // 7435\n\tisMultiDayEvent: function(event) {                                                                                    // 7436\n\t\tvar range = this.computeDayRange(event); // event is range-ish                                                       // 7437\n                                                                                                                       // 7438\n\t\treturn range.end.diff(range.start, 'days') > 1;                                                                      // 7439\n\t}                                                                                                                     // 7440\n                                                                                                                       // 7441\n});                                                                                                                    // 7442\n                                                                                                                       // 7443\n;;                                                                                                                     // 7444\n                                                                                                                       // 7445\nvar Calendar = fc.Calendar = fc.CalendarBase = Class.extend({                                                          // 7446\n                                                                                                                       // 7447\n\tdirDefaults: null, // option defaults related to LTR or RTL                                                           // 7448\n\tlangDefaults: null, // option defaults related to current locale                                                      // 7449\n\toverrides: null, // option overrides given to the fullCalendar constructor                                            // 7450\n\toptions: null, // all defaults combined with overrides                                                                // 7451\n\tviewSpecCache: null, // cache of view definitions                                                                     // 7452\n\tview: null, // current View object                                                                                    // 7453\n\theader: null,                                                                                                         // 7454\n                                                                                                                       // 7455\n                                                                                                                       // 7456\n\t// a lot of this class' OOP logic is scoped within this constructor function,                                         // 7457\n\t// but in the future, write individual methods on the prototype.                                                      // 7458\n\tconstructor: Calendar_constructor,                                                                                    // 7459\n                                                                                                                       // 7460\n                                                                                                                       // 7461\n\t// Initializes `this.options` and other important options-related objects                                             // 7462\n\tinitOptions: function(overrides) {                                                                                    // 7463\n\t\tvar lang, langDefaults;                                                                                              // 7464\n\t\tvar isRTL, dirDefaults;                                                                                              // 7465\n                                                                                                                       // 7466\n\t\t// converts legacy options into non-legacy ones.                                                                     // 7467\n\t\t// in the future, when this is removed, don't use `overrides` reference. make a copy.                                // 7468\n\t\toverrides = massageOverrides(overrides);                                                                             // 7469\n                                                                                                                       // 7470\n\t\tlang = overrides.lang;                                                                                               // 7471\n\t\tlangDefaults = langOptionHash[lang];                                                                                 // 7472\n\t\tif (!langDefaults) {                                                                                                 // 7473\n\t\t\tlang = Calendar.defaults.lang;                                                                                      // 7474\n\t\t\tlangDefaults = langOptionHash[lang] || {};                                                                          // 7475\n\t\t}                                                                                                                    // 7476\n                                                                                                                       // 7477\n\t\tisRTL = firstDefined(                                                                                                // 7478\n\t\t\toverrides.isRTL,                                                                                                    // 7479\n\t\t\tlangDefaults.isRTL,                                                                                                 // 7480\n\t\t\tCalendar.defaults.isRTL                                                                                             // 7481\n\t\t);                                                                                                                   // 7482\n\t\tdirDefaults = isRTL ? Calendar.rtlDefaults : {};                                                                     // 7483\n                                                                                                                       // 7484\n\t\tthis.dirDefaults = dirDefaults;                                                                                      // 7485\n\t\tthis.langDefaults = langDefaults;                                                                                    // 7486\n\t\tthis.overrides = overrides;                                                                                          // 7487\n\t\tthis.options = mergeOptions( // merge defaults and overrides. lowest to highest precedence                           // 7488\n\t\t\tCalendar.defaults, // global defaults                                                                               // 7489\n\t\t\tdirDefaults,                                                                                                        // 7490\n\t\t\tlangDefaults,                                                                                                       // 7491\n\t\t\toverrides                                                                                                           // 7492\n\t\t);                                                                                                                   // 7493\n\t\tpopulateInstanceComputableOptions(this.options);                                                                     // 7494\n                                                                                                                       // 7495\n\t\tthis.viewSpecCache = {}; // somewhat unrelated                                                                       // 7496\n\t},                                                                                                                    // 7497\n                                                                                                                       // 7498\n                                                                                                                       // 7499\n\t// Gets information about how to create a view. Will use a cache.                                                     // 7500\n\tgetViewSpec: function(viewType) {                                                                                     // 7501\n\t\tvar cache = this.viewSpecCache;                                                                                      // 7502\n                                                                                                                       // 7503\n\t\treturn cache[viewType] || (cache[viewType] = this.buildViewSpec(viewType));                                          // 7504\n\t},                                                                                                                    // 7505\n                                                                                                                       // 7506\n                                                                                                                       // 7507\n\t// Given a duration singular unit, like \"week\" or \"day\", finds a matching view spec.                                  // 7508\n\t// Preference is given to views that have corresponding buttons.                                                      // 7509\n\tgetUnitViewSpec: function(unit) {                                                                                     // 7510\n\t\tvar viewTypes;                                                                                                       // 7511\n\t\tvar i;                                                                                                               // 7512\n\t\tvar spec;                                                                                                            // 7513\n                                                                                                                       // 7514\n\t\tif ($.inArray(unit, intervalUnits) != -1) {                                                                          // 7515\n                                                                                                                       // 7516\n\t\t\t// put views that have buttons first. there will be duplicates, but oh well                                         // 7517\n\t\t\tviewTypes = this.header.getViewsWithButtons();                                                                      // 7518\n\t\t\t$.each(fc.views, function(viewType) { // all views                                                                  // 7519\n\t\t\t\tviewTypes.push(viewType);                                                                                          // 7520\n\t\t\t});                                                                                                                 // 7521\n                                                                                                                       // 7522\n\t\t\tfor (i = 0; i < viewTypes.length; i++) {                                                                            // 7523\n\t\t\t\tspec = this.getViewSpec(viewTypes[i]);                                                                             // 7524\n\t\t\t\tif (spec) {                                                                                                        // 7525\n\t\t\t\t\tif (spec.singleUnit == unit) {                                                                                    // 7526\n\t\t\t\t\t\treturn spec;                                                                                                     // 7527\n\t\t\t\t\t}                                                                                                                 // 7528\n\t\t\t\t}                                                                                                                  // 7529\n\t\t\t}                                                                                                                   // 7530\n\t\t}                                                                                                                    // 7531\n\t},                                                                                                                    // 7532\n                                                                                                                       // 7533\n                                                                                                                       // 7534\n\t// Builds an object with information on how to create a given view                                                    // 7535\n\tbuildViewSpec: function(requestedViewType) {                                                                          // 7536\n\t\tvar viewOverrides = this.overrides.views || {};                                                                      // 7537\n\t\tvar defaultsChain = []; // for the view. lowest to highest priority                                                  // 7538\n\t\tvar overridesChain = []; // for the view. lowest to highest priority                                                 // 7539\n\t\tvar viewType = requestedViewType;                                                                                    // 7540\n\t\tvar viewClass;                                                                                                       // 7541\n\t\tvar defaults; // for the view                                                                                        // 7542\n\t\tvar overrides; // for the view                                                                                       // 7543\n\t\tvar duration;                                                                                                        // 7544\n\t\tvar unit;                                                                                                            // 7545\n\t\tvar spec;                                                                                                            // 7546\n                                                                                                                       // 7547\n\t\t// iterate from the specific view definition to a more general one until we hit an actual View class                 // 7548\n\t\twhile (viewType && !viewClass) {                                                                                     // 7549\n\t\t\tdefaults = fcViews[viewType] || {};                                                                                 // 7550\n\t\t\toverrides = viewOverrides[viewType] || {};                                                                          // 7551\n\t\t\tduration = duration || overrides.duration || defaults.duration;                                                     // 7552\n\t\t\tviewType = overrides.type || defaults.type; // for next iteration                                                   // 7553\n                                                                                                                       // 7554\n\t\t\tif (typeof defaults === 'function') { // a class                                                                    // 7555\n\t\t\t\tviewClass = defaults;                                                                                              // 7556\n\t\t\t\tdefaultsChain.unshift(viewClass.defaults || {});                                                                   // 7557\n\t\t\t}                                                                                                                   // 7558\n\t\t\telse { // an options object                                                                                         // 7559\n\t\t\t\tdefaultsChain.unshift(defaults);                                                                                   // 7560\n\t\t\t}                                                                                                                   // 7561\n\t\t\toverridesChain.unshift(overrides);                                                                                  // 7562\n\t\t}                                                                                                                    // 7563\n                                                                                                                       // 7564\n\t\tif (viewClass) {                                                                                                     // 7565\n\t\t\tspec = { 'class': viewClass, type: requestedViewType };                                                             // 7566\n                                                                                                                       // 7567\n\t\t\tif (duration) {                                                                                                     // 7568\n\t\t\t\tduration = moment.duration(duration);                                                                              // 7569\n\t\t\t\tif (!duration.valueOf()) { // invalid?                                                                             // 7570\n\t\t\t\t\tduration = null;                                                                                                  // 7571\n\t\t\t\t}                                                                                                                  // 7572\n\t\t\t}                                                                                                                   // 7573\n\t\t\tif (duration) {                                                                                                     // 7574\n\t\t\t\tspec.duration = duration;                                                                                          // 7575\n\t\t\t\tunit = computeIntervalUnit(duration);                                                                              // 7576\n                                                                                                                       // 7577\n\t\t\t\t// view is a single-unit duration, like \"week\" or \"day\"                                                            // 7578\n\t\t\t\t// incorporate options for this. lowest priority                                                                   // 7579\n\t\t\t\tif (duration.as(unit) === 1) {                                                                                     // 7580\n\t\t\t\t\tspec.singleUnit = unit;                                                                                           // 7581\n\t\t\t\t\toverridesChain.unshift(viewOverrides[unit] || {});                                                                // 7582\n\t\t\t\t}                                                                                                                  // 7583\n\t\t\t}                                                                                                                   // 7584\n                                                                                                                       // 7585\n\t\t\t// collapse into single objects                                                                                     // 7586\n\t\t\tspec.defaults = mergeOptions.apply(null, defaultsChain);                                                            // 7587\n\t\t\tspec.overrides = mergeOptions.apply(null, overridesChain);                                                          // 7588\n                                                                                                                       // 7589\n\t\t\tthis.buildViewSpecOptions(spec);                                                                                    // 7590\n\t\t\tthis.buildViewSpecButtonText(spec, requestedViewType);                                                              // 7591\n                                                                                                                       // 7592\n\t\t\treturn spec;                                                                                                        // 7593\n\t\t}                                                                                                                    // 7594\n\t},                                                                                                                    // 7595\n                                                                                                                       // 7596\n                                                                                                                       // 7597\n\t// Builds and assigns a view spec's options object from its already-assigned defaults and overrides                   // 7598\n\tbuildViewSpecOptions: function(spec) {                                                                                // 7599\n\t\tspec.options = mergeOptions( // lowest to highest priority                                                           // 7600\n\t\t\tCalendar.defaults, // global defaults                                                                               // 7601\n\t\t\tspec.defaults, // view's defaults (from ViewSubclass.defaults)                                                      // 7602\n\t\t\tthis.dirDefaults,                                                                                                   // 7603\n\t\t\tthis.langDefaults, // locale and dir take precedence over view's defaults!                                          // 7604\n\t\t\tthis.overrides, // calendar's overrides (options given to constructor)                                              // 7605\n\t\t\tspec.overrides // view's overrides (view-specific options)                                                          // 7606\n\t\t);                                                                                                                   // 7607\n\t\tpopulateInstanceComputableOptions(spec.options);                                                                     // 7608\n\t},                                                                                                                    // 7609\n                                                                                                                       // 7610\n                                                                                                                       // 7611\n\t// Computes and assigns a view spec's buttonText-related options                                                      // 7612\n\tbuildViewSpecButtonText: function(spec, requestedViewType) {                                                          // 7613\n                                                                                                                       // 7614\n\t\t// given an options object with a possible `buttonText` hash, lookup the buttonText for the                          // 7615\n\t\t// requested view, falling back to a generic unit entry like \"week\" or \"day\"                                         // 7616\n\t\tfunction queryButtonText(options) {                                                                                  // 7617\n\t\t\tvar buttonText = options.buttonText || {};                                                                          // 7618\n\t\t\treturn buttonText[requestedViewType] ||                                                                             // 7619\n\t\t\t\t(spec.singleUnit ? buttonText[spec.singleUnit] : null);                                                            // 7620\n\t\t}                                                                                                                    // 7621\n                                                                                                                       // 7622\n\t\t// highest to lowest priority                                                                                        // 7623\n\t\tspec.buttonTextOverride =                                                                                            // 7624\n\t\t\tqueryButtonText(this.overrides) || // constructor-specified buttonText lookup hash takes precedence                 // 7625\n\t\t\tspec.overrides.buttonText; // `buttonText` for view-specific options is a string                                    // 7626\n                                                                                                                       // 7627\n\t\t// highest to lowest priority. mirrors buildViewSpecOptions                                                          // 7628\n\t\tspec.buttonTextDefault =                                                                                             // 7629\n\t\t\tqueryButtonText(this.langDefaults) ||                                                                               // 7630\n\t\t\tqueryButtonText(this.dirDefaults) ||                                                                                // 7631\n\t\t\tspec.defaults.buttonText || // a single string. from ViewSubclass.defaults                                          // 7632\n\t\t\tqueryButtonText(Calendar.defaults) ||                                                                               // 7633\n\t\t\t(spec.duration ? this.humanizeDuration(spec.duration) : null) || // like \"3 days\"                                   // 7634\n\t\t\trequestedViewType; // fall back to given view name                                                                  // 7635\n\t},                                                                                                                    // 7636\n                                                                                                                       // 7637\n                                                                                                                       // 7638\n\t// Given a view name for a custom view or a standard view, creates a ready-to-go View object                          // 7639\n\tinstantiateView: function(viewType) {                                                                                 // 7640\n\t\tvar spec = this.getViewSpec(viewType);                                                                               // 7641\n                                                                                                                       // 7642\n\t\treturn new spec['class'](this, viewType, spec.options, spec.duration);                                               // 7643\n\t},                                                                                                                    // 7644\n                                                                                                                       // 7645\n                                                                                                                       // 7646\n\t// Returns a boolean about whether the view is okay to instantiate at some point                                      // 7647\n\tisValidViewType: function(viewType) {                                                                                 // 7648\n\t\treturn Boolean(this.getViewSpec(viewType));                                                                          // 7649\n\t}                                                                                                                     // 7650\n                                                                                                                       // 7651\n});                                                                                                                    // 7652\n                                                                                                                       // 7653\n                                                                                                                       // 7654\nfunction Calendar_constructor(element, overrides) {                                                                    // 7655\n\tvar t = this;                                                                                                         // 7656\n                                                                                                                       // 7657\n                                                                                                                       // 7658\n\tt.initOptions(overrides || {});                                                                                       // 7659\n\tvar options = this.options;                                                                                           // 7660\n                                                                                                                       // 7661\n\t                                                                                                                      // 7662\n\t// Exports                                                                                                            // 7663\n\t// -----------------------------------------------------------------------------------                                // 7664\n                                                                                                                       // 7665\n\tt.render = render;                                                                                                    // 7666\n\tt.destroy = destroy;                                                                                                  // 7667\n\tt.refetchEvents = refetchEvents;                                                                                      // 7668\n\tt.reportEvents = reportEvents;                                                                                        // 7669\n\tt.reportEventChange = reportEventChange;                                                                              // 7670\n\tt.rerenderEvents = renderEvents; // `renderEvents` serves as a rerender. an API method                                // 7671\n\tt.changeView = renderView; // `renderView` will switch to another view                                                // 7672\n\tt.select = select;                                                                                                    // 7673\n\tt.unselect = unselect;                                                                                                // 7674\n\tt.prev = prev;                                                                                                        // 7675\n\tt.next = next;                                                                                                        // 7676\n\tt.prevYear = prevYear;                                                                                                // 7677\n\tt.nextYear = nextYear;                                                                                                // 7678\n\tt.today = today;                                                                                                      // 7679\n\tt.gotoDate = gotoDate;                                                                                                // 7680\n\tt.incrementDate = incrementDate;                                                                                      // 7681\n\tt.zoomTo = zoomTo;                                                                                                    // 7682\n\tt.getDate = getDate;                                                                                                  // 7683\n\tt.getCalendar = getCalendar;                                                                                          // 7684\n\tt.getView = getView;                                                                                                  // 7685\n\tt.option = option;                                                                                                    // 7686\n\tt.trigger = trigger;                                                                                                  // 7687\n                                                                                                                       // 7688\n                                                                                                                       // 7689\n                                                                                                                       // 7690\n\t// Language-data Internals                                                                                            // 7691\n\t// -----------------------------------------------------------------------------------                                // 7692\n\t// Apply overrides to the current language's data                                                                     // 7693\n                                                                                                                       // 7694\n                                                                                                                       // 7695\n\tvar localeData = createObject( // make a cheap copy                                                                   // 7696\n\t\tgetMomentLocaleData(options.lang) // will fall back to en                                                            // 7697\n\t);                                                                                                                    // 7698\n                                                                                                                       // 7699\n\tif (options.monthNames) {                                                                                             // 7700\n\t\tlocaleData._months = options.monthNames;                                                                             // 7701\n\t}                                                                                                                     // 7702\n\tif (options.monthNamesShort) {                                                                                        // 7703\n\t\tlocaleData._monthsShort = options.monthNamesShort;                                                                   // 7704\n\t}                                                                                                                     // 7705\n\tif (options.dayNames) {                                                                                               // 7706\n\t\tlocaleData._weekdays = options.dayNames;                                                                             // 7707\n\t}                                                                                                                     // 7708\n\tif (options.dayNamesShort) {                                                                                          // 7709\n\t\tlocaleData._weekdaysShort = options.dayNamesShort;                                                                   // 7710\n\t}                                                                                                                     // 7711\n\tif (options.firstDay != null) {                                                                                       // 7712\n\t\tvar _week = createObject(localeData._week); // _week: { dow: # }                                                     // 7713\n\t\t_week.dow = options.firstDay;                                                                                        // 7714\n\t\tlocaleData._week = _week;                                                                                            // 7715\n\t}                                                                                                                     // 7716\n                                                                                                                       // 7717\n\t// assign a normalized value, to be used by our .week() moment extension                                              // 7718\n\tlocaleData._fullCalendar_weekCalc = (function(weekCalc) {                                                             // 7719\n\t\tif (typeof weekCalc === 'function') {                                                                                // 7720\n\t\t\treturn weekCalc;                                                                                                    // 7721\n\t\t}                                                                                                                    // 7722\n\t\telse if (weekCalc === 'local') {                                                                                     // 7723\n\t\t\treturn weekCalc;                                                                                                    // 7724\n\t\t}                                                                                                                    // 7725\n\t\telse if (weekCalc === 'iso' || weekCalc === 'ISO') {                                                                 // 7726\n\t\t\treturn 'ISO';                                                                                                       // 7727\n\t\t}                                                                                                                    // 7728\n\t})(options.weekNumberCalculation);                                                                                    // 7729\n                                                                                                                       // 7730\n                                                                                                                       // 7731\n                                                                                                                       // 7732\n\t// Calendar-specific Date Utilities                                                                                   // 7733\n\t// -----------------------------------------------------------------------------------                                // 7734\n                                                                                                                       // 7735\n                                                                                                                       // 7736\n\tt.defaultAllDayEventDuration = moment.duration(options.defaultAllDayEventDuration);                                   // 7737\n\tt.defaultTimedEventDuration = moment.duration(options.defaultTimedEventDuration);                                     // 7738\n                                                                                                                       // 7739\n                                                                                                                       // 7740\n\t// Builds a moment using the settings of the current calendar: timezone and language.                                 // 7741\n\t// Accepts anything the vanilla moment() constructor accepts.                                                         // 7742\n\tt.moment = function() {                                                                                               // 7743\n\t\tvar mom;                                                                                                             // 7744\n                                                                                                                       // 7745\n\t\tif (options.timezone === 'local') {                                                                                  // 7746\n\t\t\tmom = fc.moment.apply(null, arguments);                                                                             // 7747\n                                                                                                                       // 7748\n\t\t\t// Force the moment to be local, because fc.moment doesn't guarantee it.                                            // 7749\n\t\t\tif (mom.hasTime()) { // don't give ambiguously-timed moments a local zone                                           // 7750\n\t\t\t\tmom.local();                                                                                                       // 7751\n\t\t\t}                                                                                                                   // 7752\n\t\t}                                                                                                                    // 7753\n\t\telse if (options.timezone === 'UTC') {                                                                               // 7754\n\t\t\tmom = fc.moment.utc.apply(null, arguments); // process as UTC                                                       // 7755\n\t\t}                                                                                                                    // 7756\n\t\telse {                                                                                                               // 7757\n\t\t\tmom = fc.moment.parseZone.apply(null, arguments); // let the input decide the zone                                  // 7758\n\t\t}                                                                                                                    // 7759\n                                                                                                                       // 7760\n\t\tif ('_locale' in mom) { // moment 2.8 and above                                                                      // 7761\n\t\t\tmom._locale = localeData;                                                                                           // 7762\n\t\t}                                                                                                                    // 7763\n\t\telse { // pre-moment-2.8                                                                                             // 7764\n\t\t\tmom._lang = localeData;                                                                                             // 7765\n\t\t}                                                                                                                    // 7766\n                                                                                                                       // 7767\n\t\treturn mom;                                                                                                          // 7768\n\t};                                                                                                                    // 7769\n                                                                                                                       // 7770\n                                                                                                                       // 7771\n\t// Returns a boolean about whether or not the calendar knows how to calculate                                         // 7772\n\t// the timezone offset of arbitrary dates in the current timezone.                                                    // 7773\n\tt.getIsAmbigTimezone = function() {                                                                                   // 7774\n\t\treturn options.timezone !== 'local' && options.timezone !== 'UTC';                                                   // 7775\n\t};                                                                                                                    // 7776\n                                                                                                                       // 7777\n                                                                                                                       // 7778\n\t// Returns a copy of the given date in the current timezone of it is ambiguously zoned.                               // 7779\n\t// This will also give the date an unambiguous time.                                                                  // 7780\n\tt.rezoneDate = function(date) {                                                                                       // 7781\n\t\treturn t.moment(date.toArray());                                                                                     // 7782\n\t};                                                                                                                    // 7783\n                                                                                                                       // 7784\n                                                                                                                       // 7785\n\t// Returns a moment for the current date, as defined by the client's computer,                                        // 7786\n\t// or overridden by the `now` option.                                                                                 // 7787\n\tt.getNow = function() {                                                                                               // 7788\n\t\tvar now = options.now;                                                                                               // 7789\n\t\tif (typeof now === 'function') {                                                                                     // 7790\n\t\t\tnow = now();                                                                                                        // 7791\n\t\t}                                                                                                                    // 7792\n\t\treturn t.moment(now);                                                                                                // 7793\n\t};                                                                                                                    // 7794\n                                                                                                                       // 7795\n                                                                                                                       // 7796\n\t// Get an event's normalized end date. If not present, calculate it from the defaults.                                // 7797\n\tt.getEventEnd = function(event) {                                                                                     // 7798\n\t\tif (event.end) {                                                                                                     // 7799\n\t\t\treturn event.end.clone();                                                                                           // 7800\n\t\t}                                                                                                                    // 7801\n\t\telse {                                                                                                               // 7802\n\t\t\treturn t.getDefaultEventEnd(event.allDay, event.start);                                                             // 7803\n\t\t}                                                                                                                    // 7804\n\t};                                                                                                                    // 7805\n                                                                                                                       // 7806\n                                                                                                                       // 7807\n\t// Given an event's allDay status and start date, return swhat its fallback end date should be.                       // 7808\n\tt.getDefaultEventEnd = function(allDay, start) { // TODO: rename to computeDefaultEventEnd                            // 7809\n\t\tvar end = start.clone();                                                                                             // 7810\n                                                                                                                       // 7811\n\t\tif (allDay) {                                                                                                        // 7812\n\t\t\tend.stripTime().add(t.defaultAllDayEventDuration);                                                                  // 7813\n\t\t}                                                                                                                    // 7814\n\t\telse {                                                                                                               // 7815\n\t\t\tend.add(t.defaultTimedEventDuration);                                                                               // 7816\n\t\t}                                                                                                                    // 7817\n                                                                                                                       // 7818\n\t\tif (t.getIsAmbigTimezone()) {                                                                                        // 7819\n\t\t\tend.stripZone(); // we don't know what the tzo should be                                                            // 7820\n\t\t}                                                                                                                    // 7821\n                                                                                                                       // 7822\n\t\treturn end;                                                                                                          // 7823\n\t};                                                                                                                    // 7824\n                                                                                                                       // 7825\n                                                                                                                       // 7826\n\t// Produces a human-readable string for the given duration.                                                           // 7827\n\t// Side-effect: changes the locale of the given duration.                                                             // 7828\n\tt.humanizeDuration = function(duration) {                                                                             // 7829\n\t\treturn (duration.locale || duration.lang).call(duration, options.lang) // works moment-pre-2.8                       // 7830\n\t\t\t.humanize();                                                                                                        // 7831\n\t};                                                                                                                    // 7832\n                                                                                                                       // 7833\n                                                                                                                       // 7834\n\t                                                                                                                      // 7835\n\t// Imports                                                                                                            // 7836\n\t// -----------------------------------------------------------------------------------                                // 7837\n                                                                                                                       // 7838\n                                                                                                                       // 7839\n\tEventManager.call(t, options);                                                                                        // 7840\n\tvar isFetchNeeded = t.isFetchNeeded;                                                                                  // 7841\n\tvar fetchEvents = t.fetchEvents;                                                                                      // 7842\n                                                                                                                       // 7843\n                                                                                                                       // 7844\n                                                                                                                       // 7845\n\t// Locals                                                                                                             // 7846\n\t// -----------------------------------------------------------------------------------                                // 7847\n                                                                                                                       // 7848\n                                                                                                                       // 7849\n\tvar _element = element[0];                                                                                            // 7850\n\tvar header;                                                                                                           // 7851\n\tvar headerElement;                                                                                                    // 7852\n\tvar content;                                                                                                          // 7853\n\tvar tm; // for making theme classes                                                                                   // 7854\n\tvar currentView; // NOTE: keep this in sync with this.view                                                            // 7855\n\tvar viewsByType = {}; // holds all instantiated view instances, current or not                                        // 7856\n\tvar suggestedViewHeight;                                                                                              // 7857\n\tvar windowResizeProxy; // wraps the windowResize function                                                             // 7858\n\tvar ignoreWindowResize = 0;                                                                                           // 7859\n\tvar date;                                                                                                             // 7860\n\tvar events = [];                                                                                                      // 7861\n\t                                                                                                                      // 7862\n\t                                                                                                                      // 7863\n\t                                                                                                                      // 7864\n\t// Main Rendering                                                                                                     // 7865\n\t// -----------------------------------------------------------------------------------                                // 7866\n                                                                                                                       // 7867\n                                                                                                                       // 7868\n\tif (options.defaultDate != null) {                                                                                    // 7869\n\t\tdate = t.moment(options.defaultDate);                                                                                // 7870\n\t}                                                                                                                     // 7871\n\telse {                                                                                                                // 7872\n\t\tdate = t.getNow();                                                                                                   // 7873\n\t}                                                                                                                     // 7874\n\t                                                                                                                      // 7875\n\t                                                                                                                      // 7876\n\tfunction render() {                                                                                                   // 7877\n\t\tif (!content) {                                                                                                      // 7878\n\t\t\tinitialRender();                                                                                                    // 7879\n\t\t}                                                                                                                    // 7880\n\t\telse if (elementVisible()) {                                                                                         // 7881\n\t\t\t// mainly for the public API                                                                                        // 7882\n\t\t\tcalcSize();                                                                                                         // 7883\n\t\t\trenderView();                                                                                                       // 7884\n\t\t}                                                                                                                    // 7885\n\t}                                                                                                                     // 7886\n\t                                                                                                                      // 7887\n\t                                                                                                                      // 7888\n\tfunction initialRender() {                                                                                            // 7889\n\t\ttm = options.theme ? 'ui' : 'fc';                                                                                    // 7890\n\t\telement.addClass('fc');                                                                                              // 7891\n                                                                                                                       // 7892\n\t\tif (options.isRTL) {                                                                                                 // 7893\n\t\t\telement.addClass('fc-rtl');                                                                                         // 7894\n\t\t}                                                                                                                    // 7895\n\t\telse {                                                                                                               // 7896\n\t\t\telement.addClass('fc-ltr');                                                                                         // 7897\n\t\t}                                                                                                                    // 7898\n                                                                                                                       // 7899\n\t\tif (options.theme) {                                                                                                 // 7900\n\t\t\telement.addClass('ui-widget');                                                                                      // 7901\n\t\t}                                                                                                                    // 7902\n\t\telse {                                                                                                               // 7903\n\t\t\telement.addClass('fc-unthemed');                                                                                    // 7904\n\t\t}                                                                                                                    // 7905\n                                                                                                                       // 7906\n\t\tcontent = $(\"<div class='fc-view-container'/>\").prependTo(element);                                                  // 7907\n                                                                                                                       // 7908\n\t\theader = t.header = new Header(t, options);                                                                          // 7909\n\t\theaderElement = header.render();                                                                                     // 7910\n\t\tif (headerElement) {                                                                                                 // 7911\n\t\t\telement.prepend(headerElement);                                                                                     // 7912\n\t\t}                                                                                                                    // 7913\n                                                                                                                       // 7914\n\t\trenderView(options.defaultView);                                                                                     // 7915\n                                                                                                                       // 7916\n\t\tif (options.handleWindowResize) {                                                                                    // 7917\n\t\t\twindowResizeProxy = debounce(windowResize, options.windowResizeDelay); // prevents rapid calls                      // 7918\n\t\t\t$(window).resize(windowResizeProxy);                                                                                // 7919\n\t\t}                                                                                                                    // 7920\n\t}                                                                                                                     // 7921\n\t                                                                                                                      // 7922\n\t                                                                                                                      // 7923\n\tfunction destroy() {                                                                                                  // 7924\n                                                                                                                       // 7925\n\t\tif (currentView) {                                                                                                   // 7926\n\t\t\tcurrentView.removeElement();                                                                                        // 7927\n                                                                                                                       // 7928\n\t\t\t// NOTE: don't null-out currentView/t.view in case API methods are called after destroy.                            // 7929\n\t\t\t// It is still the \"current\" view, just not rendered.                                                               // 7930\n\t\t}                                                                                                                    // 7931\n                                                                                                                       // 7932\n\t\theader.destroy();                                                                                                    // 7933\n\t\tcontent.remove();                                                                                                    // 7934\n\t\telement.removeClass('fc fc-ltr fc-rtl fc-unthemed ui-widget');                                                       // 7935\n                                                                                                                       // 7936\n\t\tif (windowResizeProxy) {                                                                                             // 7937\n\t\t\t$(window).unbind('resize', windowResizeProxy);                                                                      // 7938\n\t\t}                                                                                                                    // 7939\n\t}                                                                                                                     // 7940\n\t                                                                                                                      // 7941\n\t                                                                                                                      // 7942\n\tfunction elementVisible() {                                                                                           // 7943\n\t\treturn element.is(':visible');                                                                                       // 7944\n\t}                                                                                                                     // 7945\n\t                                                                                                                      // 7946\n\t                                                                                                                      // 7947\n                                                                                                                       // 7948\n\t// View Rendering                                                                                                     // 7949\n\t// -----------------------------------------------------------------------------------                                // 7950\n                                                                                                                       // 7951\n                                                                                                                       // 7952\n\t// Renders a view because of a date change, view-type change, or for the first time.                                  // 7953\n\t// If not given a viewType, keep the current view but render different dates.                                         // 7954\n\tfunction renderView(viewType) {                                                                                       // 7955\n\t\tignoreWindowResize++;                                                                                                // 7956\n                                                                                                                       // 7957\n\t\t// if viewType is changing, destroy the old view                                                                     // 7958\n\t\tif (currentView && viewType && currentView.type !== viewType) {                                                      // 7959\n\t\t\theader.deactivateButton(currentView.type);                                                                          // 7960\n\t\t\tfreezeContentHeight(); // prevent a scroll jump when view element is removed                                        // 7961\n\t\t\tcurrentView.removeElement();                                                                                        // 7962\n\t\t\tcurrentView = t.view = null;                                                                                        // 7963\n\t\t}                                                                                                                    // 7964\n                                                                                                                       // 7965\n\t\t// if viewType changed, or the view was never created, create a fresh view                                           // 7966\n\t\tif (!currentView && viewType) {                                                                                      // 7967\n\t\t\tcurrentView = t.view =                                                                                              // 7968\n\t\t\t\tviewsByType[viewType] ||                                                                                           // 7969\n\t\t\t\t(viewsByType[viewType] = t.instantiateView(viewType));                                                             // 7970\n                                                                                                                       // 7971\n\t\t\tcurrentView.setElement(                                                                                             // 7972\n\t\t\t\t$(\"<div class='fc-view fc-\" + viewType + \"-view' />\").appendTo(content)                                            // 7973\n\t\t\t);                                                                                                                  // 7974\n\t\t\theader.activateButton(viewType);                                                                                    // 7975\n\t\t}                                                                                                                    // 7976\n                                                                                                                       // 7977\n\t\tif (currentView) {                                                                                                   // 7978\n                                                                                                                       // 7979\n\t\t\t// in case the view should render a period of time that is completely hidden                                        // 7980\n\t\t\tdate = currentView.massageCurrentDate(date);                                                                        // 7981\n                                                                                                                       // 7982\n\t\t\t// render or rerender the view                                                                                      // 7983\n\t\t\tif (                                                                                                                // 7984\n\t\t\t\t!currentView.isDisplayed ||                                                                                        // 7985\n\t\t\t\t!date.isWithin(currentView.intervalStart, currentView.intervalEnd) // implicit date window change                  // 7986\n\t\t\t) {                                                                                                                 // 7987\n\t\t\t\tif (elementVisible()) {                                                                                            // 7988\n                                                                                                                       // 7989\n\t\t\t\t\tfreezeContentHeight();                                                                                            // 7990\n\t\t\t\t\tcurrentView.display(date);                                                                                        // 7991\n\t\t\t\t\tunfreezeContentHeight();                                                                                          // 7992\n                                                                                                                       // 7993\n\t\t\t\t\t// need to do this after View::render, so dates are calculated                                                    // 7994\n\t\t\t\t\tupdateHeaderTitle();                                                                                              // 7995\n\t\t\t\t\tupdateTodayButton();                                                                                              // 7996\n                                                                                                                       // 7997\n\t\t\t\t\tgetAndRenderEvents();                                                                                             // 7998\n\t\t\t\t}                                                                                                                  // 7999\n\t\t\t}                                                                                                                   // 8000\n\t\t}                                                                                                                    // 8001\n                                                                                                                       // 8002\n\t\tunfreezeContentHeight(); // undo any lone freezeContentHeight calls                                                  // 8003\n\t\tignoreWindowResize--;                                                                                                // 8004\n\t}                                                                                                                     // 8005\n                                                                                                                       // 8006\n\t                                                                                                                      // 8007\n                                                                                                                       // 8008\n\t// Resizing                                                                                                           // 8009\n\t// -----------------------------------------------------------------------------------                                // 8010\n                                                                                                                       // 8011\n                                                                                                                       // 8012\n\tt.getSuggestedViewHeight = function() {                                                                               // 8013\n\t\tif (suggestedViewHeight === undefined) {                                                                             // 8014\n\t\t\tcalcSize();                                                                                                         // 8015\n\t\t}                                                                                                                    // 8016\n\t\treturn suggestedViewHeight;                                                                                          // 8017\n\t};                                                                                                                    // 8018\n                                                                                                                       // 8019\n                                                                                                                       // 8020\n\tt.isHeightAuto = function() {                                                                                         // 8021\n\t\treturn options.contentHeight === 'auto' || options.height === 'auto';                                                // 8022\n\t};                                                                                                                    // 8023\n\t                                                                                                                      // 8024\n\t                                                                                                                      // 8025\n\tfunction updateSize(shouldRecalc) {                                                                                   // 8026\n\t\tif (elementVisible()) {                                                                                              // 8027\n                                                                                                                       // 8028\n\t\t\tif (shouldRecalc) {                                                                                                 // 8029\n\t\t\t\t_calcSize();                                                                                                       // 8030\n\t\t\t}                                                                                                                   // 8031\n                                                                                                                       // 8032\n\t\t\tignoreWindowResize++;                                                                                               // 8033\n\t\t\tcurrentView.updateSize(true); // isResize=true. will poll getSuggestedViewHeight() and isHeightAuto()               // 8034\n\t\t\tignoreWindowResize--;                                                                                               // 8035\n                                                                                                                       // 8036\n\t\t\treturn true; // signal success                                                                                      // 8037\n\t\t}                                                                                                                    // 8038\n\t}                                                                                                                     // 8039\n                                                                                                                       // 8040\n                                                                                                                       // 8041\n\tfunction calcSize() {                                                                                                 // 8042\n\t\tif (elementVisible()) {                                                                                              // 8043\n\t\t\t_calcSize();                                                                                                        // 8044\n\t\t}                                                                                                                    // 8045\n\t}                                                                                                                     // 8046\n\t                                                                                                                      // 8047\n\t                                                                                                                      // 8048\n\tfunction _calcSize() { // assumes elementVisible                                                                      // 8049\n\t\tif (typeof options.contentHeight === 'number') { // exists and not 'auto'                                            // 8050\n\t\t\tsuggestedViewHeight = options.contentHeight;                                                                        // 8051\n\t\t}                                                                                                                    // 8052\n\t\telse if (typeof options.height === 'number') { // exists and not 'auto'                                              // 8053\n\t\t\tsuggestedViewHeight = options.height - (headerElement ? headerElement.outerHeight(true) : 0);                       // 8054\n\t\t}                                                                                                                    // 8055\n\t\telse {                                                                                                               // 8056\n\t\t\tsuggestedViewHeight = Math.round(content.width() / Math.max(options.aspectRatio, .5));                              // 8057\n\t\t}                                                                                                                    // 8058\n\t}                                                                                                                     // 8059\n\t                                                                                                                      // 8060\n\t                                                                                                                      // 8061\n\tfunction windowResize(ev) {                                                                                           // 8062\n\t\tif (                                                                                                                 // 8063\n\t\t\t!ignoreWindowResize &&                                                                                              // 8064\n\t\t\tev.target === window && // so we don't process jqui \"resize\" events that have bubbled up                            // 8065\n\t\t\tcurrentView.start // view has already been rendered                                                                 // 8066\n\t\t) {                                                                                                                  // 8067\n\t\t\tif (updateSize(true)) {                                                                                             // 8068\n\t\t\t\tcurrentView.trigger('windowResize', _element);                                                                     // 8069\n\t\t\t}                                                                                                                   // 8070\n\t\t}                                                                                                                    // 8071\n\t}                                                                                                                     // 8072\n\t                                                                                                                      // 8073\n\t                                                                                                                      // 8074\n\t                                                                                                                      // 8075\n\t/* Event Fetching/Rendering                                                                                           // 8076\n\t-----------------------------------------------------------------------------*/                                       // 8077\n\t// TODO: going forward, most of this stuff should be directly handled by the view                                     // 8078\n                                                                                                                       // 8079\n                                                                                                                       // 8080\n\tfunction refetchEvents() { // can be called as an API method                                                          // 8081\n\t\tdestroyEvents(); // so that events are cleared before user starts waiting for AJAX                                   // 8082\n\t\tfetchAndRenderEvents();                                                                                              // 8083\n\t}                                                                                                                     // 8084\n                                                                                                                       // 8085\n                                                                                                                       // 8086\n\tfunction renderEvents() { // destroys old events if previously rendered                                               // 8087\n\t\tif (elementVisible()) {                                                                                              // 8088\n\t\t\tfreezeContentHeight();                                                                                              // 8089\n\t\t\tcurrentView.displayEvents(events);                                                                                  // 8090\n\t\t\tunfreezeContentHeight();                                                                                            // 8091\n\t\t}                                                                                                                    // 8092\n\t}                                                                                                                     // 8093\n                                                                                                                       // 8094\n                                                                                                                       // 8095\n\tfunction destroyEvents() {                                                                                            // 8096\n\t\tfreezeContentHeight();                                                                                               // 8097\n\t\tcurrentView.clearEvents();                                                                                           // 8098\n\t\tunfreezeContentHeight();                                                                                             // 8099\n\t}                                                                                                                     // 8100\n\t                                                                                                                      // 8101\n                                                                                                                       // 8102\n\tfunction getAndRenderEvents() {                                                                                       // 8103\n\t\tif (!options.lazyFetching || isFetchNeeded(currentView.start, currentView.end)) {                                    // 8104\n\t\t\tfetchAndRenderEvents();                                                                                             // 8105\n\t\t}                                                                                                                    // 8106\n\t\telse {                                                                                                               // 8107\n\t\t\trenderEvents();                                                                                                     // 8108\n\t\t}                                                                                                                    // 8109\n\t}                                                                                                                     // 8110\n                                                                                                                       // 8111\n                                                                                                                       // 8112\n\tfunction fetchAndRenderEvents() {                                                                                     // 8113\n\t\tfetchEvents(currentView.start, currentView.end);                                                                     // 8114\n\t\t\t// ... will call reportEvents                                                                                       // 8115\n\t\t\t// ... which will call renderEvents                                                                                 // 8116\n\t}                                                                                                                     // 8117\n                                                                                                                       // 8118\n\t                                                                                                                      // 8119\n\t// called when event data arrives                                                                                     // 8120\n\tfunction reportEvents(_events) {                                                                                      // 8121\n\t\tevents = _events;                                                                                                    // 8122\n\t\trenderEvents();                                                                                                      // 8123\n\t}                                                                                                                     // 8124\n                                                                                                                       // 8125\n                                                                                                                       // 8126\n\t// called when a single event's data has been changed                                                                 // 8127\n\tfunction reportEventChange() {                                                                                        // 8128\n\t\trenderEvents();                                                                                                      // 8129\n\t}                                                                                                                     // 8130\n                                                                                                                       // 8131\n                                                                                                                       // 8132\n                                                                                                                       // 8133\n\t/* Header Updating                                                                                                    // 8134\n\t-----------------------------------------------------------------------------*/                                       // 8135\n                                                                                                                       // 8136\n                                                                                                                       // 8137\n\tfunction updateHeaderTitle() {                                                                                        // 8138\n\t\theader.updateTitle(currentView.title);                                                                               // 8139\n\t}                                                                                                                     // 8140\n                                                                                                                       // 8141\n                                                                                                                       // 8142\n\tfunction updateTodayButton() {                                                                                        // 8143\n\t\tvar now = t.getNow();                                                                                                // 8144\n\t\tif (now.isWithin(currentView.intervalStart, currentView.intervalEnd)) {                                              // 8145\n\t\t\theader.disableButton('today');                                                                                      // 8146\n\t\t}                                                                                                                    // 8147\n\t\telse {                                                                                                               // 8148\n\t\t\theader.enableButton('today');                                                                                       // 8149\n\t\t}                                                                                                                    // 8150\n\t}                                                                                                                     // 8151\n\t                                                                                                                      // 8152\n                                                                                                                       // 8153\n                                                                                                                       // 8154\n\t/* Selection                                                                                                          // 8155\n\t-----------------------------------------------------------------------------*/                                       // 8156\n\t                                                                                                                      // 8157\n                                                                                                                       // 8158\n\tfunction select(start, end) {                                                                                         // 8159\n                                                                                                                       // 8160\n\t\tstart = t.moment(start);                                                                                             // 8161\n\t\tif (end) {                                                                                                           // 8162\n\t\t\tend = t.moment(end);                                                                                                // 8163\n\t\t}                                                                                                                    // 8164\n\t\telse if (start.hasTime()) {                                                                                          // 8165\n\t\t\tend = start.clone().add(t.defaultTimedEventDuration);                                                               // 8166\n\t\t}                                                                                                                    // 8167\n\t\telse {                                                                                                               // 8168\n\t\t\tend = start.clone().add(t.defaultAllDayEventDuration);                                                              // 8169\n\t\t}                                                                                                                    // 8170\n                                                                                                                       // 8171\n\t\tcurrentView.select({ start: start, end: end }); // accepts a range                                                   // 8172\n\t}                                                                                                                     // 8173\n\t                                                                                                                      // 8174\n                                                                                                                       // 8175\n\tfunction unselect() { // safe to be called before renderView                                                          // 8176\n\t\tif (currentView) {                                                                                                   // 8177\n\t\t\tcurrentView.unselect();                                                                                             // 8178\n\t\t}                                                                                                                    // 8179\n\t}                                                                                                                     // 8180\n\t                                                                                                                      // 8181\n\t                                                                                                                      // 8182\n\t                                                                                                                      // 8183\n\t/* Date                                                                                                               // 8184\n\t-----------------------------------------------------------------------------*/                                       // 8185\n\t                                                                                                                      // 8186\n\t                                                                                                                      // 8187\n\tfunction prev() {                                                                                                     // 8188\n\t\tdate = currentView.computePrevDate(date);                                                                            // 8189\n\t\trenderView();                                                                                                        // 8190\n\t}                                                                                                                     // 8191\n\t                                                                                                                      // 8192\n\t                                                                                                                      // 8193\n\tfunction next() {                                                                                                     // 8194\n\t\tdate = currentView.computeNextDate(date);                                                                            // 8195\n\t\trenderView();                                                                                                        // 8196\n\t}                                                                                                                     // 8197\n\t                                                                                                                      // 8198\n\t                                                                                                                      // 8199\n\tfunction prevYear() {                                                                                                 // 8200\n\t\tdate.add(-1, 'years');                                                                                               // 8201\n\t\trenderView();                                                                                                        // 8202\n\t}                                                                                                                     // 8203\n\t                                                                                                                      // 8204\n\t                                                                                                                      // 8205\n\tfunction nextYear() {                                                                                                 // 8206\n\t\tdate.add(1, 'years');                                                                                                // 8207\n\t\trenderView();                                                                                                        // 8208\n\t}                                                                                                                     // 8209\n\t                                                                                                                      // 8210\n\t                                                                                                                      // 8211\n\tfunction today() {                                                                                                    // 8212\n\t\tdate = t.getNow();                                                                                                   // 8213\n\t\trenderView();                                                                                                        // 8214\n\t}                                                                                                                     // 8215\n\t                                                                                                                      // 8216\n\t                                                                                                                      // 8217\n\tfunction gotoDate(dateInput) {                                                                                        // 8218\n\t\tdate = t.moment(dateInput);                                                                                          // 8219\n\t\trenderView();                                                                                                        // 8220\n\t}                                                                                                                     // 8221\n\t                                                                                                                      // 8222\n\t                                                                                                                      // 8223\n\tfunction incrementDate(delta) {                                                                                       // 8224\n\t\tdate.add(moment.duration(delta));                                                                                    // 8225\n\t\trenderView();                                                                                                        // 8226\n\t}                                                                                                                     // 8227\n                                                                                                                       // 8228\n                                                                                                                       // 8229\n\t// Forces navigation to a view for the given date.                                                                    // 8230\n\t// `viewType` can be a specific view name or a generic one like \"week\" or \"day\".                                      // 8231\n\tfunction zoomTo(newDate, viewType) {                                                                                  // 8232\n\t\tvar spec;                                                                                                            // 8233\n                                                                                                                       // 8234\n\t\tviewType = viewType || 'day'; // day is default zoom                                                                 // 8235\n\t\tspec = t.getViewSpec(viewType) || t.getUnitViewSpec(viewType);                                                       // 8236\n                                                                                                                       // 8237\n\t\tdate = newDate;                                                                                                      // 8238\n\t\trenderView(spec ? spec.type : null);                                                                                 // 8239\n\t}                                                                                                                     // 8240\n\t                                                                                                                      // 8241\n\t                                                                                                                      // 8242\n\tfunction getDate() {                                                                                                  // 8243\n\t\treturn date.clone();                                                                                                 // 8244\n\t}                                                                                                                     // 8245\n                                                                                                                       // 8246\n                                                                                                                       // 8247\n                                                                                                                       // 8248\n\t/* Height \"Freezing\"                                                                                                  // 8249\n\t-----------------------------------------------------------------------------*/                                       // 8250\n\t// TODO: move this into the view                                                                                      // 8251\n                                                                                                                       // 8252\n                                                                                                                       // 8253\n\tfunction freezeContentHeight() {                                                                                      // 8254\n\t\tcontent.css({                                                                                                        // 8255\n\t\t\twidth: '100%',                                                                                                      // 8256\n\t\t\theight: content.height(),                                                                                           // 8257\n\t\t\toverflow: 'hidden'                                                                                                  // 8258\n\t\t});                                                                                                                  // 8259\n\t}                                                                                                                     // 8260\n                                                                                                                       // 8261\n                                                                                                                       // 8262\n\tfunction unfreezeContentHeight() {                                                                                    // 8263\n\t\tcontent.css({                                                                                                        // 8264\n\t\t\twidth: '',                                                                                                          // 8265\n\t\t\theight: '',                                                                                                         // 8266\n\t\t\toverflow: ''                                                                                                        // 8267\n\t\t});                                                                                                                  // 8268\n\t}                                                                                                                     // 8269\n\t                                                                                                                      // 8270\n\t                                                                                                                      // 8271\n\t                                                                                                                      // 8272\n\t/* Misc                                                                                                               // 8273\n\t-----------------------------------------------------------------------------*/                                       // 8274\n\t                                                                                                                      // 8275\n                                                                                                                       // 8276\n\tfunction getCalendar() {                                                                                              // 8277\n\t\treturn t;                                                                                                            // 8278\n\t}                                                                                                                     // 8279\n                                                                                                                       // 8280\n\t                                                                                                                      // 8281\n\tfunction getView() {                                                                                                  // 8282\n\t\treturn currentView;                                                                                                  // 8283\n\t}                                                                                                                     // 8284\n\t                                                                                                                      // 8285\n\t                                                                                                                      // 8286\n\tfunction option(name, value) {                                                                                        // 8287\n\t\tif (value === undefined) {                                                                                           // 8288\n\t\t\treturn options[name];                                                                                               // 8289\n\t\t}                                                                                                                    // 8290\n\t\tif (name == 'height' || name == 'contentHeight' || name == 'aspectRatio') {                                          // 8291\n\t\t\toptions[name] = value;                                                                                              // 8292\n\t\t\tupdateSize(true); // true = allow recalculation of height                                                           // 8293\n\t\t}                                                                                                                    // 8294\n\t}                                                                                                                     // 8295\n\t                                                                                                                      // 8296\n\t                                                                                                                      // 8297\n\tfunction trigger(name, thisObj) {                                                                                     // 8298\n\t\tif (options[name]) {                                                                                                 // 8299\n\t\t\treturn options[name].apply(                                                                                         // 8300\n\t\t\t\tthisObj || _element,                                                                                               // 8301\n\t\t\t\tArray.prototype.slice.call(arguments, 2)                                                                           // 8302\n\t\t\t);                                                                                                                  // 8303\n\t\t}                                                                                                                    // 8304\n\t}                                                                                                                     // 8305\n                                                                                                                       // 8306\n}                                                                                                                      // 8307\n                                                                                                                       // 8308\n;;                                                                                                                     // 8309\n                                                                                                                       // 8310\nCalendar.defaults = {                                                                                                  // 8311\n                                                                                                                       // 8312\n\ttitleRangeSeparator: ' \\u2014 ', // emphasized dash                                                                   // 8313\n\tmonthYearFormat: 'MMMM YYYY', // required for en. other languages rely on datepicker computable option                // 8314\n                                                                                                                       // 8315\n\tdefaultTimedEventDuration: '02:00:00',                                                                                // 8316\n\tdefaultAllDayEventDuration: { days: 1 },                                                                              // 8317\n\tforceEventDuration: false,                                                                                            // 8318\n\tnextDayThreshold: '09:00:00', // 9am                                                                                  // 8319\n                                                                                                                       // 8320\n\t// display                                                                                                            // 8321\n\tdefaultView: 'month',                                                                                                 // 8322\n\taspectRatio: 1.35,                                                                                                    // 8323\n\theader: {                                                                                                             // 8324\n\t\tleft: 'title',                                                                                                       // 8325\n\t\tcenter: '',                                                                                                          // 8326\n\t\tright: 'today prev,next'                                                                                             // 8327\n\t},                                                                                                                    // 8328\n\tweekends: true,                                                                                                       // 8329\n\tweekNumbers: false,                                                                                                   // 8330\n                                                                                                                       // 8331\n\tweekNumberTitle: 'W',                                                                                                 // 8332\n\tweekNumberCalculation: 'local',                                                                                       // 8333\n\t                                                                                                                      // 8334\n\t//editable: false,                                                                                                    // 8335\n\t                                                                                                                      // 8336\n\t// event ajax                                                                                                         // 8337\n\tlazyFetching: true,                                                                                                   // 8338\n\tstartParam: 'start',                                                                                                  // 8339\n\tendParam: 'end',                                                                                                      // 8340\n\ttimezoneParam: 'timezone',                                                                                            // 8341\n                                                                                                                       // 8342\n\ttimezone: false,                                                                                                      // 8343\n                                                                                                                       // 8344\n\t//allDayDefault: undefined,                                                                                           // 8345\n                                                                                                                       // 8346\n\t// locale                                                                                                             // 8347\n\tisRTL: false,                                                                                                         // 8348\n\tbuttonText: {                                                                                                         // 8349\n\t\tprev: \"prev\",                                                                                                        // 8350\n\t\tnext: \"next\",                                                                                                        // 8351\n\t\tprevYear: \"prev year\",                                                                                               // 8352\n\t\tnextYear: \"next year\",                                                                                               // 8353\n\t\tyear: 'year', // TODO: locale files need to specify this                                                             // 8354\n\t\ttoday: 'today',                                                                                                      // 8355\n\t\tmonth: 'month',                                                                                                      // 8356\n\t\tweek: 'week',                                                                                                        // 8357\n\t\tday: 'day'                                                                                                           // 8358\n\t},                                                                                                                    // 8359\n                                                                                                                       // 8360\n\tbuttonIcons: {                                                                                                        // 8361\n\t\tprev: 'left-single-arrow',                                                                                           // 8362\n\t\tnext: 'right-single-arrow',                                                                                          // 8363\n\t\tprevYear: 'left-double-arrow',                                                                                       // 8364\n\t\tnextYear: 'right-double-arrow'                                                                                       // 8365\n\t},                                                                                                                    // 8366\n\t                                                                                                                      // 8367\n\t// jquery-ui theming                                                                                                  // 8368\n\ttheme: false,                                                                                                         // 8369\n\tthemeButtonIcons: {                                                                                                   // 8370\n\t\tprev: 'circle-triangle-w',                                                                                           // 8371\n\t\tnext: 'circle-triangle-e',                                                                                           // 8372\n\t\tprevYear: 'seek-prev',                                                                                               // 8373\n\t\tnextYear: 'seek-next'                                                                                                // 8374\n\t},                                                                                                                    // 8375\n                                                                                                                       // 8376\n\t//eventResizableFromStart: false,                                                                                     // 8377\n\tdragOpacity: .75,                                                                                                     // 8378\n\tdragRevertDuration: 500,                                                                                              // 8379\n\tdragScroll: true,                                                                                                     // 8380\n\t                                                                                                                      // 8381\n\t//selectable: false,                                                                                                  // 8382\n\tunselectAuto: true,                                                                                                   // 8383\n\t                                                                                                                      // 8384\n\tdropAccept: '*',                                                                                                      // 8385\n                                                                                                                       // 8386\n\teventLimit: false,                                                                                                    // 8387\n\teventLimitText: 'more',                                                                                               // 8388\n\teventLimitClick: 'popover',                                                                                           // 8389\n\tdayPopoverFormat: 'LL',                                                                                               // 8390\n\t                                                                                                                      // 8391\n\thandleWindowResize: true,                                                                                             // 8392\n\twindowResizeDelay: 200 // milliseconds before an updateSize happens                                                   // 8393\n\t                                                                                                                      // 8394\n};                                                                                                                     // 8395\n                                                                                                                       // 8396\n                                                                                                                       // 8397\nCalendar.englishDefaults = { // used by lang.js                                                                        // 8398\n\tdayPopoverFormat: 'dddd, MMMM D'                                                                                      // 8399\n};                                                                                                                     // 8400\n                                                                                                                       // 8401\n                                                                                                                       // 8402\nCalendar.rtlDefaults = { // right-to-left defaults                                                                     // 8403\n\theader: { // TODO: smarter solution (first/center/last ?)                                                             // 8404\n\t\tleft: 'next,prev today',                                                                                             // 8405\n\t\tcenter: '',                                                                                                          // 8406\n\t\tright: 'title'                                                                                                       // 8407\n\t},                                                                                                                    // 8408\n\tbuttonIcons: {                                                                                                        // 8409\n\t\tprev: 'right-single-arrow',                                                                                          // 8410\n\t\tnext: 'left-single-arrow',                                                                                           // 8411\n\t\tprevYear: 'right-double-arrow',                                                                                      // 8412\n\t\tnextYear: 'left-double-arrow'                                                                                        // 8413\n\t},                                                                                                                    // 8414\n\tthemeButtonIcons: {                                                                                                   // 8415\n\t\tprev: 'circle-triangle-e',                                                                                           // 8416\n\t\tnext: 'circle-triangle-w',                                                                                           // 8417\n\t\tnextYear: 'seek-prev',                                                                                               // 8418\n\t\tprevYear: 'seek-next'                                                                                                // 8419\n\t}                                                                                                                     // 8420\n};                                                                                                                     // 8421\n                                                                                                                       // 8422\n;;                                                                                                                     // 8423\n                                                                                                                       // 8424\nvar langOptionHash = fc.langs = {}; // initialize and expose                                                           // 8425\n                                                                                                                       // 8426\n                                                                                                                       // 8427\n// TODO: document the structure and ordering of a FullCalendar lang file                                               // 8428\n// TODO: rename everything \"lang\" to \"locale\", like what the moment project did                                        // 8429\n                                                                                                                       // 8430\n                                                                                                                       // 8431\n// Initialize jQuery UI datepicker translations while using some of the translations                                   // 8432\n// Will set this as the default language for datepicker.                                                               // 8433\nfc.datepickerLang = function(langCode, dpLangCode, dpOptions) {                                                        // 8434\n                                                                                                                       // 8435\n\t// get the FullCalendar internal option hash for this language. create if necessary                                   // 8436\n\tvar fcOptions = langOptionHash[langCode] || (langOptionHash[langCode] = {});                                          // 8437\n                                                                                                                       // 8438\n\t// transfer some simple options from datepicker to fc                                                                 // 8439\n\tfcOptions.isRTL = dpOptions.isRTL;                                                                                    // 8440\n\tfcOptions.weekNumberTitle = dpOptions.weekHeader;                                                                     // 8441\n                                                                                                                       // 8442\n\t// compute some more complex options from datepicker                                                                  // 8443\n\t$.each(dpComputableOptions, function(name, func) {                                                                    // 8444\n\t\tfcOptions[name] = func(dpOptions);                                                                                   // 8445\n\t});                                                                                                                   // 8446\n                                                                                                                       // 8447\n\t// is jQuery UI Datepicker is on the page?                                                                            // 8448\n\tif ($.datepicker) {                                                                                                   // 8449\n                                                                                                                       // 8450\n\t\t// Register the language data.                                                                                       // 8451\n\t\t// FullCalendar and MomentJS use language codes like \"pt-br\" but Datepicker                                          // 8452\n\t\t// does it like \"pt-BR\" or if it doesn't have the language, maybe just \"pt\".                                         // 8453\n\t\t// Make an alias so the language can be referenced either way.                                                       // 8454\n\t\t$.datepicker.regional[dpLangCode] =                                                                                  // 8455\n\t\t\t$.datepicker.regional[langCode] = // alias                                                                          // 8456\n\t\t\t\tdpOptions;                                                                                                         // 8457\n                                                                                                                       // 8458\n\t\t// Alias 'en' to the default language data. Do this every time.                                                      // 8459\n\t\t$.datepicker.regional.en = $.datepicker.regional[''];                                                                // 8460\n                                                                                                                       // 8461\n\t\t// Set as Datepicker's global defaults.                                                                              // 8462\n\t\t$.datepicker.setDefaults(dpOptions);                                                                                 // 8463\n\t}                                                                                                                     // 8464\n};                                                                                                                     // 8465\n                                                                                                                       // 8466\n                                                                                                                       // 8467\n// Sets FullCalendar-specific translations. Will set the language as the global default.                               // 8468\nfc.lang = function(langCode, newFcOptions) {                                                                           // 8469\n\tvar fcOptions;                                                                                                        // 8470\n\tvar momOptions;                                                                                                       // 8471\n                                                                                                                       // 8472\n\t// get the FullCalendar internal option hash for this language. create if necessary                                   // 8473\n\tfcOptions = langOptionHash[langCode] || (langOptionHash[langCode] = {});                                              // 8474\n                                                                                                                       // 8475\n\t// provided new options for this language? merge them in                                                              // 8476\n\tif (newFcOptions) {                                                                                                   // 8477\n\t\tfcOptions = langOptionHash[langCode] = mergeOptions(fcOptions, newFcOptions);                                        // 8478\n\t}                                                                                                                     // 8479\n                                                                                                                       // 8480\n\t// compute language options that weren't defined.                                                                     // 8481\n\t// always do this. newFcOptions can be undefined when initializing from i18n file,                                    // 8482\n\t// so no way to tell if this is an initialization or a default-setting.                                               // 8483\n\tmomOptions = getMomentLocaleData(langCode); // will fall back to en                                                   // 8484\n\t$.each(momComputableOptions, function(name, func) {                                                                   // 8485\n\t\tif (fcOptions[name] == null) {                                                                                       // 8486\n\t\t\tfcOptions[name] = func(momOptions, fcOptions);                                                                      // 8487\n\t\t}                                                                                                                    // 8488\n\t});                                                                                                                   // 8489\n                                                                                                                       // 8490\n\t// set it as the default language for FullCalendar                                                                    // 8491\n\tCalendar.defaults.lang = langCode;                                                                                    // 8492\n};                                                                                                                     // 8493\n                                                                                                                       // 8494\n                                                                                                                       // 8495\n// NOTE: can't guarantee any of these computations will run because not every language has datepicker                  // 8496\n// configs, so make sure there are English fallbacks for these in the defaults file.                                   // 8497\nvar dpComputableOptions = {                                                                                            // 8498\n                                                                                                                       // 8499\n\tbuttonText: function(dpOptions) {                                                                                     // 8500\n\t\treturn {                                                                                                             // 8501\n\t\t\t// the translations sometimes wrongly contain HTML entities                                                         // 8502\n\t\t\tprev: stripHtmlEntities(dpOptions.prevText),                                                                        // 8503\n\t\t\tnext: stripHtmlEntities(dpOptions.nextText),                                                                        // 8504\n\t\t\ttoday: stripHtmlEntities(dpOptions.currentText)                                                                     // 8505\n\t\t};                                                                                                                   // 8506\n\t},                                                                                                                    // 8507\n                                                                                                                       // 8508\n\t// Produces format strings like \"MMMM YYYY\" -> \"September 2014\"                                                       // 8509\n\tmonthYearFormat: function(dpOptions) {                                                                                // 8510\n\t\treturn dpOptions.showMonthAfterYear ?                                                                                // 8511\n\t\t\t'YYYY[' + dpOptions.yearSuffix + '] MMMM' :                                                                         // 8512\n\t\t\t'MMMM YYYY[' + dpOptions.yearSuffix + ']';                                                                          // 8513\n\t}                                                                                                                     // 8514\n                                                                                                                       // 8515\n};                                                                                                                     // 8516\n                                                                                                                       // 8517\nvar momComputableOptions = {                                                                                           // 8518\n                                                                                                                       // 8519\n\t// Produces format strings like \"ddd M/D\" -> \"Fri 9/15\"                                                               // 8520\n\tdayOfMonthFormat: function(momOptions, fcOptions) {                                                                   // 8521\n\t\tvar format = momOptions.longDateFormat('l'); // for the format like \"M/D/YYYY\"                                       // 8522\n                                                                                                                       // 8523\n\t\t// strip the year off the edge, as well as other misc non-whitespace chars                                           // 8524\n\t\tformat = format.replace(/^Y+[^\\w\\s]*|[^\\w\\s]*Y+$/g, '');                                                             // 8525\n                                                                                                                       // 8526\n\t\tif (fcOptions.isRTL) {                                                                                               // 8527\n\t\t\tformat += ' ddd'; // for RTL, add day-of-week to end                                                                // 8528\n\t\t}                                                                                                                    // 8529\n\t\telse {                                                                                                               // 8530\n\t\t\tformat = 'ddd ' + format; // for LTR, add day-of-week to beginning                                                  // 8531\n\t\t}                                                                                                                    // 8532\n\t\treturn format;                                                                                                       // 8533\n\t},                                                                                                                    // 8534\n                                                                                                                       // 8535\n\t// Produces format strings like \"h:mma\" -> \"6:00pm\"                                                                   // 8536\n\tmediumTimeFormat: function(momOptions) { // can't be called `timeFormat` because collides with option                 // 8537\n\t\treturn momOptions.longDateFormat('LT')                                                                               // 8538\n\t\t\t.replace(/\\s*a$/i, 'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand                          // 8539\n\t},                                                                                                                    // 8540\n                                                                                                                       // 8541\n\t// Produces format strings like \"h(:mm)a\" -> \"6pm\" / \"6:30pm\"                                                         // 8542\n\tsmallTimeFormat: function(momOptions) {                                                                               // 8543\n\t\treturn momOptions.longDateFormat('LT')                                                                               // 8544\n\t\t\t.replace(':mm', '(:mm)')                                                                                            // 8545\n\t\t\t.replace(/(\\Wmm)$/, '($1)') // like above, but for foreign langs                                                    // 8546\n\t\t\t.replace(/\\s*a$/i, 'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand                          // 8547\n\t},                                                                                                                    // 8548\n                                                                                                                       // 8549\n\t// Produces format strings like \"h(:mm)t\" -> \"6p\" / \"6:30p\"                                                           // 8550\n\textraSmallTimeFormat: function(momOptions) {                                                                          // 8551\n\t\treturn momOptions.longDateFormat('LT')                                                                               // 8552\n\t\t\t.replace(':mm', '(:mm)')                                                                                            // 8553\n\t\t\t.replace(/(\\Wmm)$/, '($1)') // like above, but for foreign langs                                                    // 8554\n\t\t\t.replace(/\\s*a$/i, 't'); // convert to AM/PM/am/pm to lowercase one-letter. remove any spaces beforehand            // 8555\n\t},                                                                                                                    // 8556\n                                                                                                                       // 8557\n\t// Produces format strings like \"ha\" / \"H\" -> \"6pm\" / \"18\"                                                            // 8558\n\thourFormat: function(momOptions) {                                                                                    // 8559\n\t\treturn momOptions.longDateFormat('LT')                                                                               // 8560\n\t\t\t.replace(':mm', '')                                                                                                 // 8561\n\t\t\t.replace(/(\\Wmm)$/, '') // like above, but for foreign langs                                                        // 8562\n\t\t\t.replace(/\\s*a$/i, 'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand                          // 8563\n\t},                                                                                                                    // 8564\n                                                                                                                       // 8565\n\t// Produces format strings like \"h:mm\" -> \"6:30\" (with no AM/PM)                                                      // 8566\n\tnoMeridiemTimeFormat: function(momOptions) {                                                                          // 8567\n\t\treturn momOptions.longDateFormat('LT')                                                                               // 8568\n\t\t\t.replace(/\\s*a$/i, ''); // remove trailing AM/PM                                                                    // 8569\n\t}                                                                                                                     // 8570\n                                                                                                                       // 8571\n};                                                                                                                     // 8572\n                                                                                                                       // 8573\n                                                                                                                       // 8574\n// options that should be computed off live calendar options (considers override options)                              // 8575\nvar instanceComputableOptions = { // TODO: best place for this? related to lang?                                       // 8576\n                                                                                                                       // 8577\n\t// Produces format strings for results like \"Mo 16\"                                                                   // 8578\n\tsmallDayDateFormat: function(options) {                                                                               // 8579\n\t\treturn options.isRTL ?                                                                                               // 8580\n\t\t\t'D dd' :                                                                                                            // 8581\n\t\t\t'dd D';                                                                                                             // 8582\n\t},                                                                                                                    // 8583\n                                                                                                                       // 8584\n\t// Produces format strings for results like \"Wk 5\"                                                                    // 8585\n\tweekFormat: function(options) {                                                                                       // 8586\n\t\treturn options.isRTL ?                                                                                               // 8587\n\t\t\t'w[ ' + options.weekNumberTitle + ']' :                                                                             // 8588\n\t\t\t'[' + options.weekNumberTitle + ' ]w';                                                                              // 8589\n\t},                                                                                                                    // 8590\n                                                                                                                       // 8591\n\t// Produces format strings for results like \"Wk5\"                                                                     // 8592\n\tsmallWeekFormat: function(options) {                                                                                  // 8593\n\t\treturn options.isRTL ?                                                                                               // 8594\n\t\t\t'w[' + options.weekNumberTitle + ']' :                                                                              // 8595\n\t\t\t'[' + options.weekNumberTitle + ']w';                                                                               // 8596\n\t}                                                                                                                     // 8597\n                                                                                                                       // 8598\n};                                                                                                                     // 8599\n                                                                                                                       // 8600\nfunction populateInstanceComputableOptions(options) {                                                                  // 8601\n\t$.each(instanceComputableOptions, function(name, func) {                                                              // 8602\n\t\tif (options[name] == null) {                                                                                         // 8603\n\t\t\toptions[name] = func(options);                                                                                      // 8604\n\t\t}                                                                                                                    // 8605\n\t});                                                                                                                   // 8606\n}                                                                                                                      // 8607\n                                                                                                                       // 8608\n                                                                                                                       // 8609\n// Returns moment's internal locale data. If doesn't exist, returns English.                                           // 8610\n// Works with moment-pre-2.8                                                                                           // 8611\nfunction getMomentLocaleData(langCode) {                                                                               // 8612\n\tvar func = moment.localeData || moment.langData;                                                                      // 8613\n\treturn func.call(moment, langCode) ||                                                                                 // 8614\n\t\tfunc.call(moment, 'en'); // the newer localData could return null, so fall back to en                                // 8615\n}                                                                                                                      // 8616\n                                                                                                                       // 8617\n                                                                                                                       // 8618\n// Initialize English by forcing computation of moment-derived options.                                                // 8619\n// Also, sets it as the default.                                                                                       // 8620\nfc.lang('en', Calendar.englishDefaults);                                                                               // 8621\n                                                                                                                       // 8622\n;;                                                                                                                     // 8623\n                                                                                                                       // 8624\n/* Top toolbar area with buttons and title                                                                             // 8625\n----------------------------------------------------------------------------------------------------------------------*/\n// TODO: rename all header-related things to \"toolbar\"                                                                 // 8627\n                                                                                                                       // 8628\nfunction Header(calendar, options) {                                                                                   // 8629\n\tvar t = this;                                                                                                         // 8630\n\t                                                                                                                      // 8631\n\t// exports                                                                                                            // 8632\n\tt.render = render;                                                                                                    // 8633\n\tt.destroy = destroy;                                                                                                  // 8634\n\tt.updateTitle = updateTitle;                                                                                          // 8635\n\tt.activateButton = activateButton;                                                                                    // 8636\n\tt.deactivateButton = deactivateButton;                                                                                // 8637\n\tt.disableButton = disableButton;                                                                                      // 8638\n\tt.enableButton = enableButton;                                                                                        // 8639\n\tt.getViewsWithButtons = getViewsWithButtons;                                                                          // 8640\n\t                                                                                                                      // 8641\n\t// locals                                                                                                             // 8642\n\tvar el = $();                                                                                                         // 8643\n\tvar viewsWithButtons = [];                                                                                            // 8644\n\tvar tm;                                                                                                               // 8645\n                                                                                                                       // 8646\n                                                                                                                       // 8647\n\tfunction render() {                                                                                                   // 8648\n\t\tvar sections = options.header;                                                                                       // 8649\n                                                                                                                       // 8650\n\t\ttm = options.theme ? 'ui' : 'fc';                                                                                    // 8651\n                                                                                                                       // 8652\n\t\tif (sections) {                                                                                                      // 8653\n\t\t\tel = $(\"<div class='fc-toolbar'/>\")                                                                                 // 8654\n\t\t\t\t.append(renderSection('left'))                                                                                     // 8655\n\t\t\t\t.append(renderSection('right'))                                                                                    // 8656\n\t\t\t\t.append(renderSection('center'))                                                                                   // 8657\n\t\t\t\t.append('<div class=\"fc-clear\"/>');                                                                                // 8658\n                                                                                                                       // 8659\n\t\t\treturn el;                                                                                                          // 8660\n\t\t}                                                                                                                    // 8661\n\t}                                                                                                                     // 8662\n\t                                                                                                                      // 8663\n\t                                                                                                                      // 8664\n\tfunction destroy() {                                                                                                  // 8665\n\t\tel.remove();                                                                                                         // 8666\n\t}                                                                                                                     // 8667\n\t                                                                                                                      // 8668\n\t                                                                                                                      // 8669\n\tfunction renderSection(position) {                                                                                    // 8670\n\t\tvar sectionEl = $('<div class=\"fc-' + position + '\"/>');                                                             // 8671\n\t\tvar buttonStr = options.header[position];                                                                            // 8672\n                                                                                                                       // 8673\n\t\tif (buttonStr) {                                                                                                     // 8674\n\t\t\t$.each(buttonStr.split(' '), function(i) {                                                                          // 8675\n\t\t\t\tvar groupChildren = $();                                                                                           // 8676\n\t\t\t\tvar isOnlyButtons = true;                                                                                          // 8677\n\t\t\t\tvar groupEl;                                                                                                       // 8678\n                                                                                                                       // 8679\n\t\t\t\t$.each(this.split(','), function(j, buttonName) {                                                                  // 8680\n\t\t\t\t\tvar viewSpec;                                                                                                     // 8681\n\t\t\t\t\tvar buttonClick;                                                                                                  // 8682\n\t\t\t\t\tvar overrideText; // text explicitly set by calendar's constructor options. overcomes icons                       // 8683\n\t\t\t\t\tvar defaultText;                                                                                                  // 8684\n\t\t\t\t\tvar themeIcon;                                                                                                    // 8685\n\t\t\t\t\tvar normalIcon;                                                                                                   // 8686\n\t\t\t\t\tvar innerHtml;                                                                                                    // 8687\n\t\t\t\t\tvar classes;                                                                                                      // 8688\n\t\t\t\t\tvar button;                                                                                                       // 8689\n                                                                                                                       // 8690\n\t\t\t\t\tif (buttonName == 'title') {                                                                                      // 8691\n\t\t\t\t\t\tgroupChildren = groupChildren.add($('<h2>&nbsp;</h2>')); // we always want it to take up height                  // 8692\n\t\t\t\t\t\tisOnlyButtons = false;                                                                                           // 8693\n\t\t\t\t\t}                                                                                                                 // 8694\n\t\t\t\t\telse {                                                                                                            // 8695\n\t\t\t\t\t\tviewSpec = calendar.getViewSpec(buttonName);                                                                     // 8696\n                                                                                                                       // 8697\n\t\t\t\t\t\tif (viewSpec) {                                                                                                  // 8698\n\t\t\t\t\t\t\tbuttonClick = function() {                                                                                      // 8699\n\t\t\t\t\t\t\t\tcalendar.changeView(buttonName);                                                                               // 8700\n\t\t\t\t\t\t\t};                                                                                                              // 8701\n\t\t\t\t\t\t\tviewsWithButtons.push(buttonName);                                                                              // 8702\n\t\t\t\t\t\t\toverrideText = viewSpec.buttonTextOverride;                                                                     // 8703\n\t\t\t\t\t\t\tdefaultText = viewSpec.buttonTextDefault;                                                                       // 8704\n\t\t\t\t\t\t}                                                                                                                // 8705\n\t\t\t\t\t\telse if (calendar[buttonName]) { // a calendar method                                                            // 8706\n\t\t\t\t\t\t\tbuttonClick = function() {                                                                                      // 8707\n\t\t\t\t\t\t\t\tcalendar[buttonName]();                                                                                        // 8708\n\t\t\t\t\t\t\t};                                                                                                              // 8709\n\t\t\t\t\t\t\toverrideText = (calendar.overrides.buttonText || {})[buttonName];                                               // 8710\n\t\t\t\t\t\t\tdefaultText = options.buttonText[buttonName]; // everything else is considered default                          // 8711\n\t\t\t\t\t\t}                                                                                                                // 8712\n                                                                                                                       // 8713\n\t\t\t\t\t\tif (buttonClick) {                                                                                               // 8714\n                                                                                                                       // 8715\n\t\t\t\t\t\t\tthemeIcon = options.themeButtonIcons[buttonName];                                                               // 8716\n\t\t\t\t\t\t\tnormalIcon = options.buttonIcons[buttonName];                                                                   // 8717\n                                                                                                                       // 8718\n\t\t\t\t\t\t\tif (overrideText) {                                                                                             // 8719\n\t\t\t\t\t\t\t\tinnerHtml = htmlEscape(overrideText);                                                                          // 8720\n\t\t\t\t\t\t\t}                                                                                                               // 8721\n\t\t\t\t\t\t\telse if (themeIcon && options.theme) {                                                                          // 8722\n\t\t\t\t\t\t\t\tinnerHtml = \"<span class='ui-icon ui-icon-\" + themeIcon + \"'></span>\";                                         // 8723\n\t\t\t\t\t\t\t}                                                                                                               // 8724\n\t\t\t\t\t\t\telse if (normalIcon && !options.theme) {                                                                        // 8725\n\t\t\t\t\t\t\t\tinnerHtml = \"<span class='fc-icon fc-icon-\" + normalIcon + \"'></span>\";                                        // 8726\n\t\t\t\t\t\t\t}                                                                                                               // 8727\n\t\t\t\t\t\t\telse {                                                                                                          // 8728\n\t\t\t\t\t\t\t\tinnerHtml = htmlEscape(defaultText);                                                                           // 8729\n\t\t\t\t\t\t\t}                                                                                                               // 8730\n                                                                                                                       // 8731\n\t\t\t\t\t\t\tclasses = [                                                                                                     // 8732\n\t\t\t\t\t\t\t\t'fc-' + buttonName + '-button',                                                                                // 8733\n\t\t\t\t\t\t\t\ttm + '-button',                                                                                                // 8734\n\t\t\t\t\t\t\t\ttm + '-state-default'                                                                                          // 8735\n\t\t\t\t\t\t\t];                                                                                                              // 8736\n                                                                                                                       // 8737\n\t\t\t\t\t\t\tbutton = $( // type=\"button\" so that it doesn't submit a form                                                   // 8738\n\t\t\t\t\t\t\t\t'<button type=\"button\" class=\"' + classes.join(' ') + '\">' +                                                   // 8739\n\t\t\t\t\t\t\t\t\tinnerHtml +                                                                                                   // 8740\n\t\t\t\t\t\t\t\t'</button>'                                                                                                    // 8741\n\t\t\t\t\t\t\t\t)                                                                                                              // 8742\n\t\t\t\t\t\t\t\t.click(function() {                                                                                            // 8743\n\t\t\t\t\t\t\t\t\t// don't process clicks for disabled buttons                                                                  // 8744\n\t\t\t\t\t\t\t\t\tif (!button.hasClass(tm + '-state-disabled')) {                                                               // 8745\n                                                                                                                       // 8746\n\t\t\t\t\t\t\t\t\t\tbuttonClick();                                                                                               // 8747\n                                                                                                                       // 8748\n\t\t\t\t\t\t\t\t\t\t// after the click action, if the button becomes the \"active\" tab, or disabled,                              // 8749\n\t\t\t\t\t\t\t\t\t\t// it should never have a hover class, so remove it now.                                                     // 8750\n\t\t\t\t\t\t\t\t\t\tif (                                                                                                         // 8751\n\t\t\t\t\t\t\t\t\t\t\tbutton.hasClass(tm + '-state-active') ||                                                                    // 8752\n\t\t\t\t\t\t\t\t\t\t\tbutton.hasClass(tm + '-state-disabled')                                                                     // 8753\n\t\t\t\t\t\t\t\t\t\t) {                                                                                                          // 8754\n\t\t\t\t\t\t\t\t\t\t\tbutton.removeClass(tm + '-state-hover');                                                                    // 8755\n\t\t\t\t\t\t\t\t\t\t}                                                                                                            // 8756\n\t\t\t\t\t\t\t\t\t}                                                                                                             // 8757\n\t\t\t\t\t\t\t\t})                                                                                                             // 8758\n\t\t\t\t\t\t\t\t.mousedown(function() {                                                                                        // 8759\n\t\t\t\t\t\t\t\t\t// the *down* effect (mouse pressed in).                                                                      // 8760\n\t\t\t\t\t\t\t\t\t// only on buttons that are not the \"active\" tab, or disabled                                                 // 8761\n\t\t\t\t\t\t\t\t\tbutton                                                                                                        // 8762\n\t\t\t\t\t\t\t\t\t\t.not('.' + tm + '-state-active')                                                                             // 8763\n\t\t\t\t\t\t\t\t\t\t.not('.' + tm + '-state-disabled')                                                                           // 8764\n\t\t\t\t\t\t\t\t\t\t.addClass(tm + '-state-down');                                                                               // 8765\n\t\t\t\t\t\t\t\t})                                                                                                             // 8766\n\t\t\t\t\t\t\t\t.mouseup(function() {                                                                                          // 8767\n\t\t\t\t\t\t\t\t\t// undo the *down* effect                                                                                     // 8768\n\t\t\t\t\t\t\t\t\tbutton.removeClass(tm + '-state-down');                                                                       // 8769\n\t\t\t\t\t\t\t\t})                                                                                                             // 8770\n\t\t\t\t\t\t\t\t.hover(                                                                                                        // 8771\n\t\t\t\t\t\t\t\t\tfunction() {                                                                                                  // 8772\n\t\t\t\t\t\t\t\t\t\t// the *hover* effect.                                                                                       // 8773\n\t\t\t\t\t\t\t\t\t\t// only on buttons that are not the \"active\" tab, or disabled                                                // 8774\n\t\t\t\t\t\t\t\t\t\tbutton                                                                                                       // 8775\n\t\t\t\t\t\t\t\t\t\t\t.not('.' + tm + '-state-active')                                                                            // 8776\n\t\t\t\t\t\t\t\t\t\t\t.not('.' + tm + '-state-disabled')                                                                          // 8777\n\t\t\t\t\t\t\t\t\t\t\t.addClass(tm + '-state-hover');                                                                             // 8778\n\t\t\t\t\t\t\t\t\t},                                                                                                            // 8779\n\t\t\t\t\t\t\t\t\tfunction() {                                                                                                  // 8780\n\t\t\t\t\t\t\t\t\t\t// undo the *hover* effect                                                                                   // 8781\n\t\t\t\t\t\t\t\t\t\tbutton                                                                                                       // 8782\n\t\t\t\t\t\t\t\t\t\t\t.removeClass(tm + '-state-hover')                                                                           // 8783\n\t\t\t\t\t\t\t\t\t\t\t.removeClass(tm + '-state-down'); // if mouseleave happens before mouseup                                   // 8784\n\t\t\t\t\t\t\t\t\t}                                                                                                             // 8785\n\t\t\t\t\t\t\t\t);                                                                                                             // 8786\n                                                                                                                       // 8787\n\t\t\t\t\t\t\tgroupChildren = groupChildren.add(button);                                                                      // 8788\n\t\t\t\t\t\t}                                                                                                                // 8789\n\t\t\t\t\t}                                                                                                                 // 8790\n\t\t\t\t});                                                                                                                // 8791\n                                                                                                                       // 8792\n\t\t\t\tif (isOnlyButtons) {                                                                                               // 8793\n\t\t\t\t\tgroupChildren                                                                                                     // 8794\n\t\t\t\t\t\t.first().addClass(tm + '-corner-left').end()                                                                     // 8795\n\t\t\t\t\t\t.last().addClass(tm + '-corner-right').end();                                                                    // 8796\n\t\t\t\t}                                                                                                                  // 8797\n                                                                                                                       // 8798\n\t\t\t\tif (groupChildren.length > 1) {                                                                                    // 8799\n\t\t\t\t\tgroupEl = $('<div/>');                                                                                            // 8800\n\t\t\t\t\tif (isOnlyButtons) {                                                                                              // 8801\n\t\t\t\t\t\tgroupEl.addClass('fc-button-group');                                                                             // 8802\n\t\t\t\t\t}                                                                                                                 // 8803\n\t\t\t\t\tgroupEl.append(groupChildren);                                                                                    // 8804\n\t\t\t\t\tsectionEl.append(groupEl);                                                                                        // 8805\n\t\t\t\t}                                                                                                                  // 8806\n\t\t\t\telse {                                                                                                             // 8807\n\t\t\t\t\tsectionEl.append(groupChildren); // 1 or 0 children                                                               // 8808\n\t\t\t\t}                                                                                                                  // 8809\n\t\t\t});                                                                                                                 // 8810\n\t\t}                                                                                                                    // 8811\n                                                                                                                       // 8812\n\t\treturn sectionEl;                                                                                                    // 8813\n\t}                                                                                                                     // 8814\n\t                                                                                                                      // 8815\n\t                                                                                                                      // 8816\n\tfunction updateTitle(text) {                                                                                          // 8817\n\t\tel.find('h2').text(text);                                                                                            // 8818\n\t}                                                                                                                     // 8819\n\t                                                                                                                      // 8820\n\t                                                                                                                      // 8821\n\tfunction activateButton(buttonName) {                                                                                 // 8822\n\t\tel.find('.fc-' + buttonName + '-button')                                                                             // 8823\n\t\t\t.addClass(tm + '-state-active');                                                                                    // 8824\n\t}                                                                                                                     // 8825\n\t                                                                                                                      // 8826\n\t                                                                                                                      // 8827\n\tfunction deactivateButton(buttonName) {                                                                               // 8828\n\t\tel.find('.fc-' + buttonName + '-button')                                                                             // 8829\n\t\t\t.removeClass(tm + '-state-active');                                                                                 // 8830\n\t}                                                                                                                     // 8831\n\t                                                                                                                      // 8832\n\t                                                                                                                      // 8833\n\tfunction disableButton(buttonName) {                                                                                  // 8834\n\t\tel.find('.fc-' + buttonName + '-button')                                                                             // 8835\n\t\t\t.attr('disabled', 'disabled')                                                                                       // 8836\n\t\t\t.addClass(tm + '-state-disabled');                                                                                  // 8837\n\t}                                                                                                                     // 8838\n\t                                                                                                                      // 8839\n\t                                                                                                                      // 8840\n\tfunction enableButton(buttonName) {                                                                                   // 8841\n\t\tel.find('.fc-' + buttonName + '-button')                                                                             // 8842\n\t\t\t.removeAttr('disabled')                                                                                             // 8843\n\t\t\t.removeClass(tm + '-state-disabled');                                                                               // 8844\n\t}                                                                                                                     // 8845\n                                                                                                                       // 8846\n                                                                                                                       // 8847\n\tfunction getViewsWithButtons() {                                                                                      // 8848\n\t\treturn viewsWithButtons;                                                                                             // 8849\n\t}                                                                                                                     // 8850\n                                                                                                                       // 8851\n}                                                                                                                      // 8852\n                                                                                                                       // 8853\n;;                                                                                                                     // 8854\n                                                                                                                       // 8855\nfc.sourceNormalizers = [];                                                                                             // 8856\nfc.sourceFetchers = [];                                                                                                // 8857\n                                                                                                                       // 8858\nvar ajaxDefaults = {                                                                                                   // 8859\n\tdataType: 'json',                                                                                                     // 8860\n\tcache: false                                                                                                          // 8861\n};                                                                                                                     // 8862\n                                                                                                                       // 8863\nvar eventGUID = 1;                                                                                                     // 8864\n                                                                                                                       // 8865\n                                                                                                                       // 8866\nfunction EventManager(options) { // assumed to be a calendar                                                           // 8867\n\tvar t = this;                                                                                                         // 8868\n\t                                                                                                                      // 8869\n\t                                                                                                                      // 8870\n\t// exports                                                                                                            // 8871\n\tt.isFetchNeeded = isFetchNeeded;                                                                                      // 8872\n\tt.fetchEvents = fetchEvents;                                                                                          // 8873\n\tt.addEventSource = addEventSource;                                                                                    // 8874\n\tt.removeEventSource = removeEventSource;                                                                              // 8875\n\tt.updateEvent = updateEvent;                                                                                          // 8876\n\tt.renderEvent = renderEvent;                                                                                          // 8877\n\tt.removeEvents = removeEvents;                                                                                        // 8878\n\tt.clientEvents = clientEvents;                                                                                        // 8879\n\tt.mutateEvent = mutateEvent;                                                                                          // 8880\n\tt.normalizeEventRange = normalizeEventRange;                                                                          // 8881\n\tt.normalizeEventRangeTimes = normalizeEventRangeTimes;                                                                // 8882\n\tt.ensureVisibleEventRange = ensureVisibleEventRange;                                                                  // 8883\n\t                                                                                                                      // 8884\n\t                                                                                                                      // 8885\n\t// imports                                                                                                            // 8886\n\tvar trigger = t.trigger;                                                                                              // 8887\n\tvar getView = t.getView;                                                                                              // 8888\n\tvar reportEvents = t.reportEvents;                                                                                    // 8889\n\t                                                                                                                      // 8890\n\t                                                                                                                      // 8891\n\t// locals                                                                                                             // 8892\n\tvar stickySource = { events: [] };                                                                                    // 8893\n\tvar sources = [ stickySource ];                                                                                       // 8894\n\tvar rangeStart, rangeEnd;                                                                                             // 8895\n\tvar currentFetchID = 0;                                                                                               // 8896\n\tvar pendingSourceCnt = 0;                                                                                             // 8897\n\tvar loadingLevel = 0;                                                                                                 // 8898\n\tvar cache = []; // holds events that have already been expanded                                                       // 8899\n                                                                                                                       // 8900\n                                                                                                                       // 8901\n\t$.each(                                                                                                               // 8902\n\t\t(options.events ? [ options.events ] : []).concat(options.eventSources || []),                                       // 8903\n\t\tfunction(i, sourceInput) {                                                                                           // 8904\n\t\t\tvar source = buildEventSource(sourceInput);                                                                         // 8905\n\t\t\tif (source) {                                                                                                       // 8906\n\t\t\t\tsources.push(source);                                                                                              // 8907\n\t\t\t}                                                                                                                   // 8908\n\t\t}                                                                                                                    // 8909\n\t);                                                                                                                    // 8910\n\t                                                                                                                      // 8911\n\t                                                                                                                      // 8912\n\t                                                                                                                      // 8913\n\t/* Fetching                                                                                                           // 8914\n\t-----------------------------------------------------------------------------*/                                       // 8915\n\t                                                                                                                      // 8916\n\t                                                                                                                      // 8917\n\tfunction isFetchNeeded(start, end) {                                                                                  // 8918\n\t\treturn !rangeStart || // nothing has been fetched yet?                                                               // 8919\n\t\t\t// or, a part of the new range is outside of the old range? (after normalizing)                                     // 8920\n\t\t\tstart.clone().stripZone() < rangeStart.clone().stripZone() ||                                                       // 8921\n\t\t\tend.clone().stripZone() > rangeEnd.clone().stripZone();                                                             // 8922\n\t}                                                                                                                     // 8923\n\t                                                                                                                      // 8924\n\t                                                                                                                      // 8925\n\tfunction fetchEvents(start, end) {                                                                                    // 8926\n\t\trangeStart = start;                                                                                                  // 8927\n\t\trangeEnd = end;                                                                                                      // 8928\n\t\tcache = [];                                                                                                          // 8929\n\t\tvar fetchID = ++currentFetchID;                                                                                      // 8930\n\t\tvar len = sources.length;                                                                                            // 8931\n\t\tpendingSourceCnt = len;                                                                                              // 8932\n\t\tfor (var i=0; i<len; i++) {                                                                                          // 8933\n\t\t\tfetchEventSource(sources[i], fetchID);                                                                              // 8934\n\t\t}                                                                                                                    // 8935\n\t}                                                                                                                     // 8936\n\t                                                                                                                      // 8937\n\t                                                                                                                      // 8938\n\tfunction fetchEventSource(source, fetchID) {                                                                          // 8939\n\t\t_fetchEventSource(source, function(eventInputs) {                                                                    // 8940\n\t\t\tvar isArraySource = $.isArray(source.events);                                                                       // 8941\n\t\t\tvar i, eventInput;                                                                                                  // 8942\n\t\t\tvar abstractEvent;                                                                                                  // 8943\n                                                                                                                       // 8944\n\t\t\tif (fetchID == currentFetchID) {                                                                                    // 8945\n                                                                                                                       // 8946\n\t\t\t\tif (eventInputs) {                                                                                                 // 8947\n\t\t\t\t\tfor (i = 0; i < eventInputs.length; i++) {                                                                        // 8948\n\t\t\t\t\t\teventInput = eventInputs[i];                                                                                     // 8949\n                                                                                                                       // 8950\n\t\t\t\t\t\tif (isArraySource) { // array sources have already been convert to Event Objects                                 // 8951\n\t\t\t\t\t\t\tabstractEvent = eventInput;                                                                                     // 8952\n\t\t\t\t\t\t}                                                                                                                // 8953\n\t\t\t\t\t\telse {                                                                                                           // 8954\n\t\t\t\t\t\t\tabstractEvent = buildEventFromInput(eventInput, source);                                                        // 8955\n\t\t\t\t\t\t}                                                                                                                // 8956\n                                                                                                                       // 8957\n\t\t\t\t\t\tif (abstractEvent) { // not false (an invalid event)                                                             // 8958\n\t\t\t\t\t\t\tcache.push.apply(                                                                                               // 8959\n\t\t\t\t\t\t\t\tcache,                                                                                                         // 8960\n\t\t\t\t\t\t\t\texpandEvent(abstractEvent) // add individual expanded events to the cache                                      // 8961\n\t\t\t\t\t\t\t);                                                                                                              // 8962\n\t\t\t\t\t\t}                                                                                                                // 8963\n\t\t\t\t\t}                                                                                                                 // 8964\n\t\t\t\t}                                                                                                                  // 8965\n                                                                                                                       // 8966\n\t\t\t\tpendingSourceCnt--;                                                                                                // 8967\n\t\t\t\tif (!pendingSourceCnt) {                                                                                           // 8968\n\t\t\t\t\treportEvents(cache);                                                                                              // 8969\n\t\t\t\t}                                                                                                                  // 8970\n\t\t\t}                                                                                                                   // 8971\n\t\t});                                                                                                                  // 8972\n\t}                                                                                                                     // 8973\n\t                                                                                                                      // 8974\n\t                                                                                                                      // 8975\n\tfunction _fetchEventSource(source, callback) {                                                                        // 8976\n\t\tvar i;                                                                                                               // 8977\n\t\tvar fetchers = fc.sourceFetchers;                                                                                    // 8978\n\t\tvar res;                                                                                                             // 8979\n                                                                                                                       // 8980\n\t\tfor (i=0; i<fetchers.length; i++) {                                                                                  // 8981\n\t\t\tres = fetchers[i].call(                                                                                             // 8982\n\t\t\t\tt, // this, the Calendar object                                                                                    // 8983\n\t\t\t\tsource,                                                                                                            // 8984\n\t\t\t\trangeStart.clone(),                                                                                                // 8985\n\t\t\t\trangeEnd.clone(),                                                                                                  // 8986\n\t\t\t\toptions.timezone,                                                                                                  // 8987\n\t\t\t\tcallback                                                                                                           // 8988\n\t\t\t);                                                                                                                  // 8989\n                                                                                                                       // 8990\n\t\t\tif (res === true) {                                                                                                 // 8991\n\t\t\t\t// the fetcher is in charge. made its own async request                                                            // 8992\n\t\t\t\treturn;                                                                                                            // 8993\n\t\t\t}                                                                                                                   // 8994\n\t\t\telse if (typeof res == 'object') {                                                                                  // 8995\n\t\t\t\t// the fetcher returned a new source. process it                                                                   // 8996\n\t\t\t\t_fetchEventSource(res, callback);                                                                                  // 8997\n\t\t\t\treturn;                                                                                                            // 8998\n\t\t\t}                                                                                                                   // 8999\n\t\t}                                                                                                                    // 9000\n                                                                                                                       // 9001\n\t\tvar events = source.events;                                                                                          // 9002\n\t\tif (events) {                                                                                                        // 9003\n\t\t\tif ($.isFunction(events)) {                                                                                         // 9004\n\t\t\t\tpushLoading();                                                                                                     // 9005\n\t\t\t\tevents.call(                                                                                                       // 9006\n\t\t\t\t\tt, // this, the Calendar object                                                                                   // 9007\n\t\t\t\t\trangeStart.clone(),                                                                                               // 9008\n\t\t\t\t\trangeEnd.clone(),                                                                                                 // 9009\n\t\t\t\t\toptions.timezone,                                                                                                 // 9010\n\t\t\t\t\tfunction(events) {                                                                                                // 9011\n\t\t\t\t\t\tcallback(events);                                                                                                // 9012\n\t\t\t\t\t\tpopLoading();                                                                                                    // 9013\n\t\t\t\t\t}                                                                                                                 // 9014\n\t\t\t\t);                                                                                                                 // 9015\n\t\t\t}                                                                                                                   // 9016\n\t\t\telse if ($.isArray(events)) {                                                                                       // 9017\n\t\t\t\tcallback(events);                                                                                                  // 9018\n\t\t\t}                                                                                                                   // 9019\n\t\t\telse {                                                                                                              // 9020\n\t\t\t\tcallback();                                                                                                        // 9021\n\t\t\t}                                                                                                                   // 9022\n\t\t}else{                                                                                                               // 9023\n\t\t\tvar url = source.url;                                                                                               // 9024\n\t\t\tif (url) {                                                                                                          // 9025\n\t\t\t\tvar success = source.success;                                                                                      // 9026\n\t\t\t\tvar error = source.error;                                                                                          // 9027\n\t\t\t\tvar complete = source.complete;                                                                                    // 9028\n                                                                                                                       // 9029\n\t\t\t\t// retrieve any outbound GET/POST $.ajax data from the options                                                     // 9030\n\t\t\t\tvar customData;                                                                                                    // 9031\n\t\t\t\tif ($.isFunction(source.data)) {                                                                                   // 9032\n\t\t\t\t\t// supplied as a function that returns a key/value object                                                         // 9033\n\t\t\t\t\tcustomData = source.data();                                                                                       // 9034\n\t\t\t\t}                                                                                                                  // 9035\n\t\t\t\telse {                                                                                                             // 9036\n\t\t\t\t\t// supplied as a straight key/value object                                                                        // 9037\n\t\t\t\t\tcustomData = source.data;                                                                                         // 9038\n\t\t\t\t}                                                                                                                  // 9039\n                                                                                                                       // 9040\n\t\t\t\t// use a copy of the custom data so we can modify the parameters                                                   // 9041\n\t\t\t\t// and not affect the passed-in object.                                                                            // 9042\n\t\t\t\tvar data = $.extend({}, customData || {});                                                                         // 9043\n                                                                                                                       // 9044\n\t\t\t\tvar startParam = firstDefined(source.startParam, options.startParam);                                              // 9045\n\t\t\t\tvar endParam = firstDefined(source.endParam, options.endParam);                                                    // 9046\n\t\t\t\tvar timezoneParam = firstDefined(source.timezoneParam, options.timezoneParam);                                     // 9047\n                                                                                                                       // 9048\n\t\t\t\tif (startParam) {                                                                                                  // 9049\n\t\t\t\t\tdata[startParam] = rangeStart.format();                                                                           // 9050\n\t\t\t\t}                                                                                                                  // 9051\n\t\t\t\tif (endParam) {                                                                                                    // 9052\n\t\t\t\t\tdata[endParam] = rangeEnd.format();                                                                               // 9053\n\t\t\t\t}                                                                                                                  // 9054\n\t\t\t\tif (options.timezone && options.timezone != 'local') {                                                             // 9055\n\t\t\t\t\tdata[timezoneParam] = options.timezone;                                                                           // 9056\n\t\t\t\t}                                                                                                                  // 9057\n                                                                                                                       // 9058\n\t\t\t\tpushLoading();                                                                                                     // 9059\n\t\t\t\t$.ajax($.extend({}, ajaxDefaults, source, {                                                                        // 9060\n\t\t\t\t\tdata: data,                                                                                                       // 9061\n\t\t\t\t\tsuccess: function(events) {                                                                                       // 9062\n\t\t\t\t\t\tevents = events || [];                                                                                           // 9063\n\t\t\t\t\t\tvar res = applyAll(success, this, arguments);                                                                    // 9064\n\t\t\t\t\t\tif ($.isArray(res)) {                                                                                            // 9065\n\t\t\t\t\t\t\tevents = res;                                                                                                   // 9066\n\t\t\t\t\t\t}                                                                                                                // 9067\n\t\t\t\t\t\tcallback(events);                                                                                                // 9068\n\t\t\t\t\t},                                                                                                                // 9069\n\t\t\t\t\terror: function() {                                                                                               // 9070\n\t\t\t\t\t\tapplyAll(error, this, arguments);                                                                                // 9071\n\t\t\t\t\t\tcallback();                                                                                                      // 9072\n\t\t\t\t\t},                                                                                                                // 9073\n\t\t\t\t\tcomplete: function() {                                                                                            // 9074\n\t\t\t\t\t\tapplyAll(complete, this, arguments);                                                                             // 9075\n\t\t\t\t\t\tpopLoading();                                                                                                    // 9076\n\t\t\t\t\t}                                                                                                                 // 9077\n\t\t\t\t}));                                                                                                               // 9078\n\t\t\t}else{                                                                                                              // 9079\n\t\t\t\tcallback();                                                                                                        // 9080\n\t\t\t}                                                                                                                   // 9081\n\t\t}                                                                                                                    // 9082\n\t}                                                                                                                     // 9083\n\t                                                                                                                      // 9084\n\t                                                                                                                      // 9085\n\t                                                                                                                      // 9086\n\t/* Sources                                                                                                            // 9087\n\t-----------------------------------------------------------------------------*/                                       // 9088\n\t                                                                                                                      // 9089\n                                                                                                                       // 9090\n\tfunction addEventSource(sourceInput) {                                                                                // 9091\n\t\tvar source = buildEventSource(sourceInput);                                                                          // 9092\n\t\tif (source) {                                                                                                        // 9093\n\t\t\tsources.push(source);                                                                                               // 9094\n\t\t\tpendingSourceCnt++;                                                                                                 // 9095\n\t\t\tfetchEventSource(source, currentFetchID); // will eventually call reportEvents                                      // 9096\n\t\t}                                                                                                                    // 9097\n\t}                                                                                                                     // 9098\n                                                                                                                       // 9099\n                                                                                                                       // 9100\n\tfunction buildEventSource(sourceInput) { // will return undefined if invalid source                                   // 9101\n\t\tvar normalizers = fc.sourceNormalizers;                                                                              // 9102\n\t\tvar source;                                                                                                          // 9103\n\t\tvar i;                                                                                                               // 9104\n                                                                                                                       // 9105\n\t\tif ($.isFunction(sourceInput) || $.isArray(sourceInput)) {                                                           // 9106\n\t\t\tsource = { events: sourceInput };                                                                                   // 9107\n\t\t}                                                                                                                    // 9108\n\t\telse if (typeof sourceInput === 'string') {                                                                          // 9109\n\t\t\tsource = { url: sourceInput };                                                                                      // 9110\n\t\t}                                                                                                                    // 9111\n\t\telse if (typeof sourceInput === 'object') {                                                                          // 9112\n\t\t\tsource = $.extend({}, sourceInput); // shallow copy                                                                 // 9113\n\t\t}                                                                                                                    // 9114\n                                                                                                                       // 9115\n\t\tif (source) {                                                                                                        // 9116\n                                                                                                                       // 9117\n\t\t\t// TODO: repeat code, same code for event classNames                                                                // 9118\n\t\t\tif (source.className) {                                                                                             // 9119\n\t\t\t\tif (typeof source.className === 'string') {                                                                        // 9120\n\t\t\t\t\tsource.className = source.className.split(/\\s+/);                                                                 // 9121\n\t\t\t\t}                                                                                                                  // 9122\n\t\t\t\t// otherwise, assumed to be an array                                                                               // 9123\n\t\t\t}                                                                                                                   // 9124\n\t\t\telse {                                                                                                              // 9125\n\t\t\t\tsource.className = [];                                                                                             // 9126\n\t\t\t}                                                                                                                   // 9127\n                                                                                                                       // 9128\n\t\t\t// for array sources, we convert to standard Event Objects up front                                                 // 9129\n\t\t\tif ($.isArray(source.events)) {                                                                                     // 9130\n\t\t\t\tsource.origArray = source.events; // for removeEventSource                                                         // 9131\n\t\t\t\tsource.events = $.map(source.events, function(eventInput) {                                                        // 9132\n\t\t\t\t\treturn buildEventFromInput(eventInput, source);                                                                   // 9133\n\t\t\t\t});                                                                                                                // 9134\n\t\t\t}                                                                                                                   // 9135\n                                                                                                                       // 9136\n\t\t\tfor (i=0; i<normalizers.length; i++) {                                                                              // 9137\n\t\t\t\tnormalizers[i].call(t, source);                                                                                    // 9138\n\t\t\t}                                                                                                                   // 9139\n                                                                                                                       // 9140\n\t\t\treturn source;                                                                                                      // 9141\n\t\t}                                                                                                                    // 9142\n\t}                                                                                                                     // 9143\n                                                                                                                       // 9144\n                                                                                                                       // 9145\n\tfunction removeEventSource(source) {                                                                                  // 9146\n\t\tsources = $.grep(sources, function(src) {                                                                            // 9147\n\t\t\treturn !isSourcesEqual(src, source);                                                                                // 9148\n\t\t});                                                                                                                  // 9149\n\t\t// remove all client events from that source                                                                         // 9150\n\t\tcache = $.grep(cache, function(e) {                                                                                  // 9151\n\t\t\treturn !isSourcesEqual(e.source, source);                                                                           // 9152\n\t\t});                                                                                                                  // 9153\n\t\treportEvents(cache);                                                                                                 // 9154\n\t}                                                                                                                     // 9155\n                                                                                                                       // 9156\n                                                                                                                       // 9157\n\tfunction isSourcesEqual(source1, source2) {                                                                           // 9158\n\t\treturn source1 && source2 && getSourcePrimitive(source1) == getSourcePrimitive(source2);                             // 9159\n\t}                                                                                                                     // 9160\n                                                                                                                       // 9161\n                                                                                                                       // 9162\n\tfunction getSourcePrimitive(source) {                                                                                 // 9163\n\t\treturn (                                                                                                             // 9164\n\t\t\t(typeof source === 'object') ? // a normalized event source?                                                        // 9165\n\t\t\t\t(source.origArray || source.googleCalendarId || source.url || source.events) : // get the primitive                // 9166\n\t\t\t\tnull                                                                                                               // 9167\n\t\t) ||                                                                                                                 // 9168\n\t\tsource; // the given argument *is* the primitive                                                                     // 9169\n\t}                                                                                                                     // 9170\n\t                                                                                                                      // 9171\n\t                                                                                                                      // 9172\n\t                                                                                                                      // 9173\n\t/* Manipulation                                                                                                       // 9174\n\t-----------------------------------------------------------------------------*/                                       // 9175\n                                                                                                                       // 9176\n                                                                                                                       // 9177\n\t// Only ever called from the externally-facing API                                                                    // 9178\n\tfunction updateEvent(event) {                                                                                         // 9179\n                                                                                                                       // 9180\n\t\t// massage start/end values, even if date string values                                                              // 9181\n\t\tevent.start = t.moment(event.start);                                                                                 // 9182\n\t\tif (event.end) {                                                                                                     // 9183\n\t\t\tevent.end = t.moment(event.end);                                                                                    // 9184\n\t\t}                                                                                                                    // 9185\n\t\telse {                                                                                                               // 9186\n\t\t\tevent.end = null;                                                                                                   // 9187\n\t\t}                                                                                                                    // 9188\n                                                                                                                       // 9189\n\t\tmutateEvent(event, getMiscEventProps(event)); // will handle start/end/allDay normalization                          // 9190\n\t\treportEvents(cache); // reports event modifications (so we can redraw)                                               // 9191\n\t}                                                                                                                     // 9192\n                                                                                                                       // 9193\n                                                                                                                       // 9194\n\t// Returns a hash of misc event properties that should be copied over to related events.                              // 9195\n\tfunction getMiscEventProps(event) {                                                                                   // 9196\n\t\tvar props = {};                                                                                                      // 9197\n                                                                                                                       // 9198\n\t\t$.each(event, function(name, val) {                                                                                  // 9199\n\t\t\tif (isMiscEventPropName(name)) {                                                                                    // 9200\n\t\t\t\tif (val !== undefined && isAtomic(val)) { // a defined non-object                                                  // 9201\n\t\t\t\t\tprops[name] = val;                                                                                                // 9202\n\t\t\t\t}                                                                                                                  // 9203\n\t\t\t}                                                                                                                   // 9204\n\t\t});                                                                                                                  // 9205\n                                                                                                                       // 9206\n\t\treturn props;                                                                                                        // 9207\n\t}                                                                                                                     // 9208\n                                                                                                                       // 9209\n\t// non-date-related, non-id-related, non-secret                                                                       // 9210\n\tfunction isMiscEventPropName(name) {                                                                                  // 9211\n\t\treturn !/^_|^(id|allDay|start|end)$/.test(name);                                                                     // 9212\n\t}                                                                                                                     // 9213\n                                                                                                                       // 9214\n\t                                                                                                                      // 9215\n\t// returns the expanded events that were created                                                                      // 9216\n\tfunction renderEvent(eventInput, stick) {                                                                             // 9217\n\t\tvar abstractEvent = buildEventFromInput(eventInput);                                                                 // 9218\n\t\tvar events;                                                                                                          // 9219\n\t\tvar i, event;                                                                                                        // 9220\n                                                                                                                       // 9221\n\t\tif (abstractEvent) { // not false (a valid input)                                                                    // 9222\n\t\t\tevents = expandEvent(abstractEvent);                                                                                // 9223\n                                                                                                                       // 9224\n\t\t\tfor (i = 0; i < events.length; i++) {                                                                               // 9225\n\t\t\t\tevent = events[i];                                                                                                 // 9226\n                                                                                                                       // 9227\n\t\t\t\tif (!event.source) {                                                                                               // 9228\n\t\t\t\t\tif (stick) {                                                                                                      // 9229\n\t\t\t\t\t\tstickySource.events.push(event);                                                                                 // 9230\n\t\t\t\t\t\tevent.source = stickySource;                                                                                     // 9231\n\t\t\t\t\t}                                                                                                                 // 9232\n\t\t\t\t\tcache.push(event);                                                                                                // 9233\n\t\t\t\t}                                                                                                                  // 9234\n\t\t\t}                                                                                                                   // 9235\n                                                                                                                       // 9236\n\t\t\treportEvents(cache);                                                                                                // 9237\n                                                                                                                       // 9238\n\t\t\treturn events;                                                                                                      // 9239\n\t\t}                                                                                                                    // 9240\n                                                                                                                       // 9241\n\t\treturn [];                                                                                                           // 9242\n\t}                                                                                                                     // 9243\n\t                                                                                                                      // 9244\n\t                                                                                                                      // 9245\n\tfunction removeEvents(filter) {                                                                                       // 9246\n\t\tvar eventID;                                                                                                         // 9247\n\t\tvar i;                                                                                                               // 9248\n                                                                                                                       // 9249\n\t\tif (filter == null) { // null or undefined. remove all events                                                        // 9250\n\t\t\tfilter = function() { return true; }; // will always match                                                          // 9251\n\t\t}                                                                                                                    // 9252\n\t\telse if (!$.isFunction(filter)) { // an event ID                                                                     // 9253\n\t\t\teventID = filter + '';                                                                                              // 9254\n\t\t\tfilter = function(event) {                                                                                          // 9255\n\t\t\t\treturn event._id == eventID;                                                                                       // 9256\n\t\t\t};                                                                                                                  // 9257\n\t\t}                                                                                                                    // 9258\n                                                                                                                       // 9259\n\t\t// Purge event(s) from our local cache                                                                               // 9260\n\t\tcache = $.grep(cache, filter, true); // inverse=true                                                                 // 9261\n                                                                                                                       // 9262\n\t\t// Remove events from array sources.                                                                                 // 9263\n\t\t// This works because they have been converted to official Event Objects up front.                                   // 9264\n\t\t// (and as a result, event._id has been calculated).                                                                 // 9265\n\t\tfor (i=0; i<sources.length; i++) {                                                                                   // 9266\n\t\t\tif ($.isArray(sources[i].events)) {                                                                                 // 9267\n\t\t\t\tsources[i].events = $.grep(sources[i].events, filter, true);                                                       // 9268\n\t\t\t}                                                                                                                   // 9269\n\t\t}                                                                                                                    // 9270\n                                                                                                                       // 9271\n\t\treportEvents(cache);                                                                                                 // 9272\n\t}                                                                                                                     // 9273\n\t                                                                                                                      // 9274\n\t                                                                                                                      // 9275\n\tfunction clientEvents(filter) {                                                                                       // 9276\n\t\tif ($.isFunction(filter)) {                                                                                          // 9277\n\t\t\treturn $.grep(cache, filter);                                                                                       // 9278\n\t\t}                                                                                                                    // 9279\n\t\telse if (filter != null) { // not null, not undefined. an event ID                                                   // 9280\n\t\t\tfilter += '';                                                                                                       // 9281\n\t\t\treturn $.grep(cache, function(e) {                                                                                  // 9282\n\t\t\t\treturn e._id == filter;                                                                                            // 9283\n\t\t\t});                                                                                                                 // 9284\n\t\t}                                                                                                                    // 9285\n\t\treturn cache; // else, return all                                                                                    // 9286\n\t}                                                                                                                     // 9287\n\t                                                                                                                      // 9288\n\t                                                                                                                      // 9289\n\t                                                                                                                      // 9290\n\t/* Loading State                                                                                                      // 9291\n\t-----------------------------------------------------------------------------*/                                       // 9292\n\t                                                                                                                      // 9293\n\t                                                                                                                      // 9294\n\tfunction pushLoading() {                                                                                              // 9295\n\t\tif (!(loadingLevel++)) {                                                                                             // 9296\n\t\t\ttrigger('loading', null, true, getView());                                                                          // 9297\n\t\t}                                                                                                                    // 9298\n\t}                                                                                                                     // 9299\n\t                                                                                                                      // 9300\n\t                                                                                                                      // 9301\n\tfunction popLoading() {                                                                                               // 9302\n\t\tif (!(--loadingLevel)) {                                                                                             // 9303\n\t\t\ttrigger('loading', null, false, getView());                                                                         // 9304\n\t\t}                                                                                                                    // 9305\n\t}                                                                                                                     // 9306\n\t                                                                                                                      // 9307\n\t                                                                                                                      // 9308\n\t                                                                                                                      // 9309\n\t/* Event Normalization                                                                                                // 9310\n\t-----------------------------------------------------------------------------*/                                       // 9311\n                                                                                                                       // 9312\n                                                                                                                       // 9313\n\t// Given a raw object with key/value properties, returns an \"abstract\" Event object.                                  // 9314\n\t// An \"abstract\" event is an event that, if recurring, will not have been expanded yet.                               // 9315\n\t// Will return `false` when input is invalid.                                                                         // 9316\n\t// `source` is optional                                                                                               // 9317\n\tfunction buildEventFromInput(input, source) {                                                                         // 9318\n\t\tvar out = {};                                                                                                        // 9319\n\t\tvar start, end;                                                                                                      // 9320\n\t\tvar allDay;                                                                                                          // 9321\n                                                                                                                       // 9322\n\t\tif (options.eventDataTransform) {                                                                                    // 9323\n\t\t\tinput = options.eventDataTransform(input);                                                                          // 9324\n\t\t}                                                                                                                    // 9325\n\t\tif (source && source.eventDataTransform) {                                                                           // 9326\n\t\t\tinput = source.eventDataTransform(input);                                                                           // 9327\n\t\t}                                                                                                                    // 9328\n                                                                                                                       // 9329\n\t\t// Copy all properties over to the resulting object.                                                                 // 9330\n\t\t// The special-case properties will be copied over afterwards.                                                       // 9331\n\t\t$.extend(out, input);                                                                                                // 9332\n                                                                                                                       // 9333\n\t\tif (source) {                                                                                                        // 9334\n\t\t\tout.source = source;                                                                                                // 9335\n\t\t}                                                                                                                    // 9336\n                                                                                                                       // 9337\n\t\tout._id = input._id || (input.id === undefined ? '_fc' + eventGUID++ : input.id + '');                               // 9338\n                                                                                                                       // 9339\n\t\tif (input.className) {                                                                                               // 9340\n\t\t\tif (typeof input.className == 'string') {                                                                           // 9341\n\t\t\t\tout.className = input.className.split(/\\s+/);                                                                      // 9342\n\t\t\t}                                                                                                                   // 9343\n\t\t\telse { // assumed to be an array                                                                                    // 9344\n\t\t\t\tout.className = input.className;                                                                                   // 9345\n\t\t\t}                                                                                                                   // 9346\n\t\t}                                                                                                                    // 9347\n\t\telse {                                                                                                               // 9348\n\t\t\tout.className = [];                                                                                                 // 9349\n\t\t}                                                                                                                    // 9350\n                                                                                                                       // 9351\n\t\tstart = input.start || input.date; // \"date\" is an alias for \"start\"                                                 // 9352\n\t\tend = input.end;                                                                                                     // 9353\n                                                                                                                       // 9354\n\t\t// parse as a time (Duration) if applicable                                                                          // 9355\n\t\tif (isTimeString(start)) {                                                                                           // 9356\n\t\t\tstart = moment.duration(start);                                                                                     // 9357\n\t\t}                                                                                                                    // 9358\n\t\tif (isTimeString(end)) {                                                                                             // 9359\n\t\t\tend = moment.duration(end);                                                                                         // 9360\n\t\t}                                                                                                                    // 9361\n                                                                                                                       // 9362\n\t\tif (input.dow || moment.isDuration(start) || moment.isDuration(end)) {                                               // 9363\n                                                                                                                       // 9364\n\t\t\t// the event is \"abstract\" (recurring) so don't calculate exact start/end dates just yet                            // 9365\n\t\t\tout.start = start ? moment.duration(start) : null; // will be a Duration or null                                    // 9366\n\t\t\tout.end = end ? moment.duration(end) : null; // will be a Duration or null                                          // 9367\n\t\t\tout._recurring = true; // our internal marker                                                                       // 9368\n\t\t}                                                                                                                    // 9369\n\t\telse {                                                                                                               // 9370\n                                                                                                                       // 9371\n\t\t\tif (start) {                                                                                                        // 9372\n\t\t\t\tstart = t.moment(start);                                                                                           // 9373\n\t\t\t\tif (!start.isValid()) {                                                                                            // 9374\n\t\t\t\t\treturn false;                                                                                                     // 9375\n\t\t\t\t}                                                                                                                  // 9376\n\t\t\t}                                                                                                                   // 9377\n                                                                                                                       // 9378\n\t\t\tif (end) {                                                                                                          // 9379\n\t\t\t\tend = t.moment(end);                                                                                               // 9380\n\t\t\t\tif (!end.isValid()) {                                                                                              // 9381\n\t\t\t\t\tend = null; // let defaults take over                                                                             // 9382\n\t\t\t\t}                                                                                                                  // 9383\n\t\t\t}                                                                                                                   // 9384\n                                                                                                                       // 9385\n\t\t\tallDay = input.allDay;                                                                                              // 9386\n\t\t\tif (allDay === undefined) { // still undefined? fallback to default                                                 // 9387\n\t\t\t\tallDay = firstDefined(                                                                                             // 9388\n\t\t\t\t\tsource ? source.allDayDefault : undefined,                                                                        // 9389\n\t\t\t\t\toptions.allDayDefault                                                                                             // 9390\n\t\t\t\t);                                                                                                                 // 9391\n\t\t\t\t// still undefined? normalizeEventRange will calculate it                                                          // 9392\n\t\t\t}                                                                                                                   // 9393\n                                                                                                                       // 9394\n\t\t\tassignDatesToEvent(start, end, allDay, out);                                                                        // 9395\n\t\t}                                                                                                                    // 9396\n                                                                                                                       // 9397\n\t\treturn out;                                                                                                          // 9398\n\t}                                                                                                                     // 9399\n                                                                                                                       // 9400\n                                                                                                                       // 9401\n\t// Normalizes and assigns the given dates to the given partially-formed event object.                                 // 9402\n\t// NOTE: mutates the given start/end moments. does not make a copy.                                                   // 9403\n\tfunction assignDatesToEvent(start, end, allDay, event) {                                                              // 9404\n\t\tevent.start = start;                                                                                                 // 9405\n\t\tevent.end = end;                                                                                                     // 9406\n\t\tevent.allDay = allDay;                                                                                               // 9407\n\t\tnormalizeEventRange(event);                                                                                          // 9408\n\t\tbackupEventDates(event);                                                                                             // 9409\n\t}                                                                                                                     // 9410\n                                                                                                                       // 9411\n                                                                                                                       // 9412\n\t// Ensures proper values for allDay/start/end. Accepts an Event object, or a plain object with event-ish properties.  // 9413\n\t// NOTE: Will modify the given object.                                                                                // 9414\n\tfunction normalizeEventRange(props) {                                                                                 // 9415\n                                                                                                                       // 9416\n\t\tnormalizeEventRangeTimes(props);                                                                                     // 9417\n                                                                                                                       // 9418\n\t\tif (props.end && !props.end.isAfter(props.start)) {                                                                  // 9419\n\t\t\tprops.end = null;                                                                                                   // 9420\n\t\t}                                                                                                                    // 9421\n                                                                                                                       // 9422\n\t\tif (!props.end) {                                                                                                    // 9423\n\t\t\tif (options.forceEventDuration) {                                                                                   // 9424\n\t\t\t\tprops.end = t.getDefaultEventEnd(props.allDay, props.start);                                                       // 9425\n\t\t\t}                                                                                                                   // 9426\n\t\t\telse {                                                                                                              // 9427\n\t\t\t\tprops.end = null;                                                                                                  // 9428\n\t\t\t}                                                                                                                   // 9429\n\t\t}                                                                                                                    // 9430\n\t}                                                                                                                     // 9431\n                                                                                                                       // 9432\n                                                                                                                       // 9433\n\t// Ensures the allDay property exists and the timeliness of the start/end dates are consistent                        // 9434\n\tfunction normalizeEventRangeTimes(range) {                                                                            // 9435\n\t\tif (range.allDay == null) {                                                                                          // 9436\n\t\t\trange.allDay = !(range.start.hasTime() || (range.end && range.end.hasTime()));                                      // 9437\n\t\t}                                                                                                                    // 9438\n                                                                                                                       // 9439\n\t\tif (range.allDay) {                                                                                                  // 9440\n\t\t\trange.start.stripTime();                                                                                            // 9441\n\t\t\tif (range.end) {                                                                                                    // 9442\n\t\t\t\t// TODO: consider nextDayThreshold here? If so, will require a lot of testing and adjustment                       // 9443\n\t\t\t\trange.end.stripTime();                                                                                             // 9444\n\t\t\t}                                                                                                                   // 9445\n\t\t}                                                                                                                    // 9446\n\t\telse {                                                                                                               // 9447\n\t\t\tif (!range.start.hasTime()) {                                                                                       // 9448\n\t\t\t\trange.start = t.rezoneDate(range.start); // will assign a 00:00 time                                               // 9449\n\t\t\t}                                                                                                                   // 9450\n\t\t\tif (range.end && !range.end.hasTime()) {                                                                            // 9451\n\t\t\t\trange.end = t.rezoneDate(range.end); // will assign a 00:00 time                                                   // 9452\n\t\t\t}                                                                                                                   // 9453\n\t\t}                                                                                                                    // 9454\n\t}                                                                                                                     // 9455\n                                                                                                                       // 9456\n                                                                                                                       // 9457\n\t// If `range` is a proper range with a start and end, returns the original object.                                    // 9458\n\t// If missing an end, computes a new range with an end, computing it as if it were an event.                          // 9459\n\t// TODO: make this a part of the event -> eventRange system                                                           // 9460\n\tfunction ensureVisibleEventRange(range) {                                                                             // 9461\n\t\tvar allDay;                                                                                                          // 9462\n                                                                                                                       // 9463\n\t\tif (!range.end) {                                                                                                    // 9464\n                                                                                                                       // 9465\n\t\t\tallDay = range.allDay; // range might be more event-ish than we think                                               // 9466\n\t\t\tif (allDay == null) {                                                                                               // 9467\n\t\t\t\tallDay = !range.start.hasTime();                                                                                   // 9468\n\t\t\t}                                                                                                                   // 9469\n                                                                                                                       // 9470\n\t\t\trange = $.extend({}, range); // make a copy, copying over other misc properties                                     // 9471\n\t\t\trange.end = t.getDefaultEventEnd(allDay, range.start);                                                              // 9472\n\t\t}                                                                                                                    // 9473\n\t\treturn range;                                                                                                        // 9474\n\t}                                                                                                                     // 9475\n                                                                                                                       // 9476\n                                                                                                                       // 9477\n\t// If the given event is a recurring event, break it down into an array of individual instances.                      // 9478\n\t// If not a recurring event, return an array with the single original event.                                          // 9479\n\t// If given a falsy input (probably because of a failed buildEventFromInput call), returns an empty array.            // 9480\n\t// HACK: can override the recurring window by providing custom rangeStart/rangeEnd (for businessHours).               // 9481\n\tfunction expandEvent(abstractEvent, _rangeStart, _rangeEnd) {                                                         // 9482\n\t\tvar events = [];                                                                                                     // 9483\n\t\tvar dowHash;                                                                                                         // 9484\n\t\tvar dow;                                                                                                             // 9485\n\t\tvar i;                                                                                                               // 9486\n\t\tvar date;                                                                                                            // 9487\n\t\tvar startTime, endTime;                                                                                              // 9488\n\t\tvar start, end;                                                                                                      // 9489\n\t\tvar event;                                                                                                           // 9490\n                                                                                                                       // 9491\n\t\t_rangeStart = _rangeStart || rangeStart;                                                                             // 9492\n\t\t_rangeEnd = _rangeEnd || rangeEnd;                                                                                   // 9493\n                                                                                                                       // 9494\n\t\tif (abstractEvent) {                                                                                                 // 9495\n\t\t\tif (abstractEvent._recurring) {                                                                                     // 9496\n                                                                                                                       // 9497\n\t\t\t\t// make a boolean hash as to whether the event occurs on each day-of-week                                          // 9498\n\t\t\t\tif ((dow = abstractEvent.dow)) {                                                                                   // 9499\n\t\t\t\t\tdowHash = {};                                                                                                     // 9500\n\t\t\t\t\tfor (i = 0; i < dow.length; i++) {                                                                                // 9501\n\t\t\t\t\t\tdowHash[dow[i]] = true;                                                                                          // 9502\n\t\t\t\t\t}                                                                                                                 // 9503\n\t\t\t\t}                                                                                                                  // 9504\n                                                                                                                       // 9505\n\t\t\t\t// iterate through every day in the current range                                                                  // 9506\n\t\t\t\tdate = _rangeStart.clone().stripTime(); // holds the date of the current day                                       // 9507\n\t\t\t\twhile (date.isBefore(_rangeEnd)) {                                                                                 // 9508\n                                                                                                                       // 9509\n\t\t\t\t\tif (!dowHash || dowHash[date.day()]) { // if everyday, or this particular day-of-week                             // 9510\n                                                                                                                       // 9511\n\t\t\t\t\t\tstartTime = abstractEvent.start; // the stored start and end properties are times (Durations)                    // 9512\n\t\t\t\t\t\tendTime = abstractEvent.end; // \"                                                                                // 9513\n\t\t\t\t\t\tstart = date.clone();                                                                                            // 9514\n\t\t\t\t\t\tend = null;                                                                                                      // 9515\n                                                                                                                       // 9516\n\t\t\t\t\t\tif (startTime) {                                                                                                 // 9517\n\t\t\t\t\t\t\tstart = start.time(startTime);                                                                                  // 9518\n\t\t\t\t\t\t}                                                                                                                // 9519\n\t\t\t\t\t\tif (endTime) {                                                                                                   // 9520\n\t\t\t\t\t\t\tend = date.clone().time(endTime);                                                                               // 9521\n\t\t\t\t\t\t}                                                                                                                // 9522\n                                                                                                                       // 9523\n\t\t\t\t\t\tevent = $.extend({}, abstractEvent); // make a copy of the original                                              // 9524\n\t\t\t\t\t\tassignDatesToEvent(                                                                                              // 9525\n\t\t\t\t\t\t\tstart, end,                                                                                                     // 9526\n\t\t\t\t\t\t\t!startTime && !endTime, // allDay?                                                                              // 9527\n\t\t\t\t\t\t\tevent                                                                                                           // 9528\n\t\t\t\t\t\t);                                                                                                               // 9529\n\t\t\t\t\t\tevents.push(event);                                                                                              // 9530\n\t\t\t\t\t}                                                                                                                 // 9531\n                                                                                                                       // 9532\n\t\t\t\t\tdate.add(1, 'days');                                                                                              // 9533\n\t\t\t\t}                                                                                                                  // 9534\n\t\t\t}                                                                                                                   // 9535\n\t\t\telse {                                                                                                              // 9536\n\t\t\t\tevents.push(abstractEvent); // return the original event. will be a one-item array                                 // 9537\n\t\t\t}                                                                                                                   // 9538\n\t\t}                                                                                                                    // 9539\n                                                                                                                       // 9540\n\t\treturn events;                                                                                                       // 9541\n\t}                                                                                                                     // 9542\n                                                                                                                       // 9543\n                                                                                                                       // 9544\n                                                                                                                       // 9545\n\t/* Event Modification Math                                                                                            // 9546\n\t-----------------------------------------------------------------------------------------*/                           // 9547\n                                                                                                                       // 9548\n                                                                                                                       // 9549\n\t// Modifies an event and all related events by applying the given properties.                                         // 9550\n\t// Special date-diffing logic is used for manipulation of dates.                                                      // 9551\n\t// If `props` does not contain start/end dates, the updated values are assumed to be the event's current start/end.   // 9552\n\t// All date comparisons are done against the event's pristine _start and _end dates.                                  // 9553\n\t// Returns an object with delta information and a function to undo all operations.                                    // 9554\n\t// For making computations in a granularity greater than day/time, specify largeUnit.                                 // 9555\n\t// NOTE: The given `newProps` might be mutated for normalization purposes.                                            // 9556\n\tfunction mutateEvent(event, newProps, largeUnit) {                                                                    // 9557\n\t\tvar miscProps = {};                                                                                                  // 9558\n\t\tvar oldProps;                                                                                                        // 9559\n\t\tvar clearEnd;                                                                                                        // 9560\n\t\tvar startDelta;                                                                                                      // 9561\n\t\tvar endDelta;                                                                                                        // 9562\n\t\tvar durationDelta;                                                                                                   // 9563\n\t\tvar undoFunc;                                                                                                        // 9564\n                                                                                                                       // 9565\n\t\t// diffs the dates in the appropriate way, returning a duration                                                      // 9566\n\t\tfunction diffDates(date1, date0) { // date1 - date0                                                                  // 9567\n\t\t\tif (largeUnit) {                                                                                                    // 9568\n\t\t\t\treturn diffByUnit(date1, date0, largeUnit);                                                                        // 9569\n\t\t\t}                                                                                                                   // 9570\n\t\t\telse if (newProps.allDay) {                                                                                         // 9571\n\t\t\t\treturn diffDay(date1, date0);                                                                                      // 9572\n\t\t\t}                                                                                                                   // 9573\n\t\t\telse {                                                                                                              // 9574\n\t\t\t\treturn diffDayTime(date1, date0);                                                                                  // 9575\n\t\t\t}                                                                                                                   // 9576\n\t\t}                                                                                                                    // 9577\n                                                                                                                       // 9578\n\t\tnewProps = newProps || {};                                                                                           // 9579\n                                                                                                                       // 9580\n\t\t// normalize new date-related properties                                                                             // 9581\n\t\tif (!newProps.start) {                                                                                               // 9582\n\t\t\tnewProps.start = event.start.clone();                                                                               // 9583\n\t\t}                                                                                                                    // 9584\n\t\tif (newProps.end === undefined) {                                                                                    // 9585\n\t\t\tnewProps.end = event.end ? event.end.clone() : null;                                                                // 9586\n\t\t}                                                                                                                    // 9587\n\t\tif (newProps.allDay == null) { // is null or undefined?                                                              // 9588\n\t\t\tnewProps.allDay = event.allDay;                                                                                     // 9589\n\t\t}                                                                                                                    // 9590\n\t\tnormalizeEventRange(newProps);                                                                                       // 9591\n                                                                                                                       // 9592\n\t\t// create normalized versions of the original props to compare against                                               // 9593\n\t\t// need a real end value, for diffing                                                                                // 9594\n\t\toldProps = {                                                                                                         // 9595\n\t\t\tstart: event._start.clone(),                                                                                        // 9596\n\t\t\tend: event._end ? event._end.clone() : t.getDefaultEventEnd(event._allDay, event._start),                           // 9597\n\t\t\tallDay: newProps.allDay // normalize the dates in the same regard as the new properties                             // 9598\n\t\t};                                                                                                                   // 9599\n\t\tnormalizeEventRange(oldProps);                                                                                       // 9600\n                                                                                                                       // 9601\n\t\t// need to clear the end date if explicitly changed to null                                                          // 9602\n\t\tclearEnd = event._end !== null && newProps.end === null;                                                             // 9603\n                                                                                                                       // 9604\n\t\t// compute the delta for moving the start date                                                                       // 9605\n\t\tstartDelta = diffDates(newProps.start, oldProps.start);                                                              // 9606\n                                                                                                                       // 9607\n\t\t// compute the delta for moving the end date                                                                         // 9608\n\t\tif (newProps.end) {                                                                                                  // 9609\n\t\t\tendDelta = diffDates(newProps.end, oldProps.end);                                                                   // 9610\n\t\t\tdurationDelta = endDelta.subtract(startDelta);                                                                      // 9611\n\t\t}                                                                                                                    // 9612\n\t\telse {                                                                                                               // 9613\n\t\t\tdurationDelta = null;                                                                                               // 9614\n\t\t}                                                                                                                    // 9615\n                                                                                                                       // 9616\n\t\t// gather all non-date-related properties                                                                            // 9617\n\t\t$.each(newProps, function(name, val) {                                                                               // 9618\n\t\t\tif (isMiscEventPropName(name)) {                                                                                    // 9619\n\t\t\t\tif (val !== undefined) {                                                                                           // 9620\n\t\t\t\t\tmiscProps[name] = val;                                                                                            // 9621\n\t\t\t\t}                                                                                                                  // 9622\n\t\t\t}                                                                                                                   // 9623\n\t\t});                                                                                                                  // 9624\n                                                                                                                       // 9625\n\t\t// apply the operations to the event and all related events                                                          // 9626\n\t\tundoFunc = mutateEvents(                                                                                             // 9627\n\t\t\tclientEvents(event._id), // get events with this ID                                                                 // 9628\n\t\t\tclearEnd,                                                                                                           // 9629\n\t\t\tnewProps.allDay,                                                                                                    // 9630\n\t\t\tstartDelta,                                                                                                         // 9631\n\t\t\tdurationDelta,                                                                                                      // 9632\n\t\t\tmiscProps                                                                                                           // 9633\n\t\t);                                                                                                                   // 9634\n                                                                                                                       // 9635\n\t\treturn {                                                                                                             // 9636\n\t\t\tdateDelta: startDelta,                                                                                              // 9637\n\t\t\tdurationDelta: durationDelta,                                                                                       // 9638\n\t\t\tundo: undoFunc                                                                                                      // 9639\n\t\t};                                                                                                                   // 9640\n\t}                                                                                                                     // 9641\n                                                                                                                       // 9642\n                                                                                                                       // 9643\n\t// Modifies an array of events in the following ways (operations are in order):                                       // 9644\n\t// - clear the event's `end`                                                                                          // 9645\n\t// - convert the event to allDay                                                                                      // 9646\n\t// - add `dateDelta` to the start and end                                                                             // 9647\n\t// - add `durationDelta` to the event's duration                                                                      // 9648\n\t// - assign `miscProps` to the event                                                                                  // 9649\n\t//                                                                                                                    // 9650\n\t// Returns a function that can be called to undo all the operations.                                                  // 9651\n\t//                                                                                                                    // 9652\n\t// TODO: don't use so many closures. possible memory issues when lots of events with same ID.                         // 9653\n\t//                                                                                                                    // 9654\n\tfunction mutateEvents(events, clearEnd, allDay, dateDelta, durationDelta, miscProps) {                                // 9655\n\t\tvar isAmbigTimezone = t.getIsAmbigTimezone();                                                                        // 9656\n\t\tvar undoFunctions = [];                                                                                              // 9657\n                                                                                                                       // 9658\n\t\t// normalize zero-length deltas to be null                                                                           // 9659\n\t\tif (dateDelta && !dateDelta.valueOf()) { dateDelta = null; }                                                         // 9660\n\t\tif (durationDelta && !durationDelta.valueOf()) { durationDelta = null; }                                             // 9661\n                                                                                                                       // 9662\n\t\t$.each(events, function(i, event) {                                                                                  // 9663\n\t\t\tvar oldProps;                                                                                                       // 9664\n\t\t\tvar newProps;                                                                                                       // 9665\n                                                                                                                       // 9666\n\t\t\t// build an object holding all the old values, both date-related and misc.                                          // 9667\n\t\t\t// for the undo function.                                                                                           // 9668\n\t\t\toldProps = {                                                                                                        // 9669\n\t\t\t\tstart: event.start.clone(),                                                                                        // 9670\n\t\t\t\tend: event.end ? event.end.clone() : null,                                                                         // 9671\n\t\t\t\tallDay: event.allDay                                                                                               // 9672\n\t\t\t};                                                                                                                  // 9673\n\t\t\t$.each(miscProps, function(name) {                                                                                  // 9674\n\t\t\t\toldProps[name] = event[name];                                                                                      // 9675\n\t\t\t});                                                                                                                 // 9676\n                                                                                                                       // 9677\n\t\t\t// new date-related properties. work off the original date snapshot.                                                // 9678\n\t\t\t// ok to use references because they will be thrown away when backupEventDates is called.                           // 9679\n\t\t\tnewProps = {                                                                                                        // 9680\n\t\t\t\tstart: event._start,                                                                                               // 9681\n\t\t\t\tend: event._end,                                                                                                   // 9682\n\t\t\t\tallDay: allDay // normalize the dates in the same regard as the new properties                                     // 9683\n\t\t\t};                                                                                                                  // 9684\n\t\t\tnormalizeEventRange(newProps); // massages start/end/allDay                                                         // 9685\n                                                                                                                       // 9686\n\t\t\t// strip or ensure the end date                                                                                     // 9687\n\t\t\tif (clearEnd) {                                                                                                     // 9688\n\t\t\t\tnewProps.end = null;                                                                                               // 9689\n\t\t\t}                                                                                                                   // 9690\n\t\t\telse if (durationDelta && !newProps.end) { // the duration translation requires an end date                         // 9691\n\t\t\t\tnewProps.end = t.getDefaultEventEnd(newProps.allDay, newProps.start);                                              // 9692\n\t\t\t}                                                                                                                   // 9693\n                                                                                                                       // 9694\n\t\t\tif (dateDelta) {                                                                                                    // 9695\n\t\t\t\tnewProps.start.add(dateDelta);                                                                                     // 9696\n\t\t\t\tif (newProps.end) {                                                                                                // 9697\n\t\t\t\t\tnewProps.end.add(dateDelta);                                                                                      // 9698\n\t\t\t\t}                                                                                                                  // 9699\n\t\t\t}                                                                                                                   // 9700\n                                                                                                                       // 9701\n\t\t\tif (durationDelta) {                                                                                                // 9702\n\t\t\t\tnewProps.end.add(durationDelta); // end already ensured above                                                      // 9703\n\t\t\t}                                                                                                                   // 9704\n                                                                                                                       // 9705\n\t\t\t// if the dates have changed, and we know it is impossible to recompute the                                         // 9706\n\t\t\t// timezone offsets, strip the zone.                                                                                // 9707\n\t\t\tif (                                                                                                                // 9708\n\t\t\t\tisAmbigTimezone &&                                                                                                 // 9709\n\t\t\t\t!newProps.allDay &&                                                                                                // 9710\n\t\t\t\t(dateDelta || durationDelta)                                                                                       // 9711\n\t\t\t) {                                                                                                                 // 9712\n\t\t\t\tnewProps.start.stripZone();                                                                                        // 9713\n\t\t\t\tif (newProps.end) {                                                                                                // 9714\n\t\t\t\t\tnewProps.end.stripZone();                                                                                         // 9715\n\t\t\t\t}                                                                                                                  // 9716\n\t\t\t}                                                                                                                   // 9717\n                                                                                                                       // 9718\n\t\t\t$.extend(event, miscProps, newProps); // copy over misc props, then date-related props                              // 9719\n\t\t\tbackupEventDates(event); // regenerate internal _start/_end/_allDay                                                 // 9720\n                                                                                                                       // 9721\n\t\t\tundoFunctions.push(function() {                                                                                     // 9722\n\t\t\t\t$.extend(event, oldProps);                                                                                         // 9723\n\t\t\t\tbackupEventDates(event); // regenerate internal _start/_end/_allDay                                                // 9724\n\t\t\t});                                                                                                                 // 9725\n\t\t});                                                                                                                  // 9726\n                                                                                                                       // 9727\n\t\treturn function() {                                                                                                  // 9728\n\t\t\tfor (var i = 0; i < undoFunctions.length; i++) {                                                                    // 9729\n\t\t\t\tundoFunctions[i]();                                                                                                // 9730\n\t\t\t}                                                                                                                   // 9731\n\t\t};                                                                                                                   // 9732\n\t}                                                                                                                     // 9733\n                                                                                                                       // 9734\n                                                                                                                       // 9735\n\t/* Business Hours                                                                                                     // 9736\n\t-----------------------------------------------------------------------------------------*/                           // 9737\n                                                                                                                       // 9738\n\tt.getBusinessHoursEvents = getBusinessHoursEvents;                                                                    // 9739\n                                                                                                                       // 9740\n                                                                                                                       // 9741\n\t// Returns an array of events as to when the business hours occur in the given view.                                  // 9742\n\t// Abuse of our event system :(                                                                                       // 9743\n\tfunction getBusinessHoursEvents(wholeDay) {                                                                           // 9744\n\t\tvar optionVal = options.businessHours;                                                                               // 9745\n\t\tvar defaultVal = {                                                                                                   // 9746\n\t\t\tclassName: 'fc-nonbusiness',                                                                                        // 9747\n\t\t\tstart: '09:00',                                                                                                     // 9748\n\t\t\tend: '17:00',                                                                                                       // 9749\n\t\t\tdow: [ 1, 2, 3, 4, 5 ], // monday - friday                                                                          // 9750\n\t\t\trendering: 'inverse-background'                                                                                     // 9751\n\t\t};                                                                                                                   // 9752\n\t\tvar view = t.getView();                                                                                              // 9753\n\t\tvar eventInput;                                                                                                      // 9754\n                                                                                                                       // 9755\n\t\tif (optionVal) { // `true` (which means \"use the defaults\") or an override object                                    // 9756\n\t\t\teventInput = $.extend(                                                                                              // 9757\n\t\t\t\t{}, // copy to a new object in either case                                                                         // 9758\n\t\t\t\tdefaultVal,                                                                                                        // 9759\n\t\t\t\ttypeof optionVal === 'object' ? optionVal : {} // override the defaults                                            // 9760\n\t\t\t);                                                                                                                  // 9761\n\t\t}                                                                                                                    // 9762\n                                                                                                                       // 9763\n\t\tif (eventInput) {                                                                                                    // 9764\n                                                                                                                       // 9765\n\t\t\t// if a whole-day series is requested, clear the start/end times                                                    // 9766\n\t\t\tif (wholeDay) {                                                                                                     // 9767\n\t\t\t\teventInput.start = null;                                                                                           // 9768\n\t\t\t\teventInput.end = null;                                                                                             // 9769\n\t\t\t}                                                                                                                   // 9770\n                                                                                                                       // 9771\n\t\t\treturn expandEvent(                                                                                                 // 9772\n\t\t\t\tbuildEventFromInput(eventInput),                                                                                   // 9773\n\t\t\t\tview.start,                                                                                                        // 9774\n\t\t\t\tview.end                                                                                                           // 9775\n\t\t\t);                                                                                                                  // 9776\n\t\t}                                                                                                                    // 9777\n                                                                                                                       // 9778\n\t\treturn [];                                                                                                           // 9779\n\t}                                                                                                                     // 9780\n                                                                                                                       // 9781\n                                                                                                                       // 9782\n\t/* Overlapping / Constraining                                                                                         // 9783\n\t-----------------------------------------------------------------------------------------*/                           // 9784\n                                                                                                                       // 9785\n\tt.isEventRangeAllowed = isEventRangeAllowed;                                                                          // 9786\n\tt.isSelectionRangeAllowed = isSelectionRangeAllowed;                                                                  // 9787\n\tt.isExternalDropRangeAllowed = isExternalDropRangeAllowed;                                                            // 9788\n                                                                                                                       // 9789\n                                                                                                                       // 9790\n\tfunction isEventRangeAllowed(range, event) {                                                                          // 9791\n\t\tvar source = event.source || {};                                                                                     // 9792\n\t\tvar constraint = firstDefined(                                                                                       // 9793\n\t\t\tevent.constraint,                                                                                                   // 9794\n\t\t\tsource.constraint,                                                                                                  // 9795\n\t\t\toptions.eventConstraint                                                                                             // 9796\n\t\t);                                                                                                                   // 9797\n\t\tvar overlap = firstDefined(                                                                                          // 9798\n\t\t\tevent.overlap,                                                                                                      // 9799\n\t\t\tsource.overlap,                                                                                                     // 9800\n\t\t\toptions.eventOverlap                                                                                                // 9801\n\t\t);                                                                                                                   // 9802\n                                                                                                                       // 9803\n\t\trange = ensureVisibleEventRange(range); // ensure a proper range with an end for isRangeAllowed                      // 9804\n                                                                                                                       // 9805\n\t\treturn isRangeAllowed(range, constraint, overlap, event);                                                            // 9806\n\t}                                                                                                                     // 9807\n                                                                                                                       // 9808\n                                                                                                                       // 9809\n\tfunction isSelectionRangeAllowed(range) {                                                                             // 9810\n\t\treturn isRangeAllowed(range, options.selectConstraint, options.selectOverlap);                                       // 9811\n\t}                                                                                                                     // 9812\n                                                                                                                       // 9813\n                                                                                                                       // 9814\n\t// when `eventProps` is defined, consider this an event.                                                              // 9815\n\t// `eventProps` can contain misc non-date-related info about the event.                                               // 9816\n\tfunction isExternalDropRangeAllowed(range, eventProps) {                                                              // 9817\n\t\tvar eventInput;                                                                                                      // 9818\n\t\tvar event;                                                                                                           // 9819\n                                                                                                                       // 9820\n\t\t// note: very similar logic is in View's reportExternalDrop                                                          // 9821\n\t\tif (eventProps) {                                                                                                    // 9822\n\t\t\teventInput = $.extend({}, eventProps, range);                                                                       // 9823\n\t\t\tevent = expandEvent(buildEventFromInput(eventInput))[0];                                                            // 9824\n\t\t}                                                                                                                    // 9825\n                                                                                                                       // 9826\n\t\tif (event) {                                                                                                         // 9827\n\t\t\treturn isEventRangeAllowed(range, event);                                                                           // 9828\n\t\t}                                                                                                                    // 9829\n\t\telse { // treat it as a selection                                                                                    // 9830\n                                                                                                                       // 9831\n\t\t\trange = ensureVisibleEventRange(range); // ensure a proper range with an end for isSelectionRangeAllowed            // 9832\n                                                                                                                       // 9833\n\t\t\treturn isSelectionRangeAllowed(range);                                                                              // 9834\n\t\t}                                                                                                                    // 9835\n\t}                                                                                                                     // 9836\n                                                                                                                       // 9837\n                                                                                                                       // 9838\n\t// Returns true if the given range (caused by an event drop/resize or a selection) is allowed to exist                // 9839\n\t// according to the constraint/overlap settings.                                                                      // 9840\n\t// `event` is not required if checking a selection.                                                                   // 9841\n\tfunction isRangeAllowed(range, constraint, overlap, event) {                                                          // 9842\n\t\tvar constraintEvents;                                                                                                // 9843\n\t\tvar anyContainment;                                                                                                  // 9844\n\t\tvar peerEvents;                                                                                                      // 9845\n\t\tvar i, peerEvent;                                                                                                    // 9846\n\t\tvar peerOverlap;                                                                                                     // 9847\n                                                                                                                       // 9848\n\t\t// normalize. fyi, we're normalizing in too many places :(                                                           // 9849\n\t\trange = $.extend({}, range); // copy all properties in case there are misc non-date properties                       // 9850\n\t\trange.start = range.start.clone().stripZone();                                                                       // 9851\n\t\trange.end = range.end.clone().stripZone();                                                                           // 9852\n                                                                                                                       // 9853\n\t\t// the range must be fully contained by at least one of produced constraint events                                   // 9854\n\t\tif (constraint != null) {                                                                                            // 9855\n                                                                                                                       // 9856\n\t\t\t// not treated as an event! intermediate data structure                                                             // 9857\n\t\t\t// TODO: use ranges in the future                                                                                   // 9858\n\t\t\tconstraintEvents = constraintToEvents(constraint);                                                                  // 9859\n                                                                                                                       // 9860\n\t\t\tanyContainment = false;                                                                                             // 9861\n\t\t\tfor (i = 0; i < constraintEvents.length; i++) {                                                                     // 9862\n\t\t\t\tif (eventContainsRange(constraintEvents[i], range)) {                                                              // 9863\n\t\t\t\t\tanyContainment = true;                                                                                            // 9864\n\t\t\t\t\tbreak;                                                                                                            // 9865\n\t\t\t\t}                                                                                                                  // 9866\n\t\t\t}                                                                                                                   // 9867\n                                                                                                                       // 9868\n\t\t\tif (!anyContainment) {                                                                                              // 9869\n\t\t\t\treturn false;                                                                                                      // 9870\n\t\t\t}                                                                                                                   // 9871\n\t\t}                                                                                                                    // 9872\n                                                                                                                       // 9873\n\t\tpeerEvents = t.getPeerEvents(event, range);                                                                          // 9874\n                                                                                                                       // 9875\n\t\tfor (i = 0; i < peerEvents.length; i++)  {                                                                           // 9876\n\t\t\tpeerEvent = peerEvents[i];                                                                                          // 9877\n                                                                                                                       // 9878\n\t\t\t// there needs to be an actual intersection before disallowing anything                                             // 9879\n\t\t\tif (eventIntersectsRange(peerEvent, range)) {                                                                       // 9880\n                                                                                                                       // 9881\n\t\t\t\t// evaluate overlap for the given range and short-circuit if necessary                                             // 9882\n\t\t\t\tif (overlap === false) {                                                                                           // 9883\n\t\t\t\t\treturn false;                                                                                                     // 9884\n\t\t\t\t}                                                                                                                  // 9885\n\t\t\t\t// if the event's overlap is a test function, pass the peer event in question as the first param                   // 9886\n\t\t\t\telse if (typeof overlap === 'function' && !overlap(peerEvent, event)) {                                            // 9887\n\t\t\t\t\treturn false;                                                                                                     // 9888\n\t\t\t\t}                                                                                                                  // 9889\n                                                                                                                       // 9890\n\t\t\t\t// if we are computing if the given range is allowable for an event, consider the other event's                    // 9891\n\t\t\t\t// EventObject-specific or Source-specific `overlap` property                                                      // 9892\n\t\t\t\tif (event) {                                                                                                       // 9893\n\t\t\t\t\tpeerOverlap = firstDefined(                                                                                       // 9894\n\t\t\t\t\t\tpeerEvent.overlap,                                                                                               // 9895\n\t\t\t\t\t\t(peerEvent.source || {}).overlap                                                                                 // 9896\n\t\t\t\t\t\t// we already considered the global `eventOverlap`                                                               // 9897\n\t\t\t\t\t);                                                                                                                // 9898\n\t\t\t\t\tif (peerOverlap === false) {                                                                                      // 9899\n\t\t\t\t\t\treturn false;                                                                                                    // 9900\n\t\t\t\t\t}                                                                                                                 // 9901\n\t\t\t\t\t// if the peer event's overlap is a test function, pass the subject event as the first param                      // 9902\n\t\t\t\t\tif (typeof peerOverlap === 'function' && !peerOverlap(event, peerEvent)) {                                        // 9903\n\t\t\t\t\t\treturn false;                                                                                                    // 9904\n\t\t\t\t\t}                                                                                                                 // 9905\n\t\t\t\t}                                                                                                                  // 9906\n\t\t\t}                                                                                                                   // 9907\n\t\t}                                                                                                                    // 9908\n                                                                                                                       // 9909\n\t\treturn true;                                                                                                         // 9910\n\t}                                                                                                                     // 9911\n                                                                                                                       // 9912\n                                                                                                                       // 9913\n\t// Given an event input from the API, produces an array of event objects. Possible event inputs:                      // 9914\n\t// 'businessHours'                                                                                                    // 9915\n\t// An event ID (number or string)                                                                                     // 9916\n\t// An object with specific start/end dates or a recurring event (like what businessHours accepts)                     // 9917\n\tfunction constraintToEvents(constraintInput) {                                                                        // 9918\n                                                                                                                       // 9919\n\t\tif (constraintInput === 'businessHours') {                                                                           // 9920\n\t\t\treturn getBusinessHoursEvents();                                                                                    // 9921\n\t\t}                                                                                                                    // 9922\n                                                                                                                       // 9923\n\t\tif (typeof constraintInput === 'object') {                                                                           // 9924\n\t\t\treturn expandEvent(buildEventFromInput(constraintInput));                                                           // 9925\n\t\t}                                                                                                                    // 9926\n                                                                                                                       // 9927\n\t\treturn clientEvents(constraintInput); // probably an ID                                                              // 9928\n\t}                                                                                                                     // 9929\n                                                                                                                       // 9930\n                                                                                                                       // 9931\n\t// Does the event's date range fully contain the given range?                                                         // 9932\n\t// start/end already assumed to have stripped zones :(                                                                // 9933\n\tfunction eventContainsRange(event, range) {                                                                           // 9934\n\t\tvar eventStart = event.start.clone().stripZone();                                                                    // 9935\n\t\tvar eventEnd = t.getEventEnd(event).stripZone();                                                                     // 9936\n                                                                                                                       // 9937\n\t\treturn range.start >= eventStart && range.end <= eventEnd;                                                           // 9938\n\t}                                                                                                                     // 9939\n                                                                                                                       // 9940\n                                                                                                                       // 9941\n\t// Does the event's date range intersect with the given range?                                                        // 9942\n\t// start/end already assumed to have stripped zones :(                                                                // 9943\n\tfunction eventIntersectsRange(event, range) {                                                                         // 9944\n\t\tvar eventStart = event.start.clone().stripZone();                                                                    // 9945\n\t\tvar eventEnd = t.getEventEnd(event).stripZone();                                                                     // 9946\n                                                                                                                       // 9947\n\t\treturn range.start < eventEnd && range.end > eventStart;                                                             // 9948\n\t}                                                                                                                     // 9949\n                                                                                                                       // 9950\n                                                                                                                       // 9951\n\tt.getEventCache = function() {                                                                                        // 9952\n\t\treturn cache;                                                                                                        // 9953\n\t};                                                                                                                    // 9954\n                                                                                                                       // 9955\n}                                                                                                                      // 9956\n                                                                                                                       // 9957\n                                                                                                                       // 9958\n// Returns a list of events that the given event should be compared against when being considered for a move to        // 9959\n// the specified range. Attached to the Calendar's prototype because EventManager is a mixin for a Calendar.           // 9960\nCalendar.prototype.getPeerEvents = function(event, range) {                                                            // 9961\n\tvar cache = this.getEventCache();                                                                                     // 9962\n\tvar peerEvents = [];                                                                                                  // 9963\n\tvar i, otherEvent;                                                                                                    // 9964\n                                                                                                                       // 9965\n\tfor (i = 0; i < cache.length; i++) {                                                                                  // 9966\n\t\totherEvent = cache[i];                                                                                               // 9967\n\t\tif (                                                                                                                 // 9968\n\t\t\t!event ||                                                                                                           // 9969\n\t\t\tevent._id !== otherEvent._id // don't compare the event to itself or other related [repeating] events               // 9970\n\t\t) {                                                                                                                  // 9971\n\t\t\tpeerEvents.push(otherEvent);                                                                                        // 9972\n\t\t}                                                                                                                    // 9973\n\t}                                                                                                                     // 9974\n                                                                                                                       // 9975\n\treturn peerEvents;                                                                                                    // 9976\n};                                                                                                                     // 9977\n                                                                                                                       // 9978\n                                                                                                                       // 9979\n// updates the \"backup\" properties, which are preserved in order to compute diffs later on.                            // 9980\nfunction backupEventDates(event) {                                                                                     // 9981\n\tevent._allDay = event.allDay;                                                                                         // 9982\n\tevent._start = event.start.clone();                                                                                   // 9983\n\tevent._end = event.end ? event.end.clone() : null;                                                                    // 9984\n}                                                                                                                      // 9985\n                                                                                                                       // 9986\n;;                                                                                                                     // 9987\n                                                                                                                       // 9988\n/* An abstract class for the \"basic\" views, as well as month view. Renders one or more rows of day cells.              // 9989\n----------------------------------------------------------------------------------------------------------------------*/\n// It is a manager for a DayGrid subcomponent, which does most of the heavy lifting.                                   // 9991\n// It is responsible for managing width/height.                                                                        // 9992\n                                                                                                                       // 9993\nvar BasicView = fcViews.basic = View.extend({                                                                          // 9994\n                                                                                                                       // 9995\n\tdayGrid: null, // the main subcomponent that does most of the heavy lifting                                           // 9996\n                                                                                                                       // 9997\n\tdayNumbersVisible: false, // display day numbers on each day cell?                                                    // 9998\n\tweekNumbersVisible: false, // display week numbers along the side?                                                    // 9999\n                                                                                                                       // 10000\n\tweekNumberWidth: null, // width of all the week-number cells running down the side                                    // 10001\n                                                                                                                       // 10002\n\theadRowEl: null, // the fake row element of the day-of-week header                                                    // 10003\n                                                                                                                       // 10004\n                                                                                                                       // 10005\n\tinitialize: function() {                                                                                              // 10006\n\t\tthis.dayGrid = new DayGrid(this);                                                                                    // 10007\n\t\tthis.coordMap = this.dayGrid.coordMap; // the view's date-to-cell mapping is identical to the subcomponent's         // 10008\n\t},                                                                                                                    // 10009\n                                                                                                                       // 10010\n                                                                                                                       // 10011\n\t// Sets the display range and computes all necessary dates                                                            // 10012\n\tsetRange: function(range) {                                                                                           // 10013\n\t\tView.prototype.setRange.call(this, range); // call the super-method                                                  // 10014\n                                                                                                                       // 10015\n\t\tthis.dayGrid.breakOnWeeks = /year|month|week/.test(this.intervalUnit); // do before setRange                         // 10016\n\t\tthis.dayGrid.setRange(range);                                                                                        // 10017\n\t},                                                                                                                    // 10018\n                                                                                                                       // 10019\n                                                                                                                       // 10020\n\t// Compute the value to feed into setRange. Overrides superclass.                                                     // 10021\n\tcomputeRange: function(date) {                                                                                        // 10022\n\t\tvar range = View.prototype.computeRange.call(this, date); // get value from the super-method                         // 10023\n                                                                                                                       // 10024\n\t\t// year and month views should be aligned with weeks. this is already done for week                                  // 10025\n\t\tif (/year|month/.test(range.intervalUnit)) {                                                                         // 10026\n\t\t\trange.start.startOf('week');                                                                                        // 10027\n\t\t\trange.start = this.skipHiddenDays(range.start);                                                                     // 10028\n                                                                                                                       // 10029\n\t\t\t// make end-of-week if not already                                                                                  // 10030\n\t\t\tif (range.end.weekday()) {                                                                                          // 10031\n\t\t\t\trange.end.add(1, 'week').startOf('week');                                                                          // 10032\n\t\t\t\trange.end = this.skipHiddenDays(range.end, -1, true); // exclusively move backwards                                // 10033\n\t\t\t}                                                                                                                   // 10034\n\t\t}                                                                                                                    // 10035\n                                                                                                                       // 10036\n\t\treturn range;                                                                                                        // 10037\n\t},                                                                                                                    // 10038\n                                                                                                                       // 10039\n                                                                                                                       // 10040\n\t// Renders the view into `this.el`, which should already be assigned                                                  // 10041\n\trender: function() {                                                                                                  // 10042\n                                                                                                                       // 10043\n\t\tthis.dayNumbersVisible = this.dayGrid.rowCnt > 1; // TODO: make grid responsible                                     // 10044\n\t\tthis.weekNumbersVisible = this.opt('weekNumbers');                                                                   // 10045\n\t\tthis.dayGrid.numbersVisible = this.dayNumbersVisible || this.weekNumbersVisible;                                     // 10046\n                                                                                                                       // 10047\n\t\tthis.el.addClass('fc-basic-view').html(this.renderHtml());                                                           // 10048\n                                                                                                                       // 10049\n\t\tthis.headRowEl = this.el.find('thead .fc-row');                                                                      // 10050\n                                                                                                                       // 10051\n\t\tthis.scrollerEl = this.el.find('.fc-day-grid-container');                                                            // 10052\n\t\tthis.dayGrid.coordMap.containerEl = this.scrollerEl; // constrain clicks/etc to the dimensions of the scroller       // 10053\n                                                                                                                       // 10054\n\t\tthis.dayGrid.setElement(this.el.find('.fc-day-grid'));                                                               // 10055\n\t\tthis.dayGrid.renderDates(this.hasRigidRows());                                                                       // 10056\n\t},                                                                                                                    // 10057\n                                                                                                                       // 10058\n                                                                                                                       // 10059\n\t// Unrenders the content of the view. Since we haven't separated skeleton rendering from date rendering,              // 10060\n\t// always completely kill the dayGrid's rendering.                                                                    // 10061\n\tdestroy: function() {                                                                                                 // 10062\n\t\tthis.dayGrid.destroyDates();                                                                                         // 10063\n\t\tthis.dayGrid.removeElement();                                                                                        // 10064\n\t},                                                                                                                    // 10065\n                                                                                                                       // 10066\n                                                                                                                       // 10067\n\trenderBusinessHours: function() {                                                                                     // 10068\n\t\tthis.dayGrid.renderBusinessHours();                                                                                  // 10069\n\t},                                                                                                                    // 10070\n                                                                                                                       // 10071\n                                                                                                                       // 10072\n\t// Builds the HTML skeleton for the view.                                                                             // 10073\n\t// The day-grid component will render inside of a container defined by this HTML.                                     // 10074\n\trenderHtml: function() {                                                                                              // 10075\n\t\treturn '' +                                                                                                          // 10076\n\t\t\t'<table>' +                                                                                                         // 10077\n\t\t\t\t'<thead class=\"fc-head\">' +                                                                                        // 10078\n\t\t\t\t\t'<tr>' +                                                                                                          // 10079\n\t\t\t\t\t\t'<td class=\"' + this.widgetHeaderClass + '\">' +                                                                  // 10080\n\t\t\t\t\t\t\tthis.dayGrid.headHtml() + // render the day-of-week headers                                                     // 10081\n\t\t\t\t\t\t'</td>' +                                                                                                        // 10082\n\t\t\t\t\t'</tr>' +                                                                                                         // 10083\n\t\t\t\t'</thead>' +                                                                                                       // 10084\n\t\t\t\t'<tbody class=\"fc-body\">' +                                                                                        // 10085\n\t\t\t\t\t'<tr>' +                                                                                                          // 10086\n\t\t\t\t\t\t'<td class=\"' + this.widgetContentClass + '\">' +                                                                 // 10087\n\t\t\t\t\t\t\t'<div class=\"fc-day-grid-container\">' +                                                                         // 10088\n\t\t\t\t\t\t\t\t'<div class=\"fc-day-grid\"/>' +                                                                                 // 10089\n\t\t\t\t\t\t\t'</div>' +                                                                                                      // 10090\n\t\t\t\t\t\t'</td>' +                                                                                                        // 10091\n\t\t\t\t\t'</tr>' +                                                                                                         // 10092\n\t\t\t\t'</tbody>' +                                                                                                       // 10093\n\t\t\t'</table>';                                                                                                         // 10094\n\t},                                                                                                                    // 10095\n                                                                                                                       // 10096\n                                                                                                                       // 10097\n\t// Generates the HTML that will go before the day-of week header cells.                                               // 10098\n\t// Queried by the DayGrid subcomponent when generating rows. Ordering depends on isRTL.                               // 10099\n\theadIntroHtml: function() {                                                                                           // 10100\n\t\tif (this.weekNumbersVisible) {                                                                                       // 10101\n\t\t\treturn '' +                                                                                                         // 10102\n\t\t\t\t'<th class=\"fc-week-number ' + this.widgetHeaderClass + '\" ' + this.weekNumberStyleAttr() + '>' +                  // 10103\n\t\t\t\t\t'<span>' + // needed for matchCellWidths                                                                          // 10104\n\t\t\t\t\t\thtmlEscape(this.opt('weekNumberTitle')) +                                                                        // 10105\n\t\t\t\t\t'</span>' +                                                                                                       // 10106\n\t\t\t\t'</th>';                                                                                                           // 10107\n\t\t}                                                                                                                    // 10108\n\t},                                                                                                                    // 10109\n                                                                                                                       // 10110\n                                                                                                                       // 10111\n\t// Generates the HTML that will go before content-skeleton cells that display the day/week numbers.                   // 10112\n\t// Queried by the DayGrid subcomponent. Ordering depends on isRTL.                                                    // 10113\n\tnumberIntroHtml: function(row) {                                                                                      // 10114\n\t\tif (this.weekNumbersVisible) {                                                                                       // 10115\n\t\t\treturn '' +                                                                                                         // 10116\n\t\t\t\t'<td class=\"fc-week-number\" ' + this.weekNumberStyleAttr() + '>' +                                                 // 10117\n\t\t\t\t\t'<span>' + // needed for matchCellWidths                                                                          // 10118\n\t\t\t\t\t\tthis.dayGrid.getCell(row, 0).start.format('w') +                                                                 // 10119\n\t\t\t\t\t'</span>' +                                                                                                       // 10120\n\t\t\t\t'</td>';                                                                                                           // 10121\n\t\t}                                                                                                                    // 10122\n\t},                                                                                                                    // 10123\n                                                                                                                       // 10124\n                                                                                                                       // 10125\n\t// Generates the HTML that goes before the day bg cells for each day-row.                                             // 10126\n\t// Queried by the DayGrid subcomponent. Ordering depends on isRTL.                                                    // 10127\n\tdayIntroHtml: function() {                                                                                            // 10128\n\t\tif (this.weekNumbersVisible) {                                                                                       // 10129\n\t\t\treturn '<td class=\"fc-week-number ' + this.widgetContentClass + '\" ' +                                              // 10130\n\t\t\t\tthis.weekNumberStyleAttr() + '></td>';                                                                             // 10131\n\t\t}                                                                                                                    // 10132\n\t},                                                                                                                    // 10133\n                                                                                                                       // 10134\n                                                                                                                       // 10135\n\t// Generates the HTML that goes before every other type of row generated by DayGrid. Ordering depends on isRTL.       // 10136\n\t// Affects helper-skeleton and highlight-skeleton rows.                                                               // 10137\n\tintroHtml: function() {                                                                                               // 10138\n\t\tif (this.weekNumbersVisible) {                                                                                       // 10139\n\t\t\treturn '<td class=\"fc-week-number\" ' + this.weekNumberStyleAttr() + '></td>';                                       // 10140\n\t\t}                                                                                                                    // 10141\n\t},                                                                                                                    // 10142\n                                                                                                                       // 10143\n                                                                                                                       // 10144\n\t// Generates the HTML for the <td>s of the \"number\" row in the DayGrid's content skeleton.                            // 10145\n\t// The number row will only exist if either day numbers or week numbers are turned on.                                // 10146\n\tnumberCellHtml: function(cell) {                                                                                      // 10147\n\t\tvar date = cell.start;                                                                                               // 10148\n\t\tvar classes;                                                                                                         // 10149\n                                                                                                                       // 10150\n\t\tif (!this.dayNumbersVisible) { // if there are week numbers but not day numbers                                      // 10151\n\t\t\treturn '<td/>'; //  will create an empty space above events :(                                                      // 10152\n\t\t}                                                                                                                    // 10153\n                                                                                                                       // 10154\n\t\tclasses = this.dayGrid.getDayClasses(date);                                                                          // 10155\n\t\tclasses.unshift('fc-day-number');                                                                                    // 10156\n                                                                                                                       // 10157\n\t\treturn '' +                                                                                                          // 10158\n\t\t\t'<td class=\"' + classes.join(' ') + '\" data-date=\"' + date.format() + '\">' +                                        // 10159\n\t\t\t\tdate.date() +                                                                                                      // 10160\n\t\t\t'</td>';                                                                                                            // 10161\n\t},                                                                                                                    // 10162\n                                                                                                                       // 10163\n                                                                                                                       // 10164\n\t// Generates an HTML attribute string for setting the width of the week number column, if it is known                 // 10165\n\tweekNumberStyleAttr: function() {                                                                                     // 10166\n\t\tif (this.weekNumberWidth !== null) {                                                                                 // 10167\n\t\t\treturn 'style=\"width:' + this.weekNumberWidth + 'px\"';                                                              // 10168\n\t\t}                                                                                                                    // 10169\n\t\treturn '';                                                                                                           // 10170\n\t},                                                                                                                    // 10171\n                                                                                                                       // 10172\n                                                                                                                       // 10173\n\t// Determines whether each row should have a constant height                                                          // 10174\n\thasRigidRows: function() {                                                                                            // 10175\n\t\tvar eventLimit = this.opt('eventLimit');                                                                             // 10176\n\t\treturn eventLimit && typeof eventLimit !== 'number';                                                                 // 10177\n\t},                                                                                                                    // 10178\n                                                                                                                       // 10179\n                                                                                                                       // 10180\n\t/* Dimensions                                                                                                         // 10181\n\t------------------------------------------------------------------------------------------------------------------*/  // 10182\n                                                                                                                       // 10183\n                                                                                                                       // 10184\n\t// Refreshes the horizontal dimensions of the view                                                                    // 10185\n\tupdateWidth: function() {                                                                                             // 10186\n\t\tif (this.weekNumbersVisible) {                                                                                       // 10187\n\t\t\t// Make sure all week number cells running down the side have the same width.                                       // 10188\n\t\t\t// Record the width for cells created later.                                                                        // 10189\n\t\t\tthis.weekNumberWidth = matchCellWidths(                                                                             // 10190\n\t\t\t\tthis.el.find('.fc-week-number')                                                                                    // 10191\n\t\t\t);                                                                                                                  // 10192\n\t\t}                                                                                                                    // 10193\n\t},                                                                                                                    // 10194\n                                                                                                                       // 10195\n                                                                                                                       // 10196\n\t// Adjusts the vertical dimensions of the view to the specified values                                                // 10197\n\tsetHeight: function(totalHeight, isAuto) {                                                                            // 10198\n\t\tvar eventLimit = this.opt('eventLimit');                                                                             // 10199\n\t\tvar scrollerHeight;                                                                                                  // 10200\n                                                                                                                       // 10201\n\t\t// reset all heights to be natural                                                                                   // 10202\n\t\tunsetScroller(this.scrollerEl);                                                                                      // 10203\n\t\tuncompensateScroll(this.headRowEl);                                                                                  // 10204\n                                                                                                                       // 10205\n\t\tthis.dayGrid.destroySegPopover(); // kill the \"more\" popover if displayed                                            // 10206\n                                                                                                                       // 10207\n\t\t// is the event limit a constant level number?                                                                       // 10208\n\t\tif (eventLimit && typeof eventLimit === 'number') {                                                                  // 10209\n\t\t\tthis.dayGrid.limitRows(eventLimit); // limit the levels first so the height can redistribute after                  // 10210\n\t\t}                                                                                                                    // 10211\n                                                                                                                       // 10212\n\t\tscrollerHeight = this.computeScrollerHeight(totalHeight);                                                            // 10213\n\t\tthis.setGridHeight(scrollerHeight, isAuto);                                                                          // 10214\n                                                                                                                       // 10215\n\t\t// is the event limit dynamically calculated?                                                                        // 10216\n\t\tif (eventLimit && typeof eventLimit !== 'number') {                                                                  // 10217\n\t\t\tthis.dayGrid.limitRows(eventLimit); // limit the levels after the grid's row heights have been set                  // 10218\n\t\t}                                                                                                                    // 10219\n                                                                                                                       // 10220\n\t\tif (!isAuto && setPotentialScroller(this.scrollerEl, scrollerHeight)) { // using scrollbars?                         // 10221\n                                                                                                                       // 10222\n\t\t\tcompensateScroll(this.headRowEl, getScrollbarWidths(this.scrollerEl));                                              // 10223\n                                                                                                                       // 10224\n\t\t\t// doing the scrollbar compensation might have created text overflow which created more height. redo                // 10225\n\t\t\tscrollerHeight = this.computeScrollerHeight(totalHeight);                                                           // 10226\n\t\t\tthis.scrollerEl.height(scrollerHeight);                                                                             // 10227\n\t\t}                                                                                                                    // 10228\n\t},                                                                                                                    // 10229\n                                                                                                                       // 10230\n                                                                                                                       // 10231\n\t// Sets the height of just the DayGrid component in this view                                                         // 10232\n\tsetGridHeight: function(height, isAuto) {                                                                             // 10233\n\t\tif (isAuto) {                                                                                                        // 10234\n\t\t\tundistributeHeight(this.dayGrid.rowEls); // let the rows be their natural height with no expanding                  // 10235\n\t\t}                                                                                                                    // 10236\n\t\telse {                                                                                                               // 10237\n\t\t\tdistributeHeight(this.dayGrid.rowEls, height, true); // true = compensate for height-hogging rows                   // 10238\n\t\t}                                                                                                                    // 10239\n\t},                                                                                                                    // 10240\n                                                                                                                       // 10241\n                                                                                                                       // 10242\n\t/* Events                                                                                                             // 10243\n\t------------------------------------------------------------------------------------------------------------------*/  // 10244\n                                                                                                                       // 10245\n                                                                                                                       // 10246\n\t// Renders the given events onto the view and populates the segments array                                            // 10247\n\trenderEvents: function(events) {                                                                                      // 10248\n\t\tthis.dayGrid.renderEvents(events);                                                                                   // 10249\n                                                                                                                       // 10250\n\t\tthis.updateHeight(); // must compensate for events that overflow the row                                             // 10251\n\t},                                                                                                                    // 10252\n                                                                                                                       // 10253\n                                                                                                                       // 10254\n\t// Retrieves all segment objects that are rendered in the view                                                        // 10255\n\tgetEventSegs: function() {                                                                                            // 10256\n\t\treturn this.dayGrid.getEventSegs();                                                                                  // 10257\n\t},                                                                                                                    // 10258\n                                                                                                                       // 10259\n                                                                                                                       // 10260\n\t// Unrenders all event elements and clears internal segment data                                                      // 10261\n\tdestroyEvents: function() {                                                                                           // 10262\n\t\tthis.dayGrid.destroyEvents();                                                                                        // 10263\n                                                                                                                       // 10264\n\t\t// we DON'T need to call updateHeight() because:                                                                     // 10265\n\t\t// A) a renderEvents() call always happens after this, which will eventually call updateHeight()                     // 10266\n\t\t// B) in IE8, this causes a flash whenever events are rerendered                                                     // 10267\n\t},                                                                                                                    // 10268\n                                                                                                                       // 10269\n                                                                                                                       // 10270\n\t/* Dragging (for both events and external elements)                                                                   // 10271\n\t------------------------------------------------------------------------------------------------------------------*/  // 10272\n                                                                                                                       // 10273\n                                                                                                                       // 10274\n\t// A returned value of `true` signals that a mock \"helper\" event has been rendered.                                   // 10275\n\trenderDrag: function(dropLocation, seg) {                                                                             // 10276\n\t\treturn this.dayGrid.renderDrag(dropLocation, seg);                                                                   // 10277\n\t},                                                                                                                    // 10278\n                                                                                                                       // 10279\n                                                                                                                       // 10280\n\tdestroyDrag: function() {                                                                                             // 10281\n\t\tthis.dayGrid.destroyDrag();                                                                                          // 10282\n\t},                                                                                                                    // 10283\n                                                                                                                       // 10284\n                                                                                                                       // 10285\n\t/* Selection                                                                                                          // 10286\n\t------------------------------------------------------------------------------------------------------------------*/  // 10287\n                                                                                                                       // 10288\n                                                                                                                       // 10289\n\t// Renders a visual indication of a selection                                                                         // 10290\n\trenderSelection: function(range) {                                                                                    // 10291\n\t\tthis.dayGrid.renderSelection(range);                                                                                 // 10292\n\t},                                                                                                                    // 10293\n                                                                                                                       // 10294\n                                                                                                                       // 10295\n\t// Unrenders a visual indications of a selection                                                                      // 10296\n\tdestroySelection: function() {                                                                                        // 10297\n\t\tthis.dayGrid.destroySelection();                                                                                     // 10298\n\t}                                                                                                                     // 10299\n                                                                                                                       // 10300\n});                                                                                                                    // 10301\n                                                                                                                       // 10302\n;;                                                                                                                     // 10303\n                                                                                                                       // 10304\n/* A month view with day cells running in rows (one-per-week) and columns                                              // 10305\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 10307\nvar MonthView = fcViews.month = BasicView.extend({                                                                     // 10308\n                                                                                                                       // 10309\n\t// Produces information about what range to display                                                                   // 10310\n\tcomputeRange: function(date) {                                                                                        // 10311\n\t\tvar range = BasicView.prototype.computeRange.call(this, date); // get value from super-method                        // 10312\n\t\tvar rowCnt;                                                                                                          // 10313\n                                                                                                                       // 10314\n\t\t// ensure 6 weeks                                                                                                    // 10315\n\t\tif (this.isFixedWeeks()) {                                                                                           // 10316\n\t\t\trowCnt = Math.ceil(range.end.diff(range.start, 'weeks', true)); // could be partial weeks due to hiddenDays         // 10317\n\t\t\trange.end.add(6 - rowCnt, 'weeks');                                                                                 // 10318\n\t\t}                                                                                                                    // 10319\n                                                                                                                       // 10320\n\t\treturn range;                                                                                                        // 10321\n\t},                                                                                                                    // 10322\n                                                                                                                       // 10323\n                                                                                                                       // 10324\n\t// Overrides the default BasicView behavior to have special multi-week auto-height logic                              // 10325\n\tsetGridHeight: function(height, isAuto) {                                                                             // 10326\n                                                                                                                       // 10327\n\t\tisAuto = isAuto || this.opt('weekMode') === 'variable'; // LEGACY: weekMode is deprecated                            // 10328\n                                                                                                                       // 10329\n\t\t// if auto, make the height of each row the height that it would be if there were 6 weeks                            // 10330\n\t\tif (isAuto) {                                                                                                        // 10331\n\t\t\theight *= this.rowCnt / 6;                                                                                          // 10332\n\t\t}                                                                                                                    // 10333\n                                                                                                                       // 10334\n\t\tdistributeHeight(this.dayGrid.rowEls, height, !isAuto); // if auto, don't compensate for height-hogging rows         // 10335\n\t},                                                                                                                    // 10336\n                                                                                                                       // 10337\n                                                                                                                       // 10338\n\tisFixedWeeks: function() {                                                                                            // 10339\n\t\tvar weekMode = this.opt('weekMode'); // LEGACY: weekMode is deprecated                                               // 10340\n\t\tif (weekMode) {                                                                                                      // 10341\n\t\t\treturn weekMode === 'fixed'; // if any other type of weekMode, assume NOT fixed                                     // 10342\n\t\t}                                                                                                                    // 10343\n                                                                                                                       // 10344\n\t\treturn this.opt('fixedWeekCount');                                                                                   // 10345\n\t}                                                                                                                     // 10346\n                                                                                                                       // 10347\n});                                                                                                                    // 10348\n                                                                                                                       // 10349\nMonthView.duration = { months: 1 }; // important for prev/next                                                         // 10350\n                                                                                                                       // 10351\nMonthView.defaults = {                                                                                                 // 10352\n\tfixedWeekCount: true                                                                                                  // 10353\n};                                                                                                                     // 10354\n;;                                                                                                                     // 10355\n                                                                                                                       // 10356\n/* A week view with simple day cells running horizontally                                                              // 10357\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 10359\nfcViews.basicWeek = {                                                                                                  // 10360\n\ttype: 'basic',                                                                                                        // 10361\n\tduration: { weeks: 1 }                                                                                                // 10362\n};                                                                                                                     // 10363\n;;                                                                                                                     // 10364\n                                                                                                                       // 10365\n/* A view with a single simple day cell                                                                                // 10366\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 10368\nfcViews.basicDay = {                                                                                                   // 10369\n\ttype: 'basic',                                                                                                        // 10370\n\tduration: { days: 1 }                                                                                                 // 10371\n};                                                                                                                     // 10372\n;;                                                                                                                     // 10373\n                                                                                                                       // 10374\n/* An abstract class for all agenda-related views. Displays one more columns with time slots running vertically.       // 10375\n----------------------------------------------------------------------------------------------------------------------*/\n// Is a manager for the TimeGrid subcomponent and possibly the DayGrid subcomponent (if allDaySlot is on).             // 10377\n// Responsible for managing width/height.                                                                              // 10378\n                                                                                                                       // 10379\nvar AGENDA_DEFAULTS = {                                                                                                // 10380\n\tallDaySlot: true,                                                                                                     // 10381\n\tallDayText: 'all-day',                                                                                                // 10382\n\tscrollTime: '06:00:00',                                                                                               // 10383\n\tslotDuration: '00:30:00',                                                                                             // 10384\n\tminTime: '00:00:00',                                                                                                  // 10385\n\tmaxTime: '24:00:00',                                                                                                  // 10386\n\tslotEventOverlap: true // a bad name. confused with overlap/constraint system                                         // 10387\n};                                                                                                                     // 10388\n                                                                                                                       // 10389\nvar AGENDA_ALL_DAY_EVENT_LIMIT = 5;                                                                                    // 10390\n                                                                                                                       // 10391\nvar AgendaView = fcViews.agenda = View.extend({                                                                        // 10392\n                                                                                                                       // 10393\n\ttimeGrid: null, // the main time-grid subcomponent of this view                                                       // 10394\n\tdayGrid: null, // the \"all-day\" subcomponent. if all-day is turned off, this will be null                             // 10395\n                                                                                                                       // 10396\n\taxisWidth: null, // the width of the time axis running down the side                                                  // 10397\n                                                                                                                       // 10398\n\tnoScrollRowEls: null, // set of fake row elements that must compensate when scrollerEl has scrollbars                 // 10399\n                                                                                                                       // 10400\n\t// when the time-grid isn't tall enough to occupy the given height, we render an <hr> underneath                      // 10401\n\tbottomRuleEl: null,                                                                                                   // 10402\n\tbottomRuleHeight: null,                                                                                               // 10403\n                                                                                                                       // 10404\n                                                                                                                       // 10405\n\tinitialize: function() {                                                                                              // 10406\n\t\tthis.timeGrid = new TimeGrid(this);                                                                                  // 10407\n                                                                                                                       // 10408\n\t\tif (this.opt('allDaySlot')) { // should we display the \"all-day\" area?                                               // 10409\n\t\t\tthis.dayGrid = new DayGrid(this); // the all-day subcomponent of this view                                          // 10410\n                                                                                                                       // 10411\n\t\t\t// the coordinate grid will be a combination of both subcomponents' grids                                           // 10412\n\t\t\tthis.coordMap = new ComboCoordMap([                                                                                 // 10413\n\t\t\t\tthis.dayGrid.coordMap,                                                                                             // 10414\n\t\t\t\tthis.timeGrid.coordMap                                                                                             // 10415\n\t\t\t]);                                                                                                                 // 10416\n\t\t}                                                                                                                    // 10417\n\t\telse {                                                                                                               // 10418\n\t\t\tthis.coordMap = this.timeGrid.coordMap;                                                                             // 10419\n\t\t}                                                                                                                    // 10420\n\t},                                                                                                                    // 10421\n                                                                                                                       // 10422\n                                                                                                                       // 10423\n\t/* Rendering                                                                                                          // 10424\n\t------------------------------------------------------------------------------------------------------------------*/  // 10425\n                                                                                                                       // 10426\n                                                                                                                       // 10427\n\t// Sets the display range and computes all necessary dates                                                            // 10428\n\tsetRange: function(range) {                                                                                           // 10429\n\t\tView.prototype.setRange.call(this, range); // call the super-method                                                  // 10430\n                                                                                                                       // 10431\n\t\tthis.timeGrid.setRange(range);                                                                                       // 10432\n\t\tif (this.dayGrid) {                                                                                                  // 10433\n\t\t\tthis.dayGrid.setRange(range);                                                                                       // 10434\n\t\t}                                                                                                                    // 10435\n\t},                                                                                                                    // 10436\n                                                                                                                       // 10437\n                                                                                                                       // 10438\n\t// Renders the view into `this.el`, which has already been assigned                                                   // 10439\n\trender: function() {                                                                                                  // 10440\n                                                                                                                       // 10441\n\t\tthis.el.addClass('fc-agenda-view').html(this.renderHtml());                                                          // 10442\n                                                                                                                       // 10443\n\t\t// the element that wraps the time-grid that will probably scroll                                                    // 10444\n\t\tthis.scrollerEl = this.el.find('.fc-time-grid-container');                                                           // 10445\n\t\tthis.timeGrid.coordMap.containerEl = this.scrollerEl; // don't accept clicks/etc outside of this                     // 10446\n                                                                                                                       // 10447\n\t\tthis.timeGrid.setElement(this.el.find('.fc-time-grid'));                                                             // 10448\n\t\tthis.timeGrid.renderDates();                                                                                         // 10449\n                                                                                                                       // 10450\n\t\t// the <hr> that sometimes displays under the time-grid                                                              // 10451\n\t\tthis.bottomRuleEl = $('<hr class=\"fc-divider ' + this.widgetHeaderClass + '\"/>')                                     // 10452\n\t\t\t.appendTo(this.timeGrid.el); // inject it into the time-grid                                                        // 10453\n                                                                                                                       // 10454\n\t\tif (this.dayGrid) {                                                                                                  // 10455\n\t\t\tthis.dayGrid.setElement(this.el.find('.fc-day-grid'));                                                              // 10456\n\t\t\tthis.dayGrid.renderDates();                                                                                         // 10457\n                                                                                                                       // 10458\n\t\t\t// have the day-grid extend it's coordinate area over the <hr> dividing the two grids                               // 10459\n\t\t\tthis.dayGrid.bottomCoordPadding = this.dayGrid.el.next('hr').outerHeight();                                         // 10460\n\t\t}                                                                                                                    // 10461\n                                                                                                                       // 10462\n\t\tthis.noScrollRowEls = this.el.find('.fc-row:not(.fc-scroller *)'); // fake rows not within the scroller              // 10463\n\t},                                                                                                                    // 10464\n                                                                                                                       // 10465\n                                                                                                                       // 10466\n\t// Unrenders the content of the view. Since we haven't separated skeleton rendering from date rendering,              // 10467\n\t// always completely kill each grid's rendering.                                                                      // 10468\n\tdestroy: function() {                                                                                                 // 10469\n\t\tthis.timeGrid.destroyDates();                                                                                        // 10470\n\t\tthis.timeGrid.removeElement();                                                                                       // 10471\n                                                                                                                       // 10472\n\t\tif (this.dayGrid) {                                                                                                  // 10473\n\t\t\tthis.dayGrid.destroyDates();                                                                                        // 10474\n\t\t\tthis.dayGrid.removeElement();                                                                                       // 10475\n\t\t}                                                                                                                    // 10476\n\t},                                                                                                                    // 10477\n                                                                                                                       // 10478\n                                                                                                                       // 10479\n\trenderBusinessHours: function() {                                                                                     // 10480\n\t\tthis.timeGrid.renderBusinessHours();                                                                                 // 10481\n                                                                                                                       // 10482\n\t\tif (this.dayGrid) {                                                                                                  // 10483\n\t\t\tthis.dayGrid.renderBusinessHours();                                                                                 // 10484\n\t\t}                                                                                                                    // 10485\n\t},                                                                                                                    // 10486\n                                                                                                                       // 10487\n                                                                                                                       // 10488\n\t// Builds the HTML skeleton for the view.                                                                             // 10489\n\t// The day-grid and time-grid components will render inside containers defined by this HTML.                          // 10490\n\trenderHtml: function() {                                                                                              // 10491\n\t\treturn '' +                                                                                                          // 10492\n\t\t\t'<table>' +                                                                                                         // 10493\n\t\t\t\t'<thead class=\"fc-head\">' +                                                                                        // 10494\n\t\t\t\t\t'<tr>' +                                                                                                          // 10495\n\t\t\t\t\t\t'<td class=\"' + this.widgetHeaderClass + '\">' +                                                                  // 10496\n\t\t\t\t\t\t\tthis.timeGrid.headHtml() + // render the day-of-week headers                                                    // 10497\n\t\t\t\t\t\t'</td>' +                                                                                                        // 10498\n\t\t\t\t\t'</tr>' +                                                                                                         // 10499\n\t\t\t\t'</thead>' +                                                                                                       // 10500\n\t\t\t\t'<tbody class=\"fc-body\">' +                                                                                        // 10501\n\t\t\t\t\t'<tr>' +                                                                                                          // 10502\n\t\t\t\t\t\t'<td class=\"' + this.widgetContentClass + '\">' +                                                                 // 10503\n\t\t\t\t\t\t\t(this.dayGrid ?                                                                                                 // 10504\n\t\t\t\t\t\t\t\t'<div class=\"fc-day-grid\"/>' +                                                                                 // 10505\n\t\t\t\t\t\t\t\t'<hr class=\"fc-divider ' + this.widgetHeaderClass + '\"/>' :                                                    // 10506\n\t\t\t\t\t\t\t\t''                                                                                                             // 10507\n\t\t\t\t\t\t\t\t) +                                                                                                            // 10508\n\t\t\t\t\t\t\t'<div class=\"fc-time-grid-container\">' +                                                                        // 10509\n\t\t\t\t\t\t\t\t'<div class=\"fc-time-grid\"/>' +                                                                                // 10510\n\t\t\t\t\t\t\t'</div>' +                                                                                                      // 10511\n\t\t\t\t\t\t'</td>' +                                                                                                        // 10512\n\t\t\t\t\t'</tr>' +                                                                                                         // 10513\n\t\t\t\t'</tbody>' +                                                                                                       // 10514\n\t\t\t'</table>';                                                                                                         // 10515\n\t},                                                                                                                    // 10516\n                                                                                                                       // 10517\n                                                                                                                       // 10518\n\t// Generates the HTML that will go before the day-of week header cells.                                               // 10519\n\t// Queried by the TimeGrid subcomponent when generating rows. Ordering depends on isRTL.                              // 10520\n\theadIntroHtml: function() {                                                                                           // 10521\n\t\tvar date;                                                                                                            // 10522\n\t\tvar weekText;                                                                                                        // 10523\n                                                                                                                       // 10524\n\t\tif (this.opt('weekNumbers')) {                                                                                       // 10525\n\t\t\tdate = this.timeGrid.getCell(0).start;                                                                              // 10526\n\t\t\tweekText = date.format(this.opt('smallWeekFormat'));                                                                // 10527\n                                                                                                                       // 10528\n\t\t\treturn '' +                                                                                                         // 10529\n\t\t\t\t'<th class=\"fc-axis fc-week-number ' + this.widgetHeaderClass + '\" ' + this.axisStyleAttr() + '>' +                // 10530\n\t\t\t\t\t'<span>' + // needed for matchCellWidths                                                                          // 10531\n\t\t\t\t\t\thtmlEscape(weekText) +                                                                                           // 10532\n\t\t\t\t\t'</span>' +                                                                                                       // 10533\n\t\t\t\t'</th>';                                                                                                           // 10534\n\t\t}                                                                                                                    // 10535\n\t\telse {                                                                                                               // 10536\n\t\t\treturn '<th class=\"fc-axis ' + this.widgetHeaderClass + '\" ' + this.axisStyleAttr() + '></th>';                     // 10537\n\t\t}                                                                                                                    // 10538\n\t},                                                                                                                    // 10539\n                                                                                                                       // 10540\n                                                                                                                       // 10541\n\t// Generates the HTML that goes before the all-day cells.                                                             // 10542\n\t// Queried by the DayGrid subcomponent when generating rows. Ordering depends on isRTL.                               // 10543\n\tdayIntroHtml: function() {                                                                                            // 10544\n\t\treturn '' +                                                                                                          // 10545\n\t\t\t'<td class=\"fc-axis ' + this.widgetContentClass + '\" ' + this.axisStyleAttr() + '>' +                               // 10546\n\t\t\t\t'<span>' + // needed for matchCellWidths                                                                           // 10547\n\t\t\t\t\t(this.opt('allDayHtml') || htmlEscape(this.opt('allDayText'))) +                                                  // 10548\n\t\t\t\t'</span>' +                                                                                                        // 10549\n\t\t\t'</td>';                                                                                                            // 10550\n\t},                                                                                                                    // 10551\n                                                                                                                       // 10552\n                                                                                                                       // 10553\n\t// Generates the HTML that goes before the bg of the TimeGrid slot area. Long vertical column.                        // 10554\n\tslotBgIntroHtml: function() {                                                                                         // 10555\n\t\treturn '<td class=\"fc-axis ' + this.widgetContentClass + '\" ' + this.axisStyleAttr() + '></td>';                     // 10556\n\t},                                                                                                                    // 10557\n                                                                                                                       // 10558\n                                                                                                                       // 10559\n\t// Generates the HTML that goes before all other types of cells.                                                      // 10560\n\t// Affects content-skeleton, helper-skeleton, highlight-skeleton for both the time-grid and day-grid.                 // 10561\n\t// Queried by the TimeGrid and DayGrid subcomponents when generating rows. Ordering depends on isRTL.                 // 10562\n\tintroHtml: function() {                                                                                               // 10563\n\t\treturn '<td class=\"fc-axis\" ' + this.axisStyleAttr() + '></td>';                                                     // 10564\n\t},                                                                                                                    // 10565\n                                                                                                                       // 10566\n                                                                                                                       // 10567\n\t// Generates an HTML attribute string for setting the width of the axis, if it is known                               // 10568\n\taxisStyleAttr: function() {                                                                                           // 10569\n\t\tif (this.axisWidth !== null) {                                                                                       // 10570\n\t\t\t return 'style=\"width:' + this.axisWidth + 'px\"';                                                                   // 10571\n\t\t}                                                                                                                    // 10572\n\t\treturn '';                                                                                                           // 10573\n\t},                                                                                                                    // 10574\n                                                                                                                       // 10575\n                                                                                                                       // 10576\n\t/* Dimensions                                                                                                         // 10577\n\t------------------------------------------------------------------------------------------------------------------*/  // 10578\n                                                                                                                       // 10579\n                                                                                                                       // 10580\n\tupdateSize: function(isResize) {                                                                                      // 10581\n\t\tthis.timeGrid.updateSize(isResize);                                                                                  // 10582\n                                                                                                                       // 10583\n\t\tView.prototype.updateSize.call(this, isResize); // call the super-method                                             // 10584\n\t},                                                                                                                    // 10585\n                                                                                                                       // 10586\n                                                                                                                       // 10587\n\t// Refreshes the horizontal dimensions of the view                                                                    // 10588\n\tupdateWidth: function() {                                                                                             // 10589\n\t\t// make all axis cells line up, and record the width so newly created axis cells will have it                        // 10590\n\t\tthis.axisWidth = matchCellWidths(this.el.find('.fc-axis'));                                                          // 10591\n\t},                                                                                                                    // 10592\n                                                                                                                       // 10593\n                                                                                                                       // 10594\n\t// Adjusts the vertical dimensions of the view to the specified values                                                // 10595\n\tsetHeight: function(totalHeight, isAuto) {                                                                            // 10596\n\t\tvar eventLimit;                                                                                                      // 10597\n\t\tvar scrollerHeight;                                                                                                  // 10598\n                                                                                                                       // 10599\n\t\tif (this.bottomRuleHeight === null) {                                                                                // 10600\n\t\t\t// calculate the height of the rule the very first time                                                             // 10601\n\t\t\tthis.bottomRuleHeight = this.bottomRuleEl.outerHeight();                                                            // 10602\n\t\t}                                                                                                                    // 10603\n\t\tthis.bottomRuleEl.hide(); // .show() will be called later if this <hr> is necessary                                  // 10604\n                                                                                                                       // 10605\n\t\t// reset all dimensions back to the original state                                                                   // 10606\n\t\tthis.scrollerEl.css('overflow', '');                                                                                 // 10607\n\t\tunsetScroller(this.scrollerEl);                                                                                      // 10608\n\t\tuncompensateScroll(this.noScrollRowEls);                                                                             // 10609\n                                                                                                                       // 10610\n\t\t// limit number of events in the all-day area                                                                        // 10611\n\t\tif (this.dayGrid) {                                                                                                  // 10612\n\t\t\tthis.dayGrid.destroySegPopover(); // kill the \"more\" popover if displayed                                           // 10613\n                                                                                                                       // 10614\n\t\t\teventLimit = this.opt('eventLimit');                                                                                // 10615\n\t\t\tif (eventLimit && typeof eventLimit !== 'number') {                                                                 // 10616\n\t\t\t\teventLimit = AGENDA_ALL_DAY_EVENT_LIMIT; // make sure \"auto\" goes to a real number                                 // 10617\n\t\t\t}                                                                                                                   // 10618\n\t\t\tif (eventLimit) {                                                                                                   // 10619\n\t\t\t\tthis.dayGrid.limitRows(eventLimit);                                                                                // 10620\n\t\t\t}                                                                                                                   // 10621\n\t\t}                                                                                                                    // 10622\n                                                                                                                       // 10623\n\t\tif (!isAuto) { // should we force dimensions of the scroll container, or let the contents be natural height?         // 10624\n                                                                                                                       // 10625\n\t\t\tscrollerHeight = this.computeScrollerHeight(totalHeight);                                                           // 10626\n\t\t\tif (setPotentialScroller(this.scrollerEl, scrollerHeight)) { // using scrollbars?                                   // 10627\n                                                                                                                       // 10628\n\t\t\t\t// make the all-day and header rows lines up                                                                       // 10629\n\t\t\t\tcompensateScroll(this.noScrollRowEls, getScrollbarWidths(this.scrollerEl));                                        // 10630\n                                                                                                                       // 10631\n\t\t\t\t// the scrollbar compensation might have changed text flow, which might affect height, so recalculate              // 10632\n\t\t\t\t// and reapply the desired height to the scroller.                                                                 // 10633\n\t\t\t\tscrollerHeight = this.computeScrollerHeight(totalHeight);                                                          // 10634\n\t\t\t\tthis.scrollerEl.height(scrollerHeight);                                                                            // 10635\n\t\t\t}                                                                                                                   // 10636\n\t\t\telse { // no scrollbars                                                                                             // 10637\n\t\t\t\t// still, force a height and display the bottom rule (marks the end of day)                                        // 10638\n\t\t\t\tthis.scrollerEl.height(scrollerHeight).css('overflow', 'hidden'); // in case <hr> goes outside                     // 10639\n\t\t\t\tthis.bottomRuleEl.show();                                                                                          // 10640\n\t\t\t}                                                                                                                   // 10641\n\t\t}                                                                                                                    // 10642\n\t},                                                                                                                    // 10643\n                                                                                                                       // 10644\n                                                                                                                       // 10645\n\t// Computes the initial pre-configured scroll state prior to allowing the user to change it                           // 10646\n\tcomputeInitialScroll: function() {                                                                                    // 10647\n\t\tvar scrollTime = moment.duration(this.opt('scrollTime'));                                                            // 10648\n\t\tvar top = this.timeGrid.computeTimeTop(scrollTime);                                                                  // 10649\n                                                                                                                       // 10650\n\t\t// zoom can give weird floating-point values. rather scroll a little bit further                                     // 10651\n\t\ttop = Math.ceil(top);                                                                                                // 10652\n                                                                                                                       // 10653\n\t\tif (top) {                                                                                                           // 10654\n\t\t\ttop++; // to overcome top border that slots beyond the first have. looks better                                     // 10655\n\t\t}                                                                                                                    // 10656\n                                                                                                                       // 10657\n\t\treturn top;                                                                                                          // 10658\n\t},                                                                                                                    // 10659\n                                                                                                                       // 10660\n                                                                                                                       // 10661\n\t/* Events                                                                                                             // 10662\n\t------------------------------------------------------------------------------------------------------------------*/  // 10663\n                                                                                                                       // 10664\n                                                                                                                       // 10665\n\t// Renders events onto the view and populates the View's segment array                                                // 10666\n\trenderEvents: function(events) {                                                                                      // 10667\n\t\tvar dayEvents = [];                                                                                                  // 10668\n\t\tvar timedEvents = [];                                                                                                // 10669\n\t\tvar daySegs = [];                                                                                                    // 10670\n\t\tvar timedSegs;                                                                                                       // 10671\n\t\tvar i;                                                                                                               // 10672\n                                                                                                                       // 10673\n\t\t// separate the events into all-day and timed                                                                        // 10674\n\t\tfor (i = 0; i < events.length; i++) {                                                                                // 10675\n\t\t\tif (events[i].allDay) {                                                                                             // 10676\n\t\t\t\tdayEvents.push(events[i]);                                                                                         // 10677\n\t\t\t}                                                                                                                   // 10678\n\t\t\telse {                                                                                                              // 10679\n\t\t\t\ttimedEvents.push(events[i]);                                                                                       // 10680\n\t\t\t}                                                                                                                   // 10681\n\t\t}                                                                                                                    // 10682\n                                                                                                                       // 10683\n\t\t// render the events in the subcomponents                                                                            // 10684\n\t\ttimedSegs = this.timeGrid.renderEvents(timedEvents);                                                                 // 10685\n\t\tif (this.dayGrid) {                                                                                                  // 10686\n\t\t\tdaySegs = this.dayGrid.renderEvents(dayEvents);                                                                     // 10687\n\t\t}                                                                                                                    // 10688\n                                                                                                                       // 10689\n\t\t// the all-day area is flexible and might have a lot of events, so shift the height                                  // 10690\n\t\tthis.updateHeight();                                                                                                 // 10691\n\t},                                                                                                                    // 10692\n                                                                                                                       // 10693\n                                                                                                                       // 10694\n\t// Retrieves all segment objects that are rendered in the view                                                        // 10695\n\tgetEventSegs: function() {                                                                                            // 10696\n\t\treturn this.timeGrid.getEventSegs().concat(                                                                          // 10697\n\t\t\tthis.dayGrid ? this.dayGrid.getEventSegs() : []                                                                     // 10698\n\t\t);                                                                                                                   // 10699\n\t},                                                                                                                    // 10700\n                                                                                                                       // 10701\n                                                                                                                       // 10702\n\t// Unrenders all event elements and clears internal segment data                                                      // 10703\n\tdestroyEvents: function() {                                                                                           // 10704\n                                                                                                                       // 10705\n\t\t// destroy the events in the subcomponents                                                                           // 10706\n\t\tthis.timeGrid.destroyEvents();                                                                                       // 10707\n\t\tif (this.dayGrid) {                                                                                                  // 10708\n\t\t\tthis.dayGrid.destroyEvents();                                                                                       // 10709\n\t\t}                                                                                                                    // 10710\n                                                                                                                       // 10711\n\t\t// we DON'T need to call updateHeight() because:                                                                     // 10712\n\t\t// A) a renderEvents() call always happens after this, which will eventually call updateHeight()                     // 10713\n\t\t// B) in IE8, this causes a flash whenever events are rerendered                                                     // 10714\n\t},                                                                                                                    // 10715\n                                                                                                                       // 10716\n                                                                                                                       // 10717\n\t/* Dragging (for events and external elements)                                                                        // 10718\n\t------------------------------------------------------------------------------------------------------------------*/  // 10719\n                                                                                                                       // 10720\n                                                                                                                       // 10721\n\t// A returned value of `true` signals that a mock \"helper\" event has been rendered.                                   // 10722\n\trenderDrag: function(dropLocation, seg) {                                                                             // 10723\n\t\tif (dropLocation.start.hasTime()) {                                                                                  // 10724\n\t\t\treturn this.timeGrid.renderDrag(dropLocation, seg);                                                                 // 10725\n\t\t}                                                                                                                    // 10726\n\t\telse if (this.dayGrid) {                                                                                             // 10727\n\t\t\treturn this.dayGrid.renderDrag(dropLocation, seg);                                                                  // 10728\n\t\t}                                                                                                                    // 10729\n\t},                                                                                                                    // 10730\n                                                                                                                       // 10731\n                                                                                                                       // 10732\n\tdestroyDrag: function() {                                                                                             // 10733\n\t\tthis.timeGrid.destroyDrag();                                                                                         // 10734\n\t\tif (this.dayGrid) {                                                                                                  // 10735\n\t\t\tthis.dayGrid.destroyDrag();                                                                                         // 10736\n\t\t}                                                                                                                    // 10737\n\t},                                                                                                                    // 10738\n                                                                                                                       // 10739\n                                                                                                                       // 10740\n\t/* Selection                                                                                                          // 10741\n\t------------------------------------------------------------------------------------------------------------------*/  // 10742\n                                                                                                                       // 10743\n                                                                                                                       // 10744\n\t// Renders a visual indication of a selection                                                                         // 10745\n\trenderSelection: function(range) {                                                                                    // 10746\n\t\tif (range.start.hasTime() || range.end.hasTime()) {                                                                  // 10747\n\t\t\tthis.timeGrid.renderSelection(range);                                                                               // 10748\n\t\t}                                                                                                                    // 10749\n\t\telse if (this.dayGrid) {                                                                                             // 10750\n\t\t\tthis.dayGrid.renderSelection(range);                                                                                // 10751\n\t\t}                                                                                                                    // 10752\n\t},                                                                                                                    // 10753\n                                                                                                                       // 10754\n                                                                                                                       // 10755\n\t// Unrenders a visual indications of a selection                                                                      // 10756\n\tdestroySelection: function() {                                                                                        // 10757\n\t\tthis.timeGrid.destroySelection();                                                                                    // 10758\n\t\tif (this.dayGrid) {                                                                                                  // 10759\n\t\t\tthis.dayGrid.destroySelection();                                                                                    // 10760\n\t\t}                                                                                                                    // 10761\n\t}                                                                                                                     // 10762\n                                                                                                                       // 10763\n});                                                                                                                    // 10764\n                                                                                                                       // 10765\nAgendaView.defaults = AGENDA_DEFAULTS;                                                                                 // 10766\n                                                                                                                       // 10767\n;;                                                                                                                     // 10768\n                                                                                                                       // 10769\n/* A week view with an all-day cell area at the top, and a time grid below                                             // 10770\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 10772\nfcViews.agendaWeek = {                                                                                                 // 10773\n\ttype: 'agenda',                                                                                                       // 10774\n\tduration: { weeks: 1 }                                                                                                // 10775\n};                                                                                                                     // 10776\n;;                                                                                                                     // 10777\n                                                                                                                       // 10778\n/* A day view with an all-day cell area at the top, and a time grid below                                              // 10779\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 10781\nfcViews.agendaDay = {                                                                                                  // 10782\n\ttype: 'agenda',                                                                                                       // 10783\n\tduration: { days: 1 }                                                                                                 // 10784\n};                                                                                                                     // 10785\n;;                                                                                                                     // 10786\n                                                                                                                       // 10787\nreturn fc; // export for Node/CommonJS                                                                                 // 10788\n});                                                                                                                    // 10789\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/rzymek:fullcalendar/fullcalendar/dist/lang-all.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n(function(e){\"function\"==typeof define&&define.amd?define([\"jquery\",\"moment\"],e):e(jQuery,moment)})(function(e,t){(function(){(t.defineLocale||t.lang).call(t,\"ar-ma\",{months:\"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر\".split(\"_\"),monthsShort:\"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر\".split(\"_\"),weekdays:\"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت\".split(\"_\"),weekdaysShort:\"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت\".split(\"_\"),weekdaysMin:\"ح_ن_ث_ر_خ_ج_س\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd D MMMM YYYY LT\"},calendar:{sameDay:\"[اليوم على الساعة] LT\",nextDay:\"[غدا على الساعة] LT\",nextWeek:\"dddd [على الساعة] LT\",lastDay:\"[أمس على الساعة] LT\",lastWeek:\"dddd [على الساعة] LT\",sameElse:\"L\"},relativeTime:{future:\"في %s\",past:\"منذ %s\",s:\"ثوان\",m:\"دقيقة\",mm:\"%d دقائق\",h:\"ساعة\",hh:\"%d ساعات\",d:\"يوم\",dd:\"%d أيام\",M:\"شهر\",MM:\"%d أشهر\",y:\"سنة\",yy:\"%d سنوات\"},week:{dow:6,doy:12}}),e.fullCalendar.datepickerLang(\"ar-ma\",\"ar\",{closeText:\"إغلاق\",prevText:\"&#x3C;السابق\",nextText:\"التالي&#x3E;\",currentText:\"اليوم\",monthNames:[\"كانون الثاني\",\"شباط\",\"آذار\",\"نيسان\",\"مايو\",\"حزيران\",\"تموز\",\"آب\",\"أيلول\",\"تشرين الأول\",\"تشرين الثاني\",\"كانون الأول\"],monthNamesShort:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],dayNames:[\"الأحد\",\"الاثنين\",\"الثلاثاء\",\"الأربعاء\",\"الخميس\",\"الجمعة\",\"السبت\"],dayNamesShort:[\"الأحد\",\"الاثنين\",\"الثلاثاء\",\"الأربعاء\",\"الخميس\",\"الجمعة\",\"السبت\"],dayNamesMin:[\"ح\",\"ن\",\"ث\",\"ر\",\"خ\",\"ج\",\"س\"],weekHeader:\"أسبوع\",dateFormat:\"dd/mm/yy\",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"ar-ma\",{buttonText:{month:\"شهر\",week:\"أسبوع\",day:\"يوم\",list:\"أجندة\"},allDayText:\"اليوم كله\",eventLimitText:\"أخرى\"})})(),function(){var a={1:\"١\",2:\"٢\",3:\"٣\",4:\"٤\",5:\"٥\",6:\"٦\",7:\"٧\",8:\"٨\",9:\"٩\",0:\"٠\"},n={\"١\":\"1\",\"٢\":\"2\",\"٣\":\"3\",\"٤\":\"4\",\"٥\":\"5\",\"٦\":\"6\",\"٧\":\"7\",\"٨\":\"8\",\"٩\":\"9\",\"٠\":\"0\"};(t.defineLocale||t.lang).call(t,\"ar-sa\",{months:\"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر\".split(\"_\"),monthsShort:\"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر\".split(\"_\"),weekdays:\"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت\".split(\"_\"),weekdaysShort:\"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت\".split(\"_\"),weekdaysMin:\"ح_ن_ث_ر_خ_ج_س\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"HH:mm:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd D MMMM YYYY LT\"},meridiemParse:/ص|م/,isPM:function(e){return\"م\"===e},meridiem:function(e){return 12>e?\"ص\":\"م\"},calendar:{sameDay:\"[اليوم على الساعة] LT\",nextDay:\"[غدا على الساعة] LT\",nextWeek:\"dddd [على الساعة] LT\",lastDay:\"[أمس على الساعة] LT\",lastWeek:\"dddd [على الساعة] LT\",sameElse:\"L\"},relativeTime:{future:\"في %s\",past:\"منذ %s\",s:\"ثوان\",m:\"دقيقة\",mm:\"%d دقائق\",h:\"ساعة\",hh:\"%d ساعات\",d:\"يوم\",dd:\"%d أيام\",M:\"شهر\",MM:\"%d أشهر\",y:\"سنة\",yy:\"%d سنوات\"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(e){return n[e]}).replace(/،/g,\",\")},postformat:function(e){return e.replace(/\\d/g,function(e){return a[e]}).replace(/,/g,\"،\")},week:{dow:6,doy:12}}),e.fullCalendar.datepickerLang(\"ar-sa\",\"ar\",{closeText:\"إغلاق\",prevText:\"&#x3C;السابق\",nextText:\"التالي&#x3E;\",currentText:\"اليوم\",monthNames:[\"كانون الثاني\",\"شباط\",\"آذار\",\"نيسان\",\"مايو\",\"حزيران\",\"تموز\",\"آب\",\"أيلول\",\"تشرين الأول\",\"تشرين الثاني\",\"كانون الأول\"],monthNamesShort:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],dayNames:[\"الأحد\",\"الاثنين\",\"الثلاثاء\",\"الأربعاء\",\"الخميس\",\"الجمعة\",\"السبت\"],dayNamesShort:[\"الأحد\",\"الاثنين\",\"الثلاثاء\",\"الأربعاء\",\"الخميس\",\"الجمعة\",\"السبت\"],dayNamesMin:[\"ح\",\"ن\",\"ث\",\"ر\",\"خ\",\"ج\",\"س\"],weekHeader:\"أسبوع\",dateFormat:\"dd/mm/yy\",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"ar-sa\",{buttonText:{month:\"شهر\",week:\"أسبوع\",day:\"يوم\",list:\"أجندة\"},allDayText:\"اليوم كله\",eventLimitText:\"أخرى\"})}(),function(){(t.defineLocale||t.lang).call(t,\"ar-tn\",{months:\"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر\".split(\"_\"),monthsShort:\"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر\".split(\"_\"),weekdays:\"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت\".split(\"_\"),weekdaysShort:\"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت\".split(\"_\"),weekdaysMin:\"ح_ن_ث_ر_خ_ج_س\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd D MMMM YYYY LT\"},calendar:{sameDay:\"[اليوم على الساعة] LT\",nextDay:\"[غدا على الساعة] LT\",nextWeek:\"dddd [على الساعة] LT\",lastDay:\"[أمس على الساعة] LT\",lastWeek:\"dddd [على الساعة] LT\",sameElse:\"L\"},relativeTime:{future:\"في %s\",past:\"منذ %s\",s:\"ثوان\",m:\"دقيقة\",mm:\"%d دقائق\",h:\"ساعة\",hh:\"%d ساعات\",d:\"يوم\",dd:\"%d أيام\",M:\"شهر\",MM:\"%d أشهر\",y:\"سنة\",yy:\"%d سنوات\"},week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"ar-tn\",\"ar\",{closeText:\"إغلاق\",prevText:\"&#x3C;السابق\",nextText:\"التالي&#x3E;\",currentText:\"اليوم\",monthNames:[\"كانون الثاني\",\"شباط\",\"آذار\",\"نيسان\",\"مايو\",\"حزيران\",\"تموز\",\"آب\",\"أيلول\",\"تشرين الأول\",\"تشرين الثاني\",\"كانون الأول\"],monthNamesShort:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],dayNames:[\"الأحد\",\"الاثنين\",\"الثلاثاء\",\"الأربعاء\",\"الخميس\",\"الجمعة\",\"السبت\"],dayNamesShort:[\"الأحد\",\"الاثنين\",\"الثلاثاء\",\"الأربعاء\",\"الخميس\",\"الجمعة\",\"السبت\"],dayNamesMin:[\"ح\",\"ن\",\"ث\",\"ر\",\"خ\",\"ج\",\"س\"],weekHeader:\"أسبوع\",dateFormat:\"dd/mm/yy\",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"ar-tn\",{buttonText:{month:\"شهر\",week:\"أسبوع\",day:\"يوم\",list:\"أجندة\"},allDayText:\"اليوم كله\",eventLimitText:\"أخرى\"})}(),function(){var a={1:\"١\",2:\"٢\",3:\"٣\",4:\"٤\",5:\"٥\",6:\"٦\",7:\"٧\",8:\"٨\",9:\"٩\",0:\"٠\"},n={\"١\":\"1\",\"٢\":\"2\",\"٣\":\"3\",\"٤\":\"4\",\"٥\":\"5\",\"٦\":\"6\",\"٧\":\"7\",\"٨\":\"8\",\"٩\":\"9\",\"٠\":\"0\"},r=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&10>=e%100?3:e%100>=11?4:5},i={s:[\"أقل من ثانية\",\"ثانية واحدة\",[\"ثانيتان\",\"ثانيتين\"],\"%d ثوان\",\"%d ثانية\",\"%d ثانية\"],m:[\"أقل من دقيقة\",\"دقيقة واحدة\",[\"دقيقتان\",\"دقيقتين\"],\"%d دقائق\",\"%d دقيقة\",\"%d دقيقة\"],h:[\"أقل من ساعة\",\"ساعة واحدة\",[\"ساعتان\",\"ساعتين\"],\"%d ساعات\",\"%d ساعة\",\"%d ساعة\"],d:[\"أقل من يوم\",\"يوم واحد\",[\"يومان\",\"يومين\"],\"%d أيام\",\"%d يومًا\",\"%d يوم\"],M:[\"أقل من شهر\",\"شهر واحد\",[\"شهران\",\"شهرين\"],\"%d أشهر\",\"%d شهرا\",\"%d شهر\"],y:[\"أقل من عام\",\"عام واحد\",[\"عامان\",\"عامين\"],\"%d أعوام\",\"%d عامًا\",\"%d عام\"]},s=function(e){return function(t,a){var n=r(t),s=i[e][r(t)];return 2===n&&(s=s[a?0:1]),s.replace(/%d/i,t)}},o=[\"كانون الثاني يناير\",\"شباط فبراير\",\"آذار مارس\",\"نيسان أبريل\",\"أيار مايو\",\"حزيران يونيو\",\"تموز يوليو\",\"آب أغسطس\",\"أيلول سبتمبر\",\"تشرين الأول أكتوبر\",\"تشرين الثاني نوفمبر\",\"كانون الأول ديسمبر\"];(t.defineLocale||t.lang).call(t,\"ar\",{months:o,monthsShort:o,weekdays:\"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت\".split(\"_\"),weekdaysShort:\"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت\".split(\"_\"),weekdaysMin:\"ح_ن_ث_ر_خ_ج_س\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"HH:mm:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd D MMMM YYYY LT\"},meridiemParse:/ص|م/,isPM:function(e){return\"م\"===e},meridiem:function(e){return 12>e?\"ص\":\"م\"},calendar:{sameDay:\"[اليوم عند الساعة] LT\",nextDay:\"[غدًا عند الساعة] LT\",nextWeek:\"dddd [عند الساعة] LT\",lastDay:\"[أمس عند الساعة] LT\",lastWeek:\"dddd [عند الساعة] LT\",sameElse:\"L\"},relativeTime:{future:\"بعد %s\",past:\"منذ %s\",s:s(\"s\"),m:s(\"m\"),mm:s(\"m\"),h:s(\"h\"),hh:s(\"h\"),d:s(\"d\"),dd:s(\"d\"),M:s(\"M\"),MM:s(\"M\"),y:s(\"y\"),yy:s(\"y\")},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(e){return n[e]}).replace(/،/g,\",\")},postformat:function(e){return e.replace(/\\d/g,function(e){return a[e]}).replace(/,/g,\"،\")},week:{dow:6,doy:12}}),e.fullCalendar.datepickerLang(\"ar\",\"ar\",{closeText:\"إغلاق\",prevText:\"&#x3C;السابق\",nextText:\"التالي&#x3E;\",currentText:\"اليوم\",monthNames:[\"كانون الثاني\",\"شباط\",\"آذار\",\"نيسان\",\"مايو\",\"حزيران\",\"تموز\",\"آب\",\"أيلول\",\"تشرين الأول\",\"تشرين الثاني\",\"كانون الأول\"],monthNamesShort:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],dayNames:[\"الأحد\",\"الاثنين\",\"الثلاثاء\",\"الأربعاء\",\"الخميس\",\"الجمعة\",\"السبت\"],dayNamesShort:[\"الأحد\",\"الاثنين\",\"الثلاثاء\",\"الأربعاء\",\"الخميس\",\"الجمعة\",\"السبت\"],dayNamesMin:[\"ح\",\"ن\",\"ث\",\"ر\",\"خ\",\"ج\",\"س\"],weekHeader:\"أسبوع\",dateFormat:\"dd/mm/yy\",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"ar\",{buttonText:{month:\"شهر\",week:\"أسبوع\",day:\"يوم\",list:\"أجندة\"},allDayText:\"اليوم كله\",eventLimitText:\"أخرى\"})}(),function(){(t.defineLocale||t.lang).call(t,\"bg\",{months:\"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември\".split(\"_\"),monthsShort:\"янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек\".split(\"_\"),weekdays:\"неделя_понеделник_вторник_сряда_четвъртък_петък_събота\".split(\"_\"),weekdaysShort:\"нед_пон_вто_сря_чет_пет_съб\".split(\"_\"),weekdaysMin:\"нд_пн_вт_ср_чт_пт_сб\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"D.MM.YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd, D MMMM YYYY LT\"},calendar:{sameDay:\"[Днес в] LT\",nextDay:\"[Утре в] LT\",nextWeek:\"dddd [в] LT\",lastDay:\"[Вчера в] LT\",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return\"[В изминалата] dddd [в] LT\";case 1:case 2:case 4:case 5:return\"[В изминалия] dddd [в] LT\"}},sameElse:\"L\"},relativeTime:{future:\"след %s\",past:\"преди %s\",s:\"няколко секунди\",m:\"минута\",mm:\"%d минути\",h:\"час\",hh:\"%d часа\",d:\"ден\",dd:\"%d дни\",M:\"месец\",MM:\"%d месеца\",y:\"година\",yy:\"%d години\"},ordinalParse:/\\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,a=e%100;return 0===e?e+\"-ев\":0===a?e+\"-ен\":a>10&&20>a?e+\"-ти\":1===t?e+\"-ви\":2===t?e+\"-ри\":7===t||8===t?e+\"-ми\":e+\"-ти\"},week:{dow:1,doy:7}}),e.fullCalendar.datepickerLang(\"bg\",\"bg\",{closeText:\"затвори\",prevText:\"&#x3C;назад\",nextText:\"напред&#x3E;\",nextBigText:\"&#x3E;&#x3E;\",currentText:\"днес\",monthNames:[\"Януари\",\"Февруари\",\"Март\",\"Април\",\"Май\",\"Юни\",\"Юли\",\"Август\",\"Септември\",\"Октомври\",\"Ноември\",\"Декември\"],monthNamesShort:[\"Яну\",\"Фев\",\"Мар\",\"Апр\",\"Май\",\"Юни\",\"Юли\",\"Авг\",\"Сеп\",\"Окт\",\"Нов\",\"Дек\"],dayNames:[\"Неделя\",\"Понеделник\",\"Вторник\",\"Сряда\",\"Четвъртък\",\"Петък\",\"Събота\"],dayNamesShort:[\"Нед\",\"Пон\",\"Вто\",\"Сря\",\"Чет\",\"Пет\",\"Съб\"],dayNamesMin:[\"Не\",\"По\",\"Вт\",\"Ср\",\"Че\",\"Пе\",\"Съ\"],weekHeader:\"Wk\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"bg\",{buttonText:{month:\"Месец\",week:\"Седмица\",day:\"Ден\",list:\"График\"},allDayText:\"Цял ден\",eventLimitText:function(e){return\"+още \"+e}})}(),function(){(t.defineLocale||t.lang).call(t,\"ca\",{months:\"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre\".split(\"_\"),monthsShort:\"gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.\".split(\"_\"),weekdays:\"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte\".split(\"_\"),weekdaysShort:\"dg._dl._dt._dc._dj._dv._ds.\".split(\"_\"),weekdaysMin:\"Dg_Dl_Dt_Dc_Dj_Dv_Ds\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd D MMMM YYYY LT\"},calendar:{sameDay:function(){return\"[avui a \"+(1!==this.hours()?\"les\":\"la\")+\"] LT\"},nextDay:function(){return\"[demà a \"+(1!==this.hours()?\"les\":\"la\")+\"] LT\"},nextWeek:function(){return\"dddd [a \"+(1!==this.hours()?\"les\":\"la\")+\"] LT\"},lastDay:function(){return\"[ahir a \"+(1!==this.hours()?\"les\":\"la\")+\"] LT\"},lastWeek:function(){return\"[el] dddd [passat a \"+(1!==this.hours()?\"les\":\"la\")+\"] LT\"},sameElse:\"L\"},relativeTime:{future:\"en %s\",past:\"fa %s\",s:\"uns segons\",m:\"un minut\",mm:\"%d minuts\",h:\"una hora\",hh:\"%d hores\",d:\"un dia\",dd:\"%d dies\",M:\"un mes\",MM:\"%d mesos\",y:\"un any\",yy:\"%d anys\"},ordinalParse:/\\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var a=1===e?\"r\":2===e?\"n\":3===e?\"r\":4===e?\"t\":\"è\";return(\"w\"===t||\"W\"===t)&&(a=\"a\"),e+a},week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"ca\",\"ca\",{closeText:\"Tanca\",prevText:\"Anterior\",nextText:\"Següent\",currentText:\"Avui\",monthNames:[\"gener\",\"febrer\",\"març\",\"abril\",\"maig\",\"juny\",\"juliol\",\"agost\",\"setembre\",\"octubre\",\"novembre\",\"desembre\"],monthNamesShort:[\"gen\",\"feb\",\"març\",\"abr\",\"maig\",\"juny\",\"jul\",\"ag\",\"set\",\"oct\",\"nov\",\"des\"],dayNames:[\"diumenge\",\"dilluns\",\"dimarts\",\"dimecres\",\"dijous\",\"divendres\",\"dissabte\"],dayNamesShort:[\"dg\",\"dl\",\"dt\",\"dc\",\"dj\",\"dv\",\"ds\"],dayNamesMin:[\"dg\",\"dl\",\"dt\",\"dc\",\"dj\",\"dv\",\"ds\"],weekHeader:\"Set\",dateFormat:\"dd/mm/yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"ca\",{buttonText:{month:\"Mes\",week:\"Setmana\",day:\"Dia\",list:\"Agenda\"},allDayText:\"Tot el dia\",eventLimitText:\"més\"})}(),function(){function a(e){return e>1&&5>e&&1!==~~(e/10)}function n(e,t,n,r){var i=e+\" \";switch(n){case\"s\":return t||r?\"pár sekund\":\"pár sekundami\";case\"m\":return t?\"minuta\":r?\"minutu\":\"minutou\";case\"mm\":return t||r?i+(a(e)?\"minuty\":\"minut\"):i+\"minutami\";case\"h\":return t?\"hodina\":r?\"hodinu\":\"hodinou\";case\"hh\":return t||r?i+(a(e)?\"hodiny\":\"hodin\"):i+\"hodinami\";case\"d\":return t||r?\"den\":\"dnem\";case\"dd\":return t||r?i+(a(e)?\"dny\":\"dní\"):i+\"dny\";case\"M\":return t||r?\"měsíc\":\"měsícem\";case\"MM\":return t||r?i+(a(e)?\"měsíce\":\"měsíců\"):i+\"měsíci\";case\"y\":return t||r?\"rok\":\"rokem\";case\"yy\":return t||r?i+(a(e)?\"roky\":\"let\"):i+\"lety\"}}var r=\"leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec\".split(\"_\"),i=\"led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro\".split(\"_\");(t.defineLocale||t.lang).call(t,\"cs\",{months:r,monthsShort:i,monthsParse:function(e,t){var a,n=[];for(a=0;12>a;a++)n[a]=RegExp(\"^\"+e[a]+\"$|^\"+t[a]+\"$\",\"i\");return n}(r,i),weekdays:\"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota\".split(\"_\"),weekdaysShort:\"ne_po_út_st_čt_pá_so\".split(\"_\"),weekdaysMin:\"ne_po_út_st_čt_pá_so\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD.MM.YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY LT\",LLLL:\"dddd D. MMMM YYYY LT\"},calendar:{sameDay:\"[dnes v] LT\",nextDay:\"[zítra v] LT\",nextWeek:function(){switch(this.day()){case 0:return\"[v neděli v] LT\";case 1:case 2:return\"[v] dddd [v] LT\";case 3:return\"[ve středu v] LT\";case 4:return\"[ve čtvrtek v] LT\";case 5:return\"[v pátek v] LT\";case 6:return\"[v sobotu v] LT\"}},lastDay:\"[včera v] LT\",lastWeek:function(){switch(this.day()){case 0:return\"[minulou neděli v] LT\";case 1:case 2:return\"[minulé] dddd [v] LT\";case 3:return\"[minulou středu v] LT\";case 4:case 5:return\"[minulý] dddd [v] LT\";case 6:return\"[minulou sobotu v] LT\"}},sameElse:\"L\"},relativeTime:{future:\"za %s\",past:\"před %s\",s:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"cs\",\"cs\",{closeText:\"Zavřít\",prevText:\"&#x3C;Dříve\",nextText:\"Později&#x3E;\",currentText:\"Nyní\",monthNames:[\"leden\",\"únor\",\"březen\",\"duben\",\"květen\",\"červen\",\"červenec\",\"srpen\",\"září\",\"říjen\",\"listopad\",\"prosinec\"],monthNamesShort:[\"led\",\"úno\",\"bře\",\"dub\",\"kvě\",\"čer\",\"čvc\",\"srp\",\"zář\",\"říj\",\"lis\",\"pro\"],dayNames:[\"neděle\",\"pondělí\",\"úterý\",\"středa\",\"čtvrtek\",\"pátek\",\"sobota\"],dayNamesShort:[\"ne\",\"po\",\"út\",\"st\",\"čt\",\"pá\",\"so\"],dayNamesMin:[\"ne\",\"po\",\"út\",\"st\",\"čt\",\"pá\",\"so\"],weekHeader:\"Týd\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"cs\",{buttonText:{month:\"Měsíc\",week:\"Týden\",day:\"Den\",list:\"Agenda\"},allDayText:\"Celý den\",eventLimitText:function(e){return\"+další: \"+e}})}(),function(){(t.defineLocale||t.lang).call(t,\"da\",{months:\"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december\".split(\"_\"),monthsShort:\"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec\".split(\"_\"),weekdays:\"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag\".split(\"_\"),weekdaysShort:\"søn_man_tir_ons_tor_fre_lør\".split(\"_\"),weekdaysMin:\"sø_ma_ti_on_to_fr_lø\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY LT\",LLLL:\"dddd [d.] D. MMMM YYYY LT\"},calendar:{sameDay:\"[I dag kl.] LT\",nextDay:\"[I morgen kl.] LT\",nextWeek:\"dddd [kl.] LT\",lastDay:\"[I går kl.] LT\",lastWeek:\"[sidste] dddd [kl] LT\",sameElse:\"L\"},relativeTime:{future:\"om %s\",past:\"%s siden\",s:\"få sekunder\",m:\"et minut\",mm:\"%d minutter\",h:\"en time\",hh:\"%d timer\",d:\"en dag\",dd:\"%d dage\",M:\"en måned\",MM:\"%d måneder\",y:\"et år\",yy:\"%d år\"},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"da\",\"da\",{closeText:\"Luk\",prevText:\"&#x3C;Forrige\",nextText:\"Næste&#x3E;\",currentText:\"Idag\",monthNames:[\"Januar\",\"Februar\",\"Marts\",\"April\",\"Maj\",\"Juni\",\"Juli\",\"August\",\"September\",\"Oktober\",\"November\",\"December\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"Maj\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Okt\",\"Nov\",\"Dec\"],dayNames:[\"Søndag\",\"Mandag\",\"Tirsdag\",\"Onsdag\",\"Torsdag\",\"Fredag\",\"Lørdag\"],dayNamesShort:[\"Søn\",\"Man\",\"Tir\",\"Ons\",\"Tor\",\"Fre\",\"Lør\"],dayNamesMin:[\"Sø\",\"Ma\",\"Ti\",\"On\",\"To\",\"Fr\",\"Lø\"],weekHeader:\"Uge\",dateFormat:\"dd-mm-yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"da\",{buttonText:{month:\"Måned\",week:\"Uge\",day:\"Dag\",list:\"Agenda\"},allDayText:\"Hele dagen\",eventLimitText:\"flere\"})}(),function(){function a(e,t,a){var n={m:[\"eine Minute\",\"einer Minute\"],h:[\"eine Stunde\",\"einer Stunde\"],d:[\"ein Tag\",\"einem Tag\"],dd:[e+\" Tage\",e+\" Tagen\"],M:[\"ein Monat\",\"einem Monat\"],MM:[e+\" Monate\",e+\" Monaten\"],y:[\"ein Jahr\",\"einem Jahr\"],yy:[e+\" Jahre\",e+\" Jahren\"]};return t?n[a][0]:n[a][1]}(t.defineLocale||t.lang).call(t,\"de-at\",{months:\"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember\".split(\"_\"),monthsShort:\"Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.\".split(\"_\"),weekdays:\"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag\".split(\"_\"),weekdaysShort:\"So._Mo._Di._Mi._Do._Fr._Sa.\".split(\"_\"),weekdaysMin:\"So_Mo_Di_Mi_Do_Fr_Sa\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"HH:mm:ss\",L:\"DD.MM.YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY LT\",LLLL:\"dddd, D. MMMM YYYY LT\"},calendar:{sameDay:\"[Heute um] LT [Uhr]\",sameElse:\"L\",nextDay:\"[Morgen um] LT [Uhr]\",nextWeek:\"dddd [um] LT [Uhr]\",lastDay:\"[Gestern um] LT [Uhr]\",lastWeek:\"[letzten] dddd [um] LT [Uhr]\"},relativeTime:{future:\"in %s\",past:\"vor %s\",s:\"ein paar Sekunden\",m:a,mm:\"%d Minuten\",h:a,hh:\"%d Stunden\",d:a,dd:a,M:a,MM:a,y:a,yy:a},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"de-at\",\"de\",{closeText:\"Schließen\",prevText:\"&#x3C;Zurück\",nextText:\"Vor&#x3E;\",currentText:\"Heute\",monthNames:[\"Januar\",\"Februar\",\"März\",\"April\",\"Mai\",\"Juni\",\"Juli\",\"August\",\"September\",\"Oktober\",\"November\",\"Dezember\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mär\",\"Apr\",\"Mai\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Okt\",\"Nov\",\"Dez\"],dayNames:[\"Sonntag\",\"Montag\",\"Dienstag\",\"Mittwoch\",\"Donnerstag\",\"Freitag\",\"Samstag\"],dayNamesShort:[\"So\",\"Mo\",\"Di\",\"Mi\",\"Do\",\"Fr\",\"Sa\"],dayNamesMin:[\"So\",\"Mo\",\"Di\",\"Mi\",\"Do\",\"Fr\",\"Sa\"],weekHeader:\"KW\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"de-at\",{buttonText:{month:\"Monat\",week:\"Woche\",day:\"Tag\",list:\"Terminübersicht\"},allDayText:\"Ganztägig\",eventLimitText:function(e){return\"+ weitere \"+e}})}(),function(){function a(e,t,a){var n={m:[\"eine Minute\",\"einer Minute\"],h:[\"eine Stunde\",\"einer Stunde\"],d:[\"ein Tag\",\"einem Tag\"],dd:[e+\" Tage\",e+\" Tagen\"],M:[\"ein Monat\",\"einem Monat\"],MM:[e+\" Monate\",e+\" Monaten\"],y:[\"ein Jahr\",\"einem Jahr\"],yy:[e+\" Jahre\",e+\" Jahren\"]};return t?n[a][0]:n[a][1]}(t.defineLocale||t.lang).call(t,\"de\",{months:\"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember\".split(\"_\"),monthsShort:\"Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.\".split(\"_\"),weekdays:\"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag\".split(\"_\"),weekdaysShort:\"So._Mo._Di._Mi._Do._Fr._Sa.\".split(\"_\"),weekdaysMin:\"So_Mo_Di_Mi_Do_Fr_Sa\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"HH:mm:ss\",L:\"DD.MM.YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY LT\",LLLL:\"dddd, D. MMMM YYYY LT\"},calendar:{sameDay:\"[Heute um] LT [Uhr]\",sameElse:\"L\",nextDay:\"[Morgen um] LT [Uhr]\",nextWeek:\"dddd [um] LT [Uhr]\",lastDay:\"[Gestern um] LT [Uhr]\",lastWeek:\"[letzten] dddd [um] LT [Uhr]\"},relativeTime:{future:\"in %s\",past:\"vor %s\",s:\"ein paar Sekunden\",m:a,mm:\"%d Minuten\",h:a,hh:\"%d Stunden\",d:a,dd:a,M:a,MM:a,y:a,yy:a},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"de\",\"de\",{closeText:\"Schließen\",prevText:\"&#x3C;Zurück\",nextText:\"Vor&#x3E;\",currentText:\"Heute\",monthNames:[\"Januar\",\"Februar\",\"März\",\"April\",\"Mai\",\"Juni\",\"Juli\",\"August\",\"September\",\"Oktober\",\"November\",\"Dezember\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mär\",\"Apr\",\"Mai\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Okt\",\"Nov\",\"Dez\"],dayNames:[\"Sonntag\",\"Montag\",\"Dienstag\",\"Mittwoch\",\"Donnerstag\",\"Freitag\",\"Samstag\"],dayNamesShort:[\"So\",\"Mo\",\"Di\",\"Mi\",\"Do\",\"Fr\",\"Sa\"],dayNamesMin:[\"So\",\"Mo\",\"Di\",\"Mi\",\"Do\",\"Fr\",\"Sa\"],weekHeader:\"KW\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"de\",{buttonText:{month:\"Monat\",week:\"Woche\",day:\"Tag\",list:\"Terminübersicht\"},allDayText:\"Ganztägig\",eventLimitText:function(e){return\"+ weitere \"+e}})}(),function(){(t.defineLocale||t.lang).call(t,\"el\",{monthsNominativeEl:\"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος\".split(\"_\"),monthsGenitiveEl:\"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου\".split(\"_\"),months:function(e,t){return/D/.test(t.substring(0,t.indexOf(\"MMMM\")))?this._monthsGenitiveEl[e.month()]:this._monthsNominativeEl[e.month()]},monthsShort:\"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ\".split(\"_\"),weekdays:\"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο\".split(\"_\"),weekdaysShort:\"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ\".split(\"_\"),weekdaysMin:\"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα\".split(\"_\"),meridiem:function(e,t,a){return e>11?a?\"μμ\":\"ΜΜ\":a?\"πμ\":\"ΠΜ\"},isPM:function(e){return\"μ\"===(e+\"\").toLowerCase()[0]},meridiemParse:/[ΠΜ]\\.?Μ?\\.?/i,longDateFormat:{LT:\"h:mm A\",LTS:\"h:mm:ss A\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd, D MMMM YYYY LT\"},calendarEl:{sameDay:\"[Σήμερα {}] LT\",nextDay:\"[Αύριο {}] LT\",nextWeek:\"dddd [{}] LT\",lastDay:\"[Χθες {}] LT\",lastWeek:function(){switch(this.day()){case 6:return\"[το προηγούμενο] dddd [{}] LT\";default:return\"[την προηγούμενη] dddd [{}] LT\"}},sameElse:\"L\"},calendar:function(e,t){var a=this._calendarEl[e],n=t&&t.hours();return\"function\"==typeof a&&(a=a.apply(t)),a.replace(\"{}\",1===n%12?\"στη\":\"στις\")},relativeTime:{future:\"σε %s\",past:\"%s πριν\",s:\"λίγα δευτερόλεπτα\",m:\"ένα λεπτό\",mm:\"%d λεπτά\",h:\"μία ώρα\",hh:\"%d ώρες\",d:\"μία μέρα\",dd:\"%d μέρες\",M:\"ένας μήνας\",MM:\"%d μήνες\",y:\"ένας χρόνος\",yy:\"%d χρόνια\"},ordinalParse:/\\d{1,2}η/,ordinal:\"%dη\",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"el\",\"el\",{closeText:\"Κλείσιμο\",prevText:\"Προηγούμενος\",nextText:\"Επόμενος\",currentText:\"Σήμερα\",monthNames:[\"Ιανουάριος\",\"Φεβρουάριος\",\"Μάρτιος\",\"Απρίλιος\",\"Μάιος\",\"Ιούνιος\",\"Ιούλιος\",\"Αύγουστος\",\"Σεπτέμβριος\",\"Οκτώβριος\",\"Νοέμβριος\",\"Δεκέμβριος\"],monthNamesShort:[\"Ιαν\",\"Φεβ\",\"Μαρ\",\"Απρ\",\"Μαι\",\"Ιουν\",\"Ιουλ\",\"Αυγ\",\"Σεπ\",\"Οκτ\",\"Νοε\",\"Δεκ\"],dayNames:[\"Κυριακή\",\"Δευτέρα\",\"Τρίτη\",\"Τετάρτη\",\"Πέμπτη\",\"Παρασκευή\",\"Σάββατο\"],dayNamesShort:[\"Κυρ\",\"Δευ\",\"Τρι\",\"Τετ\",\"Πεμ\",\"Παρ\",\"Σαβ\"],dayNamesMin:[\"Κυ\",\"Δε\",\"Τρ\",\"Τε\",\"Πε\",\"Πα\",\"Σα\"],weekHeader:\"Εβδ\",dateFormat:\"dd/mm/yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"el\",{buttonText:{month:\"Μήνας\",week:\"Εβδομάδα\",day:\"Ημέρα\",list:\"Ατζέντα\"},allDayText:\"Ολοήμερο\",eventLimitText:\"περισσότερα\"})}(),function(){(t.defineLocale||t.lang).call(t,\"en-au\",{months:\"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\"),monthsShort:\"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec\".split(\"_\"),weekdays:\"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),weekdaysShort:\"Sun_Mon_Tue_Wed_Thu_Fri_Sat\".split(\"_\"),weekdaysMin:\"Su_Mo_Tu_We_Th_Fr_Sa\".split(\"_\"),longDateFormat:{LT:\"h:mm A\",LTS:\"h:mm:ss A\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd, D MMMM YYYY LT\"},calendar:{sameDay:\"[Today at] LT\",nextDay:\"[Tomorrow at] LT\",nextWeek:\"dddd [at] LT\",lastDay:\"[Yesterday at] LT\",lastWeek:\"[Last] dddd [at] LT\",sameElse:\"L\"},relativeTime:{future:\"in %s\",past:\"%s ago\",s:\"a few seconds\",m:\"a minute\",mm:\"%d minutes\",h:\"an hour\",hh:\"%d hours\",d:\"a day\",dd:\"%d days\",M:\"a month\",MM:\"%d months\",y:\"a year\",yy:\"%d years\"},ordinalParse:/\\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,a=1===~~(e%100/10)?\"th\":1===t?\"st\":2===t?\"nd\":3===t?\"rd\":\"th\";return e+a},week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"en-au\",\"en-AU\",{closeText:\"Done\",prevText:\"Prev\",nextText:\"Next\",currentText:\"Today\",monthNames:[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],dayNames:[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"],dayNamesShort:[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],dayNamesMin:[\"Su\",\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\",\"Sa\"],weekHeader:\"Wk\",dateFormat:\"dd/mm/yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"en-au\")}(),function(){(t.defineLocale||t.lang).call(t,\"en-ca\",{months:\"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\"),monthsShort:\"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec\".split(\"_\"),weekdays:\"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),weekdaysShort:\"Sun_Mon_Tue_Wed_Thu_Fri_Sat\".split(\"_\"),weekdaysMin:\"Su_Mo_Tu_We_Th_Fr_Sa\".split(\"_\"),longDateFormat:{LT:\"h:mm A\",LTS:\"h:mm:ss A\",L:\"YYYY-MM-DD\",LL:\"D MMMM, YYYY\",LLL:\"D MMMM, YYYY LT\",LLLL:\"dddd, D MMMM, YYYY LT\"},calendar:{sameDay:\"[Today at] LT\",nextDay:\"[Tomorrow at] LT\",nextWeek:\"dddd [at] LT\",lastDay:\"[Yesterday at] LT\",lastWeek:\"[Last] dddd [at] LT\",sameElse:\"L\"},relativeTime:{future:\"in %s\",past:\"%s ago\",s:\"a few seconds\",m:\"a minute\",mm:\"%d minutes\",h:\"an hour\",hh:\"%d hours\",d:\"a day\",dd:\"%d days\",M:\"a month\",MM:\"%d months\",y:\"a year\",yy:\"%d years\"},ordinalParse:/\\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,a=1===~~(e%100/10)?\"th\":1===t?\"st\":2===t?\"nd\":3===t?\"rd\":\"th\";return e+a}}),e.fullCalendar.lang(\"en-ca\")}(),function(){(t.defineLocale||t.lang).call(t,\"en-gb\",{months:\"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\"),monthsShort:\"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec\".split(\"_\"),weekdays:\"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),weekdaysShort:\"Sun_Mon_Tue_Wed_Thu_Fri_Sat\".split(\"_\"),weekdaysMin:\"Su_Mo_Tu_We_Th_Fr_Sa\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"HH:mm:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd, D MMMM YYYY LT\"},calendar:{sameDay:\"[Today at] LT\",nextDay:\"[Tomorrow at] LT\",nextWeek:\"dddd [at] LT\",lastDay:\"[Yesterday at] LT\",lastWeek:\"[Last] dddd [at] LT\",sameElse:\"L\"},relativeTime:{future:\"in %s\",past:\"%s ago\",s:\"a few seconds\",m:\"a minute\",mm:\"%d minutes\",h:\"an hour\",hh:\"%d hours\",d:\"a day\",dd:\"%d days\",M:\"a month\",MM:\"%d months\",y:\"a year\",yy:\"%d years\"},ordinalParse:/\\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,a=1===~~(e%100/10)?\"th\":1===t?\"st\":2===t?\"nd\":3===t?\"rd\":\"th\";return e+a},week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"en-gb\",\"en-GB\",{closeText:\"Done\",prevText:\"Prev\",nextText:\"Next\",currentText:\"Today\",monthNames:[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],dayNames:[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"],dayNamesShort:[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],dayNamesMin:[\"Su\",\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\",\"Sa\"],weekHeader:\"Wk\",dateFormat:\"dd/mm/yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"en-gb\")}(),function(){var a=\"ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.\".split(\"_\"),n=\"ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic\".split(\"_\");(t.defineLocale||t.lang).call(t,\"es\",{months:\"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre\".split(\"_\"),monthsShort:function(e,t){return/-MMM-/.test(t)?n[e.month()]:a[e.month()]},weekdays:\"domingo_lunes_martes_miércoles_jueves_viernes_sábado\".split(\"_\"),weekdaysShort:\"dom._lun._mar._mié._jue._vie._sáb.\".split(\"_\"),weekdaysMin:\"Do_Lu_Ma_Mi_Ju_Vi_Sá\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D [de] MMMM [de] YYYY\",LLL:\"D [de] MMMM [de] YYYY LT\",LLLL:\"dddd, D [de] MMMM [de] YYYY LT\"},calendar:{sameDay:function(){return\"[hoy a la\"+(1!==this.hours()?\"s\":\"\")+\"] LT\"},nextDay:function(){return\"[mañana a la\"+(1!==this.hours()?\"s\":\"\")+\"] LT\"},nextWeek:function(){return\"dddd [a la\"+(1!==this.hours()?\"s\":\"\")+\"] LT\"},lastDay:function(){return\"[ayer a la\"+(1!==this.hours()?\"s\":\"\")+\"] LT\"},lastWeek:function(){return\"[el] dddd [pasado a la\"+(1!==this.hours()?\"s\":\"\")+\"] LT\"},sameElse:\"L\"},relativeTime:{future:\"en %s\",past:\"hace %s\",s:\"unos segundos\",m:\"un minuto\",mm:\"%d minutos\",h:\"una hora\",hh:\"%d horas\",d:\"un día\",dd:\"%d días\",M:\"un mes\",MM:\"%d meses\",y:\"un año\",yy:\"%d años\"},ordinalParse:/\\d{1,2}º/,ordinal:\"%dº\",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"es\",\"es\",{closeText:\"Cerrar\",prevText:\"&#x3C;Ant\",nextText:\"Sig&#x3E;\",currentText:\"Hoy\",monthNames:[\"enero\",\"febrero\",\"marzo\",\"abril\",\"mayo\",\"junio\",\"julio\",\"agosto\",\"septiembre\",\"octubre\",\"noviembre\",\"diciembre\"],monthNamesShort:[\"ene\",\"feb\",\"mar\",\"abr\",\"may\",\"jun\",\"jul\",\"ago\",\"sep\",\"oct\",\"nov\",\"dic\"],dayNames:[\"domingo\",\"lunes\",\"martes\",\"miércoles\",\"jueves\",\"viernes\",\"sábado\"],dayNamesShort:[\"dom\",\"lun\",\"mar\",\"mié\",\"jue\",\"vie\",\"sáb\"],dayNamesMin:[\"D\",\"L\",\"M\",\"X\",\"J\",\"V\",\"S\"],weekHeader:\"Sm\",dateFormat:\"dd/mm/yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"es\",{buttonText:{month:\"Mes\",week:\"Semana\",day:\"Día\",list:\"Agenda\"},allDayHtml:\"Todo<br/>el día\",eventLimitText:\"más\"})}(),function(){var a={1:\"۱\",2:\"۲\",3:\"۳\",4:\"۴\",5:\"۵\",6:\"۶\",7:\"۷\",8:\"۸\",9:\"۹\",0:\"۰\"},n={\"۱\":\"1\",\"۲\":\"2\",\"۳\":\"3\",\"۴\":\"4\",\"۵\":\"5\",\"۶\":\"6\",\"۷\":\"7\",\"۸\":\"8\",\"۹\":\"9\",\"۰\":\"0\"};(t.defineLocale||t.lang).call(t,\"fa\",{months:\"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر\".split(\"_\"),monthsShort:\"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر\".split(\"_\"),weekdays:\"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه\".split(\"_\"),weekdaysShort:\"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه\".split(\"_\"),weekdaysMin:\"ی_د_س_چ_پ_ج_ش\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd, D MMMM YYYY LT\"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(e){return/بعد از ظهر/.test(e)},meridiem:function(e){return 12>e?\"قبل از ظهر\":\"بعد از ظهر\"},calendar:{sameDay:\"[امروز ساعت] LT\",nextDay:\"[فردا ساعت] LT\",nextWeek:\"dddd [ساعت] LT\",lastDay:\"[دیروز ساعت] LT\",lastWeek:\"dddd [پیش] [ساعت] LT\",sameElse:\"L\"},relativeTime:{future:\"در %s\",past:\"%s پیش\",s:\"چندین ثانیه\",m:\"یک دقیقه\",mm:\"%d دقیقه\",h:\"یک ساعت\",hh:\"%d ساعت\",d:\"یک روز\",dd:\"%d روز\",M:\"یک ماه\",MM:\"%d ماه\",y:\"یک سال\",yy:\"%d سال\"},preparse:function(e){return e.replace(/[۰-۹]/g,function(e){return n[e]}).replace(/،/g,\",\")},postformat:function(e){return e.replace(/\\d/g,function(e){return a[e]}).replace(/,/g,\"،\")},ordinalParse:/\\d{1,2}م/,ordinal:\"%dم\",week:{dow:6,doy:12}}),e.fullCalendar.datepickerLang(\"fa\",\"fa\",{closeText:\"بستن\",prevText:\"&#x3C;قبلی\",nextText:\"بعدی&#x3E;\",currentText:\"امروز\",monthNames:[\"ژانویه\",\"فوریه\",\"مارس\",\"آوریل\",\"مه\",\"ژوئن\",\"ژوئیه\",\"اوت\",\"سپتامبر\",\"اکتبر\",\"نوامبر\",\"دسامبر\"],monthNamesShort:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],dayNames:[\"يکشنبه\",\"دوشنبه\",\"سه‌شنبه\",\"چهارشنبه\",\"پنجشنبه\",\"جمعه\",\"شنبه\"],dayNamesShort:[\"ی\",\"د\",\"س\",\"چ\",\"پ\",\"ج\",\"ش\"],dayNamesMin:[\"ی\",\"د\",\"س\",\"چ\",\"پ\",\"ج\",\"ش\"],weekHeader:\"هف\",dateFormat:\"yy/mm/dd\",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"fa\",{buttonText:{month:\"ماه\",week:\"هفته\",day:\"روز\",list:\"برنامه\"},allDayText:\"تمام روز\",eventLimitText:function(e){return\"بیش از \"+e\n}})}(),function(){function a(e,t,a,r){var i=\"\";switch(a){case\"s\":return r?\"muutaman sekunnin\":\"muutama sekunti\";case\"m\":return r?\"minuutin\":\"minuutti\";case\"mm\":i=r?\"minuutin\":\"minuuttia\";break;case\"h\":return r?\"tunnin\":\"tunti\";case\"hh\":i=r?\"tunnin\":\"tuntia\";break;case\"d\":return r?\"päivän\":\"päivä\";case\"dd\":i=r?\"päivän\":\"päivää\";break;case\"M\":return r?\"kuukauden\":\"kuukausi\";case\"MM\":i=r?\"kuukauden\":\"kuukautta\";break;case\"y\":return r?\"vuoden\":\"vuosi\";case\"yy\":i=r?\"vuoden\":\"vuotta\"}return i=n(e,r)+\" \"+i}function n(e,t){return 10>e?t?i[e]:r[e]:e}var r=\"nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän\".split(\" \"),i=[\"nolla\",\"yhden\",\"kahden\",\"kolmen\",\"neljän\",\"viiden\",\"kuuden\",r[7],r[8],r[9]];(t.defineLocale||t.lang).call(t,\"fi\",{months:\"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu\".split(\"_\"),monthsShort:\"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu\".split(\"_\"),weekdays:\"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai\".split(\"_\"),weekdaysShort:\"su_ma_ti_ke_to_pe_la\".split(\"_\"),weekdaysMin:\"su_ma_ti_ke_to_pe_la\".split(\"_\"),longDateFormat:{LT:\"HH.mm\",LTS:\"HH.mm.ss\",L:\"DD.MM.YYYY\",LL:\"Do MMMM[ta] YYYY\",LLL:\"Do MMMM[ta] YYYY, [klo] LT\",LLLL:\"dddd, Do MMMM[ta] YYYY, [klo] LT\",l:\"D.M.YYYY\",ll:\"Do MMM YYYY\",lll:\"Do MMM YYYY, [klo] LT\",llll:\"ddd, Do MMM YYYY, [klo] LT\"},calendar:{sameDay:\"[tänään] [klo] LT\",nextDay:\"[huomenna] [klo] LT\",nextWeek:\"dddd [klo] LT\",lastDay:\"[eilen] [klo] LT\",lastWeek:\"[viime] dddd[na] [klo] LT\",sameElse:\"L\"},relativeTime:{future:\"%s päästä\",past:\"%s sitten\",s:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"fi\",\"fi\",{closeText:\"Sulje\",prevText:\"&#xAB;Edellinen\",nextText:\"Seuraava&#xBB;\",currentText:\"Tänään\",monthNames:[\"Tammikuu\",\"Helmikuu\",\"Maaliskuu\",\"Huhtikuu\",\"Toukokuu\",\"Kesäkuu\",\"Heinäkuu\",\"Elokuu\",\"Syyskuu\",\"Lokakuu\",\"Marraskuu\",\"Joulukuu\"],monthNamesShort:[\"Tammi\",\"Helmi\",\"Maalis\",\"Huhti\",\"Touko\",\"Kesä\",\"Heinä\",\"Elo\",\"Syys\",\"Loka\",\"Marras\",\"Joulu\"],dayNamesShort:[\"Su\",\"Ma\",\"Ti\",\"Ke\",\"To\",\"Pe\",\"La\"],dayNames:[\"Sunnuntai\",\"Maanantai\",\"Tiistai\",\"Keskiviikko\",\"Torstai\",\"Perjantai\",\"Lauantai\"],dayNamesMin:[\"Su\",\"Ma\",\"Ti\",\"Ke\",\"To\",\"Pe\",\"La\"],weekHeader:\"Vk\",dateFormat:\"d.m.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"fi\",{buttonText:{month:\"Kuukausi\",week:\"Viikko\",day:\"Päivä\",list:\"Tapahtumat\"},allDayText:\"Koko päivä\",eventLimitText:\"lisää\"})}(),function(){(t.defineLocale||t.lang).call(t,\"fr-ca\",{months:\"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre\".split(\"_\"),monthsShort:\"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.\".split(\"_\"),weekdays:\"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi\".split(\"_\"),weekdaysShort:\"dim._lun._mar._mer._jeu._ven._sam.\".split(\"_\"),weekdaysMin:\"Di_Lu_Ma_Me_Je_Ve_Sa\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"YYYY-MM-DD\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd D MMMM YYYY LT\"},calendar:{sameDay:\"[Aujourd'hui à] LT\",nextDay:\"[Demain à] LT\",nextWeek:\"dddd [à] LT\",lastDay:\"[Hier à] LT\",lastWeek:\"dddd [dernier à] LT\",sameElse:\"L\"},relativeTime:{future:\"dans %s\",past:\"il y a %s\",s:\"quelques secondes\",m:\"une minute\",mm:\"%d minutes\",h:\"une heure\",hh:\"%d heures\",d:\"un jour\",dd:\"%d jours\",M:\"un mois\",MM:\"%d mois\",y:\"un an\",yy:\"%d ans\"},ordinalParse:/\\d{1,2}(er|)/,ordinal:function(e){return e+(1===e?\"er\":\"\")}}),e.fullCalendar.datepickerLang(\"fr-ca\",\"fr-CA\",{closeText:\"Fermer\",prevText:\"Précédent\",nextText:\"Suivant\",currentText:\"Aujourd'hui\",monthNames:[\"janvier\",\"février\",\"mars\",\"avril\",\"mai\",\"juin\",\"juillet\",\"août\",\"septembre\",\"octobre\",\"novembre\",\"décembre\"],monthNamesShort:[\"janv.\",\"févr.\",\"mars\",\"avril\",\"mai\",\"juin\",\"juil.\",\"août\",\"sept.\",\"oct.\",\"nov.\",\"déc.\"],dayNames:[\"dimanche\",\"lundi\",\"mardi\",\"mercredi\",\"jeudi\",\"vendredi\",\"samedi\"],dayNamesShort:[\"dim.\",\"lun.\",\"mar.\",\"mer.\",\"jeu.\",\"ven.\",\"sam.\"],dayNamesMin:[\"D\",\"L\",\"M\",\"M\",\"J\",\"V\",\"S\"],weekHeader:\"Sem.\",dateFormat:\"yy-mm-dd\",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"fr-ca\",{buttonText:{month:\"Mois\",week:\"Semaine\",day:\"Jour\",list:\"Mon planning\"},allDayHtml:\"Toute la<br/>journée\",eventLimitText:\"en plus\"})}(),function(){(t.defineLocale||t.lang).call(t,\"fr\",{months:\"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre\".split(\"_\"),monthsShort:\"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.\".split(\"_\"),weekdays:\"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi\".split(\"_\"),weekdaysShort:\"dim._lun._mar._mer._jeu._ven._sam.\".split(\"_\"),weekdaysMin:\"Di_Lu_Ma_Me_Je_Ve_Sa\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd D MMMM YYYY LT\"},calendar:{sameDay:\"[Aujourd'hui à] LT\",nextDay:\"[Demain à] LT\",nextWeek:\"dddd [à] LT\",lastDay:\"[Hier à] LT\",lastWeek:\"dddd [dernier à] LT\",sameElse:\"L\"},relativeTime:{future:\"dans %s\",past:\"il y a %s\",s:\"quelques secondes\",m:\"une minute\",mm:\"%d minutes\",h:\"une heure\",hh:\"%d heures\",d:\"un jour\",dd:\"%d jours\",M:\"un mois\",MM:\"%d mois\",y:\"un an\",yy:\"%d ans\"},ordinalParse:/\\d{1,2}(er|)/,ordinal:function(e){return e+(1===e?\"er\":\"\")},week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"fr\",\"fr\",{closeText:\"Fermer\",prevText:\"Précédent\",nextText:\"Suivant\",currentText:\"Aujourd'hui\",monthNames:[\"janvier\",\"février\",\"mars\",\"avril\",\"mai\",\"juin\",\"juillet\",\"août\",\"septembre\",\"octobre\",\"novembre\",\"décembre\"],monthNamesShort:[\"janv.\",\"févr.\",\"mars\",\"avr.\",\"mai\",\"juin\",\"juil.\",\"août\",\"sept.\",\"oct.\",\"nov.\",\"déc.\"],dayNames:[\"dimanche\",\"lundi\",\"mardi\",\"mercredi\",\"jeudi\",\"vendredi\",\"samedi\"],dayNamesShort:[\"dim.\",\"lun.\",\"mar.\",\"mer.\",\"jeu.\",\"ven.\",\"sam.\"],dayNamesMin:[\"D\",\"L\",\"M\",\"M\",\"J\",\"V\",\"S\"],weekHeader:\"Sem.\",dateFormat:\"dd/mm/yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"fr\",{buttonText:{month:\"Mois\",week:\"Semaine\",day:\"Jour\",list:\"Mon planning\"},allDayHtml:\"Toute la<br/>journée\",eventLimitText:\"en plus\"})}(),function(){(t.defineLocale||t.lang).call(t,\"he\",{months:\"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר\".split(\"_\"),monthsShort:\"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳\".split(\"_\"),weekdays:\"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת\".split(\"_\"),weekdaysShort:\"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳\".split(\"_\"),weekdaysMin:\"א_ב_ג_ד_ה_ו_ש\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D [ב]MMMM YYYY\",LLL:\"D [ב]MMMM YYYY LT\",LLLL:\"dddd, D [ב]MMMM YYYY LT\",l:\"D/M/YYYY\",ll:\"D MMM YYYY\",lll:\"D MMM YYYY LT\",llll:\"ddd, D MMM YYYY LT\"},calendar:{sameDay:\"[היום ב־]LT\",nextDay:\"[מחר ב־]LT\",nextWeek:\"dddd [בשעה] LT\",lastDay:\"[אתמול ב־]LT\",lastWeek:\"[ביום] dddd [האחרון בשעה] LT\",sameElse:\"L\"},relativeTime:{future:\"בעוד %s\",past:\"לפני %s\",s:\"מספר שניות\",m:\"דקה\",mm:\"%d דקות\",h:\"שעה\",hh:function(e){return 2===e?\"שעתיים\":e+\" שעות\"},d:\"יום\",dd:function(e){return 2===e?\"יומיים\":e+\" ימים\"},M:\"חודש\",MM:function(e){return 2===e?\"חודשיים\":e+\" חודשים\"},y:\"שנה\",yy:function(e){return 2===e?\"שנתיים\":0===e%10&&10!==e?e+\" שנה\":e+\" שנים\"}}}),e.fullCalendar.datepickerLang(\"he\",\"he\",{closeText:\"סגור\",prevText:\"&#x3C;הקודם\",nextText:\"הבא&#x3E;\",currentText:\"היום\",monthNames:[\"ינואר\",\"פברואר\",\"מרץ\",\"אפריל\",\"מאי\",\"יוני\",\"יולי\",\"אוגוסט\",\"ספטמבר\",\"אוקטובר\",\"נובמבר\",\"דצמבר\"],monthNamesShort:[\"ינו\",\"פבר\",\"מרץ\",\"אפר\",\"מאי\",\"יוני\",\"יולי\",\"אוג\",\"ספט\",\"אוק\",\"נוב\",\"דצמ\"],dayNames:[\"ראשון\",\"שני\",\"שלישי\",\"רביעי\",\"חמישי\",\"שישי\",\"שבת\"],dayNamesShort:[\"א'\",\"ב'\",\"ג'\",\"ד'\",\"ה'\",\"ו'\",\"שבת\"],dayNamesMin:[\"א'\",\"ב'\",\"ג'\",\"ד'\",\"ה'\",\"ו'\",\"שבת\"],weekHeader:\"Wk\",dateFormat:\"dd/mm/yy\",firstDay:0,isRTL:!0,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"he\",{defaultButtonText:{month:\"חודש\",week:\"שבוע\",day:\"יום\",list:\"סדר יום\"},weekNumberTitle:\"שבוע\",allDayText:\"כל היום\",eventLimitText:\"אחר\"})}(),function(){var a={1:\"१\",2:\"२\",3:\"३\",4:\"४\",5:\"५\",6:\"६\",7:\"७\",8:\"८\",9:\"९\",0:\"०\"},n={\"१\":\"1\",\"२\":\"2\",\"३\":\"3\",\"४\":\"4\",\"५\":\"5\",\"६\":\"6\",\"७\":\"7\",\"८\":\"8\",\"९\":\"9\",\"०\":\"0\"};(t.defineLocale||t.lang).call(t,\"hi\",{months:\"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर\".split(\"_\"),monthsShort:\"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.\".split(\"_\"),weekdays:\"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार\".split(\"_\"),weekdaysShort:\"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि\".split(\"_\"),weekdaysMin:\"र_सो_मं_बु_गु_शु_श\".split(\"_\"),longDateFormat:{LT:\"A h:mm बजे\",LTS:\"A h:mm:ss बजे\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY, LT\",LLLL:\"dddd, D MMMM YYYY, LT\"},calendar:{sameDay:\"[आज] LT\",nextDay:\"[कल] LT\",nextWeek:\"dddd, LT\",lastDay:\"[कल] LT\",lastWeek:\"[पिछले] dddd, LT\",sameElse:\"L\"},relativeTime:{future:\"%s में\",past:\"%s पहले\",s:\"कुछ ही क्षण\",m:\"एक मिनट\",mm:\"%d मिनट\",h:\"एक घंटा\",hh:\"%d घंटे\",d:\"एक दिन\",dd:\"%d दिन\",M:\"एक महीने\",MM:\"%d महीने\",y:\"एक वर्ष\",yy:\"%d वर्ष\"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\\d/g,function(e){return a[e]})},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(e,t){return 12===e&&(e=0),\"रात\"===t?4>e?e:e+12:\"सुबह\"===t?e:\"दोपहर\"===t?e>=10?e:e+12:\"शाम\"===t?e+12:void 0},meridiem:function(e){return 4>e?\"रात\":10>e?\"सुबह\":17>e?\"दोपहर\":20>e?\"शाम\":\"रात\"},week:{dow:0,doy:6}}),e.fullCalendar.datepickerLang(\"hi\",\"hi\",{closeText:\"बंद\",prevText:\"पिछला\",nextText:\"अगला\",currentText:\"आज\",monthNames:[\"जनवरी \",\"फरवरी\",\"मार्च\",\"अप्रेल\",\"मई\",\"जून\",\"जूलाई\",\"अगस्त \",\"सितम्बर\",\"अक्टूबर\",\"नवम्बर\",\"दिसम्बर\"],monthNamesShort:[\"जन\",\"फर\",\"मार्च\",\"अप्रेल\",\"मई\",\"जून\",\"जूलाई\",\"अग\",\"सित\",\"अक्ट\",\"नव\",\"दि\"],dayNames:[\"रविवार\",\"सोमवार\",\"मंगलवार\",\"बुधवार\",\"गुरुवार\",\"शुक्रवार\",\"शनिवार\"],dayNamesShort:[\"रवि\",\"सोम\",\"मंगल\",\"बुध\",\"गुरु\",\"शुक्र\",\"शनि\"],dayNamesMin:[\"रवि\",\"सोम\",\"मंगल\",\"बुध\",\"गुरु\",\"शुक्र\",\"शनि\"],weekHeader:\"हफ्ता\",dateFormat:\"dd/mm/yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"hi\",{buttonText:{month:\"महीना\",week:\"सप्ताह\",day:\"दिन\",list:\"कार्यसूची\"},allDayText:\"सभी दिन\",eventLimitText:function(e){return\"+अधिक \"+e}})}(),function(){function a(e,t,a){var n=e+\" \";switch(a){case\"m\":return t?\"jedna minuta\":\"jedne minute\";case\"mm\":return n+=1===e?\"minuta\":2===e||3===e||4===e?\"minute\":\"minuta\";case\"h\":return t?\"jedan sat\":\"jednog sata\";case\"hh\":return n+=1===e?\"sat\":2===e||3===e||4===e?\"sata\":\"sati\";case\"dd\":return n+=1===e?\"dan\":\"dana\";case\"MM\":return n+=1===e?\"mjesec\":2===e||3===e||4===e?\"mjeseca\":\"mjeseci\";case\"yy\":return n+=1===e?\"godina\":2===e||3===e||4===e?\"godine\":\"godina\"}}(t.defineLocale||t.lang).call(t,\"hr\",{months:\"sječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac\".split(\"_\"),monthsShort:\"sje._vel._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.\".split(\"_\"),weekdays:\"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota\".split(\"_\"),weekdaysShort:\"ned._pon._uto._sri._čet._pet._sub.\".split(\"_\"),weekdaysMin:\"ne_po_ut_sr_če_pe_su\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD. MM. YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY LT\",LLLL:\"dddd, D. MMMM YYYY LT\"},calendar:{sameDay:\"[danas u] LT\",nextDay:\"[sutra u] LT\",nextWeek:function(){switch(this.day()){case 0:return\"[u] [nedjelju] [u] LT\";case 3:return\"[u] [srijedu] [u] LT\";case 6:return\"[u] [subotu] [u] LT\";case 1:case 2:case 4:case 5:return\"[u] dddd [u] LT\"}},lastDay:\"[jučer u] LT\",lastWeek:function(){switch(this.day()){case 0:case 3:return\"[prošlu] dddd [u] LT\";case 6:return\"[prošle] [subote] [u] LT\";case 1:case 2:case 4:case 5:return\"[prošli] dddd [u] LT\"}},sameElse:\"L\"},relativeTime:{future:\"za %s\",past:\"prije %s\",s:\"par sekundi\",m:a,mm:a,h:a,hh:a,d:\"dan\",dd:a,M:\"mjesec\",MM:a,y:\"godinu\",yy:a},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:7}}),e.fullCalendar.datepickerLang(\"hr\",\"hr\",{closeText:\"Zatvori\",prevText:\"&#x3C;\",nextText:\"&#x3E;\",currentText:\"Danas\",monthNames:[\"Siječanj\",\"Veljača\",\"Ožujak\",\"Travanj\",\"Svibanj\",\"Lipanj\",\"Srpanj\",\"Kolovoz\",\"Rujan\",\"Listopad\",\"Studeni\",\"Prosinac\"],monthNamesShort:[\"Sij\",\"Velj\",\"Ožu\",\"Tra\",\"Svi\",\"Lip\",\"Srp\",\"Kol\",\"Ruj\",\"Lis\",\"Stu\",\"Pro\"],dayNames:[\"Nedjelja\",\"Ponedjeljak\",\"Utorak\",\"Srijeda\",\"Četvrtak\",\"Petak\",\"Subota\"],dayNamesShort:[\"Ned\",\"Pon\",\"Uto\",\"Sri\",\"Čet\",\"Pet\",\"Sub\"],dayNamesMin:[\"Ne\",\"Po\",\"Ut\",\"Sr\",\"Če\",\"Pe\",\"Su\"],weekHeader:\"Tje\",dateFormat:\"dd.mm.yy.\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"hr\",{buttonText:{month:\"Mjesec\",week:\"Tjedan\",day:\"Dan\",list:\"Raspored\"},allDayText:\"Cijeli dan\",eventLimitText:function(e){return\"+ još \"+e}})}(),function(){function a(e,t,a,n){var r=e;switch(a){case\"s\":return n||t?\"néhány másodperc\":\"néhány másodperce\";case\"m\":return\"egy\"+(n||t?\" perc\":\" perce\");case\"mm\":return r+(n||t?\" perc\":\" perce\");case\"h\":return\"egy\"+(n||t?\" óra\":\" órája\");case\"hh\":return r+(n||t?\" óra\":\" órája\");case\"d\":return\"egy\"+(n||t?\" nap\":\" napja\");case\"dd\":return r+(n||t?\" nap\":\" napja\");case\"M\":return\"egy\"+(n||t?\" hónap\":\" hónapja\");case\"MM\":return r+(n||t?\" hónap\":\" hónapja\");case\"y\":return\"egy\"+(n||t?\" év\":\" éve\");case\"yy\":return r+(n||t?\" év\":\" éve\")}return\"\"}function n(e){return(e?\"\":\"[múlt] \")+\"[\"+r[this.day()]+\"] LT[-kor]\"}var r=\"vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton\".split(\" \");(t.defineLocale||t.lang).call(t,\"hu\",{months:\"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december\".split(\"_\"),monthsShort:\"jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec\".split(\"_\"),weekdays:\"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat\".split(\"_\"),weekdaysShort:\"vas_hét_kedd_sze_csüt_pén_szo\".split(\"_\"),weekdaysMin:\"v_h_k_sze_cs_p_szo\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"YYYY.MM.DD.\",LL:\"YYYY. MMMM D.\",LLL:\"YYYY. MMMM D., LT\",LLLL:\"YYYY. MMMM D., dddd LT\"},meridiemParse:/de|du/i,isPM:function(e){return\"u\"===e.charAt(1).toLowerCase()},meridiem:function(e,t,a){return 12>e?a===!0?\"de\":\"DE\":a===!0?\"du\":\"DU\"},calendar:{sameDay:\"[ma] LT[-kor]\",nextDay:\"[holnap] LT[-kor]\",nextWeek:function(){return n.call(this,!0)},lastDay:\"[tegnap] LT[-kor]\",lastWeek:function(){return n.call(this,!1)},sameElse:\"L\"},relativeTime:{future:\"%s múlva\",past:\"%s\",s:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:7}}),e.fullCalendar.datepickerLang(\"hu\",\"hu\",{closeText:\"bezár\",prevText:\"vissza\",nextText:\"előre\",currentText:\"ma\",monthNames:[\"Január\",\"Február\",\"Március\",\"Április\",\"Május\",\"Június\",\"Július\",\"Augusztus\",\"Szeptember\",\"Október\",\"November\",\"December\"],monthNamesShort:[\"Jan\",\"Feb\",\"Már\",\"Ápr\",\"Máj\",\"Jún\",\"Júl\",\"Aug\",\"Szep\",\"Okt\",\"Nov\",\"Dec\"],dayNames:[\"Vasárnap\",\"Hétfő\",\"Kedd\",\"Szerda\",\"Csütörtök\",\"Péntek\",\"Szombat\"],dayNamesShort:[\"Vas\",\"Hét\",\"Ked\",\"Sze\",\"Csü\",\"Pén\",\"Szo\"],dayNamesMin:[\"V\",\"H\",\"K\",\"Sze\",\"Cs\",\"P\",\"Szo\"],weekHeader:\"Hét\",dateFormat:\"yy.mm.dd.\",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:\"\"}),e.fullCalendar.lang(\"hu\",{buttonText:{month:\"Hónap\",week:\"Hét\",day:\"Nap\",list:\"Napló\"},allDayText:\"Egész nap\",eventLimitText:\"további\"})}(),function(){(t.defineLocale||t.lang).call(t,\"id\",{months:\"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember\".split(\"_\"),monthsShort:\"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des\".split(\"_\"),weekdays:\"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu\".split(\"_\"),weekdaysShort:\"Min_Sen_Sel_Rab_Kam_Jum_Sab\".split(\"_\"),weekdaysMin:\"Mg_Sn_Sl_Rb_Km_Jm_Sb\".split(\"_\"),longDateFormat:{LT:\"HH.mm\",LTS:\"LT.ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY [pukul] LT\",LLLL:\"dddd, D MMMM YYYY [pukul] LT\"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),\"pagi\"===t?e:\"siang\"===t?e>=11?e:e+12:\"sore\"===t||\"malam\"===t?e+12:void 0},meridiem:function(e){return 11>e?\"pagi\":15>e?\"siang\":19>e?\"sore\":\"malam\"},calendar:{sameDay:\"[Hari ini pukul] LT\",nextDay:\"[Besok pukul] LT\",nextWeek:\"dddd [pukul] LT\",lastDay:\"[Kemarin pukul] LT\",lastWeek:\"dddd [lalu pukul] LT\",sameElse:\"L\"},relativeTime:{future:\"dalam %s\",past:\"%s yang lalu\",s:\"beberapa detik\",m:\"semenit\",mm:\"%d menit\",h:\"sejam\",hh:\"%d jam\",d:\"sehari\",dd:\"%d hari\",M:\"sebulan\",MM:\"%d bulan\",y:\"setahun\",yy:\"%d tahun\"},week:{dow:1,doy:7}}),e.fullCalendar.datepickerLang(\"id\",\"id\",{closeText:\"Tutup\",prevText:\"&#x3C;mundur\",nextText:\"maju&#x3E;\",currentText:\"hari ini\",monthNames:[\"Januari\",\"Februari\",\"Maret\",\"April\",\"Mei\",\"Juni\",\"Juli\",\"Agustus\",\"September\",\"Oktober\",\"Nopember\",\"Desember\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"Mei\",\"Jun\",\"Jul\",\"Agus\",\"Sep\",\"Okt\",\"Nop\",\"Des\"],dayNames:[\"Minggu\",\"Senin\",\"Selasa\",\"Rabu\",\"Kamis\",\"Jumat\",\"Sabtu\"],dayNamesShort:[\"Min\",\"Sen\",\"Sel\",\"Rab\",\"kam\",\"Jum\",\"Sab\"],dayNamesMin:[\"Mg\",\"Sn\",\"Sl\",\"Rb\",\"Km\",\"jm\",\"Sb\"],weekHeader:\"Mg\",dateFormat:\"dd/mm/yy\",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"id\",{buttonText:{month:\"Bulan\",week:\"Minggu\",day:\"Hari\",list:\"Agenda\"},allDayHtml:\"Sehari<br/>penuh\",eventLimitText:\"lebih\"})}(),function(){function a(e){return 11===e%100?!0:1===e%10?!1:!0}function n(e,t,n,r){var i=e+\" \";switch(n){case\"s\":return t||r?\"nokkrar sekúndur\":\"nokkrum sekúndum\";case\"m\":return t?\"mínúta\":\"mínútu\";case\"mm\":return a(e)?i+(t||r?\"mínútur\":\"mínútum\"):t?i+\"mínúta\":i+\"mínútu\";case\"hh\":return a(e)?i+(t||r?\"klukkustundir\":\"klukkustundum\"):i+\"klukkustund\";case\"d\":return t?\"dagur\":r?\"dag\":\"degi\";case\"dd\":return a(e)?t?i+\"dagar\":i+(r?\"daga\":\"dögum\"):t?i+\"dagur\":i+(r?\"dag\":\"degi\");case\"M\":return t?\"mánuður\":r?\"mánuð\":\"mánuði\";case\"MM\":return a(e)?t?i+\"mánuðir\":i+(r?\"mánuði\":\"mánuðum\"):t?i+\"mánuður\":i+(r?\"mánuð\":\"mánuði\");case\"y\":return t||r?\"ár\":\"ári\";case\"yy\":return a(e)?i+(t||r?\"ár\":\"árum\"):i+(t||r?\"ár\":\"ári\")}}(t.defineLocale||t.lang).call(t,\"is\",{months:\"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember\".split(\"_\"),monthsShort:\"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des\".split(\"_\"),weekdays:\"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur\".split(\"_\"),weekdaysShort:\"sun_mán_þri_mið_fim_fös_lau\".split(\"_\"),weekdaysMin:\"Su_Má_Þr_Mi_Fi_Fö_La\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY [kl.] LT\",LLLL:\"dddd, D. MMMM YYYY [kl.] LT\"},calendar:{sameDay:\"[í dag kl.] LT\",nextDay:\"[á morgun kl.] LT\",nextWeek:\"dddd [kl.] LT\",lastDay:\"[í gær kl.] LT\",lastWeek:\"[síðasta] dddd [kl.] LT\",sameElse:\"L\"},relativeTime:{future:\"eftir %s\",past:\"fyrir %s síðan\",s:n,m:n,mm:n,h:\"klukkustund\",hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"is\",\"is\",{closeText:\"Loka\",prevText:\"&#x3C; Fyrri\",nextText:\"Næsti &#x3E;\",currentText:\"Í dag\",monthNames:[\"Janúar\",\"Febrúar\",\"Mars\",\"Apríl\",\"Maí\",\"Júní\",\"Júlí\",\"Ágúst\",\"September\",\"Október\",\"Nóvember\",\"Desember\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"Maí\",\"Jún\",\"Júl\",\"Ágú\",\"Sep\",\"Okt\",\"Nóv\",\"Des\"],dayNames:[\"Sunnudagur\",\"Mánudagur\",\"Þriðjudagur\",\"Miðvikudagur\",\"Fimmtudagur\",\"Föstudagur\",\"Laugardagur\"],dayNamesShort:[\"Sun\",\"Mán\",\"Þri\",\"Mið\",\"Fim\",\"Fös\",\"Lau\"],dayNamesMin:[\"Su\",\"Má\",\"Þr\",\"Mi\",\"Fi\",\"Fö\",\"La\"],weekHeader:\"Vika\",dateFormat:\"dd.mm.yy\",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"is\",{buttonText:{month:\"Mánuður\",week:\"Vika\",day:\"Dagur\",list:\"Dagskrá\"},allDayHtml:\"Allan<br/>daginn\",eventLimitText:\"meira\"})}(),function(){(t.defineLocale||t.lang).call(t,\"it\",{months:\"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre\".split(\"_\"),monthsShort:\"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic\".split(\"_\"),weekdays:\"Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato\".split(\"_\"),weekdaysShort:\"Dom_Lun_Mar_Mer_Gio_Ven_Sab\".split(\"_\"),weekdaysMin:\"D_L_Ma_Me_G_V_S\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd, D MMMM YYYY LT\"},calendar:{sameDay:\"[Oggi alle] LT\",nextDay:\"[Domani alle] LT\",nextWeek:\"dddd [alle] LT\",lastDay:\"[Ieri alle] LT\",lastWeek:function(){switch(this.day()){case 0:return\"[la scorsa] dddd [alle] LT\";default:return\"[lo scorso] dddd [alle] LT\"}},sameElse:\"L\"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?\"tra\":\"in\")+\" \"+e},past:\"%s fa\",s:\"alcuni secondi\",m:\"un minuto\",mm:\"%d minuti\",h:\"un'ora\",hh:\"%d ore\",d:\"un giorno\",dd:\"%d giorni\",M:\"un mese\",MM:\"%d mesi\",y:\"un anno\",yy:\"%d anni\"},ordinalParse:/\\d{1,2}º/,ordinal:\"%dº\",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"it\",\"it\",{closeText:\"Chiudi\",prevText:\"&#x3C;Prec\",nextText:\"Succ&#x3E;\",currentText:\"Oggi\",monthNames:[\"Gennaio\",\"Febbraio\",\"Marzo\",\"Aprile\",\"Maggio\",\"Giugno\",\"Luglio\",\"Agosto\",\"Settembre\",\"Ottobre\",\"Novembre\",\"Dicembre\"],monthNamesShort:[\"Gen\",\"Feb\",\"Mar\",\"Apr\",\"Mag\",\"Giu\",\"Lug\",\"Ago\",\"Set\",\"Ott\",\"Nov\",\"Dic\"],dayNames:[\"Domenica\",\"Lunedì\",\"Martedì\",\"Mercoledì\",\"Giovedì\",\"Venerdì\",\"Sabato\"],dayNamesShort:[\"Dom\",\"Lun\",\"Mar\",\"Mer\",\"Gio\",\"Ven\",\"Sab\"],dayNamesMin:[\"Do\",\"Lu\",\"Ma\",\"Me\",\"Gi\",\"Ve\",\"Sa\"],weekHeader:\"Sm\",dateFormat:\"dd/mm/yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"it\",{buttonText:{month:\"Mese\",week:\"Settimana\",day:\"Giorno\",list:\"Agenda\"},allDayHtml:\"Tutto il<br/>giorno\",eventLimitText:function(e){return\"+altri \"+e}})}(),function(){(t.defineLocale||t.lang).call(t,\"ja\",{months:\"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月\".split(\"_\"),monthsShort:\"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月\".split(\"_\"),weekdays:\"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日\".split(\"_\"),weekdaysShort:\"日_月_火_水_木_金_土\".split(\"_\"),weekdaysMin:\"日_月_火_水_木_金_土\".split(\"_\"),longDateFormat:{LT:\"Ah時m分\",LTS:\"LTs秒\",L:\"YYYY/MM/DD\",LL:\"YYYY年M月D日\",LLL:\"YYYY年M月D日LT\",LLLL:\"YYYY年M月D日LT dddd\"},meridiemParse:/午前|午後/i,isPM:function(e){return\"午後\"===e},meridiem:function(e){return 12>e?\"午前\":\"午後\"},calendar:{sameDay:\"[今日] LT\",nextDay:\"[明日] LT\",nextWeek:\"[来週]dddd LT\",lastDay:\"[昨日] LT\",lastWeek:\"[前週]dddd LT\",sameElse:\"L\"},relativeTime:{future:\"%s後\",past:\"%s前\",s:\"数秒\",m:\"1分\",mm:\"%d分\",h:\"1時間\",hh:\"%d時間\",d:\"1日\",dd:\"%d日\",M:\"1ヶ月\",MM:\"%dヶ月\",y:\"1年\",yy:\"%d年\"}}),e.fullCalendar.datepickerLang(\"ja\",\"ja\",{closeText:\"閉じる\",prevText:\"&#x3C;前\",nextText:\"次&#x3E;\",currentText:\"今日\",monthNames:[\"1月\",\"2月\",\"3月\",\"4月\",\"5月\",\"6月\",\"7月\",\"8月\",\"9月\",\"10月\",\"11月\",\"12月\"],monthNamesShort:[\"1月\",\"2月\",\"3月\",\"4月\",\"5月\",\"6月\",\"7月\",\"8月\",\"9月\",\"10月\",\"11月\",\"12月\"],dayNames:[\"日曜日\",\"月曜日\",\"火曜日\",\"水曜日\",\"木曜日\",\"金曜日\",\"土曜日\"],dayNamesShort:[\"日\",\"月\",\"火\",\"水\",\"木\",\"金\",\"土\"],dayNamesMin:[\"日\",\"月\",\"火\",\"水\",\"木\",\"金\",\"土\"],weekHeader:\"週\",dateFormat:\"yy/mm/dd\",firstDay:0,isRTL:!1,showMonthAfterYear:!0,yearSuffix:\"年\"}),e.fullCalendar.lang(\"ja\",{buttonText:{month:\"月\",week:\"週\",day:\"日\",list:\"予定リスト\"},allDayText:\"終日\",eventLimitText:function(e){return\"他 \"+e+\" 件\"}})}(),function(){(t.defineLocale||t.lang).call(t,\"ko\",{months:\"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월\".split(\"_\"),monthsShort:\"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월\".split(\"_\"),weekdays:\"일요일_월요일_화요일_수요일_목요일_금요일_토요일\".split(\"_\"),weekdaysShort:\"일_월_화_수_목_금_토\".split(\"_\"),weekdaysMin:\"일_월_화_수_목_금_토\".split(\"_\"),longDateFormat:{LT:\"A h시 m분\",LTS:\"A h시 m분 s초\",L:\"YYYY.MM.DD\",LL:\"YYYY년 MMMM D일\",LLL:\"YYYY년 MMMM D일 LT\",LLLL:\"YYYY년 MMMM D일 dddd LT\"},calendar:{sameDay:\"오늘 LT\",nextDay:\"내일 LT\",nextWeek:\"dddd LT\",lastDay:\"어제 LT\",lastWeek:\"지난주 dddd LT\",sameElse:\"L\"},relativeTime:{future:\"%s 후\",past:\"%s 전\",s:\"몇초\",ss:\"%d초\",m:\"일분\",mm:\"%d분\",h:\"한시간\",hh:\"%d시간\",d:\"하루\",dd:\"%d일\",M:\"한달\",MM:\"%d달\",y:\"일년\",yy:\"%d년\"},ordinalParse:/\\d{1,2}일/,ordinal:\"%d일\",meridiemParse:/오전|오후/,isPM:function(e){return\"오후\"===e},meridiem:function(e){return 12>e?\"오전\":\"오후\"}}),e.fullCalendar.datepickerLang(\"ko\",\"ko\",{closeText:\"닫기\",prevText:\"이전달\",nextText:\"다음달\",currentText:\"오늘\",monthNames:[\"1월\",\"2월\",\"3월\",\"4월\",\"5월\",\"6월\",\"7월\",\"8월\",\"9월\",\"10월\",\"11월\",\"12월\"],monthNamesShort:[\"1월\",\"2월\",\"3월\",\"4월\",\"5월\",\"6월\",\"7월\",\"8월\",\"9월\",\"10월\",\"11월\",\"12월\"],dayNames:[\"일요일\",\"월요일\",\"화요일\",\"수요일\",\"목요일\",\"금요일\",\"토요일\"],dayNamesShort:[\"일\",\"월\",\"화\",\"수\",\"목\",\"금\",\"토\"],dayNamesMin:[\"일\",\"월\",\"화\",\"수\",\"목\",\"금\",\"토\"],weekHeader:\"Wk\",dateFormat:\"yy-mm-dd\",firstDay:0,isRTL:!1,showMonthAfterYear:!0,yearSuffix:\"년\"}),e.fullCalendar.lang(\"ko\",{buttonText:{month:\"월\",week:\"주\",day:\"일\",list:\"일정목록\"},allDayText:\"종일\",eventLimitText:\"개\"})}(),function(){function a(e,t,a,n){return t?\"kelios sekundės\":n?\"kelių sekundžių\":\"kelias sekundes\"}function n(e,t,a,n){return t?i(a)[0]:n?i(a)[1]:i(a)[2]}function r(e){return 0===e%10||e>10&&20>e}function i(e){return d[e].split(\"_\")}function s(e,t,a,s){var o=e+\" \";return 1===e?o+n(e,t,a[0],s):t?o+(r(e)?i(a)[1]:i(a)[0]):s?o+i(a)[1]:o+(r(e)?i(a)[1]:i(a)[2])}function o(e,t){var a=-1===t.indexOf(\"dddd HH:mm\"),n=l[e.day()];return a?n:n.substring(0,n.length-2)+\"į\"}var d={m:\"minutė_minutės_minutę\",mm:\"minutės_minučių_minutes\",h:\"valanda_valandos_valandą\",hh:\"valandos_valandų_valandas\",d:\"diena_dienos_dieną\",dd:\"dienos_dienų_dienas\",M:\"mėnuo_mėnesio_mėnesį\",MM:\"mėnesiai_mėnesių_mėnesius\",y:\"metai_metų_metus\",yy:\"metai_metų_metus\"},l=\"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis\".split(\"_\");(t.defineLocale||t.lang).call(t,\"lt\",{months:\"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio\".split(\"_\"),monthsShort:\"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd\".split(\"_\"),weekdays:o,weekdaysShort:\"Sek_Pir_Ant_Tre_Ket_Pen_Šeš\".split(\"_\"),weekdaysMin:\"S_P_A_T_K_Pn_Š\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"YYYY-MM-DD\",LL:\"YYYY [m.] MMMM D [d.]\",LLL:\"YYYY [m.] MMMM D [d.], LT [val.]\",LLLL:\"YYYY [m.] MMMM D [d.], dddd, LT [val.]\",l:\"YYYY-MM-DD\",ll:\"YYYY [m.] MMMM D [d.]\",lll:\"YYYY [m.] MMMM D [d.], LT [val.]\",llll:\"YYYY [m.] MMMM D [d.], ddd, LT [val.]\"},calendar:{sameDay:\"[Šiandien] LT\",nextDay:\"[Rytoj] LT\",nextWeek:\"dddd LT\",lastDay:\"[Vakar] LT\",lastWeek:\"[Praėjusį] dddd LT\",sameElse:\"L\"},relativeTime:{future:\"po %s\",past:\"prieš %s\",s:a,m:n,mm:s,h:n,hh:s,d:n,dd:s,M:n,MM:s,y:n,yy:s},ordinalParse:/\\d{1,2}-oji/,ordinal:function(e){return e+\"-oji\"},week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"lt\",\"lt\",{closeText:\"Uždaryti\",prevText:\"&#x3C;Atgal\",nextText:\"Pirmyn&#x3E;\",currentText:\"Šiandien\",monthNames:[\"Sausis\",\"Vasaris\",\"Kovas\",\"Balandis\",\"Gegužė\",\"Birželis\",\"Liepa\",\"Rugpjūtis\",\"Rugsėjis\",\"Spalis\",\"Lapkritis\",\"Gruodis\"],monthNamesShort:[\"Sau\",\"Vas\",\"Kov\",\"Bal\",\"Geg\",\"Bir\",\"Lie\",\"Rugp\",\"Rugs\",\"Spa\",\"Lap\",\"Gru\"],dayNames:[\"sekmadienis\",\"pirmadienis\",\"antradienis\",\"trečiadienis\",\"ketvirtadienis\",\"penktadienis\",\"šeštadienis\"],dayNamesShort:[\"sek\",\"pir\",\"ant\",\"tre\",\"ket\",\"pen\",\"šeš\"],dayNamesMin:[\"Se\",\"Pr\",\"An\",\"Tr\",\"Ke\",\"Pe\",\"Še\"],weekHeader:\"SAV\",dateFormat:\"yy-mm-dd\",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:\"\"}),e.fullCalendar.lang(\"lt\",{buttonText:{month:\"Mėnuo\",week:\"Savaitė\",day:\"Diena\",list:\"Darbotvarkė\"},allDayText:\"Visą dieną\",eventLimitText:\"daugiau\"})}(),function(){function a(e,t,a){var n=e.split(\"_\");return a?1===t%10&&11!==t?n[2]:n[3]:1===t%10&&11!==t?n[0]:n[1]}function n(e,t,n){return e+\" \"+a(r[n],e,t)}var r={mm:\"minūti_minūtes_minūte_minūtes\",hh:\"stundu_stundas_stunda_stundas\",dd:\"dienu_dienas_diena_dienas\",MM:\"mēnesi_mēnešus_mēnesis_mēneši\",yy:\"gadu_gadus_gads_gadi\"};(t.defineLocale||t.lang).call(t,\"lv\",{months:\"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris\".split(\"_\"),monthsShort:\"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec\".split(\"_\"),weekdays:\"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena\".split(\"_\"),weekdaysShort:\"Sv_P_O_T_C_Pk_S\".split(\"_\"),weekdaysMin:\"Sv_P_O_T_C_Pk_S\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD.MM.YYYY\",LL:\"YYYY. [gada] D. MMMM\",LLL:\"YYYY. [gada] D. MMMM, LT\",LLLL:\"YYYY. [gada] D. MMMM, dddd, LT\"},calendar:{sameDay:\"[Šodien pulksten] LT\",nextDay:\"[Rīt pulksten] LT\",nextWeek:\"dddd [pulksten] LT\",lastDay:\"[Vakar pulksten] LT\",lastWeek:\"[Pagājušā] dddd [pulksten] LT\",sameElse:\"L\"},relativeTime:{future:\"%s vēlāk\",past:\"%s agrāk\",s:\"dažas sekundes\",m:\"minūti\",mm:n,h:\"stundu\",hh:n,d:\"dienu\",dd:n,M:\"mēnesi\",MM:n,y:\"gadu\",yy:n},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"lv\",\"lv\",{closeText:\"Aizvērt\",prevText:\"Iepr.\",nextText:\"Nāk.\",currentText:\"Šodien\",monthNames:[\"Janvāris\",\"Februāris\",\"Marts\",\"Aprīlis\",\"Maijs\",\"Jūnijs\",\"Jūlijs\",\"Augusts\",\"Septembris\",\"Oktobris\",\"Novembris\",\"Decembris\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"Mai\",\"Jūn\",\"Jūl\",\"Aug\",\"Sep\",\"Okt\",\"Nov\",\"Dec\"],dayNames:[\"svētdiena\",\"pirmdiena\",\"otrdiena\",\"trešdiena\",\"ceturtdiena\",\"piektdiena\",\"sestdiena\"],dayNamesShort:[\"svt\",\"prm\",\"otr\",\"tre\",\"ctr\",\"pkt\",\"sst\"],dayNamesMin:[\"Sv\",\"Pr\",\"Ot\",\"Tr\",\"Ct\",\"Pk\",\"Ss\"],weekHeader:\"Ned.\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"lv\",{buttonText:{month:\"Mēnesis\",week:\"Nedēļa\",day:\"Diena\",list:\"Dienas kārtība\"},allDayText:\"Visu dienu\",eventLimitText:function(e){return\"+vēl \"+e}})}(),function(){(t.defineLocale||t.lang).call(t,\"nb\",{months:\"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember\".split(\"_\"),monthsShort:\"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des\".split(\"_\"),weekdays:\"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag\".split(\"_\"),weekdaysShort:\"søn_man_tirs_ons_tors_fre_lør\".split(\"_\"),weekdaysMin:\"sø_ma_ti_on_to_fr_lø\".split(\"_\"),longDateFormat:{LT:\"H.mm\",LTS:\"LT.ss\",L:\"DD.MM.YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY [kl.] LT\",LLLL:\"dddd D. MMMM YYYY [kl.] LT\"},calendar:{sameDay:\"[i dag kl.] LT\",nextDay:\"[i morgen kl.] LT\",nextWeek:\"dddd [kl.] LT\",lastDay:\"[i går kl.] LT\",lastWeek:\"[forrige] dddd [kl.] LT\",sameElse:\"L\"},relativeTime:{future:\"om %s\",past:\"for %s siden\",s:\"noen sekunder\",m:\"ett minutt\",mm:\"%d minutter\",h:\"en time\",hh:\"%d timer\",d:\"en dag\",dd:\"%d dager\",M:\"en måned\",MM:\"%d måneder\",y:\"ett år\",yy:\"%d år\"},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"nb\",\"nb\",{closeText:\"Lukk\",prevText:\"&#xAB;Forrige\",nextText:\"Neste&#xBB;\",currentText:\"I dag\",monthNames:[\"januar\",\"februar\",\"mars\",\"april\",\"mai\",\"juni\",\"juli\",\"august\",\"september\",\"oktober\",\"november\",\"desember\"],monthNamesShort:[\"jan\",\"feb\",\"mar\",\"apr\",\"mai\",\"jun\",\"jul\",\"aug\",\"sep\",\"okt\",\"nov\",\"des\"],dayNamesShort:[\"søn\",\"man\",\"tir\",\"ons\",\"tor\",\"fre\",\"lør\"],dayNames:[\"søndag\",\"mandag\",\"tirsdag\",\"onsdag\",\"torsdag\",\"fredag\",\"lørdag\"],dayNamesMin:[\"sø\",\"ma\",\"ti\",\"on\",\"to\",\"fr\",\"lø\"],weekHeader:\"Uke\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"nb\",{buttonText:{month:\"Måned\",week:\"Uke\",day:\"Dag\",list:\"Agenda\"},allDayText:\"Hele dagen\",eventLimitText:\"til\"})}(),function(){var a=\"jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.\".split(\"_\"),n=\"jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec\".split(\"_\");(t.defineLocale||t.lang).call(t,\"nl\",{months:\"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december\".split(\"_\"),monthsShort:function(e,t){return/-MMM-/.test(t)?n[e.month()]:a[e.month()]},weekdays:\"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag\".split(\"_\"),weekdaysShort:\"zo._ma._di._wo._do._vr._za.\".split(\"_\"),weekdaysMin:\"Zo_Ma_Di_Wo_Do_Vr_Za\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD-MM-YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd D MMMM YYYY LT\"},calendar:{sameDay:\"[vandaag om] LT\",nextDay:\"[morgen om] LT\",nextWeek:\"dddd [om] LT\",lastDay:\"[gisteren om] LT\",lastWeek:\"[afgelopen] dddd [om] LT\",sameElse:\"L\"},relativeTime:{future:\"over %s\",past:\"%s geleden\",s:\"een paar seconden\",m:\"één minuut\",mm:\"%d minuten\",h:\"één uur\",hh:\"%d uur\",d:\"één dag\",dd:\"%d dagen\",M:\"één maand\",MM:\"%d maanden\",y:\"één jaar\",yy:\"%d jaar\"},ordinalParse:/\\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?\"ste\":\"de\")},week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"nl\",\"nl\",{closeText:\"Sluiten\",prevText:\"←\",nextText:\"→\",currentText:\"Vandaag\",monthNames:[\"januari\",\"februari\",\"maart\",\"april\",\"mei\",\"juni\",\"juli\",\"augustus\",\"september\",\"oktober\",\"november\",\"december\"],monthNamesShort:[\"jan\",\"feb\",\"mrt\",\"apr\",\"mei\",\"jun\",\"jul\",\"aug\",\"sep\",\"okt\",\"nov\",\"dec\"],dayNames:[\"zondag\",\"maandag\",\"dinsdag\",\"woensdag\",\"donderdag\",\"vrijdag\",\"zaterdag\"],dayNamesShort:[\"zon\",\"maa\",\"din\",\"woe\",\"don\",\"vri\",\"zat\"],dayNamesMin:[\"zo\",\"ma\",\"di\",\"wo\",\"do\",\"vr\",\"za\"],weekHeader:\"Wk\",dateFormat:\"dd-mm-yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"nl\",{buttonText:{month:\"Maand\",week:\"Week\",day:\"Dag\",list:\"Agenda\"},allDayText:\"Hele dag\",eventLimitText:\"extra\"})\n}(),function(){function a(e){return 5>e%10&&e%10>1&&1!==~~(e/10)%10}function n(e,t,n){var r=e+\" \";switch(n){case\"m\":return t?\"minuta\":\"minutę\";case\"mm\":return r+(a(e)?\"minuty\":\"minut\");case\"h\":return t?\"godzina\":\"godzinę\";case\"hh\":return r+(a(e)?\"godziny\":\"godzin\");case\"MM\":return r+(a(e)?\"miesiące\":\"miesięcy\");case\"yy\":return r+(a(e)?\"lata\":\"lat\")}}var r=\"styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień\".split(\"_\"),i=\"stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia\".split(\"_\");(t.defineLocale||t.lang).call(t,\"pl\",{months:function(e,t){return/D MMMM/.test(t)?i[e.month()]:r[e.month()]},monthsShort:\"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru\".split(\"_\"),weekdays:\"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota\".split(\"_\"),weekdaysShort:\"nie_pon_wt_śr_czw_pt_sb\".split(\"_\"),weekdaysMin:\"N_Pn_Wt_Śr_Cz_Pt_So\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD.MM.YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd, D MMMM YYYY LT\"},calendar:{sameDay:\"[Dziś o] LT\",nextDay:\"[Jutro o] LT\",nextWeek:\"[W] dddd [o] LT\",lastDay:\"[Wczoraj o] LT\",lastWeek:function(){switch(this.day()){case 0:return\"[W zeszłą niedzielę o] LT\";case 3:return\"[W zeszłą środę o] LT\";case 6:return\"[W zeszłą sobotę o] LT\";default:return\"[W zeszły] dddd [o] LT\"}},sameElse:\"L\"},relativeTime:{future:\"za %s\",past:\"%s temu\",s:\"kilka sekund\",m:n,mm:n,h:n,hh:n,d:\"1 dzień\",dd:\"%d dni\",M:\"miesiąc\",MM:n,y:\"rok\",yy:n},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"pl\",\"pl\",{closeText:\"Zamknij\",prevText:\"&#x3C;Poprzedni\",nextText:\"Następny&#x3E;\",currentText:\"Dziś\",monthNames:[\"Styczeń\",\"Luty\",\"Marzec\",\"Kwiecień\",\"Maj\",\"Czerwiec\",\"Lipiec\",\"Sierpień\",\"Wrzesień\",\"Październik\",\"Listopad\",\"Grudzień\"],monthNamesShort:[\"Sty\",\"Lu\",\"Mar\",\"Kw\",\"Maj\",\"Cze\",\"Lip\",\"Sie\",\"Wrz\",\"Pa\",\"Lis\",\"Gru\"],dayNames:[\"Niedziela\",\"Poniedziałek\",\"Wtorek\",\"Środa\",\"Czwartek\",\"Piątek\",\"Sobota\"],dayNamesShort:[\"Nie\",\"Pn\",\"Wt\",\"Śr\",\"Czw\",\"Pt\",\"So\"],dayNamesMin:[\"N\",\"Pn\",\"Wt\",\"Śr\",\"Cz\",\"Pt\",\"So\"],weekHeader:\"Tydz\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"pl\",{buttonText:{month:\"Miesiąc\",week:\"Tydzień\",day:\"Dzień\",list:\"Plan dnia\"},allDayText:\"Cały dzień\",eventLimitText:\"więcej\"})}(),function(){(t.defineLocale||t.lang).call(t,\"pt-br\",{months:\"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro\".split(\"_\"),monthsShort:\"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez\".split(\"_\"),weekdays:\"domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado\".split(\"_\"),weekdaysShort:\"dom_seg_ter_qua_qui_sex_sáb\".split(\"_\"),weekdaysMin:\"dom_2ª_3ª_4ª_5ª_6ª_sáb\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D [de] MMMM [de] YYYY\",LLL:\"D [de] MMMM [de] YYYY [às] LT\",LLLL:\"dddd, D [de] MMMM [de] YYYY [às] LT\"},calendar:{sameDay:\"[Hoje às] LT\",nextDay:\"[Amanhã às] LT\",nextWeek:\"dddd [às] LT\",lastDay:\"[Ontem às] LT\",lastWeek:function(){return 0===this.day()||6===this.day()?\"[Último] dddd [às] LT\":\"[Última] dddd [às] LT\"},sameElse:\"L\"},relativeTime:{future:\"em %s\",past:\"%s atrás\",s:\"segundos\",m:\"um minuto\",mm:\"%d minutos\",h:\"uma hora\",hh:\"%d horas\",d:\"um dia\",dd:\"%d dias\",M:\"um mês\",MM:\"%d meses\",y:\"um ano\",yy:\"%d anos\"},ordinalParse:/\\d{1,2}º/,ordinal:\"%dº\"}),e.fullCalendar.datepickerLang(\"pt-br\",\"pt-BR\",{closeText:\"Fechar\",prevText:\"&#x3C;Anterior\",nextText:\"Próximo&#x3E;\",currentText:\"Hoje\",monthNames:[\"Janeiro\",\"Fevereiro\",\"Março\",\"Abril\",\"Maio\",\"Junho\",\"Julho\",\"Agosto\",\"Setembro\",\"Outubro\",\"Novembro\",\"Dezembro\"],monthNamesShort:[\"Jan\",\"Fev\",\"Mar\",\"Abr\",\"Mai\",\"Jun\",\"Jul\",\"Ago\",\"Set\",\"Out\",\"Nov\",\"Dez\"],dayNames:[\"Domingo\",\"Segunda-feira\",\"Terça-feira\",\"Quarta-feira\",\"Quinta-feira\",\"Sexta-feira\",\"Sábado\"],dayNamesShort:[\"Dom\",\"Seg\",\"Ter\",\"Qua\",\"Qui\",\"Sex\",\"Sáb\"],dayNamesMin:[\"Dom\",\"Seg\",\"Ter\",\"Qua\",\"Qui\",\"Sex\",\"Sáb\"],weekHeader:\"Sm\",dateFormat:\"dd/mm/yy\",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"pt-br\",{buttonText:{month:\"Mês\",week:\"Semana\",day:\"Dia\",list:\"Compromissos\"},allDayText:\"dia inteiro\",eventLimitText:function(e){return\"mais +\"+e}})}(),function(){(t.defineLocale||t.lang).call(t,\"pt\",{months:\"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro\".split(\"_\"),monthsShort:\"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez\".split(\"_\"),weekdays:\"domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado\".split(\"_\"),weekdaysShort:\"dom_seg_ter_qua_qui_sex_sáb\".split(\"_\"),weekdaysMin:\"dom_2ª_3ª_4ª_5ª_6ª_sáb\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D [de] MMMM [de] YYYY\",LLL:\"D [de] MMMM [de] YYYY LT\",LLLL:\"dddd, D [de] MMMM [de] YYYY LT\"},calendar:{sameDay:\"[Hoje às] LT\",nextDay:\"[Amanhã às] LT\",nextWeek:\"dddd [às] LT\",lastDay:\"[Ontem às] LT\",lastWeek:function(){return 0===this.day()||6===this.day()?\"[Último] dddd [às] LT\":\"[Última] dddd [às] LT\"},sameElse:\"L\"},relativeTime:{future:\"em %s\",past:\"há %s\",s:\"segundos\",m:\"um minuto\",mm:\"%d minutos\",h:\"uma hora\",hh:\"%d horas\",d:\"um dia\",dd:\"%d dias\",M:\"um mês\",MM:\"%d meses\",y:\"um ano\",yy:\"%d anos\"},ordinalParse:/\\d{1,2}º/,ordinal:\"%dº\",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"pt\",\"pt\",{closeText:\"Fechar\",prevText:\"Anterior\",nextText:\"Seguinte\",currentText:\"Hoje\",monthNames:[\"Janeiro\",\"Fevereiro\",\"Março\",\"Abril\",\"Maio\",\"Junho\",\"Julho\",\"Agosto\",\"Setembro\",\"Outubro\",\"Novembro\",\"Dezembro\"],monthNamesShort:[\"Jan\",\"Fev\",\"Mar\",\"Abr\",\"Mai\",\"Jun\",\"Jul\",\"Ago\",\"Set\",\"Out\",\"Nov\",\"Dez\"],dayNames:[\"Domingo\",\"Segunda-feira\",\"Terça-feira\",\"Quarta-feira\",\"Quinta-feira\",\"Sexta-feira\",\"Sábado\"],dayNamesShort:[\"Dom\",\"Seg\",\"Ter\",\"Qua\",\"Qui\",\"Sex\",\"Sáb\"],dayNamesMin:[\"Dom\",\"Seg\",\"Ter\",\"Qua\",\"Qui\",\"Sex\",\"Sáb\"],weekHeader:\"Sem\",dateFormat:\"dd/mm/yy\",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"pt\",{buttonText:{month:\"Mês\",week:\"Semana\",day:\"Dia\",list:\"Agenda\"},allDayText:\"Todo o dia\",eventLimitText:\"mais\"})}(),function(){function a(e,t,a){var n={mm:\"minute\",hh:\"ore\",dd:\"zile\",MM:\"luni\",yy:\"ani\"},r=\" \";return(e%100>=20||e>=100&&0===e%100)&&(r=\" de \"),e+r+n[a]}(t.defineLocale||t.lang).call(t,\"ro\",{months:\"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie\".split(\"_\"),monthsShort:\"ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.\".split(\"_\"),weekdays:\"duminică_luni_marți_miercuri_joi_vineri_sâmbătă\".split(\"_\"),weekdaysShort:\"Dum_Lun_Mar_Mie_Joi_Vin_Sâm\".split(\"_\"),weekdaysMin:\"Du_Lu_Ma_Mi_Jo_Vi_Sâ\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD.MM.YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY H:mm\",LLLL:\"dddd, D MMMM YYYY H:mm\"},calendar:{sameDay:\"[azi la] LT\",nextDay:\"[mâine la] LT\",nextWeek:\"dddd [la] LT\",lastDay:\"[ieri la] LT\",lastWeek:\"[fosta] dddd [la] LT\",sameElse:\"L\"},relativeTime:{future:\"peste %s\",past:\"%s în urmă\",s:\"câteva secunde\",m:\"un minut\",mm:a,h:\"o oră\",hh:a,d:\"o zi\",dd:a,M:\"o lună\",MM:a,y:\"un an\",yy:a},week:{dow:1,doy:7}}),e.fullCalendar.datepickerLang(\"ro\",\"ro\",{closeText:\"Închide\",prevText:\"&#xAB; Luna precedentă\",nextText:\"Luna următoare &#xBB;\",currentText:\"Azi\",monthNames:[\"Ianuarie\",\"Februarie\",\"Martie\",\"Aprilie\",\"Mai\",\"Iunie\",\"Iulie\",\"August\",\"Septembrie\",\"Octombrie\",\"Noiembrie\",\"Decembrie\"],monthNamesShort:[\"Ian\",\"Feb\",\"Mar\",\"Apr\",\"Mai\",\"Iun\",\"Iul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],dayNames:[\"Duminică\",\"Luni\",\"Marţi\",\"Miercuri\",\"Joi\",\"Vineri\",\"Sâmbătă\"],dayNamesShort:[\"Dum\",\"Lun\",\"Mar\",\"Mie\",\"Joi\",\"Vin\",\"Sâm\"],dayNamesMin:[\"Du\",\"Lu\",\"Ma\",\"Mi\",\"Jo\",\"Vi\",\"Sâ\"],weekHeader:\"Săpt\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"ro\",{buttonText:{prev:\"precedentă\",next:\"următoare\",month:\"Lună\",week:\"Săptămână\",day:\"Zi\",list:\"Agendă\"},allDayText:\"Toată ziua\",eventLimitText:function(e){return\"+alte \"+e}})}(),function(){function a(e,t){var a=e.split(\"_\");return 1===t%10&&11!==t%100?a[0]:t%10>=2&&4>=t%10&&(10>t%100||t%100>=20)?a[1]:a[2]}function n(e,t,n){var r={mm:t?\"минута_минуты_минут\":\"минуту_минуты_минут\",hh:\"час_часа_часов\",dd:\"день_дня_дней\",MM:\"месяц_месяца_месяцев\",yy:\"год_года_лет\"};return\"m\"===n?t?\"минута\":\"минуту\":e+\" \"+a(r[n],+e)}function r(e,t){var a={nominative:\"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь\".split(\"_\"),accusative:\"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря\".split(\"_\")},n=/D[oD]?(\\[[^\\[\\]]*\\]|\\s+)+MMMM?/.test(t)?\"accusative\":\"nominative\";return a[n][e.month()]}function i(e,t){var a={nominative:\"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек\".split(\"_\"),accusative:\"янв_фев_мар_апр_мая_июня_июля_авг_сен_окт_ноя_дек\".split(\"_\")},n=/D[oD]?(\\[[^\\[\\]]*\\]|\\s+)+MMMM?/.test(t)?\"accusative\":\"nominative\";return a[n][e.month()]}function s(e,t){var a={nominative:\"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота\".split(\"_\"),accusative:\"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу\".split(\"_\")},n=/\\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\\] ?dddd/.test(t)?\"accusative\":\"nominative\";return a[n][e.day()]}(t.defineLocale||t.lang).call(t,\"ru\",{months:r,monthsShort:i,weekdays:s,weekdaysShort:\"вс_пн_вт_ср_чт_пт_сб\".split(\"_\"),weekdaysMin:\"вс_пн_вт_ср_чт_пт_сб\".split(\"_\"),monthsParse:[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[й|я]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i],longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD.MM.YYYY\",LL:\"D MMMM YYYY г.\",LLL:\"D MMMM YYYY г., LT\",LLLL:\"dddd, D MMMM YYYY г., LT\"},calendar:{sameDay:\"[Сегодня в] LT\",nextDay:\"[Завтра в] LT\",lastDay:\"[Вчера в] LT\",nextWeek:function(){return 2===this.day()?\"[Во] dddd [в] LT\":\"[В] dddd [в] LT\"},lastWeek:function(e){if(e.week()===this.week())return 2===this.day()?\"[Во] dddd [в] LT\":\"[В] dddd [в] LT\";switch(this.day()){case 0:return\"[В прошлое] dddd [в] LT\";case 1:case 2:case 4:return\"[В прошлый] dddd [в] LT\";case 3:case 5:case 6:return\"[В прошлую] dddd [в] LT\"}},sameElse:\"L\"},relativeTime:{future:\"через %s\",past:\"%s назад\",s:\"несколько секунд\",m:n,mm:n,h:\"час\",hh:n,d:\"день\",dd:n,M:\"месяц\",MM:n,y:\"год\",yy:n},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(e){return/^(дня|вечера)$/.test(e)},meridiem:function(e){return 4>e?\"ночи\":12>e?\"утра\":17>e?\"дня\":\"вечера\"},ordinalParse:/\\d{1,2}-(й|го|я)/,ordinal:function(e,t){switch(t){case\"M\":case\"d\":case\"DDD\":return e+\"-й\";case\"D\":return e+\"-го\";case\"w\":case\"W\":return e+\"-я\";default:return e}},week:{dow:1,doy:7}}),e.fullCalendar.datepickerLang(\"ru\",\"ru\",{closeText:\"Закрыть\",prevText:\"&#x3C;Пред\",nextText:\"След&#x3E;\",currentText:\"Сегодня\",monthNames:[\"Январь\",\"Февраль\",\"Март\",\"Апрель\",\"Май\",\"Июнь\",\"Июль\",\"Август\",\"Сентябрь\",\"Октябрь\",\"Ноябрь\",\"Декабрь\"],monthNamesShort:[\"Янв\",\"Фев\",\"Мар\",\"Апр\",\"Май\",\"Июн\",\"Июл\",\"Авг\",\"Сен\",\"Окт\",\"Ноя\",\"Дек\"],dayNames:[\"воскресенье\",\"понедельник\",\"вторник\",\"среда\",\"четверг\",\"пятница\",\"суббота\"],dayNamesShort:[\"вск\",\"пнд\",\"втр\",\"срд\",\"чтв\",\"птн\",\"сбт\"],dayNamesMin:[\"Вс\",\"Пн\",\"Вт\",\"Ср\",\"Чт\",\"Пт\",\"Сб\"],weekHeader:\"Нед\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"ru\",{buttonText:{month:\"Месяц\",week:\"Неделя\",day:\"День\",list:\"Повестка дня\"},allDayText:\"Весь день\",eventLimitText:function(e){return\"+ ещё \"+e}})}(),function(){function a(e){return e>1&&5>e}function n(e,t,n,r){var i=e+\" \";switch(n){case\"s\":return t||r?\"pár sekúnd\":\"pár sekundami\";case\"m\":return t?\"minúta\":r?\"minútu\":\"minútou\";case\"mm\":return t||r?i+(a(e)?\"minúty\":\"minút\"):i+\"minútami\";case\"h\":return t?\"hodina\":r?\"hodinu\":\"hodinou\";case\"hh\":return t||r?i+(a(e)?\"hodiny\":\"hodín\"):i+\"hodinami\";case\"d\":return t||r?\"deň\":\"dňom\";case\"dd\":return t||r?i+(a(e)?\"dni\":\"dní\"):i+\"dňami\";case\"M\":return t||r?\"mesiac\":\"mesiacom\";case\"MM\":return t||r?i+(a(e)?\"mesiace\":\"mesiacov\"):i+\"mesiacmi\";case\"y\":return t||r?\"rok\":\"rokom\";case\"yy\":return t||r?i+(a(e)?\"roky\":\"rokov\"):i+\"rokmi\"}}var r=\"január_február_marec_apríl_máj_jún_júl_august_september_október_november_december\".split(\"_\"),i=\"jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec\".split(\"_\");(t.defineLocale||t.lang).call(t,\"sk\",{months:r,monthsShort:i,monthsParse:function(e,t){var a,n=[];for(a=0;12>a;a++)n[a]=RegExp(\"^\"+e[a]+\"$|^\"+t[a]+\"$\",\"i\");return n}(r,i),weekdays:\"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota\".split(\"_\"),weekdaysShort:\"ne_po_ut_st_št_pi_so\".split(\"_\"),weekdaysMin:\"ne_po_ut_st_št_pi_so\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD.MM.YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY LT\",LLLL:\"dddd D. MMMM YYYY LT\"},calendar:{sameDay:\"[dnes o] LT\",nextDay:\"[zajtra o] LT\",nextWeek:function(){switch(this.day()){case 0:return\"[v nedeľu o] LT\";case 1:case 2:return\"[v] dddd [o] LT\";case 3:return\"[v stredu o] LT\";case 4:return\"[vo štvrtok o] LT\";case 5:return\"[v piatok o] LT\";case 6:return\"[v sobotu o] LT\"}},lastDay:\"[včera o] LT\",lastWeek:function(){switch(this.day()){case 0:return\"[minulú nedeľu o] LT\";case 1:case 2:return\"[minulý] dddd [o] LT\";case 3:return\"[minulú stredu o] LT\";case 4:case 5:return\"[minulý] dddd [o] LT\";case 6:return\"[minulú sobotu o] LT\"}},sameElse:\"L\"},relativeTime:{future:\"za %s\",past:\"pred %s\",s:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"sk\",\"sk\",{closeText:\"Zavrieť\",prevText:\"&#x3C;Predchádzajúci\",nextText:\"Nasledujúci&#x3E;\",currentText:\"Dnes\",monthNames:[\"január\",\"február\",\"marec\",\"apríl\",\"máj\",\"jún\",\"júl\",\"august\",\"september\",\"október\",\"november\",\"december\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"Máj\",\"Jún\",\"Júl\",\"Aug\",\"Sep\",\"Okt\",\"Nov\",\"Dec\"],dayNames:[\"nedeľa\",\"pondelok\",\"utorok\",\"streda\",\"štvrtok\",\"piatok\",\"sobota\"],dayNamesShort:[\"Ned\",\"Pon\",\"Uto\",\"Str\",\"Štv\",\"Pia\",\"Sob\"],dayNamesMin:[\"Ne\",\"Po\",\"Ut\",\"St\",\"Št\",\"Pia\",\"So\"],weekHeader:\"Ty\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"sk\",{buttonText:{month:\"Mesiac\",week:\"Týždeň\",day:\"Deň\",list:\"Rozvrh\"},allDayText:\"Celý deň\",eventLimitText:function(e){return\"+ďalšie: \"+e}})}(),function(){function a(e,t,a){var n=e+\" \";switch(a){case\"m\":return t?\"ena minuta\":\"eno minuto\";case\"mm\":return n+=1===e?\"minuta\":2===e?\"minuti\":3===e||4===e?\"minute\":\"minut\";case\"h\":return t?\"ena ura\":\"eno uro\";case\"hh\":return n+=1===e?\"ura\":2===e?\"uri\":3===e||4===e?\"ure\":\"ur\";case\"dd\":return n+=1===e?\"dan\":\"dni\";case\"MM\":return n+=1===e?\"mesec\":2===e?\"meseca\":3===e||4===e?\"mesece\":\"mesecev\";case\"yy\":return n+=1===e?\"leto\":2===e?\"leti\":3===e||4===e?\"leta\":\"let\"}}(t.defineLocale||t.lang).call(t,\"sl\",{months:\"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december\".split(\"_\"),monthsShort:\"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.\".split(\"_\"),weekdays:\"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota\".split(\"_\"),weekdaysShort:\"ned._pon._tor._sre._čet._pet._sob.\".split(\"_\"),weekdaysMin:\"ne_po_to_sr_če_pe_so\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD. MM. YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY LT\",LLLL:\"dddd, D. MMMM YYYY LT\"},calendar:{sameDay:\"[danes ob] LT\",nextDay:\"[jutri ob] LT\",nextWeek:function(){switch(this.day()){case 0:return\"[v] [nedeljo] [ob] LT\";case 3:return\"[v] [sredo] [ob] LT\";case 6:return\"[v] [soboto] [ob] LT\";case 1:case 2:case 4:case 5:return\"[v] dddd [ob] LT\"}},lastDay:\"[včeraj ob] LT\",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return\"[prejšnja] dddd [ob] LT\";case 1:case 2:case 4:case 5:return\"[prejšnji] dddd [ob] LT\"}},sameElse:\"L\"},relativeTime:{future:\"čez %s\",past:\"%s nazaj\",s:\"nekaj sekund\",m:a,mm:a,h:a,hh:a,d:\"en dan\",dd:a,M:\"en mesec\",MM:a,y:\"eno leto\",yy:a},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:7}}),e.fullCalendar.datepickerLang(\"sl\",\"sl\",{closeText:\"Zapri\",prevText:\"&#x3C;Prejšnji\",nextText:\"Naslednji&#x3E;\",currentText:\"Trenutni\",monthNames:[\"Januar\",\"Februar\",\"Marec\",\"April\",\"Maj\",\"Junij\",\"Julij\",\"Avgust\",\"September\",\"Oktober\",\"November\",\"December\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"Maj\",\"Jun\",\"Jul\",\"Avg\",\"Sep\",\"Okt\",\"Nov\",\"Dec\"],dayNames:[\"Nedelja\",\"Ponedeljek\",\"Torek\",\"Sreda\",\"Četrtek\",\"Petek\",\"Sobota\"],dayNamesShort:[\"Ned\",\"Pon\",\"Tor\",\"Sre\",\"Čet\",\"Pet\",\"Sob\"],dayNamesMin:[\"Ne\",\"Po\",\"To\",\"Sr\",\"Če\",\"Pe\",\"So\"],weekHeader:\"Teden\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"sl\",{buttonText:{month:\"Mesec\",week:\"Teden\",day:\"Dan\",list:\"Dnevni red\"},allDayText:\"Ves dan\",eventLimitText:\"več\"})}(),function(){var a={words:{m:[\"један минут\",\"једне минуте\"],mm:[\"минут\",\"минуте\",\"минута\"],h:[\"један сат\",\"једног сата\"],hh:[\"сат\",\"сата\",\"сати\"],dd:[\"дан\",\"дана\",\"дана\"],MM:[\"месец\",\"месеца\",\"месеци\"],yy:[\"година\",\"године\",\"година\"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&4>=e?t[1]:t[2]},translate:function(e,t,n){var r=a.words[n];return 1===n.length?t?r[0]:r[1]:e+\" \"+a.correctGrammaticalCase(e,r)}};(t.defineLocale||t.lang).call(t,\"sr-cyrl\",{months:[\"јануар\",\"фебруар\",\"март\",\"април\",\"мај\",\"јун\",\"јул\",\"август\",\"септембар\",\"октобар\",\"новембар\",\"децембар\"],monthsShort:[\"јан.\",\"феб.\",\"мар.\",\"апр.\",\"мај\",\"јун\",\"јул\",\"авг.\",\"сеп.\",\"окт.\",\"нов.\",\"дец.\"],weekdays:[\"недеља\",\"понедељак\",\"уторак\",\"среда\",\"четвртак\",\"петак\",\"субота\"],weekdaysShort:[\"нед.\",\"пон.\",\"уто.\",\"сре.\",\"чет.\",\"пет.\",\"суб.\"],weekdaysMin:[\"не\",\"по\",\"ут\",\"ср\",\"че\",\"пе\",\"су\"],longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD. MM. YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY LT\",LLLL:\"dddd, D. MMMM YYYY LT\"},calendar:{sameDay:\"[данас у] LT\",nextDay:\"[сутра у] LT\",nextWeek:function(){switch(this.day()){case 0:return\"[у] [недељу] [у] LT\";case 3:return\"[у] [среду] [у] LT\";case 6:return\"[у] [суботу] [у] LT\";case 1:case 2:case 4:case 5:return\"[у] dddd [у] LT\"}},lastDay:\"[јуче у] LT\",lastWeek:function(){var e=[\"[прошле] [недеље] [у] LT\",\"[прошлог] [понедељка] [у] LT\",\"[прошлог] [уторка] [у] LT\",\"[прошле] [среде] [у] LT\",\"[прошлог] [четвртка] [у] LT\",\"[прошлог] [петка] [у] LT\",\"[прошле] [суботе] [у] LT\"];return e[this.day()]},sameElse:\"L\"},relativeTime:{future:\"за %s\",past:\"пре %s\",s:\"неколико секунди\",m:a.translate,mm:a.translate,h:a.translate,hh:a.translate,d:\"дан\",dd:a.translate,M:\"месец\",MM:a.translate,y:\"годину\",yy:a.translate},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:7}}),e.fullCalendar.datepickerLang(\"sr-cyrl\",\"sr\",{closeText:\"Затвори\",prevText:\"&#x3C;\",nextText:\"&#x3E;\",currentText:\"Данас\",monthNames:[\"Јануар\",\"Фебруар\",\"Март\",\"Април\",\"Мај\",\"Јун\",\"Јул\",\"Август\",\"Септембар\",\"Октобар\",\"Новембар\",\"Децембар\"],monthNamesShort:[\"Јан\",\"Феб\",\"Мар\",\"Апр\",\"Мај\",\"Јун\",\"Јул\",\"Авг\",\"Сеп\",\"Окт\",\"Нов\",\"Дец\"],dayNames:[\"Недеља\",\"Понедељак\",\"Уторак\",\"Среда\",\"Четвртак\",\"Петак\",\"Субота\"],dayNamesShort:[\"Нед\",\"Пон\",\"Уто\",\"Сре\",\"Чет\",\"Пет\",\"Суб\"],dayNamesMin:[\"Не\",\"По\",\"Ут\",\"Ср\",\"Че\",\"Пе\",\"Су\"],weekHeader:\"Сед\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"sr-cyrl\",{buttonText:{month:\"Месец\",week:\"Недеља\",day:\"Дан\",list:\"Планер\"},allDayText:\"Цео дан\",eventLimitText:function(e){return\"+ још \"+e}})}(),function(){var a={words:{m:[\"jedan minut\",\"jedne minute\"],mm:[\"minut\",\"minute\",\"minuta\"],h:[\"jedan sat\",\"jednog sata\"],hh:[\"sat\",\"sata\",\"sati\"],dd:[\"dan\",\"dana\",\"dana\"],MM:[\"mesec\",\"meseca\",\"meseci\"],yy:[\"godina\",\"godine\",\"godina\"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&4>=e?t[1]:t[2]},translate:function(e,t,n){var r=a.words[n];return 1===n.length?t?r[0]:r[1]:e+\" \"+a.correctGrammaticalCase(e,r)}};(t.defineLocale||t.lang).call(t,\"sr\",{months:[\"januar\",\"februar\",\"mart\",\"april\",\"maj\",\"jun\",\"jul\",\"avgust\",\"septembar\",\"oktobar\",\"novembar\",\"decembar\"],monthsShort:[\"jan.\",\"feb.\",\"mar.\",\"apr.\",\"maj\",\"jun\",\"jul\",\"avg.\",\"sep.\",\"okt.\",\"nov.\",\"dec.\"],weekdays:[\"nedelja\",\"ponedeljak\",\"utorak\",\"sreda\",\"četvrtak\",\"petak\",\"subota\"],weekdaysShort:[\"ned.\",\"pon.\",\"uto.\",\"sre.\",\"čet.\",\"pet.\",\"sub.\"],weekdaysMin:[\"ne\",\"po\",\"ut\",\"sr\",\"če\",\"pe\",\"su\"],longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD. MM. YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY LT\",LLLL:\"dddd, D. MMMM YYYY LT\"},calendar:{sameDay:\"[danas u] LT\",nextDay:\"[sutra u] LT\",nextWeek:function(){switch(this.day()){case 0:return\"[u] [nedelju] [u] LT\";case 3:return\"[u] [sredu] [u] LT\";case 6:return\"[u] [subotu] [u] LT\";case 1:case 2:case 4:case 5:return\"[u] dddd [u] LT\"}},lastDay:\"[juče u] LT\",lastWeek:function(){var e=[\"[prošle] [nedelje] [u] LT\",\"[prošlog] [ponedeljka] [u] LT\",\"[prošlog] [utorka] [u] LT\",\"[prošle] [srede] [u] LT\",\"[prošlog] [četvrtka] [u] LT\",\"[prošlog] [petka] [u] LT\",\"[prošle] [subote] [u] LT\"];return e[this.day()]},sameElse:\"L\"},relativeTime:{future:\"za %s\",past:\"pre %s\",s:\"nekoliko sekundi\",m:a.translate,mm:a.translate,h:a.translate,hh:a.translate,d:\"dan\",dd:a.translate,M:\"mesec\",MM:a.translate,y:\"godinu\",yy:a.translate},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:7}}),e.fullCalendar.datepickerLang(\"sr\",\"sr\",{closeText:\"Затвори\",prevText:\"&#x3C;\",nextText:\"&#x3E;\",currentText:\"Данас\",monthNames:[\"Јануар\",\"Фебруар\",\"Март\",\"Април\",\"Мај\",\"Јун\",\"Јул\",\"Август\",\"Септембар\",\"Октобар\",\"Новембар\",\"Децембар\"],monthNamesShort:[\"Јан\",\"Феб\",\"Мар\",\"Апр\",\"Мај\",\"Јун\",\"Јул\",\"Авг\",\"Сеп\",\"Окт\",\"Нов\",\"Дец\"],dayNames:[\"Недеља\",\"Понедељак\",\"Уторак\",\"Среда\",\"Четвртак\",\"Петак\",\"Субота\"],dayNamesShort:[\"Нед\",\"Пон\",\"Уто\",\"Сре\",\"Чет\",\"Пет\",\"Суб\"],dayNamesMin:[\"Не\",\"По\",\"Ут\",\"Ср\",\"Че\",\"Пе\",\"Су\"],weekHeader:\"Сед\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"sr\",{buttonText:{month:\"Месец\",week:\"Недеља\",day:\"Дан\",list:\"Планер\"},allDayText:\"Цео дан\",eventLimitText:function(e){return\"+ још \"+e}})}(),function(){(t.defineLocale||t.lang).call(t,\"sv\",{months:\"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december\".split(\"_\"),monthsShort:\"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec\".split(\"_\"),weekdays:\"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag\".split(\"_\"),weekdaysShort:\"sön_mån_tis_ons_tor_fre_lör\".split(\"_\"),weekdaysMin:\"sö_må_ti_on_to_fr_lö\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"YYYY-MM-DD\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd D MMMM YYYY LT\"},calendar:{sameDay:\"[Idag] LT\",nextDay:\"[Imorgon] LT\",lastDay:\"[Igår] LT\",nextWeek:\"dddd LT\",lastWeek:\"[Förra] dddd[en] LT\",sameElse:\"L\"},relativeTime:{future:\"om %s\",past:\"för %s sedan\",s:\"några sekunder\",m:\"en minut\",mm:\"%d minuter\",h:\"en timme\",hh:\"%d timmar\",d:\"en dag\",dd:\"%d dagar\",M:\"en månad\",MM:\"%d månader\",y:\"ett år\",yy:\"%d år\"},ordinalParse:/\\d{1,2}(e|a)/,ordinal:function(e){var t=e%10,a=1===~~(e%100/10)?\"e\":1===t?\"a\":2===t?\"a\":3===t?\"e\":\"e\";return e+a},week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"sv\",\"sv\",{closeText:\"Stäng\",prevText:\"&#xAB;Förra\",nextText:\"Nästa&#xBB;\",currentText:\"Idag\",monthNames:[\"Januari\",\"Februari\",\"Mars\",\"April\",\"Maj\",\"Juni\",\"Juli\",\"Augusti\",\"September\",\"Oktober\",\"November\",\"December\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"Maj\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Okt\",\"Nov\",\"Dec\"],dayNamesShort:[\"Sön\",\"Mån\",\"Tis\",\"Ons\",\"Tor\",\"Fre\",\"Lör\"],dayNames:[\"Söndag\",\"Måndag\",\"Tisdag\",\"Onsdag\",\"Torsdag\",\"Fredag\",\"Lördag\"],dayNamesMin:[\"Sö\",\"Må\",\"Ti\",\"On\",\"To\",\"Fr\",\"Lö\"],weekHeader:\"Ve\",dateFormat:\"yy-mm-dd\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"sv\",{buttonText:{month:\"Månad\",week:\"Vecka\",day:\"Dag\",list:\"Program\"},allDayText:\"Heldag\",eventLimitText:\"till\"})}(),function(){(t.defineLocale||t.lang).call(t,\"th\",{months:\"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม\".split(\"_\"),monthsShort:\"มกรา_กุมภา_มีนา_เมษา_พฤษภา_มิถุนา_กรกฎา_สิงหา_กันยา_ตุลา_พฤศจิกา_ธันวา\".split(\"_\"),weekdays:\"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์\".split(\"_\"),weekdaysShort:\"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์\".split(\"_\"),weekdaysMin:\"อา._จ._อ._พ._พฤ._ศ._ส.\".split(\"_\"),longDateFormat:{LT:\"H นาฬิกา m นาที\",LTS:\"LT s วินาที\",L:\"YYYY/MM/DD\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY เวลา LT\",LLLL:\"วันddddที่ D MMMM YYYY เวลา LT\"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(e){return\"หลังเที่ยง\"===e},meridiem:function(e){return 12>e?\"ก่อนเที่ยง\":\"หลังเที่ยง\"},calendar:{sameDay:\"[วันนี้ เวลา] LT\",nextDay:\"[พรุ่งนี้ เวลา] LT\",nextWeek:\"dddd[หน้า เวลา] LT\",lastDay:\"[เมื่อวานนี้ เวลา] LT\",lastWeek:\"[วัน]dddd[ที่แล้ว เวลา] LT\",sameElse:\"L\"},relativeTime:{future:\"อีก %s\",past:\"%sที่แล้ว\",s:\"ไม่กี่วินาที\",m:\"1 นาที\",mm:\"%d นาที\",h:\"1 ชั่วโมง\",hh:\"%d ชั่วโมง\",d:\"1 วัน\",dd:\"%d วัน\",M:\"1 เดือน\",MM:\"%d เดือน\",y:\"1 ปี\",yy:\"%d ปี\"}}),e.fullCalendar.datepickerLang(\"th\",\"th\",{closeText:\"ปิด\",prevText:\"&#xAB;&#xA0;ย้อน\",nextText:\"ถัดไป&#xA0;&#xBB;\",currentText:\"วันนี้\",monthNames:[\"มกราคม\",\"กุมภาพันธ์\",\"มีนาคม\",\"เมษายน\",\"พฤษภาคม\",\"มิถุนายน\",\"กรกฎาคม\",\"สิงหาคม\",\"กันยายน\",\"ตุลาคม\",\"พฤศจิกายน\",\"ธันวาคม\"],monthNamesShort:[\"ม.ค.\",\"ก.พ.\",\"มี.ค.\",\"เม.ย.\",\"พ.ค.\",\"มิ.ย.\",\"ก.ค.\",\"ส.ค.\",\"ก.ย.\",\"ต.ค.\",\"พ.ย.\",\"ธ.ค.\"],dayNames:[\"อาทิตย์\",\"จันทร์\",\"อังคาร\",\"พุธ\",\"พฤหัสบดี\",\"ศุกร์\",\"เสาร์\"],dayNamesShort:[\"อา.\",\"จ.\",\"อ.\",\"พ.\",\"พฤ.\",\"ศ.\",\"ส.\"],dayNamesMin:[\"อา.\",\"จ.\",\"อ.\",\"พ.\",\"พฤ.\",\"ศ.\",\"ส.\"],weekHeader:\"Wk\",dateFormat:\"dd/mm/yy\",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"th\",{buttonText:{month:\"เดือน\",week:\"สัปดาห์\",day:\"วัน\",list:\"แผนงาน\"},allDayText:\"ตลอดวัน\",eventLimitText:\"เพิ่มเติม\"})}(),function(){var a={1:\"'inci\",5:\"'inci\",8:\"'inci\",70:\"'inci\",80:\"'inci\",2:\"'nci\",7:\"'nci\",20:\"'nci\",50:\"'nci\",3:\"'üncü\",4:\"'üncü\",100:\"'üncü\",6:\"'ncı\",9:\"'uncu\",10:\"'uncu\",30:\"'uncu\",60:\"'ıncı\",90:\"'ıncı\"};(t.defineLocale||t.lang).call(t,\"tr\",{months:\"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık\".split(\"_\"),monthsShort:\"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara\".split(\"_\"),weekdays:\"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi\".split(\"_\"),weekdaysShort:\"Paz_Pts_Sal_Çar_Per_Cum_Cts\".split(\"_\"),weekdaysMin:\"Pz_Pt_Sa_Ça_Pe_Cu_Ct\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD.MM.YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd, D MMMM YYYY LT\"},calendar:{sameDay:\"[bugün saat] LT\",nextDay:\"[yarın saat] LT\",nextWeek:\"[haftaya] dddd [saat] LT\",lastDay:\"[dün] LT\",lastWeek:\"[geçen hafta] dddd [saat] LT\",sameElse:\"L\"},relativeTime:{future:\"%s sonra\",past:\"%s önce\",s:\"birkaç saniye\",m:\"bir dakika\",mm:\"%d dakika\",h:\"bir saat\",hh:\"%d saat\",d:\"bir gün\",dd:\"%d gün\",M:\"bir ay\",MM:\"%d ay\",y:\"bir yıl\",yy:\"%d yıl\"},ordinalParse:/\\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,ordinal:function(e){if(0===e)return e+\"'ıncı\";var t=e%10,n=e%100-t,r=e>=100?100:null;return e+(a[t]||a[n]||a[r])},week:{dow:1,doy:7}}),e.fullCalendar.datepickerLang(\"tr\",\"tr\",{closeText:\"kapat\",prevText:\"&#x3C;geri\",nextText:\"ileri&#x3e\",currentText:\"bugün\",monthNames:[\"Ocak\",\"Şubat\",\"Mart\",\"Nisan\",\"Mayıs\",\"Haziran\",\"Temmuz\",\"Ağustos\",\"Eylül\",\"Ekim\",\"Kasım\",\"Aralık\"],monthNamesShort:[\"Oca\",\"Şub\",\"Mar\",\"Nis\",\"May\",\"Haz\",\"Tem\",\"Ağu\",\"Eyl\",\"Eki\",\"Kas\",\"Ara\"],dayNames:[\"Pazar\",\"Pazartesi\",\"Salı\",\"Çarşamba\",\"Perşembe\",\"Cuma\",\"Cumartesi\"],dayNamesShort:[\"Pz\",\"Pt\",\"Sa\",\"Ça\",\"Pe\",\"Cu\",\"Ct\"],dayNamesMin:[\"Pz\",\"Pt\",\"Sa\",\"Ça\",\"Pe\",\"Cu\",\"Ct\"],weekHeader:\"Hf\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"tr\",{buttonText:{next:\"ileri\",month:\"Ay\",week:\"Hafta\",day:\"Gün\",list:\"Ajanda\"},allDayText:\"Tüm gün\",eventLimitText:\"daha fazla\"})}(),function(){function a(e,t){var a=e.split(\"_\");return 1===t%10&&11!==t%100?a[0]:t%10>=2&&4>=t%10&&(10>t%100||t%100>=20)?a[1]:a[2]}function n(e,t,n){var r={mm:\"хвилина_хвилини_хвилин\",hh:\"година_години_годин\",dd:\"день_дні_днів\",MM:\"місяць_місяці_місяців\",yy:\"рік_роки_років\"};return\"m\"===n?t?\"хвилина\":\"хвилину\":\"h\"===n?t?\"година\":\"годину\":e+\" \"+a(r[n],+e)}function r(e,t){var a={nominative:\"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень\".split(\"_\"),accusative:\"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня\".split(\"_\")},n=/D[oD]? *MMMM?/.test(t)?\"accusative\":\"nominative\";return a[n][e.month()]}function i(e,t){var a={nominative:\"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота\".split(\"_\"),accusative:\"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу\".split(\"_\"),genitive:\"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи\".split(\"_\")},n=/(\\[[ВвУу]\\]) ?dddd/.test(t)?\"accusative\":/\\[?(?:минулої|наступної)? ?\\] ?dddd/.test(t)?\"genitive\":\"nominative\";return a[n][e.day()]}function s(e){return function(){return e+\"о\"+(11===this.hours()?\"б\":\"\")+\"] LT\"}}(t.defineLocale||t.lang).call(t,\"uk\",{months:r,monthsShort:\"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд\".split(\"_\"),weekdays:i,weekdaysShort:\"нд_пн_вт_ср_чт_пт_сб\".split(\"_\"),weekdaysMin:\"нд_пн_вт_ср_чт_пт_сб\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD.MM.YYYY\",LL:\"D MMMM YYYY р.\",LLL:\"D MMMM YYYY р., LT\",LLLL:\"dddd, D MMMM YYYY р., LT\"},calendar:{sameDay:s(\"[Сьогодні \"),nextDay:s(\"[Завтра \"),lastDay:s(\"[Вчора \"),nextWeek:s(\"[У] dddd [\"),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return s(\"[Минулої] dddd [\").call(this);case 1:case 2:case 4:return s(\"[Минулого] dddd [\").call(this)}},sameElse:\"L\"},relativeTime:{future:\"за %s\",past:\"%s тому\",s:\"декілька секунд\",m:n,mm:n,h:\"годину\",hh:n,d:\"день\",dd:n,M:\"місяць\",MM:n,y:\"рік\",yy:n},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(e){return/^(дня|вечора)$/.test(e)},meridiem:function(e){return 4>e?\"ночі\":12>e?\"ранку\":17>e?\"дня\":\"вечора\"},ordinalParse:/\\d{1,2}-(й|го)/,ordinal:function(e,t){switch(t){case\"M\":case\"d\":case\"DDD\":case\"w\":case\"W\":return e+\"-й\";case\"D\":return e+\"-го\";default:return e}},week:{dow:1,doy:7}}),e.fullCalendar.datepickerLang(\"uk\",\"uk\",{closeText:\"Закрити\",prevText:\"&#x3C;\",nextText:\"&#x3E;\",currentText:\"Сьогодні\",monthNames:[\"Січень\",\"Лютий\",\"Березень\",\"Квітень\",\"Травень\",\"Червень\",\"Липень\",\"Серпень\",\"Вересень\",\"Жовтень\",\"Листопад\",\"Грудень\"],monthNamesShort:[\"Січ\",\"Лют\",\"Бер\",\"Кві\",\"Тра\",\"Чер\",\"Лип\",\"Сер\",\"Вер\",\"Жов\",\"Лис\",\"Гру\"],dayNames:[\"неділя\",\"понеділок\",\"вівторок\",\"середа\",\"четвер\",\"п’ятниця\",\"субота\"],dayNamesShort:[\"нед\",\"пнд\",\"вів\",\"срд\",\"чтв\",\"птн\",\"сбт\"],dayNamesMin:[\"Нд\",\"Пн\",\"Вт\",\"Ср\",\"Чт\",\"Пт\",\"Сб\"],weekHeader:\"Тиж\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"uk\",{buttonText:{month:\"Місяць\",week:\"Тиждень\",day:\"День\",list:\"Порядок денний\"},allDayText:\"Увесь день\",eventLimitText:function(e){return\"+ще \"+e+\"...\"}})}(),function(){(t.defineLocale||t.lang).call(t,\"vi\",{months:\"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12\".split(\"_\"),monthsShort:\"Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12\".split(\"_\"),weekdays:\"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy\".split(\"_\"),weekdaysShort:\"CN_T2_T3_T4_T5_T6_T7\".split(\"_\"),weekdaysMin:\"CN_T2_T3_T4_T5_T6_T7\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM [năm] YYYY\",LLL:\"D MMMM [năm] YYYY LT\",LLLL:\"dddd, D MMMM [năm] YYYY LT\",l:\"DD/M/YYYY\",ll:\"D MMM YYYY\",lll:\"D MMM YYYY LT\",llll:\"ddd, D MMM YYYY LT\"},calendar:{sameDay:\"[Hôm nay lúc] LT\",nextDay:\"[Ngày mai lúc] LT\",nextWeek:\"dddd [tuần tới lúc] LT\",lastDay:\"[Hôm qua lúc] LT\",lastWeek:\"dddd [tuần rồi lúc] LT\",sameElse:\"L\"},relativeTime:{future:\"%s tới\",past:\"%s trước\",s:\"vài giây\",m:\"một phút\",mm:\"%d phút\",h:\"một giờ\",hh:\"%d giờ\",d:\"một ngày\",dd:\"%d ngày\",M:\"một tháng\",MM:\"%d tháng\",y:\"một năm\",yy:\"%d năm\"},ordinalParse:/\\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"vi\",\"vi\",{closeText:\"Đóng\",prevText:\"&#x3C;Trước\",nextText:\"Tiếp&#x3E;\",currentText:\"Hôm nay\",monthNames:[\"Tháng Một\",\"Tháng Hai\",\"Tháng Ba\",\"Tháng Tư\",\"Tháng Năm\",\"Tháng Sáu\",\"Tháng Bảy\",\"Tháng Tám\",\"Tháng Chín\",\"Tháng Mười\",\"Tháng Mười Một\",\"Tháng Mười Hai\"],monthNamesShort:[\"Tháng 1\",\"Tháng 2\",\"Tháng 3\",\"Tháng 4\",\"Tháng 5\",\"Tháng 6\",\"Tháng 7\",\"Tháng 8\",\"Tháng 9\",\"Tháng 10\",\"Tháng 11\",\"Tháng 12\"],dayNames:[\"Chủ Nhật\",\"Thứ Hai\",\"Thứ Ba\",\"Thứ Tư\",\"Thứ Năm\",\"Thứ Sáu\",\"Thứ Bảy\"],dayNamesShort:[\"CN\",\"T2\",\"T3\",\"T4\",\"T5\",\"T6\",\"T7\"],dayNamesMin:[\"CN\",\"T2\",\"T3\",\"T4\",\"T5\",\"T6\",\"T7\"],weekHeader:\"Tu\",dateFormat:\"dd/mm/yy\",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),e.fullCalendar.lang(\"vi\",{buttonText:{month:\"Tháng\",week:\"Tuần\",day:\"Ngày\",list:\"Lịch biểu\"},allDayText:\"Cả ngày\",eventLimitText:function(e){return\"+ thêm \"+e\n}})}(),function(){(t.defineLocale||t.lang).call(t,\"zh-cn\",{months:\"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月\".split(\"_\"),monthsShort:\"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月\".split(\"_\"),weekdays:\"星期日_星期一_星期二_星期三_星期四_星期五_星期六\".split(\"_\"),weekdaysShort:\"周日_周一_周二_周三_周四_周五_周六\".split(\"_\"),weekdaysMin:\"日_一_二_三_四_五_六\".split(\"_\"),longDateFormat:{LT:\"Ah点mm\",LTS:\"Ah点m分s秒\",L:\"YYYY-MM-DD\",LL:\"YYYY年MMMD日\",LLL:\"YYYY年MMMD日LT\",LLLL:\"YYYY年MMMD日ddddLT\",l:\"YYYY-MM-DD\",ll:\"YYYY年MMMD日\",lll:\"YYYY年MMMD日LT\",llll:\"YYYY年MMMD日ddddLT\"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),\"凌晨\"===t||\"早上\"===t||\"上午\"===t?e:\"下午\"===t||\"晚上\"===t?e+12:e>=11?e:e+12},meridiem:function(e,t){var a=100*e+t;return 600>a?\"凌晨\":900>a?\"早上\":1130>a?\"上午\":1230>a?\"中午\":1800>a?\"下午\":\"晚上\"},calendar:{sameDay:function(){return 0===this.minutes()?\"[今天]Ah[点整]\":\"[今天]LT\"},nextDay:function(){return 0===this.minutes()?\"[明天]Ah[点整]\":\"[明天]LT\"},lastDay:function(){return 0===this.minutes()?\"[昨天]Ah[点整]\":\"[昨天]LT\"},nextWeek:function(){var e,a;return e=t().startOf(\"week\"),a=this.unix()-e.unix()>=604800?\"[下]\":\"[本]\",0===this.minutes()?a+\"dddAh点整\":a+\"dddAh点mm\"},lastWeek:function(){var e,a;return e=t().startOf(\"week\"),a=this.unix()<e.unix()?\"[上]\":\"[本]\",0===this.minutes()?a+\"dddAh点整\":a+\"dddAh点mm\"},sameElse:\"LL\"},ordinalParse:/\\d{1,2}(日|月|周)/,ordinal:function(e,t){switch(t){case\"d\":case\"D\":case\"DDD\":return e+\"日\";case\"M\":return e+\"月\";case\"w\":case\"W\":return e+\"周\";default:return e}},relativeTime:{future:\"%s内\",past:\"%s前\",s:\"几秒\",m:\"1分钟\",mm:\"%d分钟\",h:\"1小时\",hh:\"%d小时\",d:\"1天\",dd:\"%d天\",M:\"1个月\",MM:\"%d个月\",y:\"1年\",yy:\"%d年\"},week:{dow:1,doy:4}}),e.fullCalendar.datepickerLang(\"zh-cn\",\"zh-CN\",{closeText:\"关闭\",prevText:\"&#x3C;上月\",nextText:\"下月&#x3E;\",currentText:\"今天\",monthNames:[\"一月\",\"二月\",\"三月\",\"四月\",\"五月\",\"六月\",\"七月\",\"八月\",\"九月\",\"十月\",\"十一月\",\"十二月\"],monthNamesShort:[\"一月\",\"二月\",\"三月\",\"四月\",\"五月\",\"六月\",\"七月\",\"八月\",\"九月\",\"十月\",\"十一月\",\"十二月\"],dayNames:[\"星期日\",\"星期一\",\"星期二\",\"星期三\",\"星期四\",\"星期五\",\"星期六\"],dayNamesShort:[\"周日\",\"周一\",\"周二\",\"周三\",\"周四\",\"周五\",\"周六\"],dayNamesMin:[\"日\",\"一\",\"二\",\"三\",\"四\",\"五\",\"六\"],weekHeader:\"周\",dateFormat:\"yy-mm-dd\",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:\"年\"}),e.fullCalendar.lang(\"zh-cn\",{buttonText:{month:\"月\",week:\"周\",day:\"日\",list:\"日程\"},allDayText:\"全天\",eventLimitText:function(e){return\"另外 \"+e+\" 个\"}})}(),function(){(t.defineLocale||t.lang).call(t,\"zh-tw\",{months:\"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月\".split(\"_\"),monthsShort:\"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月\".split(\"_\"),weekdays:\"星期日_星期一_星期二_星期三_星期四_星期五_星期六\".split(\"_\"),weekdaysShort:\"週日_週一_週二_週三_週四_週五_週六\".split(\"_\"),weekdaysMin:\"日_一_二_三_四_五_六\".split(\"_\"),longDateFormat:{LT:\"Ah點mm\",LTS:\"Ah點m分s秒\",L:\"YYYY年MMMD日\",LL:\"YYYY年MMMD日\",LLL:\"YYYY年MMMD日LT\",LLLL:\"YYYY年MMMD日ddddLT\",l:\"YYYY年MMMD日\",ll:\"YYYY年MMMD日\",lll:\"YYYY年MMMD日LT\",llll:\"YYYY年MMMD日ddddLT\"},meridiemParse:/早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),\"早上\"===t||\"上午\"===t?e:\"中午\"===t?e>=11?e:e+12:\"下午\"===t||\"晚上\"===t?e+12:void 0},meridiem:function(e,t){var a=100*e+t;return 900>a?\"早上\":1130>a?\"上午\":1230>a?\"中午\":1800>a?\"下午\":\"晚上\"},calendar:{sameDay:\"[今天]LT\",nextDay:\"[明天]LT\",nextWeek:\"[下]ddddLT\",lastDay:\"[昨天]LT\",lastWeek:\"[上]ddddLT\",sameElse:\"L\"},ordinalParse:/\\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case\"d\":case\"D\":case\"DDD\":return e+\"日\";case\"M\":return e+\"月\";case\"w\":case\"W\":return e+\"週\";default:return e}},relativeTime:{future:\"%s內\",past:\"%s前\",s:\"幾秒\",m:\"一分鐘\",mm:\"%d分鐘\",h:\"一小時\",hh:\"%d小時\",d:\"一天\",dd:\"%d天\",M:\"一個月\",MM:\"%d個月\",y:\"一年\",yy:\"%d年\"}}),e.fullCalendar.datepickerLang(\"zh-tw\",\"zh-TW\",{closeText:\"關閉\",prevText:\"&#x3C;上月\",nextText:\"下月&#x3E;\",currentText:\"今天\",monthNames:[\"一月\",\"二月\",\"三月\",\"四月\",\"五月\",\"六月\",\"七月\",\"八月\",\"九月\",\"十月\",\"十一月\",\"十二月\"],monthNamesShort:[\"一月\",\"二月\",\"三月\",\"四月\",\"五月\",\"六月\",\"七月\",\"八月\",\"九月\",\"十月\",\"十一月\",\"十二月\"],dayNames:[\"星期日\",\"星期一\",\"星期二\",\"星期三\",\"星期四\",\"星期五\",\"星期六\"],dayNamesShort:[\"周日\",\"周一\",\"周二\",\"周三\",\"周四\",\"周五\",\"周六\"],dayNamesMin:[\"日\",\"一\",\"二\",\"三\",\"四\",\"五\",\"六\"],weekHeader:\"周\",dateFormat:\"yy/mm/dd\",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:\"年\"}),e.fullCalendar.lang(\"zh-tw\",{buttonText:{month:\"月\",week:\"週\",day:\"天\",list:\"待辦事項\"},allDayText:\"全天\",eventLimitText:\"更多\"})}(),(t.locale||t.lang).call(t,\"en\"),e.fullCalendar.lang(\"en\"),e.datepicker&&e.datepicker.setDefaults(e.datepicker.regional[\"\"])});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/rzymek:fullcalendar/fullcalendar/dist/gcal.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*!                                                                                                                    // 1\n * FullCalendar v2.3.1 Google Calendar Plugin                                                                          // 2\n * Docs & License: http://fullcalendar.io/                                                                             // 3\n * (c) 2015 Adam Shaw                                                                                                  // 4\n */                                                                                                                    // 5\n                                                                                                                       // 6\n(function(factory) {                                                                                                   // 7\n\tif (typeof define === 'function' && define.amd) {                                                                     // 8\n\t\tdefine([ 'jquery' ], factory);                                                                                       // 9\n\t}                                                                                                                     // 10\n\telse if (typeof exports === 'object') { // Node/CommonJS                                                              // 11\n\t\tmodule.exports = factory(require('jquery'));                                                                         // 12\n\t}                                                                                                                     // 13\n\telse {                                                                                                                // 14\n\t\tfactory(jQuery);                                                                                                     // 15\n\t}                                                                                                                     // 16\n})(function($) {                                                                                                       // 17\n                                                                                                                       // 18\n                                                                                                                       // 19\nvar API_BASE = 'https://www.googleapis.com/calendar/v3/calendars';                                                     // 20\nvar fc = $.fullCalendar;                                                                                               // 21\nvar applyAll = fc.applyAll;                                                                                            // 22\n                                                                                                                       // 23\n                                                                                                                       // 24\nfc.sourceNormalizers.push(function(sourceOptions) {                                                                    // 25\n\tvar googleCalendarId = sourceOptions.googleCalendarId;                                                                // 26\n\tvar url = sourceOptions.url;                                                                                          // 27\n\tvar match;                                                                                                            // 28\n                                                                                                                       // 29\n\t// if the Google Calendar ID hasn't been explicitly defined                                                           // 30\n\tif (!googleCalendarId && url) {                                                                                       // 31\n                                                                                                                       // 32\n\t\t// detect if the ID was specified as a single string.                                                                // 33\n\t\t// will match calendars like \"asdf1234@calendar.google.com\" in addition to person email calendars.                   // 34\n\t\tif (/^[^\\/]+@([^\\/\\.]+\\.)*(google|googlemail|gmail)\\.com$/.test(url)) {                                              // 35\n\t\t\tgoogleCalendarId = url;                                                                                             // 36\n\t\t}                                                                                                                    // 37\n\t\t// try to scrape it out of a V1 or V3 API feed URL                                                                   // 38\n\t\telse if (                                                                                                            // 39\n\t\t\t(match = /^https:\\/\\/www.googleapis.com\\/calendar\\/v3\\/calendars\\/([^\\/]*)/.exec(url)) ||                           // 40\n\t\t\t(match = /^https?:\\/\\/www.google.com\\/calendar\\/feeds\\/([^\\/]*)/.exec(url))                                         // 41\n\t\t) {                                                                                                                  // 42\n\t\t\tgoogleCalendarId = decodeURIComponent(match[1]);                                                                    // 43\n\t\t}                                                                                                                    // 44\n                                                                                                                       // 45\n\t\tif (googleCalendarId) {                                                                                              // 46\n\t\t\tsourceOptions.googleCalendarId = googleCalendarId;                                                                  // 47\n\t\t}                                                                                                                    // 48\n\t}                                                                                                                     // 49\n                                                                                                                       // 50\n                                                                                                                       // 51\n\tif (googleCalendarId) { // is this a Google Calendar?                                                                 // 52\n                                                                                                                       // 53\n\t\t// make each Google Calendar source uneditable by default                                                            // 54\n\t\tif (sourceOptions.editable == null) {                                                                                // 55\n\t\t\tsourceOptions.editable = false;                                                                                     // 56\n\t\t}                                                                                                                    // 57\n                                                                                                                       // 58\n\t\t// We want removeEventSource to work, but it won't know about the googleCalendarId primitive.                        // 59\n\t\t// Shoehorn it into the url, which will function as the unique primitive. Won't cause side effects.                  // 60\n\t\t// This hack is obsolete since 2.2.3, but keep it so this plugin file is compatible with old versions.               // 61\n\t\tsourceOptions.url = googleCalendarId;                                                                                // 62\n\t}                                                                                                                     // 63\n});                                                                                                                    // 64\n                                                                                                                       // 65\n                                                                                                                       // 66\nfc.sourceFetchers.push(function(sourceOptions, start, end, timezone) {                                                 // 67\n\tif (sourceOptions.googleCalendarId) {                                                                                 // 68\n\t\treturn transformOptions(sourceOptions, start, end, timezone, this); // `this` is the calendar                        // 69\n\t}                                                                                                                     // 70\n});                                                                                                                    // 71\n                                                                                                                       // 72\n                                                                                                                       // 73\nfunction transformOptions(sourceOptions, start, end, timezone, calendar) {                                             // 74\n\tvar url = API_BASE + '/' + encodeURIComponent(sourceOptions.googleCalendarId) + '/events?callback=?'; // jsonp        // 75\n\tvar apiKey = sourceOptions.googleCalendarApiKey || calendar.options.googleCalendarApiKey;                             // 76\n\tvar success = sourceOptions.success;                                                                                  // 77\n\tvar data;                                                                                                             // 78\n\tvar timezoneArg; // populated when a specific timezone. escaped to Google's liking                                    // 79\n                                                                                                                       // 80\n\tfunction reportError(message, apiErrorObjs) {                                                                         // 81\n\t\tvar errorObjs = apiErrorObjs || [ { message: message } ]; // to be passed into error handlers                        // 82\n\t\tvar consoleObj = window.console;                                                                                     // 83\n\t\tvar consoleWarnFunc = consoleObj ? (consoleObj.warn || consoleObj.log) : null;                                       // 84\n                                                                                                                       // 85\n\t\t// call error handlers                                                                                               // 86\n\t\t(sourceOptions.googleCalendarError || $.noop).apply(calendar, errorObjs);                                            // 87\n\t\t(calendar.options.googleCalendarError || $.noop).apply(calendar, errorObjs);                                         // 88\n                                                                                                                       // 89\n\t\t// print error to debug console                                                                                      // 90\n\t\tif (consoleWarnFunc) {                                                                                               // 91\n\t\t\tconsoleWarnFunc.apply(consoleObj, [ message ].concat(apiErrorObjs || []));                                          // 92\n\t\t}                                                                                                                    // 93\n\t}                                                                                                                     // 94\n                                                                                                                       // 95\n\tif (!apiKey) {                                                                                                        // 96\n\t\treportError(\"Specify a googleCalendarApiKey. See http://fullcalendar.io/docs/google_calendar/\");                     // 97\n\t\treturn {}; // an empty source to use instead. won't fetch anything.                                                  // 98\n\t}                                                                                                                     // 99\n                                                                                                                       // 100\n\t// The API expects an ISO8601 datetime with a time and timezone part.                                                 // 101\n\t// Since the calendar's timezone offset isn't always known, request the date in UTC and pad it by a day on each       // 102\n\t// side, guaranteeing we will receive all events in the desired range, albeit a superset.                             // 103\n\t// .utc() will set a zone and give it a 00:00:00 time.                                                                // 104\n\tif (!start.hasZone()) {                                                                                               // 105\n\t\tstart = start.clone().utc().add(-1, 'day');                                                                          // 106\n\t}                                                                                                                     // 107\n\tif (!end.hasZone()) {                                                                                                 // 108\n\t\tend = end.clone().utc().add(1, 'day');                                                                               // 109\n\t}                                                                                                                     // 110\n                                                                                                                       // 111\n\t// when sending timezone names to Google, only accepts underscores, not spaces                                        // 112\n\tif (timezone && timezone != 'local') {                                                                                // 113\n\t\ttimezoneArg = timezone.replace(' ', '_');                                                                            // 114\n\t}                                                                                                                     // 115\n                                                                                                                       // 116\n\tdata = $.extend({}, sourceOptions.data || {}, {                                                                       // 117\n\t\tkey: apiKey,                                                                                                         // 118\n\t\ttimeMin: start.format(),                                                                                             // 119\n\t\ttimeMax: end.format(),                                                                                               // 120\n\t\ttimeZone: timezoneArg,                                                                                               // 121\n\t\tsingleEvents: true,                                                                                                  // 122\n\t\tmaxResults: 9999                                                                                                     // 123\n\t});                                                                                                                   // 124\n                                                                                                                       // 125\n\treturn $.extend({}, sourceOptions, {                                                                                  // 126\n\t\tgoogleCalendarId: null, // prevents source-normalizing from happening again                                          // 127\n\t\turl: url,                                                                                                            // 128\n\t\tdata: data,                                                                                                          // 129\n\t\tstartParam: false, // `false` omits this parameter. we already included it above                                     // 130\n\t\tendParam: false, // same                                                                                             // 131\n\t\ttimezoneParam: false, // same                                                                                        // 132\n\t\tsuccess: function(data) {                                                                                            // 133\n\t\t\tvar events = [];                                                                                                    // 134\n\t\t\tvar successArgs;                                                                                                    // 135\n\t\t\tvar successRes;                                                                                                     // 136\n                                                                                                                       // 137\n\t\t\tif (data.error) {                                                                                                   // 138\n\t\t\t\treportError('Google Calendar API: ' + data.error.message, data.error.errors);                                      // 139\n\t\t\t}                                                                                                                   // 140\n\t\t\telse if (data.items) {                                                                                              // 141\n\t\t\t\t$.each(data.items, function(i, entry) {                                                                            // 142\n\t\t\t\t\tvar url = entry.htmlLink;                                                                                         // 143\n                                                                                                                       // 144\n\t\t\t\t\t// make the URLs for each event show times in the correct timezone                                                // 145\n\t\t\t\t\tif (timezoneArg) {                                                                                                // 146\n\t\t\t\t\t\turl = injectQsComponent(url, 'ctz=' + timezoneArg);                                                              // 147\n\t\t\t\t\t}                                                                                                                 // 148\n                                                                                                                       // 149\n\t\t\t\t\tevents.push({                                                                                                     // 150\n\t\t\t\t\t\tid: entry.id,                                                                                                    // 151\n\t\t\t\t\t\ttitle: entry.summary,                                                                                            // 152\n\t\t\t\t\t\tstart: entry.start.dateTime || entry.start.date, // try timed. will fall back to all-day                         // 153\n\t\t\t\t\t\tend: entry.end.dateTime || entry.end.date, // same                                                               // 154\n\t\t\t\t\t\turl: url,                                                                                                        // 155\n\t\t\t\t\t\tlocation: entry.location,                                                                                        // 156\n\t\t\t\t\t\tdescription: entry.description                                                                                   // 157\n\t\t\t\t\t});                                                                                                               // 158\n\t\t\t\t});                                                                                                                // 159\n                                                                                                                       // 160\n\t\t\t\t// call the success handler(s) and allow it to return a new events array                                           // 161\n\t\t\t\tsuccessArgs = [ events ].concat(Array.prototype.slice.call(arguments, 1)); // forward other jq args                // 162\n\t\t\t\tsuccessRes = applyAll(success, this, successArgs);                                                                 // 163\n\t\t\t\tif ($.isArray(successRes)) {                                                                                       // 164\n\t\t\t\t\treturn successRes;                                                                                                // 165\n\t\t\t\t}                                                                                                                  // 166\n\t\t\t}                                                                                                                   // 167\n                                                                                                                       // 168\n\t\t\treturn events;                                                                                                      // 169\n\t\t}                                                                                                                    // 170\n\t});                                                                                                                   // 171\n}                                                                                                                      // 172\n                                                                                                                       // 173\n                                                                                                                       // 174\n// Injects a string like \"arg=value\" into the querystring of a URL                                                     // 175\nfunction injectQsComponent(url, component) {                                                                           // 176\n\t// inject it after the querystring but before the fragment                                                            // 177\n\treturn url.replace(/(\\?.*?)?(#|$)/, function(whole, qs, hash) {                                                       // 178\n\t\treturn (qs ? qs + '&' : '?') + component + hash;                                                                     // 179\n\t});                                                                                                                   // 180\n}                                                                                                                      // 181\n                                                                                                                       // 182\n                                                                                                                       // 183\n});                                                                                                                    // 184\n                                                                                                                       // 185\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/rzymek:fullcalendar/template.template.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"fullcalendar\");                                                                                  // 2\nTemplate[\"fullcalendar\"] = new Template(\"Template.fullcalendar\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.Raw(\"<div></div>\");                                                                                      // 5\n}));                                                                                                                   // 6\n                                                                                                                       // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/rzymek:fullcalendar/template.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.fullcalendar.rendered = function() {                                                                          // 1\n    var div = this.$(this.firstNode);                                                                                  // 2\n    //jquery takes care of undefined values, no need to check here                                                     // 3\n    div.attr('id',this.data.id);                                                                                       // 4\n    div.addClass(this.data.class);                                                                                     // 5\n    div.fullCalendar(this.data);                                                                                       // 6\n};                                                                                                                     // 7\n                                                                                                                       // 8\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]