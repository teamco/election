[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar Blaze = Package.ui.Blaze;\nvar UI = Package.ui.UI;\nvar Handlebars = Package.ui.Handlebars;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\nvar Iron = Package['iron:core'].Iron;\nvar HTML = Package.htmljs.HTML;\n\n/* Package-scope variables */\nvar DynamicTemplate, findFirstLookupHostWithProperty;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/iron_dynamic-template/version_conflict_error.js                                                       //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nif (Package['cmather:iron-dynamic-template']) {                                                                   // 1\n  throw new Error(\"\\n\\n\\\n    Sorry! The cmather:iron-{x} packages were migrated to the new package system with the wrong name, and you have duplicate copies.\\n\\\n    You can see which cmather:iron-{x} packages have been installed by using this command:\\n\\n\\\n    > meteor list\\n\\n\\\n    Can you remove any installed cmather:iron-{x} packages like this:\\\n    \\n\\n\\\n    > meteor remove cmather:iron-core\\n\\\n    > meteor remove cmather:iron-router\\n\\\n    > meteor remove cmather:iron-dynamic-template\\n\\\n    > meteor remove cmather:iron-dynamic-layout\\n\\\n    \\n\\\n    The new packages are named iron:{x}. For example:\\n\\n\\\n    > meteor add iron:router\\n\\n\\\n    Sorry for the hassle, but thank you!\\\n    \\n\\n\\\n  \");                                                                                                             // 17\n                                                                                                                  // 18\n}                                                                                                                 // 19\n                                                                                                                  // 20\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/iron_dynamic-template/dynamic_template.js                                                             //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\n/*****************************************************************************/                                   // 1\n/* Imports */                                                                                                     // 2\n/*****************************************************************************/                                   // 3\nvar debug = Iron.utils.debug('iron:dynamic-template');                                                            // 4\nvar assert = Iron.utils.assert;                                                                                   // 5\nvar camelCase = Iron.utils.camelCase;                                                                             // 6\n                                                                                                                  // 7\n/*****************************************************************************/                                   // 8\n/* Private */                                                                                                     // 9\n/*****************************************************************************/                                   // 10\nvar typeOf = function (value) {                                                                                   // 11\n  return Object.prototype.toString.call(value);                                                                   // 12\n};                                                                                                                // 13\n                                                                                                                  // 14\n/*****************************************************************************/                                   // 15\n/* DynamicTemplate */                                                                                             // 16\n/*****************************************************************************/                                   // 17\n                                                                                                                  // 18\n/**                                                                                                               // 19\n * Render a component to the page whose template and data context can change                                      // 20\n * dynamically, either from code or from helpers.                                                                 // 21\n *                                                                                                                // 22\n */                                                                                                               // 23\nDynamicTemplate = function (options) {                                                                            // 24\n  this.options = options = options || {};                                                                         // 25\n  this._template = options.template;                                                                              // 26\n  this._defaultTemplate = options.defaultTemplate;                                                                // 27\n  this._content = options.content;                                                                                // 28\n  this._data = options.data;                                                                                      // 29\n  this._templateDep = new Tracker.Dependency;                                                                     // 30\n  this._dataDep = new Tracker.Dependency;                                                                         // 31\n  this._hasControllerDep = new Tracker.Dependency;                                                                // 32\n  this._hooks = {};                                                                                               // 33\n  this._eventMap = null;                                                                                          // 34\n  this._eventHandles = null;                                                                                      // 35\n  this._eventThisArg = null;                                                                                      // 36\n  this._controller = new ReactiveVar;                                                                             // 37\n  this.name = options.name || this.constructor.name || 'DynamicTemplate';                                         // 38\n                                                                                                                  // 39\n  // has the Blaze.View been created?                                                                             // 40\n  this.isCreated = false;                                                                                         // 41\n                                                                                                                  // 42\n  // has the Blaze.View been destroyed and not created again?                                                     // 43\n  this.isDestroyed = false;                                                                                       // 44\n};                                                                                                                // 45\n                                                                                                                  // 46\n/**                                                                                                               // 47\n * Get or set the template.                                                                                       // 48\n */                                                                                                               // 49\nDynamicTemplate.prototype.template = function (value) {                                                           // 50\n  if (arguments.length === 1 && value !== this._template) {                                                       // 51\n    this._template = value;                                                                                       // 52\n    this._templateDep.changed();                                                                                  // 53\n    return;                                                                                                       // 54\n  }                                                                                                               // 55\n                                                                                                                  // 56\n  if (arguments.length > 0)                                                                                       // 57\n    return;                                                                                                       // 58\n                                                                                                                  // 59\n  this._templateDep.depend();                                                                                     // 60\n                                                                                                                  // 61\n  // do we have a template?                                                                                       // 62\n  if (this._template)                                                                                             // 63\n    return (typeof this._template === 'function') ? this._template() : this._template;                            // 64\n                                                                                                                  // 65\n  // no template? ok let's see if we have a default one set                                                       // 66\n  if (this._defaultTemplate)                                                                                      // 67\n    return (typeof this._defaultTemplate === 'function') ? this._defaultTemplate() : this._defaultTemplate;       // 68\n};                                                                                                                // 69\n                                                                                                                  // 70\n/**                                                                                                               // 71\n * Get or set the default template.                                                                               // 72\n *                                                                                                                // 73\n * This function does not change any dependencies.                                                                // 74\n */                                                                                                               // 75\nDynamicTemplate.prototype.defaultTemplate = function (value) {                                                    // 76\n  if (arguments.length === 1)                                                                                     // 77\n    this._defaultTemplate = value;                                                                                // 78\n  else                                                                                                            // 79\n    return this._defaultTemplate;                                                                                 // 80\n};                                                                                                                // 81\n                                                                                                                  // 82\n/**                                                                                                               // 83\n * Clear the template and data contexts.                                                                          // 84\n */                                                                                                               // 85\nDynamicTemplate.prototype.clear = function () {                                                                   // 86\n  //XXX do we need to clear dependencies here too?                                                                // 87\n  this._template = undefined;                                                                                     // 88\n  this._data = undefined;                                                                                         // 89\n  this._templateDep.changed();                                                                                    // 90\n};                                                                                                                // 91\n                                                                                                                  // 92\n/**                                                                                                               // 93\n * Get or set the data context.                                                                                   // 94\n */                                                                                                               // 95\nDynamicTemplate.prototype.data = function (value) {                                                               // 96\n  if (arguments.length === 1 && value !== this._data) {                                                           // 97\n    this._data = value;                                                                                           // 98\n    this._dataDep.changed();                                                                                      // 99\n    return;                                                                                                       // 100\n  }                                                                                                               // 101\n                                                                                                                  // 102\n  this._dataDep.depend();                                                                                         // 103\n  return typeof this._data === 'function' ? this._data() : this._data;                                            // 104\n};                                                                                                                // 105\n                                                                                                                  // 106\n/**                                                                                                               // 107\n * Create the view if it hasn't been created yet.                                                                 // 108\n */                                                                                                               // 109\nDynamicTemplate.prototype.create = function (options) {                                                           // 110\n  var self = this;                                                                                                // 111\n                                                                                                                  // 112\n  if (this.isCreated) {                                                                                           // 113\n    throw new Error(\"DynamicTemplate view is already created\");                                                   // 114\n  }                                                                                                               // 115\n                                                                                                                  // 116\n  this.isCreated = true;                                                                                          // 117\n  this.isDestroyed = false;                                                                                       // 118\n                                                                                                                  // 119\n  var templateVar = ReactiveVar(null);                                                                            // 120\n                                                                                                                  // 121\n  var view = Blaze.View('DynamicTemplate', function () {                                                          // 122\n    var thisView = this;                                                                                          // 123\n                                                                                                                  // 124\n    // create the template dependency here because we need the entire                                             // 125\n    // dynamic template to re-render if the template changes, including                                           // 126\n    // the Blaze.With view.                                                                                       // 127\n    var template = templateVar.get();                                                                             // 128\n                                                                                                                  // 129\n    return Blaze.With(function () {                                                                               // 130\n      // NOTE: This will rerun anytime the data function invalidates this                                         // 131\n      // computation OR if created from an inclusion helper (see note below) any                                  // 132\n      // time any of the argument functions invlidate the computation. For                                        // 133\n      // example, when the template changes this function will rerun also. But                                    // 134\n      // it's probably generally ok. The more serious use case is to not                                          // 135\n      // re-render the entire template every time the data context changes.                                       // 136\n      var result = self.data();                                                                                   // 137\n                                                                                                                  // 138\n      if (typeof result !== 'undefined')                                                                          // 139\n        // looks like data was set directly on this dynamic template                                              // 140\n        return result;                                                                                            // 141\n      else                                                                                                        // 142\n        // return the first parent data context that is not inclusion arguments                                   // 143\n        return DynamicTemplate.getParentDataContext(thisView);                                                    // 144\n    }, function () {                                                                                              // 145\n      // NOTE: When DynamicTemplate is used from a template inclusion helper                                      // 146\n      // like this {{> DynamicTemplate template=getTemplate data=getData}} the                                    // 147\n      // function below will rerun any time the getData function invalidates the                                  // 148\n      // argument data computation.                                                                               // 149\n      var tmpl = null;                                                                                            // 150\n                                                                                                                  // 151\n      // is it a template name like \"MyTemplate\"?                                                                 // 152\n      if (typeof template === 'string') {                                                                         // 153\n        tmpl = Template[template];                                                                                // 154\n                                                                                                                  // 155\n        if (!tmpl)                                                                                                // 156\n          // as a fallback double check the user didn't actually define                                           // 157\n          // a camelCase version of the template.                                                                 // 158\n          tmpl = Template[camelCase(template)];                                                                   // 159\n                                                                                                                  // 160\n        if (!tmpl) {                                                                                              // 161\n          tmpl = Blaze.With({                                                                                     // 162\n            msg: \"Couldn't find a template named \" + JSON.stringify(template) + \" or \" + JSON.stringify(camelCase(template))+ \". Are you sure you defined it?\"\n          }, function () {                                                                                        // 164\n            return Template.__DynamicTemplateError__;                                                             // 165\n          });                                                                                                     // 166\n        }                                                                                                         // 167\n      } else if (typeOf(template) === '[object Object]') {                                                        // 168\n        // or maybe a view already?                                                                               // 169\n        tmpl = template;                                                                                          // 170\n      } else if (typeof self._content !== 'undefined') {                                                          // 171\n        // or maybe its block content like                                                                        // 172\n        // {{#DynamicTemplate}}                                                                                   // 173\n        //  Some block                                                                                            // 174\n        // {{/DynamicTemplate}}                                                                                   // 175\n        tmpl = self._content;                                                                                     // 176\n      }                                                                                                           // 177\n                                                                                                                  // 178\n      return tmpl;                                                                                                // 179\n    });                                                                                                           // 180\n  });                                                                                                             // 181\n                                                                                                                  // 182\n  view.onViewCreated(function () {                                                                                // 183\n    this.autorun(function () {                                                                                    // 184\n      templateVar.set(self.template());                                                                           // 185\n    });                                                                                                           // 186\n  });                                                                                                             // 187\n                                                                                                                  // 188\n  // wire up the view lifecycle callbacks                                                                         // 189\n  _.each(['onViewCreated', 'onViewReady', '_onViewRendered', 'onViewDestroyed'], function (hook) {                // 190\n    view[hook](function () {                                                                                      // 191\n      // \"this\" is the view instance                                                                              // 192\n      self._runHooks(hook, this);                                                                                 // 193\n    });                                                                                                           // 194\n  });                                                                                                             // 195\n                                                                                                                  // 196\n  view._onViewRendered(function () {                                                                              // 197\n    // avoid inserting the view twice by accident.                                                                // 198\n    self.isInserted = true;                                                                                       // 199\n                                                                                                                  // 200\n    if (view.renderCount !== 1)                                                                                   // 201\n      return;                                                                                                     // 202\n                                                                                                                  // 203\n    self._attachEvents();                                                                                         // 204\n  });                                                                                                             // 205\n                                                                                                                  // 206\n  view._templateInstance = new Blaze.TemplateInstance(view);                                                      // 207\n  view.templateInstance = function () {                                                                           // 208\n    // Update data, firstNode, and lastNode, and return the TemplateInstance                                      // 209\n    // object.                                                                                                    // 210\n    var inst = view._templateInstance;                                                                            // 211\n                                                                                                                  // 212\n    inst.data = Blaze.getData(view);                                                                              // 213\n                                                                                                                  // 214\n    if (view._domrange && !view.isDestroyed) {                                                                    // 215\n      inst.firstNode = view._domrange.firstNode();                                                                // 216\n      inst.lastNode = view._domrange.lastNode();                                                                  // 217\n    } else {                                                                                                      // 218\n      // on 'created' or 'destroyed' callbacks we don't have a DomRange                                           // 219\n      inst.firstNode = null;                                                                                      // 220\n      inst.lastNode = null;                                                                                       // 221\n    }                                                                                                             // 222\n                                                                                                                  // 223\n    return inst;                                                                                                  // 224\n  };                                                                                                              // 225\n                                                                                                                  // 226\n  this.view = view;                                                                                               // 227\n  view.__dynamicTemplate__ = this;                                                                                // 228\n                                                                                                                  // 229\n  var controller = Deps.nonreactive(function () {                                                                 // 230\n    return self.getController();                                                                                  // 231\n  });                                                                                                             // 232\n                                                                                                                  // 233\n  if (controller)                                                                                                 // 234\n    DynamicTemplate.registerLookupHost(view, controller);                                                         // 235\n                                                                                                                  // 236\n  //XXX change to this.constructor.name?                                                                          // 237\n  view.name = this.name;                                                                                          // 238\n  return view;                                                                                                    // 239\n};                                                                                                                // 240\n                                                                                                                  // 241\n/**                                                                                                               // 242\n * Destroy the dynamic template, also destroying the view if it exists.                                           // 243\n */                                                                                                               // 244\nDynamicTemplate.prototype.destroy = function () {                                                                 // 245\n  if (this.isCreated) {                                                                                           // 246\n    Blaze.remove(this.view);                                                                                      // 247\n    this.view = null;                                                                                             // 248\n    this.isDestroyed = true;                                                                                      // 249\n    this.isCreated = false;                                                                                       // 250\n  }                                                                                                               // 251\n};                                                                                                                // 252\n                                                                                                                  // 253\n/**                                                                                                               // 254\n * View lifecycle hooks.                                                                                          // 255\n */                                                                                                               // 256\n_.each(['onViewCreated', 'onViewReady', '_onViewRendered', 'onViewDestroyed'], function (hook) {                  // 257\n  DynamicTemplate.prototype[hook] = function (cb) {                                                               // 258\n    var hooks = this._hooks[hook] = this._hooks[hook] || [];                                                      // 259\n    hooks.push(cb);                                                                                               // 260\n    return this;                                                                                                  // 261\n  };                                                                                                              // 262\n});                                                                                                               // 263\n                                                                                                                  // 264\nDynamicTemplate.prototype._runHooks = function (name, view) {                                                     // 265\n  var hooks = this._hooks[name] || [];                                                                            // 266\n  var hook;                                                                                                       // 267\n                                                                                                                  // 268\n  for (var i = 0; i < hooks.length; i++) {                                                                        // 269\n    hook = hooks[i];                                                                                              // 270\n    // keep the \"thisArg\" pointing to the view, but make the first parameter to                                   // 271\n    // the callback teh dynamic template instance.                                                                // 272\n    hook.call(view, this);                                                                                        // 273\n  }                                                                                                               // 274\n};                                                                                                                // 275\n                                                                                                                  // 276\nDynamicTemplate.prototype.events = function (eventMap, thisInHandler) {                                           // 277\n  var self = this;                                                                                                // 278\n                                                                                                                  // 279\n  this._detachEvents();                                                                                           // 280\n  this._eventThisArg = thisInHandler;                                                                             // 281\n                                                                                                                  // 282\n  var boundMap = this._eventMap = {};                                                                             // 283\n                                                                                                                  // 284\n  for (var key in eventMap) {                                                                                     // 285\n    boundMap[key] = (function (key, handler) {                                                                    // 286\n      return function (e) {                                                                                       // 287\n        var data = Blaze.getData(e.currentTarget);                                                                // 288\n        if (data == null) data = {};                                                                              // 289\n        var tmplInstance = self.view.templateInstance();                                                          // 290\n        return handler.call(thisInHandler || this, e, tmplInstance, data);                                        // 291\n      }                                                                                                           // 292\n    })(key, eventMap[key]);                                                                                       // 293\n  }                                                                                                               // 294\n                                                                                                                  // 295\n  this._attachEvents();                                                                                           // 296\n};                                                                                                                // 297\n                                                                                                                  // 298\nDynamicTemplate.prototype._attachEvents = function () {                                                           // 299\n  var self = this;                                                                                                // 300\n  var thisArg = self._eventThisArg;                                                                               // 301\n  var boundMap = self._eventMap;                                                                                  // 302\n  var view = self.view;                                                                                           // 303\n  var handles = self._eventHandles;                                                                               // 304\n                                                                                                                  // 305\n  if (!view)                                                                                                      // 306\n    return;                                                                                                       // 307\n                                                                                                                  // 308\n  var domrange = view._domrange;                                                                                  // 309\n                                                                                                                  // 310\n  if (!domrange)                                                                                                  // 311\n    throw new Error(\"no domrange\");                                                                               // 312\n                                                                                                                  // 313\n  var attach = function (range, element) {                                                                        // 314\n    _.each(boundMap, function (handler, spec) {                                                                   // 315\n      var clauses = spec.split(/,\\s+/);                                                                           // 316\n      // iterate over clauses of spec, e.g. ['click .foo', 'click .bar']                                          // 317\n      _.each(clauses, function (clause) {                                                                         // 318\n        var parts = clause.split(/\\s+/);                                                                          // 319\n        if (parts.length === 0)                                                                                   // 320\n          return;                                                                                                 // 321\n                                                                                                                  // 322\n        var newEvents = parts.shift();                                                                            // 323\n        var selector = parts.join(' ');                                                                           // 324\n        handles.push(Blaze._EventSupport.listen(                                                                  // 325\n          element, newEvents, selector,                                                                           // 326\n          function (evt) {                                                                                        // 327\n            if (! range.containsElement(evt.currentTarget))                                                       // 328\n              return null;                                                                                        // 329\n            var handlerThis = self._eventThisArg || this;                                                         // 330\n            var handlerArgs = arguments;                                                                          // 331\n            return Blaze._withCurrentView(view, function () {                                                     // 332\n              return handler.apply(handlerThis, handlerArgs);                                                     // 333\n            });                                                                                                   // 334\n          },                                                                                                      // 335\n          range, function (r) {                                                                                   // 336\n            return r.parentRange;                                                                                 // 337\n          }));                                                                                                    // 338\n      });                                                                                                         // 339\n    });                                                                                                           // 340\n  };                                                                                                              // 341\n                                                                                                                  // 342\n  if (domrange.attached)                                                                                          // 343\n    attach(domrange, domrange.parentElement);                                                                     // 344\n  else                                                                                                            // 345\n    domrange.onAttached(attach);                                                                                  // 346\n};                                                                                                                // 347\n                                                                                                                  // 348\nDynamicTemplate.prototype._detachEvents = function () {                                                           // 349\n  _.each(this._eventHandles, function (h) { h.stop(); });                                                         // 350\n  this._eventHandles = [];                                                                                        // 351\n};                                                                                                                // 352\n                                                                                                                  // 353\nvar attachEventMaps = function (range, element, eventMap, thisInHandler) {                                        // 354\n  _.each(eventMap, function (handler, spec) {                                                                     // 355\n    var clauses = spec.split(/,\\s+/);                                                                             // 356\n    // iterate over clauses of spec, e.g. ['click .foo', 'click .bar']                                            // 357\n    _.each(clauses, function (clause) {                                                                           // 358\n      var parts = clause.split(/\\s+/);                                                                            // 359\n      if (parts.length === 0)                                                                                     // 360\n        return;                                                                                                   // 361\n                                                                                                                  // 362\n      var newEvents = parts.shift();                                                                              // 363\n      var selector = parts.join(' ');                                                                             // 364\n      handles.push(Blaze._EventSupport.listen(                                                                    // 365\n        element, newEvents, selector,                                                                             // 366\n        function (evt) {                                                                                          // 367\n          if (! range.containsElement(evt.currentTarget))                                                         // 368\n            return null;                                                                                          // 369\n          var handlerThis = thisInHandler || this;                                                                // 370\n          var handlerArgs = arguments;                                                                            // 371\n          return Blaze._withCurrentView(view, function () {                                                       // 372\n            return handler.apply(handlerThis, handlerArgs);                                                       // 373\n          });                                                                                                     // 374\n        },                                                                                                        // 375\n        range, function (r) {                                                                                     // 376\n          return r.parentRange;                                                                                   // 377\n        }));                                                                                                      // 378\n    });                                                                                                           // 379\n  });                                                                                                             // 380\n};                                                                                                                // 381\n                                                                                                                  // 382\n/**                                                                                                               // 383\n * Insert the Layout view into the dom.                                                                           // 384\n */                                                                                                               // 385\nDynamicTemplate.prototype.insert = function (options) {                                                           // 386\n  options = options || {};                                                                                        // 387\n                                                                                                                  // 388\n  if (this.isInserted)                                                                                            // 389\n    return;                                                                                                       // 390\n  this.isInserted = true;                                                                                         // 391\n                                                                                                                  // 392\n  var el = options.el || document.body;                                                                           // 393\n  var $el = $(el);                                                                                                // 394\n                                                                                                                  // 395\n  if ($el.length === 0)                                                                                           // 396\n    throw new Error(\"No element to insert layout into. Is your element defined? Try a Meteor.startup callback.\");\n                                                                                                                  // 398\n  if (!this.view)                                                                                                 // 399\n    this.create(options);                                                                                         // 400\n                                                                                                                  // 401\n  Blaze.render(this.view, $el[0], options.nextNode, options.parentView);                                          // 402\n                                                                                                                  // 403\n  return this;                                                                                                    // 404\n};                                                                                                                // 405\n                                                                                                                  // 406\n/**                                                                                                               // 407\n * Reactively return the value of the current controller.                                                         // 408\n */                                                                                                               // 409\nDynamicTemplate.prototype.getController = function () {                                                           // 410\n  return this._controller.get();                                                                                  // 411\n};                                                                                                                // 412\n                                                                                                                  // 413\n/**                                                                                                               // 414\n * Set the reactive value of the controller.                                                                      // 415\n */                                                                                                               // 416\nDynamicTemplate.prototype.setController = function (controller) {                                                 // 417\n  var didHaveController = !!this._hasController;                                                                  // 418\n  this._hasController = (typeof controller !== 'undefined');                                                      // 419\n                                                                                                                  // 420\n  if (didHaveController !== this._hasController)                                                                  // 421\n    this._hasControllerDep.changed();                                                                             // 422\n                                                                                                                  // 423\n  // this will not invalidate an existing view so this lookup host                                                // 424\n  // will only be looked up on subsequent renderings.                                                             // 425\n  if (this.view)                                                                                                  // 426\n    DynamicTemplate.registerLookupHost(this.view, controller);                                                    // 427\n                                                                                                                  // 428\n  return this._controller.set(controller);                                                                        // 429\n};                                                                                                                // 430\n                                                                                                                  // 431\n/**                                                                                                               // 432\n * Reactively returns true if the template has a controller and false otherwise.                                  // 433\n */                                                                                                               // 434\nDynamicTemplate.prototype.hasController = function () {                                                           // 435\n  this._hasControllerDep.depend();                                                                                // 436\n  return this._hasController;                                                                                     // 437\n};                                                                                                                // 438\n                                                                                                                  // 439\n/*****************************************************************************/                                   // 440\n/* DynamicTemplate Static Methods */                                                                              // 441\n/*****************************************************************************/                                   // 442\n                                                                                                                  // 443\n/**                                                                                                               // 444\n * Get the first parent data context that are not inclusion arguments                                             // 445\n * (see above function). Note: This function can create reactive dependencies.                                    // 446\n */                                                                                                               // 447\nDynamicTemplate.getParentDataContext = function (view) {                                                          // 448\n  // start off with the parent.                                                                                   // 449\n  view = view.parentView;                                                                                         // 450\n                                                                                                                  // 451\n  while (view) {                                                                                                  // 452\n    if (view.name === 'with' && !view.__isTemplateWith)                                                           // 453\n      return view.dataVar.get();                                                                                  // 454\n    else                                                                                                          // 455\n      view = view.parentView;                                                                                     // 456\n  }                                                                                                               // 457\n                                                                                                                  // 458\n  return null;                                                                                                    // 459\n};                                                                                                                // 460\n                                                                                                                  // 461\n                                                                                                                  // 462\n/**                                                                                                               // 463\n * Get inclusion arguments, if any, from a view.                                                                  // 464\n *                                                                                                                // 465\n * Uses the __isTemplateWith property set when a parent view is used                                              // 466\n * specificially for a data context with inclusion args.                                                          // 467\n *                                                                                                                // 468\n * Inclusion arguments are arguments provided in a template like this:                                            // 469\n * {{> yield \"inclusionArg\"}}                                                                                     // 470\n * or                                                                                                             // 471\n * {{> yield region=\"inclusionArgValue\"}}                                                                         // 472\n */                                                                                                               // 473\nDynamicTemplate.getInclusionArguments = function (view) {                                                         // 474\n  var parent = view && view.parentView;                                                                           // 475\n                                                                                                                  // 476\n  if (!parent)                                                                                                    // 477\n    return null;                                                                                                  // 478\n                                                                                                                  // 479\n  if (parent.__isTemplateWith)                                                                                    // 480\n    return parent.dataVar.get();                                                                                  // 481\n                                                                                                                  // 482\n  return null;                                                                                                    // 483\n};                                                                                                                // 484\n                                                                                                                  // 485\n/**                                                                                                               // 486\n * Given a view, return a function that can be used to access argument values at                                  // 487\n * the time the view was rendered. There are two key benefits:                                                    // 488\n *                                                                                                                // 489\n * 1. Save the argument data at the time of rendering. When you use lookup(...)                                   // 490\n *    it starts from the current data context which can change.                                                   // 491\n * 2. Defer creating a dependency on inclusion arguments until later.                                             // 492\n *                                                                                                                // 493\n * Example:                                                                                                       // 494\n *                                                                                                                // 495\n *   {{> MyTemplate template=\"MyTemplate\"                                                                         // 496\n *   var args = DynamicTemplate.args(view);                                                                       // 497\n *   var tmplValue = args('template');                                                                            // 498\n *     => \"MyTemplate\"                                                                                            // 499\n */                                                                                                               // 500\nDynamicTemplate.args = function (view) {                                                                          // 501\n  return function (key) {                                                                                         // 502\n    var data = DynamicTemplate.getInclusionArguments(view);                                                       // 503\n                                                                                                                  // 504\n    if (data) {                                                                                                   // 505\n      if (key)                                                                                                    // 506\n        return data[key];                                                                                         // 507\n      else                                                                                                        // 508\n        return data;                                                                                              // 509\n    }                                                                                                             // 510\n                                                                                                                  // 511\n    return null;                                                                                                  // 512\n  };                                                                                                              // 513\n};                                                                                                                // 514\n                                                                                                                  // 515\n/**                                                                                                               // 516\n * Inherit from DynamicTemplate.                                                                                  // 517\n */                                                                                                               // 518\nDynamicTemplate.extend = function (props) {                                                                       // 519\n  return Iron.utils.extend(this, props);                                                                          // 520\n};                                                                                                                // 521\n                                                                                                                  // 522\n/**                                                                                                               // 523\n * Register a lookupHost for a view. This allows components and controllers                                       // 524\n * to participate in the Blaze.prototype.lookup chain.                                                            // 525\n */                                                                                                               // 526\nDynamicTemplate.registerLookupHost = function (target, host) {                                                    // 527\n  assert(typeof target == 'object', 'registerLookupHost requires the target to be an object');                    // 528\n  assert(typeof host == 'object', 'registerLookupHost requires the host to be an object');                        // 529\n  target.__lookupHost__ = host;                                                                                   // 530\n};                                                                                                                // 531\n                                                                                                                  // 532\n/**                                                                                                               // 533\n * Returns true if the target is a lookup host and false otherwise.                                               // 534\n */                                                                                                               // 535\nDynamicTemplate.isLookupHost = function (target) {                                                                // 536\n  return !!(target && target.__lookupHost__);                                                                     // 537\n};                                                                                                                // 538\n                                                                                                                  // 539\n/*                                                                                                                // 540\n * Returns the lookup host for the target or undefined if it doesn't exist.                                       // 541\n */                                                                                                               // 542\nDynamicTemplate.getLookupHost = function (target) {                                                               // 543\n  return target && target.__lookupHost__;                                                                         // 544\n};                                                                                                                // 545\n                                                                                                                  // 546\n/*****************************************************************************/                                   // 547\n/* UI Helpers */                                                                                                  // 548\n/*****************************************************************************/                                   // 549\n                                                                                                                  // 550\nif (typeof Template !== 'undefined') {                                                                            // 551\n  UI.registerHelper('DynamicTemplate', new Template('DynamicTemplateHelper', function () {                        // 552\n    var args = DynamicTemplate.args(this);                                                                        // 553\n                                                                                                                  // 554\n    return new DynamicTemplate({                                                                                  // 555\n      data: function () { return args('data'); },                                                                 // 556\n      template: function () { return args('template'); },                                                         // 557\n      content: this.templateContentBlock                                                                          // 558\n    }).create();                                                                                                  // 559\n  }));                                                                                                            // 560\n                                                                                                                  // 561\n  /**                                                                                                             // 562\n   * Find a lookup host with a state key and return it reactively if we have                                      // 563\n   * it.                                                                                                          // 564\n   */                                                                                                             // 565\n  UI.registerHelper('get', function (key) {                                                                       // 566\n    var view = Blaze.getView();                                                                                   // 567\n    var host;                                                                                                     // 568\n                                                                                                                  // 569\n    while (view) {                                                                                                // 570\n      if (host = DynamicTemplate.getLookupHost(view)) {                                                           // 571\n        return host.state && host.state.get(key);                                                                 // 572\n      } else {                                                                                                    // 573\n        view = view.parentView;                                                                                   // 574\n      }                                                                                                           // 575\n    }                                                                                                             // 576\n                                                                                                                  // 577\n    return undefined;                                                                                             // 578\n  });                                                                                                             // 579\n}                                                                                                                 // 580\n                                                                                                                  // 581\n/*****************************************************************************/                                   // 582\n/* Namespacing */                                                                                                 // 583\n/*****************************************************************************/                                   // 584\nIron.DynamicTemplate = DynamicTemplate;                                                                           // 585\n                                                                                                                  // 586\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/iron_dynamic-template/blaze_overrides.js                                                              //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\n/*****************************************************************************/                                   // 1\n/* Imports */                                                                                                     // 2\n/*****************************************************************************/                                   // 3\nvar assert = Iron.utils.assert;                                                                                   // 4\n                                                                                                                  // 5\n/*****************************************************************************/                                   // 6\n/* Private */                                                                                                     // 7\n/*****************************************************************************/                                   // 8\nfindFirstLookupHostWithProperty = function (view, prop) {                                                         // 9\n  assert(view instanceof Blaze.View, \"view must be a Blaze.View\");                                                // 10\n                                                                                                                  // 11\n  var host;                                                                                                       // 12\n                                                                                                                  // 13\n  while (view) {                                                                                                  // 14\n    if ((host = DynamicTemplate.getLookupHost(view)) && host[prop])                                               // 15\n      return host;                                                                                                // 16\n    else                                                                                                          // 17\n      view = view.parentView;                                                                                     // 18\n  }                                                                                                               // 19\n                                                                                                                  // 20\n  return undefined;                                                                                               // 21\n};                                                                                                                // 22\n                                                                                                                  // 23\n/*****************************************************************************/                                   // 24\n/* Blaze Overrides */                                                                                             // 25\n/*****************************************************************************/                                   // 26\n/**                                                                                                               // 27\n * Adds ability to inject lookup hosts into views that can participate in                                         // 28\n * property lookup. For example, iron:controller or iron:component could make                                     // 29\n * use of this to add methods into the lookup chain. If the property is found,                                    // 30\n * a function is returned that either returns the property value or the result                                    // 31\n * of calling the function (bound to the __lookupHost__).                                                         // 32\n */                                                                                                               // 33\nvar origLookup = Blaze.View.prototype.lookup;                                                                     // 34\nBlaze.View.prototype.lookup = function (name /*, args */) {                                                       // 35\n  var lookupHost = findFirstLookupHostWithProperty(Blaze.getView(), name);                                        // 36\n  if (lookupHost) {                                                                                               // 37\n    return function callLookupHostProperty (/* args */) {                                                         // 38\n      var val = lookupHost[name];                                                                                 // 39\n      var args = [].slice.call(arguments);                                                                        // 40\n      return (typeof val === 'function') ? val.apply(lookupHost, args) : val;                                     // 41\n    }                                                                                                             // 42\n  } else {                                                                                                        // 43\n    return origLookup.apply(this, arguments);                                                                     // 44\n  }                                                                                                               // 45\n};                                                                                                                // 46\n                                                                                                                  // 47\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['iron:dynamic-template'] = {};\n\n})();\n","servePath":"/packages/iron_dynamic-template.js","sourceMap":{"version":3,"sources":["/packages/iron_dynamic-template/version_conflict_error.js","/packages/iron_dynamic-template/dynamic_template.js","/packages/iron_dynamic-template/blaze_overrides.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uH;;;;;;;;;;;;;;;;;;ACnwH;;;;;;;;;;;;;;;;;;ACzkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uH","file":"/packages/iron_dynamic-template.js","sourcesContent":["if (Package['cmather:iron-dynamic-template']) {\n  throw new Error(\"\\n\\n\\\n    Sorry! The cmather:iron-{x} packages were migrated to the new package system with the wrong name, and you have duplicate copies.\\n\\\n    You can see which cmather:iron-{x} packages have been installed by using this command:\\n\\n\\\n    > meteor list\\n\\n\\\n    Can you remove any installed cmather:iron-{x} packages like this:\\\n    \\n\\n\\\n    > meteor remove cmather:iron-core\\n\\\n    > meteor remove cmather:iron-router\\n\\\n    > meteor remove cmather:iron-dynamic-template\\n\\\n    > meteor remove cmather:iron-dynamic-layout\\n\\\n    \\n\\\n    The new packages are named iron:{x}. For example:\\n\\n\\\n    > meteor add iron:router\\n\\n\\\n    Sorry for the hassle, but thank you!\\\n    \\n\\n\\\n  \");\n\n}\n","/*****************************************************************************/\n/* Imports */\n/*****************************************************************************/\nvar debug = Iron.utils.debug('iron:dynamic-template');\nvar assert = Iron.utils.assert;\nvar camelCase = Iron.utils.camelCase;\n\n/*****************************************************************************/\n/* Private */\n/*****************************************************************************/\nvar typeOf = function (value) {\n  return Object.prototype.toString.call(value);\n};\n\n/*****************************************************************************/\n/* DynamicTemplate */\n/*****************************************************************************/\n\n/**\n * Render a component to the page whose template and data context can change\n * dynamically, either from code or from helpers.\n *\n */\nDynamicTemplate = function (options) {\n  this.options = options = options || {};\n  this._template = options.template;\n  this._defaultTemplate = options.defaultTemplate;\n  this._content = options.content;\n  this._data = options.data;\n  this._templateDep = new Tracker.Dependency;\n  this._dataDep = new Tracker.Dependency;\n  this._hasControllerDep = new Tracker.Dependency;\n  this._hooks = {};\n  this._eventMap = null;\n  this._eventHandles = null;\n  this._eventThisArg = null;\n  this._controller = new ReactiveVar; \n  this.name = options.name || this.constructor.name || 'DynamicTemplate';\n\n  // has the Blaze.View been created?\n  this.isCreated = false;\n\n  // has the Blaze.View been destroyed and not created again?\n  this.isDestroyed = false;\n};\n\n/**\n * Get or set the template. \n */\nDynamicTemplate.prototype.template = function (value) {\n  if (arguments.length === 1 && value !== this._template) {\n    this._template = value;\n    this._templateDep.changed();\n    return;\n  }\n\n  if (arguments.length > 0)\n    return;\n\n  this._templateDep.depend();\n\n  // do we have a template?\n  if (this._template)\n    return (typeof this._template === 'function') ? this._template() : this._template;\n\n  // no template? ok let's see if we have a default one set\n  if (this._defaultTemplate)\n    return (typeof this._defaultTemplate === 'function') ? this._defaultTemplate() : this._defaultTemplate;\n};\n\n/**\n * Get or set the default template.\n *\n * This function does not change any dependencies.\n */\nDynamicTemplate.prototype.defaultTemplate = function (value) {\n  if (arguments.length === 1)\n    this._defaultTemplate = value;\n  else\n    return this._defaultTemplate;\n};\n\n/**\n * Clear the template and data contexts.\n */\nDynamicTemplate.prototype.clear = function () {\n  //XXX do we need to clear dependencies here too?\n  this._template = undefined;\n  this._data = undefined;\n  this._templateDep.changed();\n};\n\n/**\n * Get or set the data context.\n */\nDynamicTemplate.prototype.data = function (value) {\n  if (arguments.length === 1 && value !== this._data) {\n    this._data = value;\n    this._dataDep.changed();\n    return;\n  }\n\n  this._dataDep.depend();\n  return typeof this._data === 'function' ? this._data() : this._data;\n};\n\n/**\n * Create the view if it hasn't been created yet.\n */\nDynamicTemplate.prototype.create = function (options) {\n  var self = this;\n\n  if (this.isCreated) {\n    throw new Error(\"DynamicTemplate view is already created\");\n  }\n\n  this.isCreated = true;\n  this.isDestroyed = false;\n\n  var templateVar = ReactiveVar(null);\n\n  var view = Blaze.View('DynamicTemplate', function () {\n    var thisView = this;\n\n    // create the template dependency here because we need the entire\n    // dynamic template to re-render if the template changes, including\n    // the Blaze.With view.\n    var template = templateVar.get();\n\n    return Blaze.With(function () {\n      // NOTE: This will rerun anytime the data function invalidates this\n      // computation OR if created from an inclusion helper (see note below) any\n      // time any of the argument functions invlidate the computation. For\n      // example, when the template changes this function will rerun also. But\n      // it's probably generally ok. The more serious use case is to not\n      // re-render the entire template every time the data context changes.\n      var result = self.data();\n\n      if (typeof result !== 'undefined')\n        // looks like data was set directly on this dynamic template\n        return result;\n      else\n        // return the first parent data context that is not inclusion arguments\n        return DynamicTemplate.getParentDataContext(thisView);\n    }, function () {\n      // NOTE: When DynamicTemplate is used from a template inclusion helper\n      // like this {{> DynamicTemplate template=getTemplate data=getData}} the\n      // function below will rerun any time the getData function invalidates the\n      // argument data computation.\n      var tmpl = null;\n\n      // is it a template name like \"MyTemplate\"?\n      if (typeof template === 'string') {\n        tmpl = Template[template];\n\n        if (!tmpl)\n          // as a fallback double check the user didn't actually define\n          // a camelCase version of the template.\n          tmpl = Template[camelCase(template)];\n\n        if (!tmpl) {\n          tmpl = Blaze.With({\n            msg: \"Couldn't find a template named \" + JSON.stringify(template) + \" or \" + JSON.stringify(camelCase(template))+ \". Are you sure you defined it?\"\n          }, function () {\n            return Template.__DynamicTemplateError__;\n          });\n        }\n      } else if (typeOf(template) === '[object Object]') {\n        // or maybe a view already?\n        tmpl = template;\n      } else if (typeof self._content !== 'undefined') {\n        // or maybe its block content like \n        // {{#DynamicTemplate}}\n        //  Some block\n        // {{/DynamicTemplate}}\n        tmpl = self._content;\n      }\n\n      return tmpl;\n    });\n  });\n\n  view.onViewCreated(function () {\n    this.autorun(function () {\n      templateVar.set(self.template());\n    });\n  });\n\n  // wire up the view lifecycle callbacks\n  _.each(['onViewCreated', 'onViewReady', '_onViewRendered', 'onViewDestroyed'], function (hook) {\n    view[hook](function () {\n      // \"this\" is the view instance\n      self._runHooks(hook, this);\n    });\n  });\n\n  view._onViewRendered(function () {\n    // avoid inserting the view twice by accident.\n    self.isInserted = true;\n\n    if (view.renderCount !== 1)\n      return;\n\n    self._attachEvents();\n  });\n\n  view._templateInstance = new Blaze.TemplateInstance(view);\n  view.templateInstance = function () {\n    // Update data, firstNode, and lastNode, and return the TemplateInstance\n    // object.\n    var inst = view._templateInstance;\n\n    inst.data = Blaze.getData(view);\n\n    if (view._domrange && !view.isDestroyed) {\n      inst.firstNode = view._domrange.firstNode();\n      inst.lastNode = view._domrange.lastNode();\n    } else {\n      // on 'created' or 'destroyed' callbacks we don't have a DomRange\n      inst.firstNode = null;\n      inst.lastNode = null;\n    }\n\n    return inst;\n  };\n\n  this.view = view;\n  view.__dynamicTemplate__ = this;\n\n  var controller = Deps.nonreactive(function () {\n    return self.getController();\n  });\n\n  if (controller)\n    DynamicTemplate.registerLookupHost(view, controller);\n\n  //XXX change to this.constructor.name?\n  view.name = this.name;\n  return view;\n};\n\n/**\n * Destroy the dynamic template, also destroying the view if it exists.\n */\nDynamicTemplate.prototype.destroy = function () {\n  if (this.isCreated) {\n    Blaze.remove(this.view);\n    this.view = null;\n    this.isDestroyed = true;\n    this.isCreated = false;\n  }\n};\n\n/**\n * View lifecycle hooks.\n */\n_.each(['onViewCreated', 'onViewReady', '_onViewRendered', 'onViewDestroyed'], function (hook) {\n  DynamicTemplate.prototype[hook] = function (cb) {\n    var hooks = this._hooks[hook] = this._hooks[hook] || [];\n    hooks.push(cb);\n    return this;\n  };\n});\n\nDynamicTemplate.prototype._runHooks = function (name, view) {\n  var hooks = this._hooks[name] || [];\n  var hook;\n\n  for (var i = 0; i < hooks.length; i++) {\n    hook = hooks[i];\n    // keep the \"thisArg\" pointing to the view, but make the first parameter to\n    // the callback teh dynamic template instance.\n    hook.call(view, this);\n  }\n};\n\nDynamicTemplate.prototype.events = function (eventMap, thisInHandler) {\n  var self = this;\n\n  this._detachEvents();\n  this._eventThisArg = thisInHandler;\n\n  var boundMap = this._eventMap = {};\n\n  for (var key in eventMap) {\n    boundMap[key] = (function (key, handler) {\n      return function (e) {\n        var data = Blaze.getData(e.currentTarget);\n        if (data == null) data = {};\n        var tmplInstance = self.view.templateInstance();\n        return handler.call(thisInHandler || this, e, tmplInstance, data);\n      }\n    })(key, eventMap[key]);\n  }\n\n  this._attachEvents();\n};\n\nDynamicTemplate.prototype._attachEvents = function () {\n  var self = this;\n  var thisArg = self._eventThisArg;\n  var boundMap = self._eventMap;\n  var view = self.view;\n  var handles = self._eventHandles;\n\n  if (!view)\n    return;\n\n  var domrange = view._domrange;\n\n  if (!domrange)\n    throw new Error(\"no domrange\");\n\n  var attach = function (range, element) {\n    _.each(boundMap, function (handler, spec) {\n      var clauses = spec.split(/,\\s+/);\n      // iterate over clauses of spec, e.g. ['click .foo', 'click .bar']\n      _.each(clauses, function (clause) {\n        var parts = clause.split(/\\s+/);\n        if (parts.length === 0)\n          return;\n\n        var newEvents = parts.shift();\n        var selector = parts.join(' ');\n        handles.push(Blaze._EventSupport.listen(\n          element, newEvents, selector,\n          function (evt) {\n            if (! range.containsElement(evt.currentTarget))\n              return null;\n            var handlerThis = self._eventThisArg || this;\n            var handlerArgs = arguments;\n            return Blaze._withCurrentView(view, function () {\n              return handler.apply(handlerThis, handlerArgs);\n            });\n          },\n          range, function (r) {\n            return r.parentRange;\n          }));\n      });\n    });\n  };\n\n  if (domrange.attached)\n    attach(domrange, domrange.parentElement);\n  else\n    domrange.onAttached(attach);\n};\n\nDynamicTemplate.prototype._detachEvents = function () {\n  _.each(this._eventHandles, function (h) { h.stop(); });\n  this._eventHandles = [];\n};\n\nvar attachEventMaps = function (range, element, eventMap, thisInHandler) {\n  _.each(eventMap, function (handler, spec) {\n    var clauses = spec.split(/,\\s+/);\n    // iterate over clauses of spec, e.g. ['click .foo', 'click .bar']\n    _.each(clauses, function (clause) {\n      var parts = clause.split(/\\s+/);\n      if (parts.length === 0)\n        return;\n\n      var newEvents = parts.shift();\n      var selector = parts.join(' ');\n      handles.push(Blaze._EventSupport.listen(\n        element, newEvents, selector,\n        function (evt) {\n          if (! range.containsElement(evt.currentTarget))\n            return null;\n          var handlerThis = thisInHandler || this;\n          var handlerArgs = arguments;\n          return Blaze._withCurrentView(view, function () {\n            return handler.apply(handlerThis, handlerArgs);\n          });\n        },\n        range, function (r) {\n          return r.parentRange;\n        }));\n    });\n  });\n};\n\n/**\n * Insert the Layout view into the dom.\n */\nDynamicTemplate.prototype.insert = function (options) {\n  options = options || {};\n\n  if (this.isInserted)\n    return;\n  this.isInserted = true;\n\n  var el = options.el || document.body;\n  var $el = $(el);\n\n  if ($el.length === 0)\n    throw new Error(\"No element to insert layout into. Is your element defined? Try a Meteor.startup callback.\");\n\n  if (!this.view)\n    this.create(options);\n\n  Blaze.render(this.view, $el[0], options.nextNode, options.parentView);\n\n  return this;\n};\n\n/**\n * Reactively return the value of the current controller.\n */\nDynamicTemplate.prototype.getController = function () {\n  return this._controller.get();\n};\n\n/**\n * Set the reactive value of the controller.\n */\nDynamicTemplate.prototype.setController = function (controller) {\n  var didHaveController = !!this._hasController;\n  this._hasController = (typeof controller !== 'undefined');\n\n  if (didHaveController !== this._hasController)\n    this._hasControllerDep.changed();\n\n  // this will not invalidate an existing view so this lookup host\n  // will only be looked up on subsequent renderings.\n  if (this.view)\n    DynamicTemplate.registerLookupHost(this.view, controller);\n\n  return this._controller.set(controller);\n};\n\n/**\n * Reactively returns true if the template has a controller and false otherwise.\n */\nDynamicTemplate.prototype.hasController = function () {\n  this._hasControllerDep.depend();\n  return this._hasController;\n};\n\n/*****************************************************************************/\n/* DynamicTemplate Static Methods */\n/*****************************************************************************/\n\n/**\n * Get the first parent data context that are not inclusion arguments\n * (see above function). Note: This function can create reactive dependencies.\n */\nDynamicTemplate.getParentDataContext = function (view) {\n  // start off with the parent.\n  view = view.parentView;\n\n  while (view) {\n    if (view.name === 'with' && !view.__isTemplateWith)\n      return view.dataVar.get();\n    else\n      view = view.parentView;\n  }\n\n  return null;\n};\n\n\n/**\n * Get inclusion arguments, if any, from a view.\n *\n * Uses the __isTemplateWith property set when a parent view is used\n * specificially for a data context with inclusion args.\n *\n * Inclusion arguments are arguments provided in a template like this:\n * {{> yield \"inclusionArg\"}}\n * or\n * {{> yield region=\"inclusionArgValue\"}}\n */\nDynamicTemplate.getInclusionArguments = function (view) {\n  var parent = view && view.parentView;\n\n  if (!parent)\n    return null;\n\n  if (parent.__isTemplateWith)\n    return parent.dataVar.get();\n\n  return null;\n};\n\n/**\n * Given a view, return a function that can be used to access argument values at\n * the time the view was rendered. There are two key benefits:\n *\n * 1. Save the argument data at the time of rendering. When you use lookup(...)\n *    it starts from the current data context which can change.\n * 2. Defer creating a dependency on inclusion arguments until later.\n *\n * Example:\n *\n *   {{> MyTemplate template=\"MyTemplate\"\n *   var args = DynamicTemplate.args(view);\n *   var tmplValue = args('template');\n *     => \"MyTemplate\"\n */\nDynamicTemplate.args = function (view) {\n  return function (key) {\n    var data = DynamicTemplate.getInclusionArguments(view);\n\n    if (data) {\n      if (key)\n        return data[key];\n      else\n        return data;\n    }\n\n    return null;\n  };\n};\n\n/**\n * Inherit from DynamicTemplate.\n */\nDynamicTemplate.extend = function (props) {\n  return Iron.utils.extend(this, props);\n};\n\n/**\n * Register a lookupHost for a view. This allows components and controllers\n * to participate in the Blaze.prototype.lookup chain.\n */\nDynamicTemplate.registerLookupHost = function (target, host) {\n  assert(typeof target == 'object', 'registerLookupHost requires the target to be an object');\n  assert(typeof host == 'object', 'registerLookupHost requires the host to be an object');\n  target.__lookupHost__ = host;\n};\n\n/**\n * Returns true if the target is a lookup host and false otherwise.\n */\nDynamicTemplate.isLookupHost = function (target) {\n  return !!(target && target.__lookupHost__);\n};\n\n/*\n * Returns the lookup host for the target or undefined if it doesn't exist.\n */\nDynamicTemplate.getLookupHost = function (target) {\n  return target && target.__lookupHost__;\n};\n\n/*****************************************************************************/\n/* UI Helpers */\n/*****************************************************************************/\n\nif (typeof Template !== 'undefined') {\n  UI.registerHelper('DynamicTemplate', new Template('DynamicTemplateHelper', function () {\n    var args = DynamicTemplate.args(this);\n\n    return new DynamicTemplate({\n      data: function () { return args('data'); },\n      template: function () { return args('template'); },\n      content: this.templateContentBlock\n    }).create();\n  }));\n\n  /**\n   * Find a lookup host with a state key and return it reactively if we have\n   * it.\n   */\n  UI.registerHelper('get', function (key) {\n    var view = Blaze.getView();\n    var host;\n\n    while (view) {\n      if (host = DynamicTemplate.getLookupHost(view)) {\n        return host.state && host.state.get(key);\n      } else {\n        view = view.parentView;\n      }\n    }\n\n    return undefined;\n  });\n}\n\n/*****************************************************************************/\n/* Namespacing */\n/*****************************************************************************/\nIron.DynamicTemplate = DynamicTemplate;\n","/*****************************************************************************/\n/* Imports */\n/*****************************************************************************/\nvar assert = Iron.utils.assert;\n\n/*****************************************************************************/\n/* Private */\n/*****************************************************************************/\nfindFirstLookupHostWithProperty = function (view, prop) {\n  assert(view instanceof Blaze.View, \"view must be a Blaze.View\");\n\n  var host;\n\n  while (view) {\n    if ((host = DynamicTemplate.getLookupHost(view)) && host[prop])\n      return host;\n    else\n      view = view.parentView;\n  }\n\n  return undefined;\n};\n\n/*****************************************************************************/\n/* Blaze Overrides */\n/*****************************************************************************/\n/**\n * Adds ability to inject lookup hosts into views that can participate in\n * property lookup. For example, iron:controller or iron:component could make\n * use of this to add methods into the lookup chain. If the property is found,\n * a function is returned that either returns the property value or the result\n * of calling the function (bound to the __lookupHost__).\n */\nvar origLookup = Blaze.View.prototype.lookup;\nBlaze.View.prototype.lookup = function (name /*, args */) {\n  var lookupHost = findFirstLookupHostWithProperty(Blaze.getView(), name);\n  if (lookupHost) {\n    return function callLookupHostProperty (/* args */) {\n      var val = lookupHost[name];\n      var args = [].slice.call(arguments);\n      return (typeof val === 'function') ? val.apply(lookupHost, args) : val;\n    }\n  } else {\n    return origLookup.apply(this, arguments);\n  }\n};\n"]}}]