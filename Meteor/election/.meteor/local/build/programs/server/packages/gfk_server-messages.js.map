{"version":3,"sources":["meteor://ðŸ’»app/packages/gfk_server-messages/packages/gfk_server-messages.js"],"names":[],"mappingsgG","file":"/packages/gfk_server-messages.js","sourcesContent":["(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/gfk:server-messages/shared/internals.js                                 //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\n/* global Internals:true*/                                                          // 1\n                                                                                    // 2\n/***                                                                                // 3\n * Internal namespace used for constants and collection instance                    // 4\n *                                                                                  // 5\n * @namespace                                                                       // 6\n * @type {{constants: {MAX_TIMESTAMP_AGE: number}, collection: Mongo.Collection}}   // 7\n */                                                                                 // 8\nInternals = {                                                                       // 9\n  constants: {                                                                      // 10\n    MAX_TIMESTAMP_AGE: 2500                                                         // 11\n  },                                                                                // 12\n  collection: new Mongo.Collection('servermessages')                                // 13\n};                                                                                  // 14\n                                                                                    // 15\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/gfk:server-messages/shared/serverMessages.js                            //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\nServerMessages = function (name) {                                                  // 1\n  this._name = name || 'default';                                                   // 2\n                                                                                    // 3\n  if (_.isFunction(this._init)) {                                                   // 4\n    //Client/server specific part of constructor                                    // 5\n    this._init.apply(this, arguments);                                              // 6\n  }                                                                                 // 7\n};                                                                                  // 8\n                                                                                    // 9\nServerMessages.prototype = {};                                                      // 10\n                                                                                    // 11\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/gfk:server-messages/server/serverMessages.js                            //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\n_.extend(ServerMessages.prototype, {                                                // 1\n  /***                                                                              // 2\n   * Notifies the listeners of the given channel.                                   // 3\n   * All other arguments are passed on to the listeners                             // 4\n   *                                                                                // 5\n   * @param channel the channel to notify                                           // 6\n   */                                                                               // 7\n  notify: function (channel) {                                                      // 8\n    var args = [].slice.call(arguments);                                            // 9\n    args.splice(0, 1);                                                              // 10\n                                                                                    // 11\n    this._cleanupOldMessages();                                                     // 12\n                                                                                    // 13\n    Internals.collection.insert({                                                   // 14\n      instanceName: this._name,                                                     // 15\n      channel: channel,                                                             // 16\n      arguments: args,                                                              // 17\n      timestamp: (new Date().getTime())                                             // 18\n    });                                                                             // 19\n  },                                                                                // 20\n  /***                                                                              // 21\n   * Cleans up old messages that are expired                                        // 22\n   * @private                                                                       // 23\n   */                                                                               // 24\n  _cleanupOldMessages: function () {                                                // 25\n    var timestamp = (new Date().getTime()) - Internals.constants.MAX_TIMESTAMP_AGE; // 26\n                                                                                    // 27\n    Internals.collection.remove({                                                   // 28\n      timestamp: {$lt: timestamp}                                                   // 29\n    });                                                                             // 30\n  }                                                                                 // 31\n});                                                                                 // 32\n                                                                                    // 33\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/gfk:server-messages/server/publish.js                                   //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\n/* global publishMethods:true*/                                                     // 1\n                                                                                    // 2\n                                                                                    // 3\n/***                                                                                // 4\n * Namespace containing the publishes for the package.                              // 5\n * Only exposed for testing purposes                                                // 6\n *                                                                                  // 7\n * @type {{ServerMessages/publishMessages: Function}}                               // 8\n */                                                                                 // 9\npublishMethods = {                                                                  // 10\n  /***                                                                              // 11\n   * Publishes all the messages for the given instanceName                          // 12\n   *                                                                                // 13\n   * @param instanceName the name of the instance to publish the messages for       // 14\n   * @returns {any|Cursor}                                                          // 15\n   */                                                                               // 16\n  'ServerMessages/publishMessages': function (instanceName) {                       // 17\n    var timestamp = (new Date().getTime()) - Internals.constants.MAX_TIMESTAMP_AGE; // 18\n                                                                                    // 19\n    return Internals.collection.find({                                              // 20\n      instanceName: instanceName,                                                   // 21\n      timestamp: {$gt: timestamp}                                                   // 22\n    });                                                                             // 23\n  }                                                                                 // 24\n};                                                                                  // 25\n                                                                                    // 26\n_.each(publishMethods, function (fn, name) {                                        // 27\n  Meteor.publish(name, fn);                                                         // 28\n});                                                                                 // 29\n                                                                                    // 30\n                                                                                    // 31\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}