{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"if (!Accounts.ui) {\n\tAccounts.ui = {};\n}\n\nif (!Accounts.ui._options) {\n\tAccounts.ui._options = {\n\t\textraSignupFields: [],\n\t\trequestPermissions: {},\n\t\trequestOfflineToken: {},\n\t\tforceApprovalPrompt: {},\n\t\tforceEmailLowercase: false,\n\t\tforceUsernameLowercase: false,\n\t\tforcePasswordLowercase: false\n\t};\n}\n\nAccounts.ui.navigate = function (route, hash) {\n\t// if router is iron-router\n\tif (window.Router && _.isFunction(Router.go)) {\n\t\tRouter.go(route, hash);\n\t}\n};\n\nAccounts.ui.config = function (options) {\n\t// validate options keys\n\tvar VALID_KEYS = ['passwordSignupFields', 'extraSignupFields', 'forceEmailLowercase', 'forceUsernameLowercase', 'forcePasswordLowercase', 'requestPermissions', 'requestOfflineToken', 'forceApprovalPrompt'];\n\n\t_.each(_.keys(options), function (key) {\n\t\tif (!_.contains(VALID_KEYS, key)) {\n\t\t\tthrow new Error(\"Accounts.ui.config: Invalid key: \" + key);\n\t\t}\n\t});\n\n\toptions.extraSignupFields = options.extraSignupFields || [];\n\n\t// deal with `passwordSignupFields`\n\tif (options.passwordSignupFields) {\n\t\tif (_.contains([\"USERNAME_AND_EMAIL_CONFIRM\", \"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\", \"USERNAME_ONLY\", \"EMAIL_ONLY\"], options.passwordSignupFields)) {\n\t\t\tif (Accounts.ui._options.passwordSignupFields) {\n\t\t\t\tthrow new Error(\"Accounts.ui.config: Can't set `passwordSignupFields` more than once\");\n\t\t\t} else {\n\t\t\t\tAccounts.ui._options.passwordSignupFields = options.passwordSignupFields;\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Error(\"Accounts.ui.config: Invalid option for `passwordSignupFields`: \" + options.passwordSignupFields);\n\t\t}\n\t}\n\n\tAccounts.ui._options.forceEmailLowercase = options.forceEmailLowercase;\n\tAccounts.ui._options.forceUsernameLowercase = options.forceUsernameLowercase;\n\tAccounts.ui._options.forcePasswordLowercase = options.forcePasswordLowercase;\n\n\t// deal with `requestPermissions`\n\tif (options.requestPermissions) {\n\t\t_.each(options.requestPermissions, function (scope, service) {\n\t\t\tif (Accounts.ui._options.requestPermissions[service]) {\n\t\t\t\tthrow new Error(\"Accounts.ui.config: Can't set `requestPermissions` more than once for \" + service);\n\t\t\t} else if (!(scope instanceof Array)) {\n\t\t\t\tthrow new Error(\"Accounts.ui.config: Value for `requestPermissions` must be an array\");\n\t\t\t} else {\n\t\t\t\tAccounts.ui._options.requestPermissions[service] = scope;\n\t\t\t}\n\t\t});\n\t}\n\tif (typeof options.extraSignupFields !== 'object' || !options.extraSignupFields instanceof Array) {\n\t\tthrow new Error(\"Accounts.ui.config: `extraSignupFields` must be an array.\");\n\t} else {\n\t\tif (options.extraSignupFields) {\n\t\t\t_.each(options.extraSignupFields, function (field, index) {\n\t\t\t\tif (!field.fieldName || !field.fieldLabel) {\n\t\t\t\t\tthrow new Error(\"Accounts.ui.config: `extraSignupFields` objects must have `fieldName` and `fieldLabel` attributes.\");\n\t\t\t\t}\n\t\t\t\tif (typeof field.visible === 'undefined') {\n\t\t\t\t\tfield.visible = true;\n\t\t\t\t}\n\t\t\t\tAccounts.ui._options.extraSignupFields[index] = field;\n\t\t\t});\n\t\t}\n\t}\n\n\t// deal with `requestOfflineToken`\n\tif (options.requestOfflineToken) {\n\t\t_.each(options.requestOfflineToken, function (value, service) {\n\t\t\tif (service !== 'google') {\n\t\t\t\tthrow new Error(\"Accounts.ui.config: `requestOfflineToken` only supported for Google login at the moment.\");\n\t\t\t}\n\t\t\tif (Accounts.ui._options.requestOfflineToken[service]) {\n\t\t\t\tthrow new Error(\"Accounts.ui.config: Can't set `requestOfflineToken` more than once for \" + service);\n\t\t\t} else {\n\t\t\t\tAccounts.ui._options.requestOfflineToken[service] = value;\n\t\t\t}\n\t\t});\n\t}\n\n\t// deal with `forceApprovalPrompt`\n\tif (options.forceApprovalPrompt) {\n\t\t_.each(options.forceApprovalPrompt, function (value, service) {\n\t\t\tif (service !== 'google') {\n\t\t\t\tthrow new Error(\"Accounts.ui.config: `forceApprovalPrompt` only supported for Google login at the moment.\");\n\t\t\t}\n\t\t\tif (Accounts.ui._options.forceApprovalPrompt[service]) {\n\t\t\t\tthrow new Error(\"Accounts.ui.config: Can't set `forceApprovalPrompt` more than once for \" + service);\n\t\t\t} else {\n\t\t\t\tAccounts.ui._options.forceApprovalPrompt[service] = value;\n\t\t\t}\n\t\t});\n\t}\n};\n\nAccounts.ui._passwordSignupFields = function () {\n\treturn Accounts.ui._options.passwordSignupFields || \"EMAIL_ONLY\";\n};","ast":null,"map":{"version":3,"sources":["/server/accounts_ui.js"],"names":[],"mappings":"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","file":"/server/accounts_ui.js.map","sourcesContent":["if (!Accounts.ui){\n\tAccounts.ui = {};\n}\n\nif (!Accounts.ui._options) {\n\tAccounts.ui._options = {\n\t\textraSignupFields: [],\n\t\trequestPermissions: {},\n\t\trequestOfflineToken: {},\n\t\tforceApprovalPrompt: {},\n\t\tforceEmailLowercase: false,\n\t\tforceUsernameLowercase: false,\n\t\tforcePasswordLowercase: false\n\t};\n}\n\nAccounts.ui.navigate = function (route, hash) {\n\t// if router is iron-router\n\tif (window.Router && _.isFunction(Router.go)) {\n\t\tRouter.go(route, hash);\n\t}\n}\n\nAccounts.ui.config = function(options) {\n\t// validate options keys\n\tvar VALID_KEYS = ['passwordSignupFields', 'extraSignupFields', 'forceEmailLowercase', 'forceUsernameLowercase','forcePasswordLowercase',\n\t'requestPermissions', 'requestOfflineToken', 'forceApprovalPrompt'];\n\n\t_.each(_.keys(options), function(key) {\n\t\tif (!_.contains(VALID_KEYS, key)){\n\t\t\tthrow new Error(\"Accounts.ui.config: Invalid key: \" + key);\n\t\t}\n\t});\n\n\toptions.extraSignupFields = options.extraSignupFields || [];\n\n\t// deal with `passwordSignupFields`\n\tif (options.passwordSignupFields) {\n\t\tif (_.contains([\n\t\t\t\"USERNAME_AND_EMAIL_CONFIRM\",\n\t\t\t\"USERNAME_AND_EMAIL\",\n\t\t\t\"USERNAME_AND_OPTIONAL_EMAIL\",\n\t\t\t\"USERNAME_ONLY\",\n\t\t\t\"EMAIL_ONLY\"\n\t\t], options.passwordSignupFields)) {\n\t\t\tif (Accounts.ui._options.passwordSignupFields){\n\t\t\t\tthrow new Error(\"Accounts.ui.config: Can't set `passwordSignupFields` more than once\");\n\t\t\t} else {\n\t\t\t\tAccounts.ui._options.passwordSignupFields = options.passwordSignupFields;\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Error(\"Accounts.ui.config: Invalid option for `passwordSignupFields`: \" + options.passwordSignupFields);\n\t\t}\n\t}\n\n\tAccounts.ui._options.forceEmailLowercase = options.forceEmailLowercase;\n\tAccounts.ui._options.forceUsernameLowercase = options.forceUsernameLowercase;\n\tAccounts.ui._options.forcePasswordLowercase = options.forcePasswordLowercase;\n\n\t// deal with `requestPermissions`\n\tif (options.requestPermissions) {\n\t\t_.each(options.requestPermissions, function(scope, service) {\n\t\t\tif (Accounts.ui._options.requestPermissions[service]) {\n\t\t\t\tthrow new Error(\"Accounts.ui.config: Can't set `requestPermissions` more than once for \" + service);\n\t\t\t} else if (!(scope instanceof Array)) {\n\t\t\t\tthrow new Error(\"Accounts.ui.config: Value for `requestPermissions` must be an array\");\n\t\t\t} else {\n\t\t\t\tAccounts.ui._options.requestPermissions[service] = scope;\n\t\t\t}\n\t\t});\n\t}\n\tif (typeof options.extraSignupFields !== 'object' || !options.extraSignupFields instanceof Array) {\n\t\tthrow new Error(\"Accounts.ui.config: `extraSignupFields` must be an array.\");\n\t} else {\n\t\tif (options.extraSignupFields) {\n\t\t\t_.each(options.extraSignupFields, function(field, index) {\n\t\t\t\tif (!field.fieldName || !field.fieldLabel){\n\t\t\t\t\tthrow new Error(\"Accounts.ui.config: `extraSignupFields` objects must have `fieldName` and `fieldLabel` attributes.\");\n\t\t\t\t}\n\t\t\t\tif (typeof field.visible === 'undefined'){\n\t\t\t\t\tfield.visible = true;\n\t\t\t\t}\n\t\t\t\tAccounts.ui._options.extraSignupFields[index] = field;\n\t\t\t});\n\t\t}\n\t}\n\n\t// deal with `requestOfflineToken`\n\tif (options.requestOfflineToken) {\n\t\t_.each(options.requestOfflineToken, function (value, service) {\n\t\t\tif (service !== 'google'){\n\t\t\t\tthrow new Error(\"Accounts.ui.config: `requestOfflineToken` only supported for Google login at the moment.\");\n\t\t\t}\n\t\t\tif (Accounts.ui._options.requestOfflineToken[service]) {\n\t\t\t\tthrow new Error(\"Accounts.ui.config: Can't set `requestOfflineToken` more than once for \" + service);\n\t\t\t} else {\n\t\t\t\tAccounts.ui._options.requestOfflineToken[service] = value;\n\t\t\t}\n\t\t});\n\t}\n\n\t// deal with `forceApprovalPrompt`\n\tif (options.forceApprovalPrompt) {\n\t\t_.each(options.forceApprovalPrompt, function (value, service) {\n\t\t\tif (service !== 'google'){\n\t\t\t\tthrow new Error(\"Accounts.ui.config: `forceApprovalPrompt` only supported for Google login at the moment.\");\n\t\t\t}\n\t\t\tif (Accounts.ui._options.forceApprovalPrompt[service]) {\n\t\t\t\tthrow new Error(\"Accounts.ui.config: Can't set `forceApprovalPrompt` more than once for \" + service);\n\t\t\t} else {\n\t\t\t\tAccounts.ui._options.forceApprovalPrompt[service] = value;\n\t\t\t}\n\t\t});\n\t}\n};\n\nAccounts.ui._passwordSignupFields = function() {\n\treturn Accounts.ui._options.passwordSignupFields || \"EMAIL_ONLY\";\n};\n"]},"hash":"d1b292465ab15ba58c735d32ce12211728188908"}
